public class HazelcastTopicProducerTest extends HazelcastCamelTestSupport {
  @Mock private ITopic<String> topic;
  @Override protected void trainHazelcastInstance(  HazelcastInstance hazelcastInstance){
    when(hazelcastInstance.<String>getTopic("bar")).thenReturn(topic);
  }
  @Override protected void verifyHazelcastInstance(  HazelcastInstance hazelcastInstance){
    verify(hazelcastInstance,atLeastOnce()).getTopic("bar");
  }
  @After public void verifyQueueMock(){
    verifyNoMoreInteractions(topic);
  }
  @Test(expected=CamelExecutionException.class) public void testWithInvalidOperation(){
    template.sendBody("direct:publishInvalid","foo");
  }
  @Test public void noOperation(){
    template.sendBody("direct:no-operation","bar");
    verify(topic).publish("bar");
  }
  @Test public void publish(){
    template.sendBody("direct:publish","bar");
    verify(topic).publish("bar");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:no-operation").to(String.format("hazelcast-%sbar",HazelcastConstants.TOPIC_PREFIX));
        from("direct:publishInvalid").setHeader(HazelcastConstants.OPERATION,constant("bogus")).to(String.format("hazelcast-%sbar",HazelcastConstants.TOPIC_PREFIX));
        from("direct:publish").setHeader(HazelcastConstants.OPERATION,constant(HazelcastOperation.PUBLISH)).to(String.format("hazelcast-%sbar",HazelcastConstants.TOPIC_PREFIX));
      }
    }
;
  }
}
