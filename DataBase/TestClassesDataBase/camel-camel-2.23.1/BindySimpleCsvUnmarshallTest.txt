@ContextConfiguration public class BindySimpleCsvUnmarshallTest extends AbstractJUnit4SpringContextTests {
  private static final String URI_MOCK_RESULT="mock:result";
  private static final String URI_MOCK_ERROR="mock:error";
  private static final String URI_DIRECT_START="direct:start";
  @Produce(uri=URI_DIRECT_START) private ProducerTemplate template;
  @EndpointInject(uri=URI_MOCK_RESULT) private MockEndpoint result;
  @EndpointInject(uri=URI_MOCK_ERROR) private MockEndpoint error;
  private String expected;
  @Test @DirtiesContext public void testUnMarshallMessage() throws Exception {
    expected="01,,Albert,Cartier,ISIN,BE12345678,SELL,,1500,EUR,08-01-2009\r\n" + "02,A1,,Preud'Homme,ISIN,XD12345678,BUY,,2500,USD,08-01-2009\r\n" + "03,A2,Jacques,,,BE12345678,SELL,,1500,EUR,08-01-2009\r\n"+ "04,A3,Michel,Dupond,,,BUY,,2500,USD,08-01-2009\r\n"+ "05,A4,Annie,Dutronc,ISIN,BE12345678,,,1500,EUR,08-01-2009\r\n"+ "06,A5,Andr"+ "\uc3a9"+ ",Rieux,ISIN,XD12345678,SELL,Share,,USD,08-01-2009\r\n"+ "07,A6,Myl"+ "\uc3a8"+ "ne,Farmer,ISIN,BE12345678,BUY,1500,,,08-01-2009\r\n"+ "08,A7,Eva,Longoria,ISIN,XD12345678,SELL,Share,2500,USD,\r\n"+ ",,,D,,BE12345678,SELL,,,,08-01-2009\r\n"+ ",,,D,ISIN,BE12345678,,,,,08-01-2009\r\n"+ ",,,D,ISIN,LU123456789,,,,,\r\n"+ "10,A8,Pauline,M,ISIN,XD12345678,SELL,Share,2500,USD,08-01-2009\r\n"+ "10,A9,Pauline,M,ISIN,XD12345678,BUY,Share,2500.45,USD,08-01-2009";
    template.sendBody(expected);
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
  }
  @Test @DirtiesContext public void testMessageWithErroneousDate() throws Exception {
    expected="1,B2,Keira,Knightley,ISIN,XX23456789,BUY,Share,400.25,EUR,14-01-2009-01\r\n";
    template.sendBody(expected);
    result.expectedMessageCount(0);
    error.expectedMessageCount(1);
    result.assertIsSatisfied();
    error.assertIsSatisfied();
    Exception cause=error.getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    TestSupport.assertIsInstanceOf(FormatException.class,cause.getCause());
    assertEquals("Date provided does not fit the pattern defined, position: 11, line: 1",cause.getMessage());
  }
  @SuppressWarnings("unchecked") @Test @DirtiesContext public void testUnMarshallMessageWithMissingFields() throws Exception {
    expected="01,,,Cartier,ISIN,BE12345678,SELL,,1500,EUR\r\n" + "02,A1,,Preud'Homme,ISIN,XD12345678,BUY,,2500,USD,08-01-2009\r\n" + "03,A2,Jacques,,,BE12345678,SELL,,1500,EUR,08-01-2009\r\n"+ "04,A3,Michel,Dupond,,,BUY,,2500,USD,08-01-2009\r\n"+ "05,A4,Annie,Dutronc,ISIN,BE12345678,,,1500,EUR,08-01-2009\r\n"+ "06,A5,Andr"+ "\uc3a9"+ ",Rieux,ISIN,XD12345678,SELL,Share,,USD,08-01-2009\r\n"+ "07,A6,Myl"+ "\uc3a8"+ "ne,Farmer,ISIN,BE12345678,BUY,1500,,,08-01-2009\r\n"+ "08,A7,Eva,Longoria,ISIN,XD12345678,SELL,Share,2500,USD,\r\n"+ ",,,D,,BE12345678,SELL,,,,08-01-2009\r\n"+ ",,,D,ISIN,BE12345678,,,,,08-01-2009\r\n"+ ",,,D,ISIN,LU123456789,,,,,\r\n"+ "10,A8,Pauline,M,ISIN,XD12345678,SELL,Share,2500,USD,08-01-2009\r\n"+ "10,A9,Pauline,M,ISIN,XD12345678,BUY,Share,2500.45";
    template.sendBody(expected);
    List<Order> orders=(List<Order>)result.getExchanges().get(0).getIn().getBody();
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    assertNotNull(orders);
    assertFalse(orders.get(0).getFirstName().isEmpty());
    assertEquals("Joe",orders.get(0).getFirstName());
    assertEquals("",orders.get(0).getClientNr());
  }
public static class ContextConfig extends RouteBuilder {
    BindyCsvDataFormat camelDataFormat=new BindyCsvDataFormat(org.apache.camel.dataformat.bindy.model.simple.oneclass.Order.class);
    public void configure(){
      Tracer tracer=new Tracer();
      tracer.setLogLevel(LoggingLevel.ERROR);
      tracer.setLogName("org.apache.camel.bindy");
      getContext().addInterceptStrategy(tracer);
      errorHandler(deadLetterChannel(URI_MOCK_ERROR).redeliveryDelay(0));
      onException(Exception.class).maximumRedeliveries(0).handled(true);
      from(URI_DIRECT_START).unmarshal(camelDataFormat).to(URI_MOCK_RESULT);
    }
  }
}
