public class ZipkinRouteConcurrentTest extends CamelTestSupport {
  private ZipkinTracer zipkin;
  protected void setSpanReporter(  ZipkinTracer zipkin){
    zipkin.setSpanReporter(Reporter.NOOP);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    zipkin=new ZipkinTracer();
    zipkin.addClientServiceMapping("seda:foo","foo");
    zipkin.addServerServiceMapping("seda:bar","bar");
    setSpanReporter(zipkin);
    zipkin.init(context);
    return context;
  }
  @Test public void testZipkinRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(5).create();
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:foo","Hello World");
    }
    assertTrue(notify.matches(30,TimeUnit.SECONDS));
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?concurrentConsumers=5").routeId("foo").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).to("seda:bar");
        from("seda:bar?concurrentConsumers=5").routeId("bar").log("routing at ${routeId}").delay(simple("${random(0,500)}"));
      }
    }
;
  }
}
