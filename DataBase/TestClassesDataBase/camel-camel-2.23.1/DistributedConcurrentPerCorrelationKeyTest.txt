/** 
 * @version
 */
public class DistributedConcurrentPerCorrelationKeyTest extends AbstractDistributedTest {
  private MemoryAggregationRepository sharedAggregationRepository=new MemoryAggregationRepository(true);
  private int size=200;
  private final String uri="direct:start";
  @Test public void testAggregateConcurrentPerCorrelationKey() throws Exception {
    ExecutorService service=Executors.newFixedThreadPool(50);
    List<Callable<Object>> tasks=new ArrayList<>();
    for (int i=0; i < size; i++) {
      final int id=i % 25;
      final int choice=i % 2;
      final int count=i;
      tasks.add(new Callable<Object>(){
        public Object call() throws Exception {
          if (choice == 0) {
            template.sendBodyAndHeader(uri,"" + count,"id",id);
          }
 else {
            template2.sendBodyAndHeader(uri,"" + count,"id",id);
          }
          return null;
        }
      }
);
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    MockEndpoint mock2=getMockEndpoint2("mock:result");
    service.invokeAll(tasks);
    service.shutdown();
    service.awaitTermination(10,TimeUnit.SECONDS);
    int contextCount=mock.getReceivedCounter();
    int context2Count=mock2.getReceivedCounter();
    assertEquals(25,contextCount + context2Count);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new BodyInAggregatingStrategy()).aggregationRepository(sharedAggregationRepository).optimisticLocking().completionSize(8).to("mock:result");
      }
    }
;
  }
}
