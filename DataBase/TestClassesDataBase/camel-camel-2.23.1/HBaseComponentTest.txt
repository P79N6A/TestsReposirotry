public class HBaseComponentTest {
  @Test public void testHBaseConfigurationClassLoaderSetToAppContextClassLoader() throws Exception {
    ClassLoader expectedClassLoader=HBaseComponentTest.class.getClassLoader();
    CamelContext camelContext=new DefaultCamelContext();
    camelContext.setApplicationContextClassLoader(expectedClassLoader);
    HBaseComponent component=new HBaseComponent(new DefaultCamelContext());
    component.doStart();
    component.doStop();
    ClassLoader actualClassLoader=component.getConfiguration().getClassLoader();
    Assert.assertSame(expectedClassLoader,actualClassLoader);
  }
  @Test public void testHBaseConfigurationClassLoaderNotOverridden() throws Exception {
    ClassLoader expectedClassLoader=HBaseComponentTest.class.getClassLoader().getParent();
    Configuration configuration=HBaseConfiguration.create();
    configuration.setClassLoader(expectedClassLoader);
    HBaseComponent component=new HBaseComponent(new DefaultCamelContext());
    component.setConfiguration(configuration);
    try {
      component.doStart();
    }
 catch (    IOException e) {
    }
    component.doStop();
    ClassLoader actualClassLoader=component.getConfiguration().getClassLoader();
    Assert.assertSame(expectedClassLoader,actualClassLoader);
  }
  @Test public void testHBaseConfigurationClassLoaderSetToDefault() throws Exception {
    ClassLoader expectedClassLoader=HBaseConfiguration.class.getClassLoader();
    HBaseComponent component=new HBaseComponent(new DefaultCamelContext());
    component.doStart();
    component.doStop();
    ClassLoader actualClassLoader=component.getConfiguration().getClassLoader();
    Assert.assertSame(expectedClassLoader,actualClassLoader);
  }
}
