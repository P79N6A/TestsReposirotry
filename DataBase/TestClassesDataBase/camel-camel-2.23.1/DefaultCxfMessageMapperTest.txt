public class DefaultCxfMessageMapperTest extends Assert {
  @Test public void testRequestUriAndPath(){
    final String requestURI="/path;a=b";
    final String requestPath="/path";
    DefaultCxfMessageMapper mapper=new DefaultCxfMessageMapper();
    Exchange camelExchange=setupCamelExchange(requestURI,requestPath,null);
    Message cxfMessage=mapper.createCxfMessageFromCamelExchange(camelExchange,mock(HeaderFilterStrategy.class));
    assertEquals(requestURI,cxfMessage.get(Message.REQUEST_URI).toString());
    assertEquals(requestPath,cxfMessage.get(Message.BASE_PATH).toString());
  }
  @Test public void testSecurityContext(){
    DefaultCxfMessageMapper mapper=new DefaultCxfMessageMapper();
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getUserPrincipal()).thenReturn(new SimplePrincipal("barry"));
    when(request.isUserInRole("role1")).thenReturn(true);
    when(request.isUserInRole("role2")).thenReturn(false);
    Exchange camelExchange=setupCamelExchange("/","/",request);
    Message cxfMessage=mapper.createCxfMessageFromCamelExchange(camelExchange,mock(HeaderFilterStrategy.class));
    SecurityContext sc=cxfMessage.get(SecurityContext.class);
    assertNotNull(sc);
    assertEquals("barry",sc.getUserPrincipal().getName());
    assertTrue(sc.isUserInRole("role1"));
    assertFalse(sc.isUserInRole("role2"));
  }
  private Exchange setupCamelExchange(  String requestURI,  String requestPath,  HttpServletRequest request){
    org.apache.camel.Message camelMessage=mock(org.apache.camel.Message.class);
    Exchange camelExchange=mock(Exchange.class);
    when(camelExchange.getProperty(CamelTransportConstants.CXF_EXCHANGE,org.apache.cxf.message.Exchange.class)).thenReturn(new ExchangeImpl());
    when(camelExchange.hasOut()).thenReturn(false);
    when(camelExchange.getIn()).thenReturn(camelMessage);
    when(camelMessage.getHeaders()).thenReturn(Collections.emptyMap());
    when(camelMessage.getHeader(Exchange.CONTENT_TYPE,String.class)).thenReturn(null);
    when(camelMessage.getHeader("Accept",String.class)).thenReturn(null);
    when(camelMessage.getHeader(Exchange.HTTP_CHARACTER_ENCODING,String.class)).thenReturn(null);
    when(camelMessage.getHeader(Exchange.CHARSET_NAME,String.class)).thenReturn(null);
    when(camelMessage.getHeader(Exchange.HTTP_URI,String.class)).thenReturn(requestURI);
    when(camelMessage.getHeader(Exchange.HTTP_PATH,String.class)).thenReturn(requestPath);
    when(camelMessage.getHeader(Exchange.HTTP_BASE_URI,String.class)).thenReturn(requestPath);
    when(camelMessage.getHeader(Exchange.HTTP_METHOD,String.class)).thenReturn("GET");
    when(camelMessage.getHeader(Exchange.HTTP_QUERY,String.class)).thenReturn("");
    when(camelMessage.getHeader(Exchange.HTTP_SERVLET_REQUEST)).thenReturn(request);
    when(camelMessage.getHeader(Exchange.HTTP_SERVLET_RESPONSE)).thenReturn(null);
    when(camelMessage.getBody(InputStream.class)).thenReturn(new ByteArrayInputStream("".getBytes()));
    return camelExchange;
  }
}
