/** 
 * Unit test for writing done files
 */
public class FilerConsumerPreMoveDoneFileNameTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/done");
    super.setUp();
  }
  @Test public void testDoneFile() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBodyAndHeader("file:target/done","Hello World",Exchange.FILE_NAME,"hello.txt");
    Thread.sleep(250);
    assertMockEndpointsSatisfied();
    resetMocks();
    oneExchangeDone.reset();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/done","",Exchange.FILE_NAME,"ready");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    File file=new File("target/done/ready");
    assertFalse("Done file should be deleted: " + file,file.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/done?preMove=work/work-${file:name}&doneFileName=ready&initialDelay=0&delay=10").to("mock:result");
      }
    }
;
  }
}
