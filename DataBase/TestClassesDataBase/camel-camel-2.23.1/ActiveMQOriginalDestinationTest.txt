/** 
 * @version 
 */
public class ActiveMQOriginalDestinationTest extends CamelTestSupport {
  protected String componentName="activemq";
  @Test public void testActiveMQOriginalDestination() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
    Exchange out=consumer.receive("activemq:queue:bar",5000);
    assertNotNull(out);
    JmsMessage msg=out.getIn(JmsMessage.class);
    Message jms=msg.getJmsMessage();
    ActiveMQMessage amq=assertIsInstanceOf(ActiveMQMessage.class,jms);
    ActiveMQDestination original=amq.getOriginalDestination();
    assertNotNull(original);
    assertEquals("foo",original.getPhysicalName());
    assertEquals("Queue",original.getDestinationTypeAsString());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    JmsComponent jms=camelContext.getComponent(componentName,JmsComponent.class);
    jms.setMessageCreatedStrategy(new OriginalDestinationPropagateStrategy());
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").to("activemq:queue:bar").to("mock:result");
      }
    }
;
  }
  /** 
 * A strategy to enrich JMS message with their original destination if the Camel route originates from a JMS destination. <p/> This implementation uses ActiveMQ specific code which can be moved to activemq-camel when it supports Camel 2.16
 */
private class OriginalDestinationPropagateStrategy implements MessageCreatedStrategy {
    @Override public void onMessageCreated(    Message message,    Session session,    Exchange exchange,    Throwable cause){
      if (exchange.getIn() instanceof JmsMessage) {
        JmsMessage msg=exchange.getIn(JmsMessage.class);
        Message jms=msg.getJmsMessage();
        if (message instanceof ActiveMQMessage) {
          ActiveMQMessage amq=(ActiveMQMessage)jms;
          ActiveMQDestination from=amq.getDestination();
          if (from != null && message instanceof ActiveMQMessage) {
            ((ActiveMQMessage)message).setOriginalDestination(from);
          }
        }
      }
    }
  }
}
