public class ElSqlProducerStreamListTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    jndi.bind("dataSource",db);
    return jndi;
  }
  @Test public void testReturnAnIterator() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","testmsg");
    mock.assertIsSatisfied();
    assertThat(resultBodyAt(mock,0),instanceOf(Iterator.class));
  }
  @Test public void testSplit() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    template.sendBody("direct:withSplit","testmsg");
    mock.assertIsSatisfied();
    assertThat(resultBodyAt(mock,0),instanceOf(Map.class));
    assertThat(resultBodyAt(mock,1),instanceOf(Map.class));
    assertThat(resultBodyAt(mock,2),instanceOf(Map.class));
  }
  @Test public void testSplitWithModel() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    template.sendBody("direct:withSplitModel","testmsg");
    mock.assertIsSatisfied();
    assertThat(resultBodyAt(mock,0),instanceOf(Project.class));
    assertThat(resultBodyAt(mock,1),instanceOf(Project.class));
    assertThat(resultBodyAt(mock,2),instanceOf(Project.class));
  }
  private Object resultBodyAt(  MockEndpoint result,  int index){
    return result.assertExchangeReceived(index).getIn().getBody();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().getComponent("elsql",ElsqlComponent.class).setDataSource(db);
        from("direct:start").to("elsql:allProjects:elsql/projects.elsql?outputType=StreamList").to("log:stream").to("mock:result");
        from("direct:withSplit").to("elsql:allProjects:elsql/projects.elsql?outputType=StreamList").to("log:stream").split(body()).streaming().to("log:row").to("mock:result").end();
        from("direct:withSplitModel").to("elsql:allProjects:elsql/projects.elsql?outputType=StreamList&outputClass=org.apache.camel.component.elsql.Project").to("log:stream").split(body()).streaming().to("log:row").to("mock:result").end();
      }
    }
;
  }
}
