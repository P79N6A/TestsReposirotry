@RunWith(MockitoJUnitRunner.class) public class SpringBatchEndpointTest extends CamelTestSupport {
  @Mock JobLauncher jobLauncher;
  @Mock JobLauncher alternativeJobLauncher;
  @Mock JobRegistry jobRegistry;
  @Mock Job job;
  @Mock Job dynamicMockjob;
  @EndpointInject(uri="mock:test") MockEndpoint mockEndpoint;
  @EndpointInject(uri="mock:error") MockEndpoint errorEndpoint;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("spring-batch:mockJob").to("mock:test");
        from("direct:dynamic").to("spring-batch:fake?jobFromHeader=true").errorHandler(deadLetterChannel("mock:error")).to("mock:test");
        from("direct:dynamicWithJobRegistry").to("spring-batch:fake?jobFromHeader=true&jobRegistry=#jobRegistry").errorHandler(deadLetterChannel("mock:error")).to("mock:test");
      }
    }
;
  }
  @Override public JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("jobLauncher",jobLauncher);
    registry.bind("alternativeJobLauncher",alternativeJobLauncher);
    registry.bind("mockJob",job);
    registry.bind("dynamicMockjob",dynamicMockjob);
    registry.bind("jobRegistry",jobRegistry);
    return registry;
  }
  @Test public void dynamicJobFailsIfHeaderNotPressent() throws Exception {
    mockEndpoint.expectedMessageCount(0);
    errorEndpoint.expectedMessageCount(1);
    sendBody("direct:dyanmic","Start the job, please.");
    mockEndpoint.assertIsSatisfied();
    mockEndpoint.assertIsSatisfied();
  }
  @Test public void dynamicJobFailsIfHeaderWithInvalidJobName() throws Exception {
    mockEndpoint.expectedMessageCount(0);
    errorEndpoint.expectedMessageCount(1);
    header(SpringBatchConstants.JOB_NAME).append("thisJobDoesNotExsistAtAll" + Date.from(Instant.now()));
    sendBody("direct:dyanmic","Start the job, please.");
    mockEndpoint.assertIsSatisfied();
    mockEndpoint.assertIsSatisfied();
  }
  @Test public void dynamicJobWorksIfHeaderPressentWithValidJob() throws Exception {
    mockEndpoint.expectedMessageCount(1);
    errorEndpoint.expectedMessageCount(0);
    final Map<String,Object> headers=new HashMap<>();
    headers.put(SpringBatchConstants.JOB_NAME,"dynamicMockjob");
    sendBody("direct:dynamic","Start the job, please.",headers);
    mockEndpoint.assertIsSatisfied();
    errorEndpoint.assertIsSatisfied();
  }
  @Test public void dynamicJobWorksIfHeaderPresentWithValidJobLocatedInJobRegistry() throws Exception {
    mockEndpoint.expectedMessageCount(1);
    errorEndpoint.expectedMessageCount(0);
    Job mockJob=mock(Job.class);
    when(jobRegistry.getJob(eq("dyanmicMockJobFromJobRegistry"))).thenReturn(mockJob);
    final Map<String,Object> headers=new HashMap<>();
    headers.put(SpringBatchConstants.JOB_NAME,"dyanmicMockJobFromJobRegistry");
    headers.put("jobRegistry","#jobRegistry");
    sendBody("direct:dynamicWithJobRegistry","Start the job, please.",headers);
    mockEndpoint.assertIsSatisfied();
    errorEndpoint.assertIsSatisfied();
  }
  @Test public void shouldInjectJobToEndpoint() throws IllegalAccessException {
    SpringBatchEndpoint batchEndpoint=getMandatoryEndpoint("spring-batch:mockJob",SpringBatchEndpoint.class);
    Job batchEndpointJob=(Job)FieldUtils.readField(batchEndpoint,"job",true);
    assertSame(job,batchEndpointJob);
  }
  @Test public void shouldRunJob() throws Exception {
    sendBody("direct:start","Start the job, please.");
    verify(jobLauncher).run(eq(job),any(JobParameters.class));
  }
  @Test public void shouldReturnJobExecution() throws Exception {
    JobExecution jobExecution=mock(JobExecution.class);
    when(jobLauncher.run(eq(job),any(JobParameters.class))).thenReturn(jobExecution);
    sendBody("direct:start","Start the job, please.");
    mockEndpoint.expectedBodiesReceived(jobExecution);
  }
  @Test(expected=FailedToCreateRouteException.class) public void shouldThrowExceptionIfUsedAsConsumer() throws Exception {
    context().addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("spring-batch:mockJob").to("direct:emptyEndpoint");
      }
    }
);
  }
  @Test public void shouldConvertHeadersToJobParams() throws Exception {
    String headerKey="headerKey";
    String headerValue="headerValue";
    template.sendBodyAndHeader("direct:start","Start the job, please.",headerKey,headerValue);
    ArgumentCaptor<JobParameters> jobParameters=ArgumentCaptor.forClass(JobParameters.class);
    verify(jobLauncher).run(any(Job.class),jobParameters.capture());
    String parameter=jobParameters.getValue().getString(headerKey);
    assertEquals(parameter,headerValue);
  }
  @Test public void setNullValueToJobParams() throws Exception {
    String headerKey="headerKey";
    Date headerValue=null;
    template.sendBodyAndHeader("direct:start","Start the job, please.",headerKey,headerValue);
    ArgumentCaptor<JobParameters> jobParameters=ArgumentCaptor.forClass(JobParameters.class);
    verify(jobLauncher).run(any(Job.class),jobParameters.capture());
    Date parameter=jobParameters.getValue().getDate(headerKey);
    assertEquals(parameter,headerValue);
  }
  @Test public void shouldConvertDateHeadersToJobParams() throws Exception {
    String headerKey="headerKey";
    Date headerValue=new Date();
    template.sendBodyAndHeader("direct:start","Start the job, please.",headerKey,headerValue);
    ArgumentCaptor<JobParameters> jobParameters=ArgumentCaptor.forClass(JobParameters.class);
    verify(jobLauncher).run(any(Job.class),jobParameters.capture());
    Date parameter=jobParameters.getValue().getDate(headerKey);
    assertEquals(parameter,headerValue);
  }
  @Test public void shouldConvertLongHeadersToJobParams() throws Exception {
    String headerKey="headerKey";
    Long headerValue=1L;
    template.sendBodyAndHeader("direct:start","Start the job, please.",headerKey,headerValue);
    ArgumentCaptor<JobParameters> jobParameters=ArgumentCaptor.forClass(JobParameters.class);
    verify(jobLauncher).run(any(Job.class),jobParameters.capture());
    Long parameter=jobParameters.getValue().getLong(headerKey);
    assertEquals(parameter,headerValue);
  }
  @Test public void shouldConvertDoubleHeadersToJobParams() throws Exception {
    String headerKey="headerKey";
    Double headerValue=1.0;
    template.sendBodyAndHeader("direct:start","Start the job, please.",headerKey,headerValue);
    ArgumentCaptor<JobParameters> jobParameters=ArgumentCaptor.forClass(JobParameters.class);
    verify(jobLauncher).run(any(Job.class),jobParameters.capture());
    Double parameter=jobParameters.getValue().getDouble(headerKey);
    assertEquals(parameter,headerValue);
  }
  @Test public void shouldInjectJobLauncherByReferenceName() throws Exception {
    context().addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:launcherRefTest").to("spring-batch:mockJob?jobLauncher=#alternativeJobLauncher");
      }
    }
);
    template.sendBody("direct:launcherRefTest","Start the job, please.");
    SpringBatchEndpoint batchEndpoint=context().getEndpoint("spring-batch:mockJob?jobLauncher=#alternativeJobLauncher",SpringBatchEndpoint.class);
    JobLauncher batchEndpointJobLauncher=(JobLauncher)FieldUtils.readField(batchEndpoint,"jobLauncher",true);
    assertSame(alternativeJobLauncher,batchEndpointJobLauncher);
  }
  @Test(expected=FailedToCreateRouteException.class) public void shouldFailWhenThereIsNoJobLauncher() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("mockJob",job);
    CamelContext camelContext=new DefaultCamelContext(registry);
    camelContext.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("spring-batch:mockJob");
      }
    }
);
    camelContext.start();
  }
  @Test(expected=FailedToCreateRouteException.class) public void shouldFailWhenThereIsMoreThanOneJobLauncher() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("mockJob",job);
    registry.put("launcher1",jobLauncher);
    registry.put("launcher2",jobLauncher);
    CamelContext camelContext=new DefaultCamelContext(registry);
    camelContext.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("spring-batch:mockJob");
      }
    }
);
    camelContext.start();
  }
  @Test public void shouldResolveAnyJobLauncher() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("mockJob",job);
    registry.put("someRandomName",jobLauncher);
    CamelContext camelContext=new DefaultCamelContext(registry);
    camelContext.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("spring-batch:mockJob");
      }
    }
);
    camelContext.start();
    SpringBatchEndpoint batchEndpoint=camelContext.getEndpoint("spring-batch:mockJob",SpringBatchEndpoint.class);
    JobLauncher batchEndpointJobLauncher=(JobLauncher)FieldUtils.readField(batchEndpoint,"jobLauncher",true);
    assertSame(jobLauncher,batchEndpointJobLauncher);
  }
  @Test public void shouldUseJobLauncherFromComponent() throws Exception {
    SpringBatchComponent batchComponent=new SpringBatchComponent();
    batchComponent.setJobLauncher(alternativeJobLauncher);
    context.addComponent("customBatchComponent",batchComponent);
    context().addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:startCustom").to("customBatchComponent:mockJob");
      }
    }
);
    SpringBatchEndpoint batchEndpoint=context().getEndpoint("customBatchComponent:mockJob",SpringBatchEndpoint.class);
    JobLauncher batchEndpointJobLauncher=(JobLauncher)FieldUtils.readField(batchEndpoint,"jobLauncher",true);
    assertSame(alternativeJobLauncher,batchEndpointJobLauncher);
  }
  @Test public void shouldInjectJobRegistryByReferenceName() throws Exception {
    Job mockJob=mock(Job.class);
    when(jobRegistry.getJob(eq("mockJob"))).thenReturn(mockJob);
    context().addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:jobRegistryRefTest").to("spring-batch:mockJob?jobRegistry=#jobRegistry");
      }
    }
);
    template.sendBody("direct:jobRegistryRefTest","Start the job, please.");
    SpringBatchEndpoint batchEndpoint=context().getEndpoint("spring-batch:mockJob?jobRegistry=#jobRegistry",SpringBatchEndpoint.class);
    JobRegistry batchEndpointJobRegistry=(JobRegistry)FieldUtils.readField(batchEndpoint,"jobRegistry",true);
    assertSame(jobRegistry,batchEndpointJobRegistry);
  }
  @Test public void shouldUseJobRegistryFromComponent() throws Exception {
    SpringBatchComponent batchComponent=new SpringBatchComponent();
    batchComponent.setJobRegistry(jobRegistry);
    batchComponent.setJobLauncher(jobLauncher);
    context.addComponent("customBatchComponent",batchComponent);
    context().addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:startCustom").to("customBatchComponent:mockJob");
      }
    }
);
    SpringBatchEndpoint batchEndpoint=context().getEndpoint("customBatchComponent:mockJob",SpringBatchEndpoint.class);
    JobRegistry batchEndpointJobRegistry=(JobRegistry)FieldUtils.readField(batchEndpoint,"jobRegistry",true);
    assertSame(jobRegistry,batchEndpointJobRegistry);
  }
  @Test public void shouldGetJobFromJobRegistry() throws Exception {
    Job mockJobFromJobRegistry=mock(Job.class);
    when(jobRegistry.getJob(eq("mockJobFromJobRegistry"))).thenReturn(mockJobFromJobRegistry);
    context().addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:jobRegistryTest").to("spring-batch:mockJobFromJobRegistry?jobRegistry=#jobRegistry");
      }
    }
);
    SpringBatchEndpoint batchEndpoint=context().getEndpoint("spring-batch:mockJobFromJobRegistry?jobRegistry=#jobRegistry",SpringBatchEndpoint.class);
    Job batchEndpointJob=(Job)FieldUtils.readField(batchEndpoint,"job",true);
    assertSame(mockJobFromJobRegistry,batchEndpointJob);
  }
}
