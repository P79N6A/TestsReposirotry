@RunWith(ParallelParameterized.class) public class BulkApiJobIntegrationTest extends AbstractBulkApiTestBase {
  @Parameter(0) public JobInfo jobInfo;
  @Parameter(1) public String operationName;
  @Before public void setupProfileWithHardDelete() throws IOException {
    final SalesforceLoginConfig loginConfig=LoginConfigHelper.getLoginConfig();
    template().requestBodyAndHeader("salesforce:apexCall/UpdateProfile?apexMethod=PATCH&sObjectClass=java.lang.String",null,SalesforceEndpointConfig.APEX_QUERY_PARAM_PREFIX + "username",loginConfig.getUserName());
  }
  @Test public void testJobLifecycle() throws Exception {
    log.info("Testing Job lifecycle for {} of type {}",jobInfo.getOperation(),jobInfo.getContentType());
    jobInfo=createJob(jobInfo);
    jobInfo=template().requestBody("direct:getJob",jobInfo,JobInfo.class);
    assertSame("Job should be OPEN",JobStateEnum.OPEN,jobInfo.getState());
    jobInfo=template().requestBody("direct:closeJob",jobInfo,JobInfo.class);
    assertSame("Job should be CLOSED",JobStateEnum.CLOSED,jobInfo.getState());
    jobInfo=template().requestBody("direct:abortJob",jobInfo,JobInfo.class);
    assertSame("Job should be ABORTED",JobStateEnum.ABORTED,jobInfo.getState());
  }
  @Parameters(name="operation = {1}") public static Iterable<Object[]> getJobs(){
    final List<JobInfo> result=new ArrayList<>();
    final JobInfo insertXml=new JobInfo();
    insertXml.setObject(Merchandise__c.class.getSimpleName());
    insertXml.setContentType(ContentType.XML);
    insertXml.setOperation(OperationEnum.INSERT);
    result.add(insertXml);
    JobInfo insertCsv=new JobInfo();
    insertCsv=new JobInfo();
    insertCsv.setObject(Merchandise__c.class.getSimpleName());
    insertCsv.setContentType(ContentType.CSV);
    insertCsv.setOperation(OperationEnum.INSERT);
    result.add(insertCsv);
    final JobInfo updateCsv=new JobInfo();
    updateCsv.setObject(Merchandise__c.class.getSimpleName());
    updateCsv.setContentType(ContentType.CSV);
    updateCsv.setOperation(OperationEnum.UPDATE);
    result.add(updateCsv);
    final JobInfo upsertCsv=new JobInfo();
    upsertCsv.setObject(Merchandise__c.class.getSimpleName());
    upsertCsv.setContentType(ContentType.CSV);
    upsertCsv.setOperation(OperationEnum.UPSERT);
    upsertCsv.setExternalIdFieldName("Name");
    result.add(upsertCsv);
    final JobInfo deleteCsv=new JobInfo();
    deleteCsv.setObject(Merchandise__c.class.getSimpleName());
    deleteCsv.setContentType(ContentType.CSV);
    deleteCsv.setOperation(OperationEnum.DELETE);
    result.add(deleteCsv);
    final JobInfo hardDeleteCsv=new JobInfo();
    hardDeleteCsv.setObject(Merchandise__c.class.getSimpleName());
    hardDeleteCsv.setContentType(ContentType.CSV);
    hardDeleteCsv.setOperation(OperationEnum.HARD_DELETE);
    result.add(hardDeleteCsv);
    final JobInfo queryCsv=new JobInfo();
    queryCsv.setObject(Merchandise__c.class.getSimpleName());
    queryCsv.setContentType(ContentType.CSV);
    queryCsv.setOperation(OperationEnum.QUERY);
    result.add(queryCsv);
    return result.stream().map(j -> new Object[]{j,j.getOperation().name()}).collect(Collectors.toList());
  }
}
