public class MongoDbHeaderHandlingTest extends AbstractMongoDbTest {
  @Test public void testInHeadersTransferredToOutOnCount(){
    assertEquals(0,testCollection.count());
    Exchange result=template.request("direct:count",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("irrelevant body");
        exchange.getIn().setHeader("abc","def");
      }
    }
);
    assertTrue("Result is not of type Long",result.getOut().getBody() instanceof Long);
    assertEquals("Test collection should not contain any records",0L,result.getOut().getBody());
    assertEquals("An input header was not returned","def",result.getOut().getHeader("abc"));
  }
  @Test public void testInHeadersTransferredToOutOnInsert(){
    Exchange result=template.request("direct:insert",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("{\"_id\":\"testInsertString\", \"scientist\":\"Einstein\"}");
        exchange.getIn().setHeader("abc","def");
      }
    }
);
    assertEquals("An input header was not returned","def",result.getOut().getHeader("abc"));
    DBObject b=testCollection.find(new BasicDBObject("_id","testInsertString")).first();
    assertNotNull("No record with 'testInsertString' _id",b);
  }
  @Test public void testWriteResultAsHeaderWithWriteOp(){
    assertEquals(0,testCollection.count());
    Object[] req=new Object[]{"{\"_id\":\"testSave1\", \"scientist\":\"Einstein\"}","{\"_id\":\"testSave2\", \"scientist\":\"Copernicus\"}"};
    template.requestBody("direct:insert",req);
    assertEquals("Number of records persisted must be 2",2,testCollection.count());
    final DBObject record1=testCollection.find(new BasicDBObject("_id","testSave1")).first();
    assertEquals("Scientist field of 'testSave1' must equal 'Einstein'","Einstein",record1.get("scientist"));
    record1.put("scientist","Darwin");
    Exchange resultExch=template.request("direct:save",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(record1);
      }
    }
);
    assertTrue(resultExch.getOut().getBody() instanceof BasicDBObject);
    assertTrue(resultExch.getOut().getBody().equals(record1));
    assertTrue(resultExch.getOut().getHeader(MongoDbConstants.WRITERESULT) instanceof UpdateResult);
    DBObject record2=testCollection.find(new BasicDBObject("_id","testSave1")).first();
    assertEquals("Scientist field of 'testSave1' must equal 'Darwin' after save operation","Darwin",record2.get("scientist"));
  }
  @Test public void testWriteResultAsHeaderWithReadOp(){
    Exchange resultExch=template.request("direct:getDbStats",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("irrelevantBody");
        exchange.getIn().setHeader("abc","def");
      }
    }
);
    assertTrue(resultExch.getOut().getBody() instanceof Document);
    assertNull(resultExch.getOut().getHeader(MongoDbConstants.WRITERESULT));
    assertEquals("def",resultExch.getOut().getHeader("abc"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:count").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true");
        from("direct:save").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=save&writeConcern=SAFE&writeResultAsHeader=true");
        from("direct:getDbStats").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=getDbStats&writeResultAsHeader=true");
        from("direct:insert").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&writeConcern=SAFE");
      }
    }
;
  }
}
