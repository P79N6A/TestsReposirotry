public class RemoveHeadersTest extends ContextTestSupport {
  @Test public void testRemoveHeadersWildcard() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:end");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("duck","Donald");
    Map<String,Object> headers=new HashMap<>();
    headers.put("dudeCool","cool");
    headers.put("dudeWicket","wicket");
    headers.put("duck","Donald");
    headers.put("foo","bar");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
    assertEquals(2,mock.getReceivedExchanges().get(0).getIn().getHeaders().size());
  }
  @Test public void testRemoveHeadersRegEx() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:end");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("duck","Donald");
    mock.expectedHeaderReceived("BeerHeineken","Good");
    Map<String,Object> headers=new HashMap<>();
    headers.put("dudeCool","cool");
    headers.put("dudeWicket","wicket");
    headers.put("duck","Donald");
    headers.put("BeerCarlsberg","Great");
    headers.put("BeerTuborg","Also Great");
    headers.put("BeerHeineken","Good");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
    assertEquals(3,mock.getReceivedExchanges().get(0).getIn().getHeaders().size());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").removeHeaders("dude*").removeHeaders("Beer(Carlsberg|Tuborg)").removeHeaders("foo").to("mock:end");
      }
    }
;
  }
}
