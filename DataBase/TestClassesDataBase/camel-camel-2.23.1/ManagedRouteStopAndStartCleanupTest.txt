/** 
 * Extended test to see if mbeans is removed and stats are correct
 * @version 
 */
public class ManagedRouteStopAndStartCleanupTest extends ManagedRouteStopAndStartTest {
  @Test public void testStopAndStartRoute() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=getRouteObjectName(mbeanServer);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file://target/managed","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be started",ServiceStatus.Started.name(),state);
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Long completed=(Long)mbeanServer.getAttribute(on,"ExchangesCompleted");
      assertEquals(1,completed.longValue());
    }
);
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=consumers,*"),null);
    assertEquals("Should be 1 consumer",1,set.size());
    set=mbeanServer.queryNames(new ObjectName("*:type=processors,*"),null);
    assertEquals("Should be 2 processors",2,set.size());
    log.info(">>>>>>>>>>>>>>>>>> invoking stop <<<<<<<<<<<<<<<<<<<<<");
    mbeanServer.invoke(on,"stop",null,null);
    log.info(">>>>>>>>>>>>>>>>>> invoking stop DONE <<<<<<<<<<<<<<<<<<<<<");
    state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be stopped",ServiceStatus.Stopped.name(),state);
    set=mbeanServer.queryNames(new ObjectName("*:type=consumers,*"),null);
    assertEquals("Should be 0 consumer",0,set.size());
    set=mbeanServer.queryNames(new ObjectName("*:type=processors,*"),null);
    assertEquals("Should be 0 processor",0,set.size());
    mock.reset();
    mock.expectedBodiesReceived("Bye World");
    mock.setResultWaitTime(2000);
    template.sendBodyAndHeader("file://target/managed","Bye World",Exchange.FILE_NAME,"bye.txt");
    mock.assertIsNotSatisfied();
    mock.reset();
    mock.expectedBodiesReceived("Bye World");
    log.info(">>>>>>>>>>>>>>>>> invoking start <<<<<<<<<<<<<<<<<<");
    mbeanServer.invoke(on,"start",null,null);
    log.info(">>>>>>>>>>>>>>>>> invoking start DONE <<<<<<<<<<<<<<<<<<");
    state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be started",ServiceStatus.Started.name(),state);
    set=mbeanServer.queryNames(new ObjectName("*:type=consumers,*"),null);
    assertEquals("Should be 1 consumer",1,set.size());
    set=mbeanServer.queryNames(new ObjectName("*:type=processors,*"),null);
    assertEquals("Should be 2 processors",2,set.size());
    mock.assertIsSatisfied();
    await().atMost(1,TimeUnit.SECONDS).until(() -> {
      Long num=(Long)mbeanServer.getAttribute(on,"ExchangesCompleted");
      return num == 2;
    }
);
    Long completed=(Long)mbeanServer.getAttribute(on,"ExchangesCompleted");
    assertEquals(2,completed.longValue());
  }
}
