public class SalesforceComponentVerifierExtensionIntegrationTest extends CamelTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  protected Map<String,Object> getParameters(){
    SalesforceLoginConfig loginConfig=LoginConfigHelper.getLoginConfig();
    HashMap<String,Object> parameters=new HashMap<>();
    parameters.put("clientId",loginConfig.getClientId());
    parameters.put("clientSecret",loginConfig.getClientSecret());
    parameters.put("userName",loginConfig.getUserName());
    parameters.put("password",loginConfig.getPassword());
    return parameters;
  }
  public static String getSystemPropertyOrEnvVar(  String systemProperty){
    String answer=System.getProperty(systemProperty);
    if (ObjectHelper.isEmpty(answer)) {
      String envProperty=systemProperty.toUpperCase().replaceAll("[.-]","_");
      answer=System.getenv(envProperty);
    }
    return answer;
  }
  protected ComponentVerifierExtension getExtension(){
    Component component=context().getComponent("salesforce");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    return verifier;
  }
  @Test public void testConnectivity(){
    Map<String,Object> parameters=getParameters();
    ComponentVerifierExtension.Result result=getExtension().verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testConnectivityWithWrongUserName(){
    Map<String,Object> parameters=getParameters();
    parameters.put("userName","not-a-salesforce-user");
    ComponentVerifierExtension.Result result=getExtension().verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(2,result.getErrors().size());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION,result.getErrors().get(0).getCode());
    Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE));
    Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof SalesforceException);
    Assert.assertEquals(400,result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE));
    Assert.assertEquals("invalid_grant",result.getErrors().get(1).getDetail("salesforce_code"));
  }
  @Test public void testConnectivityWithWrongSecrets(){
    Map<String,Object> parameters=getParameters();
    parameters.put("clientId","wrong-client-id");
    parameters.put("clientSecret","wrong-client-secret");
    ComponentVerifierExtension.Result result=getExtension().verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(ComponentVerifier.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(2,result.getErrors().size());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION,result.getErrors().get(0).getCode());
    Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE));
    Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof SalesforceException);
    Assert.assertEquals(400,result.getErrors().get(0).getDetails().get(ComponentVerifier.VerificationError.HttpAttribute.HTTP_CODE));
    Assert.assertEquals("invalid_client_id",result.getErrors().get(1).getDetail("salesforce_code"));
  }
}
