/** 
 * Unit test for using JMS as DLQ and to preserve the Exchange using transferExchange=true option
 * @version 
 */
public class JmsDeadLetterQueueUsingTransferExchangeTest extends CamelTestSupport {
  protected String getUri(){
    return "activemq:queue:dead?transferExchange=true";
  }
  @Test public void testOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testKabom() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:dead");
    mock.expectedBodiesReceived("Kabom");
    template.sendBody("direct:start","Kabom");
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel(getUri()).disableRedelivery());
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("Kabom".equals(body)) {
              throw new IllegalArgumentException("Kabom");
            }
          }
        }
).to("mock:result");
        from(getUri()).to("mock:dead");
      }
    }
;
  }
}
