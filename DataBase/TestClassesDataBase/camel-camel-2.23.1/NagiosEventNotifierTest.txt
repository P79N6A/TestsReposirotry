/** 
 * @version 
 */
public class NagiosEventNotifierTest extends CamelTestSupport {
  protected boolean canRun;
  @Mock private PassiveCheckSender nagiosPassiveCheckSender=Mockito.mock(NagiosPassiveCheckSender.class);
  @Override protected boolean useJmx(){
    return true;
  }
  @Before @Override public void setUp() throws Exception {
    canRun=true;
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    NagiosEventNotifier notifier=new NagiosEventNotifier(nagiosPassiveCheckSender);
    notifier.getConfiguration().setHost("localhost");
    notifier.getConfiguration().setPort(25669);
    notifier.getConfiguration().setPassword("password");
    CamelContext context=super.createCamelContext();
    context.getManagementStrategy().addEventNotifier(notifier);
    return context;
  }
  @Test public void testNagiosEventNotifierOk() throws Exception {
    if (!canRun) {
      return;
    }
    getMockEndpoint("mock:ok").expectedMessageCount(1);
    template.sendBody("direct:ok","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
    verify(nagiosPassiveCheckSender,atLeast(11)).send(any(MessagePayload.class));
  }
  @Test public void testNagiosEventNotifierError() throws Exception {
    if (!canRun) {
      return;
    }
    try {
      template.sendBody("direct:fail","Bye World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
    context.stop();
    verify(nagiosPassiveCheckSender,atLeast(9)).send(any(MessagePayload.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:ok").to("mock:ok");
        from("direct:fail").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
}
