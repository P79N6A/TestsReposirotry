public class LimitsIntegrationTest extends AbstractSalesforceTestBase {
  private static final Object NOT_USED=null;
  @Test public void shouldFetchLimitsForOrganization(){
    final Limits limits=template.requestBody("direct:test-limits",NOT_USED,Limits.class);
    assertNotNull("Should fetch limits from Salesforce REST API",limits);
    assertLimitIsFetched("ConcurrentAsyncGetReportInstances",limits.getConcurrentAsyncGetReportInstances());
    assertLimitIsFetched("ConcurrentSyncReportRuns",limits.getConcurrentSyncReportRuns());
    assertLimitIsFetched("DailyApiRequests",limits.getDailyApiRequests());
    assertLimitIsFetched("DailyAsyncApexExecutions",limits.getDailyAsyncApexExecutions());
    assertLimitIsFetched("DailyBulkApiRequests",limits.getDailyBulkApiRequests());
    assertLimitIsFetched("DailyDurableGenericStreamingApiEvents",limits.getDailyDurableGenericStreamingApiEvents());
    assertLimitIsFetched("DailyDurableStreamingApiEvents",limits.getDailyDurableStreamingApiEvents());
    assertLimitIsFetched("DailyGenericStreamingApiEvents",limits.getDailyGenericStreamingApiEvents());
    assertLimitIsFetched("DailyStreamingApiEvents",limits.getDailyStreamingApiEvents());
    assertLimitIsFetched("DailyWorkflowEmails",limits.getDailyWorkflowEmails());
    assertLimitIsFetched("DataStorageMB",limits.getDataStorageMB());
    assertLimitIsFetched("DurableStreamingApiConcurrentClients",limits.getDurableStreamingApiConcurrentClients());
    assertLimitIsFetched("FileStorageMB",limits.getFileStorageMB());
    assertLimitIsFetched("HourlyAsyncReportRuns",limits.getHourlyAsyncReportRuns());
    assertLimitIsFetched("HourlyDashboardRefreshes",limits.getHourlyDashboardRefreshes());
    assertLimitIsFetched("HourlyDashboardResults",limits.getHourlyDashboardResults());
    assertLimitIsFetched("HourlyDashboardStatuses",limits.getHourlyDashboardStatuses());
    assertLimitIsFetched("HourlyODataCallout",limits.getHourlyODataCallout());
    assertLimitIsFetched("HourlySyncReportRuns",limits.getHourlySyncReportRuns());
    assertLimitIsFetched("HourlyTimeBasedWorkflow",limits.getHourlyTimeBasedWorkflow());
    assertLimitIsFetched("MassEmail",limits.getMassEmail());
    assertLimitIsFetched("SingleEmail",limits.getSingleEmail());
    assertLimitIsFetched("StreamingApiConcurrentClients",limits.getStreamingApiConcurrentClients());
  }
  private static void assertLimitIsFetched(  String property,  Usage usage){
    assertNotNull("Usage for `" + property + "` should be defined",usage);
    assertNotEquals("Max usage for `" + property + "` should be defined",0,usage.getMax());
    assertNotEquals("Remaining usage for `" + property + "` should be defined",0,usage.getRemaining());
  }
  @Override protected RouteBuilder doCreateRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:test-limits").to("salesforce:limits");
      }
    }
;
  }
}
