/** 
 * Concurrent consumer with JMSReply test.
 */
public class JmsConcurrentConsumersTest extends CamelTestSupport {
  @Test public void testConcurrentConsumersWithReply() throws Exception {
    final CountDownLatch latch=new CountDownLatch(5);
    ThreadPoolTaskExecutor executor=new ThreadPoolTaskExecutor();
    executor.setCorePoolSize(5);
    executor.afterPropertiesSet();
    for (int i=0; i < 5; i++) {
      final int count=i;
      executor.execute(new Runnable(){
        public void run(){
          Object response=template.requestBody("activemq:a","World #" + count);
          assertEquals("Bye World #" + count,response);
          latch.countDown();
        }
      }
);
    }
    long start=System.currentTimeMillis();
    assertTrue(latch.await(30000L,TimeUnit.MILLISECONDS));
    assertEquals("Latch should be zero",0,latch.getCount());
    long delta=System.currentTimeMillis() - start;
    assertTrue("Should be faster than 20000 millis, took " + delta + " millis",delta < 20000L);
    executor.shutdown();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("activemq:a?concurrentConsumers=3").to("activemq:b?concurrentConsumers=3");
        from("activemq:b?concurrentConsumers=3").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            Thread.sleep(3000);
            exchange.getOut().setBody("Bye " + body);
          }
        }
);
      }
    }
;
  }
}
