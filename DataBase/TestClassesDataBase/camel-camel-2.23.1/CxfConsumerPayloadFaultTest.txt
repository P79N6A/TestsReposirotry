/** 
 * Unit test to verify CxfConsumer to generate SOAP fault in PAYLOAD mode
 * @version 
 */
public class CxfConsumerPayloadFaultTest extends CamelTestSupport {
  protected static final String PORT_NAME_PROP="portName={http://camel.apache.org/wsdl-first}soap";
  protected static final String SERVICE_NAME="{http://camel.apache.org/wsdl-first}PersonService";
  protected static final String SERVICE_NAME_PROP="serviceName=" + SERVICE_NAME;
  protected static final String WSDL_URL_PROP="wsdlURL=classpath:person.wsdl";
  protected static final String DETAILS="<detail><UnknownPersonFault xmlns=\"http://camel.apache.org/wsdl-first/types\">" + "<personId></personId></UnknownPersonFault></detail>";
  protected final String serviceAddress="http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/PersonService";
  protected final String fromURI="cxf://" + serviceAddress + "?"+ PORT_NAME_PROP+ "&"+ SERVICE_NAME_PROP+ "&"+ WSDL_URL_PROP+ "&dataFormat=payload";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(fromURI).process(new Processor(){
          public void process(          final Exchange exchange) throws Exception {
            QName faultCode=new QName("http://schemas.xmlsoap.org/soap/envelope/","Server");
            SoapFault fault=new SoapFault("Get the null value of person name",faultCode);
            Element details=StaxUtils.read(new StringReader(DETAILS)).getDocumentElement();
            fault.setDetail(details);
            exchange.setException(fault);
          }
        }
);
      }
    }
;
  }
  @Test public void testInvokingFromCxfClient() throws Exception {
    URL wsdlURL=getClass().getClassLoader().getResource("person.wsdl");
    PersonService ss=new PersonService(wsdlURL,QName.valueOf(SERVICE_NAME));
    Person client=ss.getSoap();
    Client c=ClientProxy.getClient(client);
    c.getInInterceptors().add(new LoggingInInterceptor());
    c.getOutInterceptors().add(new LoggingOutInterceptor());
    ((BindingProvider)client).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,serviceAddress);
    Holder<String> personId=new Holder<>();
    personId.value="";
    Holder<String> ssn=new Holder<>();
    Holder<String> name=new Holder<>();
    Throwable t=null;
    try {
      client.getPerson(personId,ssn,name);
      fail("expect UnknownPersonFault");
    }
 catch (    UnknownPersonFault e) {
      t=e;
      assertEquals("Get the wrong fault detail","",e.getFaultInfo().getPersonId());
    }
    assertNotNull(t);
    assertTrue(t instanceof UnknownPersonFault);
  }
}
