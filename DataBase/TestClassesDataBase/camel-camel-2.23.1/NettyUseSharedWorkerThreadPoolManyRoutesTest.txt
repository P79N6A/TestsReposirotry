/** 
 * @version 
 */
public class NettyUseSharedWorkerThreadPoolManyRoutesTest extends BaseNettyTest {
  private JndiRegistry jndi;
  private EventLoopGroup sharedBoosGroup;
  private EventLoopGroup sharedWorkerGroup;
  private int before;
  @Override protected boolean useJmx(){
    return true;
  }
  @Override @Before public void setUp() throws Exception {
    before=Thread.activeCount();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    jndi=super.createRegistry();
    return jndi;
  }
  @Test public void testSharedThreadPool() throws Exception {
    int delta=Thread.activeCount() - before;
    log.info("Created threads {}",delta);
    assertTrue("There should not be created so many threads: " + delta,delta < 50);
    sharedBoosGroup.shutdownGracefully().awaitUninterruptibly();
    sharedWorkerGroup.shutdownGracefully().awaitUninterruptibly();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        sharedWorkerGroup=new NettyWorkerPoolBuilder().withWorkerCount(10).build();
        jndi.bind("sharedWorker",sharedWorkerGroup);
        sharedBoosGroup=new NettyServerBossPoolBuilder().withBossCount(20).build();
        jndi.bind("sharedBoss",sharedBoosGroup);
        for (int i=0; i < 60; i++) {
          from("netty4:tcp://localhost:" + getNextPort() + "?textline=true&sync=true&usingExecutorService=false"+ "&bossGroup=#sharedBoss&workerGroup=#sharedWorker").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello","Bye"));
        }
      }
    }
;
  }
}
