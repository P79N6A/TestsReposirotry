public class AggregateCompletionOnNewCorrelationGroupTest extends ContextTestSupport {
  @Test public void testCompletionOnNewCorrelationGroup() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("AA","BB","CCC");
    template.sendBodyAndHeader("direct:start","A","id","1");
    template.sendBodyAndHeader("direct:start","A","id","1");
    template.sendBodyAndHeader("direct:start","B","id","2");
    template.sendBodyAndHeader("direct:start","B","id","2");
    template.sendBodyAndHeader("direct:start","C","id","3");
    template.sendBodyAndHeader("direct:start","C","id","3");
    template.sendBodyAndHeader("direct:start","C","id","3");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionOnNewCorrelationGroup().completionSize(3).to("log:aggregated","mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
