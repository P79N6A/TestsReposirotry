/** 
 * @version 
 */
public class AsyncEndpointDelayUoWTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  private MySynchronization sync=new MySynchronization();
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertTrue(oneExchangeDone.matchesMockWaitTime());
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
    assertEquals(1,sync.isOnComplete());
    assertEquals(0,sync.isOnFailure());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
            exchange.addOnCompletion(sync);
          }
        }
).to("mock:before").to("log:before").delay(500).asyncDelayed().process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).transform().constant("Bye Camel").to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
private static class MySynchronization extends SynchronizationAdapter {
    private AtomicInteger onComplete=new AtomicInteger();
    private AtomicInteger onFailure=new AtomicInteger();
    public void onComplete(    Exchange exchange){
      onComplete.incrementAndGet();
    }
    @Override public void onFailure(    Exchange exchange){
      onFailure.incrementAndGet();
    }
    public int isOnComplete(){
      return onComplete.get();
    }
    public int isOnFailure(){
      return onFailure.get();
    }
  }
}
