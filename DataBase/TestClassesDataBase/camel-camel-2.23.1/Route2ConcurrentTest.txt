public class Route2ConcurrentTest extends CamelAwsXRayTestSupport {
  public Route2ConcurrentTest(){
    super(TestDataBuilder.createTrace().inRandomOrder().withSegment(TestDataBuilder.createSegment("foo")).withSegment(TestDataBuilder.createSegment("bar")),TestDataBuilder.createTrace().inRandomOrder().withSegment(TestDataBuilder.createSegment("foo")).withSegment(TestDataBuilder.createSegment("bar")),TestDataBuilder.createTrace().inRandomOrder().withSegment(TestDataBuilder.createSegment("foo")).withSegment(TestDataBuilder.createSegment("bar")),TestDataBuilder.createTrace().inRandomOrder().withSegment(TestDataBuilder.createSegment("foo")).withSegment(TestDataBuilder.createSegment("bar")),TestDataBuilder.createTrace().inRandomOrder().withSegment(TestDataBuilder.createSegment("foo")).withSegment(TestDataBuilder.createSegment("bar")));
  }
  @Test public void testConcurrentInvocationsOfRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:foo","Hello World");
    }
    assertThat("Not all exchanges were fully processed",notify.matches(10,TimeUnit.SECONDS),is(equalTo(true)));
    verify();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?concurrentConsumers=5").routeId("foo").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).to("seda:bar");
        from("seda:bar?concurrentConsumers=5").routeId("bar").log("routing at ${routeId}").delay(simple("${random(0,500)}"));
      }
    }
;
  }
}
