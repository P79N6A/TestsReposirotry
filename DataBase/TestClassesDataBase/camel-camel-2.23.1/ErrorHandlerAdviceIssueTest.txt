/** 
 * Based on user form issue
 * @version 
 */
public class ErrorHandlerAdviceIssueTest extends ContextTestSupport {
  @Test public void testErrorHandlerAdvice() throws Exception {
    RouteDefinition foo=context.getRouteDefinition("foo");
    foo.adviceWith(context,new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().throwException(new IllegalAccessException("Forced"));
      }
    }
);
    RouteDefinition error=context.getRouteDefinition("error");
    error.adviceWith(context,new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:file");
      }
    }
);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:file").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    context.stopRoute("timer");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        errorHandler(deadLetterChannel("direct:error").maximumRedeliveries(2).redeliveryDelay(0));
        from("direct:error").routeId("error").errorHandler(deadLetterChannel("log:dead?level=ERROR")).to("mock:error").to("file:error");
        from("timer://someTimer?delay=15000&fixedRate=true&period=5000").routeId("timer").to("log:level=INFO");
        from("direct:start").routeId("foo").to("seda:foo");
        from("seda:foo").to("mock:foo");
      }
    }
;
  }
}
