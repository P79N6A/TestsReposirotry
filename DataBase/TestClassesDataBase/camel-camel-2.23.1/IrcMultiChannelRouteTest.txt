/** 
 * @version 
 */
public class IrcMultiChannelRouteTest extends IrcIntegrationTestSupport {
  protected String body1="Message One";
  protected String body2="Message Two";
  protected String body3="Message Three";
  @EndpointInject(uri="mock:joined") private MockEndpoint joined;
  @Test public void testIrcMessages() throws Exception {
    resetMock(joined);
    joined.expectedMessageCount(2);
    joined.expectedHeaderValuesReceivedInAnyOrder(IrcConstants.IRC_TARGET,properties.get("channel1"),properties.get("channel2"));
    joined.assertIsSatisfied();
    sendMessages();
    resultEndpoint.expectedBodiesReceivedInAnyOrder(body1,body2,body3,body3);
    resultEndpoint.assertIsSatisfied();
    List<Exchange> list=resultEndpoint.getReceivedExchanges();
    for (    Exchange exchange : list) {
      log.info("Received exchange: " + exchange + " headers: "+ exchange.getIn().getHeaders());
    }
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fromUri()).choice().when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("PRIVMSG")).to("direct:mock").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to(joined);
        from("direct:mock").filter(e -> !e.getIn().getBody(String.class).contains("VERSION")).to(resultEndpoint);
      }
    }
;
  }
  /** 
 * Lets send messages once the consumer has joined
 */
  protected void sendMessages(){
    template.sendBodyAndHeader(sendUri(),body1,"irc.target",properties.get("channel1"));
    template.sendBodyAndHeader(sendUri(),body2,"irc.target",properties.get("channel2"));
    template.sendBody(sendUri(),body3);
  }
  @Override protected String sendUri(){
    return "ircs://camel-prd@{{server}}?nickname=camel-prd&channels={{channel1}},{{channel2}}";
  }
  @Override protected String fromUri(){
    return "ircs://camel-con@{{server}}??nickname=camel-con&channels={{channel1}},{{channel2}}";
  }
}
