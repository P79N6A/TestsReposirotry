/** 
 * @version 
 */
public class TwoCamelContextDirectEndpointTest extends Assert {
  private DefaultCamelContext camel1;
  private DefaultCamelContext camel2;
  @Before public void setUp() throws Exception {
    camel1=new DefaultCamelContext();
    camel1.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("direct:foo");
        from("direct:foo").to("mock:a");
      }
    }
);
    camel1.start();
    camel2=new DefaultCamelContext();
    camel2.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("direct:foo");
        from("direct:foo").to("mock:b");
      }
    }
);
    camel2.start();
  }
  @After public void tearDown() throws Exception {
    camel1.stop();
    camel2.stop();
  }
  @Test public void testTwoCamelContextDirectEndpoint() throws Exception {
    Endpoint start1=camel1.getEndpoint("direct:start");
    Endpoint start2=camel2.getEndpoint("direct:start");
    assertNotSame(start1,start2);
    Endpoint foo1=camel1.getEndpoint("direct:foo");
    Endpoint foo2=camel2.getEndpoint("direct:foo");
    assertNotSame(foo1,foo2);
    MockEndpoint mock1=camel1.getEndpoint("mock:a",MockEndpoint.class);
    mock1.expectedBodiesReceived("Hello World");
    MockEndpoint mock2=camel2.getEndpoint("mock:b",MockEndpoint.class);
    mock2.expectedBodiesReceived("Bye World");
    camel1.createProducerTemplate().sendBody("direct:start","Hello World");
    camel2.createProducerTemplate().sendBody("direct:start","Bye World");
    mock1.assertIsSatisfied();
    mock2.assertIsSatisfied();
  }
}
