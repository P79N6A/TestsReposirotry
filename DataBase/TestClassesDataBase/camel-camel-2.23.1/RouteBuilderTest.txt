/** 
 * @version 
 */
public class RouteBuilderTest extends TestSupport {
  protected Processor myProcessor=new MyProcessor();
  protected DelegateProcessor interceptor1;
  protected DelegateProcessor interceptor2;
  protected CamelContext createCamelContext(){
    DefaultCamelContext ctx=new DefaultCamelContext();
    ctx.setStreamCaching(Boolean.FALSE);
    return ctx;
  }
  protected List<Route> buildSimpleRoute() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").to("direct:b");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testSimpleRoute() throws Exception {
    List<Route> routes=buildSimpleRoute();
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      SendProcessor sendProcessor=assertIsInstanceOf(SendProcessor.class,channel.getNextProcessor());
      assertEquals("Endpoint URI","direct://b",sendProcessor.getDestination().getEndpointUri());
    }
  }
  protected List<Route> buildSimpleRouteWithHeaderPredicate() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").filter(header("foo").isEqualTo("bar")).to("direct:b");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testSimpleRouteWithHeaderPredicate() throws Exception {
    List<Route> routes=buildSimpleRouteWithHeaderPredicate();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      FilterProcessor filterProcessor=assertIsInstanceOf(FilterProcessor.class,channel.getNextProcessor());
      SendProcessor sendProcessor=assertIsInstanceOf(SendProcessor.class,unwrapChannel(filterProcessor).getNextProcessor());
      assertEquals("Endpoint URI","direct://b",sendProcessor.getDestination().getEndpointUri());
    }
  }
  protected List<Route> buildSimpleRouteWithChoice() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").choice().when(header("foo").isEqualTo("bar")).to("direct:b").when(header("foo").isEqualTo("cheese")).to("direct:c").otherwise().to("direct:d");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testSimpleRouteWithChoice() throws Exception {
    List<Route> routes=buildSimpleRouteWithChoice();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      ChoiceProcessor choiceProcessor=assertIsInstanceOf(ChoiceProcessor.class,channel.getNextProcessor());
      List<FilterProcessor> filters=choiceProcessor.getFilters();
      assertEquals("Should be two when clauses",2,filters.size());
      Processor filter1=filters.get(0);
      assertSendTo(unwrapChannel(((FilterProcessor)filter1).getProcessor()).getNextProcessor(),"direct://b");
      Processor filter2=filters.get(1);
      assertSendTo(unwrapChannel(((FilterProcessor)filter2).getProcessor()).getNextProcessor(),"direct://c");
      assertSendTo(unwrapChannel(choiceProcessor.getOtherwise()).getNextProcessor(),"direct://d");
    }
  }
  protected List<Route> buildCustomProcessor() throws Exception {
    myProcessor=new Processor(){
      public void process(      Exchange exchange){
        log.debug("Called with exchange: " + exchange);
      }
    }
;
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").process(myProcessor);
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testCustomProcessor() throws Exception {
    List<Route> routes=buildCustomProcessor();
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
    }
  }
  protected List<Route> buildCustomProcessorWithFilter() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").filter(header("foo").isEqualTo("bar")).process(myProcessor);
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testCustomProcessorWithFilter() throws Exception {
    List<Route> routes=buildCustomProcessorWithFilter();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
    }
  }
  protected List<Route> buildWireTap() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").multicast().to("direct:tap","direct:b");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testWireTap() throws Exception {
    List<Route> routes=buildWireTap();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      MulticastProcessor multicastProcessor=assertIsInstanceOf(MulticastProcessor.class,channel.getNextProcessor());
      List<Processor> endpoints=new ArrayList<>(multicastProcessor.getProcessors());
      assertEquals("Should have 2 endpoints",2,endpoints.size());
      assertSendToProcessor(unwrapChannel(endpoints.get(0)).getNextProcessor(),"direct://tap");
      assertSendToProcessor(unwrapChannel(endpoints.get(1)).getNextProcessor(),"direct://b");
    }
  }
  protected List<Route> buildRouteWithInterceptor() throws Exception {
    interceptor1=new org.apache.camel.processor.DelegateProcessor(){
    }
;
    interceptor2=new MyInterceptorProcessor();
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").process(interceptor1).process(interceptor2).to("direct:d");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testRouteWithInterceptor() throws Exception {
    List<Route> routes=buildRouteWithInterceptor();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Pipeline line=assertIsInstanceOf(Pipeline.class,unwrap(consumer.getProcessor()));
      assertEquals(3,line.getProcessors().size());
      List<Processor> processors=new ArrayList<>(line.getProcessors());
      Processor sendTo=assertIsInstanceOf(SendProcessor.class,unwrapChannel(processors.get(2)).getNextProcessor());
      assertSendTo(sendTo,"direct://d");
    }
  }
  @Test public void testComplexExpressions() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").filter(header("foo").isEqualTo(123)).to("direct:b");
      }
    }
;
    List<Route> routes=getRouteList(builder);
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
    }
  }
  protected List<Route> buildStaticRecipientList() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").multicast().to("direct:b","direct:c","direct:d");
      }
    }
;
    return getRouteList(builder);
  }
  protected List<Route> buildDynamicRecipientList() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").recipientList(header("foo"));
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testRouteDynamicReceipentList() throws Exception {
    List<Route> routes=buildDynamicRecipientList();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      Pipeline line=assertIsInstanceOf(Pipeline.class,channel.getNextProcessor());
      Iterator<?> it=line.getProcessors().iterator();
      Object first=it.next();
      first=assertIsInstanceOf(DeadLetterChannel.class,first).getOutput();
      assertIsInstanceOf(EvaluateExpressionProcessor.class,first);
      Object second=it.next();
      assertIsInstanceOf(RecipientList.class,second);
    }
  }
  protected List<Route> buildSplitter() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").split(body(String.class).tokenize("\n")).to("direct:b");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testSplitter() throws Exception {
    List<Route> routes=buildSplitter();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      assertIsInstanceOf(Splitter.class,channel.getNextProcessor());
    }
  }
  protected List<Route> buildIdempotentConsumer() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").idempotentConsumer(header("myMessageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("direct:b");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testIdempotentConsumer() throws Exception {
    List<Route> routes=buildIdempotentConsumer();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      IdempotentConsumer idempotentConsumer=assertIsInstanceOf(IdempotentConsumer.class,channel.getNextProcessor());
      assertEquals("messageIdExpression","header(myMessageId)",idempotentConsumer.getMessageIdExpression().toString());
      assertIsInstanceOf(MemoryIdempotentRepository.class,idempotentConsumer.getIdempotentRepository());
      SendProcessor sendProcessor=assertIsInstanceOf(SendProcessor.class,unwrapChannel(idempotentConsumer.getProcessor()).getNextProcessor());
      assertEquals("Endpoint URI","direct://b",sendProcessor.getDestination().getEndpointUri());
    }
  }
  protected List<Route> buildThreads() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:a").threads(5,10).to("mock:a").to("mock:b");
      }
    }
;
    return getRouteList(builder);
  }
  @Test public void testThreads() throws Exception {
    List<Route> routes=buildThreads();
    log.debug("Created routes: " + routes);
    assertEquals("Number routes created",1,routes.size());
    for (    Route route : routes) {
      Endpoint key=route.getEndpoint();
      assertEquals("From endpoint","direct://a",key.getEndpointUri());
      EventDrivenConsumerRoute consumer=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
      Channel channel=unwrapChannel(consumer.getProcessor());
      Pipeline line=assertIsInstanceOf(Pipeline.class,channel.getNextProcessor());
      Iterator<?> it=line.getProcessors().iterator();
      assertIsInstanceOf(ThreadsProcessor.class,it.next());
      Pipeline threadsLine=assertIsInstanceOf(Pipeline.class,it.next());
      Iterator<Processor> it2=threadsLine.getProcessors().iterator();
      assertIsInstanceOf(SendProcessor.class,unwrapChannel(it2.next()).getNextProcessor());
      assertIsInstanceOf(SendProcessor.class,unwrapChannel(it2.next()).getNextProcessor());
    }
  }
  protected void assertSendTo(  Processor processor,  String uri){
    if (!(processor instanceof SendProcessor)) {
      processor=unwrapErrorHandler(processor);
    }
    SendProcessor sendProcessor=assertIsInstanceOf(SendProcessor.class,processor);
    assertEquals("Endpoint URI",uri,sendProcessor.getDestination().getEndpointUri());
  }
  protected void assertSendToProcessor(  Processor processor,  String uri){
    if (!(processor instanceof Producer)) {
      processor=unwrapErrorHandler(processor);
    }
    if (processor instanceof SendProcessor) {
      assertSendTo(processor,uri);
    }
 else {
      Producer producer=assertIsInstanceOf(Producer.class,processor);
      assertEquals("Endpoint URI",uri,producer.getEndpoint().getEndpointUri());
    }
  }
  /** 
 * By default routes should be wrapped in the  {@link DeadLetterChannel} solets unwrap that and return the actual processor
 */
  protected Processor getProcessorWithoutErrorHandler(  Route route){
    EventDrivenConsumerRoute consumerRoute=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
    Processor processor=unwrap(consumerRoute.getProcessor());
    return unwrapErrorHandler(processor);
  }
  protected Processor unwrapErrorHandler(  Processor processor){
    if (processor instanceof DeadLetterChannel) {
      DeadLetterChannel deadLetter=(DeadLetterChannel)processor;
      return deadLetter.getOutput();
    }
 else {
      return processor;
    }
  }
  protected Processor unwrapDelegateProcessor(  Processor processor){
    if (processor instanceof DelegateProcessor) {
      DelegateProcessor delegate=(DelegateProcessor)processor;
      return delegate.getProcessor();
    }
 else {
      return processor;
    }
  }
  @Test public void testCorrectNumberOfRoutes() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:start").to("direct:in");
        from("direct:in").to("mock:result");
      }
    }
;
    List<Route> routes=getRouteList(builder);
    assertEquals(2,routes.size());
  }
}
