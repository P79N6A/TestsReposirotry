public class BonitaAuthFilterConnectionTest {
  @Rule public WireMockRule wireMockRule=new WireMockRule(0);
  @Mock private ClientRequestContext requestContext;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    Mockito.when(requestContext.getCookies()).thenReturn(new HashMap<String,Cookie>());
    Mockito.when(requestContext.getHeaders()).thenReturn(new MultivaluedHashMap());
  }
  @Test public void testConnection() throws Exception {
    String port=wireMockRule.port() + "";
    stubFor(post(urlEqualTo("/bonita/loginservice")).willReturn(aResponse().withHeader("Set-Cookie","JSESSIONID=something")));
    BonitaAPIConfig bonitaApiConfig=new BonitaAPIConfig("localhost",port,"username","password");
    BonitaAuthFilter bonitaAuthFilter=new BonitaAuthFilter(bonitaApiConfig);
    bonitaAuthFilter.filter(requestContext);
    assertEquals(1,requestContext.getHeaders().size());
  }
  @Test public void testConnectionSupportCSRF() throws Exception {
    String port=wireMockRule.port() + "";
    stubFor(post(urlEqualTo("/bonita/loginservice")).willReturn(aResponse().withHeader("Set-Cookie","JSESSIONID=something","X-Bonita-API-Token=something")));
    BonitaAPIConfig bonitaApiConfig=new BonitaAPIConfig("localhost",port,"username","password");
    BonitaAuthFilter bonitaAuthFilter=new BonitaAuthFilter(bonitaApiConfig);
    bonitaAuthFilter.filter(requestContext);
    assertEquals(2,requestContext.getHeaders().size());
  }
}
