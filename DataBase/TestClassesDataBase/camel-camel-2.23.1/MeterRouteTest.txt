@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes={MeterRouteTest.TestConfig.class},loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpoints public class MeterRouteTest {
  @EndpointInject(uri="mock:out") private MockEndpoint endpoint;
  @Produce(uri="direct:in-1") private ProducerTemplate producer1;
  @Produce(uri="direct:in-2") private ProducerTemplate producer2;
  private MetricRegistry mockRegistry;
  private Meter mockMeter;
  private InOrder inOrder;
@Configuration public static class TestConfig extends SingleRouteCamelConfiguration {
    @Bean @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:in-1").to("metrics:meter:A?mark=3179").to("mock:out");
          from("direct:in-2").to("metrics:meter:A").to("mock:out");
        }
      }
;
    }
    @Bean(name=METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry(){
      return Mockito.mock(MetricRegistry.class);
    }
  }
  @Before public void setup(){
    mockRegistry=endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME,MetricRegistry.class);
    mockMeter=Mockito.mock(Meter.class);
    inOrder=Mockito.inOrder(mockRegistry,mockMeter);
    when(mockRegistry.meter("A")).thenReturn(mockMeter);
  }
  @After public void tearDown(){
    endpoint.reset();
    reset(mockRegistry,mockMeter);
  }
  @Test public void testValueSetInUri() throws Exception {
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer1.sendBody(body);
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).meter("A");
    inOrder.verify(mockMeter,times(1)).mark(3179L);
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testValueNoSetInUri() throws Exception {
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer2.sendBody(body);
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).meter("A");
    inOrder.verify(mockMeter,times(1)).mark();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testOverrideMetricsName() throws Exception {
    when(mockRegistry.meter("B")).thenReturn(mockMeter);
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer1.sendBodyAndHeader(body,HEADER_METRIC_NAME,"B");
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).meter("B");
    inOrder.verify(mockMeter,times(1)).mark(3179L);
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testOverrideValueWithHeader() throws Exception {
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer1.sendBodyAndHeader(body,HEADER_METER_MARK,9926L);
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).meter("A");
    inOrder.verify(mockMeter,times(1)).mark(9926L);
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testValueNoSetInUriOverrideWithHeader() throws Exception {
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer2.sendBodyAndHeader(body,HEADER_METER_MARK,7707370L);
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).meter("A");
    inOrder.verify(mockMeter,times(1)).mark(7707370L);
    inOrder.verifyNoMoreInteractions();
  }
}
