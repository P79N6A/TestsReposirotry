/** 
 * This class tests an issue where an input file is not picked up due to a dynamic doneFileName containing two dots.
 */
public class FileConsumeDynamicDoneFileNameWithTwoDotsTest extends ContextTestSupport {
  private static final String TARGET_DIR_NAME="target/" + MethodHandles.lookup().lookupClass().getSimpleName();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory(TARGET_DIR_NAME);
    super.setUp();
  }
  @Test public void testDynamicDoneFileNameContainingTwoDots() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(1).create();
    getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("input-body");
    template.sendBodyAndHeader("file:" + TARGET_DIR_NAME,"input-body",Exchange.FILE_NAME,"test.twodot.txt");
    template.sendBodyAndHeader("file:" + TARGET_DIR_NAME,"done-body",Exchange.FILE_NAME,"test.twodot.done");
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    assertFalse("Input file should be deleted",new File(TARGET_DIR_NAME,"test.twodot.txt").exists());
    assertFalse("Done file should be deleted",new File(TARGET_DIR_NAME,"test.twodot.done").exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:" + TARGET_DIR_NAME + "?doneFileName=${file:name.noext}.done&initialDelay=0").to("mock:result");
      }
    }
;
  }
}
