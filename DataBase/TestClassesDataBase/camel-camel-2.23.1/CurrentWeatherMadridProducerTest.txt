public class CurrentWeatherMadridProducerTest extends BaseWeatherConsumerTest {
  @Test public void testGrabbingListOfEntries() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    mock.assertIsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    assertNotNull(exchange);
    Message in=exchange.getIn();
    assertNotNull(in);
    String weather=assertIsInstanceOf(String.class,in.getBody());
    checkWeatherContent(weather);
  }
  @Test public void testHeaderOverride() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World",WeatherConstants.WEATHER_LOCATION,"Paris,France");
    mock.assertIsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    assertNotNull(exchange);
    Message in=exchange.getIn();
    assertNotNull(in);
    String weather=assertIsInstanceOf(String.class,in.getBody());
    checkWeatherContent(weather);
  }
  @Test public void testHeaderOverrideCurrent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World",WeatherConstants.WEATHER_LOCATION,"Rome,Italy");
    mock.assertIsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    assertNotNull(exchange);
    Message in=exchange.getIn();
    assertNotNull(in);
    String weather=assertIsInstanceOf(String.class,in.getBody());
    checkWeatherContent(weather);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("weather:foo?location=Madrid,Spain&appid=9162755b2efa555823cfe0451d7fff38&geolocationAccessKey=test&geolocationRequestHostIP=test").to("mock:result");
      }
    }
;
  }
}
