/** 
 */
public class RetryWhileSimpleExpressionIssueTest extends ContextTestSupport {
  @Test public void testRetryWhileSimple() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:error").message(0).body().isInstanceOf(MyCoolDude.class);
    MyCoolDude dude=new MyCoolDude();
    template.sendBody("direct:start",dude);
    assertMockEndpointsSatisfied();
    assertEquals(3 + 1,dude.getCounter());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).retryWhile(simple("${body.areWeCool} == 'no'")).redeliveryDelay(0).handled(true).to("mock:error");
        from("direct:start").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
public static class MyCoolDude {
    private int counter;
    public String areWeCool(){
      if (counter++ < 3) {
        return "no";
      }
 else {
        return "yes";
      }
    }
    public int getCounter(){
      return counter;
    }
  }
}
