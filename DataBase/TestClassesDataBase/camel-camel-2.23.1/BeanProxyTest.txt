/** 
 * @version 
 */
public class BeanProxyTest extends ContextTestSupport {
  @Test public void testBeanProxyStringReturnString() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    String reply=service.submitOrderStringReturnString("<order type=\"book\">Camel in action</order>");
    assertEquals("<order id=\"123\">OK</order>",reply);
  }
  @Test public void testBeanProxyStringReturnDocument() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    Document reply=service.submitOrderStringReturnDocument("<order type=\"book\">Camel in action</order>");
    assertNotNull(reply);
    String s=context.getTypeConverter().convertTo(String.class,reply);
    assertEquals("<order id=\"123\">OK</order>",s);
  }
  @Test public void testBeanProxyDocumentReturnString() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    Document doc=context.getTypeConverter().convertTo(Document.class,"<order type=\"book\">Camel in action</order>");
    String reply=service.submitOrderDocumentReturnString(doc);
    assertEquals("<order id=\"123\">OK</order>",reply);
  }
  @Test public void testBeanProxyDocumentReturnDocument() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    Document doc=context.getTypeConverter().convertTo(Document.class,"<order type=\"book\">Camel in action</order>");
    Document reply=service.submitOrderDocumentReturnDocument(doc);
    assertNotNull(reply);
    String s=context.getTypeConverter().convertTo(String.class,reply);
    assertEquals("<order id=\"123\">OK</order>",s);
  }
  @Test public void testBeanProxyFailure() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    String reply=service.submitOrderStringReturnString("<order type=\"beer\">Carlsberg</order>");
    assertEquals("<order>FAIL</order>",reply);
  }
  @Test public void testBeanProxyFailureNotXMLBody() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    try {
      service.submitOrderStringReturnString("Hello World");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testBeanProxyVoidReturnType() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    service.doNothing("<order>ping</order>");
  }
  @Test public void testBeanProxyFailureInvalidReturnType() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:start");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    try {
      service.invalidReturnType("<order type=\"beer\">Carlsberg</order>");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
      InvalidPayloadException cause=assertIsInstanceOf(InvalidPayloadException.class,e.getCause());
      assertEquals(Integer.class,cause.getType());
    }
  }
  @Test public void testBeanProxyCallAnotherBean() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:bean");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    String reply=service.submitOrderStringReturnString("World");
    assertEquals("Hello World",reply);
  }
  @Test public void testProxyBuilderProxyCallAnotherBean() throws Exception {
    OrderService service=new ProxyBuilder(context).endpoint("direct:bean").build(OrderService.class);
    String reply=service.submitOrderStringReturnString("World");
    assertEquals("Hello World",reply);
  }
  @Test public void testBeanProxyCallAnotherBeanWithNoArgs() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:bean");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    String reply=service.doAbsolutelyNothing();
    assertEquals("Hi nobody",reply);
  }
  @Test public void testProxyBuilderProxyCallAnotherBeanWithNoArgs() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:bean");
    OrderService service=new ProxyBuilder(context).endpoint(endpoint).build(OrderService.class);
    String reply=service.doAbsolutelyNothing();
    assertEquals("Hi nobody",reply);
  }
  @Test public void testBeanProxyVoidAsInOut() throws Exception {
    Endpoint endpoint=context.getEndpoint("seda:delay");
    OrderService service=ProxyHelper.createProxy(endpoint,OrderService.class);
    getMockEndpoint("mock:delay").expectedBodiesReceived("Hello World","Bye World");
    service.doNothing("Hello World");
    template.sendBody("mock:delay","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testProxyBuilderVoidAsInOut() throws Exception {
    OrderService service=new ProxyBuilder(context).endpoint("seda:delay").build(OrderService.class);
    getMockEndpoint("mock:delay").expectedBodiesReceived("Hello World","Bye World");
    service.doNothing("Hello World");
    template.sendBody("mock:delay","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").choice().when(xpath("/order/@type = 'book'")).to("direct:book").otherwise().to("direct:other").end();
        from("direct:book").transform(constant("<order id=\"123\">OK</order>"));
        from("direct:other").transform(constant("<order>FAIL</order>"));
        from("direct:bean").bean(MyFooBean.class,"hello");
        from("seda:delay").delay(1000).to("mock:delay");
      }
    }
;
  }
public static class MyFooBean {
    public String hello(    String name){
      if (name != null) {
        return "Hello " + name;
      }
 else {
        return "Hi nobody";
      }
    }
  }
}
