/** 
 * A test case of the builder using Spring 2.0 to load the rules
 * @version 
 */
public class SpringXmlRouteBuilderTest extends RouteBuilderTest {
  protected AbstractXmlApplicationContext applicationContext;
  @Override protected List<Route> buildSimpleRoute(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildSimpleRoute.xml");
  }
  @Override protected List<Route> buildCustomProcessor(){
    List<Route> answer=getRoutesFromContext("org/apache/camel/spring/xml/buildCustomProcessor.xml");
    myProcessor=applicationContext.getBean("myProcessor",Processor.class);
    return answer;
  }
  @Override protected List<Route> buildCustomProcessorWithFilter(){
    List<Route> answer=getRoutesFromContext("org/apache/camel/spring/xml/buildCustomProcessorWithFilter.xml");
    myProcessor=applicationContext.getBean("myProcessor",Processor.class);
    return answer;
  }
  @Override protected List<Route> buildSimpleRouteWithHeaderPredicate(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildSimpleRouteWithHeaderPredicate.xml");
  }
  @Override protected List<Route> buildSimpleRouteWithChoice(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildSimpleRouteWithChoice.xml");
  }
  @Override protected List<Route> buildWireTap(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildWireTap.xml");
  }
  @Override protected List<Route> buildDynamicRecipientList(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildDynamicRecipientList.xml");
  }
  @Override protected List<Route> buildStaticRecipientList(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildStaticRecipientList.xml");
  }
  @Override protected List<Route> buildSplitter(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildSplitter.xml");
  }
  @Override protected List<Route> buildIdempotentConsumer(){
    return getRoutesFromContext("org/apache/camel/spring/xml/buildIdempotentConsumer.xml");
  }
  @Override @Test public void testIdempotentConsumer() throws Exception {
  }
  @Override @Test public void testRouteWithInterceptor() throws Exception {
  }
  protected List<Route> getRoutesFromContext(  String classpathConfigFile){
    applicationContext=new ClassPathXmlApplicationContext(classpathConfigFile);
    SpringCamelContext context=applicationContext.getBeansOfType(SpringCamelContext.class).values().iterator().next();
    assertNotNull("No Camel Context in file: " + classpathConfigFile,context);
    List<Route> routes=context.getRoutes();
    assertNotNull("No routes available for context: " + context.getName() + " in file: "+ classpathConfigFile,routes);
    return routes;
  }
}
