public class KubernetesClusterServiceAutoConfigurationTest {
  @Test public void testDisable(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(KubernetesClusterServiceAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).run(context -> {
      assertThat(context).doesNotHaveBean(KubernetesClusterService.class);
    }
);
  }
  /** 
 * Testing that the service can be enabled and configured completely.
 */
  @Test public void testPropertiesMapped(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(KubernetesClusterServiceAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","camel.component.kubernetes.cluster.service.enabled=true","camel.component.kubernetes.cluster.service.id=myid1","camel.component.kubernetes.cluster.service.master-url=http://myurl:9000","camel.component.kubernetes.cluster.service.connection-timeout-millis=1234","camel.component.kubernetes.cluster.service.kubernetes-namespace=ns1","camel.component.kubernetes.cluster.service.config-map-name=cm","camel.component.kubernetes.cluster.service.pod-name=mypod1","camel.component.kubernetes.cluster.service.cluster-labels.app=myapp","camel.component.kubernetes.cluster.service.cluster-labels.provider=myprovider","camel.component.kubernetes.cluster.service.lease-duration-millis=10000","camel.component.kubernetes.cluster.service.renew-deadline-millis=8000","camel.component.kubernetes.cluster.service.retry-period-millis=4000").run(context -> {
      final KubernetesClusterService clusterService=context.getBean(KubernetesClusterService.class);
      assertEquals("myid1",clusterService.getId());
      assertEquals("http://myurl:9000",clusterService.getMasterUrl());
      assertEquals(Integer.valueOf(1234),clusterService.getConnectionTimeoutMillis());
      assertEquals("ns1",clusterService.getKubernetesNamespace());
      assertEquals("cm",clusterService.getConfigMapName());
      assertEquals("mypod1",clusterService.getPodName());
      assertNotNull(clusterService.getClusterLabels());
      assertEquals(2,clusterService.getClusterLabels().size());
      assertEquals("myapp",clusterService.getClusterLabels().get("app"));
      assertEquals("myprovider",clusterService.getClusterLabels().get("provider"));
      assertEquals(1.2,clusterService.getJitterFactor(),1e-10);
      assertEquals(10000,clusterService.getLeaseDurationMillis());
      assertEquals(8000,clusterService.getRenewDeadlineMillis());
      assertEquals(4000,clusterService.getRetryPeriodMillis());
    }
);
  }
@EnableAutoConfiguration @Configuration public static class TestConfiguration {
  }
}
