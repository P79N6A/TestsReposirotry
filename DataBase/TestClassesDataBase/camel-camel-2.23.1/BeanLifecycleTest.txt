/** 
 * @version 
 */
public class BeanLifecycleTest extends ContextTestSupport {
  private MyBean statefulInstance;
  private MyBean statefulInstanceInRegistry;
  private MyBean statefulInstanceInRegistryNoCache;
  @Override @Before public void setUp() throws Exception {
    statefulInstance=new MyBean();
    statefulInstanceInRegistry=new MyBean();
    statefulInstanceInRegistryNoCache=new MyBean();
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    assertEquals("stopped",statefulInstance.getStatus());
    assertEquals("stopped",statefulInstanceInRegistry.getStatus());
    assertNull(statefulInstanceInRegistryNoCache.getStatus());
    assertEquals(2,MyStatefulBean.INSTANCES.get());
  }
  @Test public void testBeanLifecycle() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    assertEquals("started",statefulInstance.getStatus());
    assertEquals("started",statefulInstanceInRegistry.getStatus());
    assertNull(statefulInstanceInRegistryNoCache.getStatus());
    assertEquals(2,MyStatefulBean.INSTANCES.get());
    template.sendBody("direct:foo",null);
    mock.assertIsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("statefulInstanceInRegistry",statefulInstanceInRegistry);
    jndi.bind("statefulInstanceInRegistryNoCache",statefulInstanceInRegistryNoCache);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").bean(statefulInstance,"doSomething").bean(MyStatefulBean.class,"doSomething").bean(MyStatefulBean.class.getName(),"doSomething",true).bean(MyStatelessBean.class.getName(),"doSomething",false).to("bean:statefulInstanceInRegistry?method=doSomething&cache=true").to("bean:statefulInstanceInRegistryNoCache?method=doSomething&cache=false").to("mock:result");
      }
    }
;
  }
public static class MyBean implements Service {
    private String status;
    public String getStatus(){
      return status;
    }
    public void doSomething(    Exchange exchange){
    }
    @Override public void start() throws Exception {
      status="started";
    }
    @Override public void stop() throws Exception {
      status="stopped";
    }
  }
public static class MyStatelessBean implements Service {
    public void doSomething(    Exchange exchange){
    }
    @Override public void start() throws Exception {
      fail("Should not be invoked");
    }
    @Override public void stop() throws Exception {
      fail("Should not be invoked");
    }
  }
public static class MyStatefulBean implements Service {
    private static final AtomicInteger INSTANCES=new AtomicInteger(0);
    public MyStatefulBean(){
      INSTANCES.incrementAndGet();
    }
    public void doSomething(    Exchange exchange){
    }
    @Override public void start() throws Exception {
    }
    @Override public void stop() throws Exception {
    }
  }
}
