public class CamelTargetAdapterTest extends CamelSpringTestSupport {
  private static final String MESSAGE_BODY="hello world";
  @Test public void testSendingOneWayMessage() throws Exception {
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedBodiesReceived(MESSAGE_BODY);
    MessageChannel outputChannel=getMandatoryBean(MessageChannel.class,"channelA");
    outputChannel.send(new GenericMessage<Object>(MESSAGE_BODY));
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendingTwoWayMessage() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    MessageChannel requestChannel=getMandatoryBean(MessageChannel.class,"channelB");
    Message<?> message=new GenericMessage<Object>(MESSAGE_BODY);
    DirectChannel responseChannel=getMandatoryBean(DirectChannel.class,"channelC");
    responseChannel.subscribe(new MessageHandler(){
      public void handleMessage(      Message<?> message){
        latch.countDown();
        assertEquals("Get the wrong result",MESSAGE_BODY + " is processed",message.getPayload());
      }
    }
);
    requestChannel.send(message);
    assertTrue(latch.await(1,TimeUnit.SECONDS));
  }
  @Test public void testSendingTwoWayMessageWithMessageAddress() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    MessageChannel requestChannel=getMandatoryBean(MessageChannel.class,"channelD");
    DirectChannel responseChannel=getMandatoryBean(DirectChannel.class,"channelC");
    Map<String,Object> headers=new HashMap<>();
    headers.put(MessageHeaders.REPLY_CHANNEL,responseChannel);
    GenericMessage<String> message=new GenericMessage<>(MESSAGE_BODY,headers);
    responseChannel.subscribe(new MessageHandler(){
      public void handleMessage(      Message<?> message){
        latch.countDown();
        assertEquals("Get the wrong result",MESSAGE_BODY + " is processed",message.getPayload());
      }
    }
);
    requestChannel.send(message);
    assertTrue(latch.await(1,TimeUnit.SECONDS));
  }
  @Override protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/spring/integration/adapter/CamelTarget.xml");
  }
}
