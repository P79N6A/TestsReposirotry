public class CxfTimeoutTest extends CamelSpringTestSupport {
  protected static final String GREET_ME_OPERATION="greetMe";
  protected static final String TEST_MESSAGE="Hello World!";
  protected static final String JAXWS_SERVER_ADDRESS="http://localhost:" + CXFTestSupport.getPort1() + "/CxfTimeoutTest/SoapContext/SoapPort";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @BeforeClass public static void startService(){
    Greeter implementor=new GreeterImplWithSleep();
    Endpoint.publish(JAXWS_SERVER_ADDRESS,implementor);
  }
  @Test public void testInvokingJaxWsServerWithBusUriParams() throws Exception {
    sendTimeOutMessage("cxf://" + JAXWS_SERVER_ADDRESS + "?serviceClass=org.apache.hello_world_soap_http.Greeter&bus=#cxf");
  }
  @Test public void testInvokingJaxWsServerWithoutBusUriParams() throws Exception {
    sendTimeOutMessage("cxf://" + JAXWS_SERVER_ADDRESS + "?serviceClass=org.apache.hello_world_soap_http.Greeter");
  }
  @Test public void testInvokingJaxWsServerWithCxfEndpoint() throws Exception {
    sendTimeOutMessage("cxf://bean:springEndpoint");
  }
  @Test public void testInvokingJaxWsServerWithCxfEndpointWithConfigurer() throws Exception {
    Exchange reply=sendJaxWsMessage("cxf://bean:springEndpoint?cxfEndpointConfigurer=#myConfigurer");
    assertFalse("We don't expect the exception here",reply.isFailed());
    assertEquals("Get a wrong response","Greet Hello World!",reply.getOut().getBody(String.class));
  }
  @Test public void testInvokingFromCamelRoute() throws Exception {
    sendTimeOutMessage("direct:start");
  }
  @Test public void testDoCatchWithTimeOutException() throws Exception {
    MockEndpoint error=context.getEndpoint("mock:error",MockEndpoint.class);
    error.expectedMessageCount(1);
    sendTimeOutMessage("direct:doCatch");
    error.assertIsSatisfied();
  }
  protected void sendTimeOutMessage(  String endpointUri) throws Exception {
    Exchange reply=sendJaxWsMessage(endpointUri);
    Exception e=reply.getException();
    assertNotNull("We should get the exception cause here",e);
    assertTrue("We should get the socket time out exception here",e instanceof SocketTimeoutException);
  }
  protected Exchange sendJaxWsMessage(  String endpointUri) throws InterruptedException {
    Exchange exchange=template.send(endpointUri,new Processor(){
      public void process(      final Exchange exchange){
        final List<String> params=new ArrayList<>();
        params.add(TEST_MESSAGE);
        exchange.getIn().setBody(params);
        exchange.getIn().setHeader(CxfConstants.OPERATION_NAME,GREET_ME_OPERATION);
      }
    }
);
    return exchange;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/cxfConduitTimeOutContext.xml");
  }
public static class MyCxfEndpointConfigurer implements CxfEndpointConfigurer {
    @Override public void configure(    AbstractWSDLBasedEndpointFactory factoryBean){
    }
    @Override public void configureClient(    Client client){
      HTTPConduit conduit=(HTTPConduit)client.getConduit();
      HTTPClientPolicy policy=new HTTPClientPolicy();
      policy.setReceiveTimeout(60000);
      conduit.setClient(policy);
    }
    @Override public void configureServer(    Server server){
    }
  }
}
