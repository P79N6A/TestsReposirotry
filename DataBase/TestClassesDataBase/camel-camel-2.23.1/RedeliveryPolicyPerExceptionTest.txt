/** 
 * @version 
 */
public class RedeliveryPolicyPerExceptionTest extends ContextTestSupport {
  protected MockEndpoint a;
  protected MockEndpoint b;
  @Test public void testUsingCustomExceptionHandlerAndOneRedelivery() throws Exception {
    a.expectedMessageCount(1);
    sendBody("direct:start","a");
    MockEndpoint.assertIsSatisfied(a,b);
    List<Exchange> list=a.getReceivedExchanges();
    assertTrue("List should not be empty!",!list.isEmpty());
    Exchange exchange=list.get(0);
    Message in=exchange.getIn();
    log.info("Found message with headers: " + in.getHeaders());
    assertMessageHeader(in,Exchange.REDELIVERY_COUNTER,2);
    assertMessageHeader(in,Exchange.REDELIVERY_MAX_COUNTER,2);
    assertMessageHeader(in,Exchange.REDELIVERED,true);
  }
  @Test public void testUsingCustomExceptionHandlerWithNoRedeliveries() throws Exception {
    b.expectedMessageCount(1);
    sendBody("direct:start","b");
    MockEndpoint.assertIsSatisfied(a,b);
    List<Exchange> list=b.getReceivedExchanges();
    assertTrue("List should not be empty!",!list.isEmpty());
    Exchange exchange=list.get(0);
    Message in=exchange.getIn();
    log.info("Found message with headers: " + in.getHeaders());
    assertMessageHeader(in,Exchange.REDELIVERY_COUNTER,0);
    assertMessageHeader(in,Exchange.REDELIVERY_MAX_COUNTER,null);
    assertMessageHeader(in,Exchange.REDELIVERED,false);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    a=resolveMandatoryEndpoint("mock:a",MockEndpoint.class);
    b=resolveMandatoryEndpoint("mock:b",MockEndpoint.class);
  }
  protected RouteBuilder createRouteBuilder(){
    final Processor processor=new Processor(){
      public void process(      Exchange exchange){
        if ("b".equals(exchange.getIn().getBody())) {
          throw new NullPointerException("MyCustomException");
        }
 else {
          throw new IllegalArgumentException("MyCustomException");
        }
      }
    }
;
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
        onException(IllegalArgumentException.class).redeliveryDelay(0).maximumRedeliveries(2).to("mock:a");
        onException(NullPointerException.class).to("mock:b");
        from("direct:start").process(processor);
      }
    }
;
  }
}
