/** 
 * @version 
 */
public class FileConsumerDeleteAndFailureTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/failed");
    super.setUp();
  }
  @Test public void testMoveFailed() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World IS processed!");
    mock.expectedFileExists("target/failed/error/bye.txt");
    template.sendBodyAndHeader("file://target/failed","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/failed","Kabom",Exchange.FILE_NAME,"bye.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).handled(true).useOriginalMessage().to("file://target/failed/error");
        from("file://target/failed?delete=true&initialDelay=0&delay=10").setBody(simple("${body} IS processed!")).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if (body != null && body.startsWith("Kabom")) {
              throw new IllegalArgumentException("Forced");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
}
