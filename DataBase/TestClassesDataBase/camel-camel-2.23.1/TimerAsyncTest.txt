/** 
 * @version
 */
public class TimerAsyncTest extends ContextTestSupport {
  @Test public void testSync() throws Exception {
    TimerEndpoint endpoint=context.getEndpoint("timer:foo?synchronous=true",TimerEndpoint.class);
    assertTrue("Timer endpoint must be synchronous, but it isn't",endpoint.isSynchronous());
  }
  @Test public void testAsync() throws Exception {
    TimerEndpoint endpoint=context.getEndpoint("timer:foo",TimerEndpoint.class);
    assertFalse("Timer endpoint must be asynchronous, but it isn't",endpoint.isSynchronous());
  }
  @Test public void testAsyncRouting() throws Exception {
    final int threads=5;
    getMockEndpoint("mock:task").expectedMinimumMessageCount(20);
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("timer://foo?fixedRate=true&delay=0&period=10").id("timer").threads(threads,threads).maxQueueSize(1).rejectedPolicy(ThreadPoolRejectedPolicy.CallerRuns).to("log:task").to("mock:task").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            TimeUnit.MILLISECONDS.sleep(50);
          }
        }
);
      }
    }
);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
