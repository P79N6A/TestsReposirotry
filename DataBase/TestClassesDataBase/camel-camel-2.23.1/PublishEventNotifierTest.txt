/** 
 * @version 
 */
public class PublishEventNotifierTest extends ContextTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=new DefaultCamelContext(createRegistry());
    PublishEventNotifier notifier=new PublishEventNotifier();
    notifier.setCamelContext(context);
    notifier.setEndpointUri("mock:event");
    context.getManagementStrategy().addEventNotifier(notifier);
    return context;
  }
  @Test public void testExchangeDone() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:event").expectedMessageCount(9);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testExchangeFailed() throws Exception {
    getMockEndpoint("mock:event").expectedMessageCount(5);
    try {
      template.sendBody("direct:fail","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
        from("direct:fail").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
}
