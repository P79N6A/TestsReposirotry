/** 
 * KeySelector which retrieves the public key from the KeyValue element and returns it. NOTE: If the key algorithm doesn't match signature algorithm, then the public key will be ignored.
 */
static class KeyValueKeySelector extends KeySelector {
  public KeySelectorResult select(  KeyInfo keyInfo,  KeySelector.Purpose purpose,  AlgorithmMethod method,  XMLCryptoContext context) throws KeySelectorException {
    if (keyInfo == null) {
      throw new KeySelectorException("Null KeyInfo object!");
    }
    SignatureMethod sm=(SignatureMethod)method;
    @SuppressWarnings("rawtypes") List list=keyInfo.getContent();
    for (int i=0; i < list.size(); i++) {
      XMLStructure xmlStructure=(XMLStructure)list.get(i);
      if (xmlStructure instanceof KeyValue) {
        PublicKey pk=null;
        try {
          pk=((KeyValue)xmlStructure).getPublicKey();
        }
 catch (        KeyException ke) {
          throw new KeySelectorException(ke);
        }
        if (algEquals(sm.getAlgorithm(),pk.getAlgorithm())) {
          return new SimpleKeySelectorResult(pk);
        }
      }
    }
    throw new KeySelectorException("No KeyValue element found!");
  }
  static boolean algEquals(  String algURI,  String algName){
    return (algName.equalsIgnoreCase("DSA") && algURI.equalsIgnoreCase(SignatureMethod.DSA_SHA1)) || (algName.equalsIgnoreCase("RSA") && algURI.equalsIgnoreCase(SignatureMethod.RSA_SHA1));
  }
}
