/** 
 */
public class XMLTokenExpressionIteratorCharsetTest extends Assert {
  private static final String DATA_TEMPLATE="<?xml version=\"1.0\" encoding=\"{0}\"?>" + "<Statements xmlns=\"http://www.apache.org/xml/test\">" + "    <statement>we l\u00f3ve iso-latin</statement>"+ "    <statement>we h\u00e4te unicode</statement>"+ "</Statements>";
  private static final String[] RESULTS={"<statement xmlns=\"http://www.apache.org/xml/test\">we l\u00f3ve iso-latin</statement>","<statement xmlns=\"http://www.apache.org/xml/test\">we h\u00e4te unicode</statement>"};
  private static final String DATA_STRING=MessageFormat.format(DATA_TEMPLATE,"utf-8");
  private static final byte[] DATA_UTF8=getBytes(DATA_TEMPLATE,"utf-8");
  private static final byte[] DATA_ISOLATIN=getBytes(DATA_TEMPLATE,"iso-8859-1");
  private static final Map<String,String> NSMAP=Collections.singletonMap("","http://www.apache.org/xml/test");
  private static byte[] getBytes(  String template,  String charset){
    try {
      return MessageFormat.format(template,charset).getBytes(charset);
    }
 catch (    UnsupportedEncodingException e) {
    }
    return null;
  }
  @Test public void testTokenzeWithUTF8() throws Exception {
    XMLTokenExpressionIterator xtei=new XMLTokenExpressionIterator("//statement",'i');
    xtei.setNamespaces(NSMAP);
    invokeAndVerify(xtei.createIterator(new ByteArrayInputStream(DATA_UTF8),"utf-8"));
  }
  @Test public void testTokenizeWithISOLatin() throws Exception {
    XMLTokenExpressionIterator xtei=new XMLTokenExpressionIterator("//statement",'i');
    xtei.setNamespaces(NSMAP);
    invokeAndVerify(xtei.createIterator(new ByteArrayInputStream(DATA_ISOLATIN),"iso-8859-1"));
  }
  @Test public void testTokenizeWithReader() throws Exception {
    XMLTokenExpressionIterator xtei=new XMLTokenExpressionIterator("//statement",'i');
    xtei.setNamespaces(NSMAP);
    invokeAndVerify(xtei.createIterator(new StringReader(DATA_STRING)));
  }
  private void invokeAndVerify(  Iterator<?> tokenizer) throws IOException, XMLStreamException {
    List<String> results=new ArrayList<>();
    while (tokenizer.hasNext()) {
      String token=(String)tokenizer.next();
      results.add(token);
    }
    ((Closeable)tokenizer).close();
    assertEquals("token count",RESULTS.length,results.size());
    for (int i=0; i < RESULTS.length; i++) {
      assertEquals("mismatch [" + i + "]",RESULTS[i],results.get(i));
    }
  }
}
