public class RestServletVerbTest extends ServletCamelRouterTestSupport {
  @Test public void testGetAll() throws Exception {
    WebRequest req=new GetMethodWebRequest(CONTEXT_URL + "/services/users");
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(200,response.getResponseCode());
    assertEquals("[{ \"id\":\"1\", \"name\":\"Scott\" },{ \"id\":\"2\", \"name\":\"Claus\" }]",response.getText());
  }
  @Test public void testGetOne() throws Exception {
    WebRequest req=new GetMethodWebRequest(CONTEXT_URL + "/services/users/1");
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(200,response.getResponseCode());
    assertEquals("{ \"id\":\"1\", \"name\":\"Scott\" }",response.getText());
  }
  @Test public void testPost() throws Exception {
    final String body="{ \"id\":\"1\", \"name\":\"Scott\" }";
    MockEndpoint mock=getMockEndpoint("mock:create");
    mock.expectedBodiesReceived(body);
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    WebRequest req=new PostMethodWebRequest(CONTEXT_URL + "/services/users",new ByteArrayInputStream(body.getBytes()),"application/json");
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(200,response.getResponseCode());
    assertMockEndpointsSatisfied();
  }
  @Test public void testPut() throws Exception {
    final String body="{ \"id\":\"1\", \"name\":\"Scott\" }";
    MockEndpoint mock=getMockEndpoint("mock:update");
    mock.expectedBodiesReceived(body);
    mock.expectedHeaderReceived("id","1");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"PUT");
    WebRequest req=new PutMethodWebRequest(CONTEXT_URL + "/services/users/1",new ByteArrayInputStream(body.getBytes()),"application/json");
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(200,response.getResponseCode());
    assertMockEndpointsSatisfied();
  }
  @Test public void testDelete() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:delete");
    mock.expectedHeaderReceived("id","1");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"DELETE");
    WebRequest req=new HeaderOnlyWebRequest(CONTEXT_URL + "/services/users/1"){
      @Override public String getMethod(){
        return "DELETE";
      }
    }
;
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(200,response.getResponseCode());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("servlet");
        rest().get("/users").route().transform().constant("[{ \"id\":\"1\", \"name\":\"Scott\" },{ \"id\":\"2\", \"name\":\"Claus\" }]").endRest().get("/users/{id}").route().transform().simple("{ \"id\":\"${header.id}\", \"name\":\"Scott\" }").endRest().post("/users").to("mock:create").put("/users/{id}").to("mock:update").delete("/users/{id}").to("mock:delete");
      }
    }
;
  }
}
