/** 
 * @version 
 */
public class BeanChoseMethodWithMatchingTypeAndSkipSettersTest extends ContextTestSupport {
  private OrderServiceBean service=new OrderServiceBean();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/file/order");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("orderService",service);
    return jndi;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    service.setConverter(context.getTypeConverter());
    return context;
  }
  @Test public void testSendCSVFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:queue:order");
    mock.expectedBodiesReceived("66554,123,456");
    template.sendBodyAndHeader("file://target/file/order","123,456",Exchange.FILE_NAME,"66554.csv");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendXMLData() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:queue:order");
    mock.expectedBodiesReceived("77889,667,457");
    String xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<order id=\"77889\">" + "<customer id=\"667\"/>"+ "<confirm>457</confirm>"+ "</order>";
    template.sendBody("seda:xml",xml);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/file/order?initialDelay=0&delay=10","seda:xml").bean("orderService").to("mock:queue:order");
      }
    }
;
  }
}
