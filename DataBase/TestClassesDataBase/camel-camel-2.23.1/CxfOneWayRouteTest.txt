/** 
 * Tests a cxf routing scenario from an oneway cxf EP to a file EP to not forward the old input back to the oneway cxf EP.
 */
public class CxfOneWayRouteTest extends CamelSpringTestSupport {
  private static final QName SERVICE_NAME=new QName("http://apache.org/hello_world_soap_http","SOAPService");
  private static final QName PORT_NAME=new QName("http://apache.org/hello_world_soap_http","SoapPort");
  private static final String ROUTER_ADDRESS="http://localhost:" + CXFTestSupport.getPort1() + "/CxfOneWayRouteTest/router";
  private static Exception bindingException;
  private static boolean bindingDone;
  private static boolean onCompeletedCalled;
  @Before public void setup(){
    bindingException=null;
    bindingDone=false;
    onCompeletedCalled=false;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfOneWayRouteBeans.xml");
  }
  protected Greeter getCXFClient() throws Exception {
    Service service=Service.create(SERVICE_NAME);
    service.addPort(PORT_NAME,"http://schemas.xmlsoap.org/soap/",ROUTER_ADDRESS);
    Greeter greeter=service.getPort(PORT_NAME,Greeter.class);
    return greeter;
  }
  @Test public void testInvokingOneWayServiceFromCXFClient() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedFileExists("target/camel-file/cxf-oneway-route");
    Greeter client=getCXFClient();
    client.greetMeOneWay("lemac");
    long waitUntil=System.currentTimeMillis() + 10000;
    while (!bindingDone && System.currentTimeMillis() < waitUntil) {
      Thread.sleep(1000);
    }
    assertMockEndpointsSatisfied();
    assertTrue("UnitOfWork done should be called",onCompeletedCalled);
    assertNull("exception occured: " + bindingException,bindingException);
  }
public static class TestProcessor implements Processor {
    static final byte[] MAGIC={(byte)0xca,0x3e,0x1e};
    public void process(    Exchange exchange) throws Exception {
      assertEquals("Don't get the right MEP",ExchangePattern.InOnly,exchange.getPattern());
      String msg=exchange.getIn().getBody(String.class);
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      bos.write(MAGIC);
      bos.write(msg.getBytes());
      exchange.getIn().setBody(bos.toByteArray());
      exchange.getUnitOfWork().addSynchronization(new Synchronization(){
        @Override public void onComplete(        Exchange exchange){
          onCompeletedCalled=true;
        }
        @Override public void onFailure(        Exchange exchange){
        }
      }
);
    }
  }
public static class TestCxfBinding extends DefaultCxfBinding {
    @Override public void populateCxfResponseFromExchange(    Exchange camelExchange,    org.apache.cxf.message.Exchange cxfExchange){
      try {
        super.populateCxfResponseFromExchange(camelExchange,cxfExchange);
      }
 catch (      RuntimeException e) {
        bindingException=e;
        throw e;
      }
 finally {
        bindingDone=true;
      }
    }
  }
}
