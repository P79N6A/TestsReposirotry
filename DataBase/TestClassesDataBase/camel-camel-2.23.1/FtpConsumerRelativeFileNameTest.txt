public class FtpConsumerRelativeFileNameTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/target/filename-consumer?password=admin&recursive=true&sortBy=file:name";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    sendFile(getFtpUrl(),"Hello World","target/filename-consumer-hello.txt");
    sendFile(getFtpUrl(),"Bye World","target/filename-consumer-bye.txt");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl()).to("mock:result");
      }
    }
;
  }
  @Test public void testValidFilenameOnExchange() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.allMessages().header(Exchange.FILE_NAME).isNotNull();
    assertMockEndpointsSatisfied();
    Thread.sleep(2000);
    assertDirectoryEquals("target/filename-consumer-bye.txt",mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_NAME,String.class));
    assertDirectoryEquals("target/filename-consumer-hello.txt",mock.getReceivedExchanges().get(1).getIn().getHeader(Exchange.FILE_NAME,String.class));
  }
}
