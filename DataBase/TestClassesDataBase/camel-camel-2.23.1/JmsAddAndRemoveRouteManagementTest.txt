/** 
 * Test that all thread pools is removed when adding and removing a route dynamically
 */
public class JmsAddAndRemoveRouteManagementTest extends CamelTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testAddAndRemoveRoute() throws Exception {
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> before=mbeanServer.queryNames(new ObjectName("*:type=threadpools,*"),null);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:in").routeId("myNewRoute").to("activemq:queue:foo");
      }
    }
);
    Set<ObjectName> during=mbeanServer.queryNames(new ObjectName("*:type=threadpools,*"),null);
    assertEquals("There should be one more thread pool in JMX",before.size() + 1,during.size());
    template.sendBody("activemq:queue:in","Hello World");
    assertMockEndpointsSatisfied();
    context.stopRoute("myNewRoute");
    context.removeRoute("myNewRoute");
    Set<ObjectName> after=mbeanServer.queryNames(new ObjectName("*:type=threadpools,*"),null);
    assertEquals("Should have removed all thread pools from removed route",before.size(),after.size());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").to("mock:result");
      }
    }
;
  }
}
