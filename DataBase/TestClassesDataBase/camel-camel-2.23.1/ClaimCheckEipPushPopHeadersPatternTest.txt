public class ClaimCheckEipPushPopHeadersPatternTest extends ContextTestSupport {
  @Test public void testPushPopHeadersPattern() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo",123);
    headers.put("bar","Moes");
    headers.put("car","Toyota");
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:a").expectedHeaderReceived("foo",123);
    getMockEndpoint("mock:a").expectedHeaderReceived("bar","Moes");
    getMockEndpoint("mock:a").message(0).header("car").isEqualTo("Toyota");
    getMockEndpoint("mock:b").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:b").expectedHeaderReceived("foo",456);
    getMockEndpoint("mock:b").message(0).header("bar").isNull();
    getMockEndpoint("mock:b").message(0).header("car").isEqualTo("Toyota");
    getMockEndpoint("mock:c").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:c").expectedHeaderReceived("foo",123);
    getMockEndpoint("mock:c").expectedHeaderReceived("bar","Moes");
    getMockEndpoint("mock:c").message(0).header("car").isEqualTo("Toyota");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:a").claimCheck(ClaimCheckOperation.Push).transform().constant("Bye World").setHeader("foo",constant(456)).removeHeader("bar").to("mock:b").claimCheck(ClaimCheckOperation.Pop,null,"header:(foo|bar)").to("mock:c");
      }
    }
;
  }
}
