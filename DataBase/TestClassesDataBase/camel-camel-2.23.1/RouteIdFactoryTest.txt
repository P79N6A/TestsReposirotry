public class RouteIdFactoryTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("dummy-rest",new DummyRestConsumerFactory());
    jndi.bind("dummy-rest-api",new DummyRestProcessorFactory());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setNodeIdFactory(new RouteIdFactory());
        from("direct:start1?timeout=30000").to("mock:result");
        from("direct:start2").to("mock:result");
        rest("/say/hello").get("/bar").to("mock:result");
        rest("/say/hello").get().to("mock:result");
        rest().get("/hello").to("mock:result");
      }
    }
;
  }
  @Test public void testDirectRouteIdWithOptions(){
    assertEquals("start1",context.getRouteDefinitions().get(0).getId());
  }
  @Test public void testDirectRouteId(){
    assertEquals("start2",context.getRouteDefinitions().get(1).getId());
  }
  @Test public void testRestRouteIdWithVerbUri(){
    assertEquals("get-say-hello-bar",context.getRouteDefinitions().get(2).getId());
  }
  @Test public void testRestRouteIdWithoutVerbUri(){
    assertEquals("get-say-hello",context.getRouteDefinitions().get(3).getId());
  }
  @Test public void testRestRouteIdWithoutPathUri(){
    assertEquals("get-hello",context.getRouteDefinitions().get(4).getId());
  }
}
