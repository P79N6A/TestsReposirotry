public class NettyHttpProducerBridgeTest extends BaseNettyTest {
  private int port1;
  private int port2;
  private int port3;
  @Test public void testProxy() throws Exception {
    String reply=template.requestBody("netty4-http:http://localhost:" + port1 + "/foo","World",String.class);
    assertEquals("Bye World",reply);
  }
  @Test public void testBridgeWithQuery() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.message(0).header(Exchange.HTTP_RAW_QUERY).isEqualTo("x=%3B");
    mock.message(0).header(Exchange.HTTP_QUERY).isEqualTo("x=;");
    template.request("netty4-http:http://localhost:" + port3 + "/query?bridgeEndpoint=true",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(Exchange.HTTP_URI,"http://host:8080/");
        exchange.getIn().setHeader(Exchange.HTTP_QUERY,"x=%3B");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBridgeWithRawQueryAndQuery() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.message(0).header(Exchange.HTTP_RAW_QUERY).isEqualTo("x=%3B");
    mock.message(0).header(Exchange.HTTP_QUERY).isEqualTo("x=;");
    template.request("netty4-http:http://localhost:" + port3 + "/query?bridgeEndpoint=true",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(Exchange.HTTP_URI,"http://host:8080/");
        exchange.getIn().setHeader(Exchange.HTTP_RAW_QUERY,"x=%3B");
        exchange.getIn().setHeader(Exchange.HTTP_QUERY,"x=;");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        port1=getPort();
        port2=getNextPort();
        port3=getNextPort();
        from("netty4-http:http://0.0.0.0:" + port1 + "/foo").to("netty4-http:http://localhost:" + port2 + "/bar?bridgeEndpoint=true&throwExceptionOnFailure=false");
        from("netty4-http:http://0.0.0.0:" + port2 + "/bar").transform().simple("Bye ${body}");
        from("netty4-http:http://0.0.0.0:" + port3 + "/query").to("mock:query");
      }
    }
;
  }
}
