public class ZipkinMDCScopeDecoratorTest extends CamelTestSupport {
  private ZipkinTracer zipkin;
  protected void setSpanReporter(  ZipkinTracer zipkin){
    zipkin.setSpanReporter(Reporter.NOOP);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    zipkin=new ZipkinTracer();
    zipkin.addClientServiceMapping("seda:cat","cat");
    zipkin.addServerServiceMapping("seda:cat","cat");
    zipkin.setIncludeMessageBody(true);
    setSpanReporter(zipkin);
    context.setUseMDCLogging(true);
    zipkin.init(context);
    return context;
  }
  @Test public void testZipkinRoute() throws Exception {
    template.requestBody("direct:start","Camel say hello Cat");
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("seda:cat");
        from("seda:cat").routeId("cat").delay(simple("${random(1000,2000)}")).setBody().constant("Cat says hello Dog").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            assertNotNull(MDC.get("traceId"));
            assertNotNull(MDC.get("spanId"));
            assertNotNull(MDC.get("parentId"));
          }
        }
);
      }
    }
;
  }
}
