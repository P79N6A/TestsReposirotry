public class FromQueueToQueueTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @EndpointInject(uri="ironmq:testqueue?client=#ironMock") private IronMQEndpoint queue1;
  @EndpointInject(uri="ironmq:testqueue2?client=#ironMock") private IronMQEndpoint queue2;
  @Test public void shouldDeleteMessageFromQueue1() throws Exception {
    result.setExpectedMessageCount(1);
    template.send("direct:start",ExchangePattern.InOnly,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("This is my message text.");
      }
    }
);
    assertMockEndpointsSatisfied();
    try {
      queue1.getClient().queue("testqueue").reserve();
      fail("Message was in the first queue!");
    }
 catch (    IOException e) {
      if (!(e instanceof EmptyQueueException)) {
        throw e;
      }
    }
    try {
      queue2.getClient().queue("testqueue1").reserve();
      fail("Message remained in second queue!");
    }
 catch (    IOException e) {
      if (!(e instanceof EmptyQueueException)) {
        throw e;
      }
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("ironMock",new IronMQClientMock("dummy","dummy"));
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").to("ironmq:testqueue?client=#ironMock");
        from("ironmq:testqueue?client=#ironMock").to("ironmq:testqueue2?client=#ironMock");
        from("ironmq:testqueue2?client=#ironMock").to("mock:result");
      }
    }
;
  }
}
