public class RoutingSlipTest extends ContextTestSupport {
  protected static final String ANSWER="answer";
  protected static final String ROUTING_SLIP_HEADER="myHeader";
  @Test public void testUpdatingOfRoutingSlipAllDefaults() throws Exception {
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived(ANSWER);
    y.expectedBodiesReceived(ANSWER);
    z.expectedBodiesReceived(ANSWER);
    sendBody("direct:a",ROUTING_SLIP_HEADER,",");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUpdatingOfRoutingSlipHeaderSet() throws Exception {
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived(ANSWER);
    y.expectedBodiesReceived(ANSWER);
    z.expectedBodiesReceived(ANSWER);
    sendBody("direct:b","aRoutingSlipHeader",",");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUpdatingOfRoutingSlipHeaderAndDelimiterSet() throws Exception {
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived(ANSWER);
    y.expectedBodiesReceived(ANSWER);
    z.expectedBodiesReceived(ANSWER);
    sendBody("direct:c","aRoutingSlipHeader","#");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBodyExpression() throws Exception {
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived("mock:x, mock:y,mock:z");
    y.expectedBodiesReceived("mock:x, mock:y,mock:z");
    z.expectedBodiesReceived("mock:x, mock:y,mock:z");
    template.sendBody("direct:d","mock:x, mock:y,mock:z");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMessagePassingThrough() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedMessageCount(1);
    sendBody("direct:a",ROUTING_SLIP_HEADER,",");
    assertMockEndpointsSatisfied();
  }
  @Test public void testEmptyRoutingSlip() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedMessageCount(1);
    sendBodyWithEmptyRoutingSlip();
    assertMockEndpointsSatisfied();
  }
  @Test public void testNoRoutingSlip() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedMessageCount(1);
    sendBodyWithNoRoutingSlip();
    assertMockEndpointsSatisfied();
  }
  protected void sendBody(  String endpoint,  String header,  String delimiter){
    template.sendBodyAndHeader(endpoint,ANSWER,header,"mock:x" + delimiter + "mock:y"+ delimiter+ "mock:z");
  }
  protected void sendBodyWithEmptyRoutingSlip(){
    template.sendBodyAndHeader("direct:a",ANSWER,ROUTING_SLIP_HEADER,"");
  }
  protected void sendBodyWithNoRoutingSlip(){
    template.sendBody("direct:a",ANSWER);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").routingSlip(header("myHeader")).to("mock:end");
        from("direct:b").routingSlip(ExpressionBuilder.headerExpression("aRoutingSlipHeader"));
        from("direct:c").routingSlip(header("aRoutingSlipHeader"),"#");
        from("direct:d").routingSlip(body());
      }
    }
;
  }
}
