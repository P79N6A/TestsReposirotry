public class PullRequestStateProducerTest extends GitHubComponentTestBase {
  private String commitsha;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from("direct:validPullRequest").process(new MockPullRequestStateProducerProcessor()).to("github://pullRequestState?state=success&username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo");
      }
    }
;
  }
  @Test public void testPullRequestStateProducer() throws Exception {
    commitsha=commitService.getNextSha();
    Endpoint stateProducerEndpoint=getMandatoryEndpoint("direct:validPullRequest");
    Exchange exchange=stateProducerEndpoint.createExchange();
    String text="Message sent at " + new Date();
    exchange.getIn().setBody(text);
    Exchange response=template.send(stateProducerEndpoint,exchange);
    assertNotNull(response.getOut().getBody());
    if (!(response.getOut().getBody() instanceof CommitStatus)) {
      fail("Expecting CommitStatus");
    }
    CommitStatus status=response.getOut().getBody(CommitStatus.class);
    if (commitService.getCommitStatus(commitsha) != status) {
      fail("Commit status sent to service is different from response");
    }
    assertEquals(status.getState(),"success");
    assertEquals(status.getDescription(),text);
  }
public class MockPullRequestStateProducerProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Map<String,Object> headers=in.getHeaders();
      headers.put(GitHubConstants.GITHUB_PULLREQUEST_HEAD_COMMIT_SHA,commitsha);
    }
  }
}
