public class ZipAggregationStrategyEmptyFileTest extends CamelTestSupport {
  private static final int EXPECTED_NO_FILES=3;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/foo");
    deleteDirectory("target/out");
    super.setUp();
  }
  @Test public void testEmptyFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregateToZipEntry");
    mock.expectedMessageCount(1);
    template.sendBody("file:target/foo","Hello");
    template.sendBody("file:target/foo","");
    template.sendBody("file:target/foo","Bye");
    template.sendBody("file:target/foo","Howdy");
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    File[] files=new File("target/out").listFiles();
    assertTrue(files != null);
    assertTrue("Should be a file in target/out directory",files.length > 0);
    File resultFile=files[0];
    ZipInputStream zin=new ZipInputStream(new FileInputStream(resultFile));
    try {
      int fileCount=0;
      for (ZipEntry ze=zin.getNextEntry(); ze != null; ze=zin.getNextEntry()) {
        fileCount=fileCount + 1;
      }
      assertEquals("Zip file should contains " + ZipAggregationStrategyEmptyFileTest.EXPECTED_NO_FILES + " files",ZipAggregationStrategyEmptyFileTest.EXPECTED_NO_FILES,fileCount);
    }
  finally {
      IOHelper.close(zin);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/foo").aggregate(new ZipAggregationStrategy()).constant(true).completionSize(4).eagerCheckCompletion().to("file:target/out").to("mock:aggregateToZipEntry").log("Done processing zip file: ${header.CamelFileName}");
      }
    }
;
  }
}
