/** 
 */
public class FileBrowsableEndpointTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/browse");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testBrowsableNoFiles() throws Exception {
    BrowsableEndpoint browse=context.getEndpoint("file:target/browse?initialDelay=0&delay=10",BrowsableEndpoint.class);
    assertNotNull(browse);
    List<Exchange> list=browse.getExchanges();
    assertNotNull(list);
    assertEquals(0,list.size());
  }
  @Test public void testBrowsableOneFile() throws Exception {
    template.sendBodyAndHeader("file:target/browse","A",Exchange.FILE_NAME,"a.txt");
    FileEndpoint endpoint=context.getEndpoint("file:target/browse?initialDelay=0&delay=10",FileEndpoint.class);
    assertNotNull(endpoint);
    MemoryIdempotentRepository repo=(MemoryIdempotentRepository)endpoint.getInProgressRepository();
    assertEquals(0,repo.getCacheSize());
    List<Exchange> list=endpoint.getExchanges();
    assertNotNull(list);
    assertEquals(1,list.size());
    assertEquals("a.txt",list.get(0).getIn().getHeader(Exchange.FILE_NAME));
    assertEquals(0,repo.getCacheSize());
    File file=new File("target/browse/a.txt");
    assertTrue("File should exist " + file,file.exists());
  }
  @Test public void testBrowsableTwoFiles() throws Exception {
    template.sendBodyAndHeader("file:target/browse","A",Exchange.FILE_NAME,"a.txt");
    template.sendBodyAndHeader("file:target/browse","B",Exchange.FILE_NAME,"b.txt");
    FileEndpoint endpoint=context.getEndpoint("file:target/browse?initialDelay=0&delay=10&sortBy=file:name",FileEndpoint.class);
    assertNotNull(endpoint);
    MemoryIdempotentRepository repo=(MemoryIdempotentRepository)endpoint.getInProgressRepository();
    assertEquals(0,repo.getCacheSize());
    List<Exchange> list=endpoint.getExchanges();
    assertNotNull(list);
    assertEquals(2,list.size());
    assertEquals("a.txt",list.get(0).getIn().getHeader(Exchange.FILE_NAME));
    assertEquals("b.txt",list.get(1).getIn().getHeader(Exchange.FILE_NAME));
    assertEquals(0,repo.getCacheSize());
    File fileA=new File("target/browse/a.txt");
    assertTrue("File should exist " + fileA,fileA.exists());
    File fileB=new File("target/browse/b.txt");
    assertTrue("File should exist " + fileB,fileB.exists());
  }
  @Test public void testBrowsableThreeFilesRecursive() throws Exception {
    template.sendBodyAndHeader("file:target/browse","A",Exchange.FILE_NAME,"a.txt");
    template.sendBodyAndHeader("file:target/browse","B",Exchange.FILE_NAME,"foo/b.txt");
    template.sendBodyAndHeader("file:target/browse","C",Exchange.FILE_NAME,"bar/c.txt");
    FileEndpoint endpoint=context.getEndpoint("file:target/browse?initialDelay=0&delay=10&recursive=true&sortBy=file:name",FileEndpoint.class);
    assertNotNull(endpoint);
    MemoryIdempotentRepository repo=(MemoryIdempotentRepository)endpoint.getInProgressRepository();
    assertEquals(0,repo.getCacheSize());
    List<Exchange> list=endpoint.getExchanges();
    assertNotNull(list);
    assertEquals(3,list.size());
    assertEquals("a.txt",list.get(0).getIn().getHeader(Exchange.FILE_NAME));
    assertEquals("c.txt",list.get(1).getIn().getHeader(Exchange.FILE_NAME_ONLY));
    assertEquals("b.txt",list.get(2).getIn().getHeader(Exchange.FILE_NAME_ONLY));
    assertEquals(0,repo.getCacheSize());
    File fileA=new File("target/browse/a.txt");
    assertTrue("File should exist " + fileA,fileA.exists());
    File fileB=new File("target/browse/foo/b.txt");
    assertTrue("File should exist " + fileB,fileB.exists());
    File fileC=new File("target/browse/bar/c.txt");
    assertTrue("File should exist " + fileC,fileC.exists());
  }
}
