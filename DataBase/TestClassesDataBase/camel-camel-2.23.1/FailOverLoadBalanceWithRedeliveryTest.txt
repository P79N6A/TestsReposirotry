/** 
 * @version 
 */
public class FailOverLoadBalanceWithRedeliveryTest extends ContextTestSupport {
  private static int counter;
  @Test public void testFailoverWithRedelivery() throws Exception {
    counter=0;
    MockEndpoint a=getMockEndpoint("mock:a");
    a.expectedMessageCount(3);
    MockEndpoint b=getMockEndpoint("mock:b");
    b.expectedMessageCount(2);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(2).redeliveryDelay(0));
        from("direct:start").loadBalance().failover().to("direct:a","direct:b");
        from("direct:a").errorHandler(noErrorHandler()).to("mock:a").throwException(new IllegalArgumentException("I cannot do this"));
        from("direct:b").errorHandler(noErrorHandler()).to("mock:b").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            if (counter++ < 1) {
              throw new IllegalArgumentException("I can still not do this");
            }
            exchange.getIn().setBody("Bye World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
