/** 
 */
public class RecipientListBeanSubUnitOfWorkTest extends ContextTestSupport {
  private static int counter;
  @Test public void testOK() throws Exception {
    counter=0;
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:start").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:b").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("direct:start","Hello World","foo","direct:a,direct:b");
    assertMockEndpointsSatisfied();
  }
  @Test public void testError() throws Exception {
    counter=0;
    getMockEndpoint("mock:dead").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:start").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:a").expectedBodiesReceived("Donkey was here");
    getMockEndpoint("mock:b").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","Bye World","foo","direct:a,direct:b");
    assertMockEndpointsSatisfied();
    assertEquals(4,counter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0));
        from("direct:start").to("mock:start").process(new MyPreProcessor()).bean(WhereToGoBean.class).to("mock:result");
        from("direct:a").to("mock:a");
        from("direct:b").process(new MyProcessor()).to("mock:b");
      }
    }
;
  }
public static class WhereToGoBean {
    @org.apache.camel.RecipientList(shareUnitOfWork=true) public String whereToGo(){
      return "direct:a,direct:b";
    }
  }
public static class MyPreProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if (body.startsWith("Bye")) {
        exchange.getIn().setBody("Donkey was here");
      }
    }
  }
public static class MyProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if (body.contains("Donkey")) {
        counter++;
        throw new IllegalArgumentException("Donkey not allowed");
      }
    }
  }
}
