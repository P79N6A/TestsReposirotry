/** 
 * @version 
 */
public abstract class HttpsServerTestSupport extends HttpServerTestSupport {
  protected static final String KEYSTORE_PATH="./src/test/resources/localhost.ks";
  protected static final File KEYSTORE=new File(KEYSTORE_PATH);
  protected static final String SECURE_SOCKET_PROTOCOL="TLS";
  protected static final String PASSWORD="changeit";
  @Before @Override public void setUp() throws Exception {
    System.setProperty("javax.net.ssl.trustStorePassword",PASSWORD);
    System.setProperty("javax.net.ssl.trustStore",KEYSTORE_PATH);
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    System.clearProperty("javax.net.ssl.trustStorePassword");
    System.clearProperty("javax.net.ssl.trustStore");
  }
  @Override protected SSLContext getSSLContext() throws Exception {
    KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    keyStore.load(new FileInputStream(KEYSTORE),PASSWORD.toCharArray());
    KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    keyManagerFactory.init(keyStore,PASSWORD.toCharArray());
    KeyStore trustStore=KeyStore.getInstance(KeyStore.getDefaultType());
    trustStore.load(new FileInputStream(KEYSTORE),PASSWORD.toCharArray());
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init(trustStore);
    SSLContext sslcontext=SSLContext.getInstance(SECURE_SOCKET_PROTOCOL);
    sslcontext.init(keyManagerFactory.getKeyManagers(),trustManagerFactory.getTrustManagers(),null);
    return sslcontext;
  }
}
