@RunWith(MockitoJUnitRunner.class) public class PgEventConsumerTest {
  @Test public void testPgEventConsumerStart() throws Exception {
    PGDataSource dataSource=mock(PGDataSource.class);
    PGConnection connection=mock(PGConnection.class);
    PreparedStatement statement=mock(PreparedStatement.class);
    PgEventEndpoint endpoint=mock(PgEventEndpoint.class);
    Processor processor=mock(Processor.class);
    when(endpoint.getDatasource()).thenReturn(dataSource);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement("LISTEN camel")).thenReturn(statement);
    when(endpoint.getChannel()).thenReturn("camel");
    PgEventConsumer consumer=new PgEventConsumer(endpoint,processor);
    consumer.start();
    verify(connection).addNotificationListener("camel","camel",consumer);
    assertTrue(consumer.isStarted());
  }
  @Test public void testPgEventConsumerStop() throws Exception {
    PGDataSource dataSource=mock(PGDataSource.class);
    PGConnection connection=mock(PGConnection.class);
    PreparedStatement statement=mock(PreparedStatement.class);
    PgEventEndpoint endpoint=mock(PgEventEndpoint.class);
    Processor processor=mock(Processor.class);
    when(endpoint.getDatasource()).thenReturn(dataSource);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement("LISTEN camel")).thenReturn(statement);
    when(endpoint.getChannel()).thenReturn("camel");
    when(connection.prepareStatement("UNLISTEN camel")).thenReturn(statement);
    PgEventConsumer consumer=new PgEventConsumer(endpoint,processor);
    consumer.start();
    consumer.stop();
    verify(connection).removeNotificationListener("camel");
    verify(connection).close();
    assertTrue(consumer.isStopped());
  }
  @Test public void testPgEventNotification() throws Exception {
    PgEventEndpoint endpoint=mock(PgEventEndpoint.class);
    Processor processor=mock(Processor.class);
    Exchange exchange=mock(Exchange.class);
    Message message=mock(Message.class);
    when(endpoint.createExchange()).thenReturn(exchange);
    when(exchange.getIn()).thenReturn(message);
    PgEventConsumer consumer=new PgEventConsumer(endpoint,processor);
    consumer.notification(1,"camel","some event");
    verify(message).setHeader("channel","camel");
    verify(message).setBody("some event");
    verify(processor).process(exchange);
  }
}
