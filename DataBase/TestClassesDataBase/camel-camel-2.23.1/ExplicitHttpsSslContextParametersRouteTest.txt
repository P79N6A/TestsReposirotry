@Ignore public class ExplicitHttpsSslContextParametersRouteTest extends HttpsRouteTest {
  private Connector createSslSocketConnector(  CamelContext context,  int port) throws Exception {
    KeyStoreParameters ksp=new KeyStoreParameters();
    ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString());
    ksp.setPassword(pwd);
    KeyManagersParameters kmp=new KeyManagersParameters();
    kmp.setKeyPassword(pwd);
    kmp.setKeyStore(ksp);
    SSLContextParameters sslContextParameters=new SSLContextParameters();
    sslContextParameters.setKeyManagers(kmp);
    return null;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        Map<Integer,Connector> connectors=new HashMap<>();
        connectors.put(port1,createSslSocketConnector(getContext(),port1));
        connectors.put(port2,createSslSocketConnector(getContext(),port2));
        JettyHttpComponent jetty=getContext().getComponent("jetty",JettyHttpComponent.class);
        jetty.setSslSocketConnectors(connectors);
        from("jetty:https://localhost:" + port1 + "/test").to("mock:a");
        Processor proc=new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("<b>Hello World</b>");
          }
        }
;
        from("jetty:https://localhost:" + port1 + "/hello").process(proc);
        from("jetty:https://localhost:" + port2 + "/test").to("mock:b");
      }
    }
;
  }
}
