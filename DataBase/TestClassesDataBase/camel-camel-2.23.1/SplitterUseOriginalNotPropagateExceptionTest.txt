public class SplitterUseOriginalNotPropagateExceptionTest extends ContextTestSupport {
  private MyEventNotifier notifier=new MyEventNotifier();
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getManagementStrategy().addEventNotifier(notifier);
    return context;
  }
  @Test public void testUseOriginalNotPropgateException() throws Exception {
    assertEquals(0,notifier.getErrors());
    getMockEndpoint("mock:line").expectedBodiesReceived("Hello","World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello,Kaboom,World");
    try {
      template.sendBody("direct:start","Hello,Kaboom,World");
    }
 catch (    Exception e) {
      fail("Should not fail");
    }
    assertMockEndpointsSatisfied();
    assertEquals(1,notifier.getErrors());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body()).aggregationStrategy(AggregationStrategies.useOriginal(false)).filter(simple("${body} == 'Kaboom'")).throwException(new IllegalArgumentException("Forced error")).end().to("mock:line").end().to("mock:result");
      }
    }
;
  }
private static class MyEventNotifier extends EventNotifierSupport {
    private int errors;
    @Override public void notify(    EventObject event) throws Exception {
      errors++;
    }
    @Override public boolean isEnabled(    EventObject event){
      return event instanceof ExchangeFailedEvent;
    }
    public int getErrors(){
      return errors;
    }
  }
}
