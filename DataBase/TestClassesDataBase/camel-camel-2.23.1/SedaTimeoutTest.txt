/** 
 * @version 
 */
public class SedaTimeoutTest extends ContextTestSupport {
  private int timeout=100;
  @Test public void testSedaNoTimeout() throws Exception {
    Future<String> out=template.asyncRequestBody("seda:foo","World",String.class);
    assertEquals("Bye World",out.get());
  }
  @Test public void testSedaTimeout() throws Exception {
    Future<String> out=template.asyncRequestBody("seda:foo?timeout=" + timeout,"World",String.class);
    try {
      out.get();
      fail("Should have thrown an exception");
    }
 catch (    ExecutionException e) {
      assertIsInstanceOf(CamelExecutionException.class,e.getCause());
      assertIsInstanceOf(ExchangeTimedOutException.class,e.getCause().getCause());
      SedaEndpoint se=(SedaEndpoint)context.getRoute("seda").getEndpoint();
      assertNotNull("Consumer endpoint cannot be null",se);
      assertEquals("Timeout Exchanges should be removed from queue",0,se.getCurrentQueueSize());
    }
  }
  @Test public void testSedaTimeoutWithStoppedRoute() throws Exception {
    context.stopRoute("seda");
    timeout=500;
    testSedaTimeout();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo").routeId("seda").to("mock:before").delay(250).transform(body().prepend("Bye ")).to("mock:result");
      }
    }
;
  }
}
