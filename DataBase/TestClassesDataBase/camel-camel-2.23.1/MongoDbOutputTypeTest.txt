public class MongoDbOutputTypeTest extends AbstractMongoDbTest {
  @Test public void testFindAllDBCursor(){
    assertEquals(0,testCollection.count());
    pumpDataIntoTestCollection();
    int numToSkip=0;
    final int limit=100;
    for (int i=0; i < 10; i++) {
      Map<String,Object> headers=new HashMap<>();
      headers.put(MongoDbConstants.NUM_TO_SKIP,numToSkip);
      headers.put(MongoDbConstants.LIMIT,100);
      Object result=template.requestBodyAndHeaders("direct:findAllDBCursor",(Object)null,headers);
      assertTrue("Result is not of type DBCursor",result instanceof MongoIterable);
      MongoIterable<BasicDBObject> resultCursor=(MongoIterable<BasicDBObject>)result;
      for (      DBObject dbObject : resultCursor) {
        assertNotNull("DBObject in returned list should contain all fields",dbObject.get("_id"));
        assertNotNull("DBObject in returned list should contain all fields",dbObject.get("scientist"));
        assertNotNull("DBObject in returned list should contain all fields",dbObject.get("fixedField"));
      }
      numToSkip=numToSkip + limit;
    }
  }
  @Test public void testFindAllDBObjectList(){
    assertEquals(0,testCollection.count());
    pumpDataIntoTestCollection();
    Object result=template.requestBody("direct:findAllDBObjectList",(Object)null);
    assertTrue("Result is not of type List",result instanceof List);
    @SuppressWarnings("unchecked") List<DBObject> resultList=(List<DBObject>)result;
    assertListSize("Result does not contain 1000 elements",resultList,1000);
    for (    DBObject dbObject : resultList) {
      assertNotNull("DBObject in returned list should contain all fields",dbObject.get("_id"));
      assertNotNull("DBObject in returned list should contain all fields",dbObject.get("scientist"));
      assertNotNull("DBObject in returned list should contain all fields",dbObject.get("fixedField"));
    }
    for (    Exchange resultExchange : getMockEndpoint("mock:resultFindAll").getReceivedExchanges()) {
      assertEquals("Result total size header should equal 1000",1000,resultExchange.getIn().getHeader(MongoDbConstants.RESULT_TOTAL_SIZE));
    }
  }
  @Test public void testInitFindWithWrongOutputType(){
    try {
      RouteBuilder taillableRouteBuilder=new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findById&dynamicity=true&outputType=DBCursor").to("mock:dummy");
        }
      }
;
      template.getCamelContext().addRoutes(taillableRouteBuilder);
      fail("Endpoint should not be initialized with a non compatible outputType");
    }
 catch (    Exception exception) {
      assertTrue("Exception is not of type IllegalArgumentException",exception.getCause() instanceof IllegalArgumentException);
    }
  }
  @Test public void testInitTailWithWrongOutputType(){
    try {
      RouteBuilder taillableRouteBuilder=new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing&outputType=DBCursor").id("tailableCursorConsumer1").autoStartup(false).to("mock:test");
        }
      }
;
      template.getCamelContext().addRoutes(taillableRouteBuilder);
      fail("Endpoint should not be initialized with a non compatible outputType");
    }
 catch (    Exception exception) {
      assertTrue("Exception is not of type IllegalArgumentException",exception.getCause() instanceof IllegalArgumentException);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:findAllDBCursor").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&dynamicity=true&outputType=DBCursor").to("mock:resultFindAllDBCursor");
        from("direct:findAllDBObjectList").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&outputType=DBObjectList").to("mock:resultFindAllDBObjectList");
      }
    }
;
  }
}
