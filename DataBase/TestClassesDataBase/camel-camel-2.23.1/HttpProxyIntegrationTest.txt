/** 
 * Test HTTP proxy configuration for Salesforce component.
 */
@RunWith(Parameterized.class) public class HttpProxyIntegrationTest extends AbstractSalesforceTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(HttpProxyIntegrationTest.class);
  private static final String HTTP_PROXY_HOST="localhost";
  private static final String HTTP_PROXY_USER_NAME="camel-user";
  private static final String HTTP_PROXY_PASSWORD="camel-user-password";
  private static final String HTTP_PROXY_REALM="proxy-realm";
  private static Server server;
  private static int httpProxyPort;
  private static final AtomicBoolean WENT_TORUGH_PROXY=new AtomicBoolean();
  @Parameter(0) public Consumer<SalesforceComponent> configurationMethod;
  @Parameters public static Iterable<Consumer<SalesforceComponent>> methods(){
    return Arrays.asList(HttpProxyIntegrationTest::configureProxyViaComponentProperties,HttpProxyIntegrationTest::configureProxyViaClientPropertiesMap);
  }
  @Test public void testGetVersions() throws Exception {
    doTestGetVersions("");
    doTestGetVersions("Xml");
    assertTrue("Should have gone through the test proxy",WENT_TORUGH_PROXY.get());
  }
  @SuppressWarnings("unchecked") private void doTestGetVersions(  String suffix) throws Exception {
    Object o=template().requestBody("direct:getVersions" + suffix,(Object)null);
    List<Version> versions=null;
    if (o instanceof Versions) {
      versions=((Versions)o).getVersions();
    }
 else {
      versions=(List<Version>)o;
    }
    assertNotNull(versions);
    LOG.debug("Versions: {}",versions);
  }
  @BeforeClass public static void setupServer() throws Exception {
    server=new Server();
    ServerConnector connector=new ServerConnector(server);
    connector.setHost(HTTP_PROXY_HOST);
    server.addConnector(connector);
    final String authenticationString="Basic " + B64Code.encode(HTTP_PROXY_USER_NAME + ":" + HTTP_PROXY_PASSWORD,StringUtil.__ISO_8859_1);
    ConnectHandler connectHandler=new ConnectHandler(){
      @Override protected boolean handleAuthentication(      HttpServletRequest request,      HttpServletResponse response,      String address){
        final String header=request.getHeader(PROXY_AUTHORIZATION.toString());
        if (!authenticationString.equals(header)) {
          LOG.warn("Missing header " + PROXY_AUTHORIZATION);
          response.setHeader(PROXY_AUTHENTICATE.toString(),String.format("Basic realm=\"%s\"",HTTP_PROXY_REALM));
          return false;
        }
        LOG.info("Request contains required header " + PROXY_AUTHORIZATION);
        WENT_TORUGH_PROXY.set(true);
        return true;
      }
    }
;
    server.setHandler(connectHandler);
    LOG.info("Starting proxy server...");
    server.start();
    httpProxyPort=connector.getLocalPort();
    LOG.info("Started proxy server on port {}",httpProxyPort);
  }
  @Override protected void createComponent() throws Exception {
    super.createComponent();
    final SalesforceComponent salesforce=(SalesforceComponent)context().getComponent("salesforce");
    final HashMap<String,Object> properties=new HashMap<>();
    properties.put("timeout","60000");
    properties.put("removeIdleDestinations","true");
    salesforce.setHttpClientProperties(properties);
    configurationMethod.accept(salesforce);
  }
  @Override public void cleanupResources() throws Exception {
    LOG.info("Stopping proxy server...");
    server.stop();
    LOG.info("Stopped proxy server");
  }
  @Override protected RouteBuilder doCreateRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:getVersions").to("salesforce:getVersions");
        from("direct:getVersionsXml").to("salesforce:getVersions?format=XML");
      }
    }
;
  }
  private static void configureProxyViaComponentProperties(  final SalesforceComponent salesforce){
    salesforce.setHttpProxyHost(HTTP_PROXY_HOST);
    salesforce.setHttpProxyPort(httpProxyPort);
    salesforce.setIsHttpProxySecure(false);
    salesforce.setHttpProxyUsername(HTTP_PROXY_USER_NAME);
    salesforce.setHttpProxyPassword(HTTP_PROXY_PASSWORD);
    salesforce.setHttpProxyAuthUri(String.format("http://%s:%s",HTTP_PROXY_HOST,httpProxyPort));
    salesforce.setHttpProxyRealm(HTTP_PROXY_REALM);
  }
  private static void configureProxyViaClientPropertiesMap(  final SalesforceComponent salesforce){
    final Map<String,Object> properties=salesforce.getHttpClientProperties();
    properties.put(SalesforceComponent.HTTP_PROXY_HOST,HTTP_PROXY_HOST);
    properties.put(SalesforceComponent.HTTP_PROXY_PORT,httpProxyPort);
    properties.put(SalesforceComponent.HTTP_PROXY_IS_SECURE,false);
    properties.put(SalesforceComponent.HTTP_PROXY_USERNAME,HTTP_PROXY_USER_NAME);
    properties.put(SalesforceComponent.HTTP_PROXY_PASSWORD,HTTP_PROXY_PASSWORD);
    properties.put(SalesforceComponent.HTTP_PROXY_AUTH_URI,String.format("http://%s:%s",HTTP_PROXY_HOST,httpProxyPort));
    properties.put(SalesforceComponent.HTTP_PROXY_REALM,HTTP_PROXY_REALM);
  }
}
