/** 
 * Unit test will look for the spring .xml file with the same class name but postfixed with -config.xml as filename. <p/> We use Spring Testing for unit test, eg we extend AbstractJUnit4SpringContextTests that is a Spring class.
 * @version 
 */
@ContextConfiguration public class JmsToHttpTXWithOnExceptionTest extends AbstractJUnit4SpringContextTests {
  @Autowired private ProducerTemplate template;
  @EndpointInject(ref="data") private Endpoint data;
  @EndpointInject(uri="mock:rollback") private MockEndpoint rollback;
  private String ok="<?xml version=\"1.0\"?><reply><status>ok</status></reply>";
  private String noAccess="<?xml version=\"1.0\"?><reply><status>Access denied</status></reply>";
  @Test public void test404() throws Exception {
    Object out=template.requestBodyAndHeader(data,"<?xml version=\"1.0\"?><request><status id=\"123\"/></request>","user","unknown");
    assertEquals(noAccess,out);
  }
  @Test public void testRollback() throws Exception {
    rollback.expectedMinimumMessageCount(3);
    try {
      template.requestBodyAndHeader(data,"<?xml version=\"1.0\"?><request><status id=\"123\"/></request>","user","guest");
      fail("Should throw an exception");
    }
 catch (    RuntimeCamelException e) {
      assertTrue("Should timeout",e.getCause() instanceof ExchangeTimedOutException);
    }
    rollback.assertIsSatisfied();
  }
  @Test public void testOK() throws Exception {
    Object out=template.requestBodyAndHeader(data,"<?xml version=\"1.0\"?><request><status id=\"123\"/></request>","user","Claus");
    assertEquals(ok,out);
  }
}
