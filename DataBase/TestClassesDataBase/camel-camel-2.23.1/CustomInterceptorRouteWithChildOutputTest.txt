/** 
 */
public class CustomInterceptorRouteWithChildOutputTest extends ContextTestSupport {
  private MyInterceptor myInterceptor=new MyInterceptor();
  @Test public void testCustomInterceptor() throws Exception {
    getMockEndpoint("mock:child").expectedMessageCount(3);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
    assertEquals(4,myInterceptor.getDefs().size());
    assertIsInstanceOf(LogDefinition.class,myInterceptor.getDefs().get(0));
    assertIsInstanceOf(ToDefinition.class,myInterceptor.getDefs().get(1));
    assertEquals("mock:child",myInterceptor.getDefs().get(1).getLabel());
    assertIsInstanceOf(SplitDefinition.class,myInterceptor.getDefs().get(2));
    assertIsInstanceOf(ToDefinition.class,myInterceptor.getDefs().get(3));
    assertEquals("mock:result",myInterceptor.getDefs().get(3).getLabel());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addInterceptStrategy(myInterceptor);
        from("direct:start").split(body().tokenize(",")).log("Spltted ${body}").to("mock:child").end().to("mock:result");
      }
    }
;
  }
@SuppressWarnings("rawtypes") private static class MyInterceptor implements InterceptStrategy {
    private final List<ProcessorDefinition> defs=new ArrayList<>();
    @Override public Processor wrapProcessorInInterceptors(    CamelContext context,    ProcessorDefinition<?> definition,    Processor target,    Processor nextTarget) throws Exception {
      defs.add(definition);
      return target;
    }
    public List<ProcessorDefinition> getDefs(){
      return defs;
    }
  }
}
