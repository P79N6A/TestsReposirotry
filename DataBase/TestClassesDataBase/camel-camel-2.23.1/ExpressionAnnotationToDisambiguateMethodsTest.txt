/** 
 * @version 
 */
public class ExpressionAnnotationToDisambiguateMethodsTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanRouteTest.class);
  protected MyBean myBean=new MyBean();
  protected MyOtherBean myOtherBean=new MyOtherBean();
  @Test public void testSendMessage() throws Exception {
    template.sendBodyAndHeader("direct:in","<hello>world!</hello>","foo","bar");
    assertEquals("bean body: " + myBean,"bar",myBean.bar);
  }
  @Test public void testSendMessageHandler() throws Exception {
    template.sendBodyAndHeader("direct:other","<hello>world!</hello>","foo","bar");
    assertEquals("bean body: " + myOtherBean,"bar",myOtherBean.bar);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    answer.bind("myOtherBean",myOtherBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").bean("myBean");
        from("direct:other").bean("myOtherBean");
      }
    }
;
  }
public static class MyBean {
    public String bar;
    public void bar(    String body){
      fail("bar() called with: " + body);
    }
    public void foo(    @Simple("${header.foo}") String bar){
      this.bar=bar;
      LOG.info("foo() method called with: " + bar);
    }
    public void wrongMethod(    String body){
      fail("wrongMethod() called with: " + body);
    }
  }
public static class MyOtherBean {
    public String bar;
    public void bar(    String body){
      fail("bar() called with: " + body);
    }
    @Handler public void foo(    @Simple("${header.foo}") String bar){
      this.bar=bar;
      LOG.info("foo() method called with: " + bar);
    }
    public void wrongMethod(    String body){
      fail("wrongMethod() called with: " + body);
    }
  }
}
