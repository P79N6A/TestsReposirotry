/** 
 * @version 
 */
public class SplitterStopOnExceptionTest extends ContextTestSupport {
  @Test public void testSplitStopOnExceptionOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceived("Hello World","Bye World");
    template.sendBody("direct:start","Hello World,Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitStopOnExceptionStop() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceived("Hello World");
    try {
      template.sendBody("direct:start","Hello World,Kaboom,Bye World");
      fail("Should thrown an exception");
    }
 catch (    CamelExecutionException e) {
      CamelExchangeException cause=assertIsInstanceOf(CamelExchangeException.class,e.getCause());
      assertTrue(cause.getMessage().startsWith("Sequential processing failed for number 1."));
      assertEquals("Forced",cause.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).stopOnException().process(new MyProcessor()).to("mock:split");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Kaboom".equals(body)) {
        throw new IllegalArgumentException("Forced");
      }
    }
  }
}
