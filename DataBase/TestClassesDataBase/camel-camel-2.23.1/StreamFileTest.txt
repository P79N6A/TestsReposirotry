/** 
 * Unit test for stream file
 */
public class StreamFileTest extends CamelTestSupport {
  private FileOutputStream fos;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/stream");
    createDirectory("target/stream");
    File file=new File("target/stream/streamfile.txt");
    file.createNewFile();
    fos=new FileOutputStream(file);
    fos.write("Hello\n".getBytes());
    super.setUp();
  }
  @Test public void testFile() throws Exception {
    context.start();
    try {
      MockEndpoint mock=getMockEndpoint("mock:result");
      mock.expectedBodiesReceived("Hello");
      Endpoint endpoint=context.getEndpoint("stream:file?fileName=target/stream/streamfile.txt&delay=100");
      Consumer consumer=endpoint.createConsumer(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          template.send("mock:result",exchange);
        }
      }
);
      consumer.start();
      assertMockEndpointsSatisfied();
      consumer.stop();
    }
  finally {
      fos.close();
    }
  }
  @Test public void testFileProducer() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("produce").to("stream:file?fileName=target/stream/StreamFileTest.txt&autoCloseCount=2");
        from("file://target/stream?fileName=StreamFileTest.txt&noop=true").routeId("consume").autoStartup(false).split().tokenize(LS).to("mock:result");
      }
    }
);
    context.start();
    template.sendBody("direct:start","Hadrian");
    template.sendBody("direct:start","Apache");
    template.sendBody("direct:start","Camel");
    context.startRoute("consume");
    assertMockEndpointsSatisfied();
    context.stop();
  }
}
