/** 
 * @version
 */
public class DisruptorInOutChainedWithOnCompletionTest extends CamelTestSupport {
  @Test public void testInOutDisruptorChainedWithCustomOnCompletion() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("start");
    getMockEndpoint("mock:b").expectedBodiesReceived("start-a");
    getMockEndpoint("mock:c").expectedBodiesReceived("start-a-b","onCustomCompletion");
    final String reply=template.requestBody("disruptor:a","start",String.class);
    assertEquals("start-a-b-c",reply);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:a").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            exchange.addOnCompletion(new SynchronizationAdapter(){
              @Override public void onDone(              final Exchange exchange){
                template.sendBody("mock:c","onCustomCompletion");
              }
            }
);
          }
        }
).to("mock:a").transform(simple("${body}-a")).to("disruptor:b");
        from("disruptor:b").to("mock:b").transform(simple("${body}-b")).to("disruptor:c");
        from("disruptor:c").to("mock:c").transform(simple("${body}-c"));
      }
    }
;
  }
}
