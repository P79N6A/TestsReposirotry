public class ServiceInterfaceStrategyTest extends Assert {
  private static final Logger LOG=LoggerFactory.getLogger(ServiceInterfaceStrategyTest.class);
  @Test public void testServiceInterfaceStrategyWithClient(){
    ServiceInterfaceStrategy strategy=new ServiceInterfaceStrategy(CustomerService.class,true);
    QName elName=strategy.findQNameForSoapActionOrType("",GetCustomersByName.class);
    assertEquals("http://customerservice.example.com/",elName.getNamespaceURI());
    assertEquals("getCustomersByName",elName.getLocalPart());
    QName elName2=strategy.findQNameForSoapActionOrType("getCustomersByName",GetCustomersByName.class);
    assertEquals("http://customerservice.example.com/",elName2.getNamespaceURI());
    assertEquals("getCustomersByName",elName2.getLocalPart());
    QName elName3=strategy.findQNameForSoapActionOrType("http://customerservice.example.com/getAllCustomers",null);
    assertNull(elName3);
    QName elName4=strategy.findQNameForSoapActionOrType("http://customerservice.example.com/getAllAmericanCustomers",null);
    assertNull(elName4);
    try {
      elName=strategy.findQNameForSoapActionOrType("test",Class.class);
      fail();
    }
 catch (    RuntimeCamelException e) {
      LOG.debug("Caught expected message: " + e.getMessage());
    }
  }
  @Test public void testServiceInterfaceStrategyWithServer(){
    ServiceInterfaceStrategy strategy=new ServiceInterfaceStrategy(CustomerService.class,false);
    QName elName=strategy.findQNameForSoapActionOrType("",GetCustomersByNameResponse.class);
    assertEquals("http://customerservice.example.com/",elName.getNamespaceURI());
    assertEquals("getCustomersByNameResponse",elName.getLocalPart());
    QName elName2=strategy.findQNameForSoapActionOrType("http://customerservice.example.com/getCustomersByName",GetCustomersByName.class);
    assertEquals("http://customerservice.example.com/",elName2.getNamespaceURI());
    assertEquals("getCustomersByNameResponse",elName2.getLocalPart());
    try {
      elName=strategy.findQNameForSoapActionOrType("test",Class.class);
      fail();
    }
 catch (    RuntimeCamelException e) {
      LOG.debug("Caught expected message: " + e.getMessage());
    }
  }
  @Test public void testServiceInterfaceStrategyWithRequestWrapperAndClient(){
    ServiceInterfaceStrategy strategy=new ServiceInterfaceStrategy(com.example.customerservice2.CustomerService.class,true);
    QName elName=strategy.findQNameForSoapActionOrType("",com.example.customerservice2.GetCustomersByName.class);
    assertEquals("http://customerservice2.example.com/",elName.getNamespaceURI());
    assertEquals("getCustomersByName",elName.getLocalPart());
    try {
      elName=strategy.findQNameForSoapActionOrType("test",Class.class);
      fail();
    }
 catch (    RuntimeCamelException e) {
      LOG.debug("Caught expected message: " + e.getMessage());
    }
  }
  @Test public void testWithNonWebservice(){
    try {
      new ServiceInterfaceStrategy(Object.class,true);
      fail("Should throw an exception for a class that is no webservice");
    }
 catch (    IllegalArgumentException e) {
      LOG.debug("Caught expected message: " + e.getMessage());
    }
  }
  @Test public void testMultiPart(){
    ServiceInterfaceStrategy strategy=new ServiceInterfaceStrategy(MultiPartCustomerService.class,true);
    QName custNameQName=strategy.findQNameForSoapActionOrType("http://multipart.customerservice.example.com/getCustomersByName",com.example.customerservice.multipart.GetCustomersByName.class);
    QName custTypeQName=strategy.findQNameForSoapActionOrType("http://multipart.customerservice.example.com/getCustomersByName",com.example.customerservice.multipart.Product.class);
    assertEquals("http://multipart.customerservice.example.com/",custNameQName.getNamespaceURI());
    assertEquals("getCustomersByName",custNameQName.getLocalPart());
    assertEquals("http://multipart.customerservice.example.com/",custTypeQName.getNamespaceURI());
    assertEquals("product",custTypeQName.getLocalPart());
  }
}
