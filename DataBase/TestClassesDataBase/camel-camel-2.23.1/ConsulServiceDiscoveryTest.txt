public class ConsulServiceDiscoveryTest extends ConsulTestSupport {
  private AgentClient client;
  private List<Registration> registrations;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    client=getConsul().agentClient();
    registrations=new ArrayList<>(3);
    for (int i=0; i < 6; i++) {
      final boolean healty=ThreadLocalRandom.current().nextBoolean();
      final int port=SocketUtils.findAvailableTcpPort();
      Registration.RegCheck c=ImmutableRegCheck.builder().ttl("1m").status(healty ? "passing" : "critical").build();
      Registration r=ImmutableRegistration.builder().id("service-" + i).name("my-service").address("127.0.0.1").addTags("a-tag").addTags("key1=value1").addTags("key2=value2").addTags("healthy=" + healty).putMeta("meta-key","meta-val").port(port).check(c).build();
      client.register(r);
      registrations.add(r);
    }
  }
  @Override public void doPostTearDown() throws Exception {
    super.doPostTearDown();
    registrations.forEach(r -> client.deregister(r.getId()));
  }
  @Test public void testServiceDiscovery() throws Exception {
    ConsulConfiguration configuration=new ConsulConfiguration();
    configuration.setUrl(consulUrl());
    ServiceDiscovery discovery=new ConsulServiceDiscovery(configuration);
    List<ServiceDefinition> services=discovery.getServices("my-service");
    assertNotNull(services);
    assertEquals(6,services.size());
    for (    ServiceDefinition service : services) {
      Assertions.assertThat(service.getMetadata()).isNotEmpty();
      Assertions.assertThat(service.getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_NAME,"my-service");
      Assertions.assertThat(service.getMetadata()).containsKey(ServiceDefinition.SERVICE_META_ID);
      Assertions.assertThat(service.getMetadata()).containsKey("a-tag");
      Assertions.assertThat(service.getMetadata()).containsEntry("key1","value1");
      Assertions.assertThat(service.getMetadata()).containsEntry("key2","value2");
      Assertions.assertThat(service.getMetadata()).containsEntry("meta-key","meta-val");
      Assertions.assertThat("" + service.getHealth().isHealthy()).isEqualTo(service.getMetadata().get("healthy"));
    }
  }
}
