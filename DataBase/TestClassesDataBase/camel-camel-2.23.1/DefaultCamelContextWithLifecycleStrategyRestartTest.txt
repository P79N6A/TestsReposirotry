/** 
 */
public class DefaultCamelContextWithLifecycleStrategyRestartTest extends ContextTestSupport {
  private MyStrategy strategy=new MyStrategy();
  @Test public void testRestart() throws Exception {
    assertTrue(context.getStatus().isStarted());
    assertFalse(context.getStatus().isStopped());
    assertEquals(1,context.getRoutes().size());
    assertEquals(1,strategy.getContextStartCounter());
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
    assertFalse(context.getStatus().isStarted());
    assertTrue(context.getStatus().isStopped());
    assertEquals(0,context.getRoutes().size());
    context.start();
    assertTrue(context.getStatus().isStarted());
    assertFalse(context.getStatus().isStopped());
    assertEquals(1,context.getRoutes().size());
    assertEquals(2,strategy.getContextStartCounter());
    template=context.createProducerTemplate();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRouteStopped() throws Exception {
    assertTrue(context.getRouteStatus("foo").isStarted());
    assertEquals(0,strategy.getRemoveCounter());
    context.stopRoute("foo");
    assertEquals(0,strategy.getRemoveCounter());
    context.removeRoute("foo");
    assertEquals(1,strategy.getRemoveCounter());
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addLifecycleStrategy(strategy);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("foo").to("mock:result");
      }
    }
;
  }
private class MyStrategy extends LifecycleStrategySupport {
    private AtomicInteger contextStartCounter=new AtomicInteger();
    private AtomicInteger removeCounter=new AtomicInteger();
    @Override public void onContextStart(    CamelContext context) throws VetoCamelContextStartException {
      contextStartCounter.incrementAndGet();
    }
    @Override public void onRoutesRemove(    Collection<Route> routes){
      removeCounter.incrementAndGet();
    }
    public int getContextStartCounter(){
      return contextStartCounter.get();
    }
    public int getRemoveCounter(){
      return removeCounter.get();
    }
  }
}
