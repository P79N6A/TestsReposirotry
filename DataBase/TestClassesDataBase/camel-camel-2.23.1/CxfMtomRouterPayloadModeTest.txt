/** 
 * Unit test for exercising MTOM enabled end-to-end router in PAYLOAD mode
 * @version 
 */
@ContextConfiguration public class CxfMtomRouterPayloadModeTest extends AbstractJUnit4SpringContextTests {
  static int port1=CXFTestSupport.getPort1();
  static int port2=CXFTestSupport.getPort2();
  @Autowired protected CamelContext context;
  private Endpoint endpoint;
  @Before public void setUp() throws Exception {
    endpoint=Endpoint.publish("http://localhost:" + port2 + "/"+ getClass().getSimpleName()+ "/jaxws-mtom/hello",getImpl());
    SOAPBinding binding=(SOAPBinding)endpoint.getBinding();
    binding.setMTOMEnabled(true);
  }
  @After public void tearDown() throws Exception {
    if (endpoint != null) {
      endpoint.stop();
    }
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    if (MtomTestHelper.isAwtHeadless(logger,null)) {
      return;
    }
    Holder<byte[]> photo=new Holder<>(MtomTestHelper.REQ_PHOTO_DATA);
    Holder<Image> image=new Holder<>(getImage("/java.jpg"));
    Hello port=getPort();
    SOAPBinding binding=(SOAPBinding)((BindingProvider)port).getBinding();
    binding.setMTOMEnabled(true);
    port.detail(photo,image);
    MtomTestHelper.assertEquals(MtomTestHelper.RESP_PHOTO_DATA,photo.value);
    Assert.assertNotNull(image.value);
    if (image.value instanceof BufferedImage) {
      Assert.assertEquals(560,((BufferedImage)image.value).getWidth());
      Assert.assertEquals(300,((BufferedImage)image.value).getHeight());
    }
  }
  protected Hello getPort(){
    URL wsdl=getClass().getResource("/mtom.wsdl");
    assertNotNull("WSDL is null",wsdl);
    HelloService service=new HelloService(wsdl,HelloService.SERVICE);
    assertNotNull("Service is null ",service);
    Hello port=service.getHelloPort();
    ((BindingProvider)port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,"http://localhost:" + port1 + "/CxfMtomRouterPayloadModeTest/jaxws-mtom/hello");
    return port;
  }
  private Image getImage(  String name) throws Exception {
    return ImageIO.read(getClass().getResource(name));
  }
  protected Object getImpl(){
    return new HelloImpl();
  }
}
