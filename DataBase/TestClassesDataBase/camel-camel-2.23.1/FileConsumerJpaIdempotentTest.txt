/** 
 * Unit test using jpa idempotent repository for the file consumer.
 */
public class FileConsumerJpaIdempotentTest extends AbstractJpaTest {
  protected static final String SELECT_ALL_STRING="select x from " + MessageProcessed.class.getName() + " x where x.processorName = ?1";
  protected static final String PROCESSOR_NAME="FileConsumer";
  @Before public void setUp() throws Exception {
    deleteDirectory("target/idempotent");
    super.setUp();
    template.sendBodyAndHeader("file://target/idempotent/","Hello World",Exchange.FILE_NAME,"report.txt");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/idempotent/?idempotent=true&idempotentRepository=#jpaStore&move=done/${file:name}").routeId("foo").autoStartup(false).to("mock:result");
      }
    }
;
  }
  @Override protected void cleanupRepository(){
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus arg0){
        entityManager.joinTransaction();
        Query query=entityManager.createQuery(SELECT_ALL_STRING);
        query.setParameter(1,PROCESSOR_NAME);
        List<?> list=query.getResultList();
        for (        Object item : list) {
          entityManager.remove(item);
        }
        entityManager.flush();
        return Boolean.TRUE;
      }
    }
);
  }
  @Test public void testFileConsumerJpaIdempotent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedMessageCount(1);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    Thread.sleep(1000);
    mock.reset();
    mock.expectedMessageCount(0);
    File file=new File("target/idempotent/done/report.txt");
    File renamed=new File("target/idempotent/report.txt");
    file.renameTo(renamed);
    Thread.sleep(2000);
    assertMockEndpointsSatisfied();
  }
  @Override protected String routeXml(){
    return "org/apache/camel/processor/jpa/fileConsumerJpaIdempotentTest-config.xml";
  }
  @Override protected String selectAllString(){
    return SELECT_ALL_STRING;
  }
}
