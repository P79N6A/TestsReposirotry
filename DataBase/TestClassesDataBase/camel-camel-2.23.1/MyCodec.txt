private static class MyCodec implements ProtocolCodecFactory {
  private final boolean failing;
  MyCodec(  boolean failing){
    this.failing=failing;
  }
  MyCodec(){
    this.failing=false;
  }
  @Override public ProtocolEncoder getEncoder(  IoSession session) throws Exception {
    return new ProtocolEncoder(){
      @Override public void encode(      IoSession ioSession,      Object message,      ProtocolEncoderOutput out) throws Exception {
        IoBuffer bb=IoBuffer.allocate(32).setAutoExpand(true);
        String s=(String)message;
        bb.put(s.getBytes("US-ASCII"));
        bb.flip();
        out.write(bb);
      }
      @Override public void dispose(      IoSession ioSession) throws Exception {
      }
    }
;
  }
  @Override public ProtocolDecoder getDecoder(  IoSession session) throws Exception {
    return new CumulativeProtocolDecoder(){
      @Override protected boolean doDecode(      IoSession session,      IoBuffer in,      ProtocolDecoderOutput out) throws Exception {
        if (failing) {
          throw new IllegalArgumentException("Something went wrong in decode");
        }
        if (in.remaining() > 0) {
          byte[] buf=new byte[in.remaining()];
          in.get(buf);
          out.write(new String(buf,"US-ASCII"));
          return true;
        }
 else {
          return false;
        }
      }
    }
;
  }
}
