public class XsltCustomizeEntityResolverTest extends ContextTestSupport {
  private static final String EXPECTED_XML_CONSTANT="<A>1</A>";
  @Test public void testXsltCustomURIResolverDirectInRouteUri() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:resultURIResolverDirect");
    mock.expectedMessageCount(1);
    mock.message(0).body().contains(EXPECTED_XML_CONSTANT);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:src/test/data/?fileName=xml_with_entity.xml&noop=true&initialDelay=0&delay=10").to("xslt:xslt/common/copy.xsl?allowStAX=false&output=string&entityResolver=#customEntityResolver").to("mock:resultURIResolverDirect");
      }
    }
;
  }
  private EntityResolver getCustomEntityResolver(){
    return new EntityResolver(){
      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new InputSource(new StringReader("<!ELEMENT A (#PCDATA)>"));
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    EntityResolver customEntityResolver=getCustomEntityResolver();
    registry.bind("customEntityResolver",customEntityResolver);
    return registry;
  }
}
