/** 
 */
public class ComponentUseRawUriTest extends ContextTestSupport {
public static class MyEndpoint extends DefaultEndpoint {
    String uri;
    String remaining;
    String foo;
    String bar;
    public MyEndpoint(    final String uri,    final String remaining){
      this.uri=uri;
      this.remaining=remaining;
    }
    public Producer createProducer() throws Exception {
      throw new UnsupportedOperationException("Not supported yet.");
    }
    public Consumer createConsumer(    Processor processor) throws Exception {
      throw new UnsupportedOperationException("Not supported yet.");
    }
    public String getFoo(){
      return foo;
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
    public String getBar(){
      return bar;
    }
    public void setBar(    String bar){
      this.bar=bar;
    }
    public boolean isSingleton(){
      return true;
    }
    public String getUri(){
      return uri;
    }
  }
class MyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    final String uri,    final String remaining,    final Map<String,Object> parameters) throws Exception {
      MyEndpoint answer=new MyEndpoint(uri,remaining);
      setProperties(answer,parameters);
      return answer;
    }
    @Override public boolean useRawUri(){
      return true;
    }
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context.addComponent("my",new MyComponent());
  }
  @Test public void testUseRaw(){
    String uri="my:host:11303/tube1+tube?foo=%2B+tube%3F&bar=++%%w?rd";
    MyEndpoint endpoint=context.getEndpoint(uri,MyEndpoint.class);
    assertNotNull("endpoint",endpoint);
    assertEquals("%2B+tube%3F",endpoint.getFoo());
    assertEquals("++%%w?rd",endpoint.getBar());
    assertEquals(uri,endpoint.getUri());
  }
}
