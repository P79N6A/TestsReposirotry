@DirtiesContext @RunWith(SpringRunner.class) @SpringBootApplication @SpringBootTest(classes={CamelAutoConfiguration.class,CamelCloudServiceCallSimpleExpressionTest.TestConfiguration.class,CamelCloudServiceCallSimpleExpressionTest.SpringBootPropertySourceConfig.class}) public class CamelCloudServiceCallSimpleExpressionTest {
  @Autowired private ProducerTemplate template;
  @Test public void testServiceCall() throws Exception {
    Assert.assertEquals(String.valueOf(SpringBootPropertyUtil.PORT1),template.requestBody("direct:start",null,String.class));
    Assert.assertEquals(String.valueOf(SpringBootPropertyUtil.PORT3),template.requestBody("direct:start",null,String.class));
  }
@Configuration public static class TestConfiguration {
    @Bean public RouteBuilder myRouteBuilder(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").serviceCall("{{service.name}}");
          fromF("jetty:http://localhost:%d/hello",SpringBootPropertyUtil.PORT1).transform().constant(SpringBootPropertyUtil.PORT1);
          fromF("jetty:http://localhost:%d/hello",SpringBootPropertyUtil.PORT2).transform().constant(SpringBootPropertyUtil.PORT2);
          fromF("jetty:http://localhost:%d/hello",SpringBootPropertyUtil.PORT3).transform().constant(SpringBootPropertyUtil.PORT3);
        }
      }
;
    }
  }
  private static Properties getAllProperties(){
    Properties prop=new Properties();
    prop.put("service.name","custom-svc-list");
    prop.put("camel.cloud.load-balancer.enabled",false);
    prop.put("camel.cloud.service-call.component","jetty");
    prop.put("camel.cloud.service-call.expression","$simple{header.CamelServiceCallScheme}:http://$simple{header.CamelServiceCallServiceHost}:$simple{header.CamelServiceCallServicePort}/hello");
    prop.put("camel.cloud.service-call.expression-language","simple");
    prop.put("camel.cloud.service-discovery.services[custom-svc-list]",SpringBootPropertyUtil.getDiscoveryServices());
    prop.put("camel.cloud.service-filter.blacklist[custom-svc-list]",SpringBootPropertyUtil.getServiceFilterBlacklist());
    prop.put("ribbon.enabled",false);
    prop.put("debug",false);
    return prop;
  }
@Configuration public static class SpringBootPropertySourceConfig {
    @Autowired private ConfigurableEnvironment env;
    @Bean @Lazy(false) public MutablePropertySources springBootPropertySource(){
      MutablePropertySources sources=env.getPropertySources();
      sources.addFirst(new PropertiesPropertySource("boot-test-property",CamelCloudServiceCallSimpleExpressionTest.getAllProperties()));
      return sources;
    }
  }
}
