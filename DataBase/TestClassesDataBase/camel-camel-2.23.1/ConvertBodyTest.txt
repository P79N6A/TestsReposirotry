public class ConvertBodyTest extends ContextTestSupport {
  @Test public void testConvertBodyTo(){
    try {
      context.addRoutes(new RouteBuilder(){
        public void configure(){
          from("direct:invalid").convertBodyTo(String.class,"ASSI").to("mock:endpoint");
        }
      }
);
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertIsInstanceOf(UnsupportedCharsetException.class,e.getCause());
    }
  }
  @Test public void testConvertBodyCharset() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:foo").convertBodyTo(byte[].class,"iso-8859-1").to("mock:foo");
      }
    }
);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:foo").message(0).exchangeProperty(Exchange.CHARSET_NAME).isNull();
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertBodyCharsetWithExistingCharsetName() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:foo").convertBodyTo(byte[].class,"iso-8859-1").to("mock:foo");
      }
    }
);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:foo").message(0).exchangeProperty(Exchange.CHARSET_NAME).isEqualTo("UTF-8");
    Exchange srcExchange=ExchangeBuilder.anExchange(context).withProperty(Exchange.CHARSET_NAME,"UTF-8").withBody("Hello World").build();
    template.send("direct:foo",srcExchange);
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertToInteger() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(11);
    template.sendBody("direct:start","11");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertNullBody() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    result.message(0).body().isNull();
    template.sendBody("direct:start",null);
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertFailed() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:invalid","11");
      fail("Should have thrown an exception");
    }
 catch (    RuntimeCamelException e) {
      assertTrue(e.getCause() instanceof InvalidPayloadException);
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertToBytesCharset() throws Exception {
    byte[] body="Hello World".getBytes("iso-8859-1");
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(body);
    template.sendBody("direct:charset","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertToStringCharset() throws Exception {
    String body="Hello World";
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(body);
    template.sendBody("direct:charset3",new ByteArrayInputStream(body.getBytes("utf-16")));
    assertMockEndpointsSatisfied();
  }
  @Test public void testConvertToBytesCharsetFail() throws Exception {
    byte[] body="Hello World".getBytes("utf-8");
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(body);
    template.sendBody("direct:charset2","Hello World");
    result.assertIsNotSatisfied();
  }
  @Test public void testConvertToStringCharsetFail() throws Exception {
    String osName=System.getProperty("os.name").toLowerCase(Locale.ENGLISH);
    boolean aix=osName.indexOf("aix") > -1;
    if (aix) {
      return;
    }
    String body="Hell\u00F6 W\u00F6rld";
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(body);
    template.sendBody("direct:charset3",new ByteArrayInputStream(body.getBytes("utf-8")));
    result.assertIsNotSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").convertBodyTo(Integer.class).to("mock:result");
        from("direct:invalid").convertBodyTo(Date.class).to("mock:result");
        from("direct:charset").convertBodyTo(byte[].class,"iso-8859-1").to("mock:result");
        from("direct:charset2").convertBodyTo(byte[].class,"utf-16").to("mock:result");
        from("direct:charset3").convertBodyTo(String.class,"utf-16").to("mock:result");
      }
    }
;
  }
}
