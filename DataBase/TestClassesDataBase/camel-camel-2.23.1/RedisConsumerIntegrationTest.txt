@Ignore public class RedisConsumerIntegrationTest extends RedisTestSupport {
  private static final JedisConnectionFactory CONNECTION_FACTORY=new JedisConnectionFactory();
  private static final RedisMessageListenerContainer LISTENER_CONTAINER=new RedisMessageListenerContainer();
static {
    CONNECTION_FACTORY.afterPropertiesSet();
    LISTENER_CONTAINER.setConnectionFactory(CONNECTION_FACTORY);
    LISTENER_CONTAINER.afterPropertiesSet();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    redisTemplate=new RedisTemplate<>();
    redisTemplate.setConnectionFactory(CONNECTION_FACTORY);
    redisTemplate.afterPropertiesSet();
    registry.bind("redisTemplate",redisTemplate);
    registry.bind("listenerContainer",LISTENER_CONTAINER);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("spring-redis://localhost:6379?command=SUBSCRIBE&channels=one,two&listenerContainer=#listenerContainer&redisTemplate=#redisTemplate").startupOrder(1).to("mock:result");
        from("direct:start").startupOrder(2).delay(2000).to("spring-redis://localhost:6379?redisTemplate=#redisTemplate");
      }
    }
;
  }
  @Test public void consumerReceivesMessages() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived("message");
    sendHeaders(RedisConstants.COMMAND,"PUBLISH",RedisConstants.CHANNEL,"two",RedisConstants.MESSAGE,"message");
    mock.assertIsSatisfied();
  }
}
