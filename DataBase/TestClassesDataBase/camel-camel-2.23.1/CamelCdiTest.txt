@RunWith(Arquillian.class) public class CamelCdiTest {
  private static final Logger LOG=LoggerFactory.getLogger(CamelCdiTest.class);
  @Any @Inject Instance<CamelContext> camelContexts;
  @Inject @ContextName("contextA") RoutesContextA routesA;
  @Inject @ContextName("contextB") RoutesContextB routesB;
  @Inject @ContextName("contextC") RoutesContextC routesC;
  @Inject @ContextName("contextD") RoutesContextD routesD;
  @Inject @ContextName("contextD") @Uri(value="seda:foo") ProducerTemplate producerD;
  @Deployment public static JavaArchive createDeployment(){
    return Maven.configureResolver().workOffline().loadPomFromFile("pom.xml").resolve("org.apache.camel:camel-cdi").withoutTransitivity().asSingle(JavaArchive.class).addClasses(RoutesContextA.class,RoutesContextB.class,RoutesContextC.class,RoutesContextD.class);
  }
  @Test public void checkContextsHaveCorrectEndpointsAndRoutes() throws Exception {
    assertNotNull("camelContexts not injected!",camelContexts);
    for (    CamelContext camelContext : camelContexts) {
      LOG.info("CamelContext " + camelContext + " has endpoints: "+ camelContext.getEndpointMap().keySet());
      camelContext.start();
    }
    CamelContext contextA=assertCamelContext("contextA");
    assertHasEndpoints(contextA,"seda://A.a","mock://A.b");
    MockEndpoint mockEndpoint=routesA.b;
    mockEndpoint.expectedBodiesReceived(Constants.EXPECTED_BODIES_A);
    routesA.sendMessages();
    mockEndpoint.assertIsSatisfied();
    CamelContext contextB=assertCamelContext("contextB");
    assertHasEndpoints(contextB,"seda://B.a","mock://B.b");
    MockEndpoint mockEndpointB=routesB.b;
    mockEndpointB.expectedBodiesReceived(Constants.EXPECTED_BODIES_B);
    routesB.sendMessages();
    mockEndpointB.assertIsSatisfied();
    CamelContext contextC=assertCamelContext("contextC");
    assertHasEndpoints(contextC,"seda://C.a","mock://C.b");
    MockEndpoint mockEndpointC=routesC.b;
    mockEndpointC.expectedBodiesReceived(Constants.EXPECTED_BODIES_C);
    routesC.sendMessages();
    mockEndpointC.assertIsSatisfied();
    CamelContext contextD=assertCamelContext("contextD");
    assertHasEndpoints(contextD,"seda://D.a","mock://D.b");
    MockEndpoint mockEndpointD=routesD.b;
    mockEndpointD.expectedBodiesReceived(Constants.EXPECTED_BODIES_D);
    routesD.sendMessages();
    mockEndpointD.assertIsSatisfied();
    CamelContext contextE=assertCamelContext("contextD");
    assertHasEndpoints(contextE,"seda://D.a","mock://D.b");
    MockEndpoint mockDb=CamelContextHelper.getMandatoryEndpoint(contextE,"mock://D.b",MockEndpoint.class);
    mockDb.reset();
    mockDb.expectedBodiesReceived(Constants.EXPECTED_BODIES_D_A);
    for (    Object body : Constants.EXPECTED_BODIES_D_A) {
      producerD.sendBody("seda:D.a",body);
    }
    mockDb.assertIsSatisfied();
  }
  public static void assertHasEndpoints(  CamelContext context,  String... uris){
    Map<String,Endpoint> endpointMap=context.getEndpointMap();
    for (    String uri : uris) {
      Endpoint endpoint=endpointMap.get(uri);
      assertNotNull("CamelContext " + context + " does not have an Endpoint with URI "+ uri+ " but has "+ endpointMap.keySet(),endpoint);
    }
  }
  protected CamelContext assertCamelContext(  String contextName){
    CamelContext answer=camelContexts.select(ContextName.Literal.of(contextName)).get();
    assertTrue("CamelContext '" + contextName + "' is not started",answer.getStatus().isStarted());
    return answer;
  }
}
