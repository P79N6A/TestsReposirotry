public class RestletConfigurationTest extends RestletTestSupport {
  @Override protected void doPreSetup(){
    assertPresent(GsonConverter.class);
    assertPresent(JacksonConverter.class);
  }
  @Test public void testConfiguration() throws Exception {
    assertNotPresent(GsonConverter.class);
    assertPresent(JacksonConverter.class);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("restlet").componentProperty("enabledConverters","JacksonConverter");
        from("direct:start").to("restlet:http://localhost:" + portNum + "/users/1/basic").to("log:reply");
      }
    }
;
  }
  protected <T extends ConverterHelper>Optional<ConverterHelper> findByType(  Class<T> type){
    return Engine.getInstance().getRegisteredConverters().stream().filter(type::isInstance).findFirst();
  }
  protected <T extends ConverterHelper>void assertPresent(  Class<T> type){
    assertTrue(type.getSimpleName(),findByType(type).isPresent());
  }
  protected <T extends ConverterHelper>void assertNotPresent(  Class<T> type){
    assertFalse(type.getSimpleName(),findByType(type).isPresent());
  }
}
