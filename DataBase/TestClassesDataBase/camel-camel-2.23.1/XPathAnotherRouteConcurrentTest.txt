/** 
 * @version 
 */
public class XPathAnotherRouteConcurrentTest extends ContextTestSupport {
  @Test public void testConcurrent() throws Exception {
    doSendMessages(100,10);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:claus").expectedMessageCount(files / 2);
    getMockEndpoint("mock:james").expectedMessageCount(files / 2);
    getMockEndpoint("mock:claus").expectsNoDuplicates(body());
    getMockEndpoint("mock:james").expectsNoDuplicates(body());
    getMockEndpoint("mock:other").expectedMessageCount(0);
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    for (int i=0; i < files; i++) {
      final int index=i;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          if (index % 2 == 0) {
            template.sendBody("seda:foo",createXmlBody(index,"Claus"));
          }
 else {
            template.sendBody("seda:foo",createXmlBody(index,"James"));
          }
          return null;
        }
      }
);
    }
    assertMockEndpointsSatisfied();
    executor.shutdown();
  }
  private String createXmlBody(  int index,  String name){
    StringBuilder sb=new StringBuilder();
    sb.append("<persons>\n");
    for (int i=0; i < 100; i++) {
      sb.append("<person>");
      sb.append("<id>" + index + "-"+ i+ "</id>");
      sb.append("<name>");
      if (i == 95) {
        sb.append(name);
      }
 else {
        sb.append("Foo");
      }
      sb.append("</name>");
      sb.append("</person>'\n");
    }
    sb.append("\n</persons>");
    return sb.toString();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?concurrentConsumers=10").choice().when().xpath("/persons/person/name = 'Claus'").to("mock:claus").when().xpath("/persons/person/name = 'James'").to("mock:james").otherwise().to("mock:other").end();
      }
    }
;
  }
}
