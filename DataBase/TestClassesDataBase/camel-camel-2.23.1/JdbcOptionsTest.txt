public class JdbcOptionsTest extends AbstractJdbcTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint mock;
  @SuppressWarnings("rawtypes") @Test public void testReadSize() throws Exception {
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","select * from customer");
    assertMockEndpointsSatisfied();
    List list=mock.getExchanges().get(0).getIn().getBody(ArrayList.class);
    assertEquals(1,list.size());
  }
  @SuppressWarnings("rawtypes") @Test public void testInsertCommit() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:resultTx");
    mock.expectedMessageCount(2);
    template.sendBody("direct:startTx","insert into customer values ('cust4', 'johnsmith')");
    template.sendBody("direct:startTx","insert into customer values ('cust5', 'hkesler')");
    mock.assertIsSatisfied();
    String body=mock.getExchanges().get(0).getIn().getBody(String.class);
    assertNull(body);
    MockEndpoint mockTest=getMockEndpoint("mock:retrieve");
    mockTest.expectedMessageCount(1);
    template.sendBody("direct:retrieve","select * from customer");
    mockTest.assertIsSatisfied();
    List list=mockTest.getExchanges().get(0).getIn().getBody(ArrayList.class);
    assertEquals(5,list.size());
  }
  @Test public void testNoDataSourceInRegistry() throws Exception {
    try {
      template.sendBody("jdbc:xxx","Hello World");
      fail("Should have thrown a ResolveEndpointFailedException");
    }
 catch (    ResolveEndpointFailedException e) {
      assertEquals("No bean could be found in the registry for: xxx of type: javax.sql.DataSource",e.getCause().getMessage());
    }
  }
  @Test public void testResettingAutoCommitOption() throws Exception {
    Connection connection=db.getConnection();
    assertTrue(connection.getAutoCommit());
    connection.close();
    template.sendBody("direct:retrieve","select * from customer");
    connection=db.getConnection();
    assertTrue(connection.getAutoCommit());
    connection.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").to("jdbc:testdb?readSize=1").to("mock:result");
        from("direct:retrieve").to("jdbc:testdb").to("mock:retrieve");
        from("direct:startTx").to("jdbc:testdb?transacted=true").to("mock:resultTx");
      }
    }
;
  }
}
