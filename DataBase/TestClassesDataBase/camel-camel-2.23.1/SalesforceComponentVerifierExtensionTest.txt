public class SalesforceComponentVerifierExtensionTest extends CamelTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  protected ComponentVerifierExtension getExtension(){
    Component component=context().getComponent("salesforce");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    return verifier;
  }
  @Test public void testUsernamePasswordParameters(){
    HashMap<String,Object> parameters=new HashMap<>();
    parameters.put("clientId","clientId");
    parameters.put("clientSecret","clientSecret");
    parameters.put("userName","userName");
    parameters.put("password","password");
    ComponentVerifierExtension.Result result=getExtension().verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testRefreshTokenParameters(){
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("clientId","clientId");
    parameters.put("clientSecret","clientSecret");
    parameters.put("refreshToken","refreshToken");
    ComponentVerifierExtension.Result result=getExtension().verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testWrongParameters(){
    HashMap<String,Object> parameters=new HashMap<>();
    parameters.put("clientId","clientId");
    parameters.put("clientSecret","clientSecret");
    parameters.put("password","password");
    ComponentVerifierExtension.Result result=getExtension().verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(3,result.getErrors().size());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION,result.getErrors().get(0).getCode());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION,result.getErrors().get(1).getCode());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION,result.getErrors().get(2).getCode());
  }
}
