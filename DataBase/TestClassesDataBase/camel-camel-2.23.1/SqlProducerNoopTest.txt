public class SqlProducerNoopTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testInsertNoop() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:insert");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(SqlConstants.SQL_UPDATE_COUNT,1);
    mock.message(0).body().isEqualTo("Hi there!");
    template.requestBody("direct:insert","Hi there!");
    assertMockEndpointsSatisfied();
  }
  @Test public void testQueryNoop() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(SqlConstants.SQL_ROW_COUNT,3);
    mock.message(0).body().isEqualTo("Hi there!");
    template.requestBody("direct:query","Hi there!");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUpdateNoop() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:update");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(SqlConstants.SQL_UPDATE_COUNT,1);
    mock.message(0).body().isEqualTo("Hi there!");
    template.requestBody("direct:update","Hi there!");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDeleteNoop() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:delete");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(SqlConstants.SQL_UPDATE_COUNT,1);
    mock.message(0).body().isEqualTo("Hi there!");
    template.requestBody("direct:delete","Hi there!");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:query").to("sql:select * from projects?noop=true").to("mock:query");
        from("direct:update").to("sql:update projects set license='MIT' where id=3?noop=true").to("mock:update");
        from("direct:insert").to("sql:insert into projects values (4, 'Zookeeper', 'ASF')?noop=true").to("mock:insert");
        from("direct:delete").to("sql:delete from projects where id=1?noop=true").to("mock:delete");
      }
    }
;
  }
}
