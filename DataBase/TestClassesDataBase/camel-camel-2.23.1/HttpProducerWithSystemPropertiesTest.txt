/** 
 * @version 
 */
public class HttpProducerWithSystemPropertiesTest extends BaseHttpTest {
  private static Object defaultSystemHttpAgent;
  private HttpServer localServer;
  @BeforeClass public static void setUpHttpAgentSystemProperty() throws Exception {
    defaultSystemHttpAgent=System.setProperty("http.agent","myCoolCamelCaseAgent");
  }
  @AfterClass public static void resetHttpAgentSystemProperty() throws Exception {
    if (defaultSystemHttpAgent != null) {
      System.setProperty("http.agent",String.valueOf(defaultSystemHttpAgent));
    }
 else {
      System.clearProperty("http.agent");
    }
  }
  @Before @Override public void setUp() throws Exception {
    Map<String,String> expectedHeaders=new HashMap<>();
    expectedHeaders.put("User-Agent","myCoolCamelCaseAgent");
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("*",new HeaderValidationHandler("GET",null,null,getExpectedContent(),expectedHeaders)).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void httpGetWithProxyFromSystemProperties() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "?useSystemProperties=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchange(exchange);
  }
}
