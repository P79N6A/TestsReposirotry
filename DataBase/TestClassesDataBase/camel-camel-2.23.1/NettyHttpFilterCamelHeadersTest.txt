public class NettyHttpFilterCamelHeadersTest extends BaseNettyTest {
  @Test public void testFilterCamelHeaders() throws Exception {
    Exchange out=template.request("netty4-http:http://localhost:{{port}}/test/filter",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Claus");
        exchange.getIn().setHeader("bar",123);
      }
    }
);
    assertNotNull(out);
    assertEquals("Hi Claus",out.getOut().getBody(String.class));
    Map<String,Object> headers=out.getOut().getHeaders();
    for (    String key : headers.keySet()) {
      if (!key.equalsIgnoreCase(Exchange.HTTP_RESPONSE_CODE) && !key.equalsIgnoreCase(Exchange.HTTP_RESPONSE_TEXT)) {
        assertTrue("Should not contain any Camel internal headers",!key.toLowerCase().startsWith("camel"));
      }
    }
    assertEquals(200,headers.get(Exchange.HTTP_RESPONSE_CODE));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyFooBean());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://localhost:{{port}}/test/filter").bean("foo");
      }
    }
;
  }
public static class MyFooBean {
    public String hello(    String name){
      return "Hi " + name;
    }
  }
}
