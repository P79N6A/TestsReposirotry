/** 
 * Unit test for intercepting sending to endpoint
 * @version 
 */
public class InterceptSendToEndpointWithStopTest extends ContextTestSupport {
  @Test public void testInterceptSendToEndpointWithStop() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(0);
    getMockEndpoint("mock:c").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","stop");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptSendToEndpointWithNoStop() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:c").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock:b").choice().when(body().isEqualTo("stop")).stop().otherwise().to("mock:c");
        from("direct:start").to("mock:a").to("mock:b").to("mock:result");
      }
    }
;
  }
}
