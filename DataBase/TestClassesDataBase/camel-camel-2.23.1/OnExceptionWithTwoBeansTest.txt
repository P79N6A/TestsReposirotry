public class OnExceptionWithTwoBeansTest extends ContextTestSupport {
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=new JndiRegistry(createJndiContext());
    registry.bind("checkin",new MyBean1());
    registry.bind("handler",new MyBean2());
    return registry;
  }
  @Test public void testOnExceptionFirstBean() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:bean").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","illegal");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOnExceptionSecondBean() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:bean").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","handle");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).handled(true).setBody().constant("Handled").to("mock:error").end();
        from("direct:start").unmarshal().string().to("bean:checkin").to("mock:bean").to("bean:handler").to("mock:result");
      }
    }
;
  }
public class MyBean1 {
    public String checkin(    String message){
      if ("illegal".equals(message)) {
        throw new IllegalArgumentException();
      }
      return message;
    }
  }
public class MyBean2 {
    public String handle(    String message){
      if ("handle".equals(message)) {
        throw new IllegalArgumentException();
      }
      return message;
    }
  }
}
