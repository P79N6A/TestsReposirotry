/** 
 * Unit test to check if the message of an exchange send from the MinaConsumer is a MinaMessage.
 */
public class MessageIOSessionTest extends BaseMina2Test {
  @Test public void testIoSession() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody(String.format("mina2:tcp://localhost:%1$s?textline=true",getPort()),"Hello World");
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    Message message=exchange.getIn();
    assertNotNull(message.getHeader(Mina2Constants.MINA_IOSESSION));
  }
  @Test public void testLocalAndRemoteAddressHeaders() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody(String.format("mina2:tcp://localhost:%1$s?textline=true",getPort()),"Hello World");
    assertMockEndpointsSatisfied();
    Message message=mock.getExchanges().get(0).getIn();
    assertNotNull(message.getHeader(Mina2Constants.MINA_LOCAL_ADDRESS,SocketAddress.class));
    assertNotNull(message.getHeader(Mina2Constants.MINA_REMOTE_ADDRESS,SocketAddress.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(String.format("mina2:tcp://localhost:%1$s?textline=true",getPort())).to("log://mytest").to("mock:result");
      }
    }
;
  }
}
