/** 
 * Test the behaviour of the consumer side when using a different number of consumer threads.
 */
public class ConcurrentConsumersTest extends CamelTestSupport {
  @Test public void testSingleConsumer() throws Exception {
    Observable.intervalRange(0,1000,0,300,TimeUnit.MICROSECONDS).toFlowable(BackpressureStrategy.BUFFER).subscribe(CamelReactiveStreams.get(context()).streamSubscriber("singleConsumer",Long.class));
    MockEndpoint endpoint=getMockEndpoint("mock:singleBucket");
    endpoint.expectedMessageCount(1000);
    endpoint.assertIsSatisfied();
    Set<String> threads=endpoint.getExchanges().stream().map(x -> x.getIn().getHeader("thread",String.class)).collect(Collectors.toSet());
    assertEquals(1,threads.size());
    List<Long> nums=endpoint.getExchanges().stream().map(x -> x.getIn().getBody(Long.class)).collect(Collectors.toList());
    long prev=-1;
    for (    long n : nums) {
      assertEquals(prev + 1,n);
      prev=n;
    }
  }
  @Test public void testMultipleConsumers() throws Exception {
    Observable.intervalRange(0,1000,0,300,TimeUnit.MICROSECONDS).toFlowable(BackpressureStrategy.BUFFER).subscribe(CamelReactiveStreams.get(context()).streamSubscriber("multipleConsumers",Long.class));
    MockEndpoint endpoint=getMockEndpoint("mock:multipleBucket");
    endpoint.expectedMessageCount(1000);
    endpoint.assertIsSatisfied();
    Set<String> threads=endpoint.getExchanges().stream().map(x -> x.getIn().getHeader("thread",String.class)).collect(Collectors.toSet());
    assertEquals(3,threads.size());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:singleConsumer").process(x -> x.getIn().setHeader("thread",Thread.currentThread().getId())).to("mock:singleBucket");
        from("reactive-streams:multipleConsumers?concurrentConsumers=3").process(x -> x.getIn().setHeader("thread",Thread.currentThread().getId())).to("mock:multipleBucket");
      }
    }
;
  }
}
