public class ResultErrorHelperTest {
  OptionsGroup[] groups=new OptionsGroup[]{OptionsGroup.withName("optionA").options("param1","param2","!param3"),OptionsGroup.withName("optionB").options("param1","!param2","param3"),OptionsGroup.withName("optionC").options("!param1","!param2","param4")};
  @Test public void shouldValidateCorrectParameters(){
    assertTrue(ResultErrorHelper.requiresAny(map("param1","param2"),groups).isEmpty());
    assertTrue(ResultErrorHelper.requiresAny(map("param1","param3"),groups).isEmpty());
    assertTrue(ResultErrorHelper.requiresAny(map("param4"),groups).isEmpty());
  }
  @Test public void shouldValidateParameterExclusions(){
    final List<ComponentVerifierExtension.VerificationError> results=ResultErrorHelper.requiresAny(map("param1","param2","param3"),groups);
    assertEquals(3,results.size());
    final VerificationError param3Error=results.get(0);
    assertEquals(StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION,param3Error.getCode());
    assertEquals("optionA",param3Error.getDetail(VerificationError.GroupAttribute.GROUP_NAME));
    assertEquals("param1,param2,param3",param3Error.getDetail(VerificationError.GroupAttribute.GROUP_OPTIONS));
    final VerificationError param2Error=results.get(1);
    assertEquals(StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION,param2Error.getCode());
    assertEquals("optionB",param2Error.getDetail(VerificationError.GroupAttribute.GROUP_NAME));
    assertEquals("param1,param2,param3",param2Error.getDetail(VerificationError.GroupAttribute.GROUP_OPTIONS));
    final VerificationError param4Error=results.get(2);
    assertEquals(StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION,param4Error.getCode());
    assertEquals("optionC",param4Error.getDetail(VerificationError.GroupAttribute.GROUP_NAME));
    assertEquals("param1,param2,param4",param4Error.getDetail(VerificationError.GroupAttribute.GROUP_OPTIONS));
  }
  static Map<String,Object> map(  final String... params){
    return Arrays.stream(params).collect(Collectors.toMap(e -> e,e -> "value"));
  }
}
