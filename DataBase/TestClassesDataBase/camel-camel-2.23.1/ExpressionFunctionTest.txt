/** 
 * @version 
 */
public class ExpressionFunctionTest extends ContextTestSupport {
  @Test public void testTransform() throws Exception {
    MockEndpoint functionMock=getMockEndpoint("mock:function");
    functionMock.expectedMessageCount(1);
    functionMock.expectedBodyReceived().constant("function");
    MockEndpoint inFunctionMock=getMockEndpoint("mock:inFunction");
    inFunctionMock.expectedMessageCount(1);
    inFunctionMock.expectedBodyReceived().constant("inFunction");
    MockEndpoint inFunction2Mock=getMockEndpoint("mock:inFunction2");
    inFunction2Mock.expectedMessageCount(1);
    inFunction2Mock.expectedBodyReceived().constant("inFunction2");
    template.sendBodyAndHeader("direct:function","Hello World","type","function");
    template.sendBodyAndHeader("direct:inFunction","Hello World","type","inFunction");
    template.sendBodyAndHeader("direct:inFunction2","Hello World","type","inFunction2");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:function").transform().message(m -> m.getExchange().getIn().getHeader("type")).to("mock:function");
        from("direct:inFunction").transform().message(m -> m.getHeader("type")).to("mock:inFunction");
        from("direct:inFunction2").transform(messageExpression(m -> m.getHeader("type"))).to("mock:inFunction2");
      }
    }
;
  }
}
