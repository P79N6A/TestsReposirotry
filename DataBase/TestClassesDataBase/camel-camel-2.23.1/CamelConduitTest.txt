public class CamelConduitTest extends CamelTransportTestSupport {
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:Producer").to("mock:EndpointA").process(new Processor(){
          public void process(          org.apache.camel.Exchange exchange) throws Exception {
            if (exchange.getPattern().isOutCapable()) {
              Object result=exchange.getIn().getBody();
              exchange.getOut().setBody(result);
            }
          }
        }
);
      }
    }
;
  }
  protected CamelContext createCamelContext() throws Exception {
    return new DefaultCamelContext();
  }
  @Test public void testCamelConduitConfiguration() throws Exception {
    QName testEndpointQNameA=new QName("http://camel.apache.org/camel-test","portA");
    QName testEndpointQNameB=new QName("http://camel.apache.org/camel-test","portB");
    QName testEndpointQNameC=new QName("http://camel.apache.org/camel-test","portC");
    SpringBusFactory bf=new SpringBusFactory();
    BusFactory.setDefaultBus(null);
    Bus bus=bf.createBus("/org/apache/camel/component/cxf/transport/CamelConduit.xml");
    BusFactory.setDefaultBus(bus);
    endpointInfo.setAddress("camel://direct:EndpointA");
    endpointInfo.setName(testEndpointQNameA);
    CamelConduit conduit=new CamelConduit(null,bus,endpointInfo);
    CamelContext context=conduit.getCamelContext();
    assertNotNull("the camel context which get from camel conduit is not null",context);
    assertEquals("get the wrong camel context",context.getName(),"conduit_context");
    assertEquals("direct://EndpointA",context.getRoutes().get(0).getEndpoint().getEndpointUri());
    endpointInfo.setAddress("camel://direct:EndpointA");
    endpointInfo.setName(testEndpointQNameC);
    conduit=new CamelConduit(null,bus,endpointInfo);
    context=conduit.getCamelContext();
    assertNotNull("the camel context which get from camel conduit is not null",context);
    assertEquals("get the wrong camel context",context.getName(),"conduit_context");
    assertEquals("direct://EndpointA",context.getRoutes().get(0).getEndpoint().getEndpointUri());
    endpointInfo.setAddress("camel://direct:EndpointC");
    endpointInfo.setName(testEndpointQNameB);
    conduit=new CamelConduit(null,bus,endpointInfo);
    context=conduit.getCamelContext();
    assertNotNull("the camel context which get from camel conduit is not null",context);
    assertEquals("get the wrong camel context",context.getName(),"context");
    assertEquals("direct://EndpointC",context.getRoutes().get(0).getEndpoint().getEndpointUri());
    bus.shutdown(false);
  }
  @Test public void testPrepareSend() throws Exception {
    endpointInfo.setAddress("camel://direct:Producer");
    CamelConduit conduit=setupCamelConduit(endpointInfo,false,false);
    Message message=new MessageImpl();
    try {
      conduit.prepare(message);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    verifyMessageContent(message);
  }
  public void verifyMessageContent(  Message message){
    OutputStream os=message.getContent(OutputStream.class);
    assertTrue("OutputStream should not be null",os != null);
  }
  @Test public void testSendOut() throws Exception {
    endpointInfo.setAddress("camel://direct:Producer");
    CamelConduit conduit=setupCamelConduit(endpointInfo,true,false);
    MockEndpoint endpoint=getMockEndpoint("mock:EndpointA");
    endpoint.expectedMessageCount(1);
    Message message=new MessageImpl();
    sendoutMessage(conduit,message,true,"HelloWorld");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendOutRunTrip() throws Exception {
    endpointInfo.setAddress("camel://direct:Producer");
    CamelConduit conduit=setupCamelConduit(endpointInfo,true,false);
    MockEndpoint endpoint=getMockEndpoint("mock:EndpointA");
    endpoint.expectedMessageCount(1);
    Message message=new MessageImpl();
    sendoutMessage(conduit,message,false,"HelloWorld");
    assertMockEndpointsSatisfied();
    verifyReceivedMessage("HelloWorld");
  }
  public void verifyReceivedMessage(  String content){
    ByteArrayInputStream bis=(ByteArrayInputStream)inMessage.getContent(InputStream.class);
    byte bytes[]=new byte[bis.available()];
    try {
      bis.read(bytes);
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
    String reponse=new String(bytes);
    assertEquals("The reponse date should be equals",content,reponse);
  }
}
