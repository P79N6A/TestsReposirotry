@RunWith(CamelCdiRunner.class) public class CdiXmlTest {
  @Named @Inject private Endpoint neo;
  @Inject private ProducerTemplate prompt;
  void pipeMatrixStream(  @Observes CamelContextStartingEvent event,  ModelCamelContext context) throws Exception {
    context.getRouteDefinition("matrix").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure(){
        weaveAddLast().to("mock:matrix");
      }
    }
);
  }
static class RescueMission extends RouteBuilder {
    @Override public void configure(){
      from("seda:rescue?multipleConsumers=true").routeId("rescue mission").to("mock:zion");
    }
  }
  @Test @Order(1) public void takeTheBluePill(  @Uri("mock:matrix") MockEndpoint matrix) throws InterruptedException {
    matrix.expectedMessageCount(1);
    matrix.expectedBodiesReceived("Matrix Â» Take the blue pill!");
    prompt.sendBody(neo,"Take the blue pill!");
    assertIsSatisfied(2L,TimeUnit.SECONDS,matrix);
  }
  @Test @Order(2) public void takeTheRedPill(  @Uri("mock:zion") MockEndpoint zion) throws InterruptedException {
    zion.expectedMessageCount(1);
    zion.expectedHeaderReceived("location","matrix");
    prompt.sendBody(neo,"Take the red pill!");
    assertIsSatisfied(2L,TimeUnit.SECONDS,zion);
  }
  @Test @Order(3) public void verifyRescue(  CamelContext context){
    Awaitility.await("Neo is still in the matrix!").atMost(5,TimeUnit.SECONDS).until(() -> ServiceStatus.Stopped.equals(context.getRouteStatus("terminal")));
  }
}
