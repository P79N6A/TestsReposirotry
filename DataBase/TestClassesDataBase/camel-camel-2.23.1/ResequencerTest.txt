/** 
 * @version 
 */
public class ResequencerTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Test public void testSendMessagesInWrongOrderButReceiveThemInCorrectOrder() throws Exception {
    resultEndpoint.expectedBodiesReceived("Guillaume","Hiram","James","Rob");
    sendBodies("direct:start","Rob","Hiram","Guillaume","James");
    resultEndpoint.assertIsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    resultEndpoint=getMockEndpoint("mock:result");
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
  }
  protected boolean useJmx(){
    return getName().equals("testBatchResequencerTypeWithJmx");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").resequence().body().timeout(50).to("mock:result");
      }
    }
;
  }
  @Test public void testBatchResequencerTypeWithJmx() throws Exception {
    testBatchResequencerTypeWithoutJmx();
  }
  @Test public void testBatchResequencerTypeWithoutJmx() throws Exception {
    List<Route> list=getRouteList(createRouteBuilder());
    assertEquals("Number of routes created: " + list,1,list.size());
    Route route=list.get(0);
    EventDrivenConsumerRoute consumerRoute=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
    DefaultChannel channel=assertIsInstanceOf(DefaultChannel.class,unwrapChannel(consumerRoute.getProcessor()));
    assertIsInstanceOf(DefaultErrorHandler.class,channel.getErrorHandler());
    assertFalse("Should not have stream caching",channel.hasInterceptorStrategy(StreamCaching.class));
    assertIsInstanceOf(Resequencer.class,channel.getNextProcessor());
  }
}
