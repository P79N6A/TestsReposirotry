public class MllpTcpServerConsumerBindTimeoutTest extends CamelTestSupport {
  @Rule public MllpClientResource mllpClient=new MllpClientResource();
  @EndpointInject(uri="mock://result") MockEndpoint result;
  @Override public boolean isUseAdviceWith(){
    return true;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=(DefaultCamelContext)super.createCamelContext();
    context.setUseMDCLogging(true);
    context.setName(this.getClass().getSimpleName());
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder(){
    mllpClient.setMllpHost("localhost");
    mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());
    return new RouteBuilder(){
      int connectTimeout=500;
      int responseTimeout=5000;
      @Override public void configure() throws Exception {
        String routeId="mllp-test-receiver-route";
        onCompletion().toF("log:%s?level=INFO&showAll=true",routeId).log(LoggingLevel.INFO,routeId,"Test route complete");
        fromF("mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d",mllpClient.getMllpHost(),mllpClient.getMllpPort(),connectTimeout,responseTimeout).routeId(routeId).log(LoggingLevel.INFO,routeId,"Test route received message").to(result);
      }
    }
;
  }
  @Test public void testReceiveSingleMessage() throws Exception {
    result.expectedMessageCount(1);
    Thread tmpThread=new Thread(){
      public void run(){
        try {
          ServerSocket tmpSocket=new ServerSocket(mllpClient.getMllpPort());
          Thread.sleep(15000);
          tmpSocket.close();
        }
 catch (        Exception ex) {
          throw new RuntimeException("Exception caught in dummy listener",ex);
        }
      }
    }
;
    tmpThread.start();
    context.start();
    mllpClient.connect();
    mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(),10000);
    assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
  }
}
