/** 
 * Unit test for empty files
 */
public class FileConsumerInterceptEmptyFileTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/exclude");
    super.setUp();
  }
  @Test public void testExcludeZeroLengthFiles() throws Exception {
    MockEndpoint mock1=getMockEndpoint("mock:result");
    mock1.expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    MockEndpoint mock2=getMockEndpoint("mock:skip");
    mock2.expectedMessageCount(2);
    sendFiles();
    assertMockEndpointsSatisfied();
  }
  private void sendFiles() throws Exception {
    String url="file://target/exclude";
    template.sendBodyAndHeader(url,"Hello World",Exchange.FILE_NAME,"hello.xml");
    template.sendBodyAndHeader(url,"",Exchange.FILE_NAME,"empty1.txt");
    template.sendBodyAndHeader(url,"Bye World",Exchange.FILE_NAME,"secret.txt");
    template.sendBodyAndHeader(url,"",Exchange.FILE_NAME,"empty2.txt");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().when(simple("${file:length} == 0")).to("mock:skip").stop();
        from("file://target/exclude/?initialDelay=10&delay=10").convertBodyTo(String.class).to("log:test").to("mock:result");
      }
    }
;
  }
}
