/** 
 * @version 
 */
public class SplitterShareUnitOfWorkCompletionAwareTest extends ContextTestSupport {
  @Test public void testCompletionAware() throws Exception {
    getMockEndpoint("mock:line").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:result").expectedBodiesReceived("A+B+C");
    getMockEndpoint("mock:result").expectedHeaderReceived("foo","bar");
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").split(body(),new MyStrategy()).shareUnitOfWork().to("mock:line").end().to("mock:result");
      }
    }
;
  }
private class MyStrategy implements CompletionAwareAggregationStrategy {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody() + "+" + newExchange.getIn().getBody();
      oldExchange.getIn().setBody(body);
      return oldExchange;
    }
    @Override public void onCompletion(    Exchange exchange){
      exchange.getIn().setHeader("foo","bar");
    }
  }
}
