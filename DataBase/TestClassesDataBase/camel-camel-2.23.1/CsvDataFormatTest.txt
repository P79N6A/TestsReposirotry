/** 
 * This class tests the creation of the proper  {@link org.apache.commons.csv.CSVFormat} based on the properties of{@link org.apache.camel.dataformat.csv.CsvDataFormat}. It doesn't test the marshalling and unmarshalling based on the CSV format.
 */
public class CsvDataFormatTest {
  @Test public void shouldUseDefaultFormat(){
    CsvDataFormat dataFormat=new CsvDataFormat();
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(CSVFormat.DEFAULT,dataFormat.getActiveFormat());
  }
  @Test public void shouldUseFormatFromConstructor(){
    CsvDataFormat dataFormat=new CsvDataFormat(CSVFormat.EXCEL);
    assertSame(CSVFormat.EXCEL,dataFormat.getFormat());
    assertEquals(CSVFormat.EXCEL,dataFormat.getActiveFormat());
  }
  @Test public void shouldUseSpecifiedFormat(){
    CsvDataFormat dataFormat=new CsvDataFormat().setFormat(CSVFormat.MYSQL);
    assertSame(CSVFormat.MYSQL,dataFormat.getFormat());
    assertEquals(CSVFormat.MYSQL,dataFormat.getActiveFormat());
  }
  @Test public void shouldFallbackToDefaultFormat(){
    CsvDataFormat dataFormat=new CsvDataFormat(CSVFormat.EXCEL).setFormat(null);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(CSVFormat.DEFAULT,dataFormat.getActiveFormat());
  }
  @Test public void shouldDefineFormatByName(){
    CsvDataFormat dataFormat=new CsvDataFormat().setFormatName("EXCEL");
    assertSame(CSVFormat.EXCEL,dataFormat.getFormat());
    assertEquals(CSVFormat.EXCEL,dataFormat.getActiveFormat());
  }
  @Test public void shouldDisableCommentMarker(){
    CsvDataFormat dataFormat=new CsvDataFormat().setCommentMarkerDisabled(true).setCommentMarker('c');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isCommentMarkerDisabled());
    assertEquals(Character.valueOf('c'),dataFormat.getCommentMarker());
    assertNull(dataFormat.getActiveFormat().getCommentMarker());
  }
  @Test public void shouldOverrideCommentMarker(){
    CsvDataFormat dataFormat=new CsvDataFormat().setCommentMarker('c');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Character.valueOf('c'),dataFormat.getCommentMarker());
    assertEquals(Character.valueOf('c'),dataFormat.getActiveFormat().getCommentMarker());
  }
  @Test public void shouldOverrideDelimiter(){
    CsvDataFormat dataFormat=new CsvDataFormat().setDelimiter('d');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Character.valueOf('d'),dataFormat.getDelimiter());
    assertEquals('d',dataFormat.getActiveFormat().getDelimiter());
  }
  @Test public void shouldDisableEscape(){
    CsvDataFormat dataFormat=new CsvDataFormat().setEscapeDisabled(true).setEscape('e');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isEscapeDisabled());
    assertEquals(Character.valueOf('e'),dataFormat.getEscape());
    assertNull(dataFormat.getActiveFormat().getEscapeCharacter());
  }
  @Test public void shouldOverrideEscape(){
    CsvDataFormat dataFormat=new CsvDataFormat().setEscape('e');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Character.valueOf('e'),dataFormat.getEscape());
    assertEquals(Character.valueOf('e'),dataFormat.getActiveFormat().getEscapeCharacter());
  }
  @Test public void shouldDisableHeader(){
    CsvDataFormat dataFormat=new CsvDataFormat().setHeaderDisabled(true).setHeader(new String[]{"a","b","c"});
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isHeaderDisabled());
    assertArrayEquals(new String[]{"a","b","c"},dataFormat.getHeader());
    assertNull(dataFormat.getActiveFormat().getHeader());
  }
  @Test public void shouldOverrideHeader(){
    CsvDataFormat dataFormat=new CsvDataFormat().setHeader(new String[]{"a","b","c"});
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertArrayEquals(new String[]{"a","b","c"},dataFormat.getHeader());
    assertArrayEquals(new String[]{"a","b","c"},dataFormat.getActiveFormat().getHeader());
  }
  @Test public void shouldAllowMissingColumnNames(){
    CsvDataFormat dataFormat=new CsvDataFormat().setAllowMissingColumnNames(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getAllowMissingColumnNames());
    assertTrue(dataFormat.getActiveFormat().getAllowMissingColumnNames());
  }
  @Test public void shouldNotAllowMissingColumnNames(){
    CsvDataFormat dataFormat=new CsvDataFormat().setAllowMissingColumnNames(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getAllowMissingColumnNames());
    assertFalse(dataFormat.getActiveFormat().getAllowMissingColumnNames());
  }
  @Test public void shouldIgnoreEmptyLines(){
    CsvDataFormat dataFormat=new CsvDataFormat().setIgnoreEmptyLines(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getIgnoreEmptyLines());
    assertTrue(dataFormat.getActiveFormat().getIgnoreEmptyLines());
  }
  @Test public void shouldNotIgnoreEmptyLines(){
    CsvDataFormat dataFormat=new CsvDataFormat().setIgnoreEmptyLines(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getIgnoreEmptyLines());
    assertFalse(dataFormat.getActiveFormat().getIgnoreEmptyLines());
  }
  @Test public void shouldIgnoreSurroundingSpaces(){
    CsvDataFormat dataFormat=new CsvDataFormat().setIgnoreSurroundingSpaces(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getIgnoreSurroundingSpaces());
    assertTrue(dataFormat.getActiveFormat().getIgnoreSurroundingSpaces());
  }
  @Test public void shouldNotIgnoreSurroundingSpaces(){
    CsvDataFormat dataFormat=new CsvDataFormat().setIgnoreSurroundingSpaces(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getIgnoreSurroundingSpaces());
    assertFalse(dataFormat.getActiveFormat().getIgnoreSurroundingSpaces());
  }
  @Test public void shouldDisableNullString(){
    CsvDataFormat dataFormat=new CsvDataFormat().setNullStringDisabled(true).setNullString("****");
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isNullStringDisabled());
    assertEquals("****",dataFormat.getNullString());
    assertNull(dataFormat.getActiveFormat().getNullString());
  }
  @Test public void shouldOverrideNullString(){
    CsvDataFormat dataFormat=new CsvDataFormat().setNullString("****");
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals("****",dataFormat.getNullString());
    assertEquals("****",dataFormat.getActiveFormat().getNullString());
  }
  @Test public void shouldDisableQuote(){
    CsvDataFormat dataFormat=new CsvDataFormat().setQuoteDisabled(true).setQuote('q');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isQuoteDisabled());
    assertEquals(Character.valueOf('q'),dataFormat.getQuote());
    assertNull(dataFormat.getActiveFormat().getQuoteCharacter());
  }
  @Test public void shouldOverrideQuote(){
    CsvDataFormat dataFormat=new CsvDataFormat().setQuote('q');
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Character.valueOf('q'),dataFormat.getQuote());
    assertEquals(Character.valueOf('q'),dataFormat.getActiveFormat().getQuoteCharacter());
  }
  @Test public void shouldOverrideQuoteMode(){
    CsvDataFormat dataFormat=new CsvDataFormat().setQuoteMode(QuoteMode.ALL);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(QuoteMode.ALL,dataFormat.getQuoteMode());
    assertEquals(QuoteMode.ALL,dataFormat.getActiveFormat().getQuoteMode());
  }
  @Test public void shouldDisableRecordSeparator(){
    CsvDataFormat dataFormat=new CsvDataFormat().setRecordSeparatorDisabled(true).setRecordSeparator("separator");
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isRecordSeparatorDisabled());
    assertEquals("separator",dataFormat.getRecordSeparator());
    assertNull(dataFormat.getActiveFormat().getRecordSeparator());
  }
  @Test public void shouldOverrideRecordSeparator(){
    CsvDataFormat dataFormat=new CsvDataFormat().setRecordSeparator("separator");
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals("separator",dataFormat.getRecordSeparator());
    assertEquals("separator",dataFormat.getActiveFormat().getRecordSeparator());
  }
  @Test public void shouldSkipHeaderRecord(){
    CsvDataFormat dataFormat=new CsvDataFormat().setSkipHeaderRecord(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getSkipHeaderRecord());
    assertTrue(dataFormat.getActiveFormat().getSkipHeaderRecord());
  }
  @Test public void shouldNotSkipHeaderRecord(){
    CsvDataFormat dataFormat=new CsvDataFormat().setSkipHeaderRecord(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getSkipHeaderRecord());
    assertFalse(dataFormat.getActiveFormat().getSkipHeaderRecord());
  }
  @Test public void shouldHandleLazyLoad(){
    CsvDataFormat dataFormat=new CsvDataFormat().setLazyLoad(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isLazyLoad());
    assertEquals(CSVFormat.DEFAULT,dataFormat.getActiveFormat());
  }
  @Test public void shouldHandleUseMaps(){
    CsvDataFormat dataFormat=new CsvDataFormat().setUseMaps(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertTrue(dataFormat.isUseMaps());
    assertEquals(CSVFormat.DEFAULT,dataFormat.getActiveFormat());
  }
  @Test public void shouldHandleRecordConverter(){
    CsvRecordConverter<String> converter=new CsvRecordConverter<String>(){
      @Override public String convertRecord(      CSVRecord record){
        return record.toString();
      }
    }
;
    CsvDataFormat dataFormat=new CsvDataFormat().setRecordConverter(converter);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertSame(converter,dataFormat.getRecordConverter());
    assertEquals(CSVFormat.DEFAULT,dataFormat.getActiveFormat());
  }
  @Test public void testTrim(){
    CsvDataFormat dataFormat=new CsvDataFormat().setTrim(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getTrim());
    assertTrue(dataFormat.getActiveFormat().getTrim());
    dataFormat=new CsvDataFormat();
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(null,dataFormat.getTrim());
    assertFalse(dataFormat.getActiveFormat().getTrim());
    dataFormat=new CsvDataFormat().setTrim(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getTrim());
    assertFalse(dataFormat.getActiveFormat().getTrim());
  }
  @Test public void testIgnoreHeaderCase(){
    CsvDataFormat dataFormat=new CsvDataFormat().setIgnoreHeaderCase(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getIgnoreHeaderCase());
    assertTrue(dataFormat.getActiveFormat().getIgnoreHeaderCase());
    dataFormat=new CsvDataFormat();
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(null,dataFormat.getIgnoreHeaderCase());
    assertFalse(dataFormat.getActiveFormat().getIgnoreHeaderCase());
    dataFormat=new CsvDataFormat().setIgnoreHeaderCase(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getIgnoreHeaderCase());
    assertFalse(dataFormat.getActiveFormat().getIgnoreHeaderCase());
  }
  @Test public void testTrailingDelimiter(){
    CsvDataFormat dataFormat=new CsvDataFormat().setTrailingDelimiter(true);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.TRUE,dataFormat.getTrailingDelimiter());
    assertTrue(dataFormat.getActiveFormat().getTrailingDelimiter());
    dataFormat=new CsvDataFormat();
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(null,dataFormat.getTrailingDelimiter());
    assertFalse(dataFormat.getActiveFormat().getTrailingDelimiter());
    dataFormat=new CsvDataFormat().setTrailingDelimiter(false);
    assertSame(CSVFormat.DEFAULT,dataFormat.getFormat());
    assertEquals(Boolean.FALSE,dataFormat.getTrailingDelimiter());
    assertFalse(dataFormat.getActiveFormat().getTrailingDelimiter());
  }
}
