/** 
 * Spring AOP will proxy a bean at class level which is also a bean that Camel should invoke using its bean component. The test should test that Camel bean binding annotations works.
 * @version 
 */
public class SpringAopClassLevelCamelBeanTest extends SpringTestSupport {
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/spring/aop/SpringAopClassLevelCamelBeanTest.xml");
  }
  @Test public void testSpringAopOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    mock.expectedHeaderReceived("foo",123);
    template.sendBodyAndHeader("direct:start","Hello World","foo","ABC");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSpringAopException() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBodyAndHeader("direct:start","Hello World","foo","Damn");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
    }
    assertMockEndpointsSatisfied();
    ExceptionInterceptor ei=context.getRegistry().lookupByNameAndType("exceptionInterceptor",ExceptionInterceptor.class);
    IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,ei.getE());
    assertEquals("Foo has not expected value ABC but Damn",iae.getMessage());
  }
}
