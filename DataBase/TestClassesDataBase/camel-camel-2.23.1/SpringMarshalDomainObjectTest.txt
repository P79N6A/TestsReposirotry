public class SpringMarshalDomainObjectTest extends CamelSpringTestSupport {
  @Test public void testMarshalDomainObject() throws Exception {
    if (isJavaVendor("IBM")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    PurchaseOrder order=new PurchaseOrder();
    order.setName("Tiger");
    order.setAmount(1);
    order.setPrice(99.95);
    template.sendBody("direct:in",order);
    mock.assertIsSatisfied();
  }
  @Test public void testMappingOfDomainObject() throws Exception {
    if (isJavaVendor("IBM")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    Student expectedStudent=new Student();
    expectedStudent.setStuFirstName("John");
    expectedStudent.setStuLastName("Doe");
    expectedStudent.setStuAge(21);
    String expectedString="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<student><firstname>John</firstname><lastname>Doe</lastname><age>21</age></student>";
    template.sendBody("direct:unmarshal",expectedString);
    template.sendBody("direct:marshal",expectedStudent);
    mock.assertIsSatisfied();
    Student actualStudent=mock.getExchanges().get(0).getIn().getBody(Student.class);
    String actualString=mock.getExchanges().get(1).getIn().getBody(String.class);
    assertEquals("The expected student does not match the unmarshal XML student.",expectedStudent,actualStudent);
    assertEquals("The expected XML does not match the marshal student XML.",expectedString,actualString);
  }
  @Test public void testMarshalDomainObjectTwice() throws Exception {
    if (isJavaVendor("IBM")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    PurchaseOrder order=new PurchaseOrder();
    order.setName("Tiger");
    order.setAmount(1);
    order.setPrice(99.95);
    template.sendBody("direct:in",order);
    template.sendBody("direct:in",order);
    mock.assertIsSatisfied();
    String body1=mock.getExchanges().get(0).getIn().getBody(String.class);
    String body2=mock.getExchanges().get(1).getIn().getBody(String.class);
    assertEquals("The body should marshalled to the same",body1,body2);
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/castor/SpringMarshalDomainObjectTest.xml");
  }
}
