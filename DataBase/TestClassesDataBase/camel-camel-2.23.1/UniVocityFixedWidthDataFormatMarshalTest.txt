/** 
 * This class tests the marshalling of  {@link org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormat}.
 */
public final class UniVocityFixedWidthDataFormatMarshalTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") MockEndpoint result;
  /** 
 * Tests that we can marshal fixed-width with the default configuration.
 */
  @Test public void shouldMarshalWithDefaultConfiguration() throws Exception {
    template.sendBody("direct:default",Arrays.asList(asMap("A","1","B","2","C","3"),asMap("A","one","B","two","C","three")));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    String body=assertIsInstanceOf(String.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(join("1  2  3    ","onetwothree"),body);
  }
  /** 
 * Tests that we can marshal a single line with fixed-width.
 */
  @Test public void shouldMarshalSingleLine() throws Exception {
    template.sendBody("direct:default",asMap("A","1","B","2","C","3"));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    String body=assertIsInstanceOf(String.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(join("1  2  3    "),body);
  }
  /** 
 * Tests that the marshalling adds new columns on the fly and keep its order
 */
  @Test public void shouldMarshalAndAddNewColumns() throws Exception {
    template.sendBody("direct:default",Arrays.asList(asMap("A","1","B","2"),asMap("C","three","A","one","B","two")));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    String body=assertIsInstanceOf(String.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(join("1  2  ","onetwothree"),body);
  }
  /** 
 * Tests that we can marshal fixed-width with specific headers
 */
  @Test public void shouldMarshalWithSpecificHeaders() throws Exception {
    template.sendBody("direct:header",Arrays.asList(asMap("A","1","B","2","C","3"),asMap("A","one","B","two","C","three")));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    String body=assertIsInstanceOf(String.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(join("1  3    ","onethree"),body);
  }
  /** 
 * Tests that we can marshal fixed-width using and advanced configuration
 */
  @Test public void shouldMarshalUsingAdvancedConfiguration() throws Exception {
    template.sendBody("direct:advanced",Arrays.asList(asMap("A",null,"B",""),asMap("A","one","B","two")));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    String body=assertIsInstanceOf(String.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(join("N/A__empty","one__two__"),body);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    final Map<String,DataFormat> tests=new HashMap<>();
    tests.put("default",new UniVocityFixedWidthDataFormat().setFieldLengths(new int[]{3,3,5}));
    tests.put("header",new UniVocityFixedWidthDataFormat().setFieldLengths(new int[]{3,5}).setHeaders(new String[]{"A","C"}));
    tests.put("advanced",new UniVocityFixedWidthDataFormat().setFieldLengths(new int[]{5,5}).setNullValue("N/A").setEmptyValue("empty").setPadding('_'));
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        for (        Map.Entry<String,DataFormat> test : tests.entrySet()) {
          from("direct:" + test.getKey()).marshal(test.getValue()).convertBodyTo(String.class).to("mock:result");
        }
      }
    }
;
  }
}
