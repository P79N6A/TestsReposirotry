public class LoopDoWhileTest extends ContextTestSupport {
  @Test public void testLoopDoWhileSimple() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("AAAAAA");
    getMockEndpoint("mock:loop").expectedBodiesReceived("A","AA","AAA","AAAA","AAAAA");
    template.sendBody("direct:simple","A");
    assertMockEndpointsSatisfied();
  }
  @Test public void testLoopDoWhileFunctional() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("AAAAAA");
    getMockEndpoint("mock:loop").expectedBodiesReceived("A","AA","AAA","AAAA","AAAAA");
    template.sendBody("direct:functional","A");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:simple").loopDoWhile(simple("${body.length} <= 5")).to("mock:loop").transform(body().append("A")).end().to("mock:result");
        from("direct:functional").loopDoWhile().body(String.class,b -> b.length() <= 5).to("mock:loop").transform().body(String.class,b -> b+="A").end().to("mock:result");
      }
    }
;
  }
}
