/** 
 * This is a test that checks integration of the sort term in Camel. The actual sorting logic is tested in the SortUtilTest.
 */
public class MailSortTermTwoTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    prepareMailbox();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("sortAscendingDate",new SortTerm[]{SortTerm.DATE});
    jndi.bind("sortDescendingDate",new SortTerm[]{SortTerm.REVERSE,SortTerm.DATE});
    jndi.bind("searchTerm",new SearchTermBuilder().subject("Camel").build());
    return jndi;
  }
  @Test public void testSortTerm() throws Exception {
    Mailbox mailbox=Mailbox.get("bill@localhost");
    assertEquals(3,mailbox.size());
    MockEndpoint mockDesc=getMockEndpoint("mock:resultDescending");
    mockDesc.expectedBodiesReceived("Even later date","Later date","Earlier date");
    context.startAllRoutes();
    assertMockEndpointsSatisfied();
  }
  private void prepareMailbox() throws Exception {
    Mailbox.clearAll();
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore("pop3");
    store.connect("localhost",25,"bill","secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    Message[] messages=new Message[3];
    messages[0]=new MimeMessage(sender.getSession());
    messages[0].setText("Earlier date");
    messages[0].setHeader("Message-ID","0");
    messages[0].setSentDate(new Date(10000));
    messages[0].setSubject("Camel");
    messages[1]=new MimeMessage(sender.getSession());
    messages[1].setText("Later date");
    messages[1].setHeader("Message-ID","1");
    messages[1].setSentDate(new Date(20000));
    messages[1].setSubject("Camel");
    messages[2]=new MimeMessage(sender.getSession());
    messages[2].setText("Even later date");
    messages[2].setHeader("Message-ID","2");
    messages[2].setSentDate(new Date(30000));
    messages[2].setSubject("Invalid");
    folder.appendMessages(messages);
    folder.close(true);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        context.setAutoStartup(false);
        from("pop3://bill@localhost?password=secret&sortTerm=#sortDescendingDate&consumer.initialDelay=100&consumer.delay=100").to("mock:resultDescending");
      }
    }
;
  }
}
