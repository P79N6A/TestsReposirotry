/** 
 * Unit test for  {@link CassandraIdempotentRepository}
 */
public class CassandraIdempotentRepositoryTest extends BaseCassandraTest {
  @Rule public CassandraCQLUnit cassandraRule=CassandraUnitUtils.cassandraCQLUnit("IdempotentDataSet.cql");
  private Cluster cluster;
  private Session session;
  private CassandraIdempotentRepository<String> idempotentRepository;
  @Before public void setUp() throws Exception {
    if (canTest()) {
      cluster=CassandraUnitUtils.cassandraCluster();
      session=cluster.connect(CassandraUnitUtils.KEYSPACE);
      idempotentRepository=new CassandraIdempotentRepository<>(session);
      idempotentRepository.start();
    }
  }
  @After public void tearDown() throws Exception {
    if (canTest()) {
      idempotentRepository.stop();
      session.close();
      cluster.close();
    }
  }
  private boolean exists(  String key){
    return session.execute("select KEY from CAMEL_IDEMPOTENT where KEY=?",key).one() != null;
  }
  @Test public void testAddNotExists(){
    if (!canTest()) {
      return;
    }
    String key="Add_NotExists";
    assertFalse(exists(key));
    boolean result=idempotentRepository.add(key);
    assertTrue(result);
    assertTrue(exists(key));
  }
  @Test public void testAddExists(){
    if (!canTest()) {
      return;
    }
    String key="Add_Exists";
    assertTrue(exists(key));
    boolean result=idempotentRepository.add(key);
    assertFalse(result);
    assertTrue(exists(key));
  }
  @Test public void testContainsNotExists(){
    if (!canTest()) {
      return;
    }
    String key="Contains_NotExists";
    assertFalse(exists(key));
    boolean result=idempotentRepository.contains(key);
    assertFalse(result);
  }
  @Test public void testContainsExists(){
    if (!canTest()) {
      return;
    }
    String key="Contains_Exists";
    assertTrue(exists(key));
    boolean result=idempotentRepository.contains(key);
    assertTrue(result);
  }
  @Test public void testRemoveNotExists(){
    if (!canTest()) {
      return;
    }
    String key="Remove_NotExists";
    assertFalse(exists(key));
    boolean result=idempotentRepository.contains(key);
    assertFalse(result);
  }
  @Test public void testRemoveExists(){
    if (!canTest()) {
      return;
    }
    String key="Remove_Exists";
    assertTrue(exists(key));
    boolean result=idempotentRepository.remove(key);
    assertTrue(result);
  }
  @Test public void testClear(){
    if (!canTest()) {
      return;
    }
    String key="Remove_Exists";
    assertTrue(exists(key));
    idempotentRepository.clear();
    assertFalse(idempotentRepository.contains(key));
  }
}
