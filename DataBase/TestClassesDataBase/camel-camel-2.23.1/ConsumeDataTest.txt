public class ConsumeDataTest extends ZooKeeperTestSupport {
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{new RouteBuilder(){
      public void configure() throws Exception {
        from("zookeeper://localhost:" + getServerPort() + "/camel?repeat=true").to("mock:zookeeper-data");
      }
    }
};
  }
  @Test public void shouldAwaitCreationAndGetDataNotification() throws Exception {
    EventType[] expectedEventTypes=new EventType[]{EventType.NodeCreated,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDataChanged,EventType.NodeDeleted};
    MockEndpoint mock=getMockEndpoint("mock:zookeeper-data");
    mock.expectedMessageCount(expectedEventTypes.length);
    createCamelNode();
    updateNode(10);
    delay(500);
    client.delete("/camel");
    MockEndpoint.assertIsSatisfied(30,TimeUnit.SECONDS);
    int lastVersion=-1;
    for (int i=0; i < mock.getExchanges().size(); i++) {
      assertEquals(expectedEventTypes[i],mock.getExchanges().get(i).getIn().getHeader(ZooKeeperMessage.ZOOKEEPER_EVENT_TYPE));
      if (!EventType.NodeDeleted.equals(expectedEventTypes[i])) {
        int version=ZooKeeperMessage.getStatistics(mock.getExchanges().get(i).getIn()).getVersion();
        assertTrue("Version did not increase",lastVersion < version);
        lastVersion=version;
      }
    }
  }
  @Test public void deletionOfAwaitedNodeCausesNoFailure() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:zookeeper-data");
    mock.expectedMinimumMessageCount(11);
    createCamelNode();
    delay(500);
    client.delete("/camel");
    createCamelNode();
    updateNode(10);
    MockEndpoint.assertIsSatisfied(30,TimeUnit.SECONDS);
    client.delete("/camel");
  }
  private void updateNode(  int times) throws Exception {
    for (int x=1; x < times; x++) {
      delay(500);
      client.setData("/camel",testPayload + "_" + x,-1);
    }
  }
  private void createCamelNode() throws Exception {
    try {
      delay(1000);
      client.create("/camel",testPayload + "_0");
    }
 catch (    NodeExistsException e) {
    }
  }
}
