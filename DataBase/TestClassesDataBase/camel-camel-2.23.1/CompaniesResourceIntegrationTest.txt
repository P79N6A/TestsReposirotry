/** 
 * Test class for  {@link org.apache.camel.component.linkedin.api.CompaniesResource} APIs.
 */
public class CompaniesResourceIntegrationTest extends AbstractLinkedInTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(CompaniesResourceIntegrationTest.class);
  private static final String PATH_PREFIX="companies";
  private static final Long TEST_COMPANY_ID=1337L;
  @Ignore @Test public void testAddCompanyUpdateCommentAsCompany() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",0L);
    headers.put("CamelLinkedIn.update_key",null);
    headers.put("CamelLinkedIn.updatecomment",null);
    requestBodyAndHeaders("direct://ADDCOMPANYUPDATECOMMENTASCOMPANY",null,headers);
  }
  @Ignore @Test public void testAddShare() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",0L);
    headers.put("CamelLinkedIn.share",null);
    requestBodyAndHeaders("direct://ADDSHARE",null,headers);
  }
  @Test public void testGetCompanies() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.email_domain","linkedin.com");
    final org.apache.camel.component.linkedin.api.model.Companies result=requestBodyAndHeaders("direct://GETCOMPANIES",null,headers);
    assertNotNull("getCompanies result",result);
    LOG.debug("getCompanies: " + result);
  }
  @Test public void testGetCompanyById() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",TEST_COMPANY_ID);
    final org.apache.camel.component.linkedin.api.model.Company result=requestBodyAndHeaders("direct://GETCOMPANYBYID",null,headers);
    assertNotNull("getCompanyById result",result);
    LOG.debug("getCompanyById: " + result);
  }
  @Test public void testGetCompanyByName() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.universal_name","linkedin");
    final org.apache.camel.component.linkedin.api.model.Company result=requestBodyAndHeaders("direct://GETCOMPANYBYNAME",null,headers);
    assertNotNull("getCompanyByName result",result);
    LOG.debug("getCompanyByName: " + result);
  }
  @Ignore @Test public void testGetCompanyUpdateComments() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",0L);
    headers.put("CamelLinkedIn.update_key",null);
    headers.put("CamelLinkedIn.fields",null);
    headers.put("CamelLinkedIn.secure_urls",null);
    final org.apache.camel.component.linkedin.api.model.UpdateComments result=requestBodyAndHeaders("direct://GETCOMPANYUPDATECOMMENTS",null,headers);
    assertNotNull("getCompanyUpdateComments result",result);
    LOG.debug("getCompanyUpdateComments: " + result);
  }
  @Ignore @Test public void testGetCompanyUpdateLikes() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",0L);
    headers.put("CamelLinkedIn.update_key",null);
    headers.put("CamelLinkedIn.fields",null);
    headers.put("CamelLinkedIn.secure_urls",null);
    final org.apache.camel.component.linkedin.api.model.Likes result=requestBodyAndHeaders("direct://GETCOMPANYUPDATELIKES",null,headers);
    assertNotNull("getCompanyUpdateLikes result",result);
    LOG.debug("getCompanyUpdateLikes: " + result);
  }
  @Test public void testGetCompanyUpdates() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",TEST_COMPANY_ID);
    headers.put("CamelLinkedIn.event_type",EventType.STATUS_UPDATE);
    final org.apache.camel.component.linkedin.api.model.Updates result=requestBodyAndHeaders("direct://GETCOMPANYUPDATES",null,headers);
    assertNotNull("getCompanyUpdates result",result);
    LOG.debug("getCompanyUpdates: " + result);
  }
  @Ignore @Test public void testGetHistoricalFollowStatistics() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",0L);
    headers.put("CamelLinkedIn.start_timestamp",null);
    headers.put("CamelLinkedIn.end_timestamp",null);
    headers.put("CamelLinkedIn.time_granularity",null);
    final org.apache.camel.component.linkedin.api.model.HistoricalFollowStatistics result=requestBodyAndHeaders("direct://GETHISTORICALFOLLOWSTATISTICS",null,headers);
    assertNotNull("getHistoricalFollowStatistics result",result);
    LOG.debug("getHistoricalFollowStatistics: " + result);
  }
  @Ignore @Test public void testGetHistoricalStatusUpdateStatistics() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",TEST_COMPANY_ID);
    headers.put("CamelLinkedIn.start_timestamp",null);
    headers.put("CamelLinkedIn.end_timestamp",null);
    headers.put("CamelLinkedIn.time_granularity",null);
    headers.put("CamelLinkedIn.statistics_update_key",null);
    final org.apache.camel.component.linkedin.api.model.HistoricalStatusUpdateStatistics result=requestBodyAndHeaders("direct://GETHISTORICALSTATUSUPDATESTATISTICS",null,headers);
    assertNotNull("getHistoricalStatusUpdateStatistics result",result);
    LOG.debug("getHistoricalStatusUpdateStatistics: " + result);
  }
  @Test public void testGetNumberOfFollowers() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.company_id",TEST_COMPANY_ID);
    headers.put("CamelLinkedIn.geos",null);
    headers.put("CamelLinkedIn.companySizes",null);
    headers.put("CamelLinkedIn.jobFunc",null);
    headers.put("CamelLinkedIn.industries",null);
    headers.put("CamelLinkedIn.seniorities",null);
    final org.apache.camel.component.linkedin.api.model.NumFollowers result=requestBodyAndHeaders("direct://GETNUMBEROFFOLLOWERS",null,headers);
    assertNotNull("getNumberOfFollowers result",result);
    LOG.debug("getNumberOfFollowers: " + result);
  }
  @Ignore @Test public void testGetStatistics() throws Exception {
    final org.apache.camel.component.linkedin.api.model.CompanyStatistics result=requestBody("direct://GETSTATISTICS",0L);
    assertNotNull("getStatistics result",result);
    LOG.debug("getStatistics: " + result);
  }
  @Test public void testIsShareEnabled() throws Exception {
    final org.apache.camel.component.linkedin.api.model.IsCompanyShareEnabled result=requestBody("direct://ISSHAREENABLED",TEST_COMPANY_ID);
    assertNotNull("isShareEnabled result",result);
    LOG.debug("isShareEnabled: " + result);
  }
  @Test public void testIsViewerShareEnabled() throws Exception {
    final org.apache.camel.component.linkedin.api.model.IsCompanyShareEnabled result=requestBody("direct://ISVIEWERSHAREENABLED",TEST_COMPANY_ID);
    assertNotNull("isViewerShareEnabled result",result);
    LOG.debug("isViewerShareEnabled: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ADDCOMPANYUPDATECOMMENTASCOMPANY").to("linkedin://" + PATH_PREFIX + "/addCompanyUpdateCommentAsCompany");
        from("direct://ADDSHARE").to("linkedin://" + PATH_PREFIX + "/addShare");
        from("direct://GETCOMPANIES").to("linkedin://" + PATH_PREFIX + "/getCompanies");
        from("direct://GETCOMPANYBYID").to("linkedin://" + PATH_PREFIX + "/getCompanyById");
        from("direct://GETCOMPANYBYNAME").to("linkedin://" + PATH_PREFIX + "/getCompanyByName");
        from("direct://GETCOMPANYUPDATECOMMENTS").to("linkedin://" + PATH_PREFIX + "/getCompanyUpdateComments");
        from("direct://GETCOMPANYUPDATELIKES").to("linkedin://" + PATH_PREFIX + "/getCompanyUpdateLikes");
        from("direct://GETCOMPANYUPDATES").to("linkedin://" + PATH_PREFIX + "/getCompanyUpdates");
        from("direct://GETHISTORICALFOLLOWSTATISTICS").to("linkedin://" + PATH_PREFIX + "/getHistoricalFollowStatistics");
        from("direct://GETHISTORICALSTATUSUPDATESTATISTICS").to("linkedin://" + PATH_PREFIX + "/getHistoricalStatusUpdateStatistics");
        from("direct://GETNUMBEROFFOLLOWERS").to("linkedin://" + PATH_PREFIX + "/getNumberOfFollowers");
        from("direct://GETSTATISTICS").to("linkedin://" + PATH_PREFIX + "/getStatistics?inBody=company_id");
        from("direct://ISSHAREENABLED").to("linkedin://" + PATH_PREFIX + "/isShareEnabled?inBody=company_id");
        from("direct://ISVIEWERSHAREENABLED").to("linkedin://" + PATH_PREFIX + "/isViewerShareEnabled?inBody=company_id");
      }
    }
;
  }
}
