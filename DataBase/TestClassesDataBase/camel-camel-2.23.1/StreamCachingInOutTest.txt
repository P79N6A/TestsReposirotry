public class StreamCachingInOutTest extends ContextTestSupport {
  private static final String TEST_FILE="org/apache/camel/processor/simple.txt";
  @Test public void testStreamCachingPerRoute() throws Exception {
    MockEndpoint c=getMockEndpoint("mock:c");
    c.expectedMessageCount(1);
    InputStream message=getTestFileStream();
    template.sendBody("direct:c",message);
    assertMockEndpointsSatisfied();
    assertEquals(c.assertExchangeReceived(0).getIn().getBody(String.class),"James,Guillaume,Hiram,Rob,Roman");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:c").noStreamCaching().to("direct:d").to("mock:c");
        from("direct:d").streamCaching().process(new TestProcessor());
      }
    }
;
  }
private class TestProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      InputStream is=exchange.getIn().getMandatoryBody(InputStream.class);
      while (is.available() > 0) {
        is.read();
      }
      is.close();
    }
  }
  private InputStream getTestFileStream(){
    InputStream answer=getClass().getClassLoader().getResourceAsStream(TEST_FILE);
    assertNotNull("Should have found the file: " + TEST_FILE + " on the classpath",answer);
    return answer;
  }
}
