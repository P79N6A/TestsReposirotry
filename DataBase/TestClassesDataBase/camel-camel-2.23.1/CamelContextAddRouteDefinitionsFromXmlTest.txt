/** 
 * @version 
 */
public class CamelContextAddRouteDefinitionsFromXmlTest extends ContextTestSupport {
  protected JAXBContext jaxbContext;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    jaxbContext=context.getModelJAXBContextFactory().newJAXBContext();
  }
  protected Object parseUri(  String uri) throws JAXBException {
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    URL resource=getClass().getResource(uri);
    assertNotNull("Cannot find resource on the classpath: " + uri,resource);
    Object value=unmarshaller.unmarshal(resource);
    return value;
  }
  protected RouteDefinition loadRoute(  String uri) throws Exception {
    Object route=parseUri(uri);
    return assertIsInstanceOf(RouteDefinition.class,route);
  }
  @Test public void testAddRouteDefinitionsFromXml() throws Exception {
    RouteDefinition route=loadRoute("route1.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    context.addRouteDefinition(route);
    assertEquals(1,context.getRoutes().size());
    assertTrue("Route should be started",context.getRouteStatus("foo").isStarted());
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRemoveRouteDefinitionsFromXml() throws Exception {
    RouteDefinition route=loadRoute("route1.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    context.addRouteDefinition(route);
    assertEquals(1,context.getRouteDefinitions().size());
    assertEquals(1,context.getRoutes().size());
    assertTrue("Route should be started",context.getRouteStatus("foo").isStarted());
    context.removeRouteDefinition(route);
    assertEquals(0,context.getRoutes().size());
    assertNull(context.getRouteStatus("foo"));
    assertEquals(0,context.getRouteDefinitions().size());
  }
  @Test public void testAddRouteDefinitionsFromXml2() throws Exception {
    RouteDefinition route=loadRoute("route2.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    context.addRouteDefinition(route);
    assertEquals(1,context.getRoutes().size());
    assertTrue("Route should be stopped",context.getRouteStatus("foo").isStopped());
    context.startRoute("foo");
    assertTrue("Route should be started",context.getRouteStatus("foo").isStarted());
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAddRouteDefinitionsFromXmlIsPrepared() throws Exception {
    RouteDefinition route=loadRoute("route1.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    context.addRouteDefinition(route);
    assertEquals(1,context.getRoutes().size());
    assertTrue("Route should be started",context.getRouteStatus("foo").isStarted());
    assertNotNull("Parent should be set on outputs");
    route=context.getRouteDefinition("foo");
    for (    ProcessorDefinition<?> output : route.getOutputs()) {
      assertNotNull("Parent should be set on output",output.getParent());
      assertEquals(route,output.getParent());
    }
  }
  @Test public void testAddRouteDefinitionsFromXml3() throws Exception {
    RouteDefinition route=loadRoute("route3.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    context.addRouteDefinition(route);
    assertEquals(1,context.getRoutes().size());
    assertTrue("Route should be started",context.getRouteStatus("foo").isStarted());
    getMockEndpoint("mock:foo").whenExchangeReceived(2,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setException(new IllegalArgumentException("Damn"));
      }
    }
);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:handled").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAddRouteDefinitionsAfterExceptionFromXml() throws Exception {
    RouteDefinition route=loadRoute("route4_error.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    try {
      context.addRouteDefinition(route);
    }
 catch (    Exception e) {
    }
    route=loadRoute("route4_ok.xml");
    assertNotNull(route);
    assertEquals("foo",route.getId());
    assertEquals(0,context.getRoutes().size());
    context.addRouteDefinition(route);
    assertEquals(1,context.getRoutes().size());
  }
}
