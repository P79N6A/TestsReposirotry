public class CamelMessagingHeadersInjectAdapterTest {
  @Rule public ExpectedException thrown=ExpectedException.none();
  private Map<String,Object> map;
  @Before public void before(){
    map=new HashMap<String,Object>();
  }
  @Test public void cannotGetIterator(){
    CamelMessagingHeadersInjectAdapter adapter=new CamelMessagingHeadersInjectAdapter(map,true);
    thrown.expect(UnsupportedOperationException.class);
    adapter.iterator();
  }
  @Test public void putProperties(){
    CamelMessagingHeadersInjectAdapter adapter=new CamelMessagingHeadersInjectAdapter(map,true);
    adapter.put("key1","value1");
    adapter.put("key2","value2");
    adapter.put("key1","value3");
    assertEquals("value3",map.get("key1"));
    assertEquals("value2",map.get("key2"));
  }
  @Test public void propertyWithDash(){
    CamelMessagingHeadersInjectAdapter adapter=new CamelMessagingHeadersInjectAdapter(map,true);
    adapter.put("-key-1-","value1");
    assertEquals("value1",map.get(JMS_DASH + "key" + JMS_DASH+ "1"+ JMS_DASH));
  }
  @Test public void propertyWithoutDashEncoding(){
    CamelMessagingHeadersInjectAdapter adapter=new CamelMessagingHeadersInjectAdapter(map,false);
    adapter.put("-key-1-","value1");
    assertEquals(null,map.get(JMS_DASH + "key" + JMS_DASH+ "1"+ JMS_DASH));
  }
}
