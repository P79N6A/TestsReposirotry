public class HazelcastRingbufferProducerForSpringTest extends HazelcastCamelSpringTestSupport {
  @Mock private Ringbuffer<Object> ringbuffer;
  @Override protected void trainHazelcastInstance(  HazelcastInstance hazelcastInstance){
    when(hazelcastInstance.getRingbuffer("foo")).thenReturn(ringbuffer);
  }
  @Override protected void verifyHazelcastInstance(  HazelcastInstance hazelcastInstance){
    verify(hazelcastInstance,atLeastOnce()).getRingbuffer("foo");
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/META-INF/spring/test-camel-context-ringbuffer.xml");
  }
  @Test public void testReadTail() throws InterruptedException {
    when(ringbuffer.readOne(ArgumentMatchers.anyLong())).thenReturn("pippo");
    Object result=template.requestBody("direct:readonceTail",12L,String.class);
    assertEquals("pippo",result);
  }
  @Test public void testAdd() throws InterruptedException {
    when(ringbuffer.add(ArgumentMatchers.anyLong())).thenReturn(13L);
    Object result=template.requestBody("direct:add",12L,Long.class);
    assertEquals(13L,result);
  }
  @Test public void testCapacity() throws InterruptedException {
    when(ringbuffer.capacity()).thenReturn(13L);
    Object result=template.requestBody("direct:capacity",12L,Long.class);
    assertEquals(13L,result);
  }
  @Test public void testRemainingCapacity() throws InterruptedException {
    when(ringbuffer.remainingCapacity()).thenReturn(2L);
    Object result=template.requestBody("direct:remainingCapacity","",Long.class);
    assertEquals(2L,result);
  }
}
