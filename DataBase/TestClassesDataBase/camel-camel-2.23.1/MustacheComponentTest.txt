/** 
 * Unit test for  {@link MustacheComponent} and {@link MustacheEndpoint}
 */
public class MustacheComponentTest extends CamelTestSupport {
  @EndpointInject(uri="mock:endSimple") protected MockEndpoint endSimpleMock;
  @Produce(uri="direct:startSimple") protected ProducerTemplate startSimpleProducerTemplate;
  /** 
 * Main test
 */
  @Test public void testMustache() throws Exception {
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.expectedBodiesReceived("Message with body 'The Body' and some header 'Some Header'");
    startSimpleProducerTemplate.sendBodyAndHeader("The Body","someHeader","Some Header");
    assertMockEndpointsSatisfied();
  }
  /** 
 * Test using code Template header
 */
  @Test public void testMustacheWithTemplateHeader() throws Exception {
    Exchange exchange=createExchangeWithBody("The Body");
    exchange.getIn().setHeader("someHeader","Some Header");
    exchange.getIn().setHeader(MustacheConstants.MUSTACHE_TEMPLATE,"Body='{{body}}'|SomeHeader='{{headers.someHeader}}'");
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.expectedBodiesReceived("Body='The Body'|SomeHeader='Some Header'");
    startSimpleProducerTemplate.send(exchange);
    assertMockEndpointsSatisfied();
  }
  /** 
 * Test using Resource URI header
 */
  @Test public void testMustacheWithResourceUriHeader() throws Exception {
    Exchange exchange=createExchangeWithBody("The Body");
    exchange.getIn().setHeader("someHeader","Some Header");
    exchange.getIn().setHeader(MustacheConstants.MUSTACHE_RESOURCE_URI,"/another.mustache");
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.message(0).body().contains("The Body");
    endSimpleMock.message(0).body().contains("Some Header");
    startSimpleProducerTemplate.send(exchange);
    assertMockEndpointsSatisfied();
  }
  @Test public void testMustacheWithInheritance() throws Exception {
    Exchange exchange=createExchangeWithBody("The Body");
    exchange.getIn().setHeader(MustacheConstants.MUSTACHE_RESOURCE_URI,"/child.mustache");
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.message(0).body().contains("Content 1: Child 1");
    endSimpleMock.message(0).body().contains("Middle");
    endSimpleMock.message(0).body().contains("Content 2: Child 2");
    startSimpleProducerTemplate.send(exchange);
    assertMockEndpointsSatisfied();
  }
  @Test public void testMustacheWithPartials() throws Exception {
    Exchange exchange=createExchangeWithBody("The Body");
    exchange.getIn().setHeader(MustacheConstants.MUSTACHE_RESOURCE_URI,"/includer.mustache");
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.message(0).body().contains("Start");
    endSimpleMock.message(0).body().contains("Included");
    endSimpleMock.message(0).body().contains("End");
    startSimpleProducerTemplate.send(exchange);
    assertMockEndpointsSatisfied();
  }
  /** 
 * Main test
 */
  @Test public void testMustachePerformance() throws Exception {
    int messageCount=10000;
    endSimpleMock.expectedMessageCount(messageCount);
    StopWatch stopwatch=new StopWatch(true);
    for (int i=0; i < messageCount; i++) {
      startSimpleProducerTemplate.sendBodyAndHeader("The Body","someHeader","Some Header");
    }
    assertMockEndpointsSatisfied();
    LoggerFactory.getLogger(getClass()).info("Mustache performance: " + stopwatch.stop() + "ms for "+ messageCount+ " messages");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:startSimple").to("mustache://simple.mustache").to("mock:endSimple");
      }
    }
;
  }
}
