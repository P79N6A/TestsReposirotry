public class NettyCustomCorrelationManagerTest extends BaseNettyTest {
  private final MyCorrelationManager myManager=new MyCorrelationManager();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myManager",myManager);
    return jndi;
  }
  @Test public void testCustomCorrelationManager() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("Bye A","Bye B","Bye C");
    mock.allMessages().header("manager").isEqualTo(myManager);
    mock.allMessages().predicate(exchange -> {
      String request=exchange.getMessage().getHeader("request",String.class);
      String reply=exchange.getMessage().getBody(String.class);
      return reply.endsWith(request);
    }
);
    template.sendBodyAndHeader("seda:start","A","request","A");
    template.sendBodyAndHeader("seda:start","B","request","B");
    template.sendBodyAndHeader("seda:start","C","request","C");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").log("before ${body}").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&producerPoolEnabled=false&correlationManager=#myManager").log("after ${body}").to("mock:result");
        from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").transform(body().prepend("Bye "));
      }
    }
;
  }
private static final class MyCorrelationManager implements NettyCamelStateCorrelationManager {
    private volatile NettyCamelState stateA;
    private volatile NettyCamelState stateB;
    private volatile NettyCamelState stateC;
    private volatile Channel channel;
    @Override public void putState(    Channel channel,    NettyCamelState state){
      if (this.channel != null && this.channel != channel) {
        throw new IllegalStateException("Should use same channel as producer pool is disabled");
      }
      this.channel=channel;
      String body=state.getExchange().getMessage().getBody(String.class);
      if ("A".equals(body)) {
        stateA=state;
      }
 else       if ("B".equals(body)) {
        stateB=state;
      }
 else       if ("C".equals(body)) {
        stateC=state;
      }
    }
    @Override public void removeState(    ChannelHandlerContext ctx,    Channel channel){
    }
    @Override public NettyCamelState getState(    ChannelHandlerContext ctx,    Channel channel,    Object msg){
      String body=msg.toString();
      if (body.endsWith("A")) {
        stateA.getExchange().getMessage().setHeader("manager",this);
        return stateA;
      }
 else       if (body.endsWith("B")) {
        stateB.getExchange().getMessage().setHeader("manager",this);
        return stateB;
      }
 else       if (body.endsWith("C")) {
        stateC.getExchange().getMessage().setHeader("manager",this);
        return stateC;
      }
      return null;
    }
    @Override public NettyCamelState getState(    ChannelHandlerContext ctx,    Channel channel,    Throwable cause){
      return null;
    }
  }
}
