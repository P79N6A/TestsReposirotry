/** 
 * @version 
 */
public class FileAbsoluteAndRelativeConsumerTest extends ContextTestSupport {
  private String base;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filerelative");
    deleteDirectory("target/fileabsolute");
    base=new File("").getAbsolutePath() + "/target/fileabsolute";
    super.setUp();
  }
  @Test public void testRelative() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:relative");
    mock.expectedMessageCount(1);
    mock.message(0).header(Exchange.FILE_NAME).isEqualTo("test" + File.separator + "hello.txt");
    mock.message(0).header(Exchange.FILE_NAME_ONLY).isEqualTo("hello.txt");
    template.sendBodyAndHeader("file://target/filerelative","Hello World",Exchange.FILE_NAME,"test/hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAbsolute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:absolute");
    mock.expectedMessageCount(1);
    mock.message(0).header(Exchange.FILE_NAME).isEqualTo("test" + File.separator + "hello.txt");
    mock.message(0).header(Exchange.FILE_NAME_ONLY).isEqualTo("hello.txt");
    template.sendBodyAndHeader("file://target/fileabsolute","Hello World",Exchange.FILE_NAME,"test/hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filerelative?initialDelay=0&delay=10&recursive=true").convertBodyTo(String.class).to("mock:relative");
        from("file://" + base + "?initialDelay=0&delay=10&recursive=true").convertBodyTo(String.class).to("mock:absolute");
      }
    }
;
  }
}
