/** 
 * Unit test to verify that redelivery counters is working as expected.
 */
public class DeadLetterChannelRedeliveryTest extends ContextTestSupport {
  private static int counter;
  private static int redeliveryCounter;
  @Test public void testTwoRedeliveryTest() throws Exception {
    counter=0;
    redeliveryCounter=0;
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBody("direct:two","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(3,counter);
    assertEquals(2,redeliveryCounter);
  }
  @Test public void testNoRedeliveriesTest() throws Exception {
    counter=0;
    redeliveryCounter=0;
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBody("direct:no","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(1,counter);
    assertEquals(0,redeliveryCounter);
  }
  @Test public void testOneRedeliveriesTest() throws Exception {
    counter=0;
    redeliveryCounter=0;
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBody("direct:one","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(2,counter);
    assertEquals(1,redeliveryCounter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:two").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).onRedelivery(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            redeliveryCounter=exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER,Integer.class);
          }
        }
)).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            throw new Exception("Forced exception by unit test");
          }
        }
);
        from("direct:no").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0).onRedelivery(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            redeliveryCounter=exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER,Integer.class);
          }
        }
)).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            throw new Exception("Forced exception by unit test");
          }
        }
);
        from("direct:one").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1).redeliveryDelay(0).onRedelivery(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            redeliveryCounter=exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER,Integer.class);
          }
        }
)).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            throw new Exception("Forced exception by unit test");
          }
        }
);
      }
    }
;
  }
}
