/** 
 * Unit test for the HL7MLLP Codec.
 */
public class HL7MLLPNettyCodecLongTest extends HL7TestSupport {
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    HL7MLLPNettyDecoderFactory decoder=new HL7MLLPNettyDecoderFactory();
    decoder.setCharset("iso-8859-1");
    jndi.bind("hl7decoder",decoder);
    HL7MLLPNettyEncoderFactory encoder=new HL7MLLPNettyEncoderFactory();
    decoder.setCharset("iso-8859-1");
    jndi.bind("hl7encoder",encoder);
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&encoder=#hl7encoder&decoder=#hl7decoder").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            assertEquals(70010,exchange.getIn().getBody(byte[].class).length);
            MDM_T02 input=(MDM_T02)exchange.getIn().getBody(Message.class);
            assertEquals("2.5",input.getVersion());
            MSH msh=input.getMSH();
            assertEquals("20071129144629",msh.getDateTimeOfMessage().getTime().getValue());
            exchange.getOut().setBody("some response");
          }
        }
).to("mock:result");
      }
    }
;
  }
  @Test public void testSendHL7Message() throws Exception {
    BufferedReader in=IOHelper.buffered(new InputStreamReader(getClass().getResourceAsStream("/mdm_t02.txt")));
    String line="";
    String message="";
    while (line != null) {
      if ((line=in.readLine()) != null) {
        message+=line + "\r";
      }
    }
    message=message.substring(0,message.length() - 1);
    assertEquals(70010,message.length());
    String out=template.requestBody("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&encoder=#hl7encoder&decoder=#hl7decoder",message,String.class);
    assertEquals("some response",out);
  }
}
