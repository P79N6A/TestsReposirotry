public class NettyUDPMessageLargerThanDefaultBufferSizeTest extends BaseNettyTest {
  private byte[] getMessageBytes(  int messageSize){
    byte[] msgBytes=new byte[messageSize];
    for (int i=0; i < messageSize; i++) {
      msgBytes[i]='A';
    }
    return msgBytes;
  }
  private void sendMessage(  int messageSize) throws Exception {
    byte[] msgBytes=getMessageBytes(messageSize);
    assertEquals(msgBytes.length,messageSize);
    String message=new String(msgBytes);
    getMockEndpoint("mock:result").expectedBodiesReceived(message);
    template.sendBody("netty4:udp://localhost:{{port}}?sync=false",message);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSend2048Message() throws Exception {
    sendMessage(2048);
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    FixedRecvByteBufAllocator fixedRecvByteBufAllocator=new FixedRecvByteBufAllocator(4096);
    jndi.bind(ChannelOption.RCVBUF_ALLOCATOR.name(),fixedRecvByteBufAllocator);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4:udp://localhost:{{port}}?option." + ChannelOption.RCVBUF_ALLOCATOR.name() + "=#"+ ChannelOption.RCVBUF_ALLOCATOR.name()).to("mock:result");
      }
    }
;
  }
}
