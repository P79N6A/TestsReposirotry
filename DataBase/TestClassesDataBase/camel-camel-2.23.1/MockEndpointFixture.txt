/** 
 * Waits for messages to arrive on the mock endpoint and performs assertions on the message bodies.
 */
public class MockEndpointFixture {
  MockEndpoint mMockEndpoint;
  public MockEndpointFixture(  MockEndpoint aMockEndpoint){
    setMockEndpoint(aMockEndpoint);
  }
  protected void waitForMessages() throws InterruptedException {
    waitForMessages(mMockEndpoint);
  }
  protected void waitForMessages(  MockEndpoint aMockEndpoint) throws InterruptedException {
    mMockEndpoint.await(10,TimeUnit.SECONDS);
    assertEquals("Expected number of messages didn't arrive before timeout",aMockEndpoint.getExpectedCount(),aMockEndpoint.getReceivedCounter());
  }
  protected MockEndpoint getMockEndpoint(){
    return mMockEndpoint;
  }
  protected void setMockEndpoint(  MockEndpoint aMockEndpoint){
    mMockEndpoint=aMockEndpoint;
  }
  /** 
 * Assert that we've received the message and resets the mock endpoint
 */
  protected void assertMessageReceived(  File aExpectedFile) throws Exception {
    Source expectedDoc=XmlFixture.toSource(aExpectedFile);
    assertMessageReceived(expectedDoc);
  }
  protected void assertMessageReceived(  Source aExpectedDoc) throws Exception {
    Source actual=XmlFixture.toSource(getBody(0,String.class));
    assertMessageReceived(aExpectedDoc,actual);
  }
  protected void assertMessageReceived(  Source aExpectedDoc,  Source aActual) throws Exception {
    Source noTime=XmlFixture.stripTimestamp(aActual);
    Source noUUID=XmlFixture.stripUUID(noTime);
    XmlFixture.assertXMLIgnorePrefix("failed to match",aExpectedDoc,noUUID);
    JAXPXPathEngine xp=new JAXPXPathEngine();
    xp.setNamespaceContext(Collections.singletonMap("jmx","urn:org.apache.camel.component:jmx"));
    assertEquals("1",xp.evaluate("count(//jmx:timestamp)",aActual));
    assertEquals("1",xp.evaluate("count(//jmx:dateTime)",aActual));
    resetMockEndpoint();
  }
  /** 
 * Resets the mock endpoint so we can run another test. This will clear out any previously received messages.
 */
  protected void resetMockEndpoint(){
    getMockEndpoint().reset();
  }
  /** 
 * Gets the body of the received message at the specified index
 */
  protected <T>T getBody(  int aIndex,  Class<T> aType){
    Message in=getMessage(aIndex);
    T body=in.getBody(aType);
    assertNotNull(body);
    return body;
  }
  /** 
 * Gets the received message at the specified index
 */
  protected Message getMessage(  int aIndex){
    Exchange exchange=getExchange(aIndex);
    Message in=exchange.getIn();
    return in;
  }
  /** 
 * Gets the received exchange at the specified index
 */
  protected Exchange getExchange(  int aIndex){
    List<Exchange> exchanges=mMockEndpoint.getReceivedExchanges();
    Exchange exchange=exchanges.get(aIndex);
    return exchange;
  }
}
