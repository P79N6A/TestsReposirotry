/** 
 * Test for the  {@link CamelRoutesEndpoint} actuator endpoint.
 */
@DirtiesContext @RunWith(SpringRunner.class) @EnableAutoConfiguration @SpringBootApplication @SpringBootTest(classes={CamelAutoConfiguration.class,CamelRoutesEndpointAutoConfiguration.class,ActuatorTestRoute.class},properties={"management.endpoint.camelroutes.read-only = false"}) public class CamelRoutesEndpointWriteOperationTest extends Assert {
  @Autowired CamelRoutesEndpoint endpoint;
  @Autowired CamelContext camelContext;
  @Test public void testWriteOperation() throws Exception {
    ServiceStatus status=camelContext.getRouteStatus("foo-route");
    Assert.assertTrue(status.isStarted());
    TimeInfo timeInfo=new TimeInfo();
    timeInfo.setAbortAfterTimeout(true);
    timeInfo.setTimeout(5L);
    endpoint.doWriteAction("foo-route",WriteAction.STOP,timeInfo);
    status=camelContext.getRouteStatus("foo-route");
    Assert.assertTrue(status.isStopped());
    endpoint.doWriteAction("foo-route",WriteAction.START,timeInfo);
    status=camelContext.getRouteStatus("foo-route");
    Assert.assertTrue(status.isStarted());
  }
  @Test public void testRouteDump() throws Exception {
    String dump=endpoint.getRouteDump("foo-route");
    assertNotNull(dump);
    assertTrue(dump,dump.contains("<route "));
    assertTrue(dump,dump.contains("<from "));
    assertTrue(dump,dump.contains("uri=\"timer:foo\""));
    assertTrue(dump,dump.contains("<to "));
    assertTrue(dump,dump.contains("uri=\"log:foo\""));
    assertTrue(dump,dump.contains("</route>"));
  }
}
