public class AMQPEmbeddedBrokerTest extends CamelTestSupport {
  static int amqpPort=AvailablePortFinder.getNextAvailable();
  static EmbeddedActiveMQ server=new EmbeddedActiveMQ();
  @EndpointInject(uri="mock:result") MockEndpoint resultEndpoint;
  String expectedBody="Hello there!";
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration config=new ConfigurationImpl();
    AddressSettings addressSettings=new AddressSettings();
    addressSettings.setAutoCreateAddresses(false);
    config.addAcceptorConfiguration("amqp","tcp://0.0.0.0:" + amqpPort + "?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300");
    config.setPersistenceEnabled(false);
    config.addAddressesSetting("#",addressSettings);
    config.setSecurityEnabled(false);
    CoreAddressConfiguration pingTopicConfig=new CoreAddressConfiguration();
    pingTopicConfig.setName("topic.ping");
    pingTopicConfig.addRoutingType(RoutingType.MULTICAST);
    config.addAddressConfiguration(pingTopicConfig);
    server.setConfiguration(config);
    server.start();
    System.setProperty(AMQP_PORT,amqpPort + "");
    System.setProperty(AMQP_SET_TOPIC_PREFIX,"false");
  }
  @AfterClass public static void afterClass() throws Exception {
    server.stop();
  }
  @Test public void testTopicWithoutPrefix() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    template.sendBody("direct:send-topic",expectedBody);
    resultEndpoint.assertIsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    return registry;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    JndiRegistry registry=(JndiRegistry)((PropertyPlaceholderDelegateRegistry)camelContext.getRegistry()).getRegistry();
    registry.bind("amqpConnection",discoverAMQP(camelContext));
    camelContext.addComponent("amqp-customized",new AMQPComponent());
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:send-topic").to("amqp-customized:topic:topic.ping");
        from("amqp-customized:topic:topic.ping").to("log:routing").to("mock:result");
      }
    }
;
  }
}
