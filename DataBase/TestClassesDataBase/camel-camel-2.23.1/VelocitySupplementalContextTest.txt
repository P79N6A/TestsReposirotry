public class VelocitySupplementalContextTest extends CamelTestSupport {
  @Produce(uri="direct:input") protected ProducerTemplate inputEndpoint;
  @EndpointInject(uri="mock:results") protected MockEndpoint outputEndpoint;
  @Test public void testCamelRoute() throws Exception {
    outputEndpoint.expectedMessageCount(1);
    outputEndpoint.expectedHeaderReceived("body","new_body");
    outputEndpoint.expectedHeaderReceived("in.body","old_body");
    outputEndpoint.expectedBodiesReceived("bar");
    Map<String,Object> headers=new HashMap<>();
    headers.put(VelocityConstants.VELOCITY_TEMPLATE,"#set( $headers.body = ${body} )\n#set( $headers['in.body'] = $in.body )\n" + "bar");
    inputEndpoint.sendBodyAndHeaders("old_body",headers);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    final Map<String,Object> supplementalContext=new HashMap<>();
    supplementalContext.put("body","new_body");
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:input").setHeader(VelocityConstants.VELOCITY_SUPPLEMENTAL_CONTEXT).constant(supplementalContext).to("velocity:template-in-header").to("mock:results");
      }
    }
;
  }
}
