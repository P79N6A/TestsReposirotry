/** 
 * @version 
 */
public class SpringLogMaskTest {
  @Test public void testLogMask() throws Exception {
    final AbstractXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/log/SpringLogMaskTest-context.xml");
    SpringCamelContext context=SpringCamelContext.springCamelContext(applicationContext);
    context.start();
    MockEndpoint mock=context.getEndpoint("mock:mask",MockEndpoint.class);
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBodyAndHeader("direct:mask","password=passw0rd@","headerPassword","#header-password$");
    template.sendBodyAndProperty("direct:mask","password=passw0rd@","propertyPassphrase","#property-passphrase$");
    context.stop();
    mock.expectedMessageCount(2);
  }
  @Test public void testLogMaskDisabled() throws Exception {
    final AbstractXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/log/SpringLogMaskTest-context.xml");
    SpringCamelContext context=SpringCamelContext.springCamelContext(applicationContext);
    context.start();
    MockEndpoint mock=context.getEndpoint("mock:no-mask",MockEndpoint.class);
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBodyAndHeader("direct:no-mask","password=passw0rd@","headerPassword","#header-password$");
    template.sendBodyAndProperty("direct:no-mask","password=passw0rd@","propertyPassphrase","#property-passphrase$");
    context.stop();
    mock.expectedMessageCount(2);
  }
  @Test public void testCustomLogMask() throws Exception {
    final AbstractXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/log/SpringCustomLogMaskTest-context.xml");
    SpringCamelContext context=SpringCamelContext.springCamelContext(applicationContext);
    MockMaskingFormatter customFormatter=applicationContext.getBean(Constants.CUSTOM_LOG_MASK_REF,MockMaskingFormatter.class);
    context.start();
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBodyAndHeader("direct:mock","password=passw0rd@","headerPassword","#header-password$");
    context.stop();
    Assert.assertTrue(customFormatter.received.contains("password=passw0rd@"));
  }
public static class MockMaskingFormatter implements MaskingFormatter {
    private String received;
    @Override public String format(    String source){
      received=source;
      return source;
    }
  }
}
