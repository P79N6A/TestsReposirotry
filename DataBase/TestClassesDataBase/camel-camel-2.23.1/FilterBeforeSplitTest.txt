/** 
 * Unit test to verify that Splitter aggregator clear the filtered history in case filter has been used <b>before</b> the splitter.
 * @version 
 */
public class FilterBeforeSplitTest extends ContextTestSupport {
  @Test public void testFilterBeforeSplit() throws Exception {
    getMockEndpoint("mock:good").expectedBodiesReceived("Hello World how are you?");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello,World,how,are,you?");
    MockEndpoint split=getMockEndpoint("mock:split");
    split.expectedBodiesReceived("Hello","World","how","are","you?");
    template.sendBody("direct:start","Hello World how are you?");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiltered() throws Exception {
    getMockEndpoint("mock:good").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:before").expectedBodiesReceived("I will be filtered","Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("I,will,be,filtered","Hello,World");
    getMockEndpoint("mock:split").expectedBodiesReceived("I","will","be","filtered","Hello","World");
    template.sendBody("direct:start","I will be filtered");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        Predicate goodWord=body().contains("World");
        from("direct:start").to("mock:before").filter(goodWord).to("mock:good").end().split(body().tokenize(" "),new MyAggregationStrategy()).to("mock:split").end().to("mock:result");
      }
    }
;
  }
protected class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      String newBody=newExchange.getIn().getBody(String.class);
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class);
      body=body + "," + newBody;
      oldExchange.getIn().setBody(body);
      return oldExchange;
    }
  }
}
