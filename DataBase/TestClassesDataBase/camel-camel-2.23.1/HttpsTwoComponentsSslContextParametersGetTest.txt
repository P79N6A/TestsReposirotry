public class HttpsTwoComponentsSslContextParametersGetTest extends BaseHttpsTest {
  private int port2;
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("x509HostnameVerifier",new NoopHostnameVerifier());
    registry.bind("sslContextParameters",new SSLContextParameters());
    registry.bind("sslContextParameters2",new SSLContextParameters());
    registry.bind("http4s-foo",new HttpComponent());
    registry.bind("http4s-bar",new HttpComponent());
    return registry;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void httpsTwoDifferentSSLContextNotSupported() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        port2=AvailablePortFinder.getNextAvailable(localServer.getLocalPort());
        from("direct:foo").to("http4s-foo://127.0.0.1:" + localServer.getLocalPort() + "/mail?x509HostnameVerifier=#x509HostnameVerifier&sslContextParameters=#sslContextParameters");
        from("direct:bar").to("http4s-bar://127.0.0.1:" + port2 + "/mail?x509HostnameVerifier=#x509HostnameVerifier&sslContextParameters=#sslContextParameters2");
      }
    }
);
    context.start();
    Thread.sleep(500);
    context.stop();
  }
}
