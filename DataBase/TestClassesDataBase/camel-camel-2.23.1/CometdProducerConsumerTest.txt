/** 
 * Unit testing for using a CometdProducer and a CometdConsumer
 */
public class CometdProducerConsumerTest extends CamelTestSupport {
  private static final String SHOOKHANDS_SESSION_HEADER="Shookhands";
  private int port;
  private String uri;
  @Test public void testProducer() throws Exception {
    Person person=new Person("David","Greco");
    template.requestBodyAndHeader("direct:input",person,"testHeading","value");
    MockEndpoint ep=context.getEndpoint("mock:test",MockEndpoint.class);
    List<Exchange> exchanges=ep.getReceivedExchanges();
    for (    Exchange exchange : exchanges) {
      Message message=exchange.getIn();
      Person person1=(Person)message.getBody();
      assertEquals("David",person1.getName());
      assertEquals("Greco",person1.getSurname());
    }
  }
  @Test public void testHeadersSupported() throws Exception {
    String headerName="testHeading";
    String headerValue="value";
    template.requestBodyAndHeader("direct:input","message",headerName,headerValue);
    MockEndpoint ep=context.getEndpoint("mock:test",MockEndpoint.class);
    List<Exchange> exchanges=ep.getReceivedExchanges();
    assertTrue(exchanges.size() > 0);
    for (    Exchange exchange : exchanges) {
      Message message=exchange.getIn();
      assertEquals(headerValue,message.getHeader(headerName));
      assertNotNull(message.getHeader(CometdBinding.COMETD_CLIENT_ID_HEADER_NAME));
    }
  }
  @Test public void testSessionHeaderArgumentSet() throws Exception {
    CometdComponent component=context.getComponent("cometd",CometdComponent.class);
    Endpoint result=component.createEndpoint("cometd://127.0.0.1:" + port + "/service/testArgs?baseResource=file:./target/test-classes/webapp&"+ "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&sessionHeadersEnabled=true&logLevel=2");
    assertTrue(result instanceof CometdEndpoint);
    CometdEndpoint cometdEndpoint=(CometdEndpoint)result;
    assertTrue(cometdEndpoint.isSessionHeadersEnabled());
  }
  @Test public void testSessionInformationTransferred() throws Exception {
    template.sendBody("direct:input","message");
    MockEndpoint ep=context.getEndpoint("mock:test",MockEndpoint.class);
    List<Exchange> exchanges=ep.getReceivedExchanges();
    assertTrue(exchanges.size() > 0);
    for (    Exchange exchange : exchanges) {
      Message message=exchange.getIn();
      assertTrue((Boolean)message.getHeader(SHOOKHANDS_SESSION_HEADER));
    }
  }
  @Override @Before public void setUp() throws Exception {
    port=AvailablePortFinder.getNextAvailable(23500);
    uri="cometd://127.0.0.1:" + port + "/service/test?baseResource=file:./target/test-classes/webapp&"+ "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&sessionHeadersEnabled=true&logLevel=2";
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        CometdComponent component=context.getComponent("cometd",CometdComponent.class);
        component.setSecurityPolicy(createTestSecurityPolicy());
        from("direct:input").to(uri);
        from(uri).to("mock:test");
      }
    }
;
  }
  private SecurityPolicy createTestSecurityPolicy(){
    return new SecurityPolicy(){
      @Override public boolean canSubscribe(      BayeuxServer server,      ServerSession session,      ServerChannel channel,      ServerMessage message){
        session.setAttribute("Subscribed",true);
        return true;
      }
      @Override public boolean canPublish(      BayeuxServer server,      ServerSession session,      ServerChannel channel,      ServerMessage message){
        return true;
      }
      @Override public boolean canHandshake(      BayeuxServer server,      ServerSession session,      ServerMessage message){
        session.setAttribute(SHOOKHANDS_SESSION_HEADER,true);
        return true;
      }
      @Override public boolean canCreate(      BayeuxServer server,      ServerSession session,      String channelId,      ServerMessage message){
        return true;
      }
    }
;
  }
public static class Person {
    private String name;
    private String surname;
    Person(    String name,    String surname){
      this.name=name;
      this.surname=surname;
    }
    public String getName(){
      return name;
    }
    public String getSurname(){
      return surname;
    }
    public void setName(    String name){
      this.name=name;
    }
    public void setSurname(    String surname){
      this.surname=surname;
    }
  }
}
