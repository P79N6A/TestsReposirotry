/** 
 * @version 
 */
public class FileContentBasedRouterTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/cbr");
    super.setUp();
  }
  private void sendFiles(){
    template.sendBodyAndHeader("file://target/cbr","Hello London","CamelFileName","london.txt");
    template.sendBodyAndHeader("file://target/cbr","Hello Paris","CamelFileName","paris.txt");
    template.sendBodyAndHeader("file://target/cbr","Hello Copenhagen","CamelFileName","copenhagen.txt");
  }
  @Test public void testRouteLondon() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(GenericFile.class);
    sendFiles();
    assertMockEndpointsSatisfied();
  }
  @Test public void testRouteParis() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:paris");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(GenericFile.class);
    sendFiles();
    assertMockEndpointsSatisfied();
  }
  @Test public void testRouteOther() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:other");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("CamelFileName","copenhagen.txt");
    mock.message(0).body().isInstanceOf(GenericFile.class);
    sendFiles();
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/cbr?noop=true&initialDelay=0&delay=10").choice().when(header("CamelFileName").isEqualTo("london.txt")).to("mock:london").when(header("CamelFileName").isEqualTo("paris.txt")).to("mock:paris").otherwise().to("mock:other");
      }
    }
;
  }
}
