public class JmsTransactedDeadLetterChannelHandlerRollbackOnExceptionTest extends CamelTestSupport {
public static class BadErrorHandler {
    @Handler public void onException(    Exchange exchange,    Exception exception) throws Exception {
      throw new RuntimeException("error in errorhandler");
    }
  }
  protected final String testingEndpoint="activemq:test." + getClass().getName();
  protected boolean isHandleNew(){
    return true;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("bean:" + BadErrorHandler.class.getName()).deadLetterHandleNewException(isHandleNew()).logNewException(true));
        from(testingEndpoint).log("Incoming JMS message ${body}").throwException(new RuntimeException("bad error"));
      }
    }
;
  }
  @Test public void shouldNotLoseMessagesOnExceptionInErrorHandler() throws Exception {
    template.sendBody(testingEndpoint,"Hello World");
    Object dlqBody=consumer.receiveBody("activemq:ActiveMQ.DLQ",2000);
    assertNull("Should not rollback the transaction",dlqBody);
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory(null,0);
    JmsComponent component=jmsComponentTransacted(connectionFactory);
    camelContext.addComponent("activemq",component);
    return camelContext;
  }
}
