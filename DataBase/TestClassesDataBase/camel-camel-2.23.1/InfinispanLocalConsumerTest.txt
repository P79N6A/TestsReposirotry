public class InfinispanLocalConsumerTest extends InfinispanTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint mockResult;
  @EndpointInject(uri="mock:result2") private MockEndpoint mockResult2;
  @Test public void consumerReceivedPreAndPostEntryCreatedEventNotifications() throws Exception {
    mockResult.expectedMessageCount(2);
    mockResult.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_CREATED");
    mockResult.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(true);
    mockResult.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull();
    mockResult.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE);
    mockResult.message(1).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_CREATED");
    mockResult.message(1).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false);
    mockResult.message(1).outHeader(InfinispanConstants.CACHE_NAME).isNotNull();
    mockResult.message(1).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE);
    currentCache().put(KEY_ONE,VALUE_ONE);
    mockResult.assertIsSatisfied();
  }
  @Test public void consumerReceivedExpirationEventNotification() throws Exception {
    mockResult2.expectedMessageCount(1);
    mockResult2.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_EXPIRED");
    mockResult2.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false);
    mockResult2.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull();
    mockResult2.message(0).outHeader(InfinispanConstants.KEY).isEqualTo("keyTwo");
    injectTimeService();
    currentCache().put("keyTwo","valueTwo",1000,TimeUnit.MILLISECONDS);
    ts.advance(1001);
    assertNull(currentCache().get("keyTwo"));
    mockResult2.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("infinispan?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_CREATED").to("mock:result");
        from("infinispan?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_EXPIRED").to("mock:result2");
      }
    }
;
  }
}
