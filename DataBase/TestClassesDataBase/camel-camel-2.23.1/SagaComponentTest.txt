/** 
 */
public class SagaComponentTest extends ContextTestSupport {
  @Test public void testManualCompletion() throws InterruptedException {
    MockEndpoint completed=getMockEndpoint("mock:completed");
    completed.expectedMessageCount(1);
    template.sendBody("direct:manual-workflow","manual-complete");
    completed.assertIsSatisfied();
  }
  @Test public void testManualCompletionIsNotTriggeredAutomatically() throws InterruptedException {
    MockEndpoint completed=getMockEndpoint("mock:completed");
    completed.expectedMessageCount(1);
    completed.setResultWaitTime(1000);
    template.sendBody("direct:manual-workflow","do-not-complete");
    completed.assertIsNotSatisfied();
  }
  @Test public void testManualCompensationIsTriggeredOnly() throws InterruptedException {
    MockEndpoint completed=getMockEndpoint("mock:completed");
    completed.expectedMessageCount(1);
    completed.setResultWaitTime(1000);
    MockEndpoint compensated=getMockEndpoint("mock:compensated");
    compensated.expectedMessageCount(1);
    template.sendBody("direct:manual-workflow","manual-compensate");
    completed.assertIsNotSatisfied();
    compensated.assertIsSatisfied();
  }
  @Test public void testAutoCompletion() throws InterruptedException {
    MockEndpoint completed=getMockEndpoint("mock:completed");
    completed.expectedMessageCount(1);
    template.sendBody("direct:auto-workflow","auto-complete");
    completed.assertIsSatisfied();
  }
  @Test public void testAutoCompensationIsTriggeredOnly() throws InterruptedException {
    MockEndpoint completed=getMockEndpoint("mock:completed");
    completed.expectedMessageCount(1);
    completed.setResultWaitTime(1000);
    MockEndpoint compensated=getMockEndpoint("mock:compensated");
    compensated.expectedMessageCount(1);
    try {
      template.sendBody("direct:auto-workflow","auto-compensate");
      Assert.fail("Should throw an exception");
    }
 catch (    Exception ex) {
    }
    completed.assertIsNotSatisfied();
    compensated.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addService(new InMemorySagaService());
        from("direct:manual-workflow").saga().compensation("mock:compensated").completion("mock:completed").completionMode(SagaCompletionMode.MANUAL).to("seda:async");
        from("seda:async").choice().when(body().isEqualTo(constant("manual-complete"))).to("saga:complete").when(body().isEqualTo(constant("manual-compensate"))).to("saga:compensate").end();
        from("direct:auto-workflow").saga().completion("mock:completed").compensation("mock:compensated").choice().when(body().isEqualTo(constant("auto-compensate"))).process(x -> {
          throw new RuntimeException("mock exception");
        }
).end().to("seda:async");
      }
    }
;
  }
}
