public class JmsLifecycleIssueTest extends CamelTestSupport {
  public static final String ROUTE_ID="simpleRoute";
  public static final String ENDPOINT_URI="activemq:processOrder";
  @Test public void routeThatIsStoppedAndThenResumedAcceptsMessage() throws Exception {
    assertThatRouteIs(Stopped);
    context.resumeRoute(ROUTE_ID);
    assertRouteWorks();
  }
  @Test public void routeThatIsStoppedSuspendedAndThenResumedAcceptsMessage() throws Exception {
    assertThatRouteIs(Stopped);
    context.suspendRoute(ROUTE_ID);
    context.resumeRoute(ROUTE_ID);
    assertRouteWorks();
  }
  private void assertThatRouteIs(  ServiceStatus expectedStatus){
    assertEquals(expectedStatus,context.getRouteStatus(ROUTE_ID));
  }
  private void assertRouteWorks() throws Exception {
    assertThatRouteIs(Started);
    getMockEndpoint("mock:result").expectedBodiesReceived("anything");
    template.sendBody(ENDPOINT_URI,"anything");
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addRoutes(new RouteBuilder(){
          @Override public void configure() throws Exception {
            from(ENDPOINT_URI).routeId(ROUTE_ID).autoStartup(false).to("log:input").to("mock:result");
          }
        }
);
      }
    }
;
  }
}
