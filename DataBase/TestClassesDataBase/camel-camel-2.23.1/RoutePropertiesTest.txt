public class RoutePropertiesTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testRouteProperties() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("route-id").routeProperty("key1","val1").routeProperty("key2","val2").to("mock:output");
      }
    }
);
    context.start();
    RouteDefinition definition=context.getRouteDefinition("route-id");
    Route route=context.getRoute("route-id");
    assertNotNull(definition.getRouteProperties());
    assertEquals(2,definition.getRouteProperties().size());
    assertNotNull(route.getProperties());
    assertEquals("val1",route.getProperties().get("key1"));
    assertEquals("val2",route.getProperties().get("key2"));
  }
  @Test public void testRoutePropertiesFailuer() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").routeId("route-id").routeProperty(Route.ID_PROPERTY,"the id").to("mock:output");
        }
      }
);
      context.start();
      fail("");
    }
 catch (    FailedToCreateRouteException e) {
    }
  }
}
