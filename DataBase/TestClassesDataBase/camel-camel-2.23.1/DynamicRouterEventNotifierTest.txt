public class DynamicRouterEventNotifierTest extends ContextTestSupport {
  private MyEventNotifier notifier=new MyEventNotifier();
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getManagementStrategy().addEventNotifier(notifier);
    return context;
  }
  @Test public void testDynamicRouterEventNotifier() throws Exception {
    getMockEndpoint("mock:x").expectedMessageCount(1);
    getMockEndpoint("mock:y").expectedMessageCount(1);
    getMockEndpoint("mock:z").expectedMessageCount(1);
    getMockEndpoint("mock:end").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals("Should have 5 sending events",5,notifier.getSending());
    assertEquals("Should have 5 sent events",5,notifier.getSent());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").dynamicRouter(method(DynamicRouterEventNotifierTest.class,"slip")).to("mock:end");
      }
    }
;
  }
  public String slip(  @Body String body,  @Header(Exchange.SLIP_ENDPOINT) String previous){
    if (previous == null) {
      return "mock:x";
    }
 else     if ("mock://x".equals(previous)) {
      return "mock:y";
    }
 else     if ("mock://y".equals(previous)) {
      return "mock:z";
    }
    return null;
  }
private final class MyEventNotifier extends EventNotifierSupport {
    private int sending;
    private int sent;
    @Override public void notify(    EventObject event) throws Exception {
      if (event instanceof ExchangeSendingEvent) {
        log.info("Sending: {}",event);
        sending++;
      }
 else {
        sent++;
      }
    }
    @Override public boolean isEnabled(    EventObject event){
      return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent;
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
    public int getSending(){
      return sending;
    }
    public int getSent(){
      return sent;
    }
  }
}
