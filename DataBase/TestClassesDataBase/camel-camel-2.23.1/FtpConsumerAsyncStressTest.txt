/** 
 * @version 
 */
public class FtpConsumerAsyncStressTest extends FtpServerTestSupport {
  private int files=100;
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/filestress/?password=admin&maxMessagesPerPoll=25";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    for (int i=0; i < files; i++) {
      template.sendBodyAndHeader("file://" + FTP_ROOT_DIR + "/filestress","Hello World",Exchange.FILE_NAME,i + ".txt");
    }
  }
  @Test public void testFTPConsumerAsyncStress() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.setResultWaitTime(30000);
    mock.expectedMinimumMessageCount(50);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl()).threads(10).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Random ran=new Random();
            int delay=ran.nextInt(500) + 10;
            Thread.sleep(delay);
          }
        }
).to("mock:result");
      }
    }
;
  }
}
