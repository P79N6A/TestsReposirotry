public class ProducerUseMessageBodyForTemplateTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/storedProcedureTest.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void shouldUseMessageBodyAsQuery() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    Map<String,Object> batch1=new HashMap<>();
    batch1.put("num1",3);
    batch1.put("num2",1);
    template.requestBodyAndHeader("direct:query","SUBNUMBERS(INTEGER :#num1,INTEGER :#num2,OUT INTEGER resultofsum)",SqlStoredConstants.SQL_STORED_PARAMETERS,batch1);
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    assertEquals(Integer.valueOf(2),exchange.getIn().getBody(Map.class).get("resultofsum"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql-stored",SqlStoredComponent.class).setDataSource(db);
        from("direct:query").to("sql-stored:query?useMessageBodyForTemplate=true").to("mock:query");
      }
    }
;
  }
}
