/** 
 * Unit test for poll strategy
 */
public class FileConsumerPollStrategyRollbackThrowExceptionTest extends ContextTestSupport {
  private static volatile String event="";
  private static final CountDownLatch LATCH=new CountDownLatch(1);
  private String fileUrl="file://target/pollstrategy/?pollStrategy=#myPoll&initialDelay=0&delay=10";
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myPoll",new MyPollStrategy());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/pollstrategy");
    super.setUp();
    template.sendBodyAndHeader("file:target/pollstrategy/","Hello World",Exchange.FILE_NAME,"hello.txt");
  }
  @Test public void testRollbackThrowException() throws Exception {
    await().atMost(2,TimeUnit.SECONDS).until(() -> LATCH.getCount() == 0);
    assertTrue(event.startsWith("rollback"));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
private static class MyPollStrategy implements PollingConsumerPollStrategy {
    public boolean begin(    Consumer consumer,    Endpoint endpoint){
      throw new IllegalArgumentException("Damn I cannot do this");
    }
    public void commit(    Consumer consumer,    Endpoint endpoint,    int polledMessages){
      event+="commit";
    }
    public boolean rollback(    Consumer consumer,    Endpoint endpoint,    int retryCounter,    Exception cause) throws Exception {
      event+="rollback";
      LATCH.countDown();
      throw cause;
    }
  }
}
