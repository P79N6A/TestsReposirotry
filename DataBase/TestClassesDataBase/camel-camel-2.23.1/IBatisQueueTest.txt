public class IBatisQueueTest extends IBatisTestSupport {
  protected boolean createTestData(){
    return false;
  }
  @Override protected String getStatement(){
    return "create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255), PROCESSED BOOLEAN DEFAULT false)";
  }
  @Test public void testConsume() throws Exception {
    MockEndpoint endpoint=getMockEndpoint("mock:results");
    endpoint.expectedMinimumMessageCount(2);
    Account account1=new Account();
    account1.setId(1);
    account1.setFirstName("Bob");
    account1.setLastName("Denver");
    account1.setEmailAddress("TryGuessingGilligan@gmail.com");
    Account account2=new Account();
    account2.setId(2);
    account2.setFirstName("Alan");
    account2.setLastName("Hale");
    account2.setEmailAddress("TryGuessingSkipper@gmail.com");
    template.sendBody("direct:start",new Account[]{account1,account2});
    assertMockEndpointsSatisfied();
    Thread.sleep(1000);
    List<?> body=template.requestBody("ibatis:selectProcessedAccounts?statementType=QueryForList",null,List.class);
    assertEquals("Wrong size: " + body,2,body.size());
    Account actual=assertIsInstanceOf(Account.class,body.get(0));
    assertEquals("Account.getFirstName()","Bob",actual.getFirstName());
    assertEquals("Account.getLastName()","Denver",actual.getLastName());
    body=template.requestBody("ibatis:selectUnprocessedAccounts?statementType=QueryForList",null,List.class);
    assertEquals("Wrong size: " + body,0,body.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("ibatis:selectUnprocessedAccounts?consumer.onConsume=consumeAccount").to("mock:results");
        from("direct:start").to("ibatis:insertAccount?statementType=Insert");
      }
    }
;
  }
}
