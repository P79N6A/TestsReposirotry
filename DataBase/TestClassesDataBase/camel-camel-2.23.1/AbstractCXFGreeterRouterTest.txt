public abstract class AbstractCXFGreeterRouterTest extends CamelTestSupport {
  protected AbstractXmlApplicationContext applicationContext;
  private final QName serviceName=new QName("http://apache.org/hello_world_soap_http","SOAPService");
  private final QName routerPortName=new QName("http://apache.org/hello_world_soap_http","RouterPort");
  private final String testDocLitFaultBody="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><testDocLitFault xmlns=\"http://apache.org/hello_world_soap_http/types\">" + "<faultType>NoSuchCodeLitFault</faultType></testDocLitFault>"+ "</soap:Body></soap:Envelope>";
  public static int getPort1(){
    return CXFTestSupport.getPort1();
  }
  public static int getPort2(){
    return CXFTestSupport.getPort2();
  }
  protected abstract ClassPathXmlApplicationContext createApplicationContext();
  @Before public void setUp() throws Exception {
    applicationContext=createApplicationContext();
    super.setUp();
    assertNotNull("Should have created a valid spring context",applicationContext);
  }
  @After public void tearDown() throws Exception {
    IOHelper.close(applicationContext);
    super.tearDown();
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    Service service=Service.create(serviceName);
    service.addPort(routerPortName,"http://schemas.xmlsoap.org/soap/","http://localhost:" + getPort2() + "/"+ getClass().getSimpleName()+ "/CamelContext/RouterPort");
    Greeter greeter=service.getPort(routerPortName,Greeter.class);
    String reply=greeter.greetMe("test");
    assertNotNull("No response received from service",reply);
    assertEquals("Got the wrong reply ","Hello test",reply);
    reply=greeter.sayHi();
    assertNotNull("No response received from service",reply);
    assertEquals("Got the wrong reply ","Bonjour",reply);
    greeter.greetMeOneWay("call greetMe OneWay !");
    try {
      greeter.testDocLitFault("NoSuchCodeLitFault");
      fail("Should get the NoSuchCodeLitFault here.");
    }
 catch (    NoSuchCodeLitFault fault) {
      assertNotNull("The fault info should not be null",fault.getFaultInfo());
    }
  }
  @Test public void testRoutingSOAPFault() throws Exception {
    try {
      template.sendBody("http://localhost:" + getPort2() + "/"+ getClass().getSimpleName()+ "/CamelContext/RouterPort/",testDocLitFaultBody);
      fail("Should get an exception here.");
    }
 catch (    RuntimeCamelException exception) {
      assertTrue("It should get the response error",exception.getCause() instanceof HttpOperationFailedException);
      assertEquals("Get a wrong response code",((HttpOperationFailedException)exception.getCause()).getStatusCode(),500);
    }
  }
  @Test public void testPublishEndpointUrl() throws Exception {
    String response=template.requestBody("http://localhost:" + getPort2() + "/"+ getClass().getSimpleName()+ "/CamelContext/RouterPort/"+ getClass().getSimpleName()+ "?wsdl",null,String.class);
    assertTrue("Can't find the right service location.",response.indexOf("http://www.simple.com/services/test") > 0);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    return SpringCamelContext.springCamelContext(applicationContext);
  }
}
