/** 
 * Provides abstract test for fault and output params for spring-ws:to: and spring-ws:action: endpoints
 */
public abstract class AbstractConsumerTests extends AbstractWSATests {
  @Test public void defaultAction4ouput() throws Exception {
    ActionCallback requestCallback=channelIn("http://default-ok.com/");
    webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction());
  }
  @Test public void defaultAction4fault() throws Exception {
    ActionCallback requestCallback=channelIn("http://default-fault.com/");
    try {
      webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    }
 catch (    SoapFaultClientException e) {
    }
    Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction());
  }
  @Test public void customAction4output() throws Exception {
    ActionCallback requestCallback=channelIn("http://uri-ok.com");
    webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIOutputAction"));
  }
  @Test public void customAction4fault() throws Exception {
    ActionCallback requestCallback=channelIn("http://uri-fault.com");
    try {
      webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    }
 catch (    SoapFaultClientException e) {
    }
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIFaultAction"));
  }
  @Test @Ignore(value="Not implemented yet") public void overrideHeaderAction4output() throws Exception {
    ActionCallback requestCallback=channelIn("http://override-ok.com");
    webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://outputHeader.com"));
  }
  @Test @Ignore(value="Not implemented yet") public void overrideHeaderAction4fault() throws Exception {
    ActionCallback requestCallback=channelIn("http://override-fault.com");
    try {
      webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    }
 catch (    SoapFaultClientException e) {
    }
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://faultHeader.com"));
  }
  @Test @Ignore(value="Not implemented yet") public void headerAction4output() throws Exception {
    ActionCallback requestCallback=channelIn("http://headerOnly-ok.com");
    webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://outputHeader.com"));
  }
  @Test @Ignore(value="Not implemented yet") public void headerAction4fault() throws Exception {
    ActionCallback requestCallback=channelIn("http://headerOnly-fault.com");
    try {
      webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    }
 catch (    SoapFaultClientException e) {
    }
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://faultHeader.com"));
  }
  @Test public void onlyCustomOutputSpecified4output() throws Exception {
    ActionCallback requestCallback=channelIn("http://uriOutputOnly-ok.com/");
    webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIOutputAction"));
  }
  @Test public void onlyCustomOutputSpecified4fault() throws Exception {
    ActionCallback requestCallback=channelIn("http://uriOutputOnly-fault.com/");
    try {
      webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    }
 catch (    SoapFaultClientException e) {
    }
    Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction());
  }
  @Test public void onlyCustomFaultSpecified4output() throws Exception {
    ActionCallback requestCallback=channelIn("http://uriFaultOnly-ok.com/");
    webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction());
  }
  @Test public void onlyCustomFaultSpecified4fault() throws Exception {
    ActionCallback requestCallback=channelIn("http://uriFaultOnly-fault.com/");
    try {
      webServiceTemplate.sendSourceAndReceiveToResult(source,requestCallback,result);
    }
 catch (    SoapFaultClientException e) {
    }
    Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIFaultAction"));
  }
}
