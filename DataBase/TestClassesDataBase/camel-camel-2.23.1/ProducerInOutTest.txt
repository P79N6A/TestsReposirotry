public class ProducerInOutTest extends CamelTestSupport {
  EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/storedProcedureTest.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testInOutStoredProcedure() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("in1",0);
    headers.put("in2",0);
    template.requestBodyAndHeaders("direct:query",null,headers);
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    Map results=exchange.getIn().getBody(Map.class);
    assertEquals(1,results.get("out1"));
    assertEquals(2,results.get("out2"));
    assertNotNull(exchange.getIn().getHeader(SqlStoredConstants.SQL_STORED_UPDATE_COUNT));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql-stored",SqlStoredComponent.class).setDataSource(db);
        from("direct:query").to("sql-stored:INOUTDEMO(INTEGER ${headers.in1},INOUT INTEGER ${headers.in2} out1,OUT INTEGER out2)").to("mock:query");
      }
    }
;
  }
}
