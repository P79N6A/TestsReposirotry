/** 
 * @version 
 */
public class AsyncEndpointSplitFineGrainedErrorHandlingTest extends ContextTestSupport {
  private static int counter;
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel","Bye Camel","Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C");
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
    assertEquals(3 + 1,counter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        onException(Exception.class).maximumRedeliveries(2).redeliveryDelay(0);
        from("direct:start").split(body()).to("mock:before").to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            if (counter++ == 1) {
              throw new IllegalArgumentException("Cannot do this");
            }
          }
        }
).to("mock:after").end().to("mock:result");
      }
    }
;
  }
}
