public class CamelAwsXRayTestSupport extends CamelTestSupport {
  @Rule public FakeAWSDaemon socketListener=new FakeAWSDaemon();
  private List<TestTrace> testData;
  public CamelAwsXRayTestSupport(  TestTrace... testData){
    this.testData=Arrays.asList(testData);
  }
  @Override protected void postProcessTest() throws Exception {
    super.postProcessTest();
    socketListener.getReceivedData().clear();
  }
  @Override protected void resetMocks(){
    super.resetMocks();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setTracing(true);
    final Tracer tracer=new Tracer();
    tracer.getDefaultTraceFormatter().setShowBody(false);
    tracer.setLogLevel(LoggingLevel.INFO);
    context.getInterceptStrategies().add(tracer);
    XRayTracer xRayTracer=new XRayTracer();
    xRayTracer.setCamelContext(context);
    xRayTracer.setTracingStrategy(getTracingStrategy());
    xRayTracer.setExcludePatterns(getExcludePatterns());
    xRayTracer.init(context);
    return context;
  }
  protected InterceptStrategy getTracingStrategy(){
    return new NoopTracingStrategy();
  }
  protected Set<String> getExcludePatterns(){
    return new HashSet<>();
  }
  protected void verify(){
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException iEx) {
    }
    Map<String,TestTrace> receivedData=socketListener.getReceivedData();
    TestUtils.checkData(receivedData,testData);
  }
}
