public class InfluxDbProducerQueryTest extends AbstractInfluxDbTest {
  @EndpointInject(uri="mock:test") MockEndpoint successEndpoint;
  @EndpointInject(uri="mock:error") MockEndpoint errorEndpoint;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(0));
        from("direct:test").to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY,"select * from cpu");
          }
        }
).to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}&operation=query").to("mock:test");
      }
    }
;
  }
  @Before public void resetEndpoints(){
    errorEndpoint.reset();
    successEndpoint.reset();
  }
  @Test public void writePointFromMapAndStaticDbName() throws InterruptedException {
    errorEndpoint.expectedMessageCount(0);
    successEndpoint.expectedMessageCount(1);
    Map<String,Object> pointMap=createMapPoint();
    sendBody("direct:test",pointMap);
    errorEndpoint.assertIsSatisfied();
    successEndpoint.assertIsSatisfied();
  }
  private Map<String,Object> createMapPoint(){
    Map<String,Object> pointMap=new HashMap<>();
    pointMap.put(InfluxDbConstants.MEASUREMENT_NAME,"MyTestMeasurement");
    pointMap.put("CPU",1);
    return pointMap;
  }
}
