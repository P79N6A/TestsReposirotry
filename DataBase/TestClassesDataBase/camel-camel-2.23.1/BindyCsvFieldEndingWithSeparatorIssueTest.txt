/** 
 * The parsing issue when field ends with separator is fixed by updating BindyCvsDataFormat.unquoteTokens(..)<br> See capture.png<br> The suggested update does fix only the separator at the end of field. !!! The separator in the beginning of the quoted field is still not handled.
 */
public class BindyCsvFieldEndingWithSeparatorIssueTest extends CamelTestSupport {
  @Test public void testBindy() throws Exception {
    CamelContext ctx=new DefaultCamelContext();
    ctx.addRoutes(createRoute());
    ctx.start();
    String addressLine1="8506 SIX FORKS ROAD,";
    MockEndpoint mock=ctx.getEndpoint("mock:result",MockEndpoint.class);
    mock.expectedPropertyReceived("addressLine1",addressLine1);
    String csvLine="\"PROBLEM SOLVER\",\"" + addressLine1 + "\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\"";
    ProducerTemplate template=ctx.createProducerTemplate();
    template.sendBody("direct:fromCsv",csvLine.trim());
    mock.assertIsSatisfied();
  }
  @Test public void testBindyMoreSeparators() throws Exception {
    CamelContext ctx=new DefaultCamelContext();
    ctx.addRoutes(createRoute());
    ctx.start();
    String addressLine1="8506 SIX FORKS ROAD, , ,,, ,";
    MockEndpoint mock=ctx.getEndpoint("mock:result",MockEndpoint.class);
    mock.expectedPropertyReceived("addressLine1",addressLine1);
    String csvLine="\"PROBLEM SOLVER\",\"" + addressLine1 + "\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\"";
    ProducerTemplate template=ctx.createProducerTemplate();
    template.sendBody("direct:fromCsv",csvLine.trim());
    mock.assertIsSatisfied();
  }
  @Test @Ignore("This issue will be revisit when we have chance to rewrite bindy parser") public void testBindySeparatorsAround() throws Exception {
    CamelContext ctx=new DefaultCamelContext();
    ctx.addRoutes(createRoute());
    ctx.start();
    String addressLine1=",8506 SIX FORKS ROAD,";
    MockEndpoint mock=ctx.getEndpoint("mock:result",MockEndpoint.class);
    mock.expectedPropertyReceived("addressLine1",addressLine1);
    String csvLine="\"PROBLEM SOLVER\",\"" + addressLine1 + "\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\"";
    ProducerTemplate template=ctx.createProducerTemplate();
    template.sendBody("direct:fromCsv",csvLine.trim());
    mock.assertIsSatisfied();
  }
  private RouteBuilder createRoute(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:fromCsv").unmarshal().bindy(BindyType.Csv,MyCsvRecord.class).setProperty("addressLine1",simple("${in.body.addressLine1}")).setProperty("addressLine2",simple("${in.body.addressLine2}")).log("${in.body}").to("mock:result");
      }
    }
;
  }
}
