/** 
 */
public class SftpProducerMoveExistingTest extends SftpServerTestSupport {
  private String getFtpUrl(){
    return "sftp://admin@localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "/move?password=admin&fileExist=Move";
  }
  @Test public void testExistingFileDoesNotExists() throws Exception {
    if (!canTest()) {
      return;
    }
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists(FTP_ROOT_DIR + "/move/hello.txt");
    assertFileNotExists(FTP_ROOT_DIR + "/move/renamed-hello.txt");
  }
  @Test public void testExistingFileExists() throws Exception {
    if (!canTest()) {
      return;
    }
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists(FTP_ROOT_DIR + "/move/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/hello.txt")));
    assertFileExists(FTP_ROOT_DIR + "/move/renamed-hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/renamed-hello.txt")));
  }
  @Test public void testExistingFileExistsMoveSubDir() throws Exception {
    if (!canTest()) {
      return;
    }
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=backup","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=backup","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists(FTP_ROOT_DIR + "/move/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/hello.txt")));
    assertFileExists(FTP_ROOT_DIR + "/move/backup/hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/backup/hello.txt")));
  }
  @Test public void testFailOnMoveExistingFileExistsEagerDeleteTrue() throws Exception {
    if (!canTest()) {
      return;
    }
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=true","Old file",Exchange.FILE_NAME,"renamed-hello.txt");
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=true","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=true","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists(FTP_ROOT_DIR + "/move/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/hello.txt")));
    assertFileExists(FTP_ROOT_DIR + "/move/renamed-hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/renamed-hello.txt")));
  }
  @Test public void testFailOnMoveExistingFileExistsEagerDeleteFalse() throws Exception {
    if (!canTest()) {
      return;
    }
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=true","Old file",Exchange.FILE_NAME,"renamed-hello.txt");
    template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=false","Hello World",Exchange.FILE_NAME,"hello.txt");
    try {
      template.sendBodyAndHeader(getFtpUrl() + "&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=false","Bye World",Exchange.FILE_NAME,"hello.txt");
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      GenericFileOperationFailedException cause=assertIsInstanceOf(GenericFileOperationFailedException.class,e.getCause());
      assertTrue(cause.getMessage().startsWith("Cannot move existing file"));
    }
    assertFileExists(FTP_ROOT_DIR + "/move/hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/hello.txt")));
    assertFileExists(FTP_ROOT_DIR + "/move/renamed-hello.txt");
    assertEquals("Old file",context.getTypeConverter().convertTo(String.class,new File(FTP_ROOT_DIR + "/move/renamed-hello.txt")));
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
