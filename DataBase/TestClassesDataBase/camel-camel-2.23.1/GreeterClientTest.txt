@ContextConfiguration(locations={"camel-context.xml"}) public class GreeterClientTest extends AbstractJUnit4SpringContextTests {
  private static final java.net.URL WSDL_LOC;
static {
    java.net.URL tmp=null;
    try {
      tmp=GreeterClientTest.class.getClassLoader().getResource("wsdl/hello_world.wsdl");
    }
 catch (    final Exception e) {
      e.printStackTrace();
    }
    WSDL_LOC=tmp;
  }
  private static final QName SERVICE_QNAME=new QName("http://apache.org/hello_world_soap_http","SOAPService");
  private static final QName PORT_QNAME=new QName("http://apache.org/hello_world_soap_http","SoapOverHttp");
  @Autowired protected CamelContext camelContext;
  protected String sendMessageWithUsernameToken(  String username,  String password,  String message) throws Exception {
    final javax.xml.ws.Service svc=javax.xml.ws.Service.create(WSDL_LOC,SERVICE_QNAME);
    final Greeter greeter=svc.getPort(PORT_QNAME,Greeter.class);
    Client client=ClientProxy.getClient(greeter);
    Map<String,Object> props=new HashMap<>();
    props.put("action","UsernameToken");
    props.put("user",username);
    props.put("passwordType","PasswordText");
    WSS4JOutInterceptor wss4jOut=new WSS4JOutInterceptor(props);
    client.getOutInterceptors().add(wss4jOut);
    ((BindingProvider)greeter).getRequestContext().put("password",password);
    return greeter.greetMe(message);
  }
  @Test public void testServiceWithValidateUser() throws Exception {
    String response=sendMessageWithUsernameToken("jim","jimspassword","CXF");
    assertEquals(" Hello CXF",response);
    try {
      sendMessageWithUsernameToken("jim","foo","CXF");
      fail("should fail");
    }
 catch (    Exception ex) {
      String msg=ex.getMessage();
      assertTrue("Get a wrong type exception.",ex instanceof SOAPFaultException);
      assertTrue("Get a wrong exception message: " + msg,msg.startsWith("The security token could not be authenticated or authorized") || msg.startsWith("A security error was encountered when verifying the messag"));
    }
  }
  @Test public void testServiceWithNotAuthorizedUser() throws Exception {
    try {
      sendMessageWithUsernameToken("bob","bobspassword","CXF");
      fail("should fail");
    }
 catch (    Exception ex) {
      assertTrue("Get a wrong type exception.",ex instanceof SOAPFaultException);
      assertTrue("Get a wrong exception message",ex.getMessage().startsWith("Cannot access the processor which has been protected."));
      assertTrue("Get a wrong exception message",ex.getMessage().endsWith("Caused by: [org.springframework.security.access.AccessDeniedException - Access is denied]"));
    }
  }
}
