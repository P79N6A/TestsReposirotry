/** 
 * Demonstrates how you can use a custom id factory to assign ids to Camel Java routes and then attach your own debugger and be able to use the custom ids to know at what point you are debugging
 * @version 
 */
public class CustomIdFactoryTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(CustomIdFactoryTest.class);
  private static int counter;
  private static String ids;
  @Override @Before public void setUp() throws Exception {
    ids="";
    counter=0;
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setNodeIdFactory(new NodeIdFactory(){
          public String createId(          NamedNode definition){
            return "#" + definition.getShortName() + ++counter+ "#";
          }
        }
);
        context.addInterceptStrategy(new MyDebuggerCheckingId());
        from("direct:start").choice().when(body().contains("Hello")).to("mock:hello").otherwise().log("Hey").to("mock:other").end();
      }
    }
;
  }
  /** 
 * Test path 1
 */
  @Test public void testHello() throws Exception {
    assertEquals("#route1#",context.getRouteDefinitions().get(0).getId());
    getMockEndpoint("mock:hello").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals("#choice7##to2#",ids);
  }
  /** 
 * Test path 2
 */
  @Test public void testOther() throws Exception {
    assertEquals("#route1#",context.getRouteDefinitions().get(0).getId());
    getMockEndpoint("mock:other").expectedMessageCount(1);
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
    assertEquals("#choice7##log4##to6#",ids);
  }
private static class MyDebuggerCheckingId implements InterceptStrategy {
    public Processor wrapProcessorInInterceptors(    final CamelContext context,    final ProcessorDefinition<?> definition,    Processor target,    Processor nextTarget) throws Exception {
      definition.idOrCreate(context.getNodeIdFactory());
      return new DelegateProcessor(target){
        @Override protected void processNext(        Exchange exchange) throws Exception {
          LOG.debug("Debugging at: {} with id: {} with exchange: {}",definition,definition.getId(),exchange);
          ids+=definition.getId();
          super.processNext(exchange);
        }
      }
;
    }
  }
}
