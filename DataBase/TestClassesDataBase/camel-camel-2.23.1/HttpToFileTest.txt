/** 
 * Unit testing demonstrating how to store incoming requests as files and serving a response back.
 */
public class HttpToFileTest extends BaseJettyTest {
  @Test public void testToJettyAndSaveToFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    Object out=template.requestBody("http://localhost:{{port}}/myworld","Hello World");
    String response=context.getTypeConverter().convertTo(String.class,out);
    assertEquals("Response from Jetty","We got the file",response);
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    File file=new File("target/myworld/hello.txt");
    assertTrue("File should exists",file.exists());
    String content=IOConverter.toString(file,null);
    assertEquals("File content","Hello World",content);
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/myworld");
    super.setUp();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("jetty:http://localhost:{{port}}/myworld").convertBodyTo(String.class).to("seda:in").setBody(constant("We got the file"));
        from("seda:in").setHeader(Exchange.FILE_NAME,constant("hello.txt")).convertBodyTo(String.class).to("file://target/myworld/").to("mock:result");
      }
    }
;
  }
}
