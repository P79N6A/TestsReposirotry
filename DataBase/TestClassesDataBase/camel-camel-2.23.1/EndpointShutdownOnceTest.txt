/** 
 * Test that endpoints are only shutdown once when CamelContext is stopping.
 */
public class EndpointShutdownOnceTest extends Assert {
  @Test public void testEndpointShutdown() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addComponent("my",new MyComponent());
    context.start();
    MyEndpoint my=context.getEndpoint("my:foo",MyEndpoint.class);
    assertTrue("Should be started",my.getStatus().isStarted());
    context.stop();
    assertFalse("Should not be started",my.getStatus().isStarted());
    assertTrue("Should be stopped",my.getStatus().isStopped());
    assertEquals("Should only shutdown once",1,my.getInvoked());
  }
private static final class MyComponent extends DefaultComponent {
    protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new MyEndpoint(uri,this);
    }
  }
private static final class MyEndpoint extends DefaultEndpoint {
    private volatile int invoked;
    private MyEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    public int getInvoked(){
      return invoked;
    }
    public Producer createProducer() throws Exception {
      return null;
    }
    public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    public boolean isSingleton(){
      return true;
    }
    @Override protected void doShutdown() throws Exception {
      super.doShutdown();
      invoked++;
    }
  }
}
