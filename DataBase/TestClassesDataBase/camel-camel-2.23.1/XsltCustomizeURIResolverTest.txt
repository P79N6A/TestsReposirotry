/** 
 */
public class XsltCustomizeURIResolverTest extends ContextTestSupport {
  private static final String EXPECTED_XML_CONSTANT="<data>FOO DATA</data>";
  @Test public void testXsltCustomURIResolverDirectInRouteUri() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:resultURIResolverDirect");
    mock.expectedMessageCount(1);
    mock.message(0).body().contains(EXPECTED_XML_CONSTANT);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:src/test/data/?fileName=staff.xml&noop=true&initialDelay=0&delay=10").to("xslt:org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolver=#customURIResolver").to("mock:resultURIResolverDirect");
      }
    }
;
  }
  private URIResolver getCustomURIResolver(){
    return new URIResolver(){
      @Override public Source resolve(      String href,      String base) throws TransformerException {
        if (href.equals("org/apache/camel/component/xslt/include_not_existing_resource.xsl")) {
          try {
            InputStream is=ResourceHelper.resolveMandatoryResourceAsInputStream(context,href);
            return new StreamSource(is);
          }
 catch (          Exception e) {
            throw new TransformerException(e);
          }
        }
        Source constantResult=new StreamSource(new ByteArrayInputStream(EXPECTED_XML_CONSTANT.getBytes()));
        return constantResult;
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    URIResolver customURIResolver=getCustomURIResolver();
    registry.bind("customURIResolver",customURIResolver);
    return registry;
  }
}
