/** 
 * Unit test for delimited DataFormat.
 */
public class FlatpackDelimitedDataFormatTest extends CamelTestSupport {
  @Test public void testUnmarshal() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:unmarshal");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(DataSetList.class);
    String data=IOConverter.toString(new File("src/test/data/delim/INVENTORY-CommaDelimitedWithQualifier.txt"),null);
    template.sendBody("direct:unmarshal",data);
    assertMockEndpointsSatisfied();
    DataSetList list=mock.getExchanges().get(0).getIn().getBody(DataSetList.class);
    assertEquals(4,list.size());
    Map<?,?> row=list.get(0);
    assertEquals("SOME VALVE",row.get("ITEM_DESC"));
  }
  @Test public void testMarshalWithDefinition() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:marshal");
    mock.expectedMessageCount(1);
    List<Map<String,Object>> data=new ArrayList<>();
    Map<String,Object> row=new LinkedHashMap<>();
    row.put("ITEM_DESC","SOME VALVE");
    row.put("IN_STOCK","2");
    row.put("PRICE","5.00");
    row.put("LAST_RECV_DT","20050101");
    data.add(row);
    Map<String,Object> row2=new LinkedHashMap<>();
    row2.put("ITEM_DESC","AN ENGINE");
    row2.put("IN_STOCK","100");
    row2.put("PRICE","1000.00");
    row2.put("LAST_RECV_DT","20040601");
    data.add(row2);
    template.sendBody("direct:marshal",data);
    assertMockEndpointsSatisfied();
  }
  @Test public void testMarshalNoDefinition() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:marshal2");
    mock.expectedMessageCount(1);
    List<Map<String,Object>> data=new ArrayList<>();
    Map<String,Object> row=new LinkedHashMap<>();
    row.put("ITEM_DESC","SOME VALVE");
    row.put("IN_STOCK","2");
    row.put("PRICE","5.00");
    row.put("LAST_RECV_DT","20050101");
    data.add(row);
    Map<String,Object> row2=new LinkedHashMap<>();
    row2.put("ITEM_DESC","AN ENGINE");
    row2.put("IN_STOCK","100");
    row2.put("PRICE","1000.00");
    row2.put("LAST_RECV_DT","20040601");
    data.add(row2);
    template.sendBody("direct:marshal2",data);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        FlatpackDataFormat df=new FlatpackDataFormat();
        df.setDefinition("INVENTORY-Delimited.pzmap.xml");
        from("direct:unmarshal").unmarshal(df).to("mock:unmarshal");
        from("direct:marshal").marshal(df).convertBodyTo(String.class).to("mock:marshal");
        FlatpackDataFormat df2=new FlatpackDataFormat();
        from("direct:marshal2").marshal(df2).convertBodyTo(String.class).to("mock:marshal2");
      }
    }
;
  }
}
