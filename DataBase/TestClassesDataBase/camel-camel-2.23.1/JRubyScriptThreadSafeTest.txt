public class JRubyScriptThreadSafeTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") MockEndpoint resultEndpoint;
  @EndpointInject(uri="mock:error") MockEndpoint errorEndpoint;
  final int messageCount=200;
  final CountDownLatch latch=new CountDownLatch(messageCount);
  long start;
  @Before public void setUp() throws Exception {
    setUpEnv();
    super.setUp();
  }
  protected void setUpEnv(){
    System.setProperty("org.jruby.embed.localcontext.scope","threadsafe");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getGlobalOptions().put(Exchange.REUSE_SCRIPT_ENGINE,"true");
        context.getGlobalOptions().put(Exchange.COMPILE_SCRIPT,"false");
        from("seda:parallel?concurrentConsumers=5").onException(Exception.class).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Throwable ex=exchange.getProperty("CamelExceptionCaught",Throwable.class);
            System.out.println(ex);
            ex.printStackTrace();
            latch.countDown();
          }
        }
).to(errorEndpoint).end().to("language:ruby:result = $request.body?cacheScript=true").to(resultEndpoint).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            latch.countDown();
          }
        }
);
        from("seda:sequential?concurrentConsumers=1").onException(Exception.class).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            latch.countDown();
          }
        }
).to(errorEndpoint).end().to("language:ruby:result = $request.body?cacheScript=true").to(resultEndpoint).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            latch.countDown();
          }
        }
);
      }
    }
;
  }
  @Test public void testParallelLocalContext() throws Exception {
    resultEndpoint.setExpectedMessageCount(messageCount);
    startStopWatch();
    for (int i=1; i < messageCount + 1; i++) {
      template.sendBody("seda:parallel","BODY" + i);
    }
    latch.await();
    stopStopWatch();
    assertMockEndpointsSatisfied(2,TimeUnit.SECONDS);
    checkResult();
  }
  @Test public void testSequentialLocalContext() throws Exception {
    resultEndpoint.setExpectedMessageCount(messageCount);
    startStopWatch();
    for (int i=1; i < messageCount + 1; i++) {
      template.sendBody("seda:sequential","BODY" + i);
    }
    latch.await();
    stopStopWatch();
    assertMockEndpointsSatisfied(2,TimeUnit.SECONDS);
    checkResult();
  }
  private void checkResult(){
    Set<String> bodies=new HashSet<>();
    for (    Exchange exchange : resultEndpoint.getReceivedExchanges()) {
      bodies.add(exchange.getIn().getBody(String.class));
    }
    Assert.assertEquals("duplicate bodies:",messageCount,bodies.size());
  }
  private void startStopWatch(){
    start=System.currentTimeMillis();
  }
  private void stopStopWatch(){
    System.out.println(this.getTestMethodName() + " processing time: " + (System.currentTimeMillis() - start)+ "ms.");
  }
}
