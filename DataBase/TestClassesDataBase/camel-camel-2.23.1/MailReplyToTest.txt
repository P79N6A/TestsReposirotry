/** 
 * Unit test for Mail replyTo support.
 */
public class MailReplyToTest extends CamelTestSupport {
  @Test public void testMailReplyTo() throws Exception {
    Mailbox.clearAll();
    String body="The Camel riders";
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("Reply-To","noReply1@localhost,noReply2@localhost");
    mock.expectedBodiesReceived(body);
    template.sendBodyAndHeader("direct:a",body,"Reply-To","noReply1@localhost,noReply2@localhost");
    mock.assertIsSatisfied();
    Mailbox mailbox=Mailbox.get("christian@localhost");
    assertEquals(1,mailbox.size());
    assertEquals("noReply1@localhost",((InternetAddress)mailbox.get(0).getReplyTo()[0]).getAddress());
    assertEquals("noReply2@localhost",((InternetAddress)mailbox.get(0).getReplyTo()[1]).getAddress());
    assertEquals(body,mailbox.get(0).getContent());
  }
  @Test public void testMailReplyTo2() throws Exception {
    Mailbox.clearAll();
    String body="The Camel riders";
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("Reply-To","noReply1@localhost, noReply2@localhost");
    mock.expectedBodiesReceived(body);
    template.sendBody("direct:b",body);
    mock.assertIsSatisfied();
    Mailbox mailbox=Mailbox.get("christian@localhost");
    assertEquals(1,mailbox.size());
    assertEquals("noReply1@localhost",((InternetAddress)mailbox.get(0).getReplyTo()[0]).getAddress());
    assertEquals("noReply2@localhost",((InternetAddress)mailbox.get(0).getReplyTo()[1]).getAddress());
    assertEquals(body,mailbox.get(0).getContent());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:a").to("smtp://christian@localhost?subject=Camel");
        from("direct:b").to("smtp://christian@localhost?subject=Camel&replyTo=noReply1@localhost,noReply2@localhost");
        from("pop3://localhost?username=christian&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result");
      }
    }
;
  }
}
