public class JettyWithXPathChoiceTest extends BaseJettyTest {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Test public void testSendToFirstWhen() throws Exception {
    String body="<one/>";
    expectsMessageCount(0,y,z);
    sendBody(body);
    assertMockEndpointsSatisfied();
    x.reset();
    y.reset();
    z.reset();
    body="<two/>";
    expectsMessageCount(0,x,z);
    sendBody(body);
    assertMockEndpointsSatisfied();
  }
  private void sendBody(  String body){
    template.sendBody("http://localhost:{{port}}/myworld",body);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("jetty:http://localhost:{{port}}/myworld").streamCaching().choice().when().xpath("/one").to("mock:x").when().xpath("/two").to("mock:y").otherwise().to("mock:z").end();
      }
    }
;
  }
}
