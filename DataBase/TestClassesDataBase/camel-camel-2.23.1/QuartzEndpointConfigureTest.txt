/** 
 * @version 
 */
public class QuartzEndpointConfigureTest extends BaseQuartzTest {
  @Test public void testConfigureGroupAndName() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz://myGroup/myName?trigger.repeatCount=3");
    Trigger trigger=endpoint.getTrigger();
    assertEquals("getName()","myName",trigger.getName());
    assertEquals("getGroup()","myGroup",trigger.getGroup());
    assertEquals("getJobName","quartz-" + endpoint.getId(),endpoint.getJobName());
    SimpleTrigger simpleTrigger=assertIsInstanceOf(SimpleTrigger.class,trigger);
    assertEquals("getRepeatCount()",3,simpleTrigger.getRepeatCount());
  }
  @Test public void testConfigureName() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz://myName");
    Trigger trigger=endpoint.getTrigger();
    assertEquals("getName()","myName",trigger.getName());
    assertEquals("getGroup()","Camel",trigger.getGroup());
    assertEquals("getJobName","quartz-" + endpoint.getId(),endpoint.getJobName());
  }
  @Test public void testConfigureCronExpression() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz://myGroup/myTimerName?cron=0+0/5+12-18+?+*+MON-FRI");
    CronTrigger trigger=assertIsInstanceOf(CronTrigger.class,endpoint.getTrigger());
    assertEquals("getName()","myTimerName",trigger.getName());
    assertEquals("getGroup()","myGroup",trigger.getGroup());
    assertEquals("cron expression","0 0/5 12-18 ? * MON-FRI",trigger.getCronExpression());
    assertEquals("getJobName","quartz-" + endpoint.getId(),endpoint.getJobName());
  }
  @Test public void testConfigureAnotherCronExpression() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz://myGroup/myTimerName?cron=0+0+*+*+*+?");
    CronTrigger trigger=assertIsInstanceOf(CronTrigger.class,endpoint.getTrigger());
    assertEquals("getName()","myTimerName",trigger.getName());
    assertEquals("getGroup()","myGroup",trigger.getGroup());
    assertEquals("cron expression","0 0 * * * ?",trigger.getCronExpression());
    assertEquals("getJobName","quartz-" + endpoint.getId(),endpoint.getJobName());
  }
  @Test public void testConfigureJobName() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz://myGroup/myTimerName?job.name=hadrian&cron=0+0+*+*+*+?");
    CronTrigger trigger=assertIsInstanceOf(CronTrigger.class,endpoint.getTrigger());
    assertEquals("getName()","myTimerName",trigger.getName());
    assertEquals("getGroup()","myGroup",trigger.getGroup());
    assertEquals("cron expression","0 0 * * * ?",trigger.getCronExpression());
    assertEquals("getJobName","hadrian",endpoint.getJobName());
  }
  @Test public void testConfigureNoDoubleSlashNoCron() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz:myGroup/myTimerName");
    Trigger trigger=endpoint.getTrigger();
    assertEquals("getName()","myTimerName",trigger.getName());
    assertEquals("getGroup()","myGroup",trigger.getGroup());
  }
  @Test public void testConfigureNoDoubleSlashQuestionCron() throws Exception {
    QuartzEndpoint endpoint=resolveMandatoryEndpoint("quartz:myGroup/myTimerName?cron=0+0+*+*+*+?");
    CronTrigger trigger=assertIsInstanceOf(CronTrigger.class,endpoint.getTrigger());
    assertEquals("getName()","myTimerName",trigger.getName());
    assertEquals("getGroup()","myGroup",trigger.getGroup());
    assertEquals("cron expression","0 0 * * * ?",trigger.getCronExpression());
  }
  @Override protected QuartzEndpoint resolveMandatoryEndpoint(  String uri){
    Endpoint endpoint=super.resolveMandatoryEndpoint(uri);
    return assertIsInstanceOf(QuartzEndpoint.class,endpoint);
  }
}
