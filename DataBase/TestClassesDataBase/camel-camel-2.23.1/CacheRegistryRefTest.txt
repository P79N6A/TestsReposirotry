public class CacheRegistryRefTest extends BaseCacheTest {
  private static final String CACHE_ENDPOINT_URI="cache://foo" + "?eventListenerRegistry=#eventListenerRegistry&cacheLoaderRegistry=#cacheLoaderRegistry";
  @EndpointInject(uri=CACHE_ENDPOINT_URI) protected CacheEndpoint cacheEndpoint;
  @Produce(uri="direct:start") protected ProducerTemplate producerTemplate;
  private CacheEventListenerRegistry eventListenerRegistry=new CacheEventListenerRegistry();
  private CacheLoaderRegistry loaderRegistry=new CacheLoaderRegistry();
  @Override @Before public void setUp() throws Exception {
    eventListenerRegistry.addCacheEventListener(new TestCacheEventListener());
    loaderRegistry.addCacheLoader(new TestLoader());
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("eventListenerRegistry",eventListenerRegistry);
    jndi.bind("cacheLoaderRegistry",loaderRegistry);
    return jndi;
  }
  @Override public RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to(CACHE_ENDPOINT_URI);
      }
    }
;
  }
  @Test public void testConfig() throws Exception {
    producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty(Exchange.CHARSET_NAME,"UTF-8");
        Message in=exchange.getIn();
        in.setHeader(CacheConstants.CACHE_OPERATION,CacheConstants.CACHE_OPERATION_ADD);
        in.setHeader(CacheConstants.CACHE_KEY,"greeting");
        in.setBody("Hello World");
      }
    }
);
    CacheManager cm=cacheEndpoint.getCacheManagerFactory().getInstance();
    Cache cache=cm.getCache(cacheEndpoint.getConfig().getCacheName());
    Set<CacheEventListener> ehcacheEventListners=cache.getCacheEventNotificationService().getCacheEventListeners();
    List<CacheLoader> cacheLoaders=cache.getRegisteredCacheLoaders();
    CacheEventListenerRegistry configuredEventRegistry=cacheEndpoint.getConfig().getEventListenerRegistry();
    CacheLoaderRegistry configuredLoaderRegistry=cacheEndpoint.getConfig().getCacheLoaderRegistry();
    assertEquals("CacheEventListenerRegistry size",1,configuredEventRegistry.size());
    assertEquals("configuredLoaderRegistry size",1,configuredLoaderRegistry.size());
    assertEquals("Number of registered listeners",1,ehcacheEventListners.size());
    assertEquals("Number of registered loaders",1,cacheLoaders.size());
    int puts=0;
    for (    Object listener : ehcacheEventListners) {
      if (listener instanceof TestCacheEventListener) {
        puts=((TestCacheEventListener)listener).getNumberOfPuts();
        break;
      }
    }
    assertEquals("TestCacheEventListener put invocations",1,puts);
    assertEquals("loader initialized",cacheLoaders.get(0).getStatus(),Status.STATUS_ALIVE);
  }
public static class TestingCacheManagerFactory extends CacheManagerFactory {
    @Override protected CacheManager createCacheManagerInstance(){
      return CacheManager.create(getClass().getResourceAsStream("/ehcache.xml"));
    }
  }
public static class TestLoader implements CacheLoaderWrapper {
    protected Ehcache cache;
    private Status status;
    public TestLoader(){
      status=Status.STATUS_UNINITIALISED;
    }
    @Override public CacheLoader clone(    Ehcache arg0) throws CloneNotSupportedException {
      return null;
    }
    @Override public void dispose() throws CacheException {
      status=Status.STATUS_SHUTDOWN;
    }
    @Override public String getName(){
      return "Testing cache loader";
    }
    @Override public Status getStatus(){
      return status;
    }
    @Override public void init(){
      status=Status.STATUS_ALIVE;
    }
    @Override public Object load(    Object arg0) throws CacheException {
      return null;
    }
    @Override public Object load(    Object arg0,    Object arg1){
      return null;
    }
    @Override @SuppressWarnings("rawtypes") public Map loadAll(    Collection arg0){
      return null;
    }
    @Override @SuppressWarnings("rawtypes") public Map loadAll(    Collection arg0,    Object arg1){
      return null;
    }
    @Override public void init(    Ehcache cache){
      this.cache=cache;
    }
  }
public static class TestCacheEventListener implements CacheEventListener {
    private int numberOfPuts;
    @Override public void dispose(){
    }
    @Override public void notifyElementEvicted(    Ehcache arg0,    Element arg1){
    }
    @Override public void notifyElementExpired(    Ehcache arg0,    Element arg1){
    }
    @Override public void notifyElementPut(    Ehcache arg0,    Element arg1) throws CacheException {
      numberOfPuts++;
    }
    @Override public void notifyElementRemoved(    Ehcache arg0,    Element arg1) throws CacheException {
    }
    @Override public void notifyElementUpdated(    Ehcache arg0,    Element arg1) throws CacheException {
    }
    @Override public void notifyRemoveAll(    Ehcache arg0){
    }
    @Override public TestCacheEventListener clone(){
      return this.clone();
    }
    public int getNumberOfPuts(){
      return numberOfPuts;
    }
  }
}
