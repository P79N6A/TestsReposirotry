public class NettyHttpGetWithInvalidMessageTest extends CamelTestSupport {
  private static final String REQUEST_STRING="user: Willem\n" + "GET http://localhost:8101/test HTTP/1.1\n" + "another: value\n Host: localhost\n";
  private int port1;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    StringDecoder stringDecoder=new StringDecoder();
    registry.bind("string-decoder",stringDecoder);
    StringEncoder stringEncoder=new StringEncoder();
    registry.bind("string-encoder",stringEncoder);
    List<ChannelHandler> decoders=new ArrayList<>();
    decoders.add(stringDecoder);
    List<ChannelHandler> encoders=new ArrayList<>();
    encoders.add(stringEncoder);
    registry.bind("encoders",encoders);
    registry.bind("decoders",decoders);
    return registry;
  }
  @Test public void testNettyHttpServer() throws Exception {
    invokeService(8100);
  }
  public void testJettyHttpServer() throws Exception {
    invokeService(port1);
  }
  private void invokeService(  int port){
    Exchange out=template.request("netty4:tcp://localhost:" + port + "?encoders=#encoders&decoders=#decoders&sync=true",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(REQUEST_STRING);
      }
    }
);
    assertNotNull(out);
    String result=out.getOut().getBody(String.class);
    assertNotNull(result);
    assertTrue("We should get the 404 response.",result.indexOf("404 Not Found") > 0);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        port1=AvailablePortFinder.getNextAvailable(8100);
        from("netty4-http:http://localhost:" + port1 + "/test").transform().simple("Bye ${header.user}.");
      }
    }
;
  }
}
