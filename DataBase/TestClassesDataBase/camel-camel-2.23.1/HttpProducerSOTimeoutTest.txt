/** 
 * Unit test for using http client SO timeout
 * @version 
 */
public class HttpProducerSOTimeoutTest extends BaseJettyTest {
  @Test public void testSendWithSOTimeoutNoTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    String out=template.requestBody("http://localhost:{{port}}/myservice?httpClient.soTimeout=5000",null,String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendWithSOTimeoutTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    try {
      template.requestBody("http://localhost:{{port}}/myservice?httpClient.soTimeout=1000",null,String.class);
      fail("Should throw an exception");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(SocketTimeoutException.class,e.getCause());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jetty://http://localhost:{{port}}/myservice").delay(2000).transform().constant("Bye World").to("mock:result");
      }
    }
;
  }
}
