@RunWith(MockitoJUnitRunner.class) public class KeypairProducerTest extends NovaProducerTestSupport {
  private static final String KEYPAIR_NAME="keypairName";
  @Mock private Keypair osTestKeypair;
  private Keypair dummyKeypair;
  @Mock private KeypairService keypairService;
  @Captor private ArgumentCaptor<String> nameCaptor;
  @Captor private ArgumentCaptor<String> keypairCaptor;
  @Before public void setUp(){
    when(computeService.keypairs()).thenReturn(keypairService);
    producer=new KeypairProducer(endpoint,client);
    dummyKeypair=createDummyKeypair();
    when(keypairService.create(anyString(),anyString())).thenReturn(osTestKeypair);
    when(keypairService.create(anyString(),isNull())).thenReturn(osTestKeypair);
    List<org.openstack4j.model.compute.Keypair> getAllList=new ArrayList<>();
    getAllList.add(osTestKeypair);
    getAllList.add(osTestKeypair);
    when(osTestKeypair.getName()).thenReturn(dummyKeypair.getName());
    when(osTestKeypair.getPublicKey()).thenReturn(dummyKeypair.getPublicKey());
  }
  @Test public void createKeypair() throws Exception {
    final String fingerPrint="fp";
    final String privatecKey="prk";
    when(osTestKeypair.getName()).thenReturn(KEYPAIR_NAME);
    when(osTestKeypair.getPublicKey()).thenReturn(dummyKeypair.getPublicKey());
    when(osTestKeypair.getFingerprint()).thenReturn(fingerPrint);
    when(osTestKeypair.getPrivateKey()).thenReturn(privatecKey);
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(OpenstackConstants.NAME,KEYPAIR_NAME);
    producer.process(exchange);
    verify(keypairService).create(nameCaptor.capture(),keypairCaptor.capture());
    assertEquals(KEYPAIR_NAME,nameCaptor.getValue());
    assertNull(keypairCaptor.getValue());
    Keypair result=msg.getBody(Keypair.class);
    assertEquals(fingerPrint,result.getFingerprint());
    assertEquals(privatecKey,result.getPrivateKey());
    assertEquals(dummyKeypair.getName(),result.getName());
    assertEquals(dummyKeypair.getPublicKey(),result.getPublicKey());
  }
  @Test public void createKeypairFromExisting() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(OpenstackConstants.NAME,KEYPAIR_NAME);
    String key="existing public key string";
    when(osTestKeypair.getPublicKey()).thenReturn(key);
    msg.setBody(key);
    producer.process(exchange);
    verify(keypairService).create(nameCaptor.capture(),keypairCaptor.capture());
    assertEquals(KEYPAIR_NAME,nameCaptor.getValue());
    assertEquals(key,keypairCaptor.getValue());
    Keypair result=msg.getBody(Keypair.class);
    assertEquals(dummyKeypair.getName(),result.getName());
    assertEquals(dummyKeypair.getFingerprint(),result.getFingerprint());
    assertEquals(dummyKeypair.getPrivateKey(),result.getPrivateKey());
    assertEquals(key,result.getPublicKey());
  }
  private Keypair createDummyKeypair(){
    return NovaKeypair.create(KEYPAIR_NAME,"string contains private key");
  }
}
