public class GuavaEventBusConsumerTest extends CamelTestSupport {
  EventBus eventBus=new EventBus();
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("guava-eventbus:eventBus").to("mock:allEvents");
        from("guava-eventbus:eventBus").to("mock:multipliedConsumer");
        from("guava-eventbus:eventBus?eventClass=org.apache.camel.component.guava.eventbus.MessageWrapper").to("mock:wrapperEvents");
        from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomListener").to("mock:customListenerEvents");
        from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomMultiEventListener").to("mock:customMultiEventListenerEvents");
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("eventBus",eventBus);
    return registry;
  }
  @Test public void shouldForwardMessageToCamel() throws InterruptedException {
    String message="message";
    eventBus.post(message);
    getMockEndpoint("mock:allEvents").setExpectedMessageCount(1);
    assertMockEndpointsSatisfied();
    assertEquals(message,getMockEndpoint("mock:allEvents").getExchanges().get(0).getIn().getBody());
  }
  @Test public void shouldForwardMessageToMultipleConsumers() throws InterruptedException {
    String message="message";
    eventBus.post(message);
    getMockEndpoint("mock:allEvents").setExpectedMessageCount(1);
    getMockEndpoint("mock:multipliedConsumer").setExpectedMessageCount(1);
    assertMockEndpointsSatisfied();
    assertEquals(message,getMockEndpoint("mock:allEvents").getExchanges().get(0).getIn().getBody());
    assertEquals(message,getMockEndpoint("mock:multipliedConsumer").getExchanges().get(0).getIn().getBody());
  }
  @Test public void shouldFilterForwardedMessages() throws InterruptedException {
    MessageWrapper wrappedMessage=new MessageWrapper("message");
    eventBus.post(wrappedMessage);
    eventBus.post("String message.");
    getMockEndpoint("mock:wrapperEvents").setExpectedMessageCount(1);
    assertMockEndpointsSatisfied();
    assertEquals(wrappedMessage,getMockEndpoint("mock:wrapperEvents").getExchanges().get(0).getIn().getBody());
  }
  @Test public void shouldUseCustomListener() throws InterruptedException {
    MessageWrapper wrappedMessage=new MessageWrapper("message");
    eventBus.post(wrappedMessage);
    eventBus.post("String message.");
    getMockEndpoint("mock:customListenerEvents").setExpectedMessageCount(1);
    assertMockEndpointsSatisfied();
    assertEquals(wrappedMessage,getMockEndpoint("mock:customListenerEvents").getExchanges().get(0).getIn().getBody());
  }
  @Test public void shouldSupportMultiEventCustomListener() throws InterruptedException {
    String stringEvent="stringEvent";
    Date dateEvent=new Date();
    eventBus.post(stringEvent);
    eventBus.post(dateEvent);
    getMockEndpoint("mock:customMultiEventListenerEvents").setExpectedMessageCount(2);
    assertMockEndpointsSatisfied();
    assertEquals(stringEvent,getMockEndpoint("mock:customMultiEventListenerEvents").getExchanges().get(0).getIn().getBody());
    assertEquals(dateEvent,getMockEndpoint("mock:customMultiEventListenerEvents").getExchanges().get(1).getIn().getBody());
  }
}
