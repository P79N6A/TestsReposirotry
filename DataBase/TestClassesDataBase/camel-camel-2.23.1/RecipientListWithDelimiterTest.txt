/** 
 * @version 
 */
public class RecipientListWithDelimiterTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testRecipientList() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").recipientList(header("myHeader"),"#");
      }
    }
);
    context.start();
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived("answer");
    y.expectedBodiesReceived("answer");
    z.expectedBodiesReceived("answer");
    sendBody();
    assertMockEndpointsSatisfied();
  }
  @Test public void testRecipientListWithDelimiterDisabled() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").recipientList(header("myHeader"),"false");
      }
    }
);
    context.start();
    MockEndpoint xyz=getMockEndpoint("mock:falseDelimiterTest");
    xyz.expectedBodiesReceived("answer");
    template.sendBodyAndHeader("direct:a","answer","myHeader","mock:falseDelimiterTest");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRecipientListWithTokenizer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").recipientList(header("myHeader").tokenize("#"));
      }
    }
);
    context.start();
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived("answer");
    y.expectedBodiesReceived("answer");
    z.expectedBodiesReceived("answer");
    sendBody();
    assertMockEndpointsSatisfied();
  }
  protected void sendBody(){
    template.sendBodyAndHeader("direct:a","answer","myHeader","mock:x#mock:y#mock:z");
  }
}
