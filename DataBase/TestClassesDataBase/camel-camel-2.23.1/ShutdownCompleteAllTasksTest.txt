/** 
 * @version 
 */
public class ShutdownCompleteAllTasksTest extends ContextTestSupport {
  private static String url="file:target/pending?initialDelay=0&delay=10";
  private static AtomicInteger counter=new AtomicInteger();
  private static CountDownLatch latch=new CountDownLatch(2);
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/pending");
    super.setUp();
    template.sendBodyAndHeader(url,"A",Exchange.FILE_NAME,"a.txt");
    template.sendBodyAndHeader(url,"B",Exchange.FILE_NAME,"b.txt");
    template.sendBodyAndHeader(url,"C",Exchange.FILE_NAME,"c.txt");
    template.sendBodyAndHeader(url,"D",Exchange.FILE_NAME,"d.txt");
    template.sendBodyAndHeader(url,"E",Exchange.FILE_NAME,"e.txt");
  }
  @Test public void testShutdownCompleteAllTasks() throws Exception {
    context.getShutdownStrategy().setTimeout(30);
    context.startRoute("foo");
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMinimumMessageCount(1);
    assertMockEndpointsSatisfied();
    int batch=bar.getReceivedExchanges().get(0).getProperty(Exchange.BATCH_SIZE,int.class);
    latch.await(10,TimeUnit.SECONDS);
    context.stop();
    assertEquals("Should complete all messages",batch,counter.get());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(url).routeId("foo").noAutoStartup().shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).process(new MyProcessor()).to("mock:bar");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      counter.incrementAndGet();
      latch.countDown();
    }
  }
}
