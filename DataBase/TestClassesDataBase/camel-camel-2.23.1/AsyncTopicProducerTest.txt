/** 
 * @version 
 */
public class AsyncTopicProducerTest extends CamelTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  private static String sedaThreadName;
  private static String route="";
  @Test public void testAsyncTopicProducer() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    template.sendBody("direct:start","Hello Camel");
    route+="A";
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(sedaThreadName));
    assertFalse("Should use different threads",afterThreadName.equalsIgnoreCase(sedaThreadName));
    assertEquals("AB",route);
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false");
    SjmsComponent component=new SjmsComponent();
    component.setConnectionFactory(connectionFactory);
    camelContext.addComponent("sjms",component);
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("sjms:topic:foo?synchronous=false");
        from("sjms:topic:foo").to("mock:after").to("log:after").delay(1000).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            route+="B";
            sedaThreadName=Thread.currentThread().getName();
          }
        }
).to("mock:result");
      }
    }
;
  }
}
