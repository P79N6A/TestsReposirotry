/** 
 * Unit test to test exception configuration
 */
public class ExceptionBuilderWithHandledExceptionTest extends ContextTestSupport {
  private static final String MESSAGE_INFO="messageInfo";
  private static final String RESULT_QUEUE="mock:result";
  private static final String ERROR_QUEUE="mock:error";
  @Test public void testHandledException() throws Exception {
    MockEndpoint result=getMockEndpoint(RESULT_QUEUE);
    result.expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint(ERROR_QUEUE);
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(MESSAGE_INFO,"Handled exchange with NullPointerException");
    template.sendBody("direct:a","Hello NPE");
    MockEndpoint.assertIsSatisfied(result,mock);
  }
  @Test public void testHandledExceptionWithExpression() throws Exception {
    MockEndpoint result=getMockEndpoint(RESULT_QUEUE);
    result.expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint(ERROR_QUEUE);
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(MESSAGE_INFO,"Handled exchange with IOException");
    template.sendBodyAndHeader("direct:a","Hello IOE","foo","bar");
    MockEndpoint.assertIsSatisfied(result,mock);
  }
  @Test public void testUnhandledException() throws Exception {
    MockEndpoint result=getMockEndpoint(RESULT_QUEUE);
    result.expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint(ERROR_QUEUE);
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(MESSAGE_INFO,"Handled exchange with IOException");
    try {
      template.sendBodyAndHeader("direct:a","Hello IOE","foo","something that does not match");
      fail("Should have thrown a IOException");
    }
 catch (    RuntimeCamelException e) {
      assertTrue(e.getCause() instanceof IOException);
    }
    MockEndpoint.assertIsSatisfied(result,mock);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
        onException(NullPointerException.class).maximumRedeliveries(0).handled(true).setHeader(MESSAGE_INFO,constant("Handled exchange with NullPointerException")).to(ERROR_QUEUE);
        onException(IOException.class).maximumRedeliveries(0).handled(header("foo").isEqualTo("bar")).setHeader(MESSAGE_INFO,constant("Handled exchange with IOException")).to(ERROR_QUEUE);
        from("direct:a").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String s=exchange.getIn().getBody(String.class);
            if ("Hello NPE".equals(s)) {
              throw new NullPointerException();
            }
 else             if ("Hello IOE".equals(s)) {
              throw new ConnectException("Forced for testing - cannot connect to remote server");
            }
            exchange.getOut().setBody("Hello World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
