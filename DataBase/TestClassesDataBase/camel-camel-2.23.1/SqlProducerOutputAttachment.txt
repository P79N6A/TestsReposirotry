public class SqlProducerOutputAttachment extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testHeaderAndAttachmentAreAvailableAfterProducer() throws InterruptedException, MalformedURLException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    DataHandler content=new DataHandler(new URL("http://www.nu.nl"));
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(SqlConstants.SQL_ROW_COUNT,1);
    mock.expectedHeaderReceived("TheProjectID",1);
    mock.expectedHeaderReceived("maintain","this");
    mock.expects(() -> {
      assertThat(mock.getReceivedExchanges().get(0).getIn().getAttachments().size(),is(1));
      assertThat(mock.getReceivedExchanges().get(0).getIn().getAttachment("att1"),notNullValue());
      assertThat(mock.getReceivedExchanges().get(0).getIn().getAttachment("att1"),is(content));
    }
);
    mock.message(0).body().isEqualTo("Hi there!");
    Exchange exchange=context.getEndpoint("direct:query").createExchange();
    exchange.getIn().setBody("Hi there!");
    exchange.getIn().setHeader("myProject","Camel");
    exchange.getIn().setHeader("maintain","this");
    exchange.getIn().addAttachment("att1",content);
    template.send("direct:query",exchange);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:query").to("sql:select id from projects where project = :#myProject?outputType=SelectOne&outputHeader=TheProjectID").to("mock:query");
      }
    }
;
  }
}
