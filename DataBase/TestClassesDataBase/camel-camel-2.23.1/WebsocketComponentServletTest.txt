/** 
 */
@RunWith(MockitoJUnitRunner.class) public class WebsocketComponentServletTest {
  private static final String PROTOCOL="ws";
  private static final String MESSAGE="message";
  private static final String CONNECTION_KEY="random-connection-key";
  private static final InetSocketAddress ADDRESS=InetSocketAddress.createUnresolved("127.0.0.1",12345);
  @Mock private Session session;
  @Mock private WebsocketConsumer consumer;
  @Mock private NodeSynchronization sync;
  @Mock private ServletUpgradeRequest request;
  private WebsocketComponentServlet websocketComponentServlet;
  private Map<String,WebSocketFactory> socketFactory;
  @Before public void setUp() throws Exception {
    socketFactory=new HashMap<>();
    socketFactory.put("default",new DefaultWebsocketFactory());
    websocketComponentServlet=new WebsocketComponentServlet(sync,null,socketFactory);
    when(session.getRemoteAddress()).thenReturn(ADDRESS);
  }
  @Test public void testGetConsumer(){
    assertNull(websocketComponentServlet.getConsumer());
    websocketComponentServlet.setConsumer(consumer);
    assertEquals(consumer,websocketComponentServlet.getConsumer());
  }
  @Test public void testSetConsumer(){
    testGetConsumer();
  }
  @Test public void testDoWebSocketConnect(){
    websocketComponentServlet.setConsumer(consumer);
    DefaultWebsocket webSocket=websocketComponentServlet.doWebSocketConnect(request,PROTOCOL);
    assertNotNull(webSocket);
    assertEquals(DefaultWebsocket.class,webSocket.getClass());
    DefaultWebsocket defaultWebsocket=webSocket;
    defaultWebsocket.setConnectionKey(CONNECTION_KEY);
    defaultWebsocket.setSession(session);
    defaultWebsocket.onMessage(MESSAGE);
    InOrder inOrder=inOrder(consumer,sync,request);
    inOrder.verify(consumer,times(1)).sendMessage(CONNECTION_KEY,MESSAGE,ADDRESS);
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testDoWebSocketConnectConsumerIsNull(){
    DefaultWebsocket webSocket=websocketComponentServlet.doWebSocketConnect(request,PROTOCOL);
    assertNotNull(webSocket);
    assertEquals(DefaultWebsocket.class,webSocket.getClass());
    DefaultWebsocket defaultWebsocket=webSocket;
    defaultWebsocket.setConnectionKey(CONNECTION_KEY);
    defaultWebsocket.onMessage(MESSAGE);
    InOrder inOrder=inOrder(consumer,sync,request);
    inOrder.verifyNoMoreInteractions();
  }
}
