/** 
 * Unit test for navigating a route (runtime processors, not the model).
 * @version 
 */
public class NavigateRouteTest extends ContextTestSupport {
  private static int count;
  @Test public void testNavigateRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    Navigate<Processor> nav=context.getRoutes().get(0).navigate();
    navigateRoute(nav);
    assertEquals("There should be 6 processors to navigate",6,count);
  }
  @SuppressWarnings("unchecked") private void navigateRoute(  Navigate<Processor> nav){
    if (!nav.hasNext()) {
      return;
    }
    for (    Processor child : nav.next()) {
      count++;
      if (child instanceof SendProcessor) {
        SendProcessor send=(SendProcessor)child;
        assertEquals("mock://result",send.getDestination().getEndpointUri());
      }
      if (child instanceof ConvertBodyProcessor) {
        ConvertBodyProcessor convert=(ConvertBodyProcessor)child;
        assertEquals(String.class,convert.getType());
      }
      if (child instanceof Navigate) {
        navigateRoute((Navigate<Processor>)child);
      }
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").convertBodyTo(String.class).split(body().tokenize(" ")).to("mock:result");
      }
    }
;
  }
}
