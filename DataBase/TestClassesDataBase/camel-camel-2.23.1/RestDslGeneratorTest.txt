public class RestDslGeneratorTest {
  final Instant generated=Instant.parse("2017-10-17T00:00:00.000Z");
  final Swagger swagger=new SwaggerParser().read("petstore.json");
  @Test public void shouldCreateDefinitions(){
    final CamelContext context=new DefaultCamelContext();
    final RestsDefinition definition=RestDslGenerator.toDefinition(swagger).generate(context);
    assertThat(definition).isNotNull();
    assertThat(definition.getRests()).hasSize(1);
    assertThat(definition.getRests().get(0).getPath()).isEqualTo("/v2");
  }
  @Test public void shouldGenerateSourceCodeWithDefaults() throws IOException, URISyntaxException {
    final StringBuilder code=new StringBuilder();
    RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).generate(code);
    final URI file=RestDslGeneratorTest.class.getResource("/SwaggerPetstore.txt").toURI();
    final String expectedContent=new String(Files.readAllBytes(Paths.get(file)),StandardCharsets.UTF_8);
    assertThat(code.toString()).isEqualTo(expectedContent);
  }
  @Test public void shouldGenerateSourceCodeWithRestComponent() throws IOException, URISyntaxException {
    final StringBuilder code=new StringBuilder();
    RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).withRestComponent("servlet").withRestContextPath("/").generate(code);
    final URI file=RestDslGeneratorTest.class.getResource("/SwaggerPetstoreWithRestComponent.txt").toURI();
    final String expectedContent=new String(Files.readAllBytes(Paths.get(file)),StandardCharsets.UTF_8);
    assertThat(code.toString()).isEqualTo(expectedContent);
  }
  @Test public void shouldGenerateSourceCodeWithOptions() throws IOException, URISyntaxException {
    final StringBuilder code=new StringBuilder();
    RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).withClassName("MyRestRoute").withPackageName("com.example").withIndent("\t").withSourceCodeTimestamps().withDestinationGenerator(o -> "direct:rest-" + o.getOperationId()).generate(code);
    final URI file=RestDslGeneratorTest.class.getResource("/MyRestRoute.txt").toURI();
    final String expectedContent=new String(Files.readAllBytes(Paths.get(file)),StandardCharsets.UTF_8);
    assertThat(code.toString()).isEqualTo(expectedContent);
  }
  @Test public void shouldGenerateSourceCodeWithFilter() throws IOException, URISyntaxException {
    final StringBuilder code=new StringBuilder();
    RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).withClassName("MyRestRoute").withPackageName("com.example").withIndent("\t").withSourceCodeTimestamps().withOperationFilter("find*,deletePet,updatePet").withDestinationGenerator(o -> "direct:rest-" + o.getOperationId()).generate(code);
    final URI file=RestDslGeneratorTest.class.getResource("/MyRestRouteFilter.txt").toURI();
    final String expectedContent=new String(Files.readAllBytes(Paths.get(file)),StandardCharsets.UTF_8);
    assertThat(code.toString()).isEqualTo(expectedContent);
  }
}
