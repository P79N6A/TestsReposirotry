/** 
 */
public class BeanMethodNameHeaderIssueTest extends ContextTestSupport {
  @Test public void testBeanMethodNameHeaderIssue() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("foo");
    getMockEndpoint("mock:a").message(0).header(Exchange.BEAN_METHOD_NAME).isNull();
    getMockEndpoint("mock:b").expectedBodiesReceived("bar");
    getMockEndpoint("mock:b").message(0).header(Exchange.BEAN_METHOD_NAME).isNull();
    getMockEndpoint("mock:c").expectedBodiesReceived("Bye bar");
    getMockEndpoint("mock:c").message(0).header(Exchange.BEAN_METHOD_NAME).isNull();
    getMockEndpoint("mock:d").expectedBodiesReceived("Bye bar Bye bar");
    getMockEndpoint("mock:d").message(0).header(Exchange.BEAN_METHOD_NAME).isNull();
    template.sendBodyAndHeader("direct:start","Hello World",Exchange.BEAN_METHOD_NAME,"foo");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(BeanMethodNameHeaderIssueTest.class).to("mock:a").bean(BeanMethodNameHeaderIssueTest.class,"bar").to("mock:b").bean(BeanMethodNameHeaderIssueTest.class).to("mock:c").setHeader(Exchange.BEAN_METHOD_NAME,constant("echo")).bean(BeanMethodNameHeaderIssueTest.class).to("mock:d");
      }
    }
;
  }
  public String foo(){
    return "foo";
  }
  public String bar(){
    return "bar";
  }
  public String echo(  String body){
    return body + " " + body;
  }
  @Handler public String doSomething(  String body){
    return "Bye " + body;
  }
}
