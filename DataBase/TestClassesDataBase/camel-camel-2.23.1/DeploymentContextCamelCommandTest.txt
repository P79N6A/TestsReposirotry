@RunWith(MockitoJUnitRunner.class) public class DeploymentContextCamelCommandTest {
  @Mock ProducerTemplate producerTemplate;
  @Mock Exchange outExchange;
  @Mock Message outMessage;
  @Mock CamelContext camelContext;
  @Mock RuntimeManager runtimeManager;
  @Mock CommandContext commandContext;
  @Test public void testExecuteCommandDeploymentCamelContext() throws Exception {
    String camelEndpointId="testCamelRoute";
    String camelRouteUri="direct:" + camelEndpointId;
    String testReponse="testResponse";
    String deploymentId="testDeployment";
    when(producerTemplate.send(eq(camelRouteUri),any(Exchange.class))).thenReturn(outExchange);
    when(producerTemplate.getCamelContext()).thenReturn(camelContext);
    when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
    when(outExchange.getOut()).thenReturn(outMessage);
    when(outMessage.getBody()).thenReturn(testReponse);
    try {
      ServiceRegistry.get().register(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX,camelContext);
      WorkItemImpl workItem=new WorkItemImpl();
      workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM,camelEndpointId);
      workItem.setParameter("Request","someRequest");
      when(commandContext.getData("workItem")).thenReturn(workItem);
      when(commandContext.getData("deploymentId")).thenReturn(deploymentId);
      Command command=new DeploymentContextCamelCommand();
      ExecutionResults results=command.execute(commandContext);
      assertNotNull(results);
      assertEquals(2,results.getData().size());
      assertEquals(testReponse,results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
    }
  finally {
      ServiceRegistry.get().remove(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX);
    }
  }
}
