public class IrcEndpointTest {
  private IrcComponent component;
  private IrcConfiguration configuration;
  private IRCConnection connection;
  private IrcEndpoint endpoint;
  @Before public void doSetup(){
    component=mock(IrcComponent.class);
    configuration=mock(IrcConfiguration.class);
    connection=mock(IRCConnection.class);
    List<IrcChannel> channels=new ArrayList<>();
    channels.add(new IrcChannel("#chan1",null));
    channels.add(new IrcChannel("#chan2","chan2key"));
    when(configuration.getChannels()).thenReturn(channels);
    when(configuration.findChannel("#chan1")).thenReturn(channels.get(0));
    when(configuration.findChannel("#chan2")).thenReturn(channels.get(1));
    when(component.getIRCConnection(configuration)).thenReturn(connection);
    endpoint=new IrcEndpoint("foo",component,configuration);
  }
  @Test public void doJoinChannelTestNoKey() throws Exception {
    endpoint.joinChannel("#chan1");
    verify(connection).doJoin("#chan1");
  }
  @Test public void doJoinChannelTestKey() throws Exception {
    endpoint.joinChannel("#chan2");
    verify(connection).doJoin("#chan2","chan2key");
  }
  @Test public void doJoinChannels() throws Exception {
    endpoint.joinChannels();
    verify(connection).doJoin("#chan1");
    verify(connection).doJoin("#chan2","chan2key");
  }
  @Test public void doHandleIrcErrorNickInUse() throws Exception {
    when(connection.getNick()).thenReturn("nick");
    endpoint.handleIrcError(IRCConstants.ERR_NICKNAMEINUSE,"foo");
    verify(connection).doNick("nick-");
    when(connection.getNick()).thenReturn("nick---");
    verify(connection,never()).doNick("foo");
  }
}
