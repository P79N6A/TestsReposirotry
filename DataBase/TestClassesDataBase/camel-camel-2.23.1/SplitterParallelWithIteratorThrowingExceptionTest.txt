/** 
 * Tests the issue stated in <a href="https://issues.apache.org/jira/browse/CAMEL-12441">CAMEL-12441</a>.
 */
public class SplitterParallelWithIteratorThrowingExceptionTest extends ContextTestSupport {
  @Test public void testIteratorThrowExceptionOnFirst() throws Exception {
    getMockEndpoint("mock:line").expectedMessageCount(0);
    getMockEndpoint("mock:end").expectedMessageCount(0);
    try {
      template.sendBody("direct:start",new MyIterator(1));
      fail("Should throw exception");
    }
 catch (    Exception e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Forced error",iae.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testIteratorThrowExceptionOnSecond() throws Exception {
    getMockEndpoint("mock:line").expectedMessageCount(1);
    getMockEndpoint("mock:end").expectedMessageCount(0);
    try {
      template.sendBody("direct:start",new MyIterator(0));
      fail("Should throw exception");
    }
 catch (    Exception e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Forced error",iae.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body()).aggregationStrategy(new UseLatestAggregationStrategy()).streaming().stopOnException().parallelProcessing().parallelAggregate().to("mock:line").end().to("mock:end");
      }
    }
;
  }
public static class MyIterator implements Iterator<String> {
    private int count;
    public MyIterator(    int count){
      this.count=count;
    }
    @Override public boolean hasNext(){
      return count < 2;
    }
    @Override public String next(){
      count++;
      if (count == 1) {
        return "Hello";
      }
 else {
        throw new IllegalArgumentException("Forced error");
      }
    }
    @Override public void remove(){
    }
    @Override public void forEachRemaining(    Consumer<? super String> action){
    }
  }
}
