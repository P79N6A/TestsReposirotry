public class RecipientListCxfTest extends CamelSpringTestSupport {
  private static int port1=AvailablePortFinder.getNextAvailable(20032);
  private static int port2=AvailablePortFinder.getNextAvailable(20043);
static {
    System.setProperty("RecipientListCxfTest.port1",Integer.toString(port1));
    System.setProperty("RecipientListCxfTest.port2",Integer.toString(port2));
  }
  @EndpointInject(uri="mock:reply") protected MockEndpoint replyEndpoint;
  @EndpointInject(uri="mock:reply2") protected MockEndpoint reply2Endpoint;
  @EndpointInject(uri="mock:output") protected MockEndpoint outputEndpoint;
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/itest/greeter/RecipientListCxfTest-context.xml");
  }
  @Test public void testRecipientListCXF() throws Exception {
    replyEndpoint.expectedBodiesReceived("Hello Willem","Hello Jonathan","Hello Freeman");
    reply2Endpoint.expectedBodiesReceived("Bye Claus","Bye Jonathan","Bye Freeman");
    outputEndpoint.expectedBodiesReceived("Hello Willem","Bye Claus","Bye Jonathan","Hello Freeman");
    Map<String,Object> headers=new HashMap<>();
    headers.put(CxfConstants.OPERATION_NAME,"greetMe");
    headers.put("foo","cxf:bean:serviceEndpoint");
    Object out=template.requestBodyAndHeaders("direct:start","Willem",headers,String.class);
    assertEquals("Hello Willem",out);
    headers.put("foo","cxf:bean:serviceEndpoint2");
    String out2=template.requestBodyAndHeaders("direct:start","Claus",headers,String.class);
    assertEquals("Bye Claus",out2);
    headers.put("foo","cxf:bean:serviceEndpoint,cxf:bean:serviceEndpoint2");
    String out3=template.requestBodyAndHeaders("direct:start","Jonathan",headers,String.class);
    assertEquals("Bye Jonathan",out3);
    headers.put("foo","cxf:bean:serviceEndpoint2,cxf:bean:serviceEndpoint");
    String out4=template.requestBodyAndHeaders("direct:start","Freeman",headers,String.class);
    assertEquals("Hello Freeman",out4);
    replyEndpoint.assertIsSatisfied();
    reply2Endpoint.assertIsSatisfied();
    outputEndpoint.assertIsSatisfied();
  }
}
