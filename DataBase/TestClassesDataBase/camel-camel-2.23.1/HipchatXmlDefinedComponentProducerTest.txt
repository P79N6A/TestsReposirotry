public class HipchatXmlDefinedComponentProducerTest extends CamelTestSupport {
  @EndpointInject(uri="hipchat:https:foobar.com:443?authToken=abc123") protected Endpoint endpoint;
  @Test public void shouldConfigureEndpointCorrectlyViaXml() throws Exception {
    assertIsInstanceOf(HipchatEndpoint.class,endpoint);
    HipchatEndpoint hipchatEndpoint=(HipchatEndpoint)endpoint;
    HipchatConfiguration configuration=hipchatEndpoint.getConfiguration();
    assertThat(configuration.getAuthToken(),is("abc123"));
    assertThat(configuration.getHost(),is("foobar.com"));
    assertThat(configuration.getProtocol(),is("https"));
    assertThat(configuration.getPort(),is(443));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=super.createCamelContext();
    HipchatComponent component=new HipchatComponent(context){
      @Override protected HipchatEndpoint getHipchatEndpoint(      String uri){
        return new HipchatEPSuccessTestSupport(uri,this,null,null);
      }
    }
;
    context.addComponent("hipchat",component);
    try (InputStream routes=getClass().getResourceAsStream("HipchatXmlDefinedComponentProducerTest-route.xml")){
      RoutesDefinition routesDefinition=ModelHelper.loadRoutesDefinition(context,routes);
      context.addRouteDefinition(routesDefinition.getRoutes().get(0));
    }
     return context;
  }
}
