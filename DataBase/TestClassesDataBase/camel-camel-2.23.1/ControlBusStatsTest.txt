/** 
 */
public class ControlBusStatsTest extends ContextTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  @Test public void testControlBusRouteStat() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
    String xml=template.requestBody("controlbus:route?routeId=foo&action=stats",null,String.class);
    assertNotNull(xml);
    assertTrue(xml.contains("routeStat"));
    assertTrue(xml.contains("processorStat"));
    assertTrue(xml.contains("id=\"foo\""));
    assertTrue(xml.contains("exchangesCompleted=\"1\""));
  }
  @Test public void testControlBusCurrentRouteStat() throws Exception {
    getMockEndpoint("mock:current").expectedBodiesReceived("Hello World");
    template.sendBody("direct:current","Hello World");
    assertMockEndpointsSatisfied();
    String xml=template.requestBody("controlbus:route?routeId=current&action=stats",null,String.class);
    assertNotNull(xml);
    assertTrue(xml.contains("routeStat"));
    assertTrue(xml.contains("processorStat"));
    assertTrue(xml.contains("id=\"current\""));
    assertTrue(xml.contains("exchangesCompleted=\"1\""));
  }
  @Test public void testControlBusContextStat() throws Exception {
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    template.sendBody("direct:bar","Hello World");
    assertMockEndpointsSatisfied();
    String xml=template.requestBody("controlbus:route?action=stats",null,String.class);
    assertNotNull(xml);
    assertTrue(xml.contains("camelContextStat"));
    assertTrue(xml.contains("routeStat"));
    assertTrue(xml.contains("processorStat"));
    assertTrue(xml.contains("id=\"bar\""));
    assertTrue(xml.contains("id=\"foo\""));
    assertTrue(xml.contains("exchangesCompleted=\"1\""));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").to("mock:foo");
        from("direct:bar").routeId("bar").to("mock:bar");
        from("direct:current").routeId("current").to("mock:current");
      }
    }
;
  }
}
