/** 
 * @version 
 */
public class HttpDisableStreamCacheTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/test/",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void httpDisableStreamCache() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/test/?disableStreamCache=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    InputStream is=assertIsInstanceOf(InputStream.class,exchange.getOut().getBody());
    assertNotNull(is);
    String name=is.getClass().getName();
    assertFalse(name.contains("CachedOutputStream"));
    try {
      assertEquals("camel rocks!",context.getTypeConverter().convertTo(String.class,exchange,is));
      fail("Should fail");
    }
 catch (    TypeConversionException e) {
    }
  }
}
