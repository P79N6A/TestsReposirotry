public abstract class BaseAhcTest extends CamelTestSupport {
  protected static final String KEY_STORE_PASSWORD="changeit";
  private static volatile int port;
  @BeforeClass public static void initPort() throws Exception {
    port=AvailablePortFinder.getNextAvailable(24000);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("properties",new PropertiesComponent("ref:prop"));
    return context;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    Properties prop=new Properties();
    prop.setProperty("port","" + getPort());
    jndi.bind("prop",prop);
    if (isHttps()) {
      addSslContextParametersToRegistry(jndi);
    }
    return jndi;
  }
  protected void addSslContextParametersToRegistry(  JndiRegistry registry){
    registry.bind("sslContextParameters",createSSLContextParameters());
  }
  protected SSLContextParameters createSSLContextParameters(){
    KeyStoreParameters ksp=new KeyStoreParameters();
    ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString());
    ksp.setPassword(KEY_STORE_PASSWORD);
    KeyManagersParameters kmp=new KeyManagersParameters();
    kmp.setKeyPassword(KEY_STORE_PASSWORD);
    kmp.setKeyStore(ksp);
    TrustManagersParameters tmp=new TrustManagersParameters();
    tmp.setKeyStore(ksp);
    SSLContextServerParameters scsp=new SSLContextServerParameters();
    scsp.setClientAuthentication(ClientAuthentication.WANT.name());
    SSLContextParameters sslContextParameters=new SSLContextParameters();
    sslContextParameters.setKeyManagers(kmp);
    sslContextParameters.setTrustManagers(tmp);
    sslContextParameters.setServerParameters(scsp);
    sslContextParameters.setSecureSocketProtocol("SSLv3");
    return sslContextParameters;
  }
  /** 
 * Indicates if the URIs returned from  {@link #getTestServerEndpointUri()} and{@link #getAhcEndpointUri()} should use the HTTPS protocol instead ofthe HTTP protocol. If true, an  {@link SSLContextParameters} is also placed in the registry under thekey  {@code sslContextParameters}.  The parameters are not added to the endpoint URIs as that is test specific.
 * @return false by default
 */
  protected boolean isHttps(){
    return false;
  }
  protected String getProtocol(){
    String protocol="http";
    if (isHttps()) {
      protocol=protocol + "s";
    }
    return protocol;
  }
  protected String getTestServerEndpointUrl(){
    return getProtocol() + "://localhost:{{port}}/foo";
  }
  protected String getTestServerEndpointUri(){
    return "jetty:" + getTestServerEndpointUrl();
  }
  protected String getTestServerEndpointTwoUrl(){
    return getProtocol() + "://localhost:" + getPort()+ "/bar";
  }
  protected String getTestServerEndpointTwoUri(){
    return "jetty:" + getTestServerEndpointTwoUrl();
  }
  protected String getAhcEndpointUri(){
    return "ahc:" + getProtocol() + "://localhost:{{port}}/foo";
  }
  protected synchronized int getNextPort(){
    port=AvailablePortFinder.getNextAvailable(port + 1);
    return port;
  }
  protected int getPort(){
    return port;
  }
}
