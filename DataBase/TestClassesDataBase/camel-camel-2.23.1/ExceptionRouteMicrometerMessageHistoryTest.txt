public class ExceptionRouteMicrometerMessageHistoryTest extends CamelTestSupport {
  private MeterRegistry registry=new SimpleMeterRegistry();
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    MicrometerMessageHistoryFactory factory=new MicrometerMessageHistoryFactory();
    factory.setMeterRegistry(registry);
    context.setMessageHistoryFactory(factory);
    return context;
  }
  @Test public void testMetricsHistory() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(5);
    getMockEndpoint("mock:bar").expectedMessageCount(5);
    getMockEndpoint("mock:baz").expectedMessageCount(0);
    getMockEndpoint("mock:exception").expectedMessageCount(5);
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0) {
        template.sendBody("seda:foo","Hello " + i);
      }
 else {
        template.sendBody("seda:bar","Hello " + i);
      }
    }
    assertMockEndpointsSatisfied();
    assertEquals(5,registry.getMeters().size());
    MicrometerMessageHistoryService service=context.hasService(MicrometerMessageHistoryService.class);
    assertNotNull(service);
    String json=service.dumpStatisticsAsJson();
    assertNotNull(json);
    log.info(json);
    assertTrue(json.contains("\"nodeId\" : \"foo\""));
    assertTrue(json.contains("\"nodeId\" : \"bar\""));
    assertTrue(json.contains("\"nodeId\" : \"exception\""));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        onException(Exception.class).routeId("ExceptionRoute").log("Exception received.").to("mock:exception").id("exception");
        from("seda:foo").to("mock:foo").id("foo");
        from("seda:bar").to("mock:bar").id("bar").process(exchange -> {
          throw new Exception("Metrics Exception");
        }
).to("mock:baz").id("baz");
      }
    }
;
  }
}
