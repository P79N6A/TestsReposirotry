@ContextConfiguration(locations={"exec-mock-executor-context.xml"}) public class ExecOutFileTest extends AbstractJUnit4SpringContextTests {
  private static final String FILE_CONTENT=buildFileContent();
  private static final File FILE=new File("target/outfiletest.xml");
  @Produce(uri="direct:input") private ProducerTemplate producerTemplate;
  @Before public void setUp() throws IOException {
    FILE.createNewFile();
    FileUtils.writeStringToFile(FILE,FILE_CONTENT);
  }
  @After public void tearDown(){
    FileUtils.deleteQuietly(FILE);
  }
  @Test @DirtiesContext public void testOutFile() throws Exception {
    Exchange e=sendWithMockedExecutor();
    ExecResult result=e.getIn().getBody(ExecResult.class);
    assertNotNull(result);
    File outFile=result.getCommand().getOutFile();
    assertNotNull(outFile);
    assertEquals(FILE_CONTENT,FileUtils.readFileToString(outFile));
  }
  @Test @DirtiesContext public void testOutFileConvertToInputStream() throws Exception {
    Exchange e=sendWithMockedExecutor();
    InputStream body=e.getIn().getBody(InputStream.class);
    assertNotNull(body);
    assertEquals(FILE_CONTENT,IOUtils.toString(body));
  }
  @Test @DirtiesContext public void testOutFileConvertToDocument() throws Exception {
    Exchange e=sendWithMockedExecutor();
    Document body=e.getIn().getBody(Document.class);
    assertNotNull(body);
  }
  @Test @DirtiesContext public void testOutFileConvertToString() throws Exception {
    Exchange e=sendWithMockedExecutor();
    assertEquals(FILE_CONTENT,e.getIn().getBody(String.class));
  }
  @Test @DirtiesContext public void testOutFileConvertToByteArray() throws Exception {
    Exchange e=sendWithMockedExecutor();
    byte[] body=e.getIn().getBody(byte[].class);
    assertEquals(FILE_CONTENT,new String(body));
  }
  private Exchange sendWithMockedExecutor(){
    Exchange e=producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(EXEC_COMMAND_OUT_FILE,FILE.getPath());
        exchange.getIn().setBody(FILE_CONTENT);
      }
    }
);
    return e;
  }
  private static String buildFileContent(){
    StringBuilder builder=new StringBuilder();
    builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").append(LINE_SEPARATOR);
    builder.append("<data>").append(LINE_SEPARATOR);
    builder.append("<element>data1</element>").append(LINE_SEPARATOR);
    builder.append("<element>data2</element>").append(LINE_SEPARATOR);
    builder.append("</data>").append(LINE_SEPARATOR);
    builder.append(LINE_SEPARATOR);
    return builder.toString();
  }
}
