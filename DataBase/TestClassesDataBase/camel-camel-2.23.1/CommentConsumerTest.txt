public class CommentConsumerTest extends CamelTestSupport {
  public static final Logger LOG=LoggerFactory.getLogger(CommentConsumerTest.class);
  private static final String URL="https://somerepo.atlassian.net";
  private static final String USERNAME="someguy";
  private static final String PASSWORD="xU3xjhay9yjEaZq";
  private static final String JIRA_CREDENTIALS=URL + "&username=" + USERNAME+ "&password="+ PASSWORD;
  protected MockJerseyJiraRestClientFactory factory;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    factory=new MockJerseyJiraRestClientFactory();
    registry.bind("JerseyJiraRestClientFactory",factory);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jira://newComment?serverUrl=" + JIRA_CREDENTIALS + "&jql=RAW(project=CAMELJIRA)"+ "&delay=500").process(new NewCommentProcessor()).to("mock:result");
      }
    }
;
  }
  @Test public void emptyAtStartupTest() throws Exception {
    MockEndpoint mockResultEndpoint=getMockEndpoint("mock:result");
    mockResultEndpoint.expectedMessageCount(0);
    mockResultEndpoint.assertIsSatisfied();
  }
  @Test public void singleIssueTest() throws Exception {
    MockEndpoint mockResultEndpoint=getMockEndpoint("mock:result");
    MockJiraRestClient jiraRestClient=factory.getClient();
    MockSearchRestClient searchRestClient=(MockSearchRestClient)jiraRestClient.getSearchClient();
    BasicIssue issue1=searchRestClient.addIssue();
    String commentText="Comment added at " + new Date();
    Comment comment1=searchRestClient.addCommentToIssue(issue1,commentText);
    mockResultEndpoint.expectedBodiesReceived(comment1);
    mockResultEndpoint.assertIsSatisfied();
  }
  @Test public void multiIssueTest() throws Exception {
    MockEndpoint mockResultEndpoint=getMockEndpoint("mock:result");
    MockJiraRestClient jiraRestClient=factory.getClient();
    MockSearchRestClient searchRestClient=(MockSearchRestClient)jiraRestClient.getSearchClient();
    BasicIssue issue1=searchRestClient.addIssue();
    Comment comment1=searchRestClient.addCommentToIssue(issue1,"Comment added at " + new Date());
    BasicIssue issue2=searchRestClient.addIssue();
    Comment comment2=searchRestClient.addCommentToIssue(issue2,"Comment added at " + new Date());
    mockResultEndpoint.expectedBodiesReceivedInAnyOrder(comment1,comment2);
    mockResultEndpoint.assertIsSatisfied();
  }
  /** 
 * Log new comments.  Not really needed for this test, but useful for debugging.
 */
public class NewCommentProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Comment comment=(Comment)in.getBody();
      LOG.debug("Got comment with id " + comment.getId() + " Body "+ comment.getBody());
    }
  }
}
