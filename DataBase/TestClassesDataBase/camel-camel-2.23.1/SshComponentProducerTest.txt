public class SshComponentProducerTest extends SshComponentTestSupport {
  @Test public void testProducer() throws Exception {
    final String msg="test";
    MockEndpoint mock=getMockEndpoint("mock:password");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived(msg);
    mock.expectedHeaderReceived(SshResult.EXIT_VALUE,0);
    mock.expectedHeaderReceived(SshResult.STDERR,"Error:test");
    template.sendBody("direct:ssh",msg);
    assertMockEndpointsSatisfied();
  }
  @Test public void testReconnect() throws Exception {
    final String msg="test";
    MockEndpoint mock=getMockEndpoint("mock:password");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived(msg);
    template.sendBody("direct:ssh",msg);
    assertMockEndpointsSatisfied();
    sshd.stop();
    sshd.start();
    mock.reset();
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived(msg);
    template.sendBody("direct:ssh",msg);
    assertMockEndpointsSatisfied();
  }
  @Test public void testConnectionTimeout() throws Exception {
    final String msg="test";
    MockEndpoint mock=getMockEndpoint("mock:password");
    mock.expectedMinimumMessageCount(0);
    MockEndpoint mockError=getMockEndpoint("mock:error");
    mockError.expectedMinimumMessageCount(1);
    sshd.stop();
    sshd=null;
    template.sendBody("direct:ssh",msg);
    assertMockEndpointsSatisfied();
  }
  @Test public void testCredentialsAsHeaders() throws Exception {
    final String msg="test";
    MockEndpoint mock=getMockEndpoint("mock:password");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived(msg);
    mock.expectedHeaderReceived(SshResult.EXIT_VALUE,0);
    mock.expectedHeaderReceived(SshResult.STDERR,"Error:test");
    Map<String,Object> headers=new HashMap<>();
    headers.put(SshConstants.USERNAME_HEADER,"smx");
    headers.put(SshConstants.PASSWORD_HEADER,"smx");
    template.sendBodyAndHeaders("direct:sshCredentialsWithHeaders",msg,headers);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        onException(Exception.class).handled(true).to("mock:error");
        from("direct:ssh").to("ssh://smx:smx@localhost:" + port + "?timeout=3000").to("mock:password");
        from("direct:sshCredentialsWithHeaders").to("ssh://localhost:" + port + "?timeout=3000").to("mock:password");
      }
    }
;
  }
}
