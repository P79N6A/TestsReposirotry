public class CxfMixedModeRouterTest extends CamelTestSupport {
  protected static int port1=CXFTestSupport.getPort1();
  protected static int port2=CXFTestSupport.getPort2();
  protected static Server server;
  protected static final String ROUTER_ADDRESS="http://localhost:" + port1 + "/CxfMixedModeRouterTest/router";
  protected static final String SERVICE_ADDRESS="http://localhost:" + port2 + "/CxfMixedModeRouterTest/helloworld";
  protected static final String SERVICE_CLASS="serviceClass=org.apache.camel.component.cxf.HelloService";
  private String routerEndpointURI="cxf://" + ROUTER_ADDRESS + "?"+ SERVICE_CLASS+ "&dataFormat=PAYLOAD&allowStreaming=false";
  private String serviceEndpointURI="cxf://" + SERVICE_ADDRESS + "?"+ SERVICE_CLASS+ "&dataFormat=POJO";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @BeforeClass public static void startService(){
    ServerFactoryBean svrBean=new ServerFactoryBean();
    svrBean.setAddress(SERVICE_ADDRESS);
    svrBean.setServiceClass(HelloService.class);
    svrBean.setServiceBean(new HelloServiceImpl());
    server=svrBean.create();
    server.start();
  }
  @AfterClass public static void shutdownService(){
    if (server != null) {
      server.stop();
    }
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        errorHandler(noErrorHandler());
        from(routerEndpointURI).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            CxfPayload<?> message=exchange.getIn().getBody(CxfPayload.class);
            List<String> params=new ArrayList<>();
            if (message != null) {
              Element element=new XmlConverter().toDOMElement(message.getBody().get(0));
              params.add(element.getFirstChild().getTextContent());
            }
            exchange.getIn().setBody(params);
          }
        }
).to(serviceEndpointURI).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            List<?> list=exchange.getIn().getBody(List.class);
            CxfPayload<SoapHeader> message=null;
            if (list != null) {
              String s="<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">" + list.get(0) + "</return></ns1:echoResponse>";
              List<Element> body=new ArrayList<>();
              body.add(StaxUtils.read(new StringReader(s)).getDocumentElement());
              message=new CxfPayload<>(new ArrayList<SoapHeader>(),body);
            }
            exchange.getIn().setBody(message);
            exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.PAYLOAD);
          }
        }
);
      }
    }
;
  }
  protected CamelContext createCamelContext() throws Exception {
    return new DefaultCamelContext();
  }
  protected HelloService getCXFClient() throws Exception {
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(ROUTER_ADDRESS);
    clientBean.setServiceClass(HelloService.class);
    clientBean.setBus(BusFactory.newInstance().createBus());
    HelloService client=(HelloService)proxyFactory.create();
    return client;
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    HelloService client=getCXFClient();
    String result=client.echo("hello world");
    assertEquals("we should get the right answer from router",result,"echo hello world");
  }
}
