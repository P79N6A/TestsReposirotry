public class BeanWithAttachmentAnnotationTest extends ContextTestSupport {
  @Test public void testBeanWithOldAnnotationAndExchangeTest() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("attachment");
    template.send("direct:inOld",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message m=exchange.getIn();
        m.addAttachmentObject("attachment",new DefaultAttachment(new FileDataSource("src/test/org/apache/camel/component/bean/BeanWithAttachmentAnnotationTest.java")));
      }
    }
);
    mock.assertIsSatisfied();
  }
  @Test public void testBeanWithAnnotationAndExchangeTest() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("attachment");
    template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message m=exchange.getIn();
        m.addAttachmentObject("attachment",new DefaultAttachment(new FileDataSource("src/test/org/apache/camel/component/bean/BeanWithAttachmentAnnotationTest.java")));
      }
    }
);
    mock.assertIsSatisfied();
  }
  protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("processorOld",new AttachmentProcessorOld());
    answer.bind("processor",new AttachmentProcessor());
    return answer;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:in").to("bean:processor").to("mock:result");
        from("direct:inOld").to("bean:processorOld").to("mock:result");
      }
    }
;
  }
public static class AttachmentProcessorOld {
    public String doSomething(    @Attachments Map<String,DataHandler> attachments){
      assertNotNull(attachments);
      assertEquals("The attache size is wrong",1,attachments.size());
      String key=attachments.keySet().iterator().next();
      assertNotNull(key);
      assertNotNull(attachments.get(key));
      DataHandler handler=attachments.get(key);
      assertNotNull(handler);
      assertTrue("The data source should be a instance of FileDataSource",handler.getDataSource() instanceof FileDataSource);
      return key;
    }
  }
public static class AttachmentProcessor {
    public String doSomething(    @AttachmentObjects Map<String,Attachment> attachments){
      assertNotNull(attachments);
      assertEquals("The attache size is wrong",1,attachments.size());
      String key=attachments.keySet().iterator().next();
      assertNotNull(key);
      assertNotNull(attachments.get(key));
      Attachment attachment=attachments.get(key);
      assertNotNull(attachment);
      DataHandler handler=attachment.getDataHandler();
      assertNotNull(handler);
      assertTrue("The data source should be a instance of FileDataSource",handler.getDataSource() instanceof FileDataSource);
      return key;
    }
  }
}
