public class WebsocketComponentRouteExampleTest extends CamelTestSupport {
  private static List<String> received=new ArrayList<>();
  private static CountDownLatch latch=new CountDownLatch(1);
  protected int port;
  @Override @Before public void setUp() throws Exception {
    port=AvailablePortFinder.getNextAvailable(16200);
    super.setUp();
  }
  @Test public void testWSHttpCall() throws Exception {
    AsyncHttpClient c=new DefaultAsyncHttpClient();
    WebSocket websocket=c.prepareGet("ws://localhost:" + port + "/echo").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener(){
      @Override public void onMessage(      String message){
        received.add(message);
        log.info("received --> " + message);
        latch.countDown();
      }
      @Override public void onOpen(      WebSocket websocket){
      }
      @Override public void onClose(      WebSocket websocket){
      }
      @Override public void onError(      Throwable t){
        t.printStackTrace();
      }
    }
).build()).get();
    websocket.sendMessage("Beer");
    assertTrue(latch.await(10,TimeUnit.SECONDS));
    assertEquals(1,received.size());
    assertEquals("BeerBeer",received.get(0));
    websocket.close();
    c.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        WebsocketComponent websocketComponent=getContext().getComponent("websocket",WebsocketComponent.class);
        websocketComponent.setHost("localhost");
        websocketComponent.setPort(port);
        websocketComponent.setMaxThreads(25);
        websocketComponent.setMinThreads(1);
        from("websocket://echo").log(">>> Message received from WebSocket Client : ${body}").transform().simple("${body}${body}").to("websocket://echo");
      }
    }
;
  }
}
