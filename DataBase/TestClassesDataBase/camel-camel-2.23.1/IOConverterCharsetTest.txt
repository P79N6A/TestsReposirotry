public class IOConverterCharsetTest extends ContextTestSupport {
  private static final String CONTENT="G\u00f6tzend\u00e4mmerung,Joseph und seine Br\u00fcder";
  @Test public void testToInputStreamFileWithCharsetUTF8() throws Exception {
    switchToDefaultCharset(StandardCharsets.UTF_8);
    File file=new File("src/test/resources/org/apache/camel/converter/german.utf-8.txt");
    try (InputStream in=IOConverter.toInputStream(file,"UTF-8");BufferedReader reader=new BufferedReader(new InputStreamReader(in,StandardCharsets.UTF_8));BufferedReader naiveReader=new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())),StandardCharsets.UTF_8))){
      String line=reader.readLine();
      String naiveLine=naiveReader.readLine();
      assertEquals(naiveLine,line);
      assertEquals(CONTENT,line);
    }
   }
  @Test public void testToInputStreamFileWithCharsetUTF8withOtherDefaultEncoding() throws Exception {
    switchToDefaultCharset(StandardCharsets.ISO_8859_1);
    File file=new File("src/test/resources/org/apache/camel/converter/german.utf-8.txt");
    try (InputStream in=IOConverter.toInputStream(file,"UTF-8");BufferedReader reader=new BufferedReader(new InputStreamReader(in,StandardCharsets.ISO_8859_1));BufferedReader naiveReader=new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())),StandardCharsets.UTF_8))){
      String line=reader.readLine();
      String naiveLine=naiveReader.readLine();
      assertEquals(naiveLine,line);
      assertEquals(CONTENT,line);
    }
   }
  @Test public void testToInputStreamFileWithCharsetLatin1() throws Exception {
    switchToDefaultCharset(StandardCharsets.UTF_8);
    File file=new File("src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt");
    try (InputStream in=IOConverter.toInputStream(file,"ISO-8859-1");BufferedReader reader=new BufferedReader(new InputStreamReader(in,StandardCharsets.UTF_8));BufferedReader naiveReader=new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())),"ISO-8859-1"))){
      String line=reader.readLine();
      String naiveLine=naiveReader.readLine();
      assertEquals(naiveLine,line);
      assertEquals(CONTENT,line);
    }
   }
  @Test public void testToInputStreamFileDirectByteDumpWithCharsetLatin1() throws Exception {
    switchToDefaultCharset(StandardCharsets.UTF_8);
    File file=new File("src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt");
    try (InputStream in=IOConverter.toInputStream(file,"ISO-8859-1");InputStream naiveIn=Files.newInputStream(Paths.get(file.getAbsolutePath()))){
      byte[] bytes=new byte[8192];
      in.read(bytes);
      byte[] naiveBytes=new byte[8192];
      naiveIn.read(naiveBytes);
      assertFalse("both input streams deliver the same byte sequence",Arrays.equals(naiveBytes,bytes));
    }
   }
  @Test public void testToReaderFileWithCharsetUTF8() throws Exception {
    File file=new File("src/test/resources/org/apache/camel/converter/german.utf-8.txt");
    try (BufferedReader reader=IOConverter.toReader(file,"UTF-8");BufferedReader naiveReader=new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())),StandardCharsets.UTF_8))){
      String line=reader.readLine();
      String naiveLine=naiveReader.readLine();
      assertEquals(naiveLine,line);
      assertEquals(CONTENT,line);
    }
   }
  @Test public void testToReaderFileWithCharsetLatin1() throws Exception {
    File file=new File("src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt");
    try (BufferedReader reader=IOConverter.toReader(file,"ISO-8859-1");BufferedReader naiveReader=new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())),"ISO-8859-1"))){
      String line=reader.readLine();
      String naiveLine=naiveReader.readLine();
      assertEquals(naiveLine,line);
      assertEquals(CONTENT,line);
    }
   }
  private static void switchToDefaultCharset(  final Charset charset){
    IOConverter.defaultCharset=() -> charset;
  }
}
