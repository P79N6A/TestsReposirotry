public class SqlProducerInMultiTest extends CamelTestSupport {
  EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase6.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testQueryInArray() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("names",new String[]{"Camel","AMQ"});
    headers.put("licenses",new String[]{"ASF","XXX","YYY"});
    template.requestBodyAndHeaders("direct:query","Hi there!",headers);
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(6,list.size());
    Map row=(Map)list.get(0);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("ASF",row.get("license"));
    row=(Map)list.get(1);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("XXX",row.get("license"));
    row=(Map)list.get(2);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("YYY",row.get("license"));
    row=(Map)list.get(3);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("ASF",row.get("license"));
    row=(Map)list.get(4);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("XXX",row.get("license"));
    row=(Map)list.get(5);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("YYY",row.get("license"));
  }
  @Test public void testQueryInList() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("names",Arrays.asList("Camel","AMQ"));
    headers.put("licenses",Arrays.asList("ASF","XXX","YYY"));
    template.requestBodyAndHeaders("direct:query","Hi there!",headers);
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(6,list.size());
    Map row=(Map)list.get(0);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("ASF",row.get("license"));
    row=(Map)list.get(1);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("XXX",row.get("license"));
    row=(Map)list.get(2);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("YYY",row.get("license"));
    row=(Map)list.get(3);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("ASF",row.get("license"));
    row=(Map)list.get(4);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("XXX",row.get("license"));
    row=(Map)list.get(5);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("YYY",row.get("license"));
  }
  @Test public void testQueryInString() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    HashMap<String,Object> headers=new HashMap<>();
    headers.put("names","Camel,AMQ");
    headers.put("licenses","ASF,XXX,YYY");
    template.requestBodyAndHeaders("direct:query","Hi there!",headers);
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(6,list.size());
    Map row=(Map)list.get(0);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("ASF",row.get("license"));
    row=(Map)list.get(1);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("XXX",row.get("license"));
    row=(Map)list.get(2);
    assertEquals("Camel",row.get("PROJECT"));
    assertEquals("YYY",row.get("license"));
    row=(Map)list.get(3);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("ASF",row.get("license"));
    row=(Map)list.get(4);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("XXX",row.get("license"));
    row=(Map)list.get(5);
    assertEquals("AMQ",row.get("PROJECT"));
    assertEquals("YYY",row.get("license"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:query").to("sql:classpath:sql/selectProjectsInMulti.sql").to("log:query").to("mock:query");
      }
    }
;
  }
}
