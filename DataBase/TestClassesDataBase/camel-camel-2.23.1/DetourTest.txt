public class DetourTest extends ContextTestSupport {
  private static final String BODY="<order custId=\"123\"/>";
  private ControlBean controlBean;
  @Test public void testDetourSet() throws Exception {
    controlBean.setDetour(true);
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.message(0).body().isEqualTo(BODY);
    MockEndpoint detourEndpoint=getMockEndpoint("mock:detour");
    detourEndpoint.expectedMessageCount(1);
    detourEndpoint.message(0).body().isEqualTo(BODY);
    template.sendBody("direct:start",BODY);
    assertMockEndpointsSatisfied();
  }
  @Test public void testDetourNotSet() throws Exception {
    controlBean.setDetour(false);
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.message(0).body().isEqualTo(BODY);
    MockEndpoint detourEndpoint=getMockEndpoint("mock:detour");
    detourEndpoint.expectedMessageCount(0);
    template.sendBody("direct:start",BODY);
    assertMockEndpointsSatisfied();
  }
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    controlBean=new ControlBean();
    jndi.bind("controlBean",controlBean);
    return jndi;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").choice().when().method("controlBean","isDetour").to("mock:detour").end().to("mock:result");
      }
    }
;
  }
public final class ControlBean {
    private boolean detour;
    public void setDetour(    boolean detour){
      this.detour=detour;
    }
    public boolean isDetour(){
      return detour;
    }
  }
}
