/** 
 */
public class ResequenceStreamIgnoreInvalidExchangesTest extends ContextTestSupport {
  @Test public void testBadFirstMessage() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("B","C","D");
    template.sendBody("direct:start","A");
    template.sendBodyAndHeader("direct:start","D","seqno",4);
    template.sendBodyAndHeader("direct:start","C","seqno",3);
    template.sendBodyAndHeader("direct:start","B","seqno",2);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBadSecondMessage() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("B","C","D");
    template.sendBodyAndHeader("direct:start","D","seqno",4);
    template.sendBody("direct:start","A");
    template.sendBodyAndHeader("direct:start","C","seqno",3);
    template.sendBodyAndHeader("direct:start","B","seqno",2);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBadThirdMessage() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("B","C","D");
    template.sendBodyAndHeader("direct:start","D","seqno",4);
    template.sendBodyAndHeader("direct:start","C","seqno",3);
    template.sendBody("direct:start","A");
    template.sendBodyAndHeader("direct:start","B","seqno",2);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBadForthMessage() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("B","C","D");
    template.sendBodyAndHeader("direct:start","D","seqno",4);
    template.sendBodyAndHeader("direct:start","C","seqno",3);
    template.sendBodyAndHeader("direct:start","B","seqno",2);
    template.sendBody("direct:start","A");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").resequence(header("seqno")).stream().timeout(50).deliveryAttemptInterval(10).ignoreInvalidExchanges().to("mock:result");
      }
    }
;
  }
}
