public class CaffeineIdempotentRepositoryTest extends CamelTestSupport {
  private CaffeineIdempotentRepository repo;
  private Cache<String,Boolean> cache;
  private String key01;
  private String key02;
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    repo=new CaffeineIdempotentRepository("test");
    key01=generateRandomString();
    key02=generateRandomString();
  }
  @Test public void testAdd() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(repo.getCache().asMap().containsKey(key01));
    assertFalse(repo.add(key01));
    assertTrue(repo.add(key02));
    assertTrue(repo.getCache().asMap().containsKey(key02));
  }
  @Test public void testConfirm() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(repo.confirm(key01));
    assertFalse(repo.confirm(key02));
  }
  @Test public void testContains() throws Exception {
    assertFalse(repo.contains(key01));
    assertTrue(repo.add(key01));
    assertTrue(repo.contains(key01));
  }
  @Test public void testRemove() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(repo.add(key02));
    assertTrue(repo.getCache().asMap().containsKey(key01));
    assertTrue(repo.getCache().asMap().containsKey(key02));
    repo.clear();
    assertFalse(repo.getCache().asMap().containsKey(key01));
    assertFalse(repo.getCache().asMap().containsKey(key02));
  }
  @Test public void testClear() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(repo.confirm(key01));
    assertTrue(repo.remove(key01));
    assertFalse(repo.confirm(key01));
    repo.remove(key02);
  }
  @Test public void testRepositoryInRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:out");
    mock.expectedBodiesReceived("a","b");
    assertEquals("Should be started",true,repo.getStatus().isStarted());
    template.sendBodyAndHeader("direct://in","a","messageId",key01);
    template.sendBodyAndHeader("direct://in","b","messageId",key02);
    template.sendBodyAndHeader("direct://in","c","messageId",key01);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct://in").idempotentConsumer(header("messageId"),repo).to("mock://out");
      }
    }
;
  }
  protected static String generateRandomString(){
    return UUID.randomUUID().toString();
  }
}
