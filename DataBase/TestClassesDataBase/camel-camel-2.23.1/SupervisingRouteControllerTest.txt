@DirtiesContext @RunWith(SpringRunner.class) @SpringBootTest(classes={CamelAutoConfiguration.class,SupervisingRouteControllerAutoConfiguration.class,SupervisingRouteControllerTest.TestConfiguration.class},properties={"camel.springboot.xml-routes = false","camel.springboot.main-run-controller = true","camel.supervising.controller.enabled = true","camel.supervising.controller.initial-delay = 2s","camel.supervising.controller.default-back-off.delay = 1s","camel.supervising.controller.default-back-off.max-attempts = 10","camel.supervising.controller.routes.bar.back-off.delay = 10s","camel.supervising.controller.routes.bar.back-off.max-attempts = 3","camel.supervising.controller.routes.timer-unmanaged.supervise = false"}) public class SupervisingRouteControllerTest {
  @Autowired private CamelContext context;
  @Test public void test() throws Exception {
    Assert.assertNotNull(context.getRouteController());
    Assert.assertTrue(context.getRouteController() instanceof SupervisingRouteController);
    SupervisingRouteController controller=context.getRouteController().unwrap(SupervisingRouteController.class);
    Assert.assertEquals(3,controller.getControlledRoutes().size());
    Assert.assertEquals(2,controller.getInitialDelay().getSeconds());
    BackOff foo=controller.getBackOff("foo");
    Assert.assertEquals(1,foo.getDelay().getSeconds());
    Assert.assertEquals(Long.MAX_VALUE,foo.getMaxDelay().toMillis());
    Assert.assertEquals(10L,foo.getMaxAttempts().longValue());
    BackOff bar=controller.getBackOff("bar");
    Assert.assertEquals(10,bar.getDelay().getSeconds());
    Assert.assertEquals(Long.MAX_VALUE,bar.getMaxDelay().toMillis());
    Assert.assertEquals(3L,bar.getMaxAttempts().longValue());
    Assert.assertEquals(controller,context.getRoute("foo").getRouteContext().getRouteController());
    Assert.assertEquals(controller,context.getRoute("bar").getRouteContext().getRouteController());
    Assert.assertNull(context.getRoute("timer-unmanaged").getRouteContext().getRouteController());
    Assert.assertNull(context.getRoute("timer-no-autostartup").getRouteContext().getRouteController());
    Assert.assertEquals(ServiceStatus.Stopped,context.getRouteStatus("foo"));
    Assert.assertEquals(ServiceStatus.Stopped,context.getRouteStatus("bar"));
  }
@Configuration public static class TestConfiguration {
    private static final int PORT=AvailablePortFinder.getNextAvailable();
    @Bean public RouteBuilder routeBuilder(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("timer:foo?period=5s").id("foo").startupOrder(2).to("mock:foo");
          from("timer:bar?period=5s").id("bar").startupOrder(1).to("mock:bar");
          from("timer:unmanaged?period=5s").id("timer-unmanaged").to("mock:timer-unmanaged");
          from("timer:no-autostartup?period=5s").id("timer-no-autostartup").autoStartup(false).to("mock:timer-no-autostartup");
          fromF("jetty:http://localhost:%d",PORT).id("jetty").to("mock:jetty");
        }
      }
;
    }
  }
}
