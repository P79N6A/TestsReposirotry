/** 
 * @version 
 */
public class DefaultTimeoutMapTest extends Assert {
  private static final Logger LOG=LoggerFactory.getLogger(DefaultTimeoutMapTest.class);
  private ScheduledExecutorService executor=new ScheduledThreadPoolExecutor(1);
  @Test public void testDefaultTimeoutMap() throws Exception {
    DefaultTimeoutMap<?,?> map=new DefaultTimeoutMap<>(executor);
    map.start();
    assertTrue(map.currentTime() > 0);
    assertEquals(0,map.size());
    map.stop();
  }
  @Test public void testDefaultTimeoutMapPurge() throws Exception {
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<>(executor,100);
    map.start();
    assertTrue(map.currentTime() > 0);
    assertEquals(0,map.size());
    map.put("A",123,50);
    assertEquals(1,map.size());
    Thread.sleep(250);
    if (map.size() > 0) {
      LOG.warn("Waiting extra due slow CI box");
      Thread.sleep(1000);
    }
    assertEquals(0,map.size());
    map.stop();
  }
  @Test public void testDefaultTimeoutMapForcePurge() throws Exception {
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<>(executor,100);
    map.start();
    assertTrue(map.currentTime() > 0);
    assertEquals(0,map.size());
    map.put("A",123,50);
    assertEquals(1,map.size());
    Thread.sleep(250);
    map.purge();
    assertEquals(0,map.size());
  }
  @Test public void testDefaultTimeoutMapGetRemove() throws Exception {
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<>(executor,100);
    map.start();
    assertTrue(map.currentTime() > 0);
    assertEquals(0,map.size());
    map.put("A",123,50);
    assertEquals(1,map.size());
    assertEquals(123,(int)map.get("A"));
    Object old=map.remove("A");
    assertEquals(123,old);
    assertEquals(null,map.get("A"));
    assertEquals(0,map.size());
    map.stop();
  }
  @Test public void testDefaultTimeoutMapGetKeys() throws Exception {
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<>(executor,100);
    map.start();
    assertTrue(map.currentTime() > 0);
    assertEquals(0,map.size());
    map.put("A",123,50);
    map.put("B",456,50);
    assertEquals(2,map.size());
    Object[] keys=map.getKeys();
    assertNotNull(keys);
    assertEquals(2,keys.length);
  }
  @Test public void testExecutor() throws Exception {
    ScheduledExecutorService e=Executors.newScheduledThreadPool(2);
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<>(e,50);
    map.start();
    assertEquals(50,map.getPurgePollTime());
    map.put("A",123,100);
    assertEquals(1,map.size());
    Thread.sleep(250);
    if (map.size() > 0) {
      LOG.warn("Waiting extra due slow CI box");
      Thread.sleep(1000);
    }
    assertEquals(0,map.size());
    assertSame(e,map.getExecutor());
    map.stop();
  }
  @Test public void testExpiredInCorrectOrder() throws Exception {
    final List<String> keys=new ArrayList<>();
    final List<Integer> values=new ArrayList<>();
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<String,Integer>(executor,100){
      @Override public boolean onEviction(      String key,      Integer value){
        keys.add(key);
        values.add(value);
        return true;
      }
    }
;
    map.start();
    assertEquals(0,map.size());
    map.put("A",1,50);
    map.put("B",2,30);
    map.put("C",3,40);
    map.put("D",4,20);
    map.put("E",5,40);
    map.put("F",6,800);
    Thread.sleep(250);
    map.purge();
    assertEquals("D",keys.get(0));
    assertEquals(4,values.get(0).intValue());
    assertEquals("B",keys.get(1));
    assertEquals(2,values.get(1).intValue());
    assertEquals("C",keys.get(2));
    assertEquals(3,values.get(2).intValue());
    assertEquals("E",keys.get(3));
    assertEquals(5,values.get(3).intValue());
    assertEquals("A",keys.get(4));
    assertEquals(1,values.get(4).intValue());
    assertEquals(1,map.size());
    map.stop();
  }
  @Test public void testExpiredNotEvicted() throws Exception {
    final List<String> keys=new ArrayList<>();
    final List<Integer> values=new ArrayList<>();
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<String,Integer>(executor,100){
      @Override public boolean onEviction(      String key,      Integer value){
        if ("gold".equals(key)) {
          return false;
        }
        keys.add(key);
        values.add(value);
        return true;
      }
    }
;
    map.start();
    assertEquals(0,map.size());
    map.put("A",1,90);
    map.put("B",2,100);
    map.put("gold",9,110);
    map.put("C",3,120);
    Thread.sleep(250);
    map.purge();
    assertEquals("A",keys.get(0));
    assertEquals(1,values.get(0).intValue());
    assertEquals("B",keys.get(1));
    assertEquals(2,values.get(1).intValue());
    assertEquals("C",keys.get(2));
    assertEquals(3,values.get(2).intValue());
    assertEquals(1,map.size());
    assertEquals(Integer.valueOf(9),map.get("gold"));
    map.stop();
  }
  @Test public void testDefaultTimeoutMapStopStart() throws Exception {
    DefaultTimeoutMap<String,Integer> map=new DefaultTimeoutMap<>(executor,100);
    map.start();
    map.put("A",1,500);
    assertEquals(1,map.size());
    map.stop();
    assertEquals(0,map.size());
    map.put("A",1,50);
    Thread.sleep(250);
    assertEquals(1,map.size());
    map.start();
    await().atMost(2,TimeUnit.SECONDS).untilAsserted(() -> assertEquals(0,map.size()));
    map.stop();
  }
}
