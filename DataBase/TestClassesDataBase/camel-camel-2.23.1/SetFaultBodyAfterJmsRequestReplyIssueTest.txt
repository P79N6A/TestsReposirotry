/** 
 * Tests that setting a fault body after doing JMS works. Because JmsMessage has an JMS specific copyFrom method being used.
 */
public class SetFaultBodyAfterJmsRequestReplyIssueTest extends CamelTestSupport {
  @Test public void testFault() throws Exception {
    Exchange out=template.request("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
      }
    }
);
    assertNotNull(out);
    assertEquals(true,out.isFailed());
    assertEquals(true,out.hasOut());
    assertEquals(true,out.getOut().isFault());
    assertEquals("OnException",out.getOut().getBody());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("OnException");
            exchange.getOut().setFault(true);
          }
        }
);
        from("direct:start").inOut("activemq:queue:foo").throwException(new IllegalArgumentException("Forced"));
        from("activemq:queue:foo").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("Bye World");
          }
        }
);
      }
    }
;
  }
}
