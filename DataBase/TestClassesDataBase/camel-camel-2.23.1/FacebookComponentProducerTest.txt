public class FacebookComponentProducerTest extends CamelFacebookTestSupport {
  private final Set<String> noArgNames=new HashSet<>();
  private final List<String> idExcludes;
  private final List<String> readingExcludes;
  public FacebookComponentProducerTest() throws Exception {
    for (    Class<?> clazz : Facebook.class.getInterfaces()) {
      final String clazzName=clazz.getSimpleName();
      if (clazzName.endsWith("Methods") && !clazzName.equals("GameMethods")) {
        for (        Method method : clazz.getDeclaredMethods()) {
          if (method.getParameterTypes().length == 0 && FacebookMethodsType.findMethod(method.getName()) != null) {
            String shortName=getShortName(method.getName());
            List<String> generalExcludes=Arrays.asList("home","tabs","updates","blocked","pageSettings","pageAdmins","milestones","offers","pokes","promotablePosts","outbox","inbox","notifications");
            if (!generalExcludes.contains(shortName)) {
              noArgNames.add(shortName);
            }
          }
        }
      }
    }
    idExcludes=new ArrayList<>();
    idExcludes.addAll(Arrays.asList("me","home","searchCheckins","taggableFriends"));
    readingExcludes=new ArrayList<>();
    readingExcludes.addAll(Arrays.asList("pictureURL","permissions","taggableFriends","sSLPictureURL"));
    for (    FacebookMethodsType types : FacebookMethodsType.values()) {
      if (types.getArgNames().contains("pageId")) {
        idExcludes.add(getShortName(types.getName()));
        readingExcludes.add(getShortName(types.getName()));
      }
    }
  }
  @Test public void testProducers() throws Exception {
    for (    String name : noArgNames) {
      MockEndpoint mock=getMockEndpoint("mock:result" + name);
      mock.expectedMinimumMessageCount(1);
      template().sendBody("direct://test" + name,null);
      if (!idExcludes.contains(name)) {
        mock=getMockEndpoint("mock:resultId" + name);
        mock.expectedMinimumMessageCount(1);
        template().sendBody("direct://testId" + name,null);
      }
      if (!readingExcludes.contains(name)) {
        mock=getMockEndpoint("mock:resultReading" + name);
        mock.expectedMinimumMessageCount(1);
        template().sendBody("direct://testReading" + name,null);
      }
      if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {
        mock=getMockEndpoint("mock:resultIdReading" + name);
        mock.expectedMinimumMessageCount(1);
        template().sendBody("direct://testIdReading" + name,null);
      }
      if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {
        mock=getMockEndpoint("mock:resultIdReadingHeader" + name);
        mock.expectedMinimumMessageCount(1);
        template().sendBody("direct://testIdReadingHeader" + name,null);
      }
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testJsonStoreEnabled() throws Exception {
    final String rawJSON=template().requestBody("direct://testJsonStoreEnabled",new String[]{"me"},String.class);
    assertNotNull("NULL rawJSON",rawJSON);
    assertFalse("Empty rawJSON",rawJSON.isEmpty());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        onException(FacebookException.class).setHandledPolicy(new IgnoreDeprecatedExceptions());
        for (        String name : noArgNames) {
          from("direct://test" + name).setHeader("mock",constant("mock:result" + name)).to("facebook://" + name + "?"+ getOauthParams()).to("mock:result" + name);
          if (!idExcludes.contains(name)) {
            from("direct://testId" + name).setHeader("mock",constant("mock:resultId" + name)).to("facebook://" + name + "?userId=me&"+ getOauthParams()).to("mock:resultId" + name);
          }
          if (!readingExcludes.contains(name)) {
            from("direct://testReading" + name).setHeader("mock",constant("mock:resultReading" + name)).to("facebook://" + name + "?reading.limit=10&reading.locale=en,US&"+ getOauthParams()).to("mock:resultReading" + name);
          }
          if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {
            from("direct://testIdReading" + name).setHeader("mock",constant("mock:resultIdReading" + name)).to("facebook://" + name + "?userId=me&reading.limit=10&reading.locale=en,US&"+ getOauthParams()).to("mock:resultIdReading" + name);
          }
          if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {
            from("direct://testIdReadingHeader" + name).setHeader("mock",constant("mock:resultIdReadingHeader" + name)).setHeader("CamelFacebook.reading.limit",constant("10")).to("facebook://" + name + "?userId=me&reading.locale=en,US&"+ getOauthParams()).to("mock:resultIdReadingHeader" + name);
          }
        }
        from("direct://testJsonStoreEnabled").to("facebook://users?inBody=ids&jsonStoreEnabled=true&" + getOauthParams()).setBody(simple("header." + FacebookConstants.RAW_JSON_HEADER));
      }
    }
;
  }
private class IgnoreDeprecatedExceptions implements Predicate {
    @Override public boolean matches(    Exchange exchange){
      RuntimeCamelException camelException=exchange.getProperty(Exchange.EXCEPTION_CAUGHT,RuntimeCamelException.class);
      if (camelException != null && camelException.getCause() != null && camelException.getCause() instanceof FacebookException) {
        FacebookException facebookException=(FacebookException)camelException.getCause();
        if (facebookException.getErrorCode() == 11 || facebookException.getErrorCode() == 12) {
          getMockEndpoint(exchange.getIn().getHeader("mock",String.class)).expectedMinimumMessageCount(0);
          return true;
        }
      }
      return false;
    }
  }
}
