public class QuartzComponentCamelContextSchedulerIsolationTest {
  @AfterClass public static void afterTests(){
    System.clearProperty(JmxSystemPropertyKeys.DISABLED);
  }
  @Test public void testSchedulerIsolationUnmanaged() throws Exception {
    disableJMX();
    testSchedulerIsolation();
  }
  @Test public void testSchedulerIsolationManaged() throws Exception {
    enableJMX();
    testSchedulerIsolation();
  }
  private void testSchedulerIsolation() throws Exception {
    CamelContext context=createCamelContext();
    context.start();
    CamelContext anotherContext=createCamelContext();
    assertNotEquals(anotherContext.getName(),context.getName());
    assertNotEquals(anotherContext,context);
    assertNotSame(getDefaultScheduler(context),getDefaultScheduler(anotherContext));
  }
  /** 
 * Create a new camel context instance.
 */
  private DefaultCamelContext createCamelContext(){
    return new DefaultCamelContext();
  }
  /** 
 * Get the quartz component for the provided camel context.
 */
  private QuartzComponent getQuartzComponent(  CamelContext context){
    return context.getComponent("quartz",QuartzComponent.class);
  }
  /** 
 * Get the default scheduler for the provided camel context.
 */
  private Scheduler getDefaultScheduler(  CamelContext context) throws SchedulerException {
    return getQuartzComponent(context).getFactory().getScheduler();
  }
  /** 
 * Disables the JMX agent.
 */
  private void disableJMX(){
    System.setProperty(JmxSystemPropertyKeys.DISABLED,"true");
  }
  /** 
 * Enables the JMX agent.
 */
  private void enableJMX(){
    System.setProperty(JmxSystemPropertyKeys.DISABLED,"false");
  }
}
