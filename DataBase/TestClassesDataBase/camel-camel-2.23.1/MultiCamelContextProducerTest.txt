@RunWith(Arquillian.class) public class MultiCamelContextProducerTest {
  @Produces @ApplicationScoped @ContextName("first") private static CamelContext firstContext=new DefaultCamelContext();
  @Inject private DefaultCamelContextBean defaultCamelContext;
  @Inject @Uri("direct:inbound") private ProducerTemplate defaultInbound;
  @Inject @Uri("mock:outbound") private MockEndpoint defaultOutbound;
  @Inject @ContextName("first") private CamelContext firstCamelContext;
  @Inject @ContextName("first") @Uri("direct:inbound") private ProducerTemplate firstInbound;
  @Inject @ContextName("first") @Uri("mock:outbound") private MockEndpoint firstOutbound;
  @Inject @ContextName("second") private CamelContext secondCamelContext;
  @Inject @ContextName("second") @Uri("direct:inbound") private ProducerTemplate secondInbound;
  @Inject @ContextName("second") @Uri("mock:outbound") private MockEndpoint secondOutbound;
  @Produces @ApplicationScoped @ContextName("second") private static CamelContext secondContext(){
    return new DefaultCamelContext();
  }
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class,UriEndpointRoute.class,FirstCamelContextRoute.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void verifyCamelContexts(){
    assertThat(defaultCamelContext.getName(),is(equalTo("camel-cdi")));
    assertThat(firstCamelContext.getName(),is(equalTo("first")));
    assertThat(secondCamelContext.getName(),is(equalTo("second")));
    assertThat(defaultOutbound.getCamelContext().getName(),is(equalTo(defaultCamelContext.getName())));
    assertThat(firstOutbound.getCamelContext().getName(),is(equalTo(firstCamelContext.getName())));
    assertThat(secondOutbound.getCamelContext().getName(),is(equalTo(secondCamelContext.getName())));
  }
  @Test @InSequence(2) public void configureCamelContexts() throws Exception {
    secondCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:inbound").setHeader("context").constant("second").to("mock:outbound");
      }
    }
);
  }
  @Test @InSequence(3) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {
    defaultOutbound.expectedMessageCount(1);
    defaultOutbound.expectedBodiesReceived("test-default");
    defaultOutbound.message(0).exchange().matches(fromCamelContext("camel-cdi"));
    defaultInbound.sendBody("test-default");
    assertIsSatisfied(2L,TimeUnit.SECONDS,defaultOutbound);
  }
  @Test @InSequence(4) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {
    firstOutbound.expectedMessageCount(1);
    firstOutbound.expectedBodiesReceived("test-first");
    firstOutbound.expectedHeaderReceived("context","first");
    firstOutbound.message(0).exchange().matches(fromCamelContext("first"));
    firstInbound.sendBody("test-first");
    assertIsSatisfied(2L,TimeUnit.SECONDS,firstOutbound);
  }
  @Test @InSequence(5) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {
    secondOutbound.expectedMessageCount(1);
    secondOutbound.expectedBodiesReceived("test-second");
    secondOutbound.expectedHeaderReceived("context","second");
    secondOutbound.message(0).exchange().matches(fromCamelContext("second"));
    secondInbound.sendBody("test-second");
    assertIsSatisfied(2L,TimeUnit.SECONDS,secondOutbound);
  }
}
