/** 
 * Validates Push Image Request headers are applied properly
 */
public class PushImageCmdHeaderTest extends BaseDockerHeaderTest<PushImageCmd> {
  @Mock private PushImageCmd mockObject;
  @Mock private PushImageResultCallback callback;
  private String userName="jdoe";
  private String password="password";
  private String email="jdoe@example.com";
  private String serverAddress="http://docker.io/v1";
  private String name="imagename";
  private String tag="1.0";
  @Test public void pushImageHeaderTest(){
    Map<String,Object> headers=getDefaultParameters();
    headers.put(DockerConstants.DOCKER_USERNAME,userName);
    headers.put(DockerConstants.DOCKER_PASSWORD,password);
    headers.put(DockerConstants.DOCKER_EMAIL,email);
    headers.put(DockerConstants.DOCKER_SERVER_ADDRESS,serverAddress);
    headers.put(DockerConstants.DOCKER_NAME,name);
    headers.put(DockerConstants.DOCKER_TAG,tag);
    template.sendBodyAndHeaders("direct:in","",headers);
    Mockito.verify(dockerClient,Mockito.times(1)).pushImageCmd(name);
    Mockito.verify(mockObject,Mockito.times(1)).withTag(tag);
  }
  @Override protected void setupMocks(){
    Mockito.when(dockerClient.pushImageCmd(anyString())).thenReturn(mockObject);
    Mockito.when(mockObject.exec(any())).thenReturn(callback);
    try {
      Mockito.when(callback.awaitCompletion()).thenReturn(callback);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  @Override protected DockerOperation getOperation(){
    return DockerOperation.PUSH_IMAGE;
  }
  @Override public DockerClientProfile getClientProfile(){
    DockerClientProfile clientProfile=super.getClientProfile();
    clientProfile.setEmail(email);
    clientProfile.setPassword(password);
    clientProfile.setUsername(userName);
    clientProfile.setServerAddress(serverAddress);
    return clientProfile;
  }
}
