public class LogVerifier extends Verifier {
  private final Appender appender;
  private final List<String> messages=new ArrayList<>();
  public LogVerifier(){
    appender=newAppender();
  }
  protected void doAppend(  org.apache.logging.log4j.core.LogEvent event){
    messages.add(event.getMessage().getFormattedMessage());
  }
  public List<String> getMessages(){
    return Collections.unmodifiableList(messages);
  }
  @Override public Statement apply(  final Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        try {
          base.evaluate();
          verify();
        }
  finally {
        }
      }
    }
;
  }
private class LogAppender extends AbstractAppender {
    LogAppender(    String name){
      super(name,null,PatternLayout.newBuilder().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build());
    }
    @Override public void append(    org.apache.logging.log4j.core.LogEvent event){
      doAppend(event);
    }
  }
  private Appender newAppender(){
    final LoggerContext ctx=(LoggerContext)LogManager.getContext(false);
    final Configuration config=ctx.getConfiguration();
    LogAppender appender=new LogAppender("cdi-rule");
    appender.start();
    config.addAppender(appender);
    config.getRootLogger().removeAppender("cdi-rule");
    config.getRootLogger().addAppender(appender,Level.TRACE,null);
    ctx.updateLoggers();
    return appender;
  }
}
