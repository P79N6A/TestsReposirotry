public class JdbcSpringAggregateRecoverWithRedeliveryPolicyTest extends CamelSpringTestSupport {
  private static AtomicInteger counter=new AtomicInteger(0);
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/processor/aggregate/jdbc/JdbcSpringAggregateRecoverWithRedeliveryPolicyTest.xml");
  }
  @Test public void testJdbcAggregateRecover() throws Exception {
    getMockEndpoint("mock:aggregated").setResultWaitTime(20000);
    getMockEndpoint("mock:result").setResultWaitTime(20000);
    getMockEndpoint("mock:aggregated").expectedMessageCount(4);
    getMockEndpoint("mock:result").expectedBodiesReceived("ABCDE");
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
  }
public static class MyFailProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      int count=counter.incrementAndGet();
      if (count <= 3) {
        throw new IllegalArgumentException("Damn");
      }
    }
  }
}
