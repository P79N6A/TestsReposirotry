public class JacksonObjectMapperRegistryTest extends CamelTestSupport {
  private JacksonDataFormat df=new JacksonDataFormat();
  private ObjectMapper objectMapper=new ObjectMapper();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myMapper",objectMapper);
    return jndi;
  }
  @Test public void testMarshalAndUnmarshalMap() throws Exception {
    Map<String,Object> in=new HashMap<>();
    in.put("name","Camel");
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Map.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:in",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"name\":\"Camel\"}",marshalledAsString);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
    assertSame(objectMapper,df.getObjectMapper());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").marshal(df);
        from("direct:back").unmarshal(df).to("mock:reverse");
      }
    }
;
  }
}
