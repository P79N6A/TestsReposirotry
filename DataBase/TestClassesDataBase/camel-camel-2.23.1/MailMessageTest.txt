/** 
 * @version 
 */
public class MailMessageTest extends CamelTestSupport {
  private Session mailSession;
  private MimeMessage mimeMessage;
  private MailEndpoint endpoint;
  private String body="Hello World!";
  @Test public void testMailMessageHandlesMultipleHeaders() throws Exception {
    mimeMessage.setRecipients(Message.RecipientType.TO,new Address[]{new InternetAddress("foo@localhost"),new InternetAddress("bar@localhost")});
    Exchange exchange=endpoint.createExchange(mimeMessage);
    MailMessage in=(MailMessage)exchange.getIn();
    assertNotNull(in);
    assertEquals("mail body",body,in.getBody());
    Object to=in.getHeader("TO");
    Iterator<String> it=CastUtils.cast(ObjectHelper.createIterator(to));
    int i=0;
    while (it.hasNext()) {
      if (i == 0) {
        assertEquals("foo@localhost",it.next().trim());
      }
 else {
        assertEquals("bar@localhost",it.next().trim());
      }
      i++;
    }
  }
  @Test public void testMailMessageHandlesSingleHeader() throws Exception {
    mimeMessage.setRecipients(Message.RecipientType.TO,new Address[]{new InternetAddress("frank@localhost")});
    Exchange exchange=endpoint.createExchange(mimeMessage);
    MailMessage in=(MailMessage)exchange.getIn();
    assertNotNull(in);
    Object header=in.getHeader("TO");
    String value=assertIsInstanceOf(String.class,header);
    assertEquals("value","frank@localhost",value);
    assertEquals("body",body,in.getBody());
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    Mailbox.clearAll();
    endpoint=resolveMandatoryEndpoint("pop3://someone@myhost:30/subject");
    Properties properties=new Properties();
    properties.put("mail.smtp.host","localhost");
    mailSession=Session.getInstance(properties,null);
    mimeMessage=new MimeMessage(mailSession);
    mimeMessage.setText(body);
  }
  @Override protected MailEndpoint resolveMandatoryEndpoint(  String uri){
    Endpoint endpoint=super.resolveMandatoryEndpoint(uri);
    return assertIsInstanceOf(MailEndpoint.class,endpoint);
  }
}
