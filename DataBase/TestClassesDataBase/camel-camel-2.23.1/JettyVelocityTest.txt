public class JettyVelocityTest extends CamelTestSupport {
  private int port;
  @Test public void testClasspath() throws Exception {
    Map<String,Object> map=new HashMap<>();
    map.put("firstName","John");
    map.put("lastName","Doe");
    String response=template.requestBodyAndHeaders("velocity:org/apache/camel/itest/jetty/header.vm","",map,String.class);
    assertEquals("Dear Doe, John",response);
  }
  @Test public void testClasspathInvalidParameter() throws Exception {
    try {
      Map<String,Object> map=new HashMap<>();
      map.put("firstName","John");
      map.put("lastName","Doe");
      template.requestBodyAndHeaders("velocity:org/apache/camel/itest/jetty/?name=header.vm","",map,String.class);
      fail("Should have thrown exception");
    }
 catch (    ResolveEndpointFailedException e) {
      assertTrue(e.getMessage().endsWith("Unknown parameters=[{name=header.vm}]"));
    }
  }
  @Test public void testHttp() throws Exception {
    Map<String,Object> map=new HashMap<>();
    map.put("firstName","John");
    map.put("lastName","Doe");
    String response=template.requestBodyAndHeaders("velocity://http://localhost:" + port + "/test?name=header.vm","",map,String.class);
    assertEquals("Dear Doe, John",response);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    port=AvailablePortFinder.getNextAvailable(8000);
    return new RouteBuilder(){
      public void configure(){
        from("jetty:http://localhost:" + port + "/test").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String name=exchange.getIn().getHeader("name",String.class);
            ObjectHelper.notNull(name,"name");
            name="org/apache/camel/itest/jetty/" + name;
            InputStream is=ResourceHelper.resolveMandatoryResourceAsInputStream(exchange.getContext().getClassResolver(),name);
            String xml=exchange.getContext().getTypeConverter().convertTo(String.class,is);
            exchange.getOut().setBody(xml);
            exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"text/plain");
          }
        }
);
      }
    }
;
  }
}
