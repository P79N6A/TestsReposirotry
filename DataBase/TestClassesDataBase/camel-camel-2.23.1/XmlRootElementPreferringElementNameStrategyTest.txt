public class XmlRootElementPreferringElementNameStrategyTest {
  private static final String DEFAULT_NS="##default";
  private static final String CUSTOM_NS="http://test.com/sample";
  private static final String LOCAL_NAME="sample";
  private XmlRootElementPreferringElementNameStrategy ens=new XmlRootElementPreferringElementNameStrategy();
  @Test public void testFindQNameForSoapActionOrTypeWithXmlSchemaPresent() throws Exception {
    QName qname=ens.findQNameForSoapActionOrType("abc",RequestWithDefaultNs.class);
    assertEquals("local names must match","foo",qname.getLocalPart());
    assertEquals("namespace must match","baz",qname.getNamespaceURI());
  }
  @Test public void testFindQNameForSoapActionOrType() throws Exception {
    QName qname=ens.findQNameForSoapActionOrType(DEFAULT_NS,Request.class);
    assertEquals("local names must match",LOCAL_NAME,qname.getLocalPart());
    assertEquals("namespace must match",CUSTOM_NS,qname.getNamespaceURI());
    qname=ens.findQNameForSoapActionOrType(CUSTOM_NS,Request.class);
    assertEquals("local names must match",LOCAL_NAME,qname.getLocalPart());
    assertEquals("namespace must match",CUSTOM_NS,qname.getNamespaceURI());
  }
  @Test(expected=UnsupportedOperationException.class) public void testFindExceptionForFaultName() throws Exception {
    ens.findExceptionForFaultName(new QName(LOCAL_NAME,CUSTOM_NS));
  }
@XmlType(name="",propOrder={LOCAL_NAME}) @XmlRootElement(name=LOCAL_NAME,namespace=CUSTOM_NS) public class Request implements Serializable {
    private static final long serialVersionUID=1L;
  }
}
