/** 
 * @version 
 */
public class CamelContextSharedProducerServicePoolTest extends ContextTestSupport {
private static class MyProducer extends DefaultProducer implements ServicePoolAware {
    private boolean start;
    private boolean stop;
    MyProducer(    Endpoint endpoint) throws Exception {
      super(endpoint);
      start();
    }
    public void process(    Exchange exchange) throws Exception {
    }
    @Override protected void doStart() throws Exception {
      super.doStart();
      assertEquals("Should not be started twice",false,start);
      start=true;
    }
    @Override protected void doStop() throws Exception {
      super.doStop();
      assertEquals("Should not be stopped twice",false,stop);
      stop=true;
    }
  }
  @Test public void testSharedProducerServicePool() throws Exception {
    assertEquals(100,context.getProducerServicePool().getCapacity());
    context.getProducerServicePool().setCapacity(25);
    assertEquals(25,context.getProducerServicePool().getCapacity());
  }
  @Test public void testSharedProducerServicePoolHitMax() throws Exception {
    assertEquals(100,context.getProducerServicePool().getCapacity());
    ServicePool<Endpoint,Producer> pool=context.getProducerServicePool();
    pool.setCapacity(3);
    assertEquals(3,pool.getCapacity());
    Endpoint endpoint=context.getEndpoint("mock:foo");
    assertNull(pool.acquire(endpoint));
    assertEquals(0,pool.size());
    Producer producer=new MyProducer(endpoint);
    producer=pool.addAndAcquire(endpoint,producer);
    assertEquals(0,pool.size());
    Producer producer2=new MyProducer(endpoint);
    producer2=pool.addAndAcquire(endpoint,producer2);
    assertEquals(0,pool.size());
    Producer producer3=new MyProducer(endpoint);
    producer3=pool.addAndAcquire(endpoint,producer3);
    assertEquals(0,pool.size());
    pool.release(endpoint,producer);
    assertEquals(1,pool.size());
    pool.release(endpoint,producer2);
    assertEquals(2,pool.size());
    pool.release(endpoint,producer3);
    assertEquals(3,pool.size());
    Producer producer4=new MyProducer(endpoint);
    try {
      producer4=pool.addAndAcquire(endpoint,producer4);
      fail("Should throw an exception");
    }
 catch (    IllegalStateException e) {
      assertEquals("Queue full",e.getMessage());
    }
    assertEquals(3,pool.size());
  }
}
