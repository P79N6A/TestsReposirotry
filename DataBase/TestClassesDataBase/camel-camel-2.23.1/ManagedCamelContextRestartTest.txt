/** 
 * @version 
 */
public class ManagedCamelContextRestartTest extends ManagementTestSupport {
  private int starts;
  private int stops;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      @Override public void notify(      EventObject event) throws Exception {
      }
      @Override public boolean isEnabled(      EventObject event){
        return true;
      }
      @Override protected void doStart() throws Exception {
        starts++;
      }
      @Override protected void doStop() throws Exception {
        stops++;
      }
    }
);
  }
  @Test public void testManagedCamelContext() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    String name=(String)mbeanServer.getAttribute(on,"CamelId");
    assertEquals("camel-1",name);
    String uptime=(String)mbeanServer.getAttribute(on,"Uptime");
    assertNotNull(uptime);
    long uptimeMillis=(Long)mbeanServer.getAttribute(on,"UptimeMillis");
    assertTrue(uptimeMillis > 0);
    String status=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Started",status);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    Object reply=mbeanServer.invoke(on,"requestBody",new Object[]{"direct:foo","Hello World"},new String[]{"java.lang.String","java.lang.Object"});
    assertEquals("Bye World",reply);
    assertEquals(0,starts);
    assertEquals(0,stops);
    mbeanServer.invoke(on,"restart",null,null);
    assertEquals(1,starts);
    assertEquals(1,stops);
    status=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Started",status);
    reply=mbeanServer.invoke(on,"requestBody",new Object[]{"direct:foo","Hello Camel"},new String[]{"java.lang.String","java.lang.Object"});
    assertEquals("Bye World",reply);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").delay(10).transform(constant("Bye World"));
      }
    }
;
  }
}
