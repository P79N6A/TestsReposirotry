public class MllpTcpServerConsumerMulitpleTcpPacketTest extends CamelTestSupport {
  @Rule public MllpClientResource mllpClient=new MllpClientResource();
  @EndpointInject(uri="mock://result") MockEndpoint result;
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=(DefaultCamelContext)super.createCamelContext();
    context.setUseMDCLogging(true);
    context.setName(this.getClass().getSimpleName());
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder(){
    final int groupInterval=1000;
    final boolean groupActiveOnly=false;
    mllpClient.setMllpHost("localhost");
    mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());
    return new RouteBuilder(){
      String routeId="mllp-receiver";
      @Override public void configure() throws Exception {
        onCompletion().log(LoggingLevel.INFO,routeId,"Test route complete");
        fromF("mllp://%s:%d",mllpClient.getMllpHost(),mllpClient.getMllpPort()).routeId(routeId).process(new PassthroughProcessor("Before send to result")).to(result).toF("log://%s?level=INFO&groupInterval=%d&groupActiveOnly=%b",routeId,groupInterval,groupActiveOnly).log(LoggingLevel.DEBUG,routeId,"Test route received message");
      }
    }
;
  }
  @Test public void testReceiveSingleMessage() throws Exception {
    mllpClient.connect();
    String message=Hl7TestMessageGenerator.generateMessage();
    result.expectedBodiesReceived(message);
    mllpClient.sendFramedDataInMultiplePackets(message,(byte)'\r');
    String acknowledgement=mllpClient.receiveFramedData();
    assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
    Assert.assertThat("Should be acknowledgment for message 1",acknowledgement,CoreMatchers.containsString(String.format("MSA|AA|00001")));
  }
  @Test public void testReceiveMultipleMessages() throws Exception {
    int sendMessageCount=100;
    result.expectedMessageCount(sendMessageCount);
    mllpClient.setSoTimeout(10000);
    mllpClient.connect();
    for (int i=1; i <= sendMessageCount; ++i) {
      String testMessage=Hl7TestMessageGenerator.generateMessage(i);
      result.message(i - 1).body().isEqualTo(testMessage);
      mllpClient.sendFramedDataInMultiplePackets(testMessage,(byte)'\r');
      String acknowledgement=mllpClient.receiveFramedData();
      Assert.assertThat("Should be acknowledgment for message " + i,acknowledgement,CoreMatchers.containsString(String.format("MSA|AA|%05d",i)));
    }
    assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
  }
}
