public class CxfConsumerTest extends CamelTestSupport {
  protected static final String SIMPLE_ENDPOINT_ADDRESS="http://localhost:" + CXFTestSupport.getPort1() + "/CxfConsumerTest/test";
  protected static final String SIMPLE_ENDPOINT_URI="cxf://" + SIMPLE_ENDPOINT_ADDRESS + "?serviceClass=org.apache.camel.component.cxf.HelloService"+ "&publishedEndpointUrl=http://www.simple.com/services/test";
  private static final String ECHO_REQUEST="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">Hello World!</arg0></ns1:echo></soap:Body></soap:Envelope>";
  private static final String ECHO_OPERATION="echo";
  private static final String ECHO_BOOLEAN_OPERATION="echoBoolean";
  private static final String TEST_MESSAGE="Hello World!";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(SIMPLE_ENDPOINT_URI).choice().when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_OPERATION)).process(new Processor(){
          public void process(          final Exchange exchange){
            assertEquals(DataFormat.POJO,exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.class));
            Message in=exchange.getIn();
            org.apache.cxf.message.Message cxfMessage=in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE,org.apache.cxf.message.Message.class);
            assertNotNull("Should get the cxfMessage instance from message header",cxfMessage);
            ServletRequest request=(ServletRequest)cxfMessage.get("HTTP.REQUEST");
            assertNotNull("Should get the ServletRequest",request);
            assertNotNull("Should get the RemoteAddress",request.getRemoteAddr());
            String contentType=in.getHeader(Exchange.CONTENT_TYPE,String.class);
            assertNotNull("Should get the contentType.",contentType);
            List<?> parameter=in.getBody(List.class);
            String operation=(String)in.getHeader(CxfConstants.OPERATION_NAME);
            Object result=operation + " " + (String)parameter.get(0);
            exchange.getOut().setBody(result);
            Map<String,Object> map=new HashMap<>();
            map.put("org.apache.cxf.stax.force-start-document",Boolean.TRUE);
            exchange.getOut().setHeader(Client.RESPONSE_CONTEXT,map);
          }
        }
).when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_BOOLEAN_OPERATION)).process(new Processor(){
          public void process(          final Exchange exchange){
            Message in=exchange.getIn();
            List<?> parameter=in.getBody(List.class);
            exchange.getOut().setBody(parameter.get(0));
          }
        }
);
      }
    }
;
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(SIMPLE_ENDPOINT_ADDRESS);
    clientBean.setServiceClass(HelloService.class);
    clientBean.setBus(BusFactory.newInstance().createBus());
    HelloService client=(HelloService)proxyFactory.create();
    String result=client.echo(TEST_MESSAGE);
    assertEquals("We should get the echo string result from router",result,"echo " + TEST_MESSAGE);
    Boolean bool=client.echoBoolean(Boolean.TRUE);
    assertNotNull("The result should not be null",bool);
    assertEquals("We should get the echo boolean result from router ",bool.toString(),"true");
  }
  @Test public void testXmlDeclaration() throws Exception {
    String response=template.requestBodyAndHeader(SIMPLE_ENDPOINT_ADDRESS,ECHO_REQUEST,Exchange.CONTENT_TYPE,"text/xml; charset=UTF-8",String.class);
    assertTrue("Can't find the xml declaration.",response.startsWith("<?xml version='1.0' encoding="));
  }
  @Test public void testPublishEndpointUrl() throws Exception {
    String response=template.requestBody(SIMPLE_ENDPOINT_ADDRESS + "?wsdl",null,String.class);
    assertTrue("Can't find the right service location.",response.indexOf("http://www.simple.com/services/test") > 0);
  }
}
