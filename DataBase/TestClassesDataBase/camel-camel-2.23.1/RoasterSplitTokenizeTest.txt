public class RoasterSplitTokenizeTest {
  private static final Logger LOG=LoggerFactory.getLogger(RoasterSplitTokenizeTest.class);
  @Test public void parse() throws Exception {
    JavaClassSource clazz=(JavaClassSource)Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/SplitTokenizeTest.java"));
    MethodSource<JavaClassSource> method=CamelJavaParserHelper.findConfigureMethod(clazz);
    List<CamelEndpointDetails> details=new ArrayList<>();
    RouteBuilderParser.parseRouteBuilderEndpoints(clazz,"src/test/java","org/apache/camel/parser/SplitTokenizeTest.java",details);
    LOG.info("{}",details);
    List<ParserResult> list=CamelJavaParserHelper.parseCamelConsumerUris(method,true,true);
    for (    ParserResult result : list) {
      LOG.info("Consumer: " + result.getElement());
    }
    Assert.assertEquals("direct:a",list.get(0).getElement());
    Assert.assertEquals("direct:b",list.get(1).getElement());
    Assert.assertEquals("direct:c",list.get(2).getElement());
    Assert.assertEquals("direct:d",list.get(3).getElement());
    Assert.assertEquals("direct:e",list.get(4).getElement());
    Assert.assertEquals("direct:f",list.get(5).getElement());
    list=CamelJavaParserHelper.parseCamelProducerUris(method,true,true);
    for (    ParserResult result : list) {
      LOG.info("Producer: " + result.getElement());
    }
    Assert.assertEquals("mock:split",list.get(0).getElement());
    Assert.assertEquals("mock:split",list.get(1).getElement());
    Assert.assertEquals("mock:split",list.get(2).getElement());
    Assert.assertEquals("mock:split",list.get(3).getElement());
    Assert.assertEquals("mock:split",list.get(4).getElement());
    Assert.assertEquals("mock:split",list.get(5).getElement());
    Assert.assertEquals(12,details.size());
    Assert.assertEquals("direct:a",details.get(0).getEndpointUri());
    Assert.assertEquals("mock:split",details.get(11).getEndpointUri());
  }
}
