public class FtpProducerDisconnectOnBatchCompleteTest extends FtpServerTestSupport {
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    FtpEndpoint<?> endpoint=context.getEndpoint(getFtpUrl(),FtpEndpoint.class);
    endpoint.setFtpClient(new FTPClient());
  }
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/done?password=admin&disconnectOnBatchComplete=true";
  }
  @Test public void testDisconnectOnBatchComplete() throws Exception {
    sendFile(getFtpUrl(),"Hello World","claus.txt");
    Thread.sleep(2000);
    FtpEndpoint<?> endpoint=context.getEndpoint(getFtpUrl(),FtpEndpoint.class);
    assertFalse("The FTPClient should be already disconnected",endpoint.getFtpClient().isConnected());
    assertTrue("The FtpEndpoint should be configured to disconnect",endpoint.isDisconnectOnBatchComplete());
  }
  @Override public void sendFile(  String url,  Object body,  String fileName){
    template.send(url,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(Exchange.FILE_NAME,simple(fileName));
        exchange.setProperty(Exchange.BATCH_COMPLETE,true);
      }
    }
);
  }
}
