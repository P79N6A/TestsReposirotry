public class FromFtpConsumerTemplateRollbackTest extends FtpServerTestSupport {
  protected String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/deletefile?password=admin&binary=false&delete=true";
  }
  protected String getFtpUrlInvalid(){
    return "ftp://admin@localhost:" + getPort() + "/unknown?password=admin&binary=false&delete=true&autoCreate=false";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testConsumerTemplateRollback() throws Exception {
    try {
      consumer.receiveBody(getFtpUrlInvalid(),2000,String.class);
      fail("Should fail and rollback");
    }
 catch (    Exception e) {
      GenericFileOperationFailedException ge=assertIsInstanceOf(GenericFileOperationFailedException.class,e);
      assertEquals(550,ge.getCode());
    }
  }
  private void prepareFtpServer() throws Exception {
    Endpoint endpoint=context.getEndpoint(getFtpUrl());
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setBody("Hello World this file will be deleted");
    exchange.getIn().setHeader(Exchange.FILE_NAME,"hello.txt");
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    producer.stop();
    File file=new File(FTP_ROOT_DIR + "/deletefile/hello.txt");
    assertTrue("The file should exists",file.exists());
  }
}
