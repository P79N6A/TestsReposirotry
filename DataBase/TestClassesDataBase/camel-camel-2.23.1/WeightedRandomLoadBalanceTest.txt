public class WeightedRandomLoadBalanceTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testRandom() throws Exception {
    x.expectedMessageCount(4);
    y.expectedMessageCount(2);
    z.expectedMessageCount(1);
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").loadBalance().weighted(false,"4,2,1").to("mock:x","mock:y","mock:z");
      }
    }
);
    context.start();
    sendMessages(1,2,3,4,5,6,7);
    assertMockEndpointsSatisfied();
  }
  @Test public void testRandom2() throws Exception {
    x.expectedMessageCount(2);
    y.expectedMessageCount(1);
    z.expectedMessageCount(3);
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").loadBalance().weighted(false,"2, 1, 3",",").to("mock:x","mock:y","mock:z");
      }
    }
);
    context.start();
    sendMessages(1,2,3,4,5,6);
    assertMockEndpointsSatisfied();
  }
  @Test public void testRandomBulk() throws Exception {
    x.expectedMessageCount(10);
    y.expectedMessageCount(15);
    z.expectedMessageCount(25);
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").loadBalance().weighted(false,"2-3-5","-").to("mock:x","mock:y","mock:z");
      }
    }
);
    context.start();
    sendBulkMessages(50);
    assertMockEndpointsSatisfied();
  }
  @Test public void testUnmatchedRatiosToProcessors() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        public void configure(){
          from("direct:start").loadBalance().weighted(false,"2,3").to("mock:x","mock:y","mock:z");
        }
      }
);
      context.start();
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Loadbalacing with 3 should match number of distributions 2",iae.getMessage());
    }
  }
  protected void sendBulkMessages(  int number){
    for (int i=0; i < number; i++) {
      template.sendBodyAndHeader("direct:start",createTestMessage(i),"counter",i);
    }
  }
  protected void sendMessages(  int... counters){
    for (    int counter : counters) {
      template.sendBodyAndHeader("direct:start",createTestMessage(counter),"counter",counter);
    }
  }
  private String createTestMessage(  int counter){
    return "<message>" + counter + "</message>";
  }
}
