/** 
 * @version 
 */
public class GroovyExpressionTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(GroovyExpressionTest.class);
  protected Exchange exchange;
  @Test public void testExpressionReturnsTheCorrectValue() throws Exception {
    assertExpression(GroovyLanguage.groovy("exchange.in.headers['foo.bar']"),exchange,"cheese");
    assertExpression(GroovyLanguage.groovy("exchange.in.headers.name"),exchange,"James");
    assertExpression(GroovyLanguage.groovy("exchange.in.headers['doesNotExist']"),exchange,null);
  }
  @Test public void testPredicateEvaluation() throws Exception {
    assertPredicate(GroovyLanguage.groovy("exchange.in.headers.name == 'James'"),exchange,true);
    assertPredicate(GroovyLanguage.groovy("exchange.in.headers.name == 'Hiram'"),exchange,false);
    assertPredicate(GroovyLanguage.groovy("request.headers.name == 'James'"),exchange,true);
  }
  @Test public void testProcessorMutatesTheExchange() throws Exception {
    GroovyLanguage.groovy("request.headers.myNewHeader = 'ABC'").evaluate(exchange);
    assertInMessageHeader(exchange,"myNewHeader","ABC");
  }
  @Test public void testInvalidExpressionFailsWithMeaningfulException() throws Exception {
    try {
      GroovyLanguage.groovy("exchange.doesNotExist").evaluate(exchange);
      fail("This test case should have thrown an exception!");
    }
 catch (    Exception e) {
      LOG.debug("Caught expected exception: " + e,e);
      String message=e.getMessage();
      assertTrue("The message should include 'doesNotExist' but was: " + message,message.contains("doesNotExist"));
    }
  }
  @Override @Before public void setUp() throws Exception {
    exchange=new DefaultExchange(new DefaultCamelContext());
    exchange.getIn().setHeader("foo.bar","cheese");
    exchange.getIn().setHeader("name","James");
  }
}
