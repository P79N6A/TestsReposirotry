public class EmbeddedZookeeper extends ExternalResource {
  private int port=-1;
  private int tickTime=500;
  private ServerCnxnFactory cnxnFactory;
  private File snapshotDir;
  private File logDir;
  private ZooKeeperServer zooKeeperServer;
  public EmbeddedZookeeper(){
    this(AvailablePortFinder.getNextAvailable());
  }
  public EmbeddedZookeeper(  int port){
    this.port=port;
  }
  @Override public void before() throws IOException {
    this.snapshotDir=constructTempDir(perTest("zk-snapshot"));
    this.logDir=constructTempDir(perTest("zk-log"));
    try {
      zooKeeperServer=new ZooKeeperServer(snapshotDir,logDir,tickTime);
      cnxnFactory=new NIOServerCnxnFactory();
      cnxnFactory.configure(new InetSocketAddress("localhost",port),1024);
      cnxnFactory.startup(zooKeeperServer);
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
  }
  @Override public void after(){
    cnxnFactory.shutdown();
    zooKeeperServer.shutdown();
    try {
      TestUtils.deleteFile(snapshotDir);
    }
 catch (    FileNotFoundException e) {
    }
    try {
      TestUtils.deleteFile(logDir);
    }
 catch (    FileNotFoundException e) {
    }
  }
  public String getConnection(){
    return "localhost:" + port;
  }
  public int getPort(){
    return port;
  }
  @Override public String toString(){
    final StringBuilder sb=new StringBuilder("EmbeddedZookeeper{");
    sb.append("connection=").append(getConnection());
    sb.append('}');
    return sb.toString();
  }
}
