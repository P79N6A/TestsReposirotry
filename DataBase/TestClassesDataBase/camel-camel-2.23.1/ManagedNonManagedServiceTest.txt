/** 
 * @version 
 */
public class ManagedNonManagedServiceTest extends ManagementTestSupport {
  @Test public void testService() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    context.getManagementStrategy().getManagementAgent().setRegisterAlways(true);
    MyService service=new MyService();
    for (    LifecycleStrategy strategy : context.getLifecycleStrategies()) {
      strategy.onServiceAdd(context,service,null);
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=services,*"),null);
    assertEquals(11,set.size());
  }
  @Test public void testNonManagedService() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    context.getManagementStrategy().getManagementAgent().setRegisterAlways(true);
    MyNonService service=new MyNonService();
    for (    LifecycleStrategy strategy : context.getLifecycleStrategies()) {
      strategy.onServiceAdd(context,service,null);
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=services,*"),null);
    assertEquals(10,set.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
      }
    }
;
  }
private final class MyService extends ServiceSupport {
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
private final class MyNonService extends ServiceSupport implements NonManagedService {
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
