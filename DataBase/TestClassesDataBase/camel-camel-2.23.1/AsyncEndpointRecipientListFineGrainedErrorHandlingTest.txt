/** 
 * @version 
 */
public class AsyncEndpointRecipientListFineGrainedErrorHandlingTest extends ContextTestSupport {
  private static int counter;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("fail",new MyFailBean());
    return jndi;
  }
  @Test public void testAsyncEndpointOK() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2);
        from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException();
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:baz").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","foo","mock:foo,async:bye:camel,mock:bar,mock:baz");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAsyncEndpointERROR() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2);
        from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException();
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:baz").expectedMessageCount(0);
    try {
      template.sendBodyAndHeader("direct:start","Hello World","foo","mock:foo,mock:bar,bean:fail,mock:baz");
      fail("Should throw exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
    assertEquals(3,counter);
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
public static class MyFailBean {
    public String doSomething(    Exchange exchange) throws Exception {
      counter++;
      assertEquals("bean://fail",exchange.getProperty(Exchange.TO_ENDPOINT,String.class));
      throw new IllegalArgumentException("Damn");
    }
  }
}
