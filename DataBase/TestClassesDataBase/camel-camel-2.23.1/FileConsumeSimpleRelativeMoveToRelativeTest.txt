/** 
 * @version 
 */
public class FileConsumeSimpleRelativeMoveToRelativeTest extends ContextTestSupport {
  private String fileUrl="file://target/move";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/move");
    super.setUp();
  }
  @Test public void testMoveToSubDir() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    mock.expectedFileExists("target/move/.done/bye.txt");
    mock.expectedFileExists("target/move/sub/.done/hello.txt");
    mock.expectedFileExists("target/move/sub/sub2/.done/goodday.txt");
    template.sendBodyAndHeader(fileUrl,"Bye World",Exchange.FILE_NAME,"bye.txt");
    template.sendBodyAndHeader(fileUrl,"Hello World",Exchange.FILE_NAME,"sub/hello.txt");
    template.sendBodyAndHeader(fileUrl,"Goodday World",Exchange.FILE_NAME,"sub/sub2/goodday.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/move?recursive=true&move=.done&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
