/** 
 */
public class SplitterPropertyContinuedTest extends ContextTestSupport {
  @Test public void testSplitterPropertyContinued() throws Exception {
    getMockEndpoint("mock:end").expectedBodiesReceived("A,Kaboom,B,C");
    getMockEndpoint("mock:end").message(0).exchangeProperty("errorCode").isNull();
    getMockEndpoint("mock:error").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:error").message(0).exchangeProperty("errorCode").isEqualTo("ERR-1");
    getMockEndpoint("mock:split").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:split").allMessages().exchangeProperty("errorCode").isNull();
    template.sendBody("direct:start","A,Kaboom,B,C");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).continued(true).setProperty("errorCode",constant("ERR-1"));
        from("direct:start").split(body()).log("Step #1 - Body: ${body} with error code: ${property.errorCode}").choice().when(body().contains("Kaboom")).throwException(new IllegalArgumentException("Damn")).end().log("Step #2 - Body: ${body} with error code: ${property.errorCode}").choice().when(simple("${property.errorCode} != null")).to("mock:error").otherwise().to("mock:split").end().end().to("mock:end");
      }
    }
;
  }
}
