/** 
 * @version
 */
public class OnExceptionContinueTwoPredicateTest extends OnExceptionContinueTwoTest {
  private final AtomicInteger predicateInvoked=new AtomicInteger();
  private final AtomicInteger processorInvoked=new AtomicInteger();
  @Override @Test public void testContinuedTwo() throws Exception {
    getMockEndpoint("mock:me").expectedMessageCount(2);
    super.testContinuedTwo();
    assertEquals(2,predicateInvoked.get());
    assertEquals(2,processorInvoked.get());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        Predicate predicate=new Predicate(){
          @Override public boolean matches(          Exchange exchange){
            predicateInvoked.incrementAndGet();
            return true;
          }
        }
;
        onException(IllegalArgumentException.class).continued(predicate).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            processorInvoked.incrementAndGet();
          }
        }
).to("mock:me");
        from("direct:start").to("mock:start").throwException(new IllegalArgumentException("Forced")).to("mock:middle").throwException(new IllegalArgumentException("Forced Again")).to("mock:result");
      }
    }
;
  }
}
