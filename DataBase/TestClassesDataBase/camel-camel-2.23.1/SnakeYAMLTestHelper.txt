public final class SnakeYAMLTestHelper {
  protected SnakeYAMLTestHelper(){
  }
  public static TestPojo createTestPojo(){
    return new TestPojo("Camel");
  }
  public static Map<String,String> createTestMap(){
    Map<String,String> map=new HashMap<>();
    map.put("name","Camel");
    return map;
  }
  public static SnakeYAMLDataFormat createDataFormat(  final Class<?> type){
    SnakeYAMLDataFormat format=new SnakeYAMLDataFormat();
    if (type != null) {
      format.setUnmarshalType(type);
    }
    return format;
  }
  public static SnakeYAMLDataFormat createPrettyFlowDataFormat(  Class<?> type,  boolean prettyFlow){
    SnakeYAMLDataFormat format=createDataFormat(type);
    format.setPrettyFlow(prettyFlow);
    return format;
  }
  public static SnakeYAMLDataFormat createClassTagDataFormat(  Class<?> type,  Tag tag){
    SnakeYAMLDataFormat format=createDataFormat(type);
    format.addTag(type,tag);
    return format;
  }
  public static void marshalAndUnmarshal(  CamelContext context,  Object body,  String mockName,  String directIn,  String directBack,  String expected) throws Exception {
    MockEndpoint mock=context.getEndpoint(mockName,MockEndpoint.class);
    assertNotNull(mock);
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(body.getClass());
    mock.message(0).body().isEqualTo(body);
    ProducerTemplate template=context.createProducerTemplate();
    String result=template.requestBody(directIn,body,String.class);
    assertNotNull(result);
    assertEquals(expected,result.trim());
    template.sendBody(directBack,result);
    mock.assertIsSatisfied();
  }
}
