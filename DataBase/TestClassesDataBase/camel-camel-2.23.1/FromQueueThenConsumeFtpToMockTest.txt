/** 
 * Unit test based on user forum question
 */
public class FromQueueThenConsumeFtpToMockTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/getme?password=admin&binary=false&delay=5000";
  }
  private String getStoreUrl(){
    return "ftp://admin@localhost:" + getPort() + "/getme?password=admin&binary=false";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  @Test public void testFromQueueThenConsumeFtp() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    template.sendBodyAndHeader("seda:start","Hello World","myfile","hello.txt");
    assertMockEndpointsSatisfied();
  }
  private void prepareFtpServer() throws Exception {
    Endpoint endpoint=context.getEndpoint(getStoreUrl());
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setBody("Bye World");
    exchange.getIn().setHeader(Exchange.FILE_NAME,"hello.txt");
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    producer.stop();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("seda:start").process(new Processor(){
          public void process(          final Exchange exchange) throws Exception {
            String filename=exchange.getIn().getHeader("myfile",String.class);
            String url=getFtpUrl() + "&fileName=" + filename;
            Endpoint ftp=context.getEndpoint(url);
            PollingConsumer consumer=ftp.createPollingConsumer();
            consumer.start();
            Exchange result=consumer.receive();
            exchange.getIn().setBody(result.getIn().getBody());
            consumer.stop();
          }
        }
).to("mock:result");
      }
    }
;
  }
}
