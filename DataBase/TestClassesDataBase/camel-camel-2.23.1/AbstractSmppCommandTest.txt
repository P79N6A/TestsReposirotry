public class AbstractSmppCommandTest {
  private SMPPSession session=new SMPPSession();
  private SmppConfiguration config=new SmppConfiguration();
  private AbstractSmppCommand command;
  @Before public void setUp(){
    session=new SMPPSession();
    config=new SmppConfiguration();
    command=new AbstractSmppCommand(session,config){
      @Override public void execute(      Exchange exchange) throws SmppException {
      }
    }
;
  }
  @Test public void constructor(){
    assertSame(session,command.session);
    assertSame(config,command.config);
  }
  @Test public void getResponseMessage(){
    Exchange inOnlyExchange=new DefaultExchange(new DefaultCamelContext(),ExchangePattern.InOnly);
    Exchange inOutExchange=new DefaultExchange(new DefaultCamelContext(),ExchangePattern.InOut);
    assertSame(inOnlyExchange.getIn(),command.getResponseMessage(inOnlyExchange));
    assertSame(inOutExchange.getOut(),command.getResponseMessage(inOutExchange));
  }
  @Test public void determineTypeClass() throws Exception {
    assertSame(OptionalParameter.Source_subaddress.class,command.determineTypeClass(Tag.SOURCE_SUBADDRESS));
    assertSame(OptionalParameter.Additional_status_info_text.class,command.determineTypeClass(Tag.ADDITIONAL_STATUS_INFO_TEXT));
    assertSame(OptionalParameter.Dest_addr_subunit.class,command.determineTypeClass(Tag.DEST_ADDR_SUBUNIT));
    assertSame(OptionalParameter.Dest_telematics_id.class,command.determineTypeClass(Tag.DEST_TELEMATICS_ID));
    assertSame(OptionalParameter.Qos_time_to_live.class,command.determineTypeClass(Tag.QOS_TIME_TO_LIVE));
    assertSame(OptionalParameter.Alert_on_message_delivery.class,command.determineTypeClass(Tag.ALERT_ON_MESSAGE_DELIVERY));
  }
}
