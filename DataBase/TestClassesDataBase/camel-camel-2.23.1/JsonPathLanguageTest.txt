public class JsonPathLanguageTest extends CamelTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testExpressionArray() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new File("src/test/resources/books.json"));
    Language lan=context.resolveLanguage("jsonpath");
    Expression exp=lan.createExpression("$.store.book[*].author");
    List<?> authors=exp.evaluate(exchange,List.class);
    log.debug("Authors {}",authors);
    assertNotNull(authors);
    assertEquals(2,authors.size());
    assertEquals("Nigel Rees",authors.get(0));
    assertEquals("Evelyn Waugh",authors.get(1));
    exp=lan.createExpression("$.store.bicycle.price");
    String price=exp.evaluate(exchange,String.class);
    assertEquals("Got a wrong result","19.95",price);
  }
  @Test public void testExpressionField() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new File("src/test/resources/type.json"));
    Language lan=context.resolveLanguage("jsonpath");
    Expression exp=lan.createExpression("$.kind");
    String kind=exp.evaluate(exchange,String.class);
    assertNotNull(kind);
    assertEquals("full",kind);
    exp=lan.createExpression("$.type");
    String type=exp.evaluate(exchange,String.class);
    assertNotNull(type);
    assertEquals("customer",type);
  }
  @Test public void testExpressionPojo() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Map pojo=new HashMap();
    pojo.put("kind","full");
    pojo.put("type","customer");
    exchange.getIn().setBody(pojo);
    Language lan=context.resolveLanguage("jsonpath");
    Expression exp=lan.createExpression("$.kind");
    String kind=exp.evaluate(exchange,String.class);
    assertNotNull(kind);
    assertEquals("full",kind);
    exp=lan.createExpression("$.type");
    String type=exp.evaluate(exchange,String.class);
    assertNotNull(type);
    assertEquals("customer",type);
  }
  @Test public void testPredicate() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new File("src/test/resources/books.json"));
    Language lan=context.resolveLanguage("jsonpath");
    Predicate pre=lan.createPredicate("$.store.book[?(@.price < 10)]");
    boolean cheap=pre.matches(exchange);
    assertTrue("Should have cheap books",cheap);
    pre=lan.createPredicate("$.store.book[?(@.price > 30)]");
    boolean expensive=pre.matches(exchange);
    assertFalse("Should not have expensive books",expensive);
  }
  @Test public void testSuppressException() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new File("src/test/resources/type.json"));
    JsonPathLanguage lan=(JsonPathLanguage)context.resolveLanguage("jsonpath");
    lan.setOption(Option.SUPPRESS_EXCEPTIONS);
    Expression exp=lan.createExpression("$.foo");
    String nofoo=exp.evaluate(exchange,String.class);
    assertNull(nofoo);
  }
}
