/** 
 */
public class ScheduledPollEndpointConfigureConsumerRestartTest extends ContextTestSupport {
  private MyEndpoint my;
  private Map<String,Object> props=new HashMap<>();
  @Test public void testRestart() throws Exception {
    getMockEndpoint("mock:result").expectedMinimumMessageCount(1);
    assertMockEndpointsSatisfied();
    assertEquals("Hello",getMockEndpoint("mock:result").getExchanges().get(0).getIn().getBody());
    assertEquals(123,getMockEndpoint("mock:result").getExchanges().get(0).getIn().getHeader("foo"));
    resetMocks();
    context.stopRoute("foo");
    getMockEndpoint("mock:result").expectedMinimumMessageCount(1);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    assertEquals("Hello",getMockEndpoint("mock:result").getExchanges().get(0).getIn().getBody());
    assertEquals(123,getMockEndpoint("mock:result").getExchanges().get(0).getIn().getHeader("foo"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        props.put("foo",123);
        props.put("bar","Hello");
        props.put("delay",1000);
        my=new MyEndpoint();
        my.setCamelContext(context);
        my.setConsumerProperties(props);
        from(my).routeId("foo").to("mock:result");
      }
    }
;
  }
private static class MyEndpoint extends ScheduledPollEndpoint {
    @Override public Producer createProducer() throws Exception {
      return null;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      MyConsumer answer=new MyConsumer(this,processor);
      configureConsumer(answer);
      return answer;
    }
    @Override public boolean isSingleton(){
      return true;
    }
    @Override protected String createEndpointUri(){
      return "myendpoint:foo";
    }
  }
public static final class MyConsumer extends ScheduledPollConsumer {
    private int foo;
    private String bar;
    public MyConsumer(    Endpoint endpoint,    Processor processor){
      super(endpoint,processor);
    }
    public int getFoo(){
      return foo;
    }
    public void setFoo(    int foo){
      this.foo=foo;
    }
    public String getBar(){
      return bar;
    }
    public void setBar(    String bar){
      this.bar=bar;
    }
    @Override protected int poll() throws Exception {
      Exchange exchange=new DefaultExchange(getEndpoint());
      exchange.getIn().setBody(bar);
      exchange.getIn().setHeader("foo",foo);
      getProcessor().process(exchange);
      return 1;
    }
  }
}
