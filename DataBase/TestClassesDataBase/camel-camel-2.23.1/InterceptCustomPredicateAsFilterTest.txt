/** 
 * @version 
 */
public class InterceptCustomPredicateAsFilterTest extends ContextTestSupport {
  private MyFiler filter=new MyFiler();
private static class MyFiler implements Predicate {
    private List<String> bodies=new ArrayList<>();
    public boolean matches(    Exchange exchange){
      String body=exchange.getIn().getBody(String.class);
      bodies.add(body);
      return !"secret".equals(body);
    }
    public List<String> getBodies(){
      return bodies;
    }
  }
  @Test public void testInterceptCustomPredicateAsFilter() throws Exception {
    getMockEndpoint("mock:good").expectedBodiesReceived("Hello World","Bye World");
    getMockEndpoint("mock:secret").expectedBodiesReceived("secret");
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","secret");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
    assertEquals("Hello World",filter.getBodies().get(0));
    assertEquals("secret",filter.getBodies().get(1));
    assertEquals("Bye World",filter.getBodies().get(2));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        intercept().when(not(filter)).to("mock:secret").stop();
        from("direct:start").to("mock:good");
      }
    }
;
  }
}
