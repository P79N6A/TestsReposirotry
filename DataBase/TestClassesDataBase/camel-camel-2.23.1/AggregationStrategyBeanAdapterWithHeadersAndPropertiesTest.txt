public class AggregationStrategyBeanAdapterWithHeadersAndPropertiesTest extends ContextTestSupport {
  private MyBodyAppender appender=new MyBodyAppender();
  @Test public void testAggregate() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("ABC");
    getMockEndpoint("mock:result").expectedHeaderReceived("foo","yesyesyes");
    getMockEndpoint("mock:result").expectedPropertyReceived("count",6);
    template.sendBodyAndProperty("direct:start","A","count",1);
    template.sendBodyAndProperty("direct:start","B","count",2);
    template.sendBodyAndProperty("direct:start","C","count",3);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setHeader("foo",constant("yes")).aggregate(constant(true),AggregationStrategies.bean(appender,"appendWithHeadersAndProperties")).completionSize(3).to("mock:result");
      }
    }
;
  }
public static final class MyBodyAppender {
    public String appendWithHeadersAndProperties(    String existing,    Map<String,String> oldHeaders,    Map<String,Integer> oldProperties,    String next,    Map<String,String> newHeaders,    Map<String,Integer> newProperties){
      if (next != null) {
        Integer count=oldProperties.get("count") + newProperties.get("count");
        oldProperties.put("count",count);
        String foo=oldHeaders.get("foo") + newHeaders.get("foo");
        oldHeaders.put("foo",foo);
        return existing + next;
      }
 else {
        return existing;
      }
    }
  }
}
