@Ignore("run manually since it requires a running local splunk server") public class SplunkProducerTest extends SplunkTest {
  private static final String TCP_RECIEVER_PORT="9997";
  @Test public void testStreamWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:stream-result");
    mock.expectedMinimumMessageCount(1);
    SplunkEvent splunkEvent=new SplunkEvent();
    splunkEvent.addPair("key11","value1");
    splunkEvent.addPair("key22","value2");
    splunkEvent.addPair("key33","value3");
    template.sendBody("direct:stream",splunkEvent);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSubmitWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:submitresult");
    mock.expectedMinimumMessageCount(1);
    SplunkEvent splunkEvent=new SplunkEvent();
    splunkEvent.addPair("key1","value1");
    splunkEvent.addPair("key2","value2");
    splunkEvent.addPair("key3","value1");
    template.sendBody("direct:submit",splunkEvent);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTcpWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:tcpresult");
    mock.expectedMinimumMessageCount(1);
    SplunkEvent splunkEvent=new SplunkEvent();
    splunkEvent.addPair("key1","value1");
    splunkEvent.addPair("key2","value2");
    splunkEvent.addPair("key3","value3");
    template.sendBody("direct:tcp",splunkEvent);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:stream").to("splunk://stream?username=" + SPLUNK_USERNAME + "&password="+ SPLUNK_PASSWORD+ "&index="+ INDEX+ "&sourceType=StreamSourceType&source=StreamSource").to("mock:stream-result");
        from("direct:submit").to("splunk://submit?username=" + SPLUNK_USERNAME + "&password="+ SPLUNK_PASSWORD+ "&index="+ INDEX+ "&sourceType=testSource&source=test").to("mock:submitresult");
        from("direct:tcp").to("splunk://tcp?username=" + SPLUNK_USERNAME + "&password="+ SPLUNK_PASSWORD+ "&tcpReceiverPort="+ TCP_RECIEVER_PORT+ "&index="+ INDEX+ "&sourceType=testSource&source=test").to("mock:tcpresult");
      }
    }
;
  }
}
