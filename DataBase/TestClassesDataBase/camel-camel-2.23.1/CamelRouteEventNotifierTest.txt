@RunWith(Arquillian.class) public class CamelRouteEventNotifierTest {
  @Produces @Named("all") @ApplicationScoped private List<EventObject> allFiredEvents=new ArrayList<>();
  @Produces @Named("simple") @ApplicationScoped private List<EventObject> simpleFiredEvents=new ArrayList<>();
  @Produces @Named("other") @ApplicationScoped private List<EventObject> otherFiredEvents=new ArrayList<>();
  private void onRouteAddedEventEventAll(  @Observes RouteAddedEvent event,  @Named("all") List<EventObject> events){
    events.add(event);
  }
  private void onRouteAddedEventEventSimple(  @Observes @Named("simple") RouteAddedEvent event,  @Named("simple") List<EventObject> events){
    events.add(event);
  }
  private void onRouteAddedEventEventOther(  @Observes @Named("other") RouteAddedEvent event,  @Named("other") List<EventObject> events){
    events.add(event);
  }
  private void onRouteStartedEventEventAll(  @Observes RouteStartedEvent event,  @Named("all") List<EventObject> events){
    events.add(event);
  }
  private void onRouteStartedEventEventSimple(  @Observes @Named("simple") RouteStartedEvent event,  @Named("simple") List<EventObject> events){
    events.add(event);
  }
  private void onRouteStartedEventEventOther(  @Observes @Named("other") RouteStartedEvent event,  @Named("other") List<EventObject> events){
    events.add(event);
  }
  private void onRouteStoppedEventEventAll(  @Observes RouteStoppedEvent event,  @Named("all") List<EventObject> events){
    events.add(event);
  }
  private void onRouteStoppedEventEventSimple(  @Observes @Named("simple") RouteStoppedEvent event,  @Named("simple") List<EventObject> events){
    events.add(event);
  }
  private void onRouteStoppedEventEventOther(  @Observes @Named("other") RouteStoppedEvent event,  @Named("other") List<EventObject> events){
    events.add(event);
  }
  private void onRouteRemovedEventEventAll(  @Observes RouteRemovedEvent event,  @Named("all") List<EventObject> events){
    events.add(event);
  }
  private void onRouteRemovedEventEventSimple(  @Observes @Named("simple") RouteRemovedEvent event,  @Named("simple") List<EventObject> events){
    events.add(event);
  }
  private void onRouteRemovedEventEventOther(  @Observes @Named("other") RouteRemovedEvent event,  @Named("other") List<EventObject> events){
    events.add(event);
  }
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(SimpleCamelRoute.class,OtherCamelRoute.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void startedCamelContext(  @Named("all") List<EventObject> all,  @Named("simple") List<EventObject> simple,  @Named("other") List<EventObject> other){
    assertThat("Events fired are incorrect!",all,contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other")))))));
    assertThat("Events fired are incorrect!",simple,contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple")))))));
    assertThat("Events fired are incorrect!",other,contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other")))))));
  }
  @Test @InSequence(3) public void stopCamelContext(  CamelContext context,  @Named("all") List<EventObject> all,  @Named("simple") List<EventObject> simple,  @Named("other") List<EventObject> other) throws Exception {
    context.stop();
    assertThat("Events fired are incorrect!",all,contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple")))))));
    assertThat("Events fired are incorrect!",simple,contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple"))))),both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("simple")))))));
    assertThat("Events fired are incorrect!",other,contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other"))))),both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route",hasProperty("id",is(equalTo("other")))))));
  }
}
