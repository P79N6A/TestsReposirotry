@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes={ValidatorConfiguration.class}) public class CMConfigurationTest extends AbstractJUnit4SpringContextTests {
  @Autowired private Validator validator;
  @Before public void beforeTest() throws Exception {
  }
  @Test public void testNullProductToken() throws Exception {
    final CMConfiguration configuration=new CMConfiguration();
    configuration.setDefaultFrom("DefaultFrom");
    configuration.setProductToken(null);
    configuration.setDefaultMaxNumberOfParts(8);
    configuration.setTestConnectionOnStartup(false);
    final Set<ConstraintViolation<CMConfiguration>> constraintViolations=validator.validate(configuration);
    Assert.isTrue(1 == constraintViolations.size());
  }
  @Test public void testNullDefaultFrom() throws Exception {
    final CMConfiguration configuration=new CMConfiguration();
    configuration.setDefaultFrom(null);
    configuration.setProductToken(UUID.randomUUID().toString());
    configuration.setDefaultMaxNumberOfParts(8);
    configuration.setTestConnectionOnStartup(false);
    final Set<ConstraintViolation<CMConfiguration>> constraintViolations=validator.validate(configuration);
    Assert.isTrue(1 == constraintViolations.size());
  }
  @Test public void testDefaultFromFieldMaxLength() throws Exception {
    final CMConfiguration configuration=new CMConfiguration();
    configuration.setDefaultFrom("123456789012");
    configuration.setProductToken(UUID.randomUUID().toString());
    configuration.setDefaultMaxNumberOfParts(8);
    configuration.setTestConnectionOnStartup(false);
    final Set<ConstraintViolation<CMConfiguration>> constraintViolations=validator.validate(configuration);
    Assert.isTrue(1 == constraintViolations.size());
  }
  @Test public void testDefaultFromFieldZeroLength() throws Exception {
    final CMConfiguration configuration=new CMConfiguration();
    configuration.setDefaultFrom("");
    configuration.setProductToken(UUID.randomUUID().toString());
    configuration.setDefaultMaxNumberOfParts(8);
    configuration.setTestConnectionOnStartup(false);
    final Set<ConstraintViolation<CMConfiguration>> constraintViolations=validator.validate(configuration);
    Assert.isTrue(1 == constraintViolations.size());
  }
  @Test public void testMaxNumberOfParts() throws Exception {
    final CMConfiguration configuration=new CMConfiguration();
    configuration.setProductToken(UUID.randomUUID().toString());
    configuration.setDefaultFrom("DefaultFrom");
    configuration.setDefaultMaxNumberOfParts(9);
    configuration.setTestConnectionOnStartup(false);
    final Set<ConstraintViolation<CMConfiguration>> constraintViolations=validator.validate(configuration);
    Assert.isTrue(1 == constraintViolations.size());
  }
  @Test public void testMaxNumberOfPartsZero() throws Exception {
    final CMConfiguration configuration=new CMConfiguration();
    configuration.setProductToken(UUID.randomUUID().toString());
    configuration.setDefaultFrom("DefaultFrom");
    configuration.setDefaultMaxNumberOfParts(0);
    configuration.setTestConnectionOnStartup(false);
    final Set<ConstraintViolation<CMConfiguration>> constraintViolations=validator.validate(configuration);
    Assert.isTrue(1 == constraintViolations.size());
  }
}
