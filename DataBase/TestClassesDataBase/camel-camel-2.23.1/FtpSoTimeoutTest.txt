/** 
 * Test class used to demonstrate the problematic disconnect sequence of the  {@link FtpOperations}. <p> Setting the logging level of  {@code org.apache.camel.file.remote} to {@code TRACE} will provide useful information
 * @author l.chiarello
 */
public class FtpSoTimeoutTest extends CamelTestSupport {
  private ServerSocket serverSocket;
  @Override @Before public void setUp() throws Exception {
    serverSocket=new ServerSocket(0);
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    if (serverSocket != null) {
      serverSocket.close();
    }
  }
  @Override protected int getShutdownTimeout(){
    return 5;
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:with").to("ftp://localhost:" + serverSocket.getLocalPort() + "?ftpClient=#myftpclient&connectTimeout=300&soTimeout=300&reconnectDelay=100");
        from("direct:without").to("ftp://localhost:" + serverSocket.getLocalPort() + "?connectTimeout=300&soTimeout=300&reconnectDelay=100");
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    FTPClient ftpClient=new FTPClient();
    ftpClient.setDefaultTimeout(300);
    JndiRegistry registry=super.createRegistry();
    registry.bind("myftpclient",ftpClient);
    return registry;
  }
  @Test(timeout=10000,expected=CamelExecutionException.class) public void testWithDefaultTimeout() throws Exception {
    template.sendBody("direct:with","");
  }
  @Test(timeout=10000,expected=CamelExecutionException.class) public void testWithoutDefaultTimeout() throws Exception {
    template.sendBody("direct:without","");
  }
}
