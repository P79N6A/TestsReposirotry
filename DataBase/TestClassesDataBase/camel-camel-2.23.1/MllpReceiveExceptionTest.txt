/** 
 * Tests for the  class.
 */
public class MllpReceiveExceptionTest extends MllpExceptionTestSupport {
  static final String TEST_EXCEPTION_MESSAGE="Receive Exception Message";
  MllpReceiveException instance;
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorOne() throws Exception {
    instance=new MllpReceiveException(TEST_EXCEPTION_MESSAGE);
    assertNull(instance.getCause());
    assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE));
    assertNull(instance.hl7MessageBytes);
    assertNull(instance.hl7AcknowledgementBytes);
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorTwo() throws Exception {
    instance=new MllpReceiveException(TEST_EXCEPTION_MESSAGE,CAUSE);
    assertSame(CAUSE,instance.getCause());
    assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE));
    assertNull(instance.hl7MessageBytes);
    assertNull(instance.hl7AcknowledgementBytes);
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorThree() throws Exception {
    instance=new MllpReceiveException(TEST_EXCEPTION_MESSAGE,HL7_MESSAGE_BYTES);
    assertNull(instance.getCause());
    assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE));
    assertArrayEquals(HL7_MESSAGE_BYTES,instance.hl7MessageBytes);
    assertNull(instance.hl7AcknowledgementBytes);
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorFour() throws Exception {
    instance=new MllpReceiveException(TEST_EXCEPTION_MESSAGE,HL7_MESSAGE_BYTES,HL7_ACKNOWLEDGEMENT_BYTES);
    assertNull(instance.getCause());
    assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE));
    assertArrayEquals(HL7_MESSAGE_BYTES,instance.hl7MessageBytes);
    assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES,instance.hl7AcknowledgementBytes);
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorFive() throws Exception {
    instance=new MllpReceiveException(TEST_EXCEPTION_MESSAGE,HL7_MESSAGE_BYTES,CAUSE);
    assertSame(CAUSE,instance.getCause());
    assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE));
    assertArrayEquals(HL7_MESSAGE_BYTES,instance.hl7MessageBytes);
    assertNull(instance.hl7AcknowledgementBytes);
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorSix() throws Exception {
    instance=new MllpReceiveException(TEST_EXCEPTION_MESSAGE,HL7_MESSAGE_BYTES,HL7_ACKNOWLEDGEMENT_BYTES,CAUSE);
    assertSame(CAUSE,instance.getCause());
    assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE));
    assertArrayEquals(HL7_MESSAGE_BYTES,instance.hl7MessageBytes);
    assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES,instance.hl7AcknowledgementBytes);
  }
}
