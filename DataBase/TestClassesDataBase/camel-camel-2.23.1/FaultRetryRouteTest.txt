public class FaultRetryRouteTest extends ContextTestSupport {
  protected MockEndpoint a;
  protected MockEndpoint b;
  protected MockEndpoint error;
  protected final Processor successOnRetryProcessor=new Processor(){
    int count;
    public void process(    Exchange exchange) throws CamelException {
      if (count++ == 0) {
        exchange.getOut().setFault(true);
        exchange.getOut().setBody(new CamelException("Failed the first time"));
      }
    }
  }
;
  @Test public void testSuccessfulRetry() throws Exception {
    a.expectedBodiesReceived("in");
    b.expectedBodiesReceived("in");
    error.expectedMessageCount(0);
    template.sendBody("direct:start","in");
    MockEndpoint.assertIsSatisfied(a,b,error);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    a=resolveMandatoryEndpoint("mock:a",MockEndpoint.class);
    b=resolveMandatoryEndpoint("mock:b",MockEndpoint.class);
    error=resolveMandatoryEndpoint("mock:error",MockEndpoint.class);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        getContext().addInterceptStrategy(new HandleFault());
        errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(4).loggingLevel(LoggingLevel.DEBUG));
        from("direct:start").to("mock:a").process(successOnRetryProcessor).to("mock:b");
      }
    }
;
  }
}
