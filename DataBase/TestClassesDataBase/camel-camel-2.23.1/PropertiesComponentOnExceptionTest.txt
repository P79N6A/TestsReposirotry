/** 
 * @version 
 */
public class PropertiesComponentOnExceptionTest extends ContextTestSupport {
  @Test public void testPropertiesComponentOnException() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:dead");
    mock.expectedMessageCount(1);
    mock.message(0).header(Exchange.REDELIVERED).isEqualTo(true);
    mock.message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should throw exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).redeliveryDelay("{{delay}}").maximumRedeliveries("{{max}}").to("mock:dead");
        from("direct:start").throwException(new IllegalAccessException("Damn"));
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    Properties cool=new Properties();
    cool.put("delay","25");
    cool.put("max","3");
    jndi.bind("myprop",cool);
    return jndi;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    PropertiesComponent pc=new PropertiesComponent();
    pc.setLocations(new String[]{"ref:myprop"});
    context.addComponent("properties",pc);
    return context;
  }
}
