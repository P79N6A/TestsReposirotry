/** 
 * @version
 */
public class FileIdempotentReadLockDelayedAsyncTest extends ContextTestSupport {
  MemoryIdempotentRepository myRepo=new MemoryIdempotentRepository();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/changed/");
    createDirectory("target/changed/in");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myRepo",myRepo);
    return jndi;
  }
  @Test public void testIdempotentReadLock() throws Exception {
    assertEquals(0,myRepo.getCacheSize());
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(2).create();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.message(0).arrives().between(0,1400).millis();
    mock.message(1).arrives().between(0,1400).millis();
    template.sendBodyAndHeader("file:target/changed/in","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:target/changed/in","Bye World",Exchange.FILE_NAME,"bye.txt");
    assertMockEndpointsSatisfied();
    assertTrue(notify.matches(10,TimeUnit.SECONDS));
    assertEquals(2,myRepo.getCacheSize());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/changed/in?initialDelay=0&delay=10&readLock=idempotent&readLockIdempotentReleaseDelay=1000&readLockIdempotentReleaseAsync=true&idempotentRepository=#myRepo").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            int size=myRepo.getCacheSize();
            assertTrue(size == 1 || size == 2);
          }
        }
).to("mock:result");
      }
    }
;
  }
}
