/** 
 */
public class BeanParameterInvalidValueTest extends ContextTestSupport {
  @Test public void testBeanParameterInvalidValueA() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:a","World");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      TypeConversionException cause=assertIsInstanceOf(TypeConversionException.class,e.getCause().getCause());
      assertEquals(String.class,cause.getFromType());
      assertEquals(int.class,cause.getToType());
      assertEquals("A",cause.getValue());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanParameterInvalidValueB() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:b","World");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      TypeConversionException cause=assertIsInstanceOf(TypeConversionException.class,e.getCause().getCause());
      assertEquals(String.class,cause.getFromType());
      assertEquals(int.class,cause.getToType());
      assertEquals("true",cause.getValue());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanParameterNullC() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("");
    template.sendBody("direct:c","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanParameterInvalidValueD() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:d","World");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ExpressionEvaluationException cause=assertIsInstanceOf(ExpressionEvaluationException.class,e.getCause());
      assertTrue(cause.getCause().getMessage().startsWith("Unknown function: xxx at location 0"));
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyBean());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").to("bean:foo?method=echo(*, 'A')").to("mock:result");
        from("direct:b").to("bean:foo?method=echo(*, true)").to("mock:result");
        from("direct:c").to("bean:foo?method=echo(null, 2)").to("mock:result");
        from("direct:d").to("bean:foo?method=echo(${xxx}, 2)").to("mock:result");
      }
    }
;
  }
public static class MyBean {
    public String echo(    String body,    int times){
      if (body == null) {
        return "";
      }
      if (times > 0) {
        StringBuilder sb=new StringBuilder();
        for (int i=0; i < times; i++) {
          sb.append(body);
        }
        return sb.toString();
      }
      return body;
    }
    public String heads(    String body,    Map<?,?> headers){
      return headers.get("hello") + " " + body;
    }
  }
}
