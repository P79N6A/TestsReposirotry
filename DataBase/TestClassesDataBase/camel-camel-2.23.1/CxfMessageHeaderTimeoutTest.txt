public class CxfMessageHeaderTimeoutTest extends CamelSpringTestSupport {
  protected static final String GREET_ME_OPERATION="greetMe";
  protected static final String TEST_MESSAGE="Hello World!";
  protected static final String SERVER_ADDRESS="http://localhost:" + CXFTestSupport.getPort1() + "/CxfMessageHeaderTimeoutTest/SoapContext/SoapPort";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @BeforeClass public static void startService(){
    Greeter implementor=new GreeterImplWithSleep();
    Endpoint.publish(SERVER_ADDRESS,implementor);
  }
  @Test public void testInvokingJaxWsServerWithCxfEndpoint() throws Exception {
    sendTimeOutMessage("cxf://bean:springEndpoint");
  }
  protected void sendTimeOutMessage(  String endpointUri) throws Exception {
    Exchange reply=sendJaxWsMessage(endpointUri);
    Exception e=reply.getException();
    assertNotNull("We should get the exception cause here",e);
    assertTrue("We should get the socket time out exception here",e instanceof SocketTimeoutException);
  }
  protected Exchange sendJaxWsMessage(  String endpointUri) throws InterruptedException {
    Exchange exchange=template.send(endpointUri,new Processor(){
      public void process(      final Exchange exchange){
        final List<String> params=new ArrayList<>();
        params.add(TEST_MESSAGE);
        exchange.getIn().setBody(params);
        exchange.getIn().setHeader(CxfConstants.OPERATION_NAME,GREET_ME_OPERATION);
        Map<String,Object> requestContext=new HashMap<>();
        HTTPClientPolicy clientPolicy=new HTTPClientPolicy();
        clientPolicy.setReceiveTimeout(100);
        requestContext.put(HTTPClientPolicy.class.getName(),clientPolicy);
        exchange.getIn().setBody(params);
        exchange.getIn().setHeader(Client.REQUEST_CONTEXT,requestContext);
      }
    }
);
    return exchange;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/cxfMessageHeaderTimeOutContext.xml");
  }
}
