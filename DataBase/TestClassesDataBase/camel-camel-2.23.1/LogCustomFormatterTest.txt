/** 
 * Custom Exchange Formatter test.
 */
public class LogCustomFormatterTest extends ContextTestSupport {
  private TestExchangeFormatter exchangeFormatter;
  @Before @Override public void setUp() throws Exception {
    super.setUp();
  }
  @Test public void testCustomFormatterInComponent() throws Exception {
    context.stop();
    LogComponent log=new LogComponent();
    exchangeFormatter=new TestExchangeFormatter();
    log.setExchangeFormatter(exchangeFormatter);
    context.addComponent("log",log);
    context.start();
    String endpointUri="log:" + LogCustomFormatterTest.class.getCanonicalName();
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri + "2","Hello World");
    template.requestBody(endpointUri + "2","Hello World");
    assertEquals(4,exchangeFormatter.getCounter());
  }
  @Test public void testCustomFormatterInRegistry() throws Exception {
    context.stop();
    exchangeFormatter=new TestExchangeFormatter();
    JndiRegistry registry=getRegistryAsJndi();
    registry.bind("logFormatter",exchangeFormatter);
    context.start();
    String endpointUri="log:" + LogCustomFormatterTest.class.getCanonicalName();
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri + "2","Hello World");
    template.requestBody(endpointUri + "2","Hello World");
    assertEquals(4,exchangeFormatter.getCounter());
  }
  @Test public void testCustomFormatterInRegistryOptions() throws Exception {
    context.stop();
    exchangeFormatter=new TestExchangeFormatter();
    JndiRegistry registry=getRegistryAsJndi();
    registry.bind("logFormatter",exchangeFormatter);
    assertEquals("",exchangeFormatter.getPrefix());
    context.start();
    String endpointUri="log:" + LogCustomFormatterTest.class.getCanonicalName() + "?prefix=foo";
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri,"Hello World");
    assertEquals(2,exchangeFormatter.getCounter());
    assertEquals("foo",exchangeFormatter.getPrefix());
  }
  @Test public void testCustomFormatterInRegistryUnknownOption() throws Exception {
    context.stop();
    exchangeFormatter=new TestExchangeFormatter();
    JndiRegistry registry=getRegistryAsJndi();
    registry.bind("logFormatter",exchangeFormatter);
    assertEquals("",exchangeFormatter.getPrefix());
    context.start();
    try {
      String endpointUri2="log:" + LogCustomFormatterTest.class.getCanonicalName() + "?prefix=foo&bar=no";
      template.requestBody(endpointUri2,"Hello World");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
      ResolveEndpointFailedException cause=assertIsInstanceOf(ResolveEndpointFailedException.class,e.getCause());
      assertTrue(cause.getMessage().endsWith("Unknown parameters=[{bar=no}]"));
    }
  }
  @Test public void testFormatterNotPickedUpWithDifferentKey() throws Exception {
    context.stop();
    exchangeFormatter=new TestExchangeFormatter();
    JndiRegistry registry=getRegistryAsJndi();
    registry.bind("anotherFormatter",exchangeFormatter);
    context.start();
    String endpointUri="log:" + LogCustomFormatterTest.class.getCanonicalName();
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri,"Hello World");
    template.requestBody(endpointUri + "2","Hello World");
    template.requestBody(endpointUri + "2","Hello World");
    assertEquals(0,exchangeFormatter.getCounter());
  }
  private JndiRegistry getRegistryAsJndi(){
    JndiRegistry registry=null;
    if (context.getRegistry() instanceof PropertyPlaceholderDelegateRegistry) {
      registry=(JndiRegistry)((PropertyPlaceholderDelegateRegistry)context.getRegistry()).getRegistry();
    }
 else     if (context.getRegistry() instanceof JndiRegistry) {
      registry=(JndiRegistry)context.getRegistry();
    }
 else {
      fail("Could not determine Registry type");
    }
    return registry;
  }
public static class TestExchangeFormatter implements ExchangeFormatter {
    private int counter;
    private boolean addTen;
    private String prefix="";
    @Override public String format(    Exchange exchange){
      counter+=addTen ? 10 : 1;
      return prefix + exchange.toString();
    }
    public int getCounter(){
      return counter;
    }
    public boolean isAddTen(){
      return addTen;
    }
    public void setAddTen(    boolean addTen){
      this.addTen=addTen;
    }
    public String getPrefix(){
      return prefix;
    }
    public void setPrefix(    String prefix){
      this.prefix=prefix;
    }
  }
}
