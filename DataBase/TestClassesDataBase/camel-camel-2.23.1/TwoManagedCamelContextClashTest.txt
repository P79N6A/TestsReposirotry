/** 
 * @version 
 */
public class TwoManagedCamelContextClashTest extends TestSupport {
  private CamelContext camel1;
  private CamelContext camel2;
  protected CamelContext createCamelContext(  String name,  String managementPattern) throws Exception {
    DefaultCamelContext context=new DefaultCamelContext();
    context.setName(name);
    if (managementPattern != null) {
      context.getManagementNameStrategy().setNamePattern(managementPattern);
    }
    return context;
  }
  @Test public void testTwoManagedCamelContextNoClashDefault() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    camel1=createCamelContext("foo",null);
    camel2=createCamelContext("foo",null);
    camel1.start();
    assertTrue("Should be started",camel1.getStatus().isStarted());
    MBeanServer mbeanServer=camel1.getManagementStrategy().getManagementAgent().getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=" + camel1.getManagementName() + ",type=context,name=\"foo\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    camel2.start();
    ObjectName on2=ObjectName.getInstance("org.apache.camel:context=" + camel2.getManagementName() + ",type=context,name=\"foo\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on2));
    assertTrue("Should still be registered after name clash",mbeanServer.isRegistered(on));
    assertTrue("Should still be registered after name clash",mbeanServer.isRegistered(on2));
  }
  @Test public void testTwoManagedCamelContextNoClashCustomPattern() throws Exception {
    camel1=createCamelContext("foo","killer-#counter#");
    camel2=createCamelContext("foo","killer-#counter#");
    camel1.start();
    assertTrue("Should be started",camel1.getStatus().isStarted());
    MBeanServer mbeanServer=camel1.getManagementStrategy().getManagementAgent().getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=" + camel1.getManagementName() + ",type=context,name=\"foo\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    camel2.start();
    ObjectName on2=ObjectName.getInstance("org.apache.camel:context=" + camel2.getManagementName() + ",type=context,name=\"foo\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on2));
    assertTrue("Should still be registered after name clash",mbeanServer.isRegistered(on));
    assertTrue("Should still be registered after name clash",mbeanServer.isRegistered(on2));
  }
  @Test public void testTwoManagedCamelContextClash() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    camel1=createCamelContext("foo","myFoo");
    camel2=createCamelContext("foo","myFoo");
    camel1.start();
    assertTrue("Should be started",camel1.getStatus().isStarted());
    MBeanServer mbeanServer=camel1.getManagementStrategy().getManagementAgent().getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=" + camel1.getManagementName() + ",type=context,name=\"foo\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    try {
      camel2.start();
      fail("Should have thrown an exception");
    }
 catch (    VetoCamelContextStartException e) {
      assertTrue(e.getMessage().contains("is already registered"));
    }
  }
  @Override @After public void tearDown() throws Exception {
    if (camel1 != null) {
      camel1.stop();
    }
    if (camel2 != null) {
      camel2.stop();
    }
    super.tearDown();
  }
}
