/** 
 * Marhsal tests with domain objects.
 */
public class MarshalDomainObjectTest extends CamelTestSupport {
  @Test public void testMarshalDomainObject() throws Exception {
    if (isJavaVendor("IBM")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    PurchaseOrder order=new PurchaseOrder();
    order.setName("Tiger");
    order.setAmount(1);
    order.setPrice(99.95);
    template.sendBody("direct:in",order);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalDomainObjectTwice() throws Exception {
    if (isJavaVendor("IBM")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    PurchaseOrder order=new PurchaseOrder();
    order.setName("Tiger");
    order.setAmount(1);
    order.setPrice(99.95);
    template.sendBody("direct:in",order);
    template.sendBody("direct:in",order);
    mock.assertIsSatisfied();
    String body1=mock.getExchanges().get(0).getIn().getBody(String.class);
    String body2=mock.getExchanges().get(1).getIn().getBody(String.class);
    assertEquals("The body should marshalled to the same",body1,body2);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:in").marshal().castor().to("mock:result");
        from("direct:marshal").marshal().castor();
      }
    }
;
  }
}
