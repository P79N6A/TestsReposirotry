/** 
 */
public abstract class AbstractPlatformTestSupport extends CamelTestSupport {
  @Test public void testPublisher() throws Exception {
    int num=20;
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:endpoint").to("reactive-streams:integers");
      }
    }
.addRoutesToCamelContext(context);
    CamelReactiveStreamsService camel=CamelReactiveStreams.get(context);
    List<Integer> elements=new LinkedList<>();
    CountDownLatch latch=new CountDownLatch(num);
    this.changeSign(camel.fromStream("integers",Integer.class),i -> {
      elements.add(i);
      latch.countDown();
    }
);
    context.start();
    for (int i=1; i <= num; i++) {
      template.sendBody("direct:endpoint",i);
    }
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    for (    Integer number : elements) {
      assertTrue(number < 0);
    }
  }
  @Test public void testSubscriber() throws Exception {
    int num=20;
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:integers").to("mock:endpoint");
      }
    }
.addRoutesToCamelContext(context);
    CamelReactiveStreamsService camel=CamelReactiveStreams.get(context);
    List<Integer> elements=new LinkedList<>();
    for (int i=1; i <= num; i++) {
      elements.add(i);
    }
    changeSign(elements,camel.streamSubscriber("integers",Integer.class));
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:endpoint");
    mock.expectedMessageCount(num);
    mock.assertIsSatisfied();
    for (    Exchange ex : mock.getExchanges()) {
      Integer number=ex.getIn().getBody(Integer.class);
      assertNotNull(number);
      assertTrue(number < 0);
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  protected abstract void changeSign(  Publisher<Integer> data,  Consumer<Integer> consume);
  protected abstract void changeSign(  Iterable<Integer> data,  Subscriber<Integer> camel);
}
