/** 
 * @version 
 */
public class JmsToJmsTransactedTest extends CamelSpringTestSupport {
  protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/JmsToJmsTransactedTest.xml");
  }
  @Test public void testJmsToJmsTestOK() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").transacted().to("activemq:queue:bar");
      }
    }
);
    context.start();
    template.sendBody("activemq:queue:foo","Hello World");
    String reply=consumer.receiveBody("activemq:queue:bar",5000,String.class);
    assertEquals("Hello World",reply);
  }
  @Test public void testJmsToJmsTestRollbackDueToException() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").throwException(new IllegalArgumentException("Damn"));
        from("activemq:queue:bar").to("log:bar").to("mock:bar");
      }
    }
);
    context.start();
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(0);
    MockEndpoint start=getMockEndpoint("mock:start");
    start.expectedMessageCount(7);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testJmsToJmsTestRollbackDueToRollback() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").rollback();
        from("activemq:queue:bar").to("log:bar").to("mock:bar");
      }
    }
);
    context.start();
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(0);
    MockEndpoint start=getMockEndpoint("mock:start");
    start.expectedMessageCount(7);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
    Object body=consumer.receiveBody("activemq:queue:ActiveMQ.DLQ",2000);
    assertEquals("Hello World",body);
  }
  @Test public void testJmsToJmsTestRollbackDueToMarkRollbackOnly() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").markRollbackOnly();
        from("activemq:queue:bar").to("log:bar").to("mock:bar");
      }
    }
);
    context.start();
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(0);
    MockEndpoint start=getMockEndpoint("mock:start");
    start.expectedMessageCount(7);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
}
