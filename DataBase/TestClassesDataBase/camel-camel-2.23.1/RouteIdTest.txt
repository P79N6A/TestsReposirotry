/** 
 * @version 
 */
public class RouteIdTest extends ContextTestSupport {
  @Test public void testRouteId() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    String id=context.getRouteDefinitions().get(0).getId();
    assertEquals("myCoolRoute",id);
  }
  @Test public void testRouteIdFailed() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","Kabom");
    assertMockEndpointsSatisfied();
    String id=context.getRouteDefinitions().get(0).getId();
    assertEquals("myCoolRoute",id);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:error").end();
        from("direct:start").onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(5).end().routeId("myCoolRoute").choice().when(body().contains("Kabom")).throwException(new IllegalArgumentException("Damn")).otherwise().to("mock:result").end();
      }
    }
;
  }
}
