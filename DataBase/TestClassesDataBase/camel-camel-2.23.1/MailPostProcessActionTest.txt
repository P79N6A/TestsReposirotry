/** 
 * Tests if post process action is called if it is set
 */
public class MailPostProcessActionTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(MailPostProcessActionTest.class);
  private TestPostProcessAction action;
  @Override @Before public void setUp() throws Exception {
    prepareMailbox();
    action=new TestPostProcessAction();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("postProcessAction",action);
    return jndi;
  }
  @Test public void testActionCalled() throws Exception {
    Mailbox mailbox=Mailbox.get("bill@localhost");
    assertEquals(1,mailbox.size());
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("TestText");
    assertMockEndpointsSatisfied();
    waitForActionCalled();
  }
  private void waitForActionCalled() throws InterruptedException {
    for (int i=0; i < 50; i++) {
      if (action.hasBeenCalled()) {
        break;
      }
      LOG.debug("Sleeping for 10 millis to wait for action call");
      Thread.sleep(10);
    }
    assertEquals(true,action.hasBeenCalled());
  }
  private void prepareMailbox() throws Exception {
    Mailbox.clearAll();
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore("pop3");
    store.connect("localhost",25,"bill","secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    Message[] messages=new Message[1];
    messages[0]=new MimeMessage(sender.getSession());
    messages[0].setSubject("TestSubject");
    messages[0].setHeader("Message-ID","0");
    messages[0].setText("TestText");
    folder.appendMessages(messages);
    folder.close(true);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("pop3://bill@localhost?password=secret&postProcessAction=#postProcessAction&consumer.initialDelay=100&consumer.delay=100").to("mock:result");
      }
    }
;
  }
private class TestPostProcessAction implements MailBoxPostProcessAction {
    private boolean called;
    @Override public void process(    Folder folder) throws Exception {
      final Message[] messages=folder.getMessages();
      assertEquals(1,messages.length);
      assertEquals("TestSubject",messages[0].getSubject());
      called=true;
    }
    /** 
 * @return true if the action has been called
 */
    public boolean hasBeenCalled(){
      return called;
    }
  }
}
