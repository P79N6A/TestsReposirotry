/** 
 * Unit test to verify unit of work with disruptor. That the UnitOfWork is able to route using disruptor but keeping the same UoW.
 */
public class DisruptorUnitOfWorkTest extends CamelTestSupport {
  private static volatile String sync;
  private static volatile String lastOne;
  @Test public void testDisruptorUOW() throws Exception {
    final NotifyBuilder notify=new NotifyBuilder(context).whenDone(2).create();
    final MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    notify.matchesMockWaitTime();
    assertEquals("onCompleteA",sync);
    assertEquals("onCompleteA",lastOne);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        from("direct:start").process(new MyUOWProcessor("A")).to("disruptor:foo");
        from("disruptor:foo").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            assertEquals(null,sync);
          }
        }
).process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            lastOne="processor";
          }
        }
).to("mock:result");
      }
    }
;
  }
private static final class MyUOWProcessor implements Processor {
    private final String id;
    private MyUOWProcessor(    final String id){
      this.id=id;
    }
    @Override public void process(    final Exchange exchange) throws Exception {
      exchange.getUnitOfWork().addSynchronization(new Synchronization(){
        @Override public void onComplete(        final Exchange exchange){
          sync="onComplete" + id;
          lastOne=sync;
        }
        @Override public void onFailure(        final Exchange exchange){
          sync="onFailure" + id;
          lastOne=sync;
        }
      }
);
    }
  }
}
