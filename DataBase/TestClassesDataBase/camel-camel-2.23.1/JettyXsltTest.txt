public class JettyXsltTest extends CamelTestSupport {
  private int port;
  @Test public void testClasspath() throws Exception {
    String response=template.requestBody("xslt:org/apache/camel/itest/jetty/greeting.xsl","<hello>Camel</hello>",String.class);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>Camel</goodbye>",response);
  }
  @Test public void testClasspathInvalidParameter() throws Exception {
    try {
      template.requestBody("xslt:org/apache/camel/itest/jetty/greeting.xsl?name=greeting.xsl","<hello>Camel</hello>",String.class);
      fail("Should have thrown exception");
    }
 catch (    ResolveEndpointFailedException e) {
      assertTrue(e.getMessage().endsWith("Unknown parameters=[{name=greeting.xsl}]"));
    }
  }
  @Test public void testHttp() throws Exception {
    String response=template.requestBody("xslt://http://localhost:" + port + "/test?name=greeting.xsl","<hello>Camel</hello>",String.class);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>Camel</goodbye>",response);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    port=AvailablePortFinder.getNextAvailable(8000);
    return new RouteBuilder(){
      public void configure(){
        from("jetty:http://localhost:" + port + "/test").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String name=exchange.getIn().getHeader("name",String.class);
            ObjectHelper.notNull(name,"name");
            name="org/apache/camel/itest/jetty/" + name;
            InputStream is=ResourceHelper.resolveMandatoryResourceAsInputStream(exchange.getContext().getClassResolver(),name);
            String xml=exchange.getContext().getTypeConverter().convertTo(String.class,is);
            exchange.getOut().setBody(xml);
            exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"text/xml");
          }
        }
);
      }
    }
;
  }
}
