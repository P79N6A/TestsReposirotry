/** 
 * Unit test for a custom ServicePool for producer.
 * @version 
 */
public class CustomProducerServicePoolTest extends ContextTestSupport {
  private static int counter;
private static final class MyEndpoint extends DefaultEndpoint {
    private MyEndpoint(    String endpointUri,    CamelContext camelContext){
      setCamelContext(camelContext);
      setEndpointUri(endpointUri);
    }
    public Producer createProducer() throws Exception {
      return new MyProducer(this);
    }
    public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    public boolean isSingleton(){
      return true;
    }
    @Override protected String createEndpointUri(){
      return "my";
    }
  }
private static final class MyProducer extends DefaultProducer implements ServicePoolAware {
    MyProducer(    Endpoint endpoint){
      super(endpoint);
    }
    public void process(    Exchange exchange) throws Exception {
      counter++;
    }
  }
private static class MyPool implements ServicePool<Endpoint,Producer> {
    private Producer producer;
    public void setCapacity(    int capacity){
    }
    public int getCapacity(){
      return 0;
    }
    public Producer addAndAcquire(    Endpoint endpoint,    Producer producer){
      if (endpoint instanceof MyEndpoint) {
        return producer;
      }
 else {
        return null;
      }
    }
    public Producer acquire(    Endpoint endpoint){
      if (endpoint instanceof MyEndpoint) {
        Producer answer=producer;
        producer=null;
        return answer;
      }
 else {
        return null;
      }
    }
    public void release(    Endpoint endpoint,    Producer producer){
      this.producer=producer;
    }
    public void start() throws Exception {
    }
    public int size(){
      return producer != null ? 1 : 0;
    }
    public void purge(){
      producer=null;
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testCustomProducerServicePool() throws Exception {
    MyPool pool=new MyPool();
    pool.start();
    context.setProducerServicePool(pool);
    context.addEndpoint("my",new MyEndpoint("my",context));
    Endpoint endpoint=context.getEndpoint("my");
    assertNull(pool.acquire(endpoint));
    assertEquals(0,pool.size());
    Producer producer=new MyProducer(endpoint);
    producer=pool.addAndAcquire(endpoint,producer);
    assertEquals(0,pool.size());
    pool.release(endpoint,producer);
    assertEquals(1,pool.size());
    producer=pool.acquire(endpoint);
    assertNotNull(producer);
    assertEquals(0,pool.size());
    pool.release(endpoint,producer);
    assertEquals(1,pool.size());
    pool.purge();
    assertEquals(0,pool.size());
    assertIsInstanceOf(MyPool.class,context.getProducerServicePool());
  }
  @Test public void testCustomProducerServicePoolInRoute() throws Exception {
    context.addEndpoint("my",new MyEndpoint("my",context));
    MyPool pool=new MyPool();
    pool.start();
    context.setProducerServicePool(pool);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("my","mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
    assertEquals(2,counter);
    assertEquals(1,pool.size());
    pool.purge();
    assertEquals(0,pool.size());
  }
}
