/** 
 * Tests the JSON mapping of the API updates.
 */
public class TelegramConsumerMappingTest extends TelegramTestSupport {
  @EndpointInject(uri="mock:telegram") private MockEndpoint endpoint;
  @Before public void mockAPIs(){
    TelegramService api=mockTelegramService();
    UpdateResult res1=getJSONResource("messages/updates-single.json",UpdateResult.class);
    UpdateResult defaultRes=getJSONResource("messages/updates-empty.json",UpdateResult.class);
    when(api.getUpdates(any(),any(),any(),any())).thenReturn(res1).thenAnswer((i) -> defaultRes);
  }
  @Test public void testMessageMapping() throws Exception {
    endpoint.expectedMinimumMessageCount(1);
    endpoint.expectedMessageCount(1);
    endpoint.assertIsSatisfied();
    Exchange ex=endpoint.getExchanges().get(0);
    Message m=ex.getIn();
    assertNotNull(m);
    assertEquals("-45658",m.getHeader(TelegramConstants.TELEGRAM_CHAT_ID));
    assertNotNull(m.getBody());
    assertTrue(m.getBody() instanceof IncomingMessage);
    IncomingMessage body=(IncomingMessage)m.getBody();
    assertEquals("a message",body.getText());
    assertEquals(Long.valueOf(179L),body.getMessageId());
    assertEquals(Instant.ofEpochSecond(1463436626L),body.getDate());
    User user=body.getFrom();
    assertNotNull(user);
    assertEquals("John",user.getFirstName());
    assertEquals("Doe",user.getLastName());
    assertEquals(Long.valueOf(1585844777),user.getId());
    Chat chat=body.getChat();
    assertNotNull(chat);
    assertEquals("-45658",chat.getId());
    assertEquals("A chat group",chat.getTitle());
    assertEquals("group",chat.getType());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("telegram:bots/mock-token").to("mock:telegram");
      }
    }
;
  }
}
