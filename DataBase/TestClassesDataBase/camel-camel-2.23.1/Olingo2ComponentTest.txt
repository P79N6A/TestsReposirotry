/** 
 * Test class for  {@link org.apache.camel.component.olingo2.api.Olingo2App} APIs.<p> The integration test runs against Apache Olingo 2.0 sample server which is dynamically installed and started during the test. </p>
 */
public class Olingo2ComponentTest extends AbstractOlingo2TestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(Olingo2ComponentTest.class);
  private static final int PORT=AvailablePortFinder.getNextAvailable();
  private static final String ID_PROPERTY="Id";
  private static final String MANUFACTURERS="Manufacturers";
  private static final String TEST_MANUFACTURER="Manufacturers('1')";
  private static final String CARS="Cars";
  private static final String TEST_RESOURCE_CONTENT_ID="1";
  private static final String ADDRESS="Address";
  private static final String TEST_RESOURCE="$1";
  private static final String TEST_RESOURCE_ADDRESS=TEST_RESOURCE + "/Address";
  private static final String TEST_CREATE_MANUFACTURER="DefaultContainer.Manufacturers('123')";
  private static final String TEST_SERVICE_URL="http://localhost:" + PORT + "/MyFormula.svc";
  private static Olingo2SampleServer server;
  public Olingo2ComponentTest(){
    setDefaultTestProperty("serviceUri","http://localhost:" + PORT + "/MyFormula.svc");
  }
  @BeforeClass public static void beforeClass() throws Exception {
    startServers(PORT);
    Olingo2SampleServer.generateSampleData(TEST_SERVICE_URL);
  }
  @AfterClass public static void afterClass() throws Exception {
    if (server != null) {
      server.stop();
      server.destroy();
    }
  }
  protected static void startServers(  int port) throws Exception {
    server=new Olingo2SampleServer(port,"/olingo2_ref");
    server.start();
  }
  @Test public void testRead() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    final ServiceDocument document=requestBodyAndHeaders("direct://READSERVICEDOC",null,headers);
    assertNotNull(document);
    assertFalse("ServiceDocument entity sets",document.getEntitySetsInfo().isEmpty());
    LOG.info("Service document has {} entity sets",document.getEntitySetsInfo().size());
    final HashMap<String,String> queryParams=new HashMap<>();
    queryParams.put(SystemQueryOption.$top.name(),"5");
    headers.put("CamelOlingo2.queryParams",queryParams);
    final ODataFeed manufacturers=requestBodyAndHeaders("direct://READFEED",null,headers);
    assertNotNull(manufacturers);
    final List<ODataEntry> manufacturersEntries=manufacturers.getEntries();
    assertFalse("Manufacturers empty entries",manufacturersEntries.isEmpty());
    LOG.info("Manufacturers feed has {} entries",manufacturersEntries.size());
    headers.clear();
    headers.put(Olingo2Constants.PROPERTY_PREFIX + "keyPredicate","'1'");
    final ODataEntry manufacturer=requestBodyAndHeaders("direct://READENTRY",null,headers);
    assertNotNull(manufacturer);
    final Map<String,Object> properties=manufacturer.getProperties();
    assertEquals("Manufacturer Id","1",properties.get(ID_PROPERTY));
    LOG.info("Manufacturer: {}",properties);
  }
  @Test public void testCreateUpdateDelete() throws Exception {
    final Map<String,Object> data=getEntityData();
    Map<String,Object> address;
    final ODataEntry manufacturer=requestBody("direct://CREATE",data);
    assertNotNull("Created Manufacturer",manufacturer);
    final Map<String,Object> properties=manufacturer.getProperties();
    assertEquals("Created Manufacturer Id","123",properties.get(ID_PROPERTY));
    LOG.info("Created Manufacturer: {}",properties);
    data.put("Name","MyCarManufacturer Renamed");
    address=(Map<String,Object>)data.get("Address");
    address.put("Street","Main Street");
    HttpStatusCodes status=requestBody("direct://UPDATE",data);
    assertNotNull("Update status",status);
    assertEquals("Update status",HttpStatusCodes.NO_CONTENT.getStatusCode(),status.getStatusCode());
    LOG.info("Update status: {}",status);
    status=requestBody("direct://DELETE",null);
    assertNotNull("Delete status",status);
    assertEquals("Delete status",HttpStatusCodes.NO_CONTENT.getStatusCode(),status.getStatusCode());
    LOG.info("Delete status: {}",status);
  }
  private Map<String,Object> getEntityData(){
    final Map<String,Object> data=new HashMap<>();
    data.put("Id","123");
    data.put("Name","MyCarManufacturer");
    data.put("Founded",new Date());
    Map<String,Object> address=new HashMap<>();
    address.put("Street","Main");
    address.put("ZipCode","42421");
    address.put("City","Fairy City");
    address.put("Country","FarFarAway");
    data.put("Address",address);
    return data;
  }
  @Test public void testBatch() throws Exception {
    final List<Olingo2BatchRequest> batchParts=new ArrayList<>();
    batchParts.add(Olingo2BatchQueryRequest.resourcePath(Olingo2AppImpl.METADATA).build());
    batchParts.add(Olingo2BatchQueryRequest.resourcePath(MANUFACTURERS).build());
    batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_MANUFACTURER).build());
    final HashMap<String,String> queryParams=new HashMap<>();
    queryParams.put(SystemQueryOption.$expand.toString(),CARS);
    batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_MANUFACTURER).queryParams(queryParams).build());
    final Map<String,Object> data=getEntityData();
    batchParts.add(Olingo2BatchChangeRequest.resourcePath(MANUFACTURERS).contentId(TEST_RESOURCE_CONTENT_ID).operation(Operation.CREATE).body(data).build());
    final Map<String,Object> updateData=new HashMap<>(data);
    Map<String,Object> address=(Map<String,Object>)updateData.get(ADDRESS);
    address.put("Street","Main Street");
    batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE_ADDRESS).operation(Operation.UPDATE).body(address).build());
    updateData.put("Name","MyCarManufacturer Renamed");
    batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE).body(updateData).build());
    batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());
    batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());
    final List<Olingo2BatchResponse> responseParts=requestBody("direct://BATCH",batchParts);
    assertNotNull("Batch response",responseParts);
    assertEquals("Batch responses expected",9,responseParts.size());
    final Edm edm=(Edm)responseParts.get(0).getBody();
    assertNotNull(edm);
    LOG.info("Edm entity sets: {}",edm.getEntitySets());
    final ODataFeed feed=(ODataFeed)responseParts.get(1).getBody();
    assertNotNull(feed);
    LOG.info("Read feed: {}",feed.getEntries());
    ODataEntry dataEntry=(ODataEntry)responseParts.get(2).getBody();
    assertNotNull(dataEntry);
    LOG.info("Read entry: {}",dataEntry.getProperties());
    dataEntry=(ODataEntry)responseParts.get(3).getBody();
    assertNotNull(dataEntry);
    LOG.info("Read entry with $expand: {}",dataEntry.getProperties());
    dataEntry=(ODataEntry)responseParts.get(4).getBody();
    assertNotNull(dataEntry);
    LOG.info("Created entry: {}",dataEntry.getProperties());
    int statusCode=responseParts.get(5).getStatusCode();
    assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(),statusCode);
    LOG.info("Update address status: {}",statusCode);
    statusCode=responseParts.get(6).getStatusCode();
    assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(),statusCode);
    LOG.info("Update entry status: {}",statusCode);
    statusCode=responseParts.get(7).getStatusCode();
    assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(),statusCode);
    LOG.info("Delete status: {}",statusCode);
    assertEquals(HttpStatusCodes.NOT_FOUND.getStatusCode(),responseParts.get(8).getStatusCode());
    final Exception exception=(Exception)responseParts.get(8).getBody();
    assertNotNull(exception);
    LOG.info("Read deleted entry exception: {}",exception);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://READSERVICEDOC").to("olingo2://read/");
        from("direct://READFEED").to("olingo2://read/Manufacturers?$orderBy=Name%20asc");
        from("direct://READENTRY").to("olingo2://read/DefaultContainer.Manufacturers");
        from("direct://CREATE").to("olingo2://create/Manufacturers");
        from("direct://UPDATE").to("olingo2://update/Manufacturers('123')");
        from("direct://DELETE").to("olingo2://delete/Manufacturers('123')");
        from("direct://BATCH").to("olingo2://batch");
      }
    }
;
  }
}
