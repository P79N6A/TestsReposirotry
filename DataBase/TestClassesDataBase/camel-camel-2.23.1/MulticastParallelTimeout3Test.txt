/** 
 * @version 
 */
public class MulticastParallelTimeout3Test extends ContextTestSupport {
  @Test public void testMulticastParallelTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).body().not(body().contains("C"));
    getMockEndpoint("mock:A").expectedMessageCount(1);
    getMockEndpoint("mock:B").expectedMessageCount(1);
    getMockEndpoint("mock:C").expectedMessageCount(0);
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast(new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            if (oldExchange == null) {
              return newExchange;
            }
            String body=oldExchange.getIn().getBody(String.class);
            oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));
            return oldExchange;
          }
        }
).parallelProcessing().timeout(250).to("direct:a","direct:b","direct:c").end().to("mock:result");
        from("direct:a").to("mock:A").setBody(constant("A"));
        from("direct:b").to("mock:B").setBody(constant("B"));
        from("direct:c").delay(1000).to("mock:C").setBody(constant("C"));
      }
    }
;
  }
}
