/** 
 * A crude unit test to navigate the route and build a Java DSL from the route definition
 */
public class RandomLoadBalanceJavaDSLBuilderTest extends RandomLoadBalanceTest {
  @Test public void testNavigateRouteAsJavaDSLWithNavigate() throws Exception {
    StringBuilder sb=new StringBuilder();
    Route route=context.getRoutes().get(0);
    sb.append("from(\"" + route.getEndpoint().getEndpointUri() + "\")");
    Navigate<Processor> nav=route.navigate();
    navigateRoute(nav,sb);
    assertEquals("from(\"direct://start\").loadBalance().random().to(\"mock://x\").to(\"mock://y\").to(\"mock://z\")",sb.toString());
  }
  @Test public void testNavigateRouteAsJavaDSL() throws Exception {
    StringBuilder sb=new StringBuilder();
    RouteDefinition route=context.getRouteDefinitions().get(0);
    sb.append("from(\"" + route.getInputs().get(0).getUri() + "\")");
    navigateDefinition(route,sb);
    assertEquals("from(\"direct://start\").loadBalance().random().to(\"mock://x\").to(\"mock://y\").to(\"mock://z\")",sb.toString());
  }
  private void navigateRoute(  Navigate<Processor> nav,  StringBuilder sb){
    if (!nav.hasNext()) {
      return;
    }
    if (nav instanceof DefaultChannel) {
      DefaultChannel channel=(DefaultChannel)nav;
      ProcessorDefinition<?> def=channel.getProcessorDefinition();
      navigateDefinition(def,sb);
    }
  }
  private void navigateDefinition(  ProcessorDefinition<?> def,  StringBuilder sb){
    ProcessorDefinition<?> defn=(ProcessorDefinition<?>)def;
    if (defn instanceof LoadBalanceDefinition) {
      sb.append(".loadBalance()");
      LoadBalanceDefinition lbd=(LoadBalanceDefinition)defn;
      LoadBalancer balancer=lbd.getLoadBalancerType().getLoadBalancer(null);
      if (balancer instanceof RandomLoadBalancer) {
        sb.append(".random()");
      }
    }
    if (defn instanceof SendDefinition) {
      SendDefinition<?> send=(SendDefinition<?>)defn;
      sb.append(".to(\"" + send.getUri() + "\")");
    }
    List<ProcessorDefinition<?>> children=defn.getOutputs();
    if (children == null || children.isEmpty()) {
      return;
    }
    for (    ProcessorDefinition<?> child : children) {
      navigateDefinition(child,sb);
    }
  }
}
