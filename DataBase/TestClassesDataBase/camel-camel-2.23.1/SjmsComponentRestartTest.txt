public class SjmsComponentRestartTest extends CamelTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false");
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("activemqCF",connectionFactory);
    return jndi;
  }
  @Test public void testRestartWithStopStart() throws Exception {
    SjmsComponent sjmsComponent=new SjmsComponent();
    sjmsComponent.setConnectionFactory((ConnectionFactory)context.getRegistry().lookupByName("activemqCF"));
    context.addComponent("sjms",sjmsComponent);
    RouteBuilder routeBuilder=new RouteBuilder(context){
      @Override public void configure() throws Exception {
        from("sjms:queue:test").to("mock:test");
      }
    }
;
    context.addRoutes(routeBuilder);
    context.start();
    getMockEndpoint("mock:test").expectedMessageCount(1);
    template.sendBody("sjms:queue:test","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
    context.addComponent("sjms",sjmsComponent);
    context.start();
    getMockEndpoint("mock:test").expectedMessageCount(1);
    template=context.createProducerTemplate();
    template.sendBody("sjms:queue:test","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
  }
  @Test public void testRestartWithSuspendResume() throws Exception {
    SjmsComponent sjmsComponent=new SjmsComponent();
    sjmsComponent.setConnectionFactory((ConnectionFactory)context.getRegistry().lookupByName("activemqCF"));
    context.addComponent("sjms",sjmsComponent);
    RouteBuilder routeBuilder=new RouteBuilder(context){
      @Override public void configure() throws Exception {
        from("sjms:queue:test").to("mock:test");
      }
    }
;
    context.addRoutes(routeBuilder);
    context.start();
    getMockEndpoint("mock:test").expectedMessageCount(1);
    template.sendBody("sjms:queue:test","Hello World");
    assertMockEndpointsSatisfied();
    context.suspend();
    context.resume();
    getMockEndpoint("mock:test").expectedMessageCount(1);
    template.sendBody("sjms:queue:test","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
  }
}
