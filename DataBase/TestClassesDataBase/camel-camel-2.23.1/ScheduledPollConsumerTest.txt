public class ScheduledPollConsumerTest extends ContextTestSupport {
  private static boolean rollback;
  private static int counter;
  private static String event="";
  @Test public void testExceptionOnPollAndCanStartAgain() throws Exception {
    final Exception expectedException=new Exception("Hello, I should be thrown on shutdown only!");
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(new PollingConsumerPollStrategy(){
      public boolean begin(      Consumer consumer,      Endpoint endpoint){
        return true;
      }
      public void commit(      Consumer consumer,      Endpoint endpoint,      int polledMessages){
      }
      public boolean rollback(      Consumer consumer,      Endpoint endpoint,      int retryCounter,      Exception e) throws Exception {
        if (e == expectedException) {
          rollback=true;
        }
        return false;
      }
    }
);
    consumer.start();
    consumer.run();
    consumer.stop();
    assertEquals("Should have rollback",true,rollback);
    rollback=false;
    consumer.setExceptionToThrowOnPoll(null);
    consumer.start();
    consumer.run();
    consumer.stop();
    assertEquals("Should not have rollback",false,rollback);
  }
  @Test public void testRetryAtMostThreeTimes() throws Exception {
    counter=0;
    event="";
    final Exception expectedException=new Exception("Hello, I should be thrown on shutdown only!");
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(new PollingConsumerPollStrategy(){
      public boolean begin(      Consumer consumer,      Endpoint endpoint){
        return true;
      }
      public void commit(      Consumer consumer,      Endpoint endpoint,      int polledMessages){
        event+="commit";
      }
      public boolean rollback(      Consumer consumer,      Endpoint endpoint,      int retryCounter,      Exception e) throws Exception {
        event+="rollback";
        counter++;
        if (retryCounter < 3) {
          return true;
        }
        return false;
      }
    }
);
    consumer.setUseFixedDelay(true);
    consumer.setDelay(60000);
    consumer.start();
    consumer.run();
    consumer.stop();
    assertEquals(4,counter);
    assertEquals("rollbackrollbackrollbackrollback",event);
  }
  @Test public void testNoExceptionOnPoll() throws Exception {
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,null);
    consumer.start();
    consumer.run();
    consumer.stop();
  }
}
