/** 
 * @version
 */
public class AggregateTimeoutTest extends ContextTestSupport {
  private final AtomicInteger invoked=new AtomicInteger();
  private volatile Exchange receivedExchange;
  private volatile int receivedIndex;
  private volatile int receivedTotal;
  private volatile long receivedTimeout;
  @Test public void testAggregateTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    mock.assertIsSatisfied(200);
    assertEquals(1,invoked.get());
    assertNotNull(receivedExchange);
    assertEquals("AB",receivedExchange.getIn().getBody());
    assertEquals(-1,receivedIndex);
    assertEquals(-1,receivedTotal);
    assertEquals(100,receivedTimeout);
    mock.reset();
    mock.expectedBodiesReceived("ABC");
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    mock.assertIsSatisfied(150);
    assertEquals(1,invoked.get());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).discardOnCompletionTimeout().completionSize(3).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:aggregated");
      }
    }
;
  }
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
    public void timeout(    Exchange oldExchange,    int index,    int total,    long timeout){
      invoked.incrementAndGet();
      receivedExchange=oldExchange;
      receivedIndex=index;
      receivedTotal=total;
      receivedTimeout=timeout;
    }
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));
      return oldExchange;
    }
  }
}
