public class AutomatedConversionTest extends CamelTestSupport {
  private static int serverPort;
  private final int messageCount=1;
  private final String rfc3164Message="<165>Aug  4 05:34:00 mymachine myproc[10]: %% It's\n         time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK #\n" + "         Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport:\n" + "         Conveyer1=OK, Conveyer2=OK # %%";
  private final String rfc5424Message="<34>1 2003-10-11T22:14:15.003Z mymachine.example.com su - ID47 - BOM'su root' failed for lonvick on /dev/pts/8";
  @BeforeClass public static void initPort(){
    serverPort=AvailablePortFinder.getNextAvailable();
  }
  @Test public void testSendingRawUDP() throws IOException, InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:syslogReceiver");
    MockEndpoint mock2=getMockEndpoint("mock:syslogReceiver2");
    mock.expectedMessageCount(2);
    mock2.expectedMessageCount(2);
    mock2.expectedBodiesReceived(rfc3164Message,rfc5424Message);
    DatagramSocket socket=new DatagramSocket();
    try {
      InetAddress address=InetAddress.getByName("127.0.0.1");
      for (int i=0; i < messageCount; i++) {
        byte[] data=rfc3164Message.getBytes();
        DatagramPacket packet=new DatagramPacket(data,data.length,address,serverPort);
        socket.send(packet);
        Thread.sleep(100);
      }
      for (int i=0; i < messageCount; i++) {
        byte[] data=rfc5424Message.getBytes();
        DatagramPacket packet=new DatagramPacket(data,data.length,address,serverPort);
        socket.send(packet);
        Thread.sleep(100);
      }
    }
  finally {
      socket.close();
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("mina2:udp://127.0.0.1:" + serverPort).unmarshal().syslog().process(new Processor(){
          @Override public void process(          Exchange ex){
            assertTrue(ex.getIn().getBody() instanceof SyslogMessage);
          }
        }
).to("mock:syslogReceiver").marshal().syslog().to("mock:syslogReceiver2");
      }
    }
;
  }
}
