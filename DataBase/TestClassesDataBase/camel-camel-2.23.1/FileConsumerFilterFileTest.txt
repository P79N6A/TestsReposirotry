/** 
 * Unit test for  the filter file option
 */
public class FileConsumerFilterFileTest extends ContextTestSupport {
  private String fileUrl="file://target/filefilter/?initialDelay=0&delay=10&filterFile=${bodyAs(String)} contains 'World'";
  private String fileUrl2="file://target/filefilter/?initialDelay=0&delay=10&filterFile=${file:modified} < ${date:now-2s}";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filefilter");
    super.setUp();
  }
  @Test public void testFilterFiles() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    template.sendBodyAndHeader("file:target/filefilter/","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    mock.setResultWaitTime(100);
    mock.assertIsSatisfied();
  }
  @Test public void testFilterFilesWithARegularFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/filefilter/","This is a file to be filtered",Exchange.FILE_NAME,"skipme2.txt");
    template.sendBodyAndHeader("file:target/filefilter/","Hello World",Exchange.FILE_NAME,"hello.txt");
    mock.assertIsSatisfied();
  }
  @Test public void testFilterFilesWithDate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result2");
    mock.expectedBodiesReceived("Something else");
    template.sendBodyAndHeader("file:target/filefilter/","Something else",Exchange.FILE_NAME,"hello2.txt");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
        from(fileUrl2).convertBodyTo(String.class).to("mock:result2");
      }
    }
;
  }
}
