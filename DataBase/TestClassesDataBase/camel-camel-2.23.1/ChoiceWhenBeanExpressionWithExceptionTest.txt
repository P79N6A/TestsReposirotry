public class ChoiceWhenBeanExpressionWithExceptionTest extends ContextTestSupport {
  private MockEndpoint gradeA;
  private MockEndpoint otherGrade;
  protected void verifyGradeA(  String endpointUri) throws Exception {
    gradeA.reset();
    otherGrade.reset();
    gradeA.expectedMessageCount(0);
    otherGrade.expectedMessageCount(0);
    try {
      template.sendBody(endpointUri,new Student(95));
      fail();
    }
 catch (    CamelExecutionException e) {
    }
    assertMockEndpointsSatisfied();
  }
  public void verifyOtherGrade(  String endpointUri) throws Exception {
    gradeA.reset();
    otherGrade.reset();
    gradeA.expectedMessageCount(0);
    otherGrade.expectedMessageCount(0);
    try {
      template.sendBody(endpointUri,new Student(60));
      fail();
    }
 catch (    CamelExecutionException e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanExpression() throws Exception {
    verifyGradeA("direct:expression");
    verifyOtherGrade("direct:expression");
  }
  @Test public void testMethod() throws Exception {
    verifyGradeA("direct:method");
    verifyOtherGrade("direct:method");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    gradeA=getMockEndpoint("mock:gradeA");
    otherGrade=getMockEndpoint("mock:otherGrade");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:expression").choice().when(method(MyBean.class,"isGradeA")).to("mock:gradeA").otherwise().to("mock:otherGrade").end();
        from("direct:method").choice().when().method(MyBean.class).to("mock:gradeA").otherwise().to("mock:otherGrade").end();
      }
    }
;
  }
public static class MyBean {
    public boolean isGradeA(    @Body Student student){
      throw new RuntimeException("Bean predicated threw exception!");
    }
  }
class Student {
    private int grade;
    Student(    int grade){
      this.grade=grade;
    }
    public int getGrade(){
      return grade;
    }
  }
}
