/** 
 * @version 
 */
public class ConsumeJmsBytesMessageTest extends CamelTestSupport {
  protected JmsTemplate jmsTemplate;
  private MockEndpoint endpoint;
  @Test public void testConsumeBytesMessage() throws Exception {
    endpoint.expectedMessageCount(1);
    jmsTemplate.setPubSubDomain(false);
    jmsTemplate.send("test.bytes",new MessageCreator(){
      public Message createMessage(      Session session) throws JMSException {
        BytesMessage bytesMessage=session.createBytesMessage();
        bytesMessage.writeByte((byte)1);
        bytesMessage.writeByte((byte)2);
        bytesMessage.writeByte((byte)3);
        return bytesMessage;
      }
    }
);
    endpoint.assertIsSatisfied();
    assertCorrectBytesReceived();
  }
  @Test public void testSendBytesMessage() throws Exception {
    endpoint.expectedMessageCount(1);
    byte[] bytes=new byte[]{1,2,3};
    template.sendBody("direct:test",bytes);
    endpoint.assertIsSatisfied();
    assertCorrectBytesReceived();
  }
  protected void assertCorrectBytesReceived(){
    Exchange exchange=endpoint.getReceivedExchanges().get(0);
    assertNotNull(ExchangeHelper.getBinding(exchange,JmsBinding.class));
    JmsMessage in=(JmsMessage)exchange.getIn();
    assertNotNull(in);
    byte[] bytes=exchange.getIn().getBody(byte[].class);
    log.info("Received bytes: " + Arrays.toString(bytes));
    assertNotNull("Should have received a bytes message!",bytes);
    assertIsInstanceOf(BytesMessage.class,in.getJmsMessage());
    assertEquals("Wrong byte 1",1,bytes[0]);
    assertEquals("Wrong payload lentght",3,bytes.length);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    endpoint=getMockEndpoint("mock:result");
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    jmsTemplate=new JmsTemplate(connectionFactory);
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("activemq:test.bytes").to("mock:result");
        from("direct:test").to("activemq:test.bytes");
      }
    }
;
  }
}
