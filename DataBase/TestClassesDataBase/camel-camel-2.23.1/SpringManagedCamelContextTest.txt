@Ignore("Does not run well on CI due test uses JMX mbeans") public class SpringManagedCamelContextTest extends ManagedCamelContextTest {
  @Override protected boolean useJmx(){
    return true;
  }
  protected CamelContext createCamelContext() throws Exception {
    return createSpringCamelContext(this,"org/apache/camel/spring/management/SpringManagedCamelContextTest.xml");
  }
  @Test public void testFindEipNames() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    @SuppressWarnings("unchecked") List<String> info=(List<String>)mbeanServer.invoke(on,"findEipNames",null,null);
    assertNotNull(info);
    assertTrue(info.size() > 150);
    assertTrue(info.contains("transform"));
    assertTrue(info.contains("split"));
    assertTrue(info.contains("from"));
  }
  @Test public void testFindEips() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    @SuppressWarnings("unchecked") Map<String,Properties> info=(Map<String,Properties>)mbeanServer.invoke(on,"findEips",null,null);
    assertNotNull(info);
    assertTrue(info.size() > 150);
    Properties prop=info.get("transform");
    assertNotNull(prop);
    assertEquals("transform",prop.get("name"));
    assertEquals("org.apache.camel.model.TransformDefinition",prop.get("class"));
  }
  @Test public void testListEips() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    TabularData data=(TabularData)mbeanServer.invoke(on,"listEips",null,null);
    assertNotNull(data);
    assertTrue(data.size() > 150);
  }
}
