public class XMLTokenizeLanguageStreamingFileTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/xmltokenize");
    super.setUp();
  }
  @Test public void testFromFile() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("<c:child some_attr='a' anotherAttr='a' xmlns:c=\"urn:c\"></c:child>","<c:child some_attr='b' anotherAttr='b' xmlns:c=\"urn:c\"></c:child>","<c:child some_attr='c' anotherAttr='c' xmlns:c=\"urn:c\"></c:child>","<c:child some_attr='d' anotherAttr='d' xmlns:c=\"urn:c\"></c:child>");
    String body="<?xml version='1.0' encoding='UTF-8'?>" + "<c:parent xmlns:c='urn:c'>" + "<c:child some_attr='a' anotherAttr='a'></c:child>"+ "<c:child some_attr='b' anotherAttr='b'></c:child>"+ "<c:child some_attr='c' anotherAttr='c'></c:child>"+ "<c:child some_attr='d' anotherAttr='d'></c:child>"+ "</c:parent>";
    deleteDirectory("target/xmltokenize");
    template.sendBodyAndHeader("file:target/xmltokenize",body,Exchange.FILE_NAME,"myxml.xml");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      Namespaces ns=new Namespaces("C","urn:c");
      public void configure(){
        from("file:target/xmltokenize?initialDelay=0&delay=10").split().xtokenize("//C:child",ns).streaming().to("mock:result").end();
      }
    }
;
  }
}
