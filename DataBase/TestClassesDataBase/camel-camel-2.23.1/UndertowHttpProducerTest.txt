public class UndertowHttpProducerTest extends BaseUndertowTest {
  @Test public void testHttpSimple() throws Exception {
    getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    String out=template.requestBody("http://localhost:{{port}}/foo",null,String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpSimpleHeader() throws Exception {
    getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    String out=template.requestBodyAndHeader("http://localhost:{{port}}/foo",null,Exchange.HTTP_METHOD,"POST",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpSimpleHeaderAndBody() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    String out=template.requestBodyAndHeader("http://localhost:{{port}}/foo","Hello World",Exchange.HTTP_METHOD,"POST",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("undertow:http://localhost:{{port}}/foo").to("mock:input").transform().constant("Bye World");
      }
    }
;
  }
}
