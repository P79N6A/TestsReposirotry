/** 
 */
public class FileProducerMoveExistingTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/file");
    super.setUp();
  }
  @Test public void testExistingFileDoesNotExists() throws Exception {
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists("target/file/hello.txt");
    assertFileNotExists("target/file/renamed-hello.txt");
  }
  @Test public void testExistingFileExists() throws Exception {
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists("target/file/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File("target/file/hello.txt")));
    assertFileExists("target/file/renamed-hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/renamed-hello.txt")));
  }
  @Test public void testExistingFileExistsTempFileName() throws Exception {
    template.sendBodyAndHeader("file://target/file?tempFileName=${file:onlyname}.temp&fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file?tempFileName=${file:onlyname}.temp&fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists("target/file/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File("target/file/hello.txt")));
    assertFileExists("target/file/renamed-hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/renamed-hello.txt")));
  }
  @Test public void testExistingFileExistsMoveSubDir() throws Exception {
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=backup","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=backup","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists("target/file/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File("target/file/hello.txt")));
    assertFileExists("target/file/backup/hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/backup/hello.txt")));
  }
  @Test public void testFailOnMoveExistingFileExistsEagerDeleteTrue() throws Exception {
    template.sendBodyAndHeader("file://target/file","Old file",Exchange.FILE_NAME,"renamed-hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=true","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=true","Bye World",Exchange.FILE_NAME,"hello.txt");
    assertFileExists("target/file/hello.txt");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,new File("target/file/hello.txt")));
    assertFileExists("target/file/renamed-hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/renamed-hello.txt")));
  }
  @Test public void testFailOnMoveExistingFileExistsEagerDeleteFalse() throws Exception {
    template.sendBodyAndHeader("file://target/file","Old file",Exchange.FILE_NAME,"renamed-hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=false","Hello World",Exchange.FILE_NAME,"hello.txt");
    try {
      template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&eagerDeleteTargetFile=false","Bye World",Exchange.FILE_NAME,"hello.txt");
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      GenericFileOperationFailedException cause=assertIsInstanceOf(GenericFileOperationFailedException.class,e.getCause());
      assertTrue(cause.getMessage().startsWith("Cannot move existing file"));
    }
    assertFileExists("target/file/hello.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/hello.txt")));
    assertFileExists("target/file/renamed-hello.txt");
    assertEquals("Old file",context.getTypeConverter().convertTo(String.class,new File("target/file/renamed-hello.txt")));
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
