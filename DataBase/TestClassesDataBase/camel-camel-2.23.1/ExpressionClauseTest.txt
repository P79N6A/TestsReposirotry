/** 
 * @version 
 */
public class ExpressionClauseTest extends ContextTestSupport {
  @Test public void testConstant() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodyReceived().constant("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAttachments() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.expectedBodiesReceivedInAnyOrder("log4j2.properties","jndi-example.properties");
    template.send("direct:begin",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Message m=exchange.getIn();
        m.setBody("Hello World");
        m.addAttachmentObject("log4j",new DefaultAttachment(new FileDataSource("src/test/resources/log4j2.properties")));
        m.addAttachment("jndi-example",new DataHandler(new FileDataSource("src/test/resources/jndi-example.properties")));
      }
    }
);
    assertMockEndpointsSatisfied();
    Map<String,Attachment> attachments=mock.getExchanges().get(0).getIn().getAttachmentObjects();
    assertTrue(attachments == null || attachments.size() == 0);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
        from("direct:begin").split().attachments().bean(new Extractor()).to("mock:result");
      }
    }
;
  }
public final class Extractor {
    public String extractName(    DataHandler body){
      DataSource ds=(body != null) ? body.getDataSource() : null;
      if (ds instanceof FileDataSource) {
        return ((FileDataSource)ds).getName();
      }
      return null;
    }
  }
}
