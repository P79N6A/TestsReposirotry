/** 
 * @version 
 */
public class ThreadsCorePoolTest extends ContextTestSupport {
  private String beforeThreadName;
  private volatile String afterThreadName;
  @Test public void testThreadsCorePool() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertNotNull("The main thread name should be already properly set!",beforeThreadName);
    assertNotNull("The camel thread name should be already properly set!",afterThreadName);
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Test public void testThreadsCorePoolBuilder() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
    assertNotNull("The main thread name should be already properly set!",beforeThreadName);
    assertNotNull("The camel thread name should be already properly set!",afterThreadName);
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        from("direct:start").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).threads(5).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:result");
        from("direct:foo").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).threads().poolSize(5).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("mock:result");
      }
    }
;
  }
}
