/** 
 * Unit test to test filter option.
 */
public class FromFtpFilterTest extends FtpServerTestSupport {
  protected String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/filter?password=admin&binary=false&filter=#myFilter";
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myFilter",new MyFileFilter<>());
    return jndi;
  }
  @Test public void testFilterFiles() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    sendFile(getFtpUrl(),"This is a file to be filtered","skipme.txt");
    mock.setResultWaitTime(3000);
    mock.assertIsSatisfied();
  }
  @Test public void testFilterFilesWithARegularFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    sendFile(getFtpUrl(),"This is a file to be filtered","skipme.txt");
    sendFile(getFtpUrl(),"Hello World","hello.txt");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).to("mock:result");
      }
    }
;
  }
public class MyFileFilter<T> implements GenericFileFilter<T> {
    public boolean accept(    GenericFile<T> file){
      return !file.getFileName().startsWith("skip");
    }
  }
}
