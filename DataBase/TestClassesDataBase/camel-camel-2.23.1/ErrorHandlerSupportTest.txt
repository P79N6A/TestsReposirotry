public class ErrorHandlerSupportTest extends Assert {
  @Test public void testOnePolicyChildFirst(){
    List<Class<? extends Throwable>> exceptions=new ArrayList<>();
    exceptions.add(ChildException.class);
    exceptions.add(ParentException.class);
    ErrorHandlerSupport support=new ShuntErrorHandlerSupport();
    support.addExceptionPolicy(null,new OnExceptionDefinition(exceptions));
    assertEquals(ChildException.class,getExceptionPolicyFor(support,new ChildException(),0));
    assertEquals(ParentException.class,getExceptionPolicyFor(support,new ParentException(),1));
  }
  @Test public void testOnePolicyChildLast(){
    List<Class<? extends Throwable>> exceptions=new ArrayList<>();
    exceptions.add(ParentException.class);
    exceptions.add(ChildException.class);
    ErrorHandlerSupport support=new ShuntErrorHandlerSupport();
    support.addExceptionPolicy(null,new OnExceptionDefinition(exceptions));
    assertEquals(ChildException.class,getExceptionPolicyFor(support,new ChildException(),1));
    assertEquals(ParentException.class,getExceptionPolicyFor(support,new ParentException(),0));
  }
  @Test public void testTwoPolicyChildFirst(){
    ErrorHandlerSupport support=new ShuntErrorHandlerSupport();
    support.addExceptionPolicy(null,new OnExceptionDefinition(ChildException.class));
    support.addExceptionPolicy(null,new OnExceptionDefinition(ParentException.class));
    assertEquals(ChildException.class,getExceptionPolicyFor(support,new ChildException(),0));
    assertEquals(ParentException.class,getExceptionPolicyFor(support,new ParentException(),0));
  }
  @Test public void testTwoPolicyChildLast(){
    ErrorHandlerSupport support=new ShuntErrorHandlerSupport();
    support.addExceptionPolicy(null,new OnExceptionDefinition(ParentException.class));
    support.addExceptionPolicy(null,new OnExceptionDefinition(ChildException.class));
    assertEquals(ChildException.class,getExceptionPolicyFor(support,new ChildException(),0));
    assertEquals(ParentException.class,getExceptionPolicyFor(support,new ParentException(),0));
  }
  private static Class<? extends Throwable> getExceptionPolicyFor(  ErrorHandlerSupport support,  Throwable childException,  int index){
    return support.getExceptionPolicy(null,childException).getExceptionClasses().get(index);
  }
private static class ParentException extends Exception {
    private static final long serialVersionUID=1L;
  }
private static class ChildException extends ParentException {
    private static final long serialVersionUID=1L;
  }
private static class ShuntErrorHandlerSupport extends ErrorHandlerSupport {
    protected void doStart() throws Exception {
    }
    protected void doStop() throws Exception {
    }
    public boolean supportTransacted(){
      return false;
    }
    public Processor getOutput(){
      return null;
    }
    public void process(    Exchange exchange) throws Exception {
    }
  }
}
