/** 
 */
public class DirectVmTwoCamelContextDuplicateConsumerTest extends AbstractDirectVmTestSupport {
  @Test public void testThirdClash() throws Exception {
    CamelContext third=new DefaultCamelContext();
    third.addRoutes(createRouteBuilderForThirdContext());
    try {
      third.start();
      fail("Should have thrown exception");
    }
 catch (    IllegalStateException e) {
      assertEquals("A consumer Consumer[direct-vm://foo] already exists from CamelContext: camel-1. Multiple consumers not supported",e.getMessage());
    }
    context.stop();
    third.start();
    MockEndpoint mock=third.getEndpoint("mock:third",MockEndpoint.class);
    mock.expectedMessageCount(1);
    template2.sendBody("direct:start","Hello World");
    mock.assertIsSatisfied();
    third.stop();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct-vm:foo").transform(constant("Bye World")).log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("mock:result");
      }
    }
;
  }
  @Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("direct-vm:foo");
      }
    }
;
  }
  protected RouteBuilder createRouteBuilderForThirdContext() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct-vm:foo").transform(constant("Bye World")).log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("mock:third");
      }
    }
;
  }
}
