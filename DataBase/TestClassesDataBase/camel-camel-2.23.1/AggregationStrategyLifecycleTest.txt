public class AggregationStrategyLifecycleTest extends ContextTestSupport {
  private MyCompletionStrategy strategy=new MyCompletionStrategy();
  @Test public void testAggregateLifecycle() throws Exception {
    assertTrue("Should be started",strategy.isStarted());
    assertSame(context,strategy.getCamelContext());
    MockEndpoint result=getMockEndpoint("mock:aggregated");
    result.expectedBodiesReceived("A+B+C");
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    assertMockEndpointsSatisfied();
    context.stop();
    assertTrue("Should be stopped",strategy.isStopped());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),strategy).completionSize(3).to("mock:aggregated");
      }
    }
;
  }
private final class MyCompletionStrategy extends ServiceSupport implements AggregationStrategy, CamelContextAware {
    private CamelContext camelContext;
    private String separator;
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class) + separator + newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body);
      return oldExchange;
    }
    @Override public CamelContext getCamelContext(){
      return camelContext;
    }
    @Override public void setCamelContext(    CamelContext camelContext){
      this.camelContext=camelContext;
    }
    @Override protected void doStart() throws Exception {
      ObjectHelper.notNull(camelContext,"CamelContext");
      separator="+";
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
