/** 
 */
public class GroupTokenIteratorTest extends TestSupport {
  private CamelContext context;
  private Exchange exchange;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context=new DefaultCamelContext();
    context.start();
    exchange=new DefaultExchange(context);
  }
  @Override @After public void tearDown() throws Exception {
    context.stop();
    super.tearDown();
  }
  @Test public void testGroupIterator() throws Exception {
    String s="ABC\nDEF\nGHI\nJKL\nMNO\nPQR\nSTU\nVW";
    Scanner scanner=new Scanner(s,"\n");
    GroupTokenIterator gi=new GroupTokenIterator(exchange,scanner,"\n",3,false);
    assertTrue(gi.hasNext());
    assertEquals("ABC\nDEF\nGHI",gi.next());
    assertEquals("JKL\nMNO\nPQR",gi.next());
    assertEquals("STU\nVW",gi.next());
    assertFalse(gi.hasNext());
    IOHelper.close(gi);
  }
  @Test public void testGroupIteratorSkipFirst() throws Exception {
    String s="##comment\nABC\nDEF\nGHI\nJKL\nMNO\nPQR\nSTU\nVW";
    Scanner scanner=new Scanner(s,"\n");
    GroupTokenIterator gi=new GroupTokenIterator(exchange,scanner,"\n",3,true);
    assertTrue(gi.hasNext());
    assertEquals("ABC\nDEF\nGHI",gi.next());
    assertEquals("JKL\nMNO\nPQR",gi.next());
    assertEquals("STU\nVW",gi.next());
    assertFalse(gi.hasNext());
    IOHelper.close(gi);
  }
  @Test public void testGroupIteratorWithDifferentEncodingFromDefault() throws Exception {
    if (Charset.defaultCharset() == StandardCharsets.UTF_8) {
      return;
    }
    byte[] buf="\u00A31\n\u00A32\n".getBytes(StandardCharsets.UTF_8);
    ByteArrayInputStream in=new ByteArrayInputStream(buf);
    Scanner scanner=new Scanner(in,StandardCharsets.UTF_8.displayName(),"\n");
    exchange.setProperty(Exchange.CHARSET_NAME,StandardCharsets.UTF_8.displayName());
    GroupTokenIterator gi=new GroupTokenIterator(exchange,scanner,"\n",1,false);
    assertTrue(gi.hasNext());
    assertEquals("\u00A31",gi.next());
    assertEquals("\u00A32",gi.next());
    assertFalse(gi.hasNext());
    IOHelper.close(gi);
  }
}
