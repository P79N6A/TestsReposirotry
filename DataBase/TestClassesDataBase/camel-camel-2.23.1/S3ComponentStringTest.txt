public class S3ComponentStringTest extends CamelTestSupport {
  @EndpointInject(uri="direct:sendString") ProducerTemplate templateSendString;
  @EndpointInject(uri="mock:result") MockEndpoint result;
  AmazonS3ClientMock client;
  File testFile;
  String getCamelBucket(){
    return "mycamelbucket";
  }
  @Test public void sendString() throws Exception {
    result.expectedMessageCount(1);
    Exchange exchange=templateSendString.send("direct:sendString",ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(S3Constants.KEY,"CamelUnitTest");
        exchange.getIn().setBody("Peppe");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertResultExchange(result.getExchanges().get(0),true);
    PutObjectRequest putObjectRequest=client.putObjectRequests.get(0);
    assertEquals(getCamelBucket(),putObjectRequest.getBucketName());
    assertResponseMessage(exchange.getIn());
  }
  void assertResultExchange(  Exchange resultExchange,  boolean delete){
    assertIsInstanceOf(String.class,resultExchange.getIn().getBody());
  }
  void assertResponseMessage(  Message message){
    assertEquals("3a5c8b1ad448bca04584ecb55b836264",message.getHeader(S3Constants.E_TAG));
    assertNull(message.getHeader(S3Constants.VERSION_ID));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    client=new AmazonS3ClientMock();
    registry.bind("amazonS3Client",client);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        String awsEndpoint="aws-s3://" + getCamelBucket() + "?amazonS3Client=#amazonS3Client&region=us-west-1";
        from("direct:sendString").to(awsEndpoint + "&deleteAfterWrite=false").to("mock:result");
      }
    }
;
  }
}
