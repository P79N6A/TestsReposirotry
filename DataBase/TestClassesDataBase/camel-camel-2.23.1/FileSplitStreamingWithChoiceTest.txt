/** 
 * @version 
 */
public class FileSplitStreamingWithChoiceTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filesplit");
    super.setUp();
  }
  @Test public void testSplitStreamingWithChoice() throws Exception {
    getMockEndpoint("mock:other").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:body");
    mock.expectedBodiesReceived("line1","line2","line3");
    mock.expectedFileExists("target/filesplit/.camel/splitme.txt");
    String body="line1" + LS + "line2"+ LS+ "line3";
    template.sendBodyAndHeader("file://target/filesplit",body,Exchange.FILE_NAME,"splitme.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filesplit?initialDelay=0&delay=10").split(body().tokenize(LS)).streaming().to("mock:split").choice().when(bodyAs(String.class).isNotNull()).to("mock:body").otherwise().to("mock:other").end();
      }
    }
;
  }
}
