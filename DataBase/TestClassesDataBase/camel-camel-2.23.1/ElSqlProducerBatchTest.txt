public class ElSqlProducerBatchTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    jndi.bind("dataSource",db);
    return jndi;
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testBatchMode() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header(SqlConstants.SQL_UPDATE_COUNT).isEqualTo(1);
    Map<String,Object> batchParams=new HashMap<>();
    batchParams.put("id","4");
    batchParams.put("license","GNU");
    batchParams.put("project","Batch");
    template.sendBody("direct:batch",batchParams);
    mock.assertIsSatisfied();
  }
  @Test public void testNonBatchMode() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header(SqlConstants.SQL_UPDATE_COUNT).isEqualTo(1);
    mock.message(0).header("id").isEqualTo("4");
    mock.message(0).header("license").isEqualTo("GNU");
    mock.message(0).header("project").isEqualTo("nonBatch");
    Map<String,Object> headers=new HashMap<>();
    headers.put("id","4");
    headers.put("license","GNU");
    headers.put("project","nonBatch");
    template.sendBodyAndHeaders("direct:nonBatch","",headers);
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:batch").to("elsql:insertProject:elsql/projects.elsql?dataSource=#dataSource&batch=true").to("mock:result");
        from("direct:nonBatch").to("elsql:insertProject:elsql/projects.elsql?dataSource=#dataSource").to("mock:result");
      }
    }
;
  }
}
