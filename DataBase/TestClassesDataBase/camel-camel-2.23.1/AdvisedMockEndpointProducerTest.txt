@RunWith(Arquillian.class) public class AdvisedMockEndpointProducerTest {
  @Inject @Uri("direct:inbound") private ProducerTemplate inbound;
  @Inject @Uri("mock:outbound") private MockEndpoint outbound;
  @Inject @Uri("mock:intercepted") private MockEndpoint intercepted;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(ManualStartupCamelContext.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void startCamelContext(  CamelContext context) throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        interceptSendToEndpoint("mock:outbound").skipSendToOriginalEndpoint().log("Intercepting message [${body}] from mock endpoint").to("mock:intercepted");
        from("direct:inbound").to("mock:outbound");
      }
    }
);
    context.startAllRoutes();
  }
  @Test @InSequence(2) public void sendMessageToInbound() throws InterruptedException {
    outbound.expectedMessageCount(0);
    intercepted.expectedMessageCount(1);
    intercepted.expectedBodiesReceived("test");
    inbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,outbound,intercepted);
  }
}
