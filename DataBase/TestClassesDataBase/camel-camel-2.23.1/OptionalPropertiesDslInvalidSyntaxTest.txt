/** 
 * Test that placeholder DSL is working as expected.
 */
public class OptionalPropertiesDslInvalidSyntaxTest extends ContextTestSupport {
  @Test public void testPlaceholderDslKeyNotFoundTest() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast().placeholder("stopOnException","xxx").to("mock:a").throwException(new IllegalAccessException("Damn")).to("mock:b");
      }
    }
);
    try {
      context.start();
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Property with key [xxx] not found in properties from text: {{xxx}}",cause.getMessage());
    }
  }
  @Test public void testPlaceholderDslSetterNotFoundTest() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast().placeholder("xxx","stop").to("mock:a").throwException(new IllegalAccessException("Damn")).to("mock:b");
      }
    }
);
    try {
      context.start();
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("No setter to set property: xxx to: true on: Multicast[[To[mock:a], ThrowException[java.lang.IllegalAccessException], To[mock:b]]]",cause.getMessage());
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("properties",new PropertiesComponent("classpath:org/apache/camel/component/properties/myproperties.properties"));
    return context;
  }
}
