/** 
 * Unit test to verify exclusive read option using *none
 */
public class FileExclusiveReadNoneStrategyTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FileExclusiveReadNoneStrategyTest.class);
  private String fileUrl="file://target/exclusiveread/slowfile?noop=true&initialDelay=0&delay=10&readLock=none";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/exclusiveread");
    createDirectory("target/exclusiveread/slowfile");
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").process(new MySlowFileProcessor());
        from(fileUrl + "&readLockTimeout=500").to("mock:result");
      }
    }
;
  }
  @Test public void testPollFileWhileSlowFileIsBeingWritten() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("seda:start","Create the slow file");
    mock.assertIsSatisfied();
    String body=mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
    LOG.debug("Body is: " + body);
    assertFalse("Should not wait and read the entire file",body.endsWith("Bye World"));
  }
private static class MySlowFileProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      LOG.info("Creating a slow file with no locks...");
      File file=new File("target/exclusiveread/slowfile/hello.txt");
      FileOutputStream fos=new FileOutputStream(file);
      fos.write("Hello World".getBytes());
      for (int i=0; i < 3; i++) {
        Thread.sleep(100);
        fos.write(("Line #" + i).getBytes());
        LOG.info("Appending to slowfile");
      }
      fos.write("Bye World".getBytes());
      fos.close();
      LOG.info("... done creating slowfile");
    }
  }
}
