public class CamelCatalogRestTest {
  private Server server;
  private CamelCatalogRest catalog;
  private int port;
  @Before public void setup(){
    catalog=new CamelCatalogRest();
    port=AvailablePortFinder.getNextAvailable(9000);
    JAXRSServerFactoryBean sf=new JAXRSServerFactoryBean();
    sf.setResourceClasses(CamelCatalogRest.class);
    sf.setResourceProvider(CamelCatalogRest.class,new SingletonResourceProvider(catalog));
    sf.setProvider(JacksonJsonProvider.class);
    sf.setAddress("http://localhost:" + port);
    server=sf.create();
    server.start();
  }
  @After public void stop(){
    if (server != null) {
      server.stop();
    }
  }
  @Test public void testFindComponentLabels() throws Exception {
    given().baseUri("http://localhost:" + port).accept("application/json").when().get("/camel-catalog/findComponentLabels").then().body("$",hasItems("bigdata","messaging"));
  }
  @Test public void testComponentJSonSchema() throws Exception {
    given().baseUri("http://localhost:" + port).accept("application/json").when().get("/camel-catalog/componentJSonSchema/quartz2").then().body("component.description",Matchers.is("Provides a scheduled delivery of messages using the Quartz 2.x scheduler."));
  }
}
