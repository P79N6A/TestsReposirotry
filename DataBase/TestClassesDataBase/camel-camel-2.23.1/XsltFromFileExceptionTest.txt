/** 
 */
public class XsltFromFileExceptionTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/xslt");
    super.setUp();
  }
  @Test public void testXsltFromFileExceptionOk() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    template.sendBodyAndHeader("file:target/xslt","<hello>world!</hello>",Exchange.FILE_NAME,"hello.xml");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    File file=new File("target/xslt/hello.xml");
    assertFalse("File should not exists " + file,file.exists());
    file=new File("target/xslt/ok/hello.xml");
    assertTrue("File should exists " + file,file.exists());
  }
  @Test public void testXsltFromFileExceptionFail() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/xslt","<hello>world!</hello",Exchange.FILE_NAME,"hello2.xml");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    File file=new File("target/xslt/hello2.xml");
    assertFalse("File should not exists " + file,file.exists());
    file=new File("target/xslt/error/hello2.xml");
    assertTrue("File should exists " + file,file.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/xslt?moveFailed=error&move=ok&initialDelay=0&delay=10").onException(Exception.class).to("mock:error").end().to("xslt:org/apache/camel/component/xslt/example.xsl").to("mock:result");
      }
    }
;
  }
}
