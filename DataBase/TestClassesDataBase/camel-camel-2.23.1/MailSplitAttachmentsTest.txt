/** 
 * Tests the  {@link SplitAttachmentsExpression}.
 */
public class MailSplitAttachmentsTest extends CamelTestSupport {
  private Endpoint endpoint;
  private SplitAttachmentsExpression splitAttachmentsExpression;
  private Exchange exchange;
  @Before public void clearMailBox(){
    Mailbox.clearAll();
  }
  @Before public void setup(){
    endpoint=context.getEndpoint("smtp://james@mymailserver.com?password=secret");
    exchange=endpoint.createExchange();
    Message in=exchange.getIn();
    in.setBody("Hello World");
    in.addAttachment("logo.jpeg",new DataHandler(new FileDataSource("src/test/data/logo.jpeg")));
    in.addAttachment("license.txt",new DataHandler(new FileDataSource("src/main/resources/META-INF/LICENSE.txt")));
  }
  @Test public void testSplitAttachments() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedMessageCount(2);
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    mock.assertIsSatisfied();
    Message first=mock.getReceivedExchanges().get(0).getIn();
    Message second=mock.getReceivedExchanges().get(1).getIn();
    assertEquals(1,first.getAttachments().size());
    assertEquals(1,second.getAttachments().size());
    String file1=first.getAttachments().keySet().iterator().next();
    String file2=second.getAttachments().keySet().iterator().next();
    boolean logo=file1.equals("logo.jpeg") || file2.equals("logo.jpeg");
    boolean license=file1.equals("license.txt") || file2.equals("license.txt");
    assertTrue("Should have logo.jpeg file attachment",logo);
    assertTrue("Should have license.txt file attachment",license);
  }
  @Test public void testExtractAttachments() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedMessageCount(2);
    splitAttachmentsExpression.setExtractAttachments(true);
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    mock.assertIsSatisfied();
    Message first=mock.getReceivedExchanges().get(0).getIn();
    Message second=mock.getReceivedExchanges().get(1).getIn();
    assertEquals(0,first.getAttachments().size());
    assertEquals(0,second.getAttachments().size());
    assertEquals("logo.jpeg",first.getHeader("CamelSplitAttachmentId"));
    assertEquals("license.txt",second.getHeader("CamelSplitAttachmentId"));
    byte[] expected1=IOUtils.toByteArray(new FileDataSource("src/test/data/logo.jpeg").getInputStream());
    byte[] expected2=IOUtils.toByteArray(new FileDataSource("src/main/resources/META-INF/LICENSE.txt").getInputStream());
    assertArrayEquals(expected1,first.getBody(byte[].class));
    assertArrayEquals(expected2,second.getBody(byte[].class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    splitAttachmentsExpression=new SplitAttachmentsExpression(false);
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("pop3://james@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100").to("log:email").split(splitAttachmentsExpression).to("mock:split").end();
      }
    }
;
  }
}
