/** 
 * @version 
 */
public class ThreadsRejectedExecutionTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testThreadsRejectedExecution() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        ExecutorService pool=new ThreadPoolExecutor(1,1,0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());
        from("seda:start").to("log:before").threads().executorService(pool).delay(200).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedMessageCount(3);
    template.sendBody("seda:start","Hello World");
    template.sendBody("seda:start","Hi World");
    template.sendBody("seda:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testThreadsRejectedExecutionCallerNotRuns() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        ExecutorService pool=new ThreadPoolExecutor(1,1,0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());
        from("seda:start").to("log:before").threads().executorService(pool).callerRunsWhenRejected(false).delay(200).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    mock.setResultWaitTime(2000);
    template.sendBody("seda:start","Hello World");
    template.sendBody("seda:start","Hi World");
    template.sendBody("seda:start","Bye World");
    mock.assertIsNotSatisfied();
    assertEquals(1,mock.getReceivedCounter());
  }
  @Test public void testThreadsRejectedDiscard() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").to("log:before").threads(1,1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Discard).delay(100).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    getMockEndpoint("mock:result").expectedMinimumMessageCount(2);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:start","Message " + i);
    }
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    int inflight=context.getInflightRepository().size();
    assertEquals(0,inflight);
  }
  @Test public void testThreadsRejectedDiscardOldest() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").to("log:before").threads(1,1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.DiscardOldest).delay(100).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    getMockEndpoint("mock:result").expectedMinimumMessageCount(2);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:start","Message " + i);
    }
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    int inflight=context.getInflightRepository().size();
    assertEquals(0,inflight);
  }
  @Test public void testThreadsRejectedAbort() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").to("log:before").threads(1,1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).delay(100).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    getMockEndpoint("mock:result").expectedMinimumMessageCount(2);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:start","Message " + i);
    }
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    int inflight=context.getInflightRepository().size();
    assertEquals(0,inflight);
  }
  @Test public void testThreadsRejectedCallerRuns() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").to("log:before").threads(1,1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.CallerRuns).delay(100).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    getMockEndpoint("mock:result").expectedMessageCount(10);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:start","Message " + i);
    }
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    int inflight=context.getInflightRepository().size();
    assertEquals(0,inflight);
  }
  @Test public void testThreadsRejectedAbortNoRedelivery() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).redeliveryDelay(250).maximumRedeliveries(3).handled(true).to("mock:error");
        from("seda:start").to("log:before").threads(1,1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).delay(250).to("log:after").to("mock:result");
      }
    }
);
    context.start();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMinimumMessageCount(2);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:start","Message " + i);
    }
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    int inflight=context.getInflightRepository().size();
    assertEquals(0,inflight);
  }
}
