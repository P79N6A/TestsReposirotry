public class JmsInOutTransferExchangeTest extends CamelTestSupport {
  @EndpointInject(uri="mock:transfer") protected MockEndpoint transfer;
  @EndpointInject(uri="mock:result") protected MockEndpoint result;
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Test public void testTransferExchangeInOut() throws Exception {
    transfer.expectedMessageCount(1);
    result.expectedMessageCount(1);
    template.send("direct:start",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(new SerializableRequestDto("Restless Camel"));
        Map<String,Object> map=new HashMap<>();
        map.put("boolean",Boolean.TRUE);
        map.put("string","hello");
        map.put("long",new Long(123));
        map.put("double",new Double(1.23));
        exchange.getIn().setHeaders(map);
        exchange.setProperty("PropertyName","PropertyValue");
      }
    }
);
    assertMockEndpointsSatisfied();
    Exchange transferExchange=transfer.getExchanges().get(0);
    Exchange exchange=createExchangeWithBody(null);
    assertTrue(transferExchange.getIn() instanceof JmsMessage);
    JmsMessage transferMessage=(JmsMessage)transferExchange.getIn();
    ActiveMQObjectMessage transferActiveMQMessage=(ActiveMQObjectMessage)transferMessage.getJmsMessage();
    assertTrue(transferActiveMQMessage.getObject() instanceof DefaultExchangeHolder);
    DefaultExchangeHolder exchangeHolder=(DefaultExchangeHolder)transferActiveMQMessage.getObject();
    DefaultExchangeHolder.unmarshal(exchange,exchangeHolder);
    assertNotNull(exchange.getIn().getBody(SerializableRequestDto.class));
    assertEquals(Boolean.TRUE,exchange.getIn().getHeader("boolean",Boolean.class));
    assertEquals((Long)123L,exchange.getIn().getHeader("long",Long.class));
    assertEquals((Double)1.23,exchange.getIn().getHeader("double",Double.class));
    assertEquals("hello",exchange.getIn().getHeader("string",String.class));
    assertEquals("PropertyValue",exchange.getProperty("PropertyName"));
    Exchange resultExchange=result.getExchanges().get(0);
    assertTrue(resultExchange.getIn() instanceof JmsMessage);
    JmsMessage resultMessage=(JmsMessage)resultExchange.getIn();
    ActiveMQObjectMessage resultActiveMQMessage=(ActiveMQObjectMessage)resultMessage.getJmsMessage();
    exchangeHolder=(DefaultExchangeHolder)resultActiveMQMessage.getObject();
    exchange=createExchangeWithBody(null);
    DefaultExchangeHolder.unmarshal(exchange,exchangeHolder);
    assertNotNull(exchange.getIn().getBody(SerializableResponseDto.class));
    assertEquals(Boolean.TRUE,exchange.getIn().getHeader("boolean",Boolean.class));
    assertEquals((Long)123L,exchange.getIn().getHeader("long",Long.class));
    assertEquals((Double)1.23,exchange.getIn().getHeader("double",Double.class));
    assertEquals("hello",exchange.getIn().getHeader("string",String.class));
    assertEquals("PropertyValue",exchange.getProperty("PropertyName"));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").inOut("activemq:responseGenerator?transferExchange=true").to("mock:result");
        from("activemq:responseGenerator?transferExchange=true").to("mock:transfer").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody(new SerializableResponseDto(true));
          }
        }
);
      }
    }
;
  }
}
