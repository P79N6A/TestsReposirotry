/** 
 * @version 
 */
public class BeanConcurrentTest extends ContextTestSupport {
  @Test public void testBeanConcurrent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1000);
    mock.expectsNoDuplicates(body());
    for (int i=1000; i < 2000; i++) {
      template.sendBody("seda:foo","" + i);
    }
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    List<String> list=new ArrayList<>();
    for (int i=0; i < 1000; i++) {
      String body=mock.getReceivedExchanges().get(i).getIn().getBody(String.class);
      list.add(body);
    }
    list.sort(null);
    assertEquals(1000,list.size());
    for (int i=1; i < 1000; i++) {
      int num=1000 + i;
      String s="" + num + " "+ num;
      assertEquals(s,list.get(i));
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyBean());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?concurrentConsumers=10").routeId("foo").noAutoStartup().to("bean:myBean").to("mock:result");
      }
    }
;
  }
@SuppressWarnings("unused") private static class MyBean {
    private String foo;
    private String bar;
    private int baz;
    public String getFoo(){
      return foo;
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
    public String getBar(){
      return bar;
    }
    public void setBar(    String bar){
      this.bar=bar;
    }
    public int getBaz(){
      return baz;
    }
    public void setBaz(    int baz){
      this.baz=baz;
    }
    public void doSomething(){
    }
    public String echo(    String s){
      return s + " " + s;
    }
    @Override public String toString(){
      return "MyBean";
    }
  }
}
