/** 
 * @version 
 */
public class SqlProducerConcurrentTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint mockEndpoint;
  private EmbeddedDatabase db;
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    mockEndpoint.expectedMessageCount(files);
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    Map<Integer,Future<List<?>>> responses=new HashMap<>();
    for (int i=0; i < files; i++) {
      final int index=i;
      Future<List<?>> out=executor.submit(new Callable<List<?>>(){
        public List<?> call() throws Exception {
          int id=(index % 3) + 1;
          return template.requestBody("direct:simple","" + id,List.class);
        }
      }
);
      responses.put(index,out);
    }
    assertMockEndpointsSatisfied();
    assertEquals(files,responses.size());
    for (int i=0; i < files; i++) {
      List<?> rows=responses.get(i).get();
      Map<?,?> columns=assertIsInstanceOf(Map.class,rows.get(0));
      if (i % 3 == 0) {
        assertEquals("Camel",columns.get("PROJECT"));
      }
 else       if (i % 3 == 1) {
        assertEquals("AMQ",columns.get("PROJECT"));
      }
 else {
        assertEquals("Linux",columns.get("PROJECT"));
      }
    }
    executor.shutdownNow();
  }
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:simple").to("sql:select * from projects where id = # order by id").to("mock:result");
      }
    }
;
  }
}
