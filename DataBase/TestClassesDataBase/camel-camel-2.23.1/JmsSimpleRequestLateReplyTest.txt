/** 
 * A simple request / late reply test.
 */
public class JmsSimpleRequestLateReplyTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(JmsSimpleRequestLateReplyTest.class);
  private static Destination replyDestination;
  private static String cid;
  protected String expectedBody="Late Reply";
  protected JmsComponent activeMQComponent;
  private final CountDownLatch latch=new CountDownLatch(1);
  @Test public void testRequestLateReplyUsingCustomDestinationHeaderForReply() throws Exception {
    doTest(new SendLateReply());
  }
  protected void doTest(  Runnable runnable) throws InterruptedException {
    new Thread(runnable).start();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    Object body=template.requestBody(getQueueEndpointName(),"Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(expectedBody,body);
  }
private class SendLateReply implements Runnable {
    public void run(){
      try {
        LOG.info("Waiting for latch");
        latch.await(30,TimeUnit.SECONDS);
        Thread.sleep(1000);
      }
 catch (      Exception e) {
      }
      LOG.info("Sending late reply");
      Map<String,Object> headers=new HashMap<>();
      headers.put(JmsConstants.JMS_DESTINATION,replyDestination);
      headers.put("JMSCorrelationID",cid);
      template.sendBodyAndHeaders("activemq:dummy",expectedBody,headers);
    }
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    activeMQComponent=camelContext.getComponent("activemq",JmsComponent.class);
    activeMQComponent.getConfiguration().setRequestTimeout(10000);
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getQueueEndpointName()).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.setPattern(ExchangePattern.InOnly);
            Message in=exchange.getIn();
            assertEquals("Hello World",in.getBody());
            replyDestination=in.getHeader("JMSReplyTo",Destination.class);
            cid=in.getHeader("JMSCorrelationID",String.class);
            LOG.info("ReplyDestination: " + replyDestination);
            LOG.info("JMSCorrelationID: " + cid);
            LOG.info("Ahh I cannot send a reply. Someone else must do it.");
            latch.countDown();
          }
        }
).to("mock:result");
      }
    }
;
  }
  protected static String getQueueEndpointName(){
    return "activemq:queue:hello.queue?replyTo=myReplyQueue";
  }
}
