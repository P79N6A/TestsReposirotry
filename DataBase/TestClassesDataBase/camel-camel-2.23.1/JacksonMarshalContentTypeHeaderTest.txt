public class JacksonMarshalContentTypeHeaderTest extends CamelTestSupport {
  @Test public void testYes() throws Exception {
    final Map<String,Object> in=new HashMap<>();
    in.put("name","Camel");
    Exchange out=template.request("direct:yes",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(in);
      }
    }
);
    assertNotNull(out);
    assertTrue(out.hasOut());
    assertEquals("application/json",out.getOut().getHeader(Exchange.CONTENT_TYPE));
  }
  @Test public void testYes2() throws Exception {
    final Map<String,Object> in=new HashMap<>();
    in.put("name","Camel");
    Exchange out=template.request("direct:yes2",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(in);
      }
    }
);
    assertNotNull(out);
    assertTrue(out.hasOut());
    assertEquals("application/json",out.getOut().getHeader(Exchange.CONTENT_TYPE));
  }
  @Test public void testNo() throws Exception {
    final Map<String,Object> in=new HashMap<>();
    in.put("name","Camel");
    Exchange out=template.request("direct:no",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(in);
      }
    }
);
    assertNotNull(out);
    assertTrue(out.hasOut());
    assertNull(out.getOut().getHeader(Exchange.CONTENT_TYPE));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        JacksonDataFormat format=new JacksonDataFormat();
        from("direct:yes").marshal(format);
        from("direct:yes2").marshal().json(JsonLibrary.Jackson);
        JacksonDataFormat formatNoHeader=new JacksonDataFormat();
        formatNoHeader.setContentTypeHeader(false);
        from("direct:no").marshal(formatNoHeader);
      }
    }
;
  }
}
