public class LoadTimerTest extends ContextTestSupport {
  private static final int SAMPLES=2;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testTimer() throws Exception {
    TimerListenerManager myTimer=new TimerListenerManager();
    myTimer.setCamelContext(context);
    myTimer.start();
    TestLoadAware test=new TestLoadAware();
    myTimer.addTimerListener(test);
    try {
      await().atMost(5,TimeUnit.SECONDS).untilAsserted(() -> {
        assertTrue(test.counter >= SAMPLES);
        assertFalse(Double.isNaN(test.load.getLoad1()));
        assertTrue(test.load.getLoad1() > 0.0d);
        assertTrue(test.load.getLoad1() < SAMPLES);
      }
);
    }
  finally {
      myTimer.removeTimerListener(test);
    }
    myTimer.stop();
  }
private class TestLoadAware implements TimerListener {
    volatile int counter;
    LoadTriplet load=new LoadTriplet();
    @Override public void onTimer(){
      load.update(++counter);
    }
  }
}
