/** 
 * Unit test of the zip data format.
 */
public class ZipDataFormatTest extends ContextTestSupport {
  private static final String TEXT="The Cow in Apple Time \n" + "by: Robert Frost \n\n" + "Something inspires the only cow of late\n"+ "To make no more of a wall than an open gate,\n"+ "And think no more of wall-builders than fools.\n"+ "Her face is flecked with pomace and she drools\n"+ "A cider syrup. Having tasted fruit,\n"+ "She scorns a pasture withering to the root.\n"+ "She runs from tree to tree where lie and sweeten.\n"+ "The windfalls spiked with stubble and worm-eaten.\n"+ "She leaves them bitten when she has to fly.\n"+ "She bellows on a knoll against the sky.\n"+ "Her udder shrivels and the milk goes dry.";
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testMarshalMandatoryConversionFailed() throws Exception {
    DataFormat dataFormat=new ZipDataFormat();
    try {
      dataFormat.marshal(new DefaultExchange(new DefaultCamelContext()),new Object(),new ByteArrayOutputStream());
      fail("Should have thrown an exception");
    }
 catch (    NoTypeConversionAvailableException e) {
    }
  }
  @Test public void testMarshalTextToZipBestCompression() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().zip(Deflater.BEST_COMPRESSION).process(new ZippedMessageProcessor());
      }
    }
);
    context.start();
    sendText();
  }
  @Test public void testMarshalTextToZipBestSpeed() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().zip(Deflater.BEST_SPEED).process(new ZippedMessageProcessor());
      }
    }
);
    context.start();
    sendText();
  }
  @Test public void testMarshalTextToZipDefaultCompression() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().zip(Deflater.DEFAULT_COMPRESSION).process(new ZippedMessageProcessor());
      }
    }
);
    context.start();
    sendText();
  }
  @Test public void testUnMarshalTextToZip() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().zip().unmarshal().zip().to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint result=context.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived(TEXT);
    sendText();
    result.assertIsSatisfied();
    List<Exchange> exchangeList=result.getExchanges();
    assertTrue(exchangeList.get(0).getIn().getBody() instanceof byte[]);
  }
  @Test public void testStreamCacheUnzip() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").streamCaching().marshal().zip().unmarshal().zip().to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint result=context.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived(TEXT);
    sendText();
    result.assertIsSatisfied();
    List<Exchange> exchangeList=result.getExchanges();
    assertTrue(exchangeList.get(0).getIn().getBody() instanceof InputStreamCache);
  }
  private void sendText() throws Exception {
    template.sendBodyAndProperty("direct:start",TEXT,Exchange.CHARSET_NAME,"UTF-8");
  }
private static class ZippedMessageProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      byte[] body=exchange.getIn().getBody(byte[].class);
      Inflater inflater=new Inflater();
      inflater.setInput(body);
      ByteArrayOutputStream bos=new ByteArrayOutputStream(body.length);
      byte[] buf=new byte[1024];
      while (!inflater.finished()) {
        int count=inflater.inflate(buf);
        bos.write(buf,0,count);
      }
      String result=new String(bos.toByteArray(),"UTF-8");
      assertEquals(TEXT,result);
    }
  }
}
