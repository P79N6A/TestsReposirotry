/** 
 * @version 
 */
public class JmxInstrumentationOnlyRegisterProcessorWithCustomIdTest extends ContextTestSupport {
  protected String domainName=DefaultManagementAgent.DEFAULT_DOMAIN;
  protected MBeanServer server;
  @Override protected boolean useJmx(){
    return true;
  }
  @Test public void testCustomId() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    Set<ObjectName> s=server.queryNames(new ObjectName(domainName + ":type=endpoints,*"),null);
    assertEquals("Could not find 2 endpoints: " + s,6,s.size());
    s=server.queryNames(new ObjectName(domainName + ":type=context,*"),null);
    assertEquals("Could not find 1 context: " + s,1,s.size());
    s=server.queryNames(new ObjectName(domainName + ":type=processors,*"),null);
    assertEquals("Could not find 1 processor: " + s,1,s.size());
    ObjectName on=s.iterator().next();
    String id=(String)server.getAttribute(on,"ProcessorId");
    assertEquals("myfoo",id);
    s=server.queryNames(new ObjectName(domainName + ":type=routes,*"),null);
    assertEquals("Could not find 2 route: " + s,2,s.size());
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getManagementStrategy().getManagementAgent().setOnlyRegisterProcessorWithCustomId(true);
    return context;
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    server=ManagementFactory.getPlatformMBeanServer();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:foo").id("myfoo").delay(10).to("mock:result");
        from("direct:other").to("mock:bar").delay(10).to("mock:other");
      }
    }
;
  }
}
