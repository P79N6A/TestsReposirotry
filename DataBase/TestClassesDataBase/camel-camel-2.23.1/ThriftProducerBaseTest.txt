public class ThriftProducerBaseTest extends CamelTestSupport {
  protected static final int THRIFT_TEST_PORT=AvailablePortFinder.getNextAvailable();
  protected static final int THRIFT_TEST_NUM1=12;
  protected static final int THRIFT_TEST_NUM2=13;
  @SuppressWarnings({"rawtypes"}) protected static Calculator.Processor processor;
  private static final Logger LOG=LoggerFactory.getLogger(ThriftProducerBaseTest.class);
  private static TNonblockingServerSocket serverTransport;
  private static TServer server;
  @BeforeClass @SuppressWarnings({"unchecked","rawtypes"}) public static void startThriftServer() throws Exception {
    processor=new Calculator.Processor(new CalculatorSyncServerImpl());
    serverTransport=new TNonblockingServerSocket(THRIFT_TEST_PORT);
    server=new THsHaServer(new Args(serverTransport).processor(processor));
    Runnable simple=new Runnable(){
      public void run(){
        LOG.info("Thrift server started on port: {}",THRIFT_TEST_PORT);
        server.serve();
      }
    }
;
    new Thread(simple).start();
  }
  @AfterClass public static void stopThriftServer() throws IOException {
    if (server != null) {
      server.stop();
      serverTransport.close();
      LOG.info("Thrift server stoped");
    }
  }
}
