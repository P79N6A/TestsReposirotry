/** 
 * @version
 */
public class SplitterThrowExceptionInExpressionTwoTest extends ContextTestSupport {
  @Test public void testSplitterAndVerifyMock() throws Exception {
    getMockEndpoint("mock:cast1").expectedMessageCount(1);
    getMockEndpoint("mock:cast2").expectedMessageCount(0);
    getMockEndpoint("mock:cast3").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").errorHandler(deadLetterChannel("mock:error").disableRedelivery()).multicast().stopOnException().streaming().to("mock:cast1").split(new MyExpression()).stopOnException().streaming().to("mock:cast2").end().to("mock:cast3").end().to("mock:result");
      }
    }
;
  }
private static class MyExpression implements Expression {
    public <T>T evaluate(    Exchange exchange,    Class<T> type){
      throw new ExpressionEvaluationException(null,exchange,null);
    }
  }
}
