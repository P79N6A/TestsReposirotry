/** 
 * @version 
 */
public class LoggingErrorHandlerBuilderTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testLoggingErrorHandler() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        LoggingErrorHandlerBuilder eh=loggingErrorHandler();
        eh.setLevel(LoggingLevel.ERROR);
        eh.setLog(LoggerFactory.getLogger("foo"));
        assertEquals(LoggingLevel.ERROR,eh.getLevel());
        assertNotNull(eh.getLog());
        assertFalse(eh.supportTransacted());
        errorHandler(eh);
        from("direct:start").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testLoggingErrorHandler2() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(loggingErrorHandler().level(LoggingLevel.WARN).log(LoggerFactory.getLogger("foo")));
        from("direct:start").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testLoggingErrorHandler3() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        LoggingErrorHandlerBuilder eh=loggingErrorHandler(LoggerFactory.getLogger("foo"));
        eh.setLevel(LoggingLevel.ERROR);
        assertEquals(LoggingLevel.ERROR,eh.getLevel());
        assertNotNull(eh.getLog());
        assertFalse(eh.supportTransacted());
        errorHandler(eh);
        from("direct:start").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testLoggingErrorHandler4() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        LoggingErrorHandlerBuilder eh=loggingErrorHandler(LoggerFactory.getLogger("foo"),LoggingLevel.ERROR);
        assertEquals(LoggingLevel.ERROR,eh.getLevel());
        assertNotNull(eh.getLog());
        assertFalse(eh.supportTransacted());
        errorHandler(eh);
        from("direct:start").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testLoggingErrorHandler5() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(loggingErrorHandler().level(LoggingLevel.ERROR).logName("foo"));
        from("direct:start").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testLoggingErrorHandler6() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(loggingErrorHandler().level(LoggingLevel.WARN).logName("foo"));
        from("direct:start").routeId("myRoute").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
  }
}
