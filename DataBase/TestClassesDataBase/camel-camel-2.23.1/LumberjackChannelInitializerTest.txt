public class LumberjackChannelInitializerTest {
  @Test public void shouldDecodeTwoWindowsWithCompressedMessages() throws Exception {
    List<Object> messages=new ArrayList<>();
    EmbeddedChannel channel=new EmbeddedChannel(new LumberjackChannelInitializer(null,null,(payload,callback) -> {
      messages.add(payload);
      callback.onComplete(true);
    }
));
    writeResourceBytePerByte(channel,"window10");
    writeResourceBytePerByte(channel,"window15");
    assertEquals(25,messages.size());
    Map first=(Map)messages.get(0);
    assertEquals("log",first.get("type"));
    assertEquals("/home/qatest/collectNetwork/log/data-integration/00000000-f000-0000-1541-8da26f200001/absorption.log",first.get("source"));
    assertEquals(2,channel.outboundMessages().size());
    checkAck((ByteBuf)channel.outboundMessages().poll(),10);
    checkAck((ByteBuf)channel.outboundMessages().poll(),15);
  }
  private void writeResourceBytePerByte(  EmbeddedChannel channel,  String resource) throws IOException {
    try (InputStream stream=getClass().getResourceAsStream(resource)){
      int input;
      while ((input=stream.read()) != -1) {
        ByteBuf buffer=buffer(1,1);
        buffer.writeByte(input);
        channel.writeInbound(buffer);
      }
    }
   }
  private void checkAck(  ByteBuf buf,  int sequence){
    assertEquals("version",(short)VERSION_V2,buf.readUnsignedByte());
    assertEquals("frame",(short)TYPE_ACKNOWLEDGE,buf.readUnsignedByte());
    assertEquals("sequence",sequence,buf.readInt());
    assertEquals("remaining",0,buf.readableBytes());
  }
}
