public class AtomixMapNodesProducerTest extends AtomixClientTestSupport {
  private static final String MAP_NAME=UUID.randomUUID().toString();
  private DistributedMap<Object,Object> map;
  @EndpointInject(uri="direct:start") private FluentProducerTemplate fluent;
  @Override protected Map<String,Component> createComponents(){
    return Collections.emptyMap();
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    map=getClient().getMap(MAP_NAME).join();
  }
  @Override @After public void tearDown() throws Exception {
    map.close();
    super.tearDown();
  }
  @Test public void testPut() throws Exception {
    final String key=context().getUuidGenerator().generateUuid();
    final String val=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withBody(val).request(Message.class);
    assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(val,result.getBody());
    assertEquals(val,map.get(key).join());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").toF("atomix-map:%s?nodes=%s:%d",MAP_NAME,replicaAddress.host(),replicaAddress.port());
      }
    }
;
  }
}
