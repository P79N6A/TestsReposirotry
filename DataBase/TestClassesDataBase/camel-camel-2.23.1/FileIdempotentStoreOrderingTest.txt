public class FileIdempotentStoreOrderingTest {
  private FileIdempotentRepository fileIdempotentRepository;
  private List<String> files;
  @Before public void setup(){
    files=Arrays.asList("file1.txt.20171123","file2.txt.20171123","file1.txt.20171124","file3.txt.20171125","file2.txt.20171126","fixed.income.lamr.out.20171126","pricing.px.20171126","test.out.20171126","processing.source.lamr.out.20171126");
    this.fileIdempotentRepository=new FileIdempotentRepository();
  }
  @Test public void testTrunkStoreNotMaxHit() throws Exception {
    deleteDirectory("target/mystore");
    createDirectory("target/mystore");
    File fileStore=new File("target/mystore/data.dat");
    fileIdempotentRepository.setFileStore(fileStore);
    fileIdempotentRepository.setCacheSize(10);
    fileIdempotentRepository.start();
    files.forEach(e -> fileIdempotentRepository.add(e));
    fileIdempotentRepository.stop();
    Stream<String> fileContent=Files.lines(fileStore.toPath());
    List<String> fileEntries=fileContent.collect(Collectors.toList());
    fileContent.close();
    Assert.assertThat(fileEntries,IsIterableContainingInOrder.contains("file1.txt.20171123","file2.txt.20171123","file1.txt.20171124","file3.txt.20171125","file2.txt.20171126","fixed.income.lamr.out.20171126","pricing.px.20171126","test.out.20171126","processing.source.lamr.out.20171126"));
  }
  @Test public void testTrunkStoreFirstLevelMaxHit() throws Exception {
    deleteDirectory("target/mystore");
    createDirectory("target/mystore");
    File fileStore=new File("target/mystore/data.dat");
    fileIdempotentRepository.setFileStore(fileStore);
    fileIdempotentRepository.setCacheSize(5);
    fileIdempotentRepository.start();
    files.forEach(e -> fileIdempotentRepository.add(e));
    fileIdempotentRepository.stop();
    Stream<String> fileContent=Files.lines(fileStore.toPath());
    List<String> fileEntries=fileContent.collect(Collectors.toList());
    fileContent.close();
    Assert.assertThat(fileEntries,IsIterableContainingInOrder.contains("file1.txt.20171123","file2.txt.20171123","file1.txt.20171124","file3.txt.20171125","file2.txt.20171126","fixed.income.lamr.out.20171126","pricing.px.20171126","test.out.20171126","processing.source.lamr.out.20171126"));
  }
  @Test public void testTrunkStoreFileMaxHit() throws Exception {
    deleteDirectory("target/mystore");
    createDirectory("target/mystore");
    File fileStore=new File("target/mystore/data.dat");
    fileIdempotentRepository.setFileStore(fileStore);
    fileIdempotentRepository.setCacheSize(5);
    fileIdempotentRepository.setMaxFileStoreSize(128);
    fileIdempotentRepository.setDropOldestFileStore(1000);
    fileIdempotentRepository.start();
    files.forEach(e -> fileIdempotentRepository.add(e));
    fileIdempotentRepository.cleanup();
    fileIdempotentRepository.trunkStore();
    fileIdempotentRepository.stop();
    Stream<String> fileContent=Files.lines(fileStore.toPath());
    List<String> fileEntries=fileContent.collect(Collectors.toList());
    fileContent.close();
    Assert.assertEquals(0,fileEntries.size());
  }
}
