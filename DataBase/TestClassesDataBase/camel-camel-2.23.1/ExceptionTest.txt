/** 
 * @version 
 */
public class ExceptionTest extends ContextTestSupport {
  @Test public void testExceptionWithoutHandler() throws Exception {
    MockEndpoint errorEndpoint=getMockEndpoint("mock:error");
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    MockEndpoint exceptionEndpoint=getMockEndpoint("mock:exception");
    errorEndpoint.expectedBodiesReceived("<exception/>");
    exceptionEndpoint.expectedMessageCount(0);
    resultEndpoint.expectedMessageCount(0);
    template.sendBody("direct:start","<body/>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testExceptionWithHandler() throws Exception {
    MockEndpoint errorEndpoint=getMockEndpoint("mock:error");
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    MockEndpoint exceptionEndpoint=getMockEndpoint("mock:exception");
    errorEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedBodiesReceived("<exception/>");
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBody("direct:start","<body/>");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testExceptionWithLongHandler() throws Exception {
    MockEndpoint errorEndpoint=getMockEndpoint("mock:error");
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    MockEndpoint exceptionEndpoint=getMockEndpoint("mock:exception");
    errorEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedBodiesReceived("<not-handled/>");
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBody("direct:start","<body/>");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testLongRouteWithHandler() throws Exception {
    MockEndpoint errorEndpoint=getMockEndpoint("mock:error");
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    MockEndpoint exceptionEndpoint=getMockEndpoint("mock:exception");
    errorEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedBodiesReceived("<exception/>");
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBody("direct:start2","<body/>");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    final Processor exceptionThrower=new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("<exception/>");
        throw new IllegalArgumentException("Exception thrown intentionally.");
      }
    }
;
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
        if (getName().endsWith("WithLongHandler")) {
          log.debug("Using long exception handler");
          onException(IllegalArgumentException.class).setBody(constant("<not-handled/>")).to("mock:exception");
        }
 else         if (getName().endsWith("WithHandler")) {
          log.debug("Using exception handler");
          onException(IllegalArgumentException.class).to("mock:exception");
        }
        from("direct:start").process(exceptionThrower).to("mock:result");
        from("direct:start2").to("direct:intermediate").to("mock:result");
        from("direct:intermediate").setBody(constant("<some-value/>")).process(exceptionThrower).to("mock:result");
      }
    }
;
  }
}
