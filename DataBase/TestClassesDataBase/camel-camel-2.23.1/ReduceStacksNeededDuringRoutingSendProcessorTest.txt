/** 
 * @version 
 */
public class ReduceStacksNeededDuringRoutingSendProcessorTest extends ContextTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  @Test public void testReduceStacksNeeded() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        MyEndpoint my=new MyEndpoint();
        my.setCamelContext(getContext());
        from("seda:start").to("log:foo").to("log:bar").to("log:baz").to(my).to("mock:result");
      }
    }
;
  }
public static final class MyEndpoint extends DefaultEndpoint {
    public MyEndpoint(){
      super("myendpoint:foo");
    }
    @Override public Producer createProducer() throws Exception {
      return new MyProducer(this);
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    @Override public boolean isSingleton(){
      return true;
    }
  }
public static final class MyProducer extends DefaultAsyncProducer {
    public MyProducer(    Endpoint endpoint){
      super(endpoint);
    }
    @Override public boolean process(    Exchange exchange,    AsyncCallback callback){
      try {
        throw new IllegalArgumentException("Forced to dump stacktrace");
      }
 catch (      Exception e) {
        e.fillInStackTrace();
        log.info("There are " + e.getStackTrace().length + " lines in the stacktrace");
        log.error("Dump stacktrace to log",e);
      }
      callback.done(true);
      return true;
    }
  }
}
