public class SaxonConverterTest extends CamelTestSupport {
  private static final String CONTENT="<a xmlns=\"http://www.apache.org/test\"><b foo=\"bar\">test</b><c><d>foobar</d></c></a>";
  private static final String CONTENT_B="<b xmlns=\"http://www.apache.org/test\" foo=\"bar\">test</b>";
  private static final NamespaceContext NS_CONTEXT=(new DefaultNamespaceContext()).add("ns1","http://www.apache.org/test");
  private Exchange exchange;
  private XPathEvaluator evaluator;
  private NodeInfo doc;
  @Before public void setUp() throws Exception {
    super.setUp();
    exchange=new DefaultExchange(context);
    evaluator=new XPathEvaluator();
    doc=evaluator.getConfiguration().buildDocumentTree(new StringSource(CONTENT)).getRootNode();
  }
  @Test public void convertToDOMSource() throws XPathException {
    DOMSource source=context.getTypeConverter().convertTo(DOMSource.class,exchange,doc);
    assertNotNull(source);
    String string=context.getTypeConverter().convertTo(String.class,exchange,source);
    assertEquals(CONTENT,string);
  }
  @Test public void convertToDocument() throws XPathException {
    Document document=context.getTypeConverter().convertTo(Document.class,exchange,doc);
    assertNotNull(document);
    String string=context.getTypeConverter().convertTo(String.class,exchange,document);
    assertEquals(CONTENT,string);
  }
  @Test public void convertSubNodeToDocument() throws XPathException, XPathExpressionException {
    evaluator.setNamespaceContext(NS_CONTEXT);
    Object nodeObj=evaluator.evaluate("/ns1:a/ns1:b",doc,XPathConstants.NODE);
    assertNotNull(nodeObj);
    Document document=context.getTypeConverter().convertTo(Document.class,exchange,nodeObj);
    assertNotNull(document);
    String string=context.getTypeConverter().convertTo(String.class,exchange,document);
    assertEquals(CONTENT_B,string);
  }
  @Test public void convertSubNodeSetToDocument() throws XPathException, XPathExpressionException {
    evaluator.setNamespaceContext(NS_CONTEXT);
    Object nodeObj=evaluator.evaluate("/ns1:a/ns1:b",doc,XPathConstants.NODESET);
    assertNotNull(nodeObj);
    Document document=context.getTypeConverter().convertTo(Document.class,exchange,nodeObj);
    assertNotNull(document);
    String string=context.getTypeConverter().convertTo(String.class,exchange,document);
    assertEquals(CONTENT_B,string);
  }
  @Test public void convertToNode() throws XPathException {
    Node node=context.getTypeConverter().convertTo(Node.class,exchange,doc);
    assertNotNull(node);
    String string=context.getTypeConverter().convertTo(String.class,exchange,node);
    assertEquals(CONTENT,string);
  }
  @Test public void convertToNodeList() throws XPathException {
    List<NodeInfo> nil=new LinkedList<>();
    nil.add(doc);
    NodeList nodeList=context.getTypeConverter().convertTo(NodeList.class,exchange,nil);
    assertNotNull(nodeList);
    assertEquals(1,nodeList.getLength());
    String string=context.getTypeConverter().convertTo(String.class,exchange,nodeList);
    assertEquals(CONTENT,string);
  }
  @Test public void convertToInputStream() throws XPathException {
    InputStream is=context.getTypeConverter().convertTo(InputStream.class,exchange,doc);
    assertNotNull(is);
    String string=context.getTypeConverter().convertTo(String.class,exchange,is);
    assertEquals(CONTENT,string);
  }
  @Test public void convertToByteArray() throws XPathException {
    byte[] ba=context.getTypeConverter().convertTo(byte[].class,exchange,doc);
    assertNotNull(ba);
    String string=context.getTypeConverter().convertTo(String.class,exchange,ba);
    assertEquals(CONTENT,string);
  }
  @Test public void convertToNodeAndByteArray() throws XPathException {
    Node node=context.getTypeConverter().convertTo(Node.class,exchange,doc);
    assertNotNull(node);
    byte[] ba=context.getTypeConverter().convertTo(byte[].class,exchange,node);
    assertNotNull(ba);
    String string=context.getTypeConverter().convertTo(String.class,exchange,ba);
    assertEquals(CONTENT,string);
  }
}
