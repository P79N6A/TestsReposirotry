public class RoutingSlipMemoryLeakTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/output");
    super.setUp();
  }
  /** 
 * Reproducer for the memory leak: CAMEL-10048
 */
  @Test public void testMemoryLeakInExceptionHandlerCaching() throws Exception {
    int messageCount=100;
    for (int i=0; i < messageCount; i++) {
      template.sendBody("direct:start","message " + i);
    }
    RoutingSlip routingSlip=context.getProcessor("memory-leak",RoutingSlip.class);
    assertNotNull(routingSlip);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").routingSlip(method(SlipProvider.class)).id("memory-leak");
      }
    }
;
  }
public static class SlipProvider {
    public String computeSlip(    String body){
      return "file:target/output";
    }
  }
}
