/** 
 * Testing CAMEL-4388
 */
public class LogEipPropagateExceptionTest extends ContextTestSupport {
  @Test public void testFailure() throws Exception {
    getMockEndpoint("mock:handleFailure").whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new RuntimeException("TEST EXCEPTION");
      }
    }
);
    getMockEndpoint("mock:exceptionFailure").expectedMessageCount(1);
    sendBody("direct:startFailure","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSuccess() throws Exception {
    getMockEndpoint("mock:handleSuccess").whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new RuntimeException("TEST EXCEPTION");
      }
    }
);
    getMockEndpoint("mock:exceptionSuccess").expectedMessageCount(1);
    sendBody("direct:startSuccess","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:startFailure").onException(Throwable.class).to("mock:exceptionFailure").end().to("direct:handleFailure").to("mock:resultFailure");
        from("direct:handleFailure").errorHandler(noErrorHandler()).log("FAULTY LOG").to("mock:handleFailure");
        from("direct:startSuccess").onException(Throwable.class).to("mock:exceptionSuccess").end().to("direct:handleSuccess").to("mock:resultSuccess");
        from("direct:handleSuccess").errorHandler(noErrorHandler()).to("mock:handleSuccess");
      }
    }
;
  }
}
