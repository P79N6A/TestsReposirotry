public class SplitIteratorNullTest extends ContextTestSupport {
  private MyIterator myIterator=new MyIterator();
  @Test public void testSplitIteratorNull() throws Exception {
    assertFalse(myIterator.isNullReturned());
    getMockEndpoint("mock:line").expectedBodiesReceived("A","B","C");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertTrue(myIterator.isNullReturned());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(constant(myIterator)).to("mock:line");
      }
    }
;
  }
private class MyIterator implements Iterator<String> {
    private int count=4;
    private boolean nullReturned;
    @Override public boolean hasNext(){
      return count > 0;
    }
    @Override public String next(){
      count--;
      if (count == 0) {
        nullReturned=true;
        return null;
      }
 else       if (count == 1) {
        return "C";
      }
 else       if (count == 2) {
        return "B";
      }
 else {
        return "A";
      }
    }
    public boolean isNullReturned(){
      return nullReturned;
    }
    @Override public void remove(){
    }
    @Override public void forEachRemaining(    Consumer<? super String> action){
    }
  }
}
