public class VmMultipleConsumersMultipleContextTest extends ContextTestSupport {
  @Test public void testMultipleVMConsumersSameContext() throws Exception {
    CamelContext camelContext=new DefaultCamelContext();
    ProducerTemplate producerTemplate=camelContext.createProducerTemplate();
    RouteBuilder builder=new RouteBuilder(camelContext){
      @Override public void configure() throws Exception {
        from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1");
      }
    }
;
    RouteBuilder builder2=new RouteBuilder(camelContext){
      @Override public void configure() throws Exception {
        from("vm:producer?multipleConsumers=true").routeId("route2").to("mock:route2");
      }
    }
;
    camelContext.addRoutes(builder);
    camelContext.addRoutes(builder2);
    camelContext.start();
    MockEndpoint mock1=(MockEndpoint)camelContext.getEndpoint("mock:route1");
    MockEndpoint mock2=(MockEndpoint)camelContext.getEndpoint("mock:route2");
    mock1.expectedMessageCount(100);
    mock2.expectedMessageCount(100);
    for (int i=0; i < 100; i++) {
      producerTemplate.sendBody("vm:producer?multipleConsumers=true",i);
    }
    MockEndpoint.assertIsSatisfied(mock1,mock2);
    camelContext.stop();
  }
  @Test public void testVmMultipleConsumersMultipleContext() throws Exception {
    CamelContext consumerContext1=new DefaultCamelContext();
    consumerContext1.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1");
      }
    }
);
    consumerContext1.start();
    MockEndpoint route1Mock=(MockEndpoint)consumerContext1.getEndpoint("mock:route1");
    route1Mock.expectedMessageCount(100);
    CamelContext consumerContext2=new DefaultCamelContext();
    consumerContext2.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:producer?multipleConsumers=true").routeId("route2").to("mock:route2");
      }
    }
);
    consumerContext2.start();
    MockEndpoint route2Mock=(MockEndpoint)consumerContext2.getEndpoint("mock:route2");
    route2Mock.expectedMessageCount(100);
    for (int i=0; i < 100; i++) {
      template.sendBody("vm:producer?multipleConsumers=true",i);
    }
    route1Mock.assertIsSatisfied();
    route2Mock.assertIsSatisfied();
    consumerContext1.stop();
    consumerContext2.stop();
  }
  private CamelContext buildConsumerContext(  final String route) throws Exception {
    DefaultCamelContext rc=new DefaultCamelContext();
    rc.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:producer?multipleConsumers=true").routeId(route).to("mock:" + route);
      }
    }
);
    rc.start();
    return rc;
  }
  @Test public void testVmMultipleConsumersDifferentEndpoints() throws Exception {
    CamelContext consumerContext1=new DefaultCamelContext();
    consumerContext1.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1");
      }
    }
);
    consumerContext1.start();
    MockEndpoint route1Mock=(MockEndpoint)consumerContext1.getEndpoint("mock:route1");
    route1Mock.expectedMessageCount(100);
    CamelContext consumerContext2=new DefaultCamelContext();
    consumerContext2.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:foo?multipleConsumers=true").routeId("route2").to("mock:route2");
      }
    }
);
    consumerContext2.start();
    MockEndpoint route2Mock=(MockEndpoint)consumerContext2.getEndpoint("mock:route2");
    route2Mock.expectedMessageCount(0);
    for (int i=0; i < 100; i++) {
      template.sendBody("vm:producer?multipleConsumers=true",i);
    }
    route1Mock.assertIsSatisfied();
    route2Mock.assertIsSatisfied();
    consumerContext1.stop();
    consumerContext2.stop();
  }
}
