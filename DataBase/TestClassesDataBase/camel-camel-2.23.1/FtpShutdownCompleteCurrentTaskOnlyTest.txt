/** 
 * Unit test to verify shutdown.
 */
public class FtpShutdownCompleteCurrentTaskOnlyTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/pending?password=admin&initialDelay=5000";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  private void prepareFtpServer() throws Exception {
    String ftpUrl="ftp://admin@localhost:" + getPort() + "/pending/?password=admin";
    template.sendBodyAndHeader(ftpUrl,"A",Exchange.FILE_NAME,"a.txt");
    template.sendBodyAndHeader(ftpUrl,"B",Exchange.FILE_NAME,"b.txt");
    template.sendBodyAndHeader(ftpUrl,"C",Exchange.FILE_NAME,"c.txt");
    template.sendBodyAndHeader(ftpUrl,"D",Exchange.FILE_NAME,"d.txt");
    template.sendBodyAndHeader(ftpUrl,"E",Exchange.FILE_NAME,"e.txt");
  }
  @Test public void testShutdownCompleteCurrentTaskOnly() throws Exception {
    context.getShutdownStrategy().setTimeout(20);
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMinimumMessageCount(1);
    Thread.sleep(50);
    assertMockEndpointsSatisfied();
    context.stop();
    assertTrue("Should NOT complete all messages, was: " + bar.getReceivedCounter(),bar.getReceivedCounter() < 5);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl()).routeId("route1").shutdownRunningTask(ShutdownRunningTask.CompleteCurrentTaskOnly).delay(1000).to("seda:foo");
        from("seda:foo").routeId("route2").to("mock:bar");
      }
    }
;
  }
}
