/** 
 * Unit test for preserveMessageQos with delivery mode
 */
public class JmsRouteDeliveryModePreserveQoSTest extends CamelTestSupport {
  @Test public void testSendDefault() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("activemq:queue:foo?preserveMessageQos=true","Hello World");
    assertMockEndpointsSatisfied();
    Map<String,Object> map=mock.getReceivedExchanges().get(0).getIn().getHeaders();
    assertNotNull(map);
    assertEquals(DeliveryMode.PERSISTENT,map.get("JMSDeliveryMode"));
  }
  @Test public void testSendNonPersistent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSDeliveryMode",DeliveryMode.NON_PERSISTENT);
    assertMockEndpointsSatisfied();
    Map<String,Object> map=mock.getReceivedExchanges().get(0).getIn().getHeaders();
    assertNotNull(map);
    assertEquals(DeliveryMode.NON_PERSISTENT,map.get("JMSDeliveryMode"));
  }
  @Test public void testSendNonPersistentAsString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSDeliveryMode","NON_PERSISTENT");
    assertMockEndpointsSatisfied();
    Map<String,Object> map=mock.getReceivedExchanges().get(0).getIn().getHeaders();
    assertNotNull(map);
    assertEquals(DeliveryMode.NON_PERSISTENT,map.get("JMSDeliveryMode"));
  }
  @Test public void testSendPersistent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSDeliveryMode",DeliveryMode.PERSISTENT);
    assertMockEndpointsSatisfied();
    Map<String,Object> map=mock.getReceivedExchanges().get(0).getIn().getHeaders();
    assertNotNull(map);
    assertEquals(DeliveryMode.PERSISTENT,map.get("JMSDeliveryMode"));
  }
  @Test public void testSendPersistentAsString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSDeliveryMode","PERSISTENT");
    assertMockEndpointsSatisfied();
    Map<String,Object> map=mock.getReceivedExchanges().get(0).getIn().getHeaders();
    assertNotNull(map);
    assertEquals(DeliveryMode.PERSISTENT,map.get("JMSDeliveryMode"));
  }
  @Test public void testNonJmsDeliveryMode() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Beer is good...");
    mock.message(0).header("JMSDeliveryMode").isEqualTo(1);
    template.sendBody("direct:nonJmsDeliveryMode","Beer is good...");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNonJmsDeliveryModeDisableExplicityQos() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Beer is good...");
    mock.message(0).header("JMSDeliveryMode").isEqualTo(2);
    template.sendBody("direct:noExplicitNonJmsDeliveryMode","Beer is good...");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNonJmsDeliveryModePreserveQos() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedBodiesReceived("Beer is good...");
    mock.message(0).header("JMSDeliveryMode").isEqualTo(1);
    template.sendBodyAndHeader("direct:preserveQosNonJmsDeliveryMode","Beer is good...",JmsConstants.JMS_DELIVERY_MODE,3);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createPersistentConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").to("activemq:queue:bar?preserveMessageQos=true");
        from("activemq:queue:bar").to("mock:bar");
        from("direct:nonJmsDeliveryMode").to("activemq:queue:bar?deliveryMode=3");
        from("direct:noExplicitNonJmsDeliveryMode").to("activemq:queue:bar?deliveryMode=3&explicitQosEnabled=false");
        from("direct:preserveQosNonJmsDeliveryMode").to("activemq:queue:bar?preserveMessageQos=true");
      }
    }
;
  }
}
