public class DebugBlueprintTest extends CamelBlueprintTestSupport {
  private boolean debugBeforeMethodCalled;
  private boolean debugAfterMethodCalled;
  @Override protected String getBlueprintDescriptor(){
    return "org/apache/camel/test/blueprint/camelContext.xml";
  }
  @Test public void testRoute() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
    assertTrue(debugBeforeMethodCalled);
    assertTrue(debugAfterMethodCalled);
  }
  @Override public boolean isUseDebugger(){
    return true;
  }
  @Override protected void debugBefore(  Exchange exchange,  org.apache.camel.Processor processor,  ProcessorDefinition<?> definition,  String id,  String label){
    log.info("Before " + definition + " with body "+ exchange.getIn().getBody());
    debugBeforeMethodCalled=true;
  }
  @Override protected void debugAfter(  Exchange exchange,  org.apache.camel.Processor processor,  ProcessorDefinition<?> definition,  String id,  String label,  long timeTaken){
    log.info("After " + definition + " with body "+ exchange.getIn().getBody());
    debugAfterMethodCalled=true;
  }
}
