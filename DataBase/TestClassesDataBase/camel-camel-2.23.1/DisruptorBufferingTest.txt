/** 
 * This test suite is testing different scenarios where a disruptor is forced to buffer exchanges locally until a consumer is registered.
 */
public class DisruptorBufferingTest extends CamelTestSupport {
  @Test public void testDisruptorBufferingWhileWaitingOnFirstConsumer() throws Exception {
    template.sendBody("disruptor:foo","A");
    template.sendBody("disruptor:foo","B");
    template.sendBody("disruptor:foo","C");
    final DisruptorEndpoint disruptorEndpoint=getMandatoryEndpoint("disruptor:foo",DisruptorEndpoint.class);
    assertEquals(5,disruptorEndpoint.getDisruptor().getRemainingCapacity());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:foo").routeId("bar").to("mock:bar");
      }
    }
);
    final MockEndpoint mockEndpoint=getMockEndpoint("mock:bar");
    mockEndpoint.expectedMessageCount(3);
    mockEndpoint.assertIsSatisfied(200);
  }
  @Test public void testDisruptorBufferingWhileWaitingOnNextConsumer() throws Exception {
    template.sendBody("disruptor:foo","A");
    template.sendBody("disruptor:foo","B");
    template.sendBody("disruptor:foo","C");
    final DisruptorEndpoint disruptorEndpoint=getMandatoryEndpoint("disruptor:foo",DisruptorEndpoint.class);
    assertEquals(5,disruptorEndpoint.getDisruptor().getRemainingCapacity());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:foo").routeId("bar1").delay(200).to("mock:bar");
      }
    }
);
    MockEndpoint mockEndpoint=getMockEndpoint("mock:bar");
    mockEndpoint.expectedMinimumMessageCount(1);
    mockEndpoint.assertIsSatisfied(200);
    context.stopRoute("bar1");
    mockEndpoint.expectedMessageCount(3);
    mockEndpoint.assertIsSatisfied();
    resetMocks();
    template.sendBody("disruptor:foo","D");
    template.sendBody("disruptor:foo","E");
    template.sendBody("disruptor:foo","F");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:foo").routeId("bar2").to("mock:bar");
      }
    }
);
    template.sendBody("disruptor:foo","G");
    mockEndpoint=getMockEndpoint("mock:bar");
    mockEndpoint.expectedMessageCount(4);
    mockEndpoint.assertIsSatisfied(100);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("foo").to("disruptor:foo?size=8");
      }
    }
;
  }
}
