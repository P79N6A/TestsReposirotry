public class HazelcastInstanceConsumerTest extends HazelcastCamelTestSupport {
  @Mock private IList<String> list;
  @Mock private Cluster cluster;
  @Mock private Member member;
  private ArgumentCaptor<MembershipListener> argument;
  @Override protected void trainHazelcastInstance(  HazelcastInstance hazelcastInstance){
    when(hazelcastInstance.getCluster()).thenReturn(cluster);
    argument=ArgumentCaptor.forClass(MembershipListener.class);
    when(cluster.addMembershipListener(any())).thenReturn("foo");
  }
  @Override protected void verifyHazelcastInstance(  HazelcastInstance hazelcastInstance){
    verify(hazelcastInstance).getCluster();
    verify(cluster).addMembershipListener(any(MembershipListener.class));
  }
  @Test public void testAddInstance() throws InterruptedException {
    MockEndpoint added=getMockEndpoint("mock:added");
    added.setExpectedMessageCount(1);
    when(member.getSocketAddress()).thenReturn(new InetSocketAddress("foo.bar",12345));
    verify(cluster).addMembershipListener(argument.capture());
    MembershipEvent event=new MembershipEvent(cluster,member,MembershipEvent.MEMBER_ADDED,null);
    argument.getValue().memberAdded(event);
    assertMockEndpointsSatisfied(5000,TimeUnit.MILLISECONDS);
    Exchange ex=added.getExchanges().get(0);
    Map<String,Object> headers=ex.getIn().getHeaders();
    this.checkHeaders(headers,HazelcastConstants.ADDED);
  }
  @Test public void testRemoveInstance() throws InterruptedException {
    MockEndpoint removed=getMockEndpoint("mock:removed");
    removed.setExpectedMessageCount(1);
    when(member.getSocketAddress()).thenReturn(new InetSocketAddress("foo.bar",12345));
    verify(cluster).addMembershipListener(argument.capture());
    MembershipEvent event=new MembershipEvent(cluster,member,MembershipEvent.MEMBER_REMOVED,null);
    argument.getValue().memberRemoved(event);
    assertMockEndpointsSatisfied(5000,TimeUnit.MILLISECONDS);
    Exchange ex=removed.getExchanges().get(0);
    Map<String,Object> headers=ex.getIn().getHeaders();
    this.checkHeaders(headers,HazelcastConstants.REMOVED);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(String.format("hazelcast-%sfoo",HazelcastConstants.INSTANCE_PREFIX)).log("instance...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.ADDED)).log("...added").to("mock:added").otherwise().log("...removed").to("mock:removed");
      }
    }
;
  }
  private void checkHeaders(  Map<String,Object> headers,  String action){
    assertEquals(action,headers.get(HazelcastConstants.LISTENER_ACTION));
    assertEquals(HazelcastConstants.INSTANCE_LISTENER,headers.get(HazelcastConstants.LISTENER_TYPE));
    assertNotNull(headers.get(HazelcastConstants.LISTENER_TIME));
    assertNotNull(headers.get(HazelcastConstants.INSTANCE_HOST));
    assertNotNull(headers.get(HazelcastConstants.INSTANCE_PORT));
  }
}
