public class NettyUdpConnectionlessSendTest extends BaseNettyTest {
  private static final String SEND_STRING="***<We all love camel>***";
  private static final int SEND_COUNT=20;
  private volatile int receivedCount;
  private EventLoopGroup group;
  private Bootstrap bootstrap;
  public void createNettyUdpReceiver(){
    group=new NioEventLoopGroup();
    bootstrap=new Bootstrap();
    bootstrap.group(group).channel(NioDatagramChannel.class).handler(new ChannelInitializer<Channel>(){
      @Override protected void initChannel(      Channel channel) throws Exception {
        channel.pipeline().addLast(new UdpHandler());
        channel.pipeline().addLast(new ContentHandler());
      }
    }
).localAddress(new InetSocketAddress(getPort()));
  }
  public void bind(){
    bootstrap.bind().syncUninterruptibly();
  }
  public void stop(){
    group.shutdownGracefully().syncUninterruptibly();
  }
  @Test public void sendConnectionlessUdp() throws Exception {
    createNettyUdpReceiver();
    bind();
    for (int i=0; i < SEND_COUNT; ++i) {
      template.sendBody("direct:in",SEND_STRING);
    }
    stop();
    assertTrue("We should have received some datagrams",receivedCount > 0);
  }
  @Test public void sendWithoutReceiver() throws Exception {
    int exceptionCount=0;
    for (int i=0; i < SEND_COUNT; ++i) {
      try {
        template.sendBody("direct:in",SEND_STRING);
      }
 catch (      Exception ex) {
        ++exceptionCount;
      }
    }
    assertEquals("No exception should occur",0,exceptionCount);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").to("netty4:udp://localhost:{{port}}?sync=false&textline=true&udpConnectionlessSending=true");
      }
    }
;
  }
public class UdpHandler extends MessageToMessageDecoder<DatagramPacket> {
    @Override protected void decode(    ChannelHandlerContext channelHandlerContext,    DatagramPacket datagramPacket,    List<Object> objects) throws Exception {
      objects.add(datagramPacket.content().toString(CharsetUtil.UTF_8));
    }
  }
public class ContentHandler extends SimpleChannelInboundHandler<String> {
    @Override protected void channelRead0(    ChannelHandlerContext channelHandlerContext,    String s) throws Exception {
      ++receivedCount;
    }
  }
}
