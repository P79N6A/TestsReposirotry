/** 
 * @version 
 */
public class BeanRecipientListTimeoutTest extends ContextTestSupport {
  private volatile Exchange receivedExchange;
  private volatile int receivedIndex;
  private volatile int receivedTotal;
  private volatile long receivedTimeout;
  @Test public void testBeanRecipientListParallelTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).body().not(body().contains("A"));
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
    assertNotNull(receivedExchange);
    assertEquals(0,receivedIndex);
    assertEquals(3,receivedTotal);
    assertEquals(1000,receivedTimeout);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",new MyBean());
    answer.bind("myStrategy",new MyAggregationStrategy());
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").bean("myBean","route").to("mock:result");
        from("direct:a").delay(2000).setBody(constant("A"));
        from("direct:b").setBody(constant("B"));
        from("direct:c").delay(500).setBody(constant("C"));
      }
    }
;
  }
public static class MyBean {
    @RecipientList(strategyRef="myStrategy",parallelProcessing=true,timeout=1000) public String[] route(    String body){
      return new String[]{"direct:a","direct:b","direct:c"};
    }
  }
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
    public void timeout(    Exchange oldExchange,    int index,    int total,    long timeout){
      receivedExchange=oldExchange;
      receivedIndex=index;
      receivedTotal=total;
      receivedTimeout=timeout;
    }
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));
      return oldExchange;
    }
  }
}
