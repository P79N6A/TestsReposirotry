/** 
 * @version 
 */
public class LoadRouteFromXmlWithOnExceptionTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myProcessor",new MyProcessor());
    return jndi;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testLoadRouteFromXmlWitOnException() throws Exception {
    InputStream is=getClass().getResourceAsStream("barOnExceptionRoute.xml");
    RoutesDefinition routes=context.loadRoutesDefinition(is);
    context.addRouteDefinitions(routes.getRoutes());
    context.start();
    assertNotNull("Loaded bar route should be there",context.getRoute("bar"));
    assertEquals(1,context.getRoutes().size());
    getMockEndpoint("mock:bar").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:error").expectedBodiesReceived("Kabom");
    template.sendBody("direct:bar","Bye World");
    template.sendBody("direct:bar","Kabom");
    assertMockEndpointsSatisfied();
  }
private static final class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Kabom".equals(body)) {
        throw new IllegalArgumentException("Damn");
      }
    }
  }
}
