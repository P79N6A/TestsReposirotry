/** 
 * Unit test for the file sort by expression
 */
public class FileSortByIgnoreCaseExpressionTest extends ContextTestSupport {
  private String fileUrl="file://target/filesorter/";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filesorter");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  private void prepareFolder(  String folder){
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello Paris",Exchange.FILE_NAME,"report-3.dat");
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello London",Exchange.FILE_NAME,"REPORT-2.txt");
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello Copenhagen",Exchange.FILE_NAME,"Report-1.xml");
  }
  @Test public void testSortFilesByNameWithCase() throws Exception {
    prepareFolder("a");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(fileUrl + "a/?sortBy=file:name&initialDelay=250&delay=1000").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello London","Hello Copenhagen","Hello Paris");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSortFilesByNameNoCase() throws Exception {
    prepareFolder("b");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(fileUrl + "b/?initialDelay=0&delay=10&sortBy=ignoreCase:file:name").convertBodyTo(String.class).to("mock:nocase");
      }
    }
);
    context.start();
    MockEndpoint nocase=getMockEndpoint("mock:nocase");
    nocase.expectedBodiesReceived("Hello Copenhagen","Hello London","Hello Paris");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSortFilesByNameNoCaseReverse() throws Exception {
    prepareFolder("c");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(fileUrl + "c/?initialDelay=0&delay=10&sortBy=reverse:ignoreCase:file:name").convertBodyTo(String.class).to("mock:nocasereverse");
      }
    }
);
    context.start();
    MockEndpoint nocasereverse=getMockEndpoint("mock:nocasereverse");
    nocasereverse.expectedBodiesReceived("Hello Paris","Hello London","Hello Copenhagen");
    assertMockEndpointsSatisfied();
  }
}
