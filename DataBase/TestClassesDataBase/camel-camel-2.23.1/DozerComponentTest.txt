public class DozerComponentTest {
  private static final String NAME="examplename";
  private static final String MARSHAL_ID="marshal123";
  private static final String UNMARSHAL_ID="unmarshal456";
  private static final String SOURCE_MODEL="org.example.A";
  private static final String TARGET_MODEL="org.example.B";
  private static final String DOZER_CONFIG_PATH="test/dozerBeanMapping.xml";
  private static final String TRANSFORM_EP_1="dozer:" + NAME + "?marshalId="+ MARSHAL_ID+ "&unmarshalId="+ UNMARSHAL_ID+ "&sourceModel="+ SOURCE_MODEL+ "&targetModel="+ TARGET_MODEL+ "&mappingFile="+ DOZER_CONFIG_PATH;
  @Test public void testCreateEndpoint() throws Exception {
    DozerComponent comp=new DozerComponent();
    comp.setCamelContext(new DefaultCamelContext());
    DozerEndpoint ep=(DozerEndpoint)comp.createEndpoint(TRANSFORM_EP_1);
    DozerConfiguration config=ep.getConfiguration();
    Assert.assertEquals(NAME,config.getName());
    Assert.assertEquals(MARSHAL_ID,config.getMarshalId());
    Assert.assertEquals(UNMARSHAL_ID,config.getUnmarshalId());
    Assert.assertEquals(SOURCE_MODEL,config.getSourceModel());
    Assert.assertEquals(TARGET_MODEL,config.getTargetModel());
    Assert.assertEquals(DOZER_CONFIG_PATH,config.getMappingFile());
  }
  @Test public void requiredTargetModelMissing() throws Exception {
    DozerComponent comp=new DozerComponent();
    comp.setCamelContext(new DefaultCamelContext());
    try {
      comp.createEndpoint("dozer:noTargetModel?mappingFile=mapping.xml");
      Assert.fail("targetModel is a required parameter");
    }
 catch (    IllegalArgumentException ex) {
    }
  }
}
