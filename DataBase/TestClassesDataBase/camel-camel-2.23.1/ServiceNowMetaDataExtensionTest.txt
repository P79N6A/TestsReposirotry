public class ServiceNowMetaDataExtensionTest extends ServiceNowTestSupport {
  private static final Logger LOGGER=LoggerFactory.getLogger(ServiceNowMetaDataExtensionTest.class);
  public ServiceNowMetaDataExtensionTest(){
    super(false);
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  protected ServiceNowComponent getComponent(){
    return context().getComponent("servicenow",ServiceNowComponent.class);
  }
  protected MetaDataExtension getExtension(){
    return getComponent().getExtension(MetaDataExtension.class).orElseThrow(UnsupportedOperationException::new);
  }
  @Test public void testTableMetaData() throws Exception {
    Map<String,Object> parameters=getParameters();
    parameters.put("objectType","table");
    parameters.put("objectName","incident");
    parameters.put("metaType","definition");
    MetaDataExtension.MetaData result=getExtension().meta(parameters).orElseThrow(RuntimeException::new);
    Assert.assertEquals("application/schema+json",result.getAttribute(MetaDataExtension.MetaData.CONTENT_TYPE));
    Assert.assertNotNull(result.getAttribute("date.format"));
    Assert.assertNotNull(result.getAttribute("time.format"));
    Assert.assertNotNull(result.getAttribute("date-time.format"));
    Assert.assertEquals(JsonNode.class,result.getAttribute(MetaDataExtension.MetaData.JAVA_TYPE));
    Assert.assertNotNull(result.getPayload(JsonNode.class));
    Assert.assertNotNull(result.getPayload(JsonNode.class).get("properties"));
    Assert.assertNotNull(result.getPayload(JsonNode.class).get("$schema"));
    Assert.assertEquals("http://json-schema.org/schema#",result.getPayload(JsonNode.class).get("$schema").asText());
    Assert.assertNotNull(result.getPayload(JsonNode.class).get("id"));
    Assert.assertNotNull(result.getPayload(JsonNode.class).get("type"));
    LOGGER.debug(new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(result.getPayload()));
  }
  @Test public void testImportMetaData() throws Exception {
    Map<String,Object> parameters=getParameters();
    parameters.put("objectType","import");
    parameters.put("metaType","list");
    MetaDataExtension.MetaData result=getExtension().meta(parameters).orElseThrow(RuntimeException::new);
    Assert.assertEquals("application/json",result.getAttribute(MetaDataExtension.MetaData.CONTENT_TYPE));
    Assert.assertEquals(JsonNode.class,result.getAttribute(MetaDataExtension.MetaData.JAVA_TYPE));
    LOGGER.debug(new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(result.getPayload()));
  }
  @Test(expected=UnsupportedOperationException.class) public void testInvalidObjectType() throws Exception {
    Map<String,Object> parameters=getParameters();
    parameters.put("objectType","test");
    parameters.put("objectName","incident");
    getExtension().meta(parameters);
  }
}
