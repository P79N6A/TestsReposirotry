/** 
 * @version 
 */
public class FileDataSetProducerWithSplitTest extends ContextTestSupport {
  @Rule public TemporaryFolder tempFolder=new TemporaryFolder();
  protected FileDataSet dataSet;
  final String testDataFileName="src/test/data/file-dataset-test.txt";
  final int testDataFileRecordCount=10;
  final String sourceUri="direct://source";
  final String dataSetName="foo";
  final String dataSetUri="dataset://" + dataSetName;
  @Test public void testDefaultListDataSet() throws Exception {
    for (int i=0; i < testDataFileRecordCount; ++i) {
      template.sendBodyAndHeader(sourceUri,"Line " + (1 + i),Exchange.DATASET_INDEX,i);
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testDefaultListDataSetWithSizeGreaterThanListSize() throws Exception {
    int messageCount=20;
    dataSet.setSize(messageCount);
    getMockEndpoint(dataSetUri).expectedMessageCount(messageCount);
    for (int i=0; i < messageCount; ++i) {
      template.sendBodyAndHeader(sourceUri,"Line " + (1 + (i % testDataFileRecordCount)),Exchange.DATASET_INDEX,i);
    }
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    File fileDataset=createFileDatasetWithSystemEndOfLine();
    dataSet=new FileDataSet(fileDataset,LS);
    assertEquals("Unexpected DataSet size",testDataFileRecordCount,dataSet.getSize());
    super.setUp();
  }
  private File createFileDatasetWithSystemEndOfLine() throws IOException {
    tempFolder.create();
    File fileDataset=tempFolder.newFile("file-dataset-test.txt");
    ByteArrayInputStream content=new ByteArrayInputStream(String.format("Line 1%nLine 2%nLine 3%nLine 4%nLine 5%nLine 6%nLine 7%nLine 8%nLine 9%nLine 10%n").getBytes());
    Files.copy(content,fileDataset.toPath(),StandardCopyOption.REPLACE_EXISTING);
    return fileDataset;
  }
  @Override protected Context createJndiContext() throws Exception {
    Context context=super.createJndiContext();
    context.bind(dataSetName,dataSet);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(sourceUri).to(dataSetUri);
      }
    }
;
  }
}
