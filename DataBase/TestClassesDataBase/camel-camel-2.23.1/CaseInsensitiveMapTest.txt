/** 
 * Tests  {@link CaseInsensitiveMap}
 */
public class CaseInsensitiveMapTest {
  @Test public void launchBenchmark() throws Exception {
    Options opt=new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.SampleTime).timeUnit(TimeUnit.MILLISECONDS).warmupTime(TimeValue.seconds(1)).warmupIterations(2).measurementTime(TimeValue.seconds(5)).measurementIterations(5).threads(1).forks(1).shouldFailOnError(true).shouldDoGC(true).measurementBatchSize(1000000).build();
    new Runner(opt).run();
  }
@State(Scope.Thread) public static class MapsBenchmarkState {
    CaseInsensitiveMap camelMap;
    com.cedarsoftware.util.CaseInsensitiveMap cedarsoftMap;
    HashMap hashMap;
    @Setup(Level.Trial) public void initialize(){
      camelMap=new CaseInsensitiveMap();
      cedarsoftMap=new com.cedarsoftware.util.CaseInsensitiveMap();
      hashMap=new HashMap();
    }
  }
@State(Scope.Benchmark) public static class MapsSourceDataBenchmarkState {
    Map<String,Object> map1=generateRandomMap(10);
    Map<String,Object> map2=generateRandomMap(10);
    private Map<String,Object> generateRandomMap(    int size){
      return IntStream.range(0,size).boxed().collect(Collectors.toMap(i -> randomAlphabetic(10),i -> randomAlphabetic(10)));
    }
  }
  @Benchmark public void camelMapSimpleCase(  MapsBenchmarkState state,  Blackhole bh){
    Map map=state.camelMap;
    map.put("foo","Hello World");
    Object o1=map.get("foo");
    bh.consume(o1);
    Object o2=map.get("FOO");
    bh.consume(o2);
    map.put("BAR","Bye World");
    Object o3=map.get("bar");
    bh.consume(o3);
    Object o4=map.get("BAR");
    bh.consume(o4);
  }
  @Benchmark public void cedarsoftMapSimpleCase(  MapsBenchmarkState state,  Blackhole bh){
    Map map=state.cedarsoftMap;
    map.put("foo","Hello World");
    Object o1=map.get("foo");
    bh.consume(o1);
    Object o2=map.get("FOO");
    bh.consume(o2);
    map.put("BAR","Bye World");
    Object o3=map.get("bar");
    bh.consume(o3);
    Object o4=map.get("BAR");
    bh.consume(o4);
  }
  @Benchmark public void hashMapSimpleCase(  MapsBenchmarkState state,  Blackhole bh){
    Map map=state.hashMap;
    map.put("foo","Hello World");
    Object o1=map.get("foo");
    bh.consume(o1);
    Object o2=map.get("FOO");
    bh.consume(o2);
    map.put("BAR","Bye World");
    Object o3=map.get("bar");
    bh.consume(o3);
    Object o4=map.get("BAR");
    bh.consume(o4);
  }
  @Benchmark public void camelMapComplexCase(  MapsBenchmarkState mapsBenchmarkState,  MapsSourceDataBenchmarkState sourceDataState,  Blackhole blackhole){
    Map map=mapsBenchmarkState.camelMap;
    sourceDataState.map2.entrySet().forEach(entry -> blackhole.consume(map.put(entry.getKey(),entry.getValue())));
    sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.get(key)));
    sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.remove(key)));
    map.putAll(sourceDataState.map1);
    blackhole.consume(map);
  }
  @Benchmark public void cedarsoftMapComplexCase(  MapsBenchmarkState mapsBenchmarkState,  MapsSourceDataBenchmarkState sourceDataState,  Blackhole blackhole){
    Map map=mapsBenchmarkState.cedarsoftMap;
    sourceDataState.map2.entrySet().forEach(entry -> blackhole.consume(map.put(entry.getKey(),entry.getValue())));
    sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.get(key)));
    sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.remove(key)));
    map.putAll(sourceDataState.map1);
    blackhole.consume(map);
  }
  @Benchmark public void hashMapComplexCase(  MapsBenchmarkState mapsBenchmarkState,  MapsSourceDataBenchmarkState sourceDataState,  Blackhole blackhole){
    Map map=mapsBenchmarkState.hashMap;
    sourceDataState.map2.entrySet().forEach(entry -> blackhole.consume(map.put(entry.getKey(),entry.getValue())));
    sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.get(key)));
    sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.remove(key)));
    map.putAll(sourceDataState.map1);
    blackhole.consume(map);
  }
}
