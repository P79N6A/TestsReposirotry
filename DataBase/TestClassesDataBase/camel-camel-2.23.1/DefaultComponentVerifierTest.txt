public class DefaultComponentVerifierTest extends ContextTestSupport {
  private ComponentVerifierExtension verifier;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    this.verifier=new TestVerifier();
  }
  @Test public void testParameters() throws Exception {
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("timerName","dummy");
    parameters.put("period","1s");
    Result result=verifier.verify(Scope.PARAMETERS,parameters);
    Assert.assertEquals(Result.Status.OK,result.getStatus());
  }
  @Test public void testParametersWithMissingMandatoryOptions() throws Exception {
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("period","1s");
    Result result=verifier.verify(Scope.PARAMETERS,parameters);
    Assert.assertEquals(Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(VerificationError.StandardCode.MISSING_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("timerName"));
  }
  @Test public void testParametersWithWrongOptions() throws Exception {
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("timerName","dummy");
    parameters.put("period","1s");
    parameters.put("fixedRate","wrong");
    Result result=verifier.verify(Scope.PARAMETERS,parameters);
    Assert.assertEquals(Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(VerificationError.StandardCode.ILLEGAL_PARAMETER_VALUE,result.getErrors().get(0).getCode());
    Assert.assertEquals("fixedRate has wrong value (wrong)",result.getErrors().get(0).getDescription());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("fixedRate"));
  }
private class TestVerifier extends DefaultComponentVerifierExtension {
    public TestVerifier(){
      super("timer",context);
    }
  }
}
