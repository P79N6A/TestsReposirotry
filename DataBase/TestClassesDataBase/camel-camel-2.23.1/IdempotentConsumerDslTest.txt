public class IdempotentConsumerDslTest extends ContextTestSupport {
  @Test public void testDuplicateMessages() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("one","two","three");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","two","messageId","2");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","two","messageId","2");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","three","messageId","3");
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").idempotentConsumer().message(m -> m.getHeader("messageId")).messageIdRepository(MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result");
      }
    }
;
  }
}
