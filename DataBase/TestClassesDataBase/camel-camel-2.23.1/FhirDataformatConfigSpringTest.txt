public class FhirDataformatConfigSpringTest extends CamelSpringTestSupport {
  @Override @Before public void setUp() throws Exception {
    super.setUp();
  }
  @Test public void defaultFhirJsonConfigTest(){
    FhirDataFormat fhirJson=getDataformat("fhirJson");
    assertConfig(fhirJson);
  }
  @Test public void defaultFhirXmlConfigTest(){
    FhirDataFormat fhirXml=getDataformat("fhirXml");
    assertConfig(fhirXml);
  }
  private void assertConfig(  FhirDataFormat fhirJson){
    assertEquals(FhirVersionEnum.DSTU3,fhirJson.getFhirContext().getVersion().getVersion());
    Set<String> dontEncodeElements=fhirJson.getDontEncodeElements();
    assertCollection(dontEncodeElements);
    List<String> dontStripVersionsFromReferencesAtPaths=fhirJson.getDontStripVersionsFromReferencesAtPaths();
    assertCollection(dontStripVersionsFromReferencesAtPaths);
    Set<String> encodeElements=fhirJson.getEncodeElements();
    assertCollection(encodeElements);
    Set<String> encodeElementsAppliesToResourceTypes=fhirJson.getEncodeElementsAppliesToResourceTypes();
    assertCollection(encodeElementsAppliesToResourceTypes);
    assertTrue(fhirJson.getForceResourceId().getClass().isAssignableFrom(IdType.class));
    assertTrue(fhirJson.getParserErrorHandler().getClass().isAssignableFrom(LenientErrorHandler.class));
    assertTrue(fhirJson.getParserOptions().getClass().isAssignableFrom(ParserOptions.class));
    assertNotNull(fhirJson.getPreferTypes());
    assertEquals("serverBaseUrl",fhirJson.getServerBaseUrl());
    assertTrue(fhirJson.getOverrideResourceIdWithBundleEntryFullUrl());
    assertTrue(fhirJson.getStripVersionsFromReferences());
    assertTrue(fhirJson.isPrettyPrint());
    assertTrue(fhirJson.isEncodeElementsAppliesToChildResourcesOnly());
    assertTrue(fhirJson.isOmitResourceId());
    assertTrue(fhirJson.isSummaryMode());
    assertTrue(fhirJson.isSuppressNarratives());
  }
  private void assertCollection(  Collection<String> encodeElements){
    assertEquals(2,encodeElements.size());
    assertTrue(encodeElements.contains("foo"));
    assertTrue(encodeElements.contains("bar"));
  }
  private FhirDataFormat getDataformat(  String name){
    CamelContext camelContext=context();
    return (FhirDataFormat)((FhirDataformat)camelContext.getRegistry().lookupByName(name)).getDataFormat();
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/fhir/FhirDataFormatConfigSpringTest.xml");
  }
}
