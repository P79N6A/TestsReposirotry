/** 
 * Some unit tests for XML Encryption 1.1 functionality
 */
public class XMLEncryption11Test extends CamelTestSupport {
  TestHelper xmlsecTestHelper=new TestHelper();
  public XMLEncryption11Test() throws Exception {
    if (Security.getProvider("BC") == null) {
      Constructor<?> cons=null;
      Class<?> c=Class.forName("org.bouncycastle.jce.provider.BouncyCastleProvider");
      cons=c.getConstructor(new Class[]{});
      Provider provider=(java.security.Provider)cons.newInstance();
      Security.insertProviderAt(provider,2);
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context.getProperties().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.ENCODING,"UTF-8");
  }
  @Test public void testFullPayloadAsymmetricKeyEncryptionGCM() throws Exception {
    KeyStoreParameters tsParameters=new KeyStoreParameters();
    tsParameters.setPassword("password");
    tsParameters.setResource("sender.ts");
    final XMLSecurityDataFormat xmlEncDataFormat=new XMLSecurityDataFormat();
    xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP);
    xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters);
    xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128_GCM);
    xmlEncDataFormat.setRecipientKeyAlias("recipient");
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted");
      }
    }
);
    xmlsecTestHelper.testEncryption(context);
  }
  @Test public void testFullPayloadAsymmetricKeyEncryptionSHA256() throws Exception {
    KeyStoreParameters tsParameters=new KeyStoreParameters();
    tsParameters.setPassword("password");
    tsParameters.setResource("sender.ts");
    final XMLSecurityDataFormat xmlEncDataFormat=new XMLSecurityDataFormat();
    xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP);
    xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters);
    xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128);
    xmlEncDataFormat.setRecipientKeyAlias("recipient");
    xmlEncDataFormat.setDigestAlgorithm(XMLCipher.SHA256);
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted");
      }
    }
);
    xmlsecTestHelper.testEncryption(context);
  }
  @Test public void testFullPayloadAsymmetricKeyEncryptionMGF256() throws Exception {
    KeyStoreParameters tsParameters=new KeyStoreParameters();
    tsParameters.setPassword("password");
    tsParameters.setResource("sender.ts");
    final XMLSecurityDataFormat xmlEncDataFormat=new XMLSecurityDataFormat();
    xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP_11);
    xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters);
    xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128);
    xmlEncDataFormat.setMgfAlgorithm(EncryptionConstants.MGF1_SHA256);
    xmlEncDataFormat.setRecipientKeyAlias("recipient");
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted");
      }
    }
);
    xmlsecTestHelper.testEncryption(context);
  }
  @Test public void testFullPayloadAsymmetricKeyDecryptionGCM() throws Exception {
    final KeyStoreParameters tsParameters=new KeyStoreParameters();
    tsParameters.setPassword("password");
    tsParameters.setResource("sender.ts");
    final KeyStoreParameters ksParameters=new KeyStoreParameters();
    ksParameters.setPassword("password");
    ksParameters.setResource("recipient.ks");
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().secureXML("",true,"recipient",XMLCipher.AES_128_GCM,XMLCipher.RSA_OAEP,tsParameters).to("mock:encrypted").unmarshal().secureXML("",true,"recipient",XMLCipher.AES_128_GCM,XMLCipher.RSA_OAEP,ksParameters).to("mock:decrypted");
      }
    }
);
    xmlsecTestHelper.testDecryption(context);
  }
  @Test public void testFullPayloadAsymmetricKeyDecryptionSHA256() throws Exception {
    final KeyStoreParameters tsParameters=new KeyStoreParameters();
    tsParameters.setPassword("password");
    tsParameters.setResource("sender.ts");
    final KeyStoreParameters ksParameters=new KeyStoreParameters();
    ksParameters.setPassword("password");
    ksParameters.setResource("recipient.ks");
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().secureXML("",new HashMap<String,String>(),true,"recipient",XMLCipher.AES_128,XMLCipher.RSA_OAEP,tsParameters,null,XMLCipher.SHA256).to("mock:encrypted").unmarshal().secureXML("",new HashMap<String,String>(),true,"recipient",XMLCipher.AES_128,XMLCipher.RSA_OAEP,ksParameters,null,XMLCipher.SHA256).to("mock:decrypted");
      }
    }
);
    xmlsecTestHelper.testDecryption(context);
  }
  @Test public void testFullPayloadAsymmetricKeyDecryptionMGF256() throws Exception {
    final KeyStoreParameters tsParameters=new KeyStoreParameters();
    tsParameters.setPassword("password");
    tsParameters.setResource("sender.ts");
    final XMLSecurityDataFormat xmlEncDataFormat=new XMLSecurityDataFormat();
    xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP_11);
    xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters);
    xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128);
    xmlEncDataFormat.setMgfAlgorithm(EncryptionConstants.MGF1_SHA256);
    xmlEncDataFormat.setRecipientKeyAlias("recipient");
    final KeyStoreParameters ksParameters=new KeyStoreParameters();
    ksParameters.setPassword("password");
    ksParameters.setResource("recipient.ks");
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").unmarshal().secureXML("",new HashMap<String,String>(),true,"recipient",XMLCipher.AES_128,XMLCipher.RSA_OAEP,ksParameters).to("mock:decrypted");
      }
    }
);
    xmlsecTestHelper.testDecryption(context);
  }
}
