public class NettyCustomCodecRequestTimeoutTest extends BaseNettyTest {
  private String uri="netty:tcp://localhost:{{port}}?sync=true" + "&decoders=#myCustomDecoder,#myCustomDecoder2&encoder=#myCustomEncoder&requestTimeout=1000";
  private byte[] data=new byte[]{65,66,67,68,69,70,71,72,73,0,0};
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myCustomDecoder",MyCustomCodec.createMyCustomDecoder());
    jndi.bind("myCustomDecoder2",MyCustomCodec.createMyCustomDecoder2());
    jndi.bind("myCustomEncoder",MyCustomCodec.createMyCustomEncoder());
    return jndi;
  }
  @Test public void testRequestTimeout() throws Exception {
    try {
      template.requestBody("direct:start",data,String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ReadTimeoutException cause=assertIsInstanceOf(ReadTimeoutException.class,e.getCause());
      assertNotNull(cause);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to(uri).to("log:result");
        from(uri).to("log:before").delayer(2000).to("log:after");
      }
    }
;
  }
}
