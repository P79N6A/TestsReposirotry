public class SpringLogEipMaskTest {
  @Test public void testLogEipMask() throws Exception {
    final AbstractXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/logEipMaskTest.xml");
    SpringCamelContext context=SpringCamelContext.springCamelContext(applicationContext);
    MockEndpoint mock=context.getEndpoint("mock:foo",MockEndpoint.class);
    mock.expectedMessageCount(1);
    context.start();
    context.createProducerTemplate().sendBody("direct:foo","mask password=\"my passw0rd!\"");
    context.createProducerTemplate().sendBody("direct:noMask","no-mask password=\"my passw0rd!\"");
    mock.assertIsSatisfied();
    context.stop();
  }
  @Test public void testCustomFormatter() throws Exception {
    final AbstractXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/logEipCustomFormatterTest.xml");
    SpringCamelContext context=SpringCamelContext.springCamelContext(applicationContext);
    context.start();
    MockMaskingFormatter customFormatter=applicationContext.getBean(Constants.CUSTOM_LOG_MASK_REF,MockMaskingFormatter.class);
    context.createProducerTemplate().sendBody("direct:foo","mock password=\"my passw0rd!\"");
    Assert.assertEquals("Got mock password=\"my passw0rd!\"",customFormatter.received);
    context.stop();
  }
public static class MockMaskingFormatter implements MaskingFormatter {
    private String received;
    @Override public String format(    String source){
      received=source;
      return source;
    }
  }
}
