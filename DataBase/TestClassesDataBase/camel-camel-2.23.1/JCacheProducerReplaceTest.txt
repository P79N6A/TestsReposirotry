public class JCacheProducerReplaceTest extends JCacheComponentTestSupport {
  @Test public void testReplace() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
    final String key=randomString();
    final String val=randomString();
    final String val1=randomString();
    cache.put(key,val);
    headers.clear();
    headers.put(JCacheConstants.ACTION,"REPLACE");
    headers.put(JCacheConstants.KEY,key);
    sendBody("direct:replace",val1,headers);
    MockEndpoint mock=getMockEndpoint("mock:replace");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(JCacheConstants.KEY,key);
    mock.expectedHeaderReceived(JCacheConstants.RESULT,true);
    mock.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        assertNotNull("body",exchange.getIn().getBody());
        return exchange.getIn().getBody().equals(val1);
      }
    }
);
    mock.assertIsSatisfied();
    assertEquals(val1,cache.get(key));
  }
  @Test public void testReplaceIf() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
    final String key=randomString();
    final String val=randomString();
    final String val1=randomString();
    cache.put(key,val);
    headers.clear();
    headers.put(JCacheConstants.ACTION,"REPLACE");
    headers.put(JCacheConstants.KEY,key);
    headers.put(JCacheConstants.OLD_VALUE,val);
    sendBody("direct:replace",val1,headers);
    MockEndpoint mock=getMockEndpoint("mock:replace");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(JCacheConstants.KEY,key);
    mock.expectedHeaderReceived(JCacheConstants.RESULT,true);
    mock.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        assertNotNull("body",exchange.getIn().getBody());
        return exchange.getIn().getBody().equals(val1);
      }
    }
);
    mock.assertIsSatisfied();
    assertEquals(val1,cache.get(key));
  }
  @Test public void testReplaceIfFailure() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
    final String key=randomString();
    final String val=randomString();
    final String val1=randomString();
    cache.put(key,val);
    headers.clear();
    headers.put(JCacheConstants.ACTION,"REPLACE");
    headers.put(JCacheConstants.KEY,key);
    headers.put(JCacheConstants.OLD_VALUE,val1);
    sendBody("direct:replace",val1,headers);
    MockEndpoint mock=getMockEndpoint("mock:replace");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(JCacheConstants.KEY,key);
    mock.expectedHeaderReceived(JCacheConstants.RESULT,false);
    mock.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        assertNotNull("body",exchange.getIn().getBody());
        return exchange.getIn().getBody().equals(val1);
      }
    }
);
    mock.assertIsSatisfied();
    assertEquals(val,cache.get(key));
  }
  @Test public void testReplaceFail() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
    final String key=randomString();
    final String val=randomString();
    assertFalse(cache.containsKey(key));
    headers.clear();
    headers.put(JCacheConstants.ACTION,"REPLACE");
    headers.put(JCacheConstants.KEY,key);
    sendBody("direct:replace-fail",val,headers);
    MockEndpoint mock=getMockEndpoint("mock:replace-fail");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(JCacheConstants.KEY,key);
    mock.expectedHeaderReceived(JCacheConstants.RESULT,false);
    mock.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        assertNotNull("body",exchange.getIn().getBody());
        return exchange.getIn().getBody().equals(val);
      }
    }
);
    mock.assertIsSatisfied();
    assertFalse(cache.containsKey(key));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:replace").to("jcache://test-cache").to("mock:replace");
        from("direct:replace-fail").to("jcache://test-cache").to("mock:replace-fail");
      }
    }
;
  }
}
