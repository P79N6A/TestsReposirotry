public class MongoDbBulkWriteOperationTest extends AbstractMongoDbTest {
  @Test public void testBulkWrite() throws Exception {
    assertEquals(0,testCollection.count());
    pumpDataIntoTestCollection();
    List<WriteModel<DBObject>> bulkOperations=Arrays.asList(new InsertOneModel<>(new BasicDBObject("scientist","Pierre Curie")),new UpdateOneModel<>(new BasicDBObject("_id","2"),new BasicDBObject("$set",new BasicDBObject("scientist","Charles Darwin"))),new UpdateManyModel<>(new BasicDBObject("scientist","Curie"),new BasicDBObject("$set",new BasicDBObject("scientist","Marie Curie"))),new ReplaceOneModel<>(new BasicDBObject("_id","1"),new BasicDBObject("scientist","Albert Einstein")),new DeleteOneModel<>(new BasicDBObject("_id","3")),new DeleteManyModel<>(new BasicDBObject("scientist","Bohr")));
    BulkWriteResult result=template.requestBody("direct:bulkWrite",bulkOperations,BulkWriteResult.class);
    assertNotNull(result);
    assertEquals("Records inserted should be 2 : ",1,result.getInsertedCount());
    assertEquals("Records matched should be 102 : ",102,result.getMatchedCount());
    assertEquals("Records modified should be 102 : ",102,result.getModifiedCount());
    assertEquals("Records deleted should be 101 : ",101,result.getDeletedCount());
  }
  @Test public void testOrderedBulkWriteWithError() throws Exception {
    assertEquals(0,testCollection.count());
    pumpDataIntoTestCollection();
    List<WriteModel<DBObject>> bulkOperations=Arrays.asList(new InsertOneModel<>(new BasicDBObject("scientist","Pierre Curie")),new InsertOneModel<>(new BasicDBObject("_id","1")),new InsertOneModel<>(new BasicDBObject("scientist","Descartes")),new UpdateOneModel<>(new BasicDBObject("_id","5"),new BasicDBObject("$set",new BasicDBObject("scientist","Marie Curie"))),new DeleteOneModel<>(new BasicDBObject("_id","2")));
    try {
      template.requestBody("direct:bulkWrite",bulkOperations,BulkWriteResult.class);
      fail("Bulk operation should throw Exception");
    }
 catch (    CamelExecutionException e) {
      extractAndAssertCamelMongoDbException(e,"duplicate key error");
      assertEquals(1001,testCollection.count());
    }
  }
  @Test public void testUnorderedBulkWriteWithError() throws Exception {
    assertEquals(0,testCollection.count());
    pumpDataIntoTestCollection();
    List<WriteModel<DBObject>> bulkOperations=Arrays.asList(new InsertOneModel<>(new BasicDBObject("scientist","Pierre Curie")),new InsertOneModel<>(new BasicDBObject("_id","1")),new InsertOneModel<>(new BasicDBObject("scientist","Descartes")),new UpdateOneModel<>(new BasicDBObject("_id","5"),new BasicDBObject("$set",new BasicDBObject("scientist","Marie Curie"))),new DeleteOneModel<>(new BasicDBObject("_id","2")));
    try {
      template.requestBody("direct:unorderedBulkWrite",bulkOperations,BulkWriteResult.class);
      fail("Bulk operation should throw Exception");
    }
 catch (    CamelExecutionException e) {
      extractAndAssertCamelMongoDbException(e,"duplicate key error");
      assertEquals(1001,testCollection.count());
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:bulkWrite").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=bulkWrite");
        from("direct:unorderedBulkWrite").setHeader(MongoDbConstants.BULK_ORDERED).constant(false).to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=bulkWrite");
      }
    }
;
  }
}
