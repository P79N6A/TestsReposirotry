/** 
 * Spring based integration test for the <code>CsvDataFormat</code>
 */
public class CsvUnmarshalStreamTest extends CamelTestSupport {
  public static final int EXPECTED_COUNT=3;
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @SuppressWarnings("unchecked") @Test public void testCsvUnMarshal() throws Exception {
    result.reset();
    result.expectedMessageCount(EXPECTED_COUNT);
    String message="";
    for (int i=0; i < EXPECTED_COUNT; ++i) {
      message+=i + "|\"" + i+ LS+ i+ "\"\n";
    }
    template.sendBody("direct:start",message);
    assertMockEndpointsSatisfied();
    for (int i=0; i < EXPECTED_COUNT; ++i) {
      List<String> body=result.getReceivedExchanges().get(i).getIn().getBody(List.class);
      assertEquals(2,body.size());
      assertEquals(String.valueOf(i),body.get(0));
      assertEquals(String.format("%d%s%d",i,LS,i),body.get(1));
    }
  }
  @SuppressWarnings("unchecked") @Test public void testCsvUnMarshalWithFile() throws Exception {
    result.reset();
    result.expectedMessageCount(EXPECTED_COUNT);
    template.sendBody("direct:start",new MyFileInputStream(new File("src/test/resources/data.csv")));
    assertMockEndpointsSatisfied();
    for (int i=0; i < EXPECTED_COUNT; ++i) {
      List<String> body=result.getReceivedExchanges().get(i).getIn().getBody(List.class);
      assertEquals(2,body.size());
      assertEquals(String.valueOf(i),body.get(0));
      assertEquals(String.format("%d%s%d",i,LS,i),body.get(1));
    }
  }
class MyFileInputStream extends FileInputStream {
    MyFileInputStream(    File file) throws FileNotFoundException {
      super(file);
    }
    public void close() throws IOException {
      super.close();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        CsvDataFormat csv=new CsvDataFormat().setLazyLoad(true).setDelimiter('|');
        from("direct:start").unmarshal(csv).split(body()).to("mock:result");
      }
    }
;
  }
}
