/** 
 */
public class DynamicRoutersWithJMSMessageLostHeadersIssueTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/inbox");
    deleteDirectory("target/outbox");
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue1").setHeader("HEADER1",constant("header1")).dynamicRouter(method(DynamicRouter.class,"dynamicRoute")).to("mock:checkHeader");
        from("direct:foo").setHeader("HEADER1",constant("header1")).dynamicRouter(method(DynamicRouter.class,"dynamicRoute")).to("mock:checkHeader");
      }
    }
;
  }
  @Test public void testHeaderShouldExisted() throws InterruptedException {
    getMockEndpoint("mock:checkHeader").expectedMessageCount(1);
    getMockEndpoint("mock:checkHeader").expectedHeaderReceived("HEADER1","header1");
    template.sendBody("direct:foo","A");
    assertMockEndpointsSatisfied();
    resetMocks();
    getMockEndpoint("mock:checkHeader").expectedMessageCount(1);
    getMockEndpoint("mock:checkHeader").expectedHeaderReceived("HEADER1","header1");
    template.sendBody("activemq:queue1","A");
    assertMockEndpointsSatisfied();
  }
public static class DynamicRouter {
    public String dynamicRoute(    Exchange exchange,    @Header(Exchange.SLIP_ENDPOINT) String previous){
      if (previous == null) {
        return "file://target/outbox";
      }
 else {
        return null;
      }
    }
  }
}
