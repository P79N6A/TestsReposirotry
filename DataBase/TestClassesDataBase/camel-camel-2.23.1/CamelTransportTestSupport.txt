public abstract class CamelTransportTestSupport extends CamelTestSupport {
  protected Bus bus;
  protected EndpointInfo endpointInfo;
  protected EndpointReferenceType target;
  protected MessageObserver observer;
  protected Message inMessage;
  @Before public void setUp() throws Exception {
    super.setUp();
    BusFactory bf=BusFactory.newInstance();
    bus=bf.createBus();
    DestinationFactoryManager dfm=bus.getExtension(DestinationFactoryManager.class);
    CamelTransportFactory camelTransportFactory=new CamelTransportFactory();
    camelTransportFactory.setCamelContext(context);
    ConduitInitiatorManager cim=bus.getExtension(ConduitInitiatorManager.class);
    dfm.registerDestinationFactory(CamelTransportFactory.TRANSPORT_ID,camelTransportFactory);
    cim.registerConduitInitiator(CamelTransportFactory.TRANSPORT_ID,camelTransportFactory);
    BusFactory.setDefaultBus(bus);
    endpointInfo=new EndpointInfo();
  }
  @After public void tearDown() throws Exception {
    bus.shutdown(true);
    super.tearDown();
  }
  protected CamelConduit setupCamelConduit(  EndpointInfo endpointInfo,  boolean send,  boolean decoupled){
    if (decoupled) {
    }
 else {
      target=Mockito.mock(EndpointReferenceType.class);
    }
    CamelConduit camelConduit=new CamelConduit(context,bus,endpointInfo,target);
    if (send) {
      observer=new MessageObserver(){
        public void onMessage(        Message m){
          inMessage=m;
        }
      }
;
      camelConduit.setMessageObserver(observer);
    }
    return camelConduit;
  }
  protected void sendoutMessage(  Conduit conduit,  Message message,  Boolean isOneWay,  String content) throws IOException {
    Exchange cxfExchange=message.getExchange();
    if (cxfExchange == null) {
      cxfExchange=new ExchangeImpl();
      cxfExchange.setOneWay(isOneWay);
      message.setExchange(cxfExchange);
      cxfExchange.setInMessage(message);
    }
    try {
      conduit.prepare(message);
    }
 catch (    IOException ex) {
      assertFalse("CamelConduit can't perpare to send out message",false);
      ex.printStackTrace();
    }
    OutputStream os=message.getContent(OutputStream.class);
    assertTrue("The OutputStream should not be null ",os != null);
    os.write(content.getBytes());
    os.close();
  }
}
