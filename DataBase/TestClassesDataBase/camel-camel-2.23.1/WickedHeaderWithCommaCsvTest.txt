public class WickedHeaderWithCommaCsvTest extends CamelTestSupport {
  @Test public void testHeadersWithComma() throws Exception {
    final MockEndpoint unmarshalMock=getMockEndpoint("mock:receiveUnmarshal");
    unmarshalMock.expectedMessageCount(1);
    String csv=("\"Foo (one, or more, foos)\",\"Bar (one, or more, bars)\"" + "\r\n") + "\"1,000.00\",\"1,500.00\"" + "\r\n"+ "\"2,000.00\",\"2,700.00\""+ "\r\n";
    template.sendBody("direct:startUnmarshal",csv);
    assertMockEndpointsSatisfied();
    final List<WickedHeaderWithCommaCsv> wickedHeaderWithCommaCsvs=unmarshalMock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    final WickedHeaderWithCommaCsv row1000=wickedHeaderWithCommaCsvs.get(0);
    assertEquals("1,000.00",row1000.getFoo());
    assertEquals("1,500.00",row1000.getBar());
    final WickedHeaderWithCommaCsv row2000=wickedHeaderWithCommaCsvs.get(1);
    assertEquals("2,000.00",row2000.getFoo());
    assertEquals("2,700.00",row2000.getBar());
    final MockEndpoint marshalMock=getMockEndpoint("mock:receiveMarshal");
    template.sendBody("direct:startMarshal",wickedHeaderWithCommaCsvs);
    marshalMock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
    final String result=marshalMock.getReceivedExchanges().get(0).getIn().getBody(String.class);
    assertEquals(csv.trim(),result.trim());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:startUnmarshal").unmarshal(new BindyCsvDataFormat(WickedHeaderWithCommaCsv.class)).to("mock:receiveUnmarshal");
        from("direct:startMarshal").marshal(new BindyCsvDataFormat(WickedHeaderWithCommaCsv.class)).to("mock:receiveMarshal");
      }
    }
;
  }
}
