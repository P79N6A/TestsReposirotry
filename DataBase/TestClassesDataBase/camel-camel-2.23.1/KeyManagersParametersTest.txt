public class KeyManagersParametersTest extends AbstractJsseParametersTest {
  protected KeyStoreParameters createMinimalKeyStoreParameters(){
    KeyStoreParameters ksp=new KeyStoreParameters();
    ksp.setResource("org/apache/camel/util/jsse/localhost.ks");
    ksp.setPassword("changeit");
    return ksp;
  }
  protected KeyManagersParameters createMinimalKeyManagersParameters(){
    KeyManagersParameters kmp=new KeyManagersParameters();
    kmp.setKeyStore(this.createMinimalKeyStoreParameters());
    kmp.setKeyPassword("changeit");
    return kmp;
  }
  @Test public void testPropertyPlaceholders() throws Exception {
    CamelContext context=this.createPropertiesPlaceholderAwareContext();
    KeyStoreParameters ksp=new KeyStoreParameters();
    ksp.setCamelContext(context);
    ksp.setType("{{keyStoreParameters.type}}");
    ksp.setProvider("{{keyStoreParameters.provider}}");
    ksp.setResource("{{keyStoreParameters.resource}}");
    ksp.setPassword("{{keyStoreParamerers.password}}");
    KeyManagersParameters kmp=new KeyManagersParameters();
    kmp.setCamelContext(context);
    kmp.setKeyStore(ksp);
    kmp.setKeyPassword("{{keyManagersParameters.keyPassword}}");
    kmp.setAlgorithm("{{keyManagersParameters.algorithm}}");
    kmp.setProvider("{{keyManagersParameters.provider}}");
    KeyManager[] kms=kmp.createKeyManagers();
    validateKeyManagers(kms);
  }
  @Test public void testCreateKeyManagers() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    KeyManager[] kms=kmp.createKeyManagers();
    validateKeyManagers(kms);
  }
  @Test public void testExplicitAlgorithm() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    kmp.setAlgorithm(KeyManagerFactory.getDefaultAlgorithm());
    KeyManager[] kms=kmp.createKeyManagers();
    validateKeyManagers(kms);
  }
  @Test public void testExplicitProvider() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    kmp.setProvider(KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()).getProvider().getName());
    KeyManager[] kms=kmp.createKeyManagers();
    validateKeyManagers(kms);
  }
  @Test public void testInvalidPassword() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    kmp.setKeyPassword("");
    try {
      kmp.createKeyManagers();
      fail();
    }
 catch (    UnrecoverableKeyException e) {
    }
  }
  @Test public void testInvalidExplicitAlgorithm() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    kmp.setAlgorithm("dsfsdfsdfdsfdsF");
    try {
      kmp.createKeyManagers();
      fail();
    }
 catch (    NoSuchAlgorithmException e) {
    }
  }
  @Test public void testInvalidExplicitProvider() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    kmp.setProvider("dsfsdfsdfdsfdsF");
    try {
      kmp.createKeyManagers();
      fail();
    }
 catch (    NoSuchProviderException e) {
    }
  }
  @Test public void testAliasedKeyManager() throws Exception {
    KeyManagersParameters kmp=this.createMinimalKeyManagersParameters();
    KeyManager[] kms=kmp.createKeyManagers();
    assertEquals(1,kms.length);
    assertTrue(kms[0] instanceof X509KeyManager);
    kms[0]=new AliasedX509ExtendedKeyManager("server",(X509KeyManager)kms[0]);
    AliasedX509ExtendedKeyManager km=(AliasedX509ExtendedKeyManager)kms[0];
    assertNotNull(km.getPrivateKey("server"));
  }
  protected void validateKeyManagers(  KeyManager[] kms){
    assertEquals(1,kms.length);
    assertTrue(kms[0] instanceof X509KeyManager);
    X509KeyManager km=(X509KeyManager)kms[0];
    assertNotNull(km.getPrivateKey("server"));
  }
}
