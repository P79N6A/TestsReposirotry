/** 
 * Test class for  {@link com.google.api.services.gmail.Gmail$Users$Threads}APIs.
 */
public class GmailUsersThreadsIntegrationTest extends AbstractGoogleMailTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(GmailUsersThreadsIntegrationTest.class);
  private static final String PATH_PREFIX=GoogleMailApiCollection.getCollection().getApiName(GmailUsersThreadsApiMethod.class).getName();
  private Message createThreadedTestEmail(  String previousThreadId) throws MessagingException, IOException {
    com.google.api.services.gmail.model.Profile profile=requestBody("google-mail://users/getProfile?inBody=userId",CURRENT_USERID);
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    MimeMessage mm=new MimeMessage(session);
    mm.addRecipients(javax.mail.Message.RecipientType.TO,profile.getEmailAddress());
    mm.setSubject("Hello from camel-google-mail");
    mm.setContent("Camel rocks!","text/plain");
    Message createMessageWithEmail=createMessageWithEmail(mm);
    if (previousThreadId != null) {
      createMessageWithEmail.setThreadId(previousThreadId);
    }
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleMail.userId",CURRENT_USERID);
    headers.put("CamelGoogleMail.content",createMessageWithEmail);
    return requestBodyAndHeaders("google-mail://messages/send",null,headers);
  }
  private Message createMessageWithEmail(  MimeMessage email) throws MessagingException, IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    email.writeTo(baos);
    String encodedEmail=Base64.encodeBase64URLSafeString(baos.toByteArray());
    Message message=new Message();
    message.setRaw(encodedEmail);
    return message;
  }
  @Test public void testList() throws Exception {
    Message m1=createThreadedTestEmail(null);
    Message m2=createThreadedTestEmail(m1.getThreadId());
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleMail.q","subject:\"Hello from camel-google-mail\"");
    com.google.api.services.gmail.model.ListThreadsResponse result=requestBodyAndHeaders("direct://LIST",CURRENT_USERID,headers);
    assertNotNull("list result",result);
    assertTrue(result.getThreads().size() > 0);
    LOG.debug("list: " + result);
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.userId",CURRENT_USERID);
    headers.put("CamelGoogleMail.id",m1.getThreadId());
    requestBodyAndHeaders("direct://DELETE",null,headers);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct://DELETE").to("google-mail://" + PATH_PREFIX + "/delete");
        from("direct://GET").to("google-mail://" + PATH_PREFIX + "/get");
        from("direct://LIST").to("google-mail://" + PATH_PREFIX + "/list?inBody=userId");
        from("direct://MODIFY").to("google-mail://" + PATH_PREFIX + "/modify");
        from("direct://TRASH").to("google-mail://" + PATH_PREFIX + "/trash");
        from("direct://UNTRASH").to("google-mail://" + PATH_PREFIX + "/untrash");
      }
    }
;
  }
}
