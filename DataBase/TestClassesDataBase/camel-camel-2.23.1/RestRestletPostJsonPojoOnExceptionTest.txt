/** 
 * @version 
 */
public class RestRestletPostJsonPojoOnExceptionTest extends RestletTestSupport {
  @Test public void testRestletPostPojoError() throws Exception {
    getMockEndpoint("mock:input").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    String body="This is not json";
    try {
      template.sendBody("http://localhost:" + portNum + "/users/new",body);
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      HttpOperationFailedException cause=assertIsInstanceOf(HttpOperationFailedException.class,e.getCause());
      assertEquals(400,cause.getStatusCode());
      assertEquals("Invalid json data",cause.getResponseBody());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.auto);
        onException(JsonParseException.class).handled(true).to("mock:error").setHeader(Exchange.HTTP_RESPONSE_CODE,constant(400)).setBody().constant("Invalid json data");
        rest("/users/").post("new").type(UserPojo.class).to("mock:input");
      }
    }
;
  }
}
