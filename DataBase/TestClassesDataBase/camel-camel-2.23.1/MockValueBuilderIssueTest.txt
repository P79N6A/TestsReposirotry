public class MockValueBuilderIssueTest extends ContextTestSupport {
  @Test public void testMockValueBuilder() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).exchangeProperty("foo").convertTo(String.class).contains("2");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMockValueBuilderFail() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).exchangeProperty("foo").convertTo(String.class).contains("4");
    template.sendBody("direct:start","Hello World");
    try {
      assertMockEndpointsSatisfied();
      fail("Should fail");
    }
 catch (    Throwable e) {
      String s="Assertion error at index 0 on mock mock://result with predicate: exchangeProperty(foo) contains 4 evaluated as: 123 contains 4";
      assertTrue(e.getMessage().startsWith(s));
    }
  }
  @Test public void testMockValueBuilderNotSatisfied() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).exchangeProperty("foo").convertTo(String.class).contains("4");
    template.sendBody("direct:start","Hello World");
    mock.assertIsNotSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setProperty("foo",constant(123)).to("mock:result");
      }
    }
;
  }
}
