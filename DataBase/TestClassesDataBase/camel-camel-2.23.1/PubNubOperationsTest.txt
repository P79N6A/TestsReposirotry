public class PubNubOperationsTest extends PubNubTestBase {
  @Test public void testWhereNow() throws Exception {
    stubFor(get(urlPathEqualTo("/v2/presence/sub-key/mySubscribeKey/uuid/myUUID")).willReturn(aResponse().withBody("{\"status\": 200, \"message\": \"OK\", \"payload\": {\"channels\": [\"channel-a\",\"channel-b\"]}, \"service\": \"Presence\"}")));
    Map<String,Object> headers=new HashMap<>();
    headers.put(PubNubConstants.OPERATION,"WHERENOW");
    headers.put(PubNubConstants.UUID,"myUUID");
    @SuppressWarnings("unchecked") List<String> response=template.requestBodyAndHeaders("direct:publish",null,headers,List.class);
    assertNotNull(response);
    assertListSize(response,2);
    assertEquals("channel-a",response.get(0));
  }
  @Test public void testHereNow() throws Exception {
    stubFor(get(urlPathEqualTo("/v2/presence/sub_key/mySubscribeKey/channel/myChannel")).willReturn(aResponse().withBody("{\"status\" : 200, \"message\" : \"OK\", \"service\" : \"Presence\", \"uuids\" : [{\"uuid\" : \"myUUID0\"}, {\"state\" : {\"abcd\" : {\"age\" : 15}}, " + "\"uuid\" : \"myUUID1\"}, {\"uuid\" : \"b9eb408c-bcec-4d34-b4c4-fabec057ad0d\"}, {\"state\" : {\"abcd\" : {\"age\" : 15}}, \"uuid\" : \"myUUID2\"}," + " {\"state\" : {\"abcd\" : {\"age\" : 24}}, \"uuid\" : \"myUUID9\"}], \"occupancy\" : 5} Return Occupancy O")));
    Map<String,Object> headers=new HashMap<>();
    headers.put(PubNubConstants.OPERATION,"HERENOW");
    PNHereNowResult response=template.requestBodyAndHeaders("direct:publish",null,headers,PNHereNowResult.class);
    assertNotNull(response);
    assertEquals(5,response.getTotalOccupancy());
  }
  @Test public void testGetHistory() throws Exception {
    List<Object> testArray=new ArrayList<>();
    List<Object> historyItems=new ArrayList<>();
    Map<String,Object> historyEnvelope1=new HashMap<>();
    Map<String,Object> historyItem1=new HashMap<>();
    historyItem1.put("a",11);
    historyItem1.put("b",22);
    historyEnvelope1.put("timetoken",1111);
    historyEnvelope1.put("message",historyItem1);
    Map<String,Object> historyEnvelope2=new HashMap<>();
    Map<String,Object> historyItem2=new HashMap<>();
    historyItem2.put("a",33);
    historyItem2.put("b",44);
    historyEnvelope2.put("timetoken",2222);
    historyEnvelope2.put("message",historyItem2);
    historyItems.add(historyEnvelope1);
    historyItems.add(historyEnvelope2);
    testArray.add(historyItems);
    testArray.add(1234);
    testArray.add(4321);
    stubFor(get(urlPathEqualTo("/v2/history/sub-key/mySubscribeKey/channel/myChannel")).willReturn(aResponse().withBody(getPubnub().getMapper().toJson(testArray))));
    Map<String,Object> headers=new HashMap<>();
    headers.put(PubNubConstants.OPERATION,"GETHISTORY");
    @SuppressWarnings("unchecked") List<PNHistoryItemResult> response=template.requestBodyAndHeaders("direct:publish",null,headers,List.class);
    assertNotNull(response);
    assertListSize(response,2);
  }
  @Test public void testGetState() throws Exception {
    stubFor(get(urlPathEqualTo("/v2/presence/sub-key/mySubscribeKey/channel/myChannel/uuid/myuuid")).willReturn(aResponse().withBody("{ \"status\": 200, \"message\": \"OK\", \"payload\": " + "{ \"myChannel\": { \"age\" : 20, \"status\" : \"online\"}, \"ch2\": { \"age\": 100, \"status\": \"offline\" } }, \"service\": \"Presence\"}")));
    Map<String,Object> headers=new HashMap<>();
    headers.put(PubNubConstants.OPERATION,"GETSTATE");
    PNGetStateResult response=template.requestBodyAndHeaders("direct:publish",null,headers,PNGetStateResult.class);
    assertNotNull(response);
    assertNotNull(response.getStateByUUID().get("myChannel"));
  }
  @Test public void testSetState() throws Exception {
    stubFor(get(urlPathEqualTo("/v2/presence/sub-key/mySubscribeKey/channel/myChannel/uuid/myuuid/data")).willReturn(aResponse().withBody("{ \"status\": 200, \"message\": \"OK\", \"payload\": { \"age\" : 20, \"status\" : \"online\" }, \"service\": \"Presence\"}")));
    Map<String,Object> myState=new HashMap<>();
    myState.put("age",20);
    Map<String,Object> headers=new HashMap<>();
    headers.put(PubNubConstants.OPERATION,"SETSTATE");
    PNSetStateResult response=template.requestBodyAndHeaders("direct:publish",myState,headers,PNSetStateResult.class);
    assertNotNull(response);
    assertNotNull(response.getState());
    assertEquals(20,response.getState().getAsJsonObject().get("age").getAsInt());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:publish").to("pubnub://myChannel?uuid=myuuid&pubnub=#pubnub").to("mock:result");
      }
    }
;
  }
}
