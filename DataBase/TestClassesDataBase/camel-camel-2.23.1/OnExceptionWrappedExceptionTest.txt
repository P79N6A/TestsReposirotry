/** 
 * Unit test to test that onException handles wrapped exceptions
 */
public class OnExceptionWrappedExceptionTest extends ContextTestSupport {
  @Test public void testWrappedException() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:wrapped").expectedMessageCount(1);
    getMockEndpoint("mock:end").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getTypeConverterRegistry().addTypeConverter(LocalDateTime.class,String.class,new MyLocalDateTimeConverter());
        errorHandler(deadLetterChannel("mock:error"));
        onException(IllegalArgumentException.class).handled(true).to("mock:wrapped");
        from("direct:start").convertBodyTo(LocalDateTime.class).to("mock:end");
      }
    }
;
  }
public static class LocalDateTime {
  }
private static class MyLocalDateTimeConverter extends TypeConverterSupport {
    public <T>T convertTo(    Class<T> type,    Exchange exchange,    Object value){
      throw wrapRuntimeCamelException(new IllegalArgumentException("Bad Data"));
    }
  }
}
