/** 
 * @version 
 */
public class SplitterCompletedPropertyTest extends ContextTestSupport {
  @Test public void testSplitterCompleted() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceived("Hello World","Bye World","Bye Moon");
    mock.message(0).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false);
    mock.message(1).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false);
    mock.message(2).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(true);
    template.sendBody("direct:start","Hello World,Bye World,Bye Moon");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitterStreamingCompleted() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceived("Hello World","Bye World","Bye Moon");
    mock.message(0).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false);
    mock.message(1).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false);
    mock.message(2).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(true);
    template.sendBody("direct:streaming","Hello World,Bye World,Bye Moon");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).to("mock:split");
        from("direct:streaming").split(body().tokenize(",")).streaming().to("mock:split");
      }
    }
;
  }
}
