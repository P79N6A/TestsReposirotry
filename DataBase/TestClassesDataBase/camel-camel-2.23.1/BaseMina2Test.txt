public class BaseMina2Test extends CamelTestSupport {
  protected static final String KEY_STORE_PASSWORD="changeit";
  private static volatile int port;
  @BeforeClass public static void initPort() throws Exception {
    port=AvailablePortFinder.getNextAvailable();
  }
  protected int getNextPort(){
    return AvailablePortFinder.getNextAvailable();
  }
  protected int getPort(){
    return port;
  }
  protected boolean isUseSslContext(){
    return false;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry reg=super.createRegistry();
    if (isUseSslContext()) {
      addSslContextParametersToRegistry(reg);
    }
    return reg;
  }
  protected void addSslContextParametersToRegistry(  JndiRegistry registry){
    registry.bind("sslContextParameters",createSslContextParameters());
  }
  protected SSLContextParameters createSslContextParameters(){
    KeyStoreParameters ksp=new KeyStoreParameters();
    ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString());
    ksp.setPassword(KEY_STORE_PASSWORD);
    KeyManagersParameters kmp=new KeyManagersParameters();
    kmp.setKeyPassword(KEY_STORE_PASSWORD);
    kmp.setKeyStore(ksp);
    TrustManagersParameters tmp=new TrustManagersParameters();
    tmp.setKeyStore(ksp);
    SSLContextServerParameters scsp=new SSLContextServerParameters();
    scsp.setClientAuthentication(ClientAuthentication.WANT.name());
    SSLContextParameters sslContextParameters=new SSLContextParameters();
    sslContextParameters.setKeyManagers(kmp);
    sslContextParameters.setTrustManagers(tmp);
    sslContextParameters.setServerParameters(scsp);
    return sslContextParameters;
  }
}
