/** 
 * @version
 */
public class DisruptorConcurrentConsumersNPEIssueTest extends CamelTestSupport {
  @Test public void testSendToDisruptor() throws Exception {
    final MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("disruptor:foo","Hello World");
    assertMockEndpointsSatisfied();
    try {
      context.startRoute("first");
      fail("Should have thrown exception");
    }
 catch (    FailedToStartRouteException e) {
      assertEquals("Failed to start route first because of Multiple consumers for the same endpoint is not allowed:" + " disruptor://foo?concurrentConsumers=5",e.getMessage());
    }
  }
  @Test public void testStartThird() throws Exception {
    final MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("disruptor:foo","Hello World");
    assertMockEndpointsSatisfied();
    context.startRoute("third");
    try {
      context.startRoute("first");
      fail("Should have thrown exception");
    }
 catch (    FailedToStartRouteException e) {
      assertEquals("Failed to start route first because of Multiple consumers for the same endpoint is not allowed:" + " disruptor://foo?concurrentConsumers=5",e.getMessage());
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:foo?concurrentConsumers=5").routeId("first").noAutoStartup().to("mock:result");
        from("disruptor:foo?concurrentConsumers=5").routeId("second").to("mock:result");
        from("direct:foo").routeId("third").noAutoStartup().to("mock:result");
      }
    }
;
  }
}
