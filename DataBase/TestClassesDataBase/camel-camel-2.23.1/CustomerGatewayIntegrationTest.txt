public class CustomerGatewayIntegrationTest extends AbstractBraintreeTestSupport {
  private static final String PATH_PREFIX=getApiNameAsString(CustomerGatewayApiMethod.class);
  private static final Logger LOG=LoggerFactory.getLogger(CustomerGatewayIntegrationTest.class);
  /** 
 * Customers management workflow: - create a customer - lookup by id - update first name - delete by id - confirm deletion by searching again
 * @throws Exception
 */
  @Test public void testCustomerManagementWorkflow() throws Exception {
    String customerLastName=UUID.randomUUID().toString();
    String customerId=null;
    Result<Customer> createResult=requestBody("direct://CREATE_IN_BODY",new CustomerRequest().firstName("user").lastName(customerLastName).company("Apache").email("user@braintree.camel").website("http://user.braintree.camel"),Result.class);
    assertNotNull(createResult);
    assertTrue(createResult.isSuccess());
    assertNotNull(createResult.getTarget());
    assertNotNull(createResult.getTarget().getId());
    customerId=createResult.getTarget().getId();
    Customer customer1=requestBody("direct://FIND_IN_BODY",customerId,Customer.class);
    assertNotNull(customer1);
    assertEquals("user",customer1.getFirstName());
    assertEquals(customerLastName,customer1.getLastName());
    assertEquals("Apache",customer1.getCompany());
    assertEquals("user@braintree.camel",customer1.getEmail());
    assertEquals("http://user.braintree.camel",customer1.getWebsite());
    HashMap<String,Object> headers=new HashMap<>();
    headers.put("CamelBraintree.id",customerId);
    Result<Customer> updateResult=requestBodyAndHeaders("direct://UPDATE_IN_BODY",new CustomerRequest().firstName("user-mod"),headers,Result.class);
    assertNotNull(updateResult);
    assertTrue(updateResult.isSuccess());
    assertNotNull(updateResult.getTarget());
    assertEquals("user-mod",updateResult.getTarget().getFirstName());
    Result<Customer> customerResult=requestBody("direct://DELETE_IN_BODY",customerId,Result.class);
    assertNotNull(customerResult);
    assertTrue(customerResult.isSuccess());
    assertNull(customerResult.getTarget());
    ResourceCollection<Customer> customers=requestBody("direct://SEARCH_IN_BODY",new CustomerSearchRequest().id().is(customerId),ResourceCollection.class);
    assertNotNull(customers);
    assertEquals(0,customers.getMaximumSize());
  }
  @Test public void testUpdateUnknownCustomer() throws Exception {
    try {
      String id="unknown-" + UUID.randomUUID().toString();
      HashMap<String,Object> headers=new HashMap<>();
      headers.put("CamelBraintree.id",id);
      requestBodyAndHeaders("direct://UPDATE_IN_BODY",new CustomerRequest().firstName(id),headers);
      fail("Should have thrown NotFoundException");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(NotFoundException.class,e.getCause().getCause());
    }
  }
  @Test public void testSearchUnknownCustomer() throws Exception {
    try {
      requestBody("direct://FIND_IN_BODY","unknown-" + UUID.randomUUID().toString());
      fail("Should have thrown NotFoundException");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(NotFoundException.class,e.getCause().getCause());
    }
  }
  @Test public void testWrongCustomerCreateRequest() throws Exception {
    Result<Customer> createResult=requestBody("direct://CREATE_IN_BODY",new CustomerRequest().firstName("user").lastName(UUID.randomUUID().toString()).company("Apache").email("wrongEmail").website("http://user.braintree.camel"),Result.class);
    assertNotNull(createResult);
    assertFalse(createResult.isSuccess());
    final ValidationErrors errors=createResult.getErrors();
    assertNotNull(errors);
    assertNotNull(errors.getAllDeepValidationErrors());
    ValidationError invalidMailError=null;
    for (    ValidationError error : errors.getAllDeepValidationErrors()) {
      if (error.getCode() == ValidationErrorCode.CUSTOMER_EMAIL_FORMAT_IS_INVALID) {
        invalidMailError=error;
        break;
      }
    }
    assertNotNull(invalidMailError);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct://CREATE_IN_BODY").to("braintree://" + PATH_PREFIX + "/create?inBody=request");
        from("direct://DELETE_IN_BODY").to("braintree://" + PATH_PREFIX + "/delete?inBody=id");
        from("direct://FIND_IN_BODY").to("braintree://" + PATH_PREFIX + "/find?inBody=id");
        from("direct://SEARCH_IN_BODY").to("braintree://" + PATH_PREFIX + "/search?inBody=query");
        from("direct://UPDATE_IN_BODY").to("braintree://" + PATH_PREFIX + "/update?inBody=request");
      }
    }
;
  }
}
