public class FileConsumerPreMoveLastModifiedTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/premove");
    super.setUp();
  }
  @Test public void testPreMoveLastModified() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("file://target/premove","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/premove?preMove=work/work-${file:name}&initialDelay=0&delay=10&keepLastModified=true").process(new LastModifiedCheckerProcessor()).log("Got file ${file:name} modified=${file:modified}").to("mock:result");
      }
    }
;
  }
private static class LastModifiedCheckerProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      assertTrue(exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED,Long.class) > 0L);
      assertTrue(exchange.getIn().getHeader(Exchange.FILE_LENGTH,Long.class) > 0L);
    }
  }
}
