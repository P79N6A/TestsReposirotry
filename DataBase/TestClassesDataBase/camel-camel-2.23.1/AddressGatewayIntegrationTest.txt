public class AddressGatewayIntegrationTest extends AbstractBraintreeTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(AddressGatewayIntegrationTest.class);
  private static final String PATH_PREFIX=BraintreeApiCollection.getCollection().getApiName(AddressGatewayApiMethod.class).getName();
  private BraintreeGateway gateway;
  private Customer customer;
  private final List<String> addressIds;
  public AddressGatewayIntegrationTest(){
    this.customer=null;
    this.gateway=null;
    this.addressIds=new LinkedList<>();
  }
  @Override protected void doPostSetup() throws Exception {
    this.gateway=getGateway();
    this.customer=gateway.customer().create(new CustomerRequest().firstName("user").lastName(UUID.randomUUID().toString())).getTarget();
    if (customer != null) {
      LOG.info("Customer created - id={}",this.customer.getId());
    }
  }
  @Override @After public void tearDown() throws Exception {
    if (this.gateway != null && customer != null) {
      for (      String id : this.addressIds) {
        if (this.gateway.address().delete(customer.getId(),id).isSuccess()) {
          LOG.info("Address deleted - customer={}, id={}",customer.getId(),id);
        }
 else {
          LOG.warn("Unable to delete address - customer={}, id={}",customer.getId(),id);
        }
      }
      this.addressIds.clear();
      if (this.gateway.customer().delete(this.customer.getId()).isSuccess()) {
        LOG.info("Customer deleted - id={}",this.customer.getId());
      }
 else {
        LOG.warn("Unable to delete customer - id={}",this.customer.getId());
      }
    }
  }
  private Address createAddress(){
    final Result<Address> result=gateway.address().create(this.customer.getId(),new AddressRequest().company("Apache").streetAddress("1901 Munsey Drive").locality("Forest Hill"));
    assertNotNull("create",result);
    assertTrue(result.isSuccess());
    LOG.info("Address created - customer={}, id={}",this.customer.getId(),result.getTarget().getId());
    return result.getTarget();
  }
  @Test public void testCreate() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final Result<Address> address=requestBodyAndHeaders("direct://CREATE",null,new BraintreeHeaderBuilder().add("customerId",customer.getId()).add("request",new AddressRequest().company("Apache").streetAddress("1901 Munsey Drive").locality("Forest Hill")).build(),Result.class);
    assertNotNull("create",address);
    assertTrue(address.isSuccess());
    LOG.info("Address created - customer={}, id={}",customer.getId(),address.getTarget().getId());
    this.addressIds.add(address.getTarget().getId());
  }
  @Test public void testDelete() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final Address address=createAddress();
    final Result<Address> result=requestBodyAndHeaders("direct://DELETE",null,new BraintreeHeaderBuilder().add("customerId",customer.getId()).add("id",address.getId()).build(),Result.class);
    assertNotNull("delete",address);
    assertTrue(result.isSuccess());
    LOG.info("Address deleted - customer={}, id={}",customer.getId(),address.getId());
  }
  @Test public void testFind() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final Address addressRef=createAddress();
    this.addressIds.add(addressRef.getId());
    final Address address=requestBodyAndHeaders("direct://FIND",null,new BraintreeHeaderBuilder().add("customerId",customer.getId()).add("id",addressRef.getId()).build(),Address.class);
    assertNotNull("find",address);
    LOG.info("Address found - customer={}, id={}",customer.getId(),address.getId());
  }
  @Test public void testUpdate() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final Address addressRef=createAddress();
    this.addressIds.add(addressRef.getId());
    final Result<Address> result=requestBodyAndHeaders("direct://UPDATE",null,new BraintreeHeaderBuilder().add("customerId",customer.getId()).add("id",addressRef.getId()).add("request",new AddressRequest().company("Apache").streetAddress(customer.getId()).locality(customer.getId())).build(),Result.class);
    assertNotNull("update",result);
    assertTrue(result.isSuccess());
    LOG.info("Address updated - customer={}, id={}",customer.getId(),result.getTarget().getId());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create");
        from("direct://DELETE").to("braintree://" + PATH_PREFIX + "/delete");
        from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find");
        from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update");
      }
    }
;
  }
}
