/** 
 */
public class SplitListListIssueTest extends ContextTestSupport {
  @Test public void testSplitListList() throws Exception {
    List<List<String>> list=new ArrayList<>();
    for (int i=0; i < 5; i++) {
      List<String> entry=new ArrayList<>();
      entry.add("number" + i);
      entry.add("Camel");
      list.add(entry);
    }
    getMockEndpoint("mock:a").expectedMessageCount(5);
    getMockEndpoint("mock:b").expectedMessageCount(5);
    getMockEndpoint("mock:c").expectedMessageCount(5);
    getMockEndpoint("mock:d").expectedMessageCount(5);
    getMockEndpoint("mock:e").expectedMessageCount(5);
    template.sendBody("direct:start",list);
    assertMockEndpointsSatisfied();
    for (int i=0; i < 5; i++) {
      assertTrue(getMockEndpoint("mock:a").getReceivedExchanges().get(i).getIn().getBody(List.class).get(0).equals("number" + i));
      assertTrue(getMockEndpoint("mock:a").getReceivedExchanges().get(i).getIn().getBody(List.class).get(1).equals("Camel"));
      assertTrue(getMockEndpoint("mock:b").getReceivedExchanges().get(i).getIn().getBody(List.class).get(0).equals("number" + i));
      assertTrue(getMockEndpoint("mock:b").getReceivedExchanges().get(i).getIn().getBody(List.class).get(1).equals("Camel"));
      assertTrue(getMockEndpoint("mock:c").getReceivedExchanges().get(i).getIn().getBody(List.class).get(0).equals("number" + i));
      assertTrue(getMockEndpoint("mock:c").getReceivedExchanges().get(i).getIn().getBody(List.class).get(1).equals("Camel"));
      assertTrue(getMockEndpoint("mock:d").getReceivedExchanges().get(i).getIn().getBody(List.class).get(0).equals("number" + i));
      assertTrue(getMockEndpoint("mock:d").getReceivedExchanges().get(i).getIn().getBody(List.class).get(1).equals("Camel"));
      assertTrue(getMockEndpoint("mock:e").getReceivedExchanges().get(i).getIn().getBody(List.class).get(0).equals("number" + i));
      assertTrue(getMockEndpoint("mock:e").getReceivedExchanges().get(i).getIn().getBody(List.class).get(1).equals("Camel"));
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body()).to("direct:foo").end();
        from("direct:foo").to("mock:a").to("mock:b").to("mock:c").to("mock:d").to("mock:e");
      }
    }
;
  }
}
