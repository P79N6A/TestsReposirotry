/** 
 * @version
 */
public class JmsPerformanceTest extends CamelTestSupport {
  private List<Integer> receivedHeaders=new ArrayList<>(getMessageCount());
  private List<Object> receivedMessages=new ArrayList<>(getMessageCount());
  @Test public void testSendingAndReceivingMessages() throws Exception {
    log.info("Sending {} messages",getMessageCount());
    sendLoop(getMessageCount());
    log.info("Sending {} messages completed, now will assert on their content as well as the order of their receipt",getMessageCount());
    Thread.sleep(3000);
    assertExpectedMessagesReceived();
  }
  protected int getMessageCount(){
    return 100;
  }
  protected void sendLoop(  int messageCount){
    for (int i=1; i <= messageCount; i++) {
      sendMessage(i);
    }
  }
  protected void sendMessage(  int messageCount){
    template.sendBodyAndHeader("activemq:" + getQueueName(),"Hello:" + messageCount,"counter",messageCount);
  }
  protected String getQueueName(){
    return "testSendingAndReceivingMessages";
  }
  protected void assertExpectedMessagesReceived() throws InterruptedException {
    assertEquals("The expected message count does not match!",getMessageCount(),receivedMessages.size());
    List<Integer> expectedHeaders=new ArrayList<>(getMessageCount());
    for (int i=1; i <= getMessageCount(); i++) {
      expectedHeaders.add(i);
    }
    List<Object> expectedMessages=new ArrayList<>(getMessageCount());
    for (int i=1; i <= getMessageCount(); i++) {
      expectedMessages.add("Hello:" + i);
    }
    assertEquals("The expected header order does not match!",expectedHeaders,receivedHeaders);
    assertEquals("The expected message order does not match!",expectedMessages,receivedMessages);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",new MyBean());
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    JmsComponent amq=jmsComponentAutoAcknowledge(connectionFactory);
    amq.setCamelContext(context);
    answer.bind("activemq",amq);
    return answer;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("activemq:" + getQueueName()).to("bean:myBean");
      }
    }
;
  }
protected class MyBean {
    public void onMessage(    @Header("counter") int counter,    Object body){
      receivedHeaders.add(counter);
      receivedMessages.add(body);
    }
  }
}
