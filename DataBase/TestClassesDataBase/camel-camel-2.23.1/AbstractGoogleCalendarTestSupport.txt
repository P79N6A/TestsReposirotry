/** 
 * Abstract base class for GoogleCalendar Integration tests generated by Camel API component maven plugin.
 */
public class AbstractGoogleCalendarTestSupport extends CamelTestSupport {
  private static final String TEST_OPTIONS_PROPERTIES="/test-options.properties";
  private Calendar calendar;
  @Before public void createTestCalendar(){
    Calendar calendar=new Calendar();
    Random rand=new Random();
    calendar.setSummary("camel-calendar-" + rand.nextInt());
    calendar.setTimeZone("America/St_Johns");
    this.calendar=requestBody("google-calendar://calendars/insert?inBody=content",calendar);
  }
  @After public void deleteTestCalendar(){
    try {
      if (calendar != null) {
        requestBody("google-calendar://calendars/delete?inBody=calendarId",getCalendar().getId());
        setCalendar(null);
      }
    }
 catch (    Exception e) {
    }
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=super.createCamelContext();
    final Properties properties=new Properties();
    try {
      properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES));
    }
 catch (    Exception e) {
      throw new IOException(String.format("%s could not be loaded: %s",TEST_OPTIONS_PROPERTIES,e.getMessage()),e);
    }
    Map<String,Object> options=new HashMap<>();
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      options.put(entry.getKey().toString(),entry.getValue());
    }
    final GoogleCalendarConfiguration configuration=new GoogleCalendarConfiguration();
    IntrospectionSupport.setProperties(configuration,options);
    final GoogleCalendarComponent component=new GoogleCalendarComponent(context);
    component.setConfiguration(configuration);
    context.addComponent("google-calendar",component);
    return context;
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @SuppressWarnings("unchecked") protected <T>T requestBodyAndHeaders(  String endpointUri,  Object body,  Map<String,Object> headers) throws CamelExecutionException {
    return (T)template().requestBodyAndHeaders(endpointUri,body,headers);
  }
  @SuppressWarnings("unchecked") protected <T>T requestBody(  String endpoint,  Object body) throws CamelExecutionException {
    return (T)template().requestBody(endpoint,body);
  }
  public Calendar getCalendar(){
    if (calendar == null) {
      createTestCalendar();
    }
    return calendar;
  }
  public void setCalendar(  Calendar calendar){
    this.calendar=calendar;
  }
}
