public abstract class ValidatorDtdAccessAbstractTest extends ContextTestSupport {
  protected MockEndpoint finallyEndpoint;
  protected MockEndpoint invalidEndpoint;
  protected MockEndpoint unknownHostExceptionEndpoint;
  protected MockEndpoint validEndpoint;
  protected String payloud=getPayloudPart("Hello world!");
  protected String ssrfPayloud="<!DOCTYPE roottag PUBLIC \"-//VSR//PENTEST//EN\" \"http://notexisting/test\">\n" + payloud;
  protected String xxePayloud="<!DOCTYPE updateProfile [<!ENTITY file SYSTEM \"http://notexistinghost/test\">]>\n" + getPayloudPart("&file;");
  private final boolean accessExternalDTD;
  public ValidatorDtdAccessAbstractTest(  boolean accessExternalDTD){
    this.accessExternalDTD=accessExternalDTD;
  }
  private String getPayloudPart(  String bodyValue){
    return "<mail xmlns='http://foo.com/bar'><subject>Hey</subject><body>" + bodyValue + "</body></mail>";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    validEndpoint=resolveMandatoryEndpoint("mock:valid",MockEndpoint.class);
    invalidEndpoint=resolveMandatoryEndpoint("mock:invalid",MockEndpoint.class);
    unknownHostExceptionEndpoint=resolveMandatoryEndpoint("mock:unknownHostException",MockEndpoint.class);
    finallyEndpoint=resolveMandatoryEndpoint("mock:finally",MockEndpoint.class);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        if (accessExternalDTD) {
          getContext().getGlobalOptions().put(SchemaReader.ACCESS_EXTERNAL_DTD,"true");
        }
        from("direct:start").doTry().to("validator:org/apache/camel/component/validator/schema.xsd").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doCatch(UnknownHostException.class).to("mock:unknownHostException").doFinally().to("mock:finally").end();
      }
    }
;
  }
}
