public class CaffeineCacheRemovaListenerProducerTest extends CaffeineCacheTestSupport {
  @Test public void testCacheClear() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived((Object)null);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_CLEANUP).to("direct://start").send();
    assertMockEndpointsSatisfied();
  }
  @Test public void testCachePut() throws Exception {
    final String key=generateRandomString();
    final String val=generateRandomString();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived(val);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_PUT).withHeader(CaffeineConstants.KEY,key).withBody(val).to("direct://start").send();
    assertTrue(getTestRemovalListenerCache().getIfPresent(key) != null);
    assertEquals(val,getTestRemovalListenerCache().getIfPresent(key));
  }
  @Test public void testCachePutAll() throws Exception {
    final Map<String,String> map=generateRandomMapOfString(3);
    final Set<String> keys=map.keySet().stream().limit(2).collect(Collectors.toSet());
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_PUT_ALL).withBody(map).to("direct://start").send();
    MockEndpoint mock1=getMockEndpoint("mock:result");
    mock1.expectedMinimumMessageCount(1);
    mock1.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
    mock1.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    final Map<String,String> elements=getTestRemovalListenerCache().getAllPresent(keys);
    keys.forEach(k -> {
      assertTrue(elements.containsKey(k));
      assertEquals(map.get(k),elements.get(k));
    }
);
    assertMockEndpointsSatisfied();
  }
  @Test public void testCacheGet() throws Exception {
    final Cache<Object,Object> cache=getTestRemovalListenerCache();
    final String key=generateRandomString();
    final String val=generateRandomString();
    cache.put(key,val);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedBodiesReceived(val);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY,key).withBody(val).to("direct://start").send();
    assertMockEndpointsSatisfied();
  }
  @Test public void testCacheGetAll() throws Exception {
    final Cache<Object,Object> cache=getTestRemovalListenerCache();
    final Map<String,String> map=generateRandomMapOfString(3);
    final Set<String> keys=map.keySet().stream().limit(2).collect(Collectors.toSet());
    cache.putAll(map);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_GET_ALL).withHeader(CaffeineConstants.KEYS,keys).to("direct://start").send();
    assertMockEndpointsSatisfied();
    final Map<String,String> elements=mock.getExchanges().get(0).getIn().getBody(Map.class);
    keys.forEach(k -> {
      assertTrue(elements.containsKey(k));
      assertEquals(map.get(k),elements.get(k));
    }
);
  }
  @Test public void testCacheInvalidate() throws Exception {
    final Cache<Object,Object> cache=getTestRemovalListenerCache();
    final String key=generateRandomString();
    final String val=generateRandomString();
    cache.put(key,val);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_INVALIDATE).withHeader(CaffeineConstants.KEY,key).to("direct://start").send();
    assertMockEndpointsSatisfied();
    assertFalse(cache.getIfPresent(key) != null);
  }
  @Test public void testCacheInvalidateAll() throws Exception {
    final Cache<Object,Object> cache=getTestRemovalListenerCache();
    final Map<String,String> map=generateRandomMapOfString(3);
    final Set<String> keys=map.keySet().stream().limit(2).collect(Collectors.toSet());
    cache.putAll(map);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
    mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_INVALIDATE_ALL).withHeader(CaffeineConstants.KEYS,keys).to("direct://start").send();
    assertMockEndpointsSatisfied();
    final Map<String,String> elements=getTestRemovalListenerCache().getAllPresent(keys);
    keys.forEach(k -> {
      assertFalse(elements.containsKey(k));
    }
);
  }
  @Test public void testStats() throws Exception {
    final Map<String,String> map=generateRandomMapOfString(3);
    final Set<String> keys=map.keySet().stream().limit(2).collect(Collectors.toSet());
    fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_PUT_ALL).withBody(map).to("direct://start").send();
    MockEndpoint mock1=getMockEndpoint("mock:result");
    mock1.expectedMinimumMessageCount(1);
    mock1.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
    mock1.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
    final Map<String,String> elements=getTestRemovalListenerCache().getAllPresent(keys);
    keys.forEach(k -> {
      assertTrue(elements.containsKey(k));
      assertEquals(map.get(k),elements.get(k));
    }
);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://start").toF("caffeine-cache://%s?cache=#cacheRl","test").to("log:org.apache.camel.component.caffeine?level=INFO&showAll=true&multiline=true").to("mock:result");
      }
    }
;
  }
}
