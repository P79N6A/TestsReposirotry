/** 
 * @version 
 */
public class RecipientListExchangePropertyTest extends ContextTestSupport {
  private final MyStuff myStuff=new MyStuff("Blah");
  @Test public void testExchangeProperty() throws Exception {
    getMockEndpoint("mock:x").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:x").message(0).exchangeProperty("foo").isEqualTo(myStuff);
    getMockEndpoint("mock:y").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:y").message(0).exchangeProperty("foo").isEqualTo(myStuff);
    getMockEndpoint("mock:z").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:z").message(0).exchangeProperty("foo").isEqualTo(myStuff);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").message(0).exchangeProperty("foo").isEqualTo(myStuff);
    template.sendBodyAndProperty("direct:a","Hello World","foo",myStuff);
    assertMockEndpointsSatisfied();
    MyStuff stuff=getMockEndpoint("mock:result").getReceivedExchanges().get(0).getProperty("foo",MyStuff.class);
    assertSame("Should be same instance",myStuff,stuff);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").recipientList(constant("mock:x,mock:y,mock:z")).to("mock:result");
      }
    }
;
  }
private static final class MyStuff {
    private String name;
    private MyStuff(    String name){
      this.name=name;
    }
    public String getName(){
      return name;
    }
  }
}
