/** 
 * @version 
 */
public class RomeksExceptionTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(RomeksExceptionTest.class);
  @Test public void testRouteA() throws Exception {
    assertErrorHandlingWorks("a");
  }
  @Test public void testRouteB() throws Exception {
    assertErrorHandlingWorks("b");
  }
  protected void assertErrorHandlingWorks(  String route) throws Exception {
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    MockEndpoint exceptionEndpoint=getMockEndpoint("mock:exception");
    resultEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedBodiesReceived("<exception/>");
    try {
      template.sendBodyAndHeader("direct:start","<body/>","route",route);
      fail("Should have thrown exception");
    }
 catch (    RuntimeCamelException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertEquals("Exception thrown intentionally.",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    List<Exchange> list=exceptionEndpoint.getReceivedExchanges();
    Exchange exchange=list.get(0);
    LOG.debug("Received: " + exchange.getIn());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    final Processor exceptionThrower=new Processor(){
      public void process(      Exchange exchange) throws Exception {
        LOG.debug("About to throw exception on " + exchange);
        exchange.getIn().setBody("<exception/>");
        throw new IllegalArgumentException("Exception thrown intentionally.");
      }
    }
;
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0));
        onException(IllegalArgumentException.class).to("mock:exception");
        from("direct:start").recipientList().simple("direct:${header.route}").to("mock:result");
        from("direct:a").setBody(constant("<some-value/>")).process(exceptionThrower).to("mock:result");
        from("direct:b").process(exceptionThrower).setBody(constant("<some-value/>")).to("mock:result");
      }
    }
;
  }
}
