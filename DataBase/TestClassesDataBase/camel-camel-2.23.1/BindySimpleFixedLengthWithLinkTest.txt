/** 
 * This test validates that header and footer records are successfully marshalled / unmarshalled in conjunction with the primary data records defined for the bindy data format.
 */
public class BindySimpleFixedLengthWithLinkTest extends CamelTestSupport {
  public static final String URI_DIRECT_UNMARSHALL="direct:unmarshall";
  public static final String URI_MOCK_UNMARSHALL_RESULT="mock:unmarshall-result";
  public static final String URI_DIRECT_MARSHALL="direct:marshall";
  public static final String URI_MOCK_MARSHALL_RESULT="mock:marshall-result";
  private static final String TEST_RECORD="AAABBBCCC\r\n";
  @EndpointInject(uri=URI_MOCK_UNMARSHALL_RESULT) private MockEndpoint unmarshallResult;
  @EndpointInject(uri=URI_MOCK_MARSHALL_RESULT) private MockEndpoint marshallResult;
  @Test public void testUnmarshallMessage() throws Exception {
    unmarshallResult.expectedMessageCount(1);
    template.sendBody(URI_DIRECT_UNMARSHALL,TEST_RECORD);
    unmarshallResult.assertIsSatisfied();
    Exchange exchange=unmarshallResult.getReceivedExchanges().get(0);
    Order order=exchange.getIn().getBody(Order.class);
    assertEquals("AAA",order.fieldA);
    assertEquals("CCC",order.fieldC);
    assertEquals("BBB",order.subRec.fieldB);
  }
  @Test public void testMarshallMessage() throws Exception {
    marshallResult.expectedMessageCount(1);
    Order order=new Order();
    order.setFieldA("AAA");
    order.setFieldC("CCC");
    SubRec subRec=new SubRec();
    subRec.setFieldB("BBB");
    order.setSubRec(subRec);
    template.sendBody(URI_DIRECT_MARSHALL,order);
    marshallResult.assertIsSatisfied();
    Exchange exchange=marshallResult.getReceivedExchanges().get(0);
    String asString=exchange.getIn().getBody(String.class);
    assertThat(asString,is("AAABBBCCC\r\n"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    RouteBuilder routeBuilder=new RouteBuilder(){
      @Override public void configure() throws Exception {
        BindyDataFormat bindy=new BindyDataFormat();
        bindy.setClassType(Order.class);
        bindy.setLocale("en");
        bindy.setType(BindyType.Fixed);
        from(URI_DIRECT_UNMARSHALL).unmarshal(bindy).to(URI_MOCK_UNMARSHALL_RESULT);
        from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT);
      }
    }
;
    return routeBuilder;
  }
@FixedLengthRecord public static class Order {
    @DataField(pos=1,length=3) private String fieldA;
    @Link private SubRec subRec;
    @DataField(pos=7,length=3) private String fieldC;
    public String getFieldA(){
      return fieldA;
    }
    public void setFieldA(    String fieldA){
      this.fieldA=fieldA;
    }
    public String getFieldC(){
      return fieldC;
    }
    public void setFieldC(    String fieldC){
      this.fieldC=fieldC;
    }
    public SubRec getSubRec(){
      return subRec;
    }
    public void setSubRec(    SubRec subRec){
      this.subRec=subRec;
    }
  }
@Link @FixedLengthRecord public static class SubRec {
    @DataField(pos=4,length=3) private String fieldB;
    public String getFieldB(){
      return fieldB;
    }
    public void setFieldB(    String fieldB){
      this.fieldB=fieldB;
    }
  }
}
