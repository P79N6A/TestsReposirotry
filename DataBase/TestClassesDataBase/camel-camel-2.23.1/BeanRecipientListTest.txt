/** 
 * @version 
 */
public class BeanRecipientListTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanRecipientListTest.class);
  protected MyBean myBean=new MyBean();
  @Test public void testSendMessage() throws Exception {
    final String expectedBody="Wibble";
    getMockEndpoint("mock:a").expectedBodiesReceived(expectedBody);
    getMockEndpoint("mock:b").expectedBodiesReceived(expectedBody);
    template.sendBody("direct:in",expectedBody);
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    checkBean();
  }
  protected void checkBean() throws Exception {
    Object lookedUpBean=context.getRegistry().lookupByName("myBean");
    assertSame("Lookup of 'myBean' should return same object!",myBean,lookedUpBean);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").bean("myBean","route");
      }
    }
;
  }
public static class MyBean {
    private static AtomicInteger counter=new AtomicInteger(0);
    private int id;
    public MyBean(){
      id=counter.incrementAndGet();
    }
    @Override public String toString(){
      return "MyBean:" + id;
    }
    @org.apache.camel.RecipientList public String[] route(    String body){
      LOG.debug("Called {} with body: {}",this,body);
      return new String[]{"mock:a","mock:b"};
    }
  }
}
