/** 
 * @version 
 */
public class EnricherAsyncUnhandledExceptionTest extends ContextTestSupport {
  @Test public void testInOutWithRequestBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:pickedUp");
    mock.expectedMessageCount(1);
    try {
      Future<Object> obj=template.asyncRequestBody("direct:in","Hello World");
      obj.get(5000,TimeUnit.MILLISECONDS);
    }
 catch (    Exception e) {
      assertTrue(e instanceof ExecutionException);
      assertTrue(e.getCause() instanceof CamelExecutionException);
      assertTrue(e.getCause().getCause() instanceof CamelExchangeException);
      assertTrue(e.getCause().getCause().getCause() instanceof RuntimeException);
      assertTrue(e.getCause().getCause().getCause().getMessage().equals("Bang! Unhandled exception"));
      mock.assertIsSatisfied();
      return;
    }
    fail("Expected an RuntimeException");
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ShutdownStrategy shutdownStrategy=camelContext.getShutdownStrategy();
    camelContext.addComponent("async",new MyAsyncComponent());
    shutdownStrategy.setTimeout(1000);
    shutdownStrategy.setTimeUnit(TimeUnit.MILLISECONDS);
    shutdownStrategy.setShutdownNowOnTimeout(true);
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:in").to("mock:pickedUp").enrich("async:out?reply=Reply",new AggregationStrategy(){
          @Override public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            throw new RuntimeException("Bang! Unhandled exception");
          }
        }
);
      }
    }
;
  }
}
