/** 
 * @version 
 */
public class AsyncEndpointIdempotentConsumerTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("A","B","C");
    MockEndpoint after=getMockEndpoint("mock:after");
    after.expectedBodiesReceived("Bye Camel","Bye Camel");
    after.message(0).header("myId").isEqualTo(123);
    after.message(1).header("myId").isEqualTo(456);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Bye Camel","Bye Camel");
    result.message(0).header("myId").isEqualTo(123);
    result.message(1).header("myId").isEqualTo(456);
    template.sendBodyAndHeader("direct:start","A","myId",123);
    template.sendBodyAndHeader("direct:start","B","myId",123);
    template.sendBodyAndHeader("direct:start","C","myId",456);
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).idempotentConsumer(header("myId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
}
