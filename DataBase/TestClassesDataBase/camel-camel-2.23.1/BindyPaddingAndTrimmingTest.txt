public class BindyPaddingAndTrimmingTest extends CamelTestSupport {
  private static final String URI_DIRECT_UNMARSHAL="direct:unmarshall";
  private static final String URI_MOCK_UNMARSHAL_RESULT="mock:unmarshal_result";
  @EndpointInject(uri=URI_MOCK_UNMARSHAL_RESULT) private MockEndpoint unmarhsalResult;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(URI_DIRECT_UNMARSHAL).unmarshal().bindy(BindyType.Fixed,MyBindyModel.class).to(URI_MOCK_UNMARSHAL_RESULT);
      }
    }
;
  }
  @Test public void testUnmarshal() throws Exception {
    unmarhsalResult.expectedMessageCount(1);
    template.sendBody(URI_DIRECT_UNMARSHAL,"foo  \r\n");
    unmarhsalResult.assertIsSatisfied();
    MyBindyModel myBindyModel=unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class);
    assertEquals("foo  ",myBindyModel.foo);
    assertThat(myBindyModel.bar,Is.is(""));
  }
  @Test public void testUnmarshalTooLong() throws Exception {
    unmarhsalResult.expectedMessageCount(1);
    template.sendBody(URI_DIRECT_UNMARSHAL,"foo  bar    \r\n");
    unmarhsalResult.assertIsSatisfied();
    MyBindyModel myBindyModel=unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class);
    assertEquals("foo  ",myBindyModel.foo);
  }
@FixedLengthRecord(length=10,ignoreMissingChars=true,ignoreTrailingChars=true) public static class MyBindyModel {
    @DataField(pos=0,length=5) String foo;
    @DataField(pos=5,length=5) String bar;
    public String getFoo(){
      return foo;
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
    public String getBar(){
      return bar;
    }
    public void setBar(    String bar){
      this.bar=bar;
    }
  }
}
