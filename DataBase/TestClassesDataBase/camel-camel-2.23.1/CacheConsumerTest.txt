public class CacheConsumerTest extends BaseCacheTest {
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") protected ProducerTemplate producerTemplate;
  @Test public void testReceivingFileFromCache() throws Exception {
    log.debug("Beginning Test ---> testReceivingFileFromCache()");
    resultEndpoint.expectedMessageCount(3);
    List<String> operations=new ArrayList<>();
    operations.add(CacheConstants.CACHE_OPERATION_ADD);
    operations.add(CacheConstants.CACHE_OPERATION_UPDATE);
    operations.add(CacheConstants.CACHE_OPERATION_DELETE);
    for (    final String operation : operations) {
      producerTemplate.send(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          exchange.setProperty(Exchange.CHARSET_NAME,"UTF-8");
          Message in=exchange.getIn();
          in.setHeader(CacheConstants.CACHE_OPERATION,operation);
          in.setHeader(CacheConstants.CACHE_KEY,"greeting");
          in.setBody("Hello World");
        }
      }
);
    }
    resultEndpoint.assertIsSatisfied();
    log.debug("Completed Test ---> testReceivingFileFromCache()");
  }
  @Test public void testReceivingSerializedObjectFromCache() throws Exception {
    log.debug("Beginning Test ---> testReceivingSerializedObjectFromCache()");
    resultEndpoint.expectedMessageCount(3);
    List<String> operations=new ArrayList<>();
    operations.add(CacheConstants.CACHE_OPERATION_ADD);
    operations.add(CacheConstants.CACHE_OPERATION_UPDATE);
    operations.add(CacheConstants.CACHE_OPERATION_DELETE);
    for (    final String operation : operations) {
      producerTemplate.send(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          Poetry p=new Poetry();
          p.setPoet("Ralph Waldo Emerson");
          p.setPoem("Brahma");
          exchange.setProperty(Exchange.CHARSET_NAME,"UTF-8");
          Message in=exchange.getIn();
          in.setHeader(CacheConstants.CACHE_OPERATION,operation);
          in.setHeader(CacheConstants.CACHE_KEY,"poetry");
          in.setBody(p);
        }
      }
);
    }
    resultEndpoint.assertIsSatisfied();
    log.debug("Completed Test ---> testReceivingFileFromCache()");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("cache://TestCache1").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String operation=(String)exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION);
            String key=(String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);
            Object body=exchange.getIn().getBody();
            String data=exchange.getContext().getTypeConverter().convertTo(String.class,body);
            if (log.isDebugEnabled()) {
              log.debug("------- Cache Event Notification ---------");
              log.debug("Received notification for the following activity in cache TestCache1:");
              log.debug("Operation = {}",operation);
              log.debug("key = {}",key);
              log.debug("value = {}",data);
              log.debug("------ End Cache Event Notification ------");
            }
          }
        }
).to("mock:result");
        from("direct:start").to("cache://TestCache1");
      }
    }
;
  }
}
