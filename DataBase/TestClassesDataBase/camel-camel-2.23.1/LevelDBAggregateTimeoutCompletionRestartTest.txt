public class LevelDBAggregateTimeoutCompletionRestartTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/data");
    super.setUp();
  }
  @Test public void testLevelDBAggregateTimeoutCompletionRestart() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    context.stop();
    assertEquals(0,mock.getReceivedCounter());
    context.start();
    mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("ABC");
    assertMockEndpointsSatisfied();
    assertEquals(1,mock.getReceivedCounter());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        LevelDBAggregationRepository repo=new LevelDBAggregationRepository("repo1","target/data/leveldb.dat");
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionTimeout(3000).aggregationRepository(repo).to("mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
