/** 
 * @version 
 */
public class JpaProducerConcurrentTest extends AbstractJpaTest {
  protected static final String SELECT_ALL_STRING="select x from " + SendEmail.class.getName() + " x";
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files);
    getMockEndpoint("mock:result").assertNoDuplicates(body());
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    Map<Integer,Future<SendEmail>> responses=new HashMap<>();
    for (int i=0; i < files; i++) {
      final int index=i;
      Future<SendEmail> out=executor.submit(new Callable<SendEmail>(){
        public SendEmail call() throws Exception {
          return template.requestBody("direct:start",new SendEmail("user" + index + "@somewhere.org"),SendEmail.class);
        }
      }
);
      responses.put(index,out);
    }
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
    assertEquals(files,responses.size());
    for (    Future<SendEmail> future : responses.values()) {
      SendEmail sendEmail=future.get();
      assertNotNull(sendEmail);
      log.info("Persisted the SendEmail entity with the id {} and the address {}",sendEmail.getId(),sendEmail.getAddress());
    }
    assertEntityInDB(files);
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new SpringRouteBuilder(){
      public void configure(){
        from("direct:start").to("jpa://" + SendEmail.class.getName() + "?usePersist=true").to("mock:result");
      }
    }
;
  }
  @Override protected String routeXml(){
    return "org/apache/camel/processor/jpa/springJpaRouteTest.xml";
  }
  @Override protected String selectAllString(){
    return SELECT_ALL_STRING;
  }
}
