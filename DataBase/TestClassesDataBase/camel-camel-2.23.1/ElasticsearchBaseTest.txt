public class ElasticsearchBaseTest extends CamelTestSupport {
  public static Node node;
  public static TransportClient client;
  protected static final int ES_TRANSPORT_PORT=AvailablePortFinder.getNextAvailable();
private static class PluginConfigurableNode extends Node {
    PluginConfigurableNode(    Settings settings,    Collection<Class<? extends Plugin>> classpathPlugins){
      super(InternalSettingsPreparer.prepareEnvironment(settings,null),classpathPlugins);
    }
  }
  @SuppressWarnings("resource") @BeforeClass public static void cleanupOnce() throws Exception {
    deleteDirectory("target/data");
    node=new PluginConfigurableNode(Settings.builder().put("http.enabled",true).put("path.data","target/data").put("path.home","target/home").put("transport.profiles.default.port",ES_TRANSPORT_PORT).build(),Arrays.asList(Netty4Plugin.class)).start();
    client=new PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("localhost"),ES_TRANSPORT_PORT));
  }
  @AfterClass public static void teardownOnce() throws IOException {
    if (client != null) {
      client.close();
    }
    if (node != null) {
      node.close();
    }
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    return context;
  }
  /** 
 * As we don't delete the  {@code target/data} folder for <b>each</b> testbelow (otherwise they would run much slower), we need to make sure there's no side effect of the same used data through creating unique indexes.
 */
  Map<String,String> createIndexedData(  String... additionalPrefixes){
    String prefix=createPrefix();
    if (additionalPrefixes.length > 0) {
      StringBuilder sb=new StringBuilder(prefix);
      for (      String additionalPrefix : additionalPrefixes) {
        sb.append(additionalPrefix).append("-");
      }
      prefix=sb.toString();
    }
    String key=prefix + "key";
    String value=prefix + "value";
    log.info("Creating indexed data using the key/value pair {} => {}",key,value);
    Map<String,String> map=new HashMap<>();
    map.put(key,value);
    return map;
  }
  String createPrefix(){
    return getTestMethodName().toLowerCase() + "-";
  }
}
