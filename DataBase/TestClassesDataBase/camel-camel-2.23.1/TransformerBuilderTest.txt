public class TransformerBuilderTest extends TestSupport {
  @Test public void testDataFormatTransformer() throws Exception {
    CamelContext ctx=new DefaultCamelContext();
    RouteBuilder builder=new RouteBuilder(){
      @Override public void configure() throws Exception {
        transformer().fromType("xml:foo").toType("json:bar").withDataFormat(new StringDataFormat());
        from("direct:input").log("test");
      }
    }
;
    ctx.addRoutes(builder);
    ctx.start();
    Transformer transformer=ctx.resolveTransformer(new DataType("xml:foo"),new DataType("json:bar"));
    assertNotNull(transformer);
    assertEquals(DataFormatTransformer.class,transformer.getClass());
    DataFormatTransformer dft=(DataFormatTransformer)transformer;
    Field f=DataFormatTransformer.class.getDeclaredField("dataFormatType");
    f.setAccessible(true);
    Object dataFormatType=f.get(dft);
    assertEquals(StringDataFormat.class,dataFormatType.getClass());
  }
  @Test public void testEndpointTransformer() throws Exception {
    CamelContext ctx=new DefaultCamelContext();
    RouteBuilder builder=new RouteBuilder(){
      @Override public void configure() throws Exception {
        transformer().fromType("json:foo").toType("xml:bar").withUri("direct:transformer");
        from("direct:transformer").log("test");
      }
    }
;
    ctx.addRoutes(builder);
    ctx.start();
    Transformer transformer=ctx.resolveTransformer(new DataType("json:foo"),new DataType("xml:bar"));
    assertNotNull(transformer);
    assertEquals(ProcessorTransformer.class,transformer.getClass());
    ProcessorTransformer pt=(ProcessorTransformer)transformer;
    Field f=ProcessorTransformer.class.getDeclaredField("processor");
    f.setAccessible(true);
    Object processor=f.get(pt);
    assertEquals(SendProcessor.class,processor.getClass());
    SendProcessor sp=(SendProcessor)processor;
    assertEquals("direct://transformer",sp.getEndpoint().getEndpointUri());
  }
  @Test public void testCustomTransformer() throws Exception {
    CamelContext ctx=new DefaultCamelContext();
    RouteBuilder builder=new RouteBuilder(){
      @Override public void configure() throws Exception {
        transformer().scheme("other").withJava(MyTransformer.class);
        from("direct:input").log("test");
      }
    }
;
    ctx.addRoutes(builder);
    ctx.start();
    Transformer transformer=ctx.resolveTransformer("other");
    assertNotNull(transformer);
    assertEquals(MyTransformer.class,transformer.getClass());
  }
public static class MyTransformer extends Transformer {
    @Override public void transform(    Message message,    DataType from,    DataType to) throws Exception {
      message.getBody();
    }
  }
}
