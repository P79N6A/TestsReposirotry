public class ZookeeperDoubleRouteAndDoublePolicyTest extends ZooKeeperTestSupport {
  @Test public void routeDoublePoliciesAndTwoRoutes() throws Exception {
    client.createPersistent("/someapp","App node to contain policy election nodes...");
    client.createPersistent("/someapp/somepolicy","Policy node used by route policy to control routes...");
    client.createPersistent("/someapp/someotherpolicy","Policy node used by route policy to control routes...");
    context.addRoutes(new ZooKeeperPolicyEnforcedRoute());
    MockEndpoint mockedpolicy=getMockEndpoint("mock:controlled");
    mockedpolicy.setExpectedMessageCount(1);
    sendBody("direct:policy-controlled","This is a test");
    mockedpolicy.await(5,TimeUnit.SECONDS);
    mockedpolicy.assertIsSatisfied();
    MockEndpoint mockedpolicy1=getMockEndpoint("mock:controlled-1");
    mockedpolicy1.setExpectedMessageCount(1);
    sendBody("direct:policy-controlled-1","This is a test");
    mockedpolicy1.await(5,TimeUnit.SECONDS);
    mockedpolicy1.assertIsSatisfied();
  }
public static class ZooKeeperPolicyEnforcedRoute extends RouteBuilder {
    public void configure() throws Exception {
      ZooKeeperRoutePolicy policy=new ZooKeeperRoutePolicy("zookeeper:localhost:" + getServerPort() + "/someapp/somepolicy",1);
      from("direct:policy-controlled").routePolicy(policy).to("mock:controlled");
      ZooKeeperRoutePolicy policy2=new ZooKeeperRoutePolicy("zookeeper:localhost:" + getServerPort() + "/someapp/someotherpolicy",1);
      from("direct:policy-controlled-1").routePolicy(policy2).to("mock:controlled-1");
    }
  }
}
