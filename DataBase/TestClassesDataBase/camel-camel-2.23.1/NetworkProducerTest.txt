@RunWith(MockitoJUnitRunner.class) public class NetworkProducerTest extends NeutronProducerTestSupport {
  private Network dummyNetwork;
  @Mock private Network testOSnetwork;
  @Mock private NetworkService networkService;
  @Captor private ArgumentCaptor<Network> networkCaptor;
  @Captor private ArgumentCaptor<String> networkIdCaptor;
  @Before public void setUp(){
    when(networkingService.network()).thenReturn(networkService);
    producer=new NetworkProducer(endpoint,client);
    when(networkService.create(any())).thenReturn(testOSnetwork);
    when(networkService.get(anyString())).thenReturn(testOSnetwork);
    List<Network> getAllList=new ArrayList<>();
    getAllList.add(testOSnetwork);
    getAllList.add(testOSnetwork);
    doReturn(getAllList).when(networkService).list();
    dummyNetwork=createNetwork();
    when(testOSnetwork.getName()).thenReturn(dummyNetwork.getName());
    when(testOSnetwork.getTenantId()).thenReturn(dummyNetwork.getTenantId());
    when(testOSnetwork.getNetworkType()).thenReturn(dummyNetwork.getNetworkType());
    when(testOSnetwork.getId()).thenReturn(UUID.randomUUID().toString());
  }
  @Test public void createTest() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(OpenstackConstants.NAME,dummyNetwork.getName());
    msg.setHeader(NeutronConstants.NETWORK_TYPE,dummyNetwork.getNetworkType());
    msg.setHeader(NeutronConstants.TENANT_ID,dummyNetwork.getTenantId());
    producer.process(exchange);
    verify(networkService).create(networkCaptor.capture());
    assertEqualsNetwork(dummyNetwork,networkCaptor.getValue());
    assertNotNull(msg.getBody(Network.class).getId());
  }
  @Test public void getTest() throws Exception {
    final String networkID="myNetID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.GET);
    msg.setHeader(NeutronConstants.NETWORK_ID,networkID);
    producer.process(exchange);
    verify(networkService).get(networkIdCaptor.capture());
    assertEquals(networkID,networkIdCaptor.getValue());
    assertEqualsNetwork(testOSnetwork,msg.getBody(Network.class));
  }
  @Test public void getAllTest() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.GET_ALL);
    producer.process(exchange);
    final List<Network> result=msg.getBody(List.class);
    assertTrue(result.size() == 2);
    assertEquals(testOSnetwork,result.get(0));
  }
  @Test public void deleteTest() throws Exception {
    when(networkService.delete(anyString())).thenReturn(ActionResponse.actionSuccess());
    final String networkID="myNetID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.DELETE);
    msg.setHeader(OpenstackConstants.ID,networkID);
    producer.process(exchange);
    verify(networkService).delete(networkIdCaptor.capture());
    assertEquals(networkID,networkIdCaptor.getValue());
    assertFalse(msg.isFault());
    final String failureMessage="fail";
    when(networkService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failureMessage,404));
    producer.process(exchange);
    assertTrue(msg.isFault());
    assertTrue(msg.getBody(String.class).contains(failureMessage));
  }
  private Network createNetwork(){
    return Builders.network().name("name").tenantId("tenantID").networkType(NetworkType.LOCAL).build();
  }
  private void assertEqualsNetwork(  Network old,  Network newNetwork){
    assertEquals(old.getName(),newNetwork.getName());
    assertEquals(old.getTenantId(),newNetwork.getTenantId());
    assertEquals(old.getNetworkType(),newNetwork.getNetworkType());
  }
}
