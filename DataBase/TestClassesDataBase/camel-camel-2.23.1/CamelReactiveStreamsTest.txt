public class CamelReactiveStreamsTest {
  @Test public void testDefaultService() throws Exception {
    DefaultCamelContext context=new DefaultCamelContext();
    try {
      context.start();
      CamelReactiveStreamsService service1=CamelReactiveStreams.get(context);
      Assert.assertTrue(service1 instanceof DefaultCamelReactiveStreamsService);
    }
  finally {
      context.stop();
    }
  }
  @Test public void testSameDefaultServiceReturned() throws Exception {
    DefaultCamelContext context=new DefaultCamelContext();
    try {
      context.start();
      CamelReactiveStreamsService service1=CamelReactiveStreams.get(context);
      CamelReactiveStreamsService service2=CamelReactiveStreams.get(context);
      Assert.assertTrue(service1 instanceof DefaultCamelReactiveStreamsService);
      Assert.assertEquals(service1,service2);
    }
  finally {
      context.stop();
    }
  }
  @Test public void testSameServiceReturnedFromRegistry() throws Exception {
    ReactiveStreamsComponent component=new ReactiveStreamsComponent();
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("dummy",new ReactiveStreamsTestService("from-registry"));
    DefaultCamelContext context=new DefaultCamelContext(registry);
    context.addComponent(ReactiveStreamsConstants.SCHEME,component);
    try {
      context.start();
      CamelReactiveStreamsService service1=CamelReactiveStreams.get(context);
      CamelReactiveStreamsService service2=CamelReactiveStreams.get(context);
      Assert.assertEquals(service1,service2);
      Assert.assertTrue(service1 instanceof ReactiveStreamsTestService);
      Assert.assertEquals("from-registry",service1.getId());
    }
  finally {
      context.stop();
    }
  }
  @Test public void testNamedServiceResolvedUsingFactory() throws Exception {
    ReactiveStreamsComponent component=new ReactiveStreamsComponent();
    component.setServiceType("test-service");
    DefaultCamelContext context=new DefaultCamelContext();
    context.addComponent(ReactiveStreamsConstants.SCHEME,component);
    try {
      context.start();
      CamelReactiveStreamsService service1=CamelReactiveStreams.get(context);
      CamelReactiveStreamsService service2=CamelReactiveStreams.get(context);
      Assert.assertEquals(service1,service2);
      Assert.assertTrue(service1 instanceof ReactiveStreamsTestService);
      Assert.assertEquals("test-service",service1.getId());
    }
  finally {
      context.stop();
    }
  }
}
