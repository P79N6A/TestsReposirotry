public class HttpSendDynamicAwareTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/moes",new DrinkValidationHandler("GET",null,null,"drink")).registerHandler("/joes",new DrinkValidationHandler("GET",null,null,"drink")).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:moes").toD("http4://localhost:" + localServer.getLocalPort() + "/moes?throwExceptionOnFailure=false&drink=${header.drink}");
        from("direct:joes").toD("http4://localhost:" + localServer.getLocalPort() + "/joes?throwExceptionOnFailure=false&drink=${header.drink}");
      }
    }
;
  }
  @Test public void testDynamicAware() throws Exception {
    String out=fluentTemplate.to("direct:moes").withHeader("drink","beer").request(String.class);
    assertEquals("Drinking beer",out);
    out=fluentTemplate.to("direct:joes").withHeader("drink","wine").request(String.class);
    assertEquals("Drinking wine",out);
    boolean found=context.getEndpointMap().containsKey("http4://localhost:" + localServer.getLocalPort() + "?throwExceptionOnFailure=false");
    assertTrue("Should find static uri",found);
    assertEquals(3,context.getEndpointMap().size());
  }
}
