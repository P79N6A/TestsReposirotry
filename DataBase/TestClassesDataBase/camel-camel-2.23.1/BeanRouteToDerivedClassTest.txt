/** 
 * @version 
 */
public class BeanRouteToDerivedClassTest extends ContextTestSupport {
  private DerivedClass derived=new DerivedClass();
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testDerivedClassCalled() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:derived?method=process");
      }
    }
);
    context.start();
    template.sendBody("direct:start","Hello World");
    assertEquals("Derived class should have been invoked","Hello World",derived.getAndClearBody());
  }
  @Test public void testDerivedClassCalledWithNoCustomProcessor() throws Exception {
    context.getTypeConverterRegistry().addTypeConverter(Processor.class,MyMessageListener.class,new MyMessageToProcessorConverter());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:derived?method=process");
        from("direct:other").to("bean:derived");
      }
    }
);
    context.start();
    Object out=template.requestBody("direct:start","Hello World");
    assertEquals("Derived class should have been invoked","Hello World",derived.getAndClearBody());
    assertEquals("Hello World",out.toString());
    out=template.requestBody("direct:other",new MyMessage("Hello World"));
    assertEquals("Derived class should NOT have been invoked",null,derived.getAndClearBody());
    assertEquals("Bye World",out.toString());
    out=template.requestBody("direct:other",new MyMessage("Hello Again"));
    assertEquals("Derived class should NOT have been invoked",null,derived.getAndClearBody());
    assertEquals("Bye World",out.toString());
  }
  @Test public void testDerivedClassCalledWithCustomProcessor() throws Exception {
    context.getTypeConverterRegistry().addTypeConverter(Processor.class,MyMessageListener.class,new MyMessageToProcessorConverter());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:derived?method=process");
        from("direct:other").to("bean:derived");
      }
    }
);
    context.start();
    Object out=template.requestBody("direct:start",new MyMessage("Hello World"));
    assertEquals("Derived class should have been invoked","Hello World",derived.getAndClearBody());
    assertEquals("Hello World",out.toString());
    out=template.requestBody("direct:other",new MyMessage("Hello World"));
    assertEquals("Derived class should NOT have been invoked",null,derived.getAndClearBody());
    assertEquals("Bye World",out.toString());
    out=template.requestBody("direct:other",new MyMessage("Hello Again"));
    assertEquals("Derived class should NOT have been invoked",null,derived.getAndClearBody());
    assertEquals("Bye World",out.toString());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("derived",derived);
    return jndi;
  }
}
