public class FileStateRepositoryTest {
  private final File repositoryStore=new File("target/file-state-repository.dat");
  @Before public void setUp() throws Exception {
    Files.deleteIfExists(repositoryStore.toPath());
  }
  @Test(expected=IllegalArgumentException.class) public void shouldPreventUsingDelimiterInKey() throws Exception {
    FileStateRepository repository=fileStateRepository(repositoryStore);
    repository.setState("=","value");
  }
  @Test(expected=IllegalArgumentException.class) public void shouldPreventUsingNewLineInKey() throws Exception {
    FileStateRepository repository=createRepository();
    repository.setState("\n","value");
  }
  @Test(expected=IllegalArgumentException.class) public void shouldPreventUsingNewLineInValue() throws Exception {
    FileStateRepository repository=createRepository();
    repository.setState("key","\n");
  }
  @Test public void shouldSaveState() throws Exception {
    FileStateRepository repository=createRepository();
    repository.setState("key","value");
    assertEquals("value",repository.getState("key"));
  }
  @Test public void shouldUpdateState() throws Exception {
    FileStateRepository repository=createRepository();
    repository.setState("key","value");
    repository.setState("key","value2");
    assertEquals("value2",repository.getState("key"));
  }
  @Test public void shouldSynchronizeInFile() throws Exception {
    FileStateRepository repository=createRepository();
    repository.setState("key1","value1");
    repository.setState("key2","value2");
    repository.setState("key3","value3");
    FileStateRepository newRepository=createRepository();
    assertEquals("value1",newRepository.getState("key1"));
    assertEquals("value2",newRepository.getState("key2"));
    assertEquals("value3",newRepository.getState("key3"));
  }
  @Test public void shouldPreventRepositoryFileFromGrowingInfinitely() throws Exception {
    FileStateRepository repository=createRepository();
    repository.setMaxFileStoreSize(100);
    for (int i=0; i < 10; i++) {
      repository.setState("key","xxxxx".replace('x',(char)('0' + i)));
    }
    long previousSize=repositoryStore.length();
    repository.setState("key","value");
    assertTrue(repositoryStore.length() < previousSize);
  }
  private FileStateRepository createRepository() throws Exception {
    FileStateRepository repository=fileStateRepository(repositoryStore);
    repository.start();
    return repository;
  }
}
