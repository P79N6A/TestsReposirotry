public class MimeMultipartAlternativeWithContentTypeTest extends CamelTestSupport {
  private String alternativeBody="hello world! (plain text)";
  private String htmlBody="<html><body><h1>Hello</h1>World</body></html>";
  private void sendMultipartEmail() throws Exception {
    Mailbox.clearAll();
    MailEndpoint endpoint=context.getEndpoint("smtp://sachin@mymailserver.com?password=secret&contentType=text/html; charset=UTF-8",MailEndpoint.class);
    endpoint.getConfiguration().setAlternativeBodyHeader(MailConstants.MAIL_ALTERNATIVE_BODY);
    Exchange exchange=endpoint.createExchange();
    Message in=exchange.getIn();
    in.setBody(htmlBody);
    in.setHeader(MAIL_ALTERNATIVE_BODY,alternativeBody);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header(MailConstants.MAIL_ALTERNATIVE_BODY).isNull();
    context.createProducerTemplate().send(endpoint,exchange);
  }
  private void verifyTheRecivedEmail(  String expectString) throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.assertIsSatisfied();
    Exchange out=mock.assertExchangeReceived(0);
    ByteArrayOutputStream baos=new ByteArrayOutputStream(((MailMessage)out.getIn()).getMessage().getSize());
    ((MailMessage)out.getIn()).getMessage().writeTo(baos);
    String dumpedMessage=baos.toString();
    assertTrue("There should have the " + expectString,dumpedMessage.indexOf(expectString) > 0);
    log.trace("multipart alternative: \n{}",dumpedMessage);
    assertEquals(alternativeBody,out.getIn().getBody(String.class));
    assertEquals("multipart body should have 2 parts",2,out.getIn().getBody(MimeMultipart.class).getCount());
  }
  @Test public void testMultipartEmailContentType() throws Exception {
    sendMultipartEmail();
    verifyTheRecivedEmail("Content-Type: text/plain; charset=UTF-8");
    verifyTheRecivedEmail("Content-Type: text/html; charset=UTF-8");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("pop3://sachin@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100&contentType=text/html; charset=UTF-8").to("mock:result");
      }
    }
;
  }
}
