public class DefaultHealthCheckRegistryTest {
  @Test public void testDefaultHealthCheckRegistry() throws Exception {
    HealthCheckRegistry registry=new DefaultHealthCheckRegistry();
    registry.register(new MyHealthCheck("G1","1"));
    registry.register(new MyHealthCheck("G1","1"));
    registry.register(new MyHealthCheck("G1","2"));
    registry.register(new MyHealthCheck("G2","3"));
    List<HealthCheck> checks=registry.stream().collect(Collectors.toList());
    Assert.assertEquals(3,checks.size());
    for (    HealthCheck check : checks) {
      HealthCheck.Result response=check.call();
      Assert.assertEquals(HealthCheck.State.UP,response.getState());
      Assert.assertFalse(response.getMessage().isPresent());
      Assert.assertFalse(response.getError().isPresent());
    }
  }
  @Test public void testDefaultHealthCheckRegistryWithRepositories() throws Exception {
    HealthCheckRegistry registry=new DefaultHealthCheckRegistry();
    registry.register(new MyHealthCheck("G1","1"));
    registry.register(new MyHealthCheck("G1","1"));
    registry.register(new MyHealthCheck("G1","2"));
    registry.register(new MyHealthCheck("G2","3"));
    registry.addRepository(() -> Stream.of(new MyHealthCheck("G1","1"),new MyHealthCheck("G1","4")));
    List<HealthCheck> checks=registry.stream().collect(Collectors.toList());
    Assert.assertEquals(4,checks.size());
    Assert.assertEquals(1,checks.stream().filter(h -> h.getId().equals("4")).count());
    Assert.assertEquals(3,checks.stream().filter(h -> h.getGroup().equals("G1")).count());
    for (    HealthCheck check : checks) {
      HealthCheck.Result response=check.call();
      Assert.assertEquals(HealthCheck.State.UP,response.getState());
      Assert.assertFalse(response.getMessage().isPresent());
      Assert.assertFalse(response.getError().isPresent());
    }
  }
private class MyHealthCheck extends AbstractHealthCheck {
    protected MyHealthCheck(    String group,    String id){
      super(group,id);
      getConfiguration().setEnabled(true);
    }
    @Override public void doCall(    HealthCheckResultBuilder builder,    Map<String,Object> options){
      builder.up();
    }
  }
}
