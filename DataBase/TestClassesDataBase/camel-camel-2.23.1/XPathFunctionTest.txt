/** 
 * @version 
 */
public class XPathFunctionTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  protected MockEndpoint end;
  @Test public void testCheckHeader() throws Exception {
    String body="<one/>";
    x.expectedBodiesReceived(body);
    expectsMessageCount(0,y,z);
    sendMessage("bar",body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testCheckBody() throws Exception {
    String body="<two/>";
    y.expectedBodiesReceived(body);
    expectsMessageCount(0,x,z);
    sendMessage("cheese",body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSetXpathProperty() throws Exception {
    String body="<soapenv:Body xmlns:ns=\"http://myNamesapce\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<ns:Addresses> <Address>address1</Address>" + " <Address>address2</Address> <Address>address3</Address>"+ " <Address>address4</Address> </ns:Addresses> </soapenv:Body>";
    end.reset();
    end.expectedMessageCount(1);
    template.sendBody("direct:setProperty",body);
    assertMockEndpointsSatisfied();
    Exchange exchange=end.getExchanges().get(0);
    NodeList nodeList=exchange.getProperty("Addresses",NodeList.class);
    assertNotNull("The node list should not be null",nodeList);
  }
  protected void sendMessage(  final Object headerValue,  final Object body) throws Exception {
    template.sendBodyAndHeader("direct:start",body,"foo",headerValue);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
    end=getMockEndpoint("mock:end");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").choice().when().xpath("in:header('foo') = 'bar'").to("mock:x").when().xpath("in:body() = '<two/>'").to("mock:y").otherwise().to("mock:z");
        from("direct:setProperty").setProperty("Addresses").xpath("//Address",NodeList.class).to("mock:end");
      }
    }
;
  }
}
