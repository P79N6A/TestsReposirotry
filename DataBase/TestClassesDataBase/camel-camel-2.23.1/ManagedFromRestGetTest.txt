public class ManagedFromRestGetTest extends ManagementTestSupport {
  @Override protected CamelContext createCamelContext() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("dummy-test",new DummyRestConsumerFactory());
    return new DefaultCamelContext(registry);
  }
  @Test public void testFromRestModel() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"");
    String xml=(String)mbeanServer.invoke(on,"dumpRestsAsXml",null,null);
    assertNotNull(xml);
    log.info(xml);
    assertTrue(xml.contains("<rests"));
    assertTrue(xml.contains("<rest path=\"/say/hello\">"));
    assertTrue(xml.contains("<rest path=\"/say/bye\">"));
    assertTrue(xml.contains("</rest>"));
    assertTrue(xml.contains("<get"));
    assertTrue(xml.contains("application/json"));
    assertTrue(xml.contains("<post"));
    assertTrue(xml.contains("application/json"));
    assertTrue(xml.contains("</rests>"));
    assertTrue(xml.contains("<param collectionFormat=\"multi\" dataType=\"string\" defaultValue=\"b\" " + "description=\"header param description2\" name=\"header_letter\" required=\"false\" type=\"query\">"));
    assertTrue(xml.contains("<param dataType=\"integer\" defaultValue=\"1\" " + "description=\"header param description1\" name=\"header_count\" required=\"true\" type=\"header\">"));
    assertTrue(xml.contains("<value>1</value>"));
    assertTrue(xml.contains("<value>a</value>"));
    assertTrue(xml.contains("<responseMessage code=\"300\" message=\"test msg\" responseModel=\"java.lang.Integer\"/>"));
    String xml2=(String)mbeanServer.invoke(on,"dumpRoutesAsXml",null,null);
    log.info(xml2);
    assertTrue(xml2.contains("rest=\"true\""));
    assertTrue(xml2.contains(" <to id=\"to1\" uri=\"direct:hello\"/>"));
    assertTrue(xml2.contains("<to id=\"to2\" uri=\"direct:bye\"/>"));
    assertTrue(xml2.contains("<to id=\"to3\" uri=\"mock:update\"/>"));
    assertEquals(3 + 2,context.getRouteDefinitions().size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().host("localhost");
        rest("/say/hello").get().to("direct:hello");
        rest("/say/bye").get().consumes("application/json").param().type(RestParamType.header).description("header param description1").dataType("integer").allowableValues(Arrays.asList("1","2","3","4")).defaultValue("1").name("header_count").required(true).endParam().param().type(RestParamType.query).description("header param description2").dataType("string").allowableValues(Arrays.asList("a","b","c","d")).defaultValue("b").collectionFormat(CollectionFormat.multi).name("header_letter").required(false).endParam().responseMessage().code(300).message("test msg").responseModel(Integer.class).endResponseMessage().to("direct:bye").post().to("mock:update");
        from("direct:hello").transform().constant("Hello World");
        from("direct:bye").transform().constant("Bye World");
      }
    }
;
  }
}
