/** 
 * Testing with async start listener
 */
public class AsyncStartStopListenerTest extends JmsTestSupport {
  @Test public void testAsyncStartConsumer() throws Exception {
    sendBodyAndAssert("sjms:queue:foo.start");
  }
  @Test public void testAsyncStartStopConsumer() throws Exception {
    sendBodyAndAssert("sjms:queue:foo.startstop");
  }
  @Test public void testAsyncStopConsumer() throws Exception {
    sendBodyAndAssert("sjms:queue:foo.stop");
  }
  @Test public void testAsyncStopProducer() throws Exception {
    sendBodyAndAssert("sjms:queue:foo?asyncStopListener=true");
  }
  @Test public void testAsyncStartProducer() throws Exception {
    sendBodyAndAssert("sjms:queue:foo?asyncStartListener=true");
  }
  @Test public void testAsyncStartStopProducer() throws Exception {
    sendBodyAndAssert("sjms:queue:foo?asyncStopListener=true&asyncStartListener=true");
  }
  private void sendBodyAndAssert(  final String uri) throws InterruptedException {
    String body1="Hello World";
    String body2="G'day World";
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(body1,body2);
    template.sendBody(uri,body1);
    template.sendBody(uri,body2);
    result.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("sjms:queue:foo.startstop?asyncStartListener=true&asyncStopListener=true").to("mock:result");
        from("sjms:queue:foo.start?asyncStartListener=true").to("mock:result");
        from("sjms:queue:foo.stop?asyncStopListener=true").to("mock:result");
        from("sjms:queue:foo").to("mock:result");
      }
    }
;
  }
}
