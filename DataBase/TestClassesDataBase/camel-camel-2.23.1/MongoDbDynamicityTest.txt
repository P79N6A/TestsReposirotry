public class MongoDbDynamicityTest extends AbstractMongoDbTest {
  @Test public void testInsertDynamicityDisabled(){
    assertEquals(0,testCollection.count());
    mongo.getDatabase("otherDB").drop();
    db.getCollection("otherCollection").drop();
    assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
    String body="{\"_id\": \"testInsertDynamicityDisabled\", \"a\" : \"1\"}";
    Map<String,Object> headers=new HashMap<>();
    headers.put(MongoDbConstants.DATABASE,"otherDB");
    headers.put(MongoDbConstants.COLLECTION,"otherCollection");
    template.requestBodyAndHeaders("direct:noDynamicity",body,headers);
    DBObject b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityDisabled")).first();
    assertNotNull("No record with 'testInsertDynamicityDisabled' _id",b);
    body="{\"_id\": \"testInsertDynamicityDisabledExplicitly\", \"a\" : \"1\"}";
    template.requestBodyAndHeaders("direct:noDynamicityExplicit",body,headers);
    b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityDisabledExplicitly")).first();
    assertNotNull("No record with 'testInsertDynamicityDisabledExplicitly' _id",b);
    assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  }
  @Test public void testInsertDynamicityEnabledDBOnly(){
    assertEquals(0,testCollection.count());
    mongo.getDatabase("otherDB").drop();
    db.getCollection("otherCollection").drop();
    assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
    String body="{\"_id\": \"testInsertDynamicityEnabledDBOnly\", \"a\" : \"1\"}";
    Map<String,Object> headers=new HashMap<>();
    headers.put(MongoDbConstants.DATABASE,"otherDB");
    template.requestBodyAndHeaders("direct:dynamicityEnabled",body,headers);
    MongoCollection<BasicDBObject> dynamicCollection=mongo.getDatabase("otherDB").getCollection(testCollection.getNamespace().getCollectionName(),BasicDBObject.class);
    DBObject b=dynamicCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBOnly")).first();
    assertNotNull("No record with 'testInsertDynamicityEnabledDBOnly' _id",b);
    b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBOnly")).first();
    assertNull("There is a record with 'testInsertDynamicityEnabledDBOnly' _id in the test collection",b);
    assertTrue("The otherDB database should exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  }
  @Test public void testInsertDynamicityEnabledCollectionOnly(){
    assertEquals(0,testCollection.count());
    mongo.getDatabase("otherDB").drop();
    db.getCollection("otherCollection").drop();
    assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
    String body="{\"_id\": \"testInsertDynamicityEnabledCollectionOnly\", \"a\" : \"1\"}";
    Map<String,Object> headers=new HashMap<>();
    headers.put(MongoDbConstants.COLLECTION,"otherCollection");
    template.requestBodyAndHeaders("direct:dynamicityEnabled",body,headers);
    MongoCollection<BasicDBObject> dynamicCollection=db.getCollection("otherCollection",BasicDBObject.class);
    DBObject b=dynamicCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledCollectionOnly")).first();
    assertNotNull("No record with 'testInsertDynamicityEnabledCollectionOnly' _id",b);
    b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBOnly")).first();
    assertNull("There is a record with 'testInsertDynamicityEnabledCollectionOnly' _id in the test collection",b);
    assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  }
  @Test public void testInsertDynamicityEnabledDBAndCollection(){
    assertEquals(0,testCollection.count());
    mongo.getDatabase("otherDB").drop();
    db.getCollection("otherCollection").drop();
    assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
    String body="{\"_id\": \"testInsertDynamicityEnabledDBAndCollection\", \"a\" : \"1\"}";
    Map<String,Object> headers=new HashMap<>();
    headers.put(MongoDbConstants.DATABASE,"otherDB");
    headers.put(MongoDbConstants.COLLECTION,"otherCollection");
    template.requestBodyAndHeaders("direct:dynamicityEnabled",body,headers);
    MongoCollection<BasicDBObject> dynamicCollection=mongo.getDatabase("otherDB").getCollection("otherCollection",BasicDBObject.class);
    DBObject b=dynamicCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBAndCollection")).first();
    assertNotNull("No record with 'testInsertDynamicityEnabledDBAndCollection' _id",b);
    b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBOnly")).first();
    assertNull("There is a record with 'testInsertDynamicityEnabledDBAndCollection' _id in the test collection",b);
    assertTrue("The otherDB database should exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:noDynamicity").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&writeConcern=SAFE");
        from("direct:noDynamicityExplicit").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=false&writeConcern=SAFE");
        from("direct:dynamicityEnabled").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=true&writeConcern=SAFE");
      }
    }
;
  }
}
