public class ThriftProducerSecurityTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(ThriftProducerSecurityTest.class);
  private static TServerSocket serverTransport;
  private static TServer server;
  @SuppressWarnings({"rawtypes"}) private static Calculator.Processor processor;
  private static final int THRIFT_TEST_PORT=AvailablePortFinder.getNextAvailable();
  private static final int THRIFT_TEST_NUM1=12;
  private static final int THRIFT_TEST_NUM2=13;
  private static final String TRUST_STORE_PATH="src/test/resources/certs/truststore.jks";
  private static final String KEY_STORE_PATH="src/test/resources/certs/keystore.jks";
  private static final String SECURITY_STORE_PASSWORD="camelinaction";
  private static final int THRIFT_CLIENT_TIMEOUT=2000;
  @BeforeClass @SuppressWarnings({"unchecked","rawtypes"}) public static void startThriftServer() throws Exception {
    processor=new Calculator.Processor(new CalculatorSyncServerImpl());
    TSSLTransportFactory.TSSLTransportParameters sslParams=new TSSLTransportFactory.TSSLTransportParameters();
    sslParams.setKeyStore(KEY_STORE_PATH,SECURITY_STORE_PASSWORD);
    serverTransport=TSSLTransportFactory.getServerSocket(THRIFT_TEST_PORT,THRIFT_CLIENT_TIMEOUT,InetAddress.getByName("localhost"),sslParams);
    TThreadPoolServer.Args args=new TThreadPoolServer.Args(serverTransport);
    args.processor(processor);
    server=new TThreadPoolServer(args);
    Runnable simple=new Runnable(){
      public void run(){
        LOG.info("Thrift secured server started on port: {}",THRIFT_TEST_PORT);
        server.serve();
      }
    }
;
    new Thread(simple).start();
  }
  @AfterClass public static void stopThriftServer() throws IOException {
    if (server != null) {
      server.stop();
      serverTransport.close();
      LOG.info("Thrift secured server stoped");
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    SSLContextParameters sslParameters=new SSLContextParameters();
    KeyStoreParameters keyStoreParams=new KeyStoreParameters();
    keyStoreParams.setResource(TRUST_STORE_PATH);
    keyStoreParams.setPassword(SECURITY_STORE_PASSWORD);
    TrustManagersParameters trustManagerParams=new TrustManagersParameters();
    trustManagerParams.setKeyStore(keyStoreParams);
    sslParameters.setTrustManagers(trustManagerParams);
    jndi.bind("sslParams",sslParameters);
    return jndi;
  }
  @Test @SuppressWarnings({"rawtypes","unchecked"}) public void testCalculateMethodInvocation() throws Exception {
    LOG.info("Thrift calculate method sync test start");
    List requestBody=new ArrayList();
    requestBody.add(1);
    requestBody.add(new Work(THRIFT_TEST_NUM1,THRIFT_TEST_NUM2,Operation.MULTIPLY));
    Object responseBody=template.requestBody("direct:thrift-secured-calculate",requestBody);
    assertNotNull(responseBody);
    assertTrue(responseBody instanceof Integer);
    assertEquals(THRIFT_TEST_NUM1 * THRIFT_TEST_NUM2,responseBody);
  }
  @Test @SuppressWarnings({"rawtypes","unchecked"}) public void testCalculateWithException() throws Exception {
    LOG.info("Thrift calculate method with business exception sync test start");
    List requestBody=new ArrayList();
    requestBody.add(1);
    requestBody.add(new Work(THRIFT_TEST_NUM1,0,Operation.DIVIDE));
    try {
      template.requestBody("direct:thrift-secured-calculate",requestBody);
      fail("Expect the exception here");
    }
 catch (    Exception ex) {
      assertTrue("Expect CamelExecutionException",ex instanceof CamelExecutionException);
      assertTrue("Get an InvalidOperation exception",ex.getCause() instanceof InvalidOperation);
    }
  }
  @Test public void testVoidMethodInvocation() throws Exception {
    LOG.info("Thrift method with empty parameters and void output sync test start");
    Object requestBody=null;
    Object responseBody=template.requestBody("direct:thrift-secured-ping",requestBody);
    assertNull(responseBody);
  }
  @Test public void testOneWayMethodInvocation() throws Exception {
    LOG.info("Thrift one-way method sync test start");
    Object requestBody=null;
    Object responseBody=template.requestBody("direct:thrift-secured-zip",requestBody);
    assertNull(responseBody);
  }
  @Test @SuppressWarnings({"rawtypes","unchecked"}) public void testAllTypesMethodInvocation() throws Exception {
    LOG.info("Thrift method with all possile types sync test start");
    List requestBody=new ArrayList();
    requestBody.add(true);
    requestBody.add((byte)THRIFT_TEST_NUM1);
    requestBody.add((short)THRIFT_TEST_NUM1);
    requestBody.add(THRIFT_TEST_NUM1);
    requestBody.add((long)THRIFT_TEST_NUM1);
    requestBody.add((double)THRIFT_TEST_NUM1);
    requestBody.add("empty");
    requestBody.add(ByteBuffer.allocate(10));
    requestBody.add(new Work(THRIFT_TEST_NUM1,THRIFT_TEST_NUM2,Operation.MULTIPLY));
    requestBody.add(new ArrayList<Integer>());
    requestBody.add(new HashSet<String>());
    requestBody.add(new HashMap<String,Long>());
    Object responseBody=template.requestBody("direct:thrift-secured-alltypes",requestBody);
    assertNotNull(responseBody);
    assertTrue(responseBody instanceof Integer);
    assertEquals(1,responseBody);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:thrift-secured-calculate").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?"+ "method=calculate&negotiationType=SSL&sslParameters=#sslParams&synchronous=true");
        from("direct:thrift-secured-add").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?"+ "method=add&negotiationType=SSL&sslParameters=#sslParams&synchronous=true");
        from("direct:thrift-secured-ping").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?"+ "method=ping&negotiationType=SSL&sslParameters=#sslParams&synchronous=true");
        from("direct:thrift-secured-zip").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?"+ "method=zip&negotiationType=SSL&sslParameters=#sslParams&synchronous=true");
        from("direct:thrift-secured-alltypes").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?"+ "method=alltypes&negotiationType=SSL&sslParameters=#sslParams&synchronous=true");
      }
    }
;
  }
}
