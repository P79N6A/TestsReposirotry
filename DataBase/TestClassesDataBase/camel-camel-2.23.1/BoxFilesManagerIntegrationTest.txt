/** 
 * Test class for  {@link BoxFilesManager}APIs.
 */
public class BoxFilesManagerIntegrationTest extends AbstractBoxTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BoxFilesManagerIntegrationTest.class);
  private static final String PATH_PREFIX=BoxApiCollection.getCollection().getApiName(BoxFilesManagerApiMethod.class).getName();
  private static final String CAMEL_TEST_FILE="/CamelTestFile.txt";
  private static final String CAMEL_TEST_FILE_NAME="CamelTestFile.txt";
  private static final String CAMEL_TEST_FILE_DESCRIPTION="CamelTestFile.txt description";
  private static final String CAMEL_TEST_COPY_FILE_NAME="CamelTestFile_Copy.txt";
  private static final String CAMEL_TEST_MOVE_FILE_NAME="CamelTestFile_Move.txt";
  private static final String CAMEL_TEST_RENAME_FILE_NAME="CamelTestFile_Rename.txt";
  private static final String CAMEL_TEST_UPLOAD_FILE_NAME="CamelTestFile_Upload.txt";
  @Test public void testCopyFile() throws Exception {
    com.box.sdk.BoxFile result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.fileId",testFile.getID());
      headers.put("CamelBox.destinationFolderId","0");
      headers.put("CamelBox.newName",CAMEL_TEST_COPY_FILE_NAME);
      result=requestBodyAndHeaders("direct://COPYFILE",null,headers);
      assertNotNull("copyFile result",result);
      assertEquals("copyFile name",CAMEL_TEST_COPY_FILE_NAME,result.getInfo().getName());
      LOG.debug("copyFile: " + result);
    }
  finally {
      if (result != null) {
        result.delete();
      }
    }
  }
  @Test public void testCreateFileMetadata() throws Exception {
    Metadata metadata=new Metadata();
    metadata.add("/foo","bar");
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.metadata",metadata);
    headers.put("CamelBox.typeName",null);
    final com.box.sdk.Metadata result=requestBodyAndHeaders("direct://CREATEFILEMETADATA",null,headers);
    assertNotNull("createFileMetadata result",result);
    assertEquals("createFileMetadata result","bar",result.get("/foo"));
    LOG.debug("createFileMetadata: " + result);
  }
  @Test public void testCreateFileSharedLink() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.access",BoxSharedLink.Access.DEFAULT);
    headers.put("CamelBox.unshareDate",null);
    headers.put("CamelBox.permissions",null);
    final com.box.sdk.BoxSharedLink result=requestBodyAndHeaders("direct://CREATEFILESHAREDLINK",null,headers);
    assertNotNull("createFileSharedLink result",result);
    LOG.debug("createFileSharedLink: " + result);
  }
  @Test public void testDeleteFile() throws Exception {
    requestBody("direct://DELETEFILE",testFile.getID());
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    Iterable<BoxItem.Info> it=rootFolder.search("^" + CAMEL_TEST_FILE + "$");
    int searchResults=sizeOfIterable(it);
    boolean exists=searchResults > 0 ? true : false;
    assertEquals("deleteFile exists",false,exists);
    LOG.debug("deleteFile: exists? " + exists);
  }
  @Test public void testDeleteFileMetadata() throws Exception {
    testFile.createMetadata(new Metadata());
    requestBody("direct://DELETEFILEMETADATA",testFile.getID());
    try {
      testFile.getMetadata();
    }
 catch (    BoxAPIException e) {
      if (e.getResponseCode() == 404) {
        return;
      }
    }
    fail("deleteFileMetadata metadata");
  }
  @Ignore @Test public void testDeleteFileVersion() throws Exception {
    testFile.uploadVersion(getClass().getResourceAsStream(CAMEL_TEST_FILE));
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.version",0);
    requestBodyAndHeaders("direct://DELETEFILEVERSION",null,headers);
    boolean onlyOneVersion=testFile.getVersions().size() == 1;
    assertTrue("deleteFileVersion version deleted",onlyOneVersion);
  }
  @Test public void testDownloadFile() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    headers.put("CamelBox.output",output);
    headers.put("CamelBox.rangeStart",null);
    headers.put("CamelBox.rangeEnd",null);
    headers.put("CamelBox.listener",null);
    final java.io.OutputStream result=requestBodyAndHeaders("direct://DOWNLOADFILE",null,headers);
    assertNotNull("downloadFile result",result);
    LOG.debug("downloadFile: " + result);
  }
  @Ignore @Test public void testDownloadPreviousFileVersion() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.version",0);
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    headers.put("CamelBox.output",output);
    headers.put("CamelBox.listener",null);
    final java.io.OutputStream result=requestBodyAndHeaders("direct://DOWNLOADPREVIOUSFILEVERSION",null,headers);
    assertNotNull("downloadPreviousFileVersion result",result);
    LOG.debug("downloadPreviousFileVersion: " + result);
  }
  @Test public void testGetDownloadURL() throws Exception {
    final java.net.URL result=requestBody("direct://GETDOWNLOADURL",testFile.getID());
    assertNotNull("getDownloadURL result",result);
    LOG.debug("getDownloadURL: " + result);
  }
  @Test public void testGetFileInfo() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.fields",null);
    final com.box.sdk.BoxFile.Info result=requestBodyAndHeaders("direct://GETFILEINFO",null,headers);
    assertNotNull("getFileInfo result",result);
    LOG.debug("getFileInfo: " + result);
  }
  @Test public void testGetFileMetadata() throws Exception {
    testFile.createMetadata(new Metadata());
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.typeName",null);
    final com.box.sdk.Metadata result=requestBodyAndHeaders("direct://GETFILEMETADATA",null,headers);
    assertNotNull("getFileMetadata result",result);
    LOG.debug("getFileMetadata: " + result);
  }
  @Test public void testGetFilePreviewLink() throws Exception {
    final java.net.URL result=requestBody("direct://GETFILEPREVIEWLINK",testFile.getID());
    assertNotNull("getFilePreviewLink result",result);
    LOG.debug("getFilePreviewLink: " + result);
  }
  @Test public void testGetFileThumbnail() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.fileType",ThumbnailFileType.JPG);
    headers.put("CamelBox.minWidth",32);
    headers.put("CamelBox.minHeight",32);
    headers.put("CamelBox.maxWidth",32);
    headers.put("CamelBox.maxHeight",32);
    final byte[] result=requestBodyAndHeaders("direct://GETFILETHUMBNAIL",null,headers);
    assertNotNull("getFileThumbnail result",result);
    LOG.debug("getFileThumbnail: " + result);
  }
  @Test public void testGetFileVersions() throws Exception {
    @SuppressWarnings("rawtypes") final java.util.Collection result=requestBody("direct://GETFILEVERSIONS",testFile.getID());
    assertNotNull("getFileVersions result",result);
    LOG.debug("getFileVersions: " + result);
  }
  @Test public void testMoveFile() throws Exception {
    com.box.sdk.BoxFile result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.fileId",testFile.getID());
      headers.put("CamelBox.destinationFolderId","0");
      headers.put("CamelBox.newName",CAMEL_TEST_MOVE_FILE_NAME);
      result=requestBodyAndHeaders("direct://MOVEFILE",null,headers);
      assertNotNull("moveFile result",result);
      assertEquals("moveFile name",CAMEL_TEST_MOVE_FILE_NAME,result.getInfo().getName());
      LOG.debug("moveFile: " + result);
    }
  finally {
      if (result != null) {
        result.delete();
      }
    }
  }
  @Ignore @Test public void testPromoteFileVersion() throws Exception {
    testFile.uploadVersion(getClass().getResourceAsStream(CAMEL_TEST_FILE));
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.version",1);
    final com.box.sdk.BoxFileVersion result=requestBodyAndHeaders("direct://PROMOTEFILEVERSION",null,headers);
    assertNotNull("promoteFileVersion result",result);
    LOG.debug("promoteFileVersion: " + result);
  }
  @Test public void testRenameFile() throws Exception {
    com.box.sdk.BoxFile result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.fileId",testFile.getID());
      headers.put("CamelBox.newFileName",CAMEL_TEST_RENAME_FILE_NAME);
      result=requestBodyAndHeaders("direct://RENAMEFILE",null,headers);
      assertNotNull("renameFile result",result);
      assertEquals("renameFile name",CAMEL_TEST_RENAME_FILE_NAME,result.getInfo().getName());
      LOG.debug("renameFile: " + result);
    }
  finally {
      if (result != null) {
        result.delete();
      }
    }
  }
  @Test public void testUpdateFileInfo() throws Exception {
    BoxFile.Info info=testFile.getInfo();
    info.setDescription(CAMEL_TEST_FILE_DESCRIPTION);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.info",info);
    final com.box.sdk.BoxFile result=requestBodyAndHeaders("direct://UPDATEFILEINFO",null,headers);
    assertNotNull("updateFileInfo result",result);
    assertEquals("updateFileInfo info",CAMEL_TEST_FILE_DESCRIPTION,result.getInfo().getDescription());
    LOG.debug("updateFileInfo: " + result);
  }
  @Test public void testUpdateFileMetadata() throws Exception {
    Metadata metadata=new Metadata();
    metadata=testFile.createMetadata(metadata);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.metadata",metadata);
    final com.box.sdk.Metadata result=requestBodyAndHeaders("direct://UPDATEFILEMETADATA",null,headers);
    assertNotNull("updateFileMetadata result",result);
    LOG.debug("updateFileMetadata: " + result);
  }
  @Ignore @Test public void testUploadFile() throws Exception {
    com.box.sdk.BoxFile result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.parentFolderId","0");
      headers.put("CamelBox.content",getClass().getResourceAsStream(CAMEL_TEST_FILE));
      headers.put("CamelBox.fileName",CAMEL_TEST_UPLOAD_FILE_NAME);
      headers.put("CamelBox.created",null);
      headers.put("CamelBox.modified",null);
      headers.put("CamelBox.size",null);
      headers.put("CamelBox.listener",null);
      result=requestBodyAndHeaders("direct://UPLOADFILE",null,headers);
      assertNotNull("uploadFile result",result);
      LOG.debug("uploadFile: " + result);
    }
  finally {
      if (result != null) {
        try {
          result.delete();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  @Test public void testUploadNewFileVersion() throws Exception {
    com.box.sdk.BoxFile result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.fileId",testFile.getID());
      headers.put("CamelBox.fileContent",getClass().getResourceAsStream(CAMEL_TEST_FILE));
      headers.put("CamelBox.modified",null);
      headers.put("CamelBox.fileSize",null);
      headers.put("CamelBox.listener",null);
      result=requestBodyAndHeaders("direct://UPLOADNEWFILEVERSION",null,headers);
      assertNotNull("uploadNewFileVersion result",result);
      LOG.debug("uploadNewFileVersion: " + result);
    }
  finally {
      if (result != null) {
        try {
          result.delete();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://COPYFILE").to("box://" + PATH_PREFIX + "/copyFile");
        from("direct://CREATEFILEMETADATA").to("box://" + PATH_PREFIX + "/createFileMetadata");
        from("direct://CREATEFILESHAREDLINK").to("box://" + PATH_PREFIX + "/createFileSharedLink");
        from("direct://DELETEFILE").to("box://" + PATH_PREFIX + "/deleteFile?inBody=fileId");
        from("direct://DELETEFILEMETADATA").to("box://" + PATH_PREFIX + "/deleteFileMetadata?inBody=fileId");
        from("direct://DELETEFILEVERSION").to("box://" + PATH_PREFIX + "/deleteFileVersion");
        from("direct://DOWNLOADFILE").to("box://" + PATH_PREFIX + "/downloadFile");
        from("direct://DOWNLOADPREVIOUSFILEVERSION").to("box://" + PATH_PREFIX + "/downloadPreviousFileVersion");
        from("direct://GETDOWNLOADURL").to("box://" + PATH_PREFIX + "/getDownloadURL?inBody=fileId");
        from("direct://GETFILEINFO").to("box://" + PATH_PREFIX + "/getFileInfo");
        from("direct://GETFILEMETADATA").to("box://" + PATH_PREFIX + "/getFileMetadata");
        from("direct://GETFILEPREVIEWLINK").to("box://" + PATH_PREFIX + "/getFilePreviewLink?inBody=fileId");
        from("direct://GETFILETHUMBNAIL").to("box://" + PATH_PREFIX + "/getFileThumbnail");
        from("direct://GETFILEVERSIONS").to("box://" + PATH_PREFIX + "/getFileVersions?inBody=fileId");
        from("direct://MOVEFILE").to("box://" + PATH_PREFIX + "/moveFile");
        from("direct://PROMOTEFILEVERSION").to("box://" + PATH_PREFIX + "/promoteFileVersion");
        from("direct://RENAMEFILE").to("box://" + PATH_PREFIX + "/renameFile");
        from("direct://UPDATEFILEINFO").to("box://" + PATH_PREFIX + "/updateFileInfo");
        from("direct://UPDATEFILEMETADATA").to("box://" + PATH_PREFIX + "/updateFileMetadata");
        from("direct://UPLOADFILE").to("box://" + PATH_PREFIX + "/uploadFile");
        from("direct://UPLOADNEWFILEVERSION").to("box://" + PATH_PREFIX + "/uploadNewFileVersion");
      }
    }
;
  }
  @Before public void setupTest() throws Exception {
    createTestFile();
  }
  @After public void teardownTest(){
    deleteTestFile();
  }
  public BoxAPIConnection getConnection(){
    BoxEndpoint endpoint=(BoxEndpoint)context().getEndpoint("box://" + PATH_PREFIX + "/copyFile");
    return endpoint.getBoxConnection();
  }
  private void createTestFile() throws FileNotFoundException {
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    InputStream stream=getClass().getResourceAsStream(CAMEL_TEST_FILE);
    testFile=rootFolder.uploadFile(stream,CAMEL_TEST_FILE_NAME).getResource();
  }
  private int sizeOfIterable(  Iterable<?> it){
    if (it instanceof Collection) {
      return ((Collection<?>)it).size();
    }
 else {
      int i=0;
      for (      @SuppressWarnings("unused") Object obj : it) {
        i++;
      }
      return i;
    }
  }
}
