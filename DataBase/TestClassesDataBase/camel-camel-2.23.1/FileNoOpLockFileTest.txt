/** 
 * Unit test to verify that the noop file strategy usage of lock files.
 */
public class FileNoOpLockFileTest extends ContextTestSupport {
  @Override @After public void tearDown() throws Exception {
    deleteDirectory("target/reports");
    super.tearDown();
  }
  @Test public void testLocked() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:report");
    mock.expectedBodiesReceived("Hello Locked");
    template.sendBodyAndHeader("file:target/reports/locked","Hello Locked",Exchange.FILE_NAME,"report.txt");
    mock.assertIsSatisfied();
    await().atMost(1,TimeUnit.SECONDS).until(() -> existsLockFile(false));
    checkLockFile(false);
  }
  @Test public void testNotLocked() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:report");
    mock.expectedBodiesReceived("Hello Not Locked");
    template.sendBodyAndHeader("file:target/reports/notlocked","Hello Not Locked",Exchange.FILE_NAME,"report.txt");
    mock.assertIsSatisfied();
    await().atMost(1,TimeUnit.SECONDS).until(() -> existsLockFile(false));
    checkLockFile(false);
  }
  private static boolean existsLockFile(  boolean expected){
    String filename="target/reports/";
    filename+=expected ? "locked/" : "notlocked/";
    filename+="report.txt" + FileComponent.DEFAULT_LOCK_FILE_POSTFIX;
    File file=new File(filename);
    return expected == file.exists();
  }
  private static void checkLockFile(  boolean expected){
    String filename="target/reports/";
    filename+=expected ? "locked/" : "notlocked/";
    filename+="report.txt" + FileComponent.DEFAULT_LOCK_FILE_POSTFIX;
    File file=new File(filename);
    assertEquals("Lock file should " + (expected ? "exists" : "not exists"),expected,file.exists());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/reports/locked/?initialDelay=0&delay=10&noop=true&readLock=markerFile").process(new MyNoopProcessor()).to("mock:report");
        from("file://target/reports/notlocked/?initialDelay=0&delay=10&noop=true&readLock=none").process(new MyNoopProcessor()).to("mock:report");
      }
    }
;
  }
private static class MyNoopProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      boolean locked="Hello Locked".equals(body);
      checkLockFile(locked);
    }
  }
}
