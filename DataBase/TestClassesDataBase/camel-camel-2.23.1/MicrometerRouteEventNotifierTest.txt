/** 
 * @author Christian Ohr
 */
public class MicrometerRouteEventNotifierTest extends AbstractMicrometerEventNotifierTest {
  private static final String ROUTE_ID="test";
  @Override protected AbstractMicrometerEventNotifier<?> getEventNotifier(){
    return new MicrometerRouteEventNotifier();
  }
  @Test public void testCamelRouteEvents() throws Exception {
    Gauge added=meterRegistry.find(DEFAULT_CAMEL_ROUTES_ADDED).gauge();
    Gauge running=meterRegistry.find(DEFAULT_CAMEL_ROUTES_RUNNING).gauge();
    assertEquals(0.0d,added.value(),0.0001d);
    assertEquals(0.0d,running.value(),0.0001d);
    context.addRoutes(new TestRoute());
    assertEquals(1.0d,added.value(),0.0001d);
    assertEquals(1.0d,running.value(),0.0001d);
    context.stopRoute(ROUTE_ID);
    assertEquals(1.0d,added.value(),0.0001d);
    assertEquals(0.0d,running.value(),0.0001d);
    context.removeRoute(ROUTE_ID);
    assertEquals(0.0d,added.value(),0.0001d);
    assertEquals(0.0d,running.value(),0.0001d);
  }
private class TestRoute extends RouteBuilder {
    @Override public void configure() throws Exception {
      from("direct:in").routeId(ROUTE_ID).to("mock:out");
    }
  }
}
