public class JettyStreamCacheIssueTest extends BaseJettyTest {
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getStreamCachingStrategy().setSpoolThreshold(5000);
    context.setStreamCaching(true);
    return context;
  }
  @Test public void testStreamCache() throws Exception {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < 10000; i++) {
      sb.append("0123456789");
    }
    String input=sb.toString();
    String out=template.requestBody("direct:input",input,String.class);
    assertEquals(input,out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:input").to("jetty:http://localhost:" + getPort() + "/input");
        from("jetty:http://localhost:" + getPort() + "/input").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            Assert.assertFalse(exchange.hasOut());
          }
        }
);
      }
    }
;
  }
}
