public class NettyHttpBridgeEncodedPathTest extends BaseNettyTest {
  private int port1;
  private int port2;
  private int port3;
  private int port4;
  @Test public void testEncodedQuery() throws Exception {
    String response=template.requestBody("http://localhost:" + port2 + "/nettyTestRouteA?param1=%2B447777111222",null,String.class);
    assertEquals("Get a wrong response","param1=+447777111222",response);
  }
  @Test public void testEncodedPath() throws Exception {
    String path=URLEncoder.encode(" :/?#[]@!$","UTF-8") + "/" + URLEncoder.encode("&'()+,;=","UTF-8");
    MockEndpoint mock=getMockEndpoint("mock:encodedPath");
    mock.message(0).header(Exchange.HTTP_PATH).isEqualTo("/" + path);
    mock.message(0).header(Exchange.HTTP_QUERY).isNull();
    mock.message(0).header(Exchange.HTTP_RAW_QUERY).isNull();
    HttpClient httpClient=new HttpClient();
    GetMethod httpGet=new GetMethod("http://localhost:" + port4 + "/nettyTestRouteC/"+ path);
    int status=httpClient.executeMethod(httpGet);
    assertEquals("Get a wrong response status",200,status);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        port1=getPort();
        port2=getNextPort();
        port3=getNextPort();
        port4=getNextPort();
        errorHandler(noErrorHandler());
        Processor serviceProc=new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Object s=exchange.getIn().getHeader("param1");
            assertTrue(s.equals(" 447777111222") || s.equals("+447777111222") || s.equals("%2B447777111222"));
            exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_QUERY));
          }
        }
;
        from("netty4-http:http://localhost:" + port2 + "/nettyTestRouteA?matchOnUriPrefix=true").log("Using NettyTestRouteA route: CamelHttpPath=[${header.CamelHttpPath}], CamelHttpUri=[${header.CamelHttpUri}]").to("netty4-http:http://localhost:" + port1 + "/nettyTestRouteB?throwExceptionOnFailure=false&bridgeEndpoint=true");
        from("netty4-http:http://localhost:" + port1 + "/nettyTestRouteB?matchOnUriPrefix=true").log("Using NettyTestRouteB route: CamelHttpPath=[${header.CamelHttpPath}], CamelHttpUri=[${header.CamelHttpUri}]").process(serviceProc);
        from("netty4-http:http://localhost:" + port4 + "/nettyTestRouteC?matchOnUriPrefix=true").log("Using NettyTestRouteC route: CamelHttpPath=[${header.CamelHttpPath}], CamelHttpUri=[${header.CamelHttpUri}]").to("netty4-http:http://localhost:" + port3 + "/nettyTestRouteD?throwExceptionOnFailure=false&bridgeEndpoint=true");
        from("netty4-http:http://localhost:" + port3 + "/nettyTestRouteD?matchOnUriPrefix=true").log("Using NettyTestRouteD route: CamelHttpPath=[${header.CamelHttpPath}], CamelHttpUri=[${header.CamelHttpUri}]").to("mock:encodedPath");
      }
    }
;
  }
}
