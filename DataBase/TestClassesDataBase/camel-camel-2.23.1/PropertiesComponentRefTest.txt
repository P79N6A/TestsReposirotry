/** 
 * @version 
 */
public class PropertiesComponentRefTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testPropertiesComponent() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("{{start}}").to("properties:{{cool.result}}");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testPropertiesComponentLocationsOverride() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:{{bar.end}}?locations=ref:coolBar");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    Properties cool=new Properties();
    cool.put("cool.end","mock:end");
    cool.put("cool.result","mock:result");
    cool.put("start","direct:start");
    jndi.bind("myCoolProperties",cool);
    Properties bar=new Properties();
    bar.put("bar.end","mock:bar");
    bar.put("dude","direct:bar");
    jndi.bind("coolBar",bar);
    return jndi;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    PropertiesComponent pc=new PropertiesComponent();
    pc.setLocations(new String[]{"ref:myCoolProperties"});
    context.addComponent("properties",pc);
    return context;
  }
}
