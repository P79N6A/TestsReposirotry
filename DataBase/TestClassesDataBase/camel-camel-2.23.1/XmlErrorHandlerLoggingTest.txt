@RunWith(Arquillian.class) @ImportResource("imported-context.xml") public class XmlErrorHandlerLoggingTest {
  @ClassRule public static TestRule verifier=new LogEventVerifier(){
    @Override protected void verify(){
      assertThat("Log messages not found!",getEvents(),containsInRelativeOrder(logEvent().withLevel("INFO").withMessage(containsString("Camel CDI is starting Camel context [test]")),logEvent().withLevel("WARN").withLogger("error").withMessage(containsString("Exhausted after delivery attempt: 1 " + "caught: org.apache.camel.CamelException: failure message!")),logEvent().withLevel("INFO").withMessage(containsString("Camel CDI is stopping Camel context [test]"))));
    }
  }
;
  @Named @Produces private Exception failure=new CamelException("failure message!");
  @Inject @Uri("direct:inbound") private ProducerTemplate inbound;
  @Inject @Uri("mock:outbound") private MockEndpoint outbound;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addAsResource(Paths.get("src/test/resources/camel-context-errorHandler-logging.xml").toFile(),"imported-context.xml").addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test public void sendMessageToInbound() throws InterruptedException {
    outbound.expectedMessageCount(1);
    outbound.expectedBodiesReceived("Response to message");
    inbound.sendBody("message");
    assertIsSatisfied(2L,TimeUnit.SECONDS,outbound);
  }
  @Test public void sendExceptionToInbound(){
    try {
      inbound.sendBody("exception");
    }
 catch (    Exception exception) {
      assertThat("Exception is incorrect!",exception,is(instanceOf(CamelExecutionException.class)));
      assertThat("Exception cause is incorrect!",exception.getCause(),is(instanceOf(CamelException.class)));
      assertThat("Exception message is incorrect!",exception.getCause().getMessage(),is(equalTo("failure message!")));
      return;
    }
    fail("No exception thrown!");
  }
}
