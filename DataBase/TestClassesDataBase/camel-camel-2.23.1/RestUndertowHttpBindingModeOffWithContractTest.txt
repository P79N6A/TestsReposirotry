public class RestUndertowHttpBindingModeOffWithContractTest extends BaseUndertowTest {
  @Test public void testBindingModeOffWithContract() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(UserPojoEx.class);
    String body="{\"id\": 123, \"name\": \"Donald Duck\"}";
    Object answer=template.requestBodyAndHeader("undertow:http://localhost:{{port}}/users/new",body,Exchange.CONTENT_TYPE,"application/json");
    assertNotNull(answer);
    String answerString=new String((byte[])answer);
    assertTrue("Unexpected response: " + answerString,answerString.contains("\"active\":true"));
    assertMockEndpointsSatisfied();
    Object obj=mock.getReceivedExchanges().get(0).getIn().getBody();
    assertEquals(UserPojoEx.class,obj.getClass());
    UserPojoEx user=(UserPojoEx)obj;
    assertNotNull(user);
    assertEquals(123,user.getId());
    assertEquals("Donald Duck",user.getName());
    assertEquals(true,user.isActive());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("undertow").host("localhost").port(getPort()).bindingMode(RestBindingMode.off);
        JsonDataFormat jsondf=new JsonDataFormat();
        jsondf.setLibrary(JsonLibrary.Jackson);
        jsondf.setAllowUnmarshallType(true);
        jsondf.setUnmarshalType(UserPojoEx.class);
        transformer().fromType("json").toType(UserPojoEx.class).withDataFormat(jsondf);
        transformer().fromType(UserPojoEx.class).toType("json").withDataFormat(jsondf);
        rest("/users/").post("new").route().inputType(UserPojoEx.class).outputType("json").process(ex -> {
          ex.getIn().getBody(UserPojoEx.class).setActive(true);
        }
).to("mock:input");
      }
    }
;
  }
}
