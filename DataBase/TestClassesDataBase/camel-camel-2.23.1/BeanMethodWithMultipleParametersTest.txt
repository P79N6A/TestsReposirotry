/** 
 * @version 
 */
public class BeanMethodWithMultipleParametersTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanRouteTest.class);
  protected MyBean myBean=new MyBean();
  @Test public void testDummy() throws Exception {
  }
  @Test public void testSendMessageWithURI() throws Exception {
    Object[] args={"abc",5,"def"};
    template.sendBody("bean:myBean?method=myMethod&multiParameterArray=true",args);
    assertEquals("bean.foo","abc",myBean.foo);
    assertEquals("bean.bar",5,myBean.bar);
    assertEquals("bean.x","def",myBean.x);
  }
  @Test public void testSendMessageWithSettingHeader() throws Exception {
    Object[] args={"hello",123,"world"};
    template.sendBodyAndHeader("direct:in",args,Exchange.BEAN_MULTI_PARAMETER_ARRAY,true);
    assertEquals("bean.foo","hello",myBean.foo);
    assertEquals("bean.bar",123,myBean.bar);
    assertEquals("bean.x","world",myBean.x);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").to("bean:myBean?method=myMethod");
      }
    }
;
  }
public class MyBean {
    public String foo;
    public int bar;
    public String x;
    @Override public String toString(){
      return "MyBean[foo: " + foo + " bar: "+ bar+ " x: "+ x+ "]";
    }
    public void myMethod(    String foo,    int bar,    String x){
      this.foo=foo;
      this.bar=bar;
      this.x=x;
      LOG.info("myMethod() method called on " + this);
    }
    public void anotherMethod(    Object body){
      fail("Should not have called this method!");
    }
  }
}
