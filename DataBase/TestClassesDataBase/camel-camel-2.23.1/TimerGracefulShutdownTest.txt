/** 
 * @version 
 */
public class TimerGracefulShutdownTest extends ContextTestSupport {
  private MyExceptionHandler eh=new MyExceptionHandler();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("eh",eh);
    return jndi;
  }
  @Test public void testTimerShutdown() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    assertMockEndpointsSatisfied();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    assertFalse("Should not throw exception during graceful shutdown",eh.isError());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("timer:foo?period=10&delay=10&exceptionHandler=#eh").delay(10).to("log:time").to("mock:result");
      }
    }
;
  }
private static final class MyExceptionHandler implements ExceptionHandler {
    private volatile boolean error;
    @Override public void handleException(    Throwable exception){
      error=true;
    }
    @Override public void handleException(    String message,    Throwable exception){
      error=true;
    }
    @Override public void handleException(    String message,    Exchange exchange,    Throwable exception){
      error=true;
    }
    public boolean isError(){
      return error;
    }
  }
}
