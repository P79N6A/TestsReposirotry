public class OsgiDataFormatResolverTest extends CamelOsgiTestSupport {
  @Test public void testOsgiResolverFindDataFormatFallbackTest() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("allstar-dataformat",new SampleDataFormat(true));
    CamelContext camelContext=new DefaultCamelContext(registry);
    OsgiDataFormatResolver resolver=new OsgiDataFormatResolver(getBundleContext());
    DataFormat dataformat=resolver.resolveDataFormat("allstar",camelContext);
    assertNotNull("We should find the super dataformat",dataformat);
    assertTrue("We should get the super dataformat here",dataformat instanceof SampleDataFormat);
  }
  @Test public void testOsgiResolverFindLanguageDoubleFallbackTest() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("allstar",new SampleDataFormat(false));
    registry.put("allstar-dataformat",new SampleDataFormat(true));
    CamelContext camelContext=new DefaultCamelContext(registry);
    OsgiDataFormatResolver resolver=new OsgiDataFormatResolver(getBundleContext());
    DataFormat dataformat=resolver.resolveDataFormat("allstar",camelContext);
    assertNotNull("We should find the super dataformat",dataformat);
    assertTrue("We should get the super dataformat here",dataformat instanceof SampleDataFormat);
    assertFalse("We should NOT find the fallback dataformat",((SampleDataFormat)dataformat).isFallback());
  }
private static class SampleDataFormat implements DataFormat {
    private boolean fallback;
    SampleDataFormat(    boolean fallback){
      this.fallback=fallback;
    }
    @Override public void marshal(    Exchange exchange,    Object graph,    OutputStream stream) throws Exception {
      throw new UnsupportedOperationException("Should not be called");
    }
    @Override public Object unmarshal(    Exchange exchange,    InputStream stream) throws Exception {
      throw new UnsupportedOperationException("Should not be called");
    }
    public boolean isFallback(){
      return fallback;
    }
    public void setFallback(    boolean fallback){
      this.fallback=fallback;
    }
  }
}
