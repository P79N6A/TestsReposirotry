/** 
 * Concurrent producers test.
 * @version 
 */
public class FtpProducerConcurrentTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/concurrent?binary=false&password=admin";
  }
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files);
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    for (int i=0; i < files; i++) {
      getMockEndpoint("mock:result").expectedFileExists(FTP_ROOT_DIR + "/concurrent/" + i+ ".txt");
      final int index=i;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          sendFile("direct:start","Hello World",index + ".txt");
          return null;
        }
      }
);
    }
    assertMockEndpointsSatisfied();
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to(getFtpUrl(),"mock:result");
      }
    }
;
  }
}
