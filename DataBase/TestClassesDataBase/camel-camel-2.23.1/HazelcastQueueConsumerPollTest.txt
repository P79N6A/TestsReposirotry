public class HazelcastQueueConsumerPollTest extends HazelcastCamelTestSupport {
  @Mock private IQueue<String> queue;
  @Override protected void trainHazelcastInstance(  HazelcastInstance hazelcastInstance){
    when(hazelcastInstance.<String>getQueue("foo")).thenReturn(queue);
  }
  @Override protected void verifyHazelcastInstance(  HazelcastInstance hazelcastInstance){
    verify(hazelcastInstance).getQueue("foo");
    try {
      verify(queue,atLeast(1)).poll(10000,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  @Test public void add() throws InterruptedException {
    when(queue.poll(10000,TimeUnit.MILLISECONDS)).thenReturn("foo");
    MockEndpoint out=getMockEndpoint("mock:result");
    out.expectedMessageCount(1);
    assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS);
    this.checkHeadersAbsence(out.getExchanges().get(0).getIn().getHeaders(),HazelcastConstants.ADDED);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(String.format("hazelcast-%sfoo?queueConsumerMode=Poll",HazelcastConstants.QUEUE_PREFIX)).to("mock:result");
      }
    }
;
  }
  private void checkHeadersAbsence(  Map<String,Object> headers,  String action){
    assertNotEquals(action,headers.get(HazelcastConstants.LISTENER_ACTION));
    assertNotEquals(HazelcastConstants.CACHE_LISTENER,headers.get(HazelcastConstants.LISTENER_TYPE));
    assertNull(headers.get(HazelcastConstants.LISTENER_TIME));
  }
}
