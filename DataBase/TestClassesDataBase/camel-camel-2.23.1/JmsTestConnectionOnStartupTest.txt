/** 
 * @version 
 */
public class JmsTestConnectionOnStartupTest extends CamelTestSupport {
  @Test public void testConnectionOnStartupConsumerTest() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo?testConnectionOnStartup=true").to("mock:foo");
      }
    }
);
    try {
      context.start();
      fail("Should have thrown an exception");
    }
 catch (    FailedToCreateConsumerException e) {
      assertEquals("Failed to create Consumer for endpoint: activemq://queue:foo?testConnectionOnStartup=true. " + "Reason: Cannot get JMS Connection on startup for destination foo",e.getMessage());
    }
  }
  @Test public void testConnectionOnStartupProducerTest() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("activemq:queue:foo?testConnectionOnStartup=true");
      }
    }
);
    try {
      context.start();
      fail("Should have thrown an exception");
    }
 catch (    FailedToCreateProducerException e) {
      assertTrue(e.getMessage().startsWith("Failed to create Producer for endpoint: activemq://queue:foo?testConnectionOnStartup=true."));
      assertTrue(e.getMessage().contains("java.net.ConnectException"));
    }
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=new ActiveMQConnectionFactory("tcp://localhost:61111");
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
