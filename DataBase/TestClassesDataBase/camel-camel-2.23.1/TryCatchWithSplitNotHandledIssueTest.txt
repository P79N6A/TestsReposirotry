/** 
 * @version 
 */
public class TryCatchWithSplitNotHandledIssueTest extends ContextTestSupport {
  @Test public void testSplitWithErrorIsNotHandled() throws Exception {
    MockEndpoint error=getMockEndpoint("mock:error");
    error.expectedBodiesReceived("James");
    error.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isNotNull();
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Hi Claus","Hi Willem");
    try {
      template.sendBody("direct:start","Claus@James@Willem");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertEquals("This is a dummy error James!",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("error",new GenerateError());
    return jndi;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @SuppressWarnings("deprecation") public void configure(){
        from("direct:start").split(body().tokenize("@")).doTry().to("bean:error").to("mock:result").doCatch(Exception.class).handled(false).to("mock:error").end();
      }
    }
;
  }
public static class GenerateError {
    public String dummyException(    String payload) throws Exception {
      if (payload.equals("James")) {
        throw new Exception("This is a dummy error James!");
      }
      return "Hi " + payload;
    }
  }
}
