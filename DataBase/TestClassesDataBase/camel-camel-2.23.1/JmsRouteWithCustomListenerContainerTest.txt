/** 
 * Unit test inspired by user forum
 * @version 
 */
public class JmsRouteWithCustomListenerContainerTest extends CamelTestSupport {
  protected String componentName="activemq";
  @Test public void testSendOrder() throws Exception {
    MockEndpoint inbox=getMockEndpoint("mock:inbox");
    inbox.expectedBodiesReceived("Camel in Action");
    MockEndpoint order=getMockEndpoint("mock:topic");
    order.expectedBodiesReceived("Camel in Action");
    Object out=template.requestBody("activemq:queue:inbox","Camel in Action");
    assertEquals("OK: Camel in Action",out);
    assertMockEndpointsSatisfied();
    assertEquals(ExchangePattern.InOut,inbox.getReceivedExchanges().get(0).getPattern());
    assertEquals(ExchangePattern.InOnly,order.getReceivedExchanges().get(0).getPattern());
    JmsEndpoint jmsEndpoint=getMandatoryEndpoint("activemq:queue:inbox?messageListenerContainerFactory=#myListenerContainerFactory",JmsEndpoint.class);
    assertIsInstanceOf(MyListenerContainerFactory.class,jmsEndpoint.getMessageListenerContainerFactory());
    assertEquals(ConsumerType.Custom,jmsEndpoint.getConfiguration().getConsumerType());
    assertIsInstanceOf(MyListenerContainer.class,jmsEndpoint.createMessageListenerContainer());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("orderService",new MyOrderServiceBean());
    jndi.bind("myListenerContainerFactory",new MyListenerContainerFactory());
    return jndi;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:inbox?messageListenerContainerFactory=#myListenerContainerFactory").to("mock:inbox").inOnly("activemq:topic:order").bean("orderService","handleOrder");
        from("activemq:topic:order").to("mock:topic");
      }
    }
;
  }
public static class MyListenerContainerFactory implements MessageListenerContainerFactory {
    @Override public AbstractMessageListenerContainer createMessageListenerContainer(    JmsEndpoint endpoint){
      return new MyListenerContainer();
    }
  }
public static class MyListenerContainer extends DefaultMessageListenerContainer {
  }
public static class MyOrderServiceBean {
    public String handleOrder(    String body){
      return "OK: " + body;
    }
  }
}
