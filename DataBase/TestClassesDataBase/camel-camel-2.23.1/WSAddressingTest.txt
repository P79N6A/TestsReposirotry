/** 
 * @version 
 */
@ContextConfiguration public class WSAddressingTest extends AbstractJUnit4SpringContextTests {
  protected static int port0=CXFTestSupport.getPort1();
  protected static int port1=CXFTestSupport.getPort2();
  protected static int port2=CXFTestSupport.getPort3();
  @Autowired protected CamelContext context;
  protected ProducerTemplate template;
  private Server serviceEndpoint;
  protected String getServerAddress(){
    return "http://localhost:" + port1 + "/"+ this.getClass().getSimpleName()+ "/SoapContext/SoapPort";
  }
  protected String getClientAddress(){
    return "http://localhost:" + port0 + "/"+ this.getClass().getSimpleName()+ "/SoapContext/SoapPort";
  }
  @Before public void setUp() throws Exception {
    template=context.createProducerTemplate();
    JaxWsServerFactoryBean svrBean=new JaxWsServerFactoryBean();
    svrBean.setAddress(getServerAddress());
    svrBean.setServiceClass(Greeter.class);
    svrBean.setServiceBean(new GreeterImpl());
    SpringBusFactory bf=new SpringBusFactory();
    URL cxfConfig=null;
    if (getCxfServerConfig() != null) {
      cxfConfig=ClassLoaderUtils.getResource(getCxfServerConfig(),this.getClass());
    }
    svrBean.setBus(bf.createBus(cxfConfig));
    serviceEndpoint=svrBean.create();
  }
  @After public void tearDown() throws Exception {
    if (serviceEndpoint != null) {
      serviceEndpoint.stop();
    }
  }
  @Test public void testWSAddressing() throws Exception {
    JaxWsProxyFactoryBean proxyFactory=new JaxWsProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(getClientAddress());
    clientBean.setServiceClass(Greeter.class);
    SpringBusFactory bf=new SpringBusFactory();
    URL cxfConfig=null;
    if (getCxfClientConfig() != null) {
      cxfConfig=ClassLoaderUtils.getResource(getCxfClientConfig(),this.getClass());
    }
    proxyFactory.setBus(bf.createBus(cxfConfig));
    Greeter client=(Greeter)proxyFactory.create();
    String result=client.greetMe("world!");
    assertEquals("Get a wrong response","Hello world!",result);
  }
  /** 
 * @return
 */
  protected String getCxfServerConfig(){
    return "server.xml";
  }
  /** 
 * @return
 */
  protected String getCxfClientConfig(){
    return "client.xml";
  }
public static class RemoveRequestOutHeaderProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      List<?> headerList=(List<?>)exchange.getIn().getHeader(Header.HEADER_LIST);
      assertNotNull("We should get the header list.",headerList);
      assertEquals("Get a wrong size of header list.",4,headerList.size());
      exchange.getIn().removeHeader(Header.HEADER_LIST);
    }
  }
}
