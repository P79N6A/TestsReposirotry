/** 
 * Unit test for testing possibility to modify exchange before redelivering specific per on exception
 */
public class DeadLetterChannelOnExceptionOnRedeliveryTest extends ContextTestSupport {
  static int counter;
  @Test public void testGlobalOnRedelivery() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World3");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRouteSpecificOnRedelivery() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.message(0).header("Timeout").isEqualTo(5000);
    template.sendBody("direct:io","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    counter=0;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IOException.class).maximumRedeliveries(3).redeliveryDelay(0).onRedelivery(new MyIORedeliverProcessor());
        errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(5).onRedelivery(new MyRedeliverProcessor()).redeliveryDelay(0L));
        from("direct:start").process(new ThrowExceptionProcessor()).to("mock:result");
        from("direct:io").process(new ThrowIOExceptionProcessor()).to("mock:result");
      }
    }
;
  }
public static class MyRedeliverProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      int count=exchange.getIn().getHeader("CamelRedeliveryCounter",Integer.class);
      exchange.getIn().setBody(body + count);
    }
  }
public static class MyIORedeliverProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader("Timeout",5000);
    }
  }
public static class ThrowExceptionProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      if (++counter <= 3) {
        throw new IllegalArgumentException("Forced by unit test");
      }
    }
  }
public static class ThrowIOExceptionProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      if (++counter <= 3) {
        throw new IOException("Cannot connect");
      }
    }
  }
}
