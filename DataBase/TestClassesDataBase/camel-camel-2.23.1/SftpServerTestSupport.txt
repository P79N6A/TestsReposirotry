/** 
 * @version 
 */
public class SftpServerTestSupport extends BaseServerTestSupport {
  protected static final String FTP_ROOT_DIR="target/res/home";
  protected SshServer sshd;
  protected boolean canTest;
  protected String oldUserHome;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory(FTP_ROOT_DIR);
    oldUserHome=System.getProperty("user.home");
    System.setProperty("user.home","target/user-home");
    String simulatedUserHome="target/user-home";
    String simulatedUserSsh="target/user-home/.ssh";
    deleteDirectory(simulatedUserHome);
    createDirectory(simulatedUserHome);
    createDirectory(simulatedUserSsh);
    FileUtils.copyInputStreamToFile(getClass().getClassLoader().getResourceAsStream("known_hosts"),new File(simulatedUserSsh + "/known_hosts"));
    super.setUp();
    setUpServer();
  }
  protected void setUpServer() throws Exception {
    canTest=true;
    try {
      sshd=SshServer.setUpDefaultServer();
      sshd.setPort(getPort());
      sshd.setKeyPairProvider(new FileKeyPairProvider(Paths.get("src/test/resources/hostkey.pem")));
      sshd.setSubsystemFactories(Collections.singletonList(new SftpSubsystemFactory()));
      sshd.setCommandFactory(new ScpCommandFactory());
      sshd.setPasswordAuthenticator((username,password,session) -> true);
      sshd.setPublickeyAuthenticator((username,password,session) -> true);
      sshd.start();
    }
 catch (    Exception e) {
      NoSuchAlgorithmException nsae=ObjectHelper.getException(NoSuchAlgorithmException.class,e);
      if (nsae != null) {
        canTest=false;
        String name=System.getProperty("os.name");
        String message=nsae.getMessage();
        log.warn("SunX509 is not avail on this platform [{}] Testing is skipped! Real cause: {}",name,message);
      }
 else {
        throw e;
      }
    }
  }
  @Override @After public void tearDown() throws Exception {
    if (oldUserHome != null) {
      System.setProperty("user.home",oldUserHome);
    }
 else {
      System.clearProperty("user.home");
    }
    super.tearDown();
    tearDownServer();
  }
  protected void tearDownServer(){
    if (sshd != null) {
      try {
        sshd.stop(true);
        sshd=null;
      }
 catch (      Exception e) {
      }
    }
  }
  protected boolean canTest(){
    return canTest;
  }
  protected void disconnectAllSessions() throws IOException {
    List<AbstractSession> sessions=sshd.getActiveSessions();
    for (    AbstractSession session : sessions) {
      session.disconnect(4,"dummy");
    }
  }
}
