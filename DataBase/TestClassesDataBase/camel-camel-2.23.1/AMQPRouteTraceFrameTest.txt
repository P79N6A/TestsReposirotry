public class AMQPRouteTraceFrameTest extends CamelTestSupport {
  static int amqpPort=AvailablePortFinder.getNextAvailable();
  static BrokerService broker;
  @EndpointInject(uri="mock:result") MockEndpoint resultEndpoint;
  String expectedBody="Hello there!";
  @BeforeClass public static void beforeClass() throws Exception {
    broker=new BrokerService();
    broker.setPersistent(false);
    broker.addConnector("amqp://0.0.0.0:" + amqpPort);
    broker.start();
    System.setProperty(AMQP_PORT,amqpPort + "");
  }
  @AfterClass public static void afterClass() throws Exception {
    broker.stop();
  }
  @Test public void testTraceFrame() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.message(0).header("cheese").isEqualTo(123);
    template.sendBodyAndHeader("amqp-customized:queue:ping",expectedBody,"cheese",123);
    resultEndpoint.assertIsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    JmsConnectionFactory connectionFactory=new JmsConnectionFactory("amqp://localhost:" + amqpPort + "?amqp.traceFrames=true");
    AMQPComponent amqp=amqpComponent("amqp://localhost:" + amqpPort);
    amqp.setConnectionFactory(connectionFactory);
    camelContext.addComponent("amqp-customized",amqp);
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("amqp-customized:queue:ping").to("log:routing").to("mock:result");
      }
    }
;
  }
}
