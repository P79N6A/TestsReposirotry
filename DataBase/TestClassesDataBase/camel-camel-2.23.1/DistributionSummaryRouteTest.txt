@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes={DistributionSummaryRouteTest.TestConfig.class},loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpoints public class DistributionSummaryRouteTest {
  @EndpointInject(uri="mock:out") private MockEndpoint endpoint;
  @Produce(uri="direct:in-1") private ProducerTemplate producer1;
  @Produce(uri="direct:in-2") private ProducerTemplate producer2;
  private MeterRegistry registry;
@Configuration public static class TestConfig extends SingleRouteCamelConfiguration {
    @Bean @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure(){
          from("direct:in-1").to("micrometer:summary:A?value=332491").to("mock:out");
          from("direct:in-2").to("micrometer:summary:${body}?value=${header.nextValue}").to("mock:out");
        }
      }
;
    }
    @Bean(name=METRICS_REGISTRY_NAME) public MeterRegistry getMetricRegistry(){
      return new SimpleMeterRegistry();
    }
  }
  @Before public void setup(){
    registry=endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRICS_REGISTRY_NAME,MeterRegistry.class);
  }
  @After public void tearDown(){
    endpoint.reset();
  }
  @Test public void testOverrideMetricsName() throws Exception {
    endpoint.expectedMessageCount(1);
    producer1.sendBodyAndHeader(new Object(),HEADER_METRIC_NAME,"B");
    assertEquals(1L,registry.find("B").summary().count());
    endpoint.assertIsSatisfied();
  }
  @Test public void testOverrideValue() throws Exception {
    endpoint.expectedMessageCount(1);
    producer1.sendBodyAndHeader(new Object(),HEADER_HISTOGRAM_VALUE,181D);
    DistributionSummary summary=registry.find("A").summary();
    assertEquals(1L,summary.count());
    HistogramSnapshot snapshot=summary.takeSnapshot();
    assertEquals(181.0D,snapshot.total(),0.01D);
    endpoint.assertIsSatisfied();
  }
  @Test public void testScriptEvaluationValue() throws Exception {
    endpoint.expectedMessageCount(1);
    producer2.sendBodyAndHeader("C","nextValue","181.0");
    DistributionSummary summary=registry.find("C").summary();
    assertEquals(1L,summary.count());
    HistogramSnapshot snapshot=summary.takeSnapshot();
    assertEquals(181.0D,snapshot.total(),0.01D);
    endpoint.assertIsSatisfied();
  }
}
