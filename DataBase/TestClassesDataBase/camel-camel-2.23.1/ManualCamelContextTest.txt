@RunWith(Arquillian.class) public class ManualCamelContextTest {
  @Inject @Uri("direct:start") private ProducerTemplate inbound;
  @Inject @Uri("mock:result") private MockEndpoint outbound;
  @Inject @Uri("direct:manual") private ProducerTemplate manual;
  @Inject @Uri("mock:manual") private MockEndpoint mock;
  @Inject @Manual private ManualCamelRoute builder;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(SimpleCamelRoute.class,ManualCamelRoute.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void verifyContext(  CamelContext context){
    assertThat("Number of routes is incorrect!",context.getRoutes().size(),is(equalTo(1)));
    assertThat("Configured route is incorrect!",context.getRouteStatus("simple"),is(equalTo(ServiceStatus.Started)));
  }
  @Test @InSequence(2) public void addManualRoute(  CamelContext context) throws Exception {
    context.addRoutes(builder);
    assertThat("Number of routes is incorrect!",context.getRoutes().size(),is(equalTo(2)));
    assertThat("Configured route is incorrect!",context.getRouteStatus("manual"),is(equalTo(ServiceStatus.Started)));
  }
  @Test @InSequence(3) public void sendMessageToInbound() throws InterruptedException {
    outbound.expectedMessageCount(1);
    outbound.expectedBodiesReceived("test");
    inbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,outbound);
  }
  @Test @InSequence(4) public void sendMessageToManual() throws InterruptedException {
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("manual");
    manual.sendBody("manual");
    assertIsSatisfied(2L,TimeUnit.SECONDS,mock);
  }
}
