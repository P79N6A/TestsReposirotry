public class YqlConfigurationValidatorTest {
  @Rule public final ExpectedException thrown=ExpectedException.none();
  @Test public void testValidQuery(){
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    yqlConfiguration.setQuery("select * from ...");
    yqlConfiguration.setFormat("json");
    yqlConfiguration.setCrossProduct("optimized");
    yqlConfiguration.setJsonCompat("new");
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
  @Test public void testMissingQuery(){
    thrown.expect(YqlException.class);
    thrown.expectMessage("<query> is not present or not valid!");
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
  @Test public void testJsonFormat(){
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    yqlConfiguration.setQuery("query");
    yqlConfiguration.setFormat("json");
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
  @Test public void testXmlFormat(){
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    yqlConfiguration.setQuery("query");
    yqlConfiguration.setFormat("xml");
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
  @Test public void testWrongFormat(){
    thrown.expect(YqlException.class);
    thrown.expectMessage("<format> is not valid!");
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    yqlConfiguration.setQuery("query");
    yqlConfiguration.setFormat("format");
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
  @Test public void testWrongCrossProduct(){
    thrown.expect(YqlException.class);
    thrown.expectMessage("<crossProduct> is not valid!");
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    yqlConfiguration.setQuery("query");
    yqlConfiguration.setFormat("xml");
    yqlConfiguration.setCrossProduct("optimizedddd");
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
  @Test public void testWrongJsonCompat(){
    thrown.expect(YqlException.class);
    thrown.expectMessage("<jsonCompat> is not valid!");
    final YqlConfiguration yqlConfiguration=new YqlConfiguration();
    yqlConfiguration.setQuery("query");
    yqlConfiguration.setFormat("xml");
    yqlConfiguration.setCrossProduct("optimized");
    yqlConfiguration.setJsonCompat("neww");
    YqlConfigurationValidator.validateProperties(yqlConfiguration);
  }
}
