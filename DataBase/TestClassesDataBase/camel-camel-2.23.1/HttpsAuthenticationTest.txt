/** 
 * @version 
 */
public class HttpsAuthenticationTest extends BaseHttpsTest {
  private String user="camel";
  private String password="password";
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/",new AuthenticationValidationHandler("GET",null,null,getExpectedContent(),user,password)).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("x509HostnameVerifier",new NoopHostnameVerifier());
    return registry;
  }
  @Test public void httpsGetWithAuthentication() throws Exception {
    Exchange exchange=template.request("https4://127.0.0.1:" + localServer.getLocalPort() + "/?authUsername=camel&authPassword=password&x509HostnameVerifier=#x509HostnameVerifier",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchange(exchange);
  }
  @Override protected HttpProcessor getBasicHttpProcessor(){
    List<HttpRequestInterceptor> requestInterceptors=new ArrayList<>();
    requestInterceptors.add(new RequestBasicAuth());
    List<HttpResponseInterceptor> responseInterceptors=new ArrayList<>();
    responseInterceptors.add(new ResponseContent());
    responseInterceptors.add(new ResponseBasicUnauthorized());
    ImmutableHttpProcessor httpproc=new ImmutableHttpProcessor(requestInterceptors,responseInterceptors);
    return httpproc;
  }
}
