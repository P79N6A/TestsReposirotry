public class FtpProducerAllowNullBodyFileAlreadyExistTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/allow?password=admin";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    template.sendBodyAndHeader(getFtpUrl(),"Hello world",Exchange.FILE_NAME,"hello.txt");
  }
  @Test public void testFileExistAppendAllowNullBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:appendTypeAppendResult");
    mock.expectedMessageCount(1);
    mock.expectedFileExists(FTP_ROOT_DIR + "/allow/hello.txt","Hello world");
    template.sendBody("direct:appendTypeAppend",null);
    assertMockEndpointsSatisfied();
  }
  @Test public void testFileExistOverrideAllowNullBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:appendTypeOverrideResult");
    mock.expectedMessageCount(1);
    mock.expectedFileExists(FTP_ROOT_DIR + "/allow/hello.txt","");
    template.sendBody("direct:appendTypeOverride",null);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:appendTypeAppend").setHeader(Exchange.FILE_NAME,constant("hello.txt")).to(getFtpUrl() + "&allowNullBody=true&fileExist=Append").to("mock:appendTypeAppendResult");
        from("direct:appendTypeOverride").setHeader(Exchange.FILE_NAME,constant("hello.txt")).to(getFtpUrl() + "&allowNullBody=true&fileExist=Override").to("mock:appendTypeOverrideResult");
      }
    }
;
  }
}
