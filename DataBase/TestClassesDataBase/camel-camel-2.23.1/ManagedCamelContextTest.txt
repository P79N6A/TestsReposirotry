/** 
 * @version 
 */
public class ManagedCamelContextTest extends ManagementTestSupport {
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getManagementNameStrategy().setNamePattern("19-#name#");
    return context;
  }
  @Test public void testManagedCamelContextClient() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    ManagedCamelContextMBean client=context.getManagedCamelContext();
    assertNotNull(client);
    assertEquals("camel-1",client.getCamelId());
    assertEquals("Started",client.getState());
    List<String> names=client.findComponentNames();
    assertNotNull(names);
    assertTrue(names.contains("mock"));
  }
  @Test public void testManagedCamelContext() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    String name=(String)mbeanServer.getAttribute(on,"CamelId");
    assertEquals("camel-1",name);
    String managementName=(String)mbeanServer.getAttribute(on,"ManagementName");
    assertEquals("19-camel-1",managementName);
    String level=(String)mbeanServer.getAttribute(on,"ManagementStatisticsLevel");
    assertEquals("Default",level);
    String uptime=(String)mbeanServer.getAttribute(on,"Uptime");
    assertNotNull(uptime);
    long uptimeMillis=(Long)mbeanServer.getAttribute(on,"UptimeMillis");
    assertTrue(uptimeMillis > 0);
    String status=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Started",status);
    Boolean messageHistory=(Boolean)mbeanServer.getAttribute(on,"MessageHistory");
    assertEquals(Boolean.TRUE,messageHistory);
    Boolean logMask=(Boolean)mbeanServer.getAttribute(on,"LogMask");
    assertEquals(Boolean.FALSE,logMask);
    Integer total=(Integer)mbeanServer.getAttribute(on,"TotalRoutes");
    assertEquals(2,total.intValue());
    Integer started=(Integer)mbeanServer.getAttribute(on,"StartedRoutes");
    assertEquals(2,started.intValue());
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mbeanServer.invoke(on,"sendBody",new Object[]{"direct:start","Hello World"},new String[]{"java.lang.String","java.lang.Object"});
    assertMockEndpointsSatisfied();
    resetMocks();
    mock.expectedBodiesReceived("Hello World");
    mbeanServer.invoke(on,"sendStringBody",new Object[]{"direct:start","Hello World"},new String[]{"java.lang.String","java.lang.String"});
    assertMockEndpointsSatisfied();
    Object reply=mbeanServer.invoke(on,"requestBody",new Object[]{"direct:foo","Hello World"},new String[]{"java.lang.String","java.lang.Object"});
    assertEquals("Bye World",reply);
    reply=mbeanServer.invoke(on,"requestStringBody",new Object[]{"direct:foo","Hello World"},new String[]{"java.lang.String","java.lang.String"});
    assertEquals("Bye World",reply);
    resetMocks();
    mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("foo",123);
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo",123);
    mbeanServer.invoke(on,"sendBodyAndHeaders",new Object[]{"direct:start","Hello World",headers},new String[]{"java.lang.String","java.lang.Object","java.util.Map"});
    assertMockEndpointsSatisfied();
    resetMocks();
    mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("foo",123);
    reply=mbeanServer.invoke(on,"requestBodyAndHeaders",new Object[]{"direct:start","Hello World",headers},new String[]{"java.lang.String","java.lang.Object","java.util.Map"});
    assertEquals("Hello World",reply);
    assertMockEndpointsSatisfied();
    Boolean can=(Boolean)mbeanServer.invoke(on,"canSendToEndpoint",new Object[]{"direct:start"},new String[]{"java.lang.String"});
    assertEquals(true,can.booleanValue());
    can=(Boolean)mbeanServer.invoke(on,"canSendToEndpoint",new Object[]{"timer:foo"},new String[]{"java.lang.String"});
    assertEquals(false,can.booleanValue());
    mbeanServer.invoke(on,"stop",null,null);
  }
  @Test public void testManagedCamelContextCreateEndpoint() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertNull(context.hasEndpoint("seda:bar"));
    Object reply=mbeanServer.invoke(on,"createEndpoint",new Object[]{"seda:bar"},new String[]{"java.lang.String"});
    assertEquals(Boolean.TRUE,reply);
    assertNotNull(context.hasEndpoint("seda:bar"));
    ObjectName seda=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=endpoints,name=\"seda://bar\"");
    boolean registered=mbeanServer.isRegistered(seda);
    assertTrue("Should be registered " + seda,registered);
    reply=mbeanServer.invoke(on,"createEndpoint",new Object[]{"seda:bar"},new String[]{"java.lang.String"});
    assertEquals(Boolean.FALSE,reply);
    registered=mbeanServer.isRegistered(seda);
    assertTrue("Should be registered " + seda,registered);
  }
  @Test public void testManagedCamelContextRemoveEndpoint() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertNull(context.hasEndpoint("seda:bar"));
    Object reply=mbeanServer.invoke(on,"createEndpoint",new Object[]{"seda:bar"},new String[]{"java.lang.String"});
    assertEquals(Boolean.TRUE,reply);
    assertNotNull(context.hasEndpoint("seda:bar"));
    ObjectName seda=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=endpoints,name=\"seda://bar\"");
    boolean registered=mbeanServer.isRegistered(seda);
    assertTrue("Should be registered " + seda,registered);
    Object num=mbeanServer.invoke(on,"removeEndpoints",new Object[]{"seda:*"},new String[]{"java.lang.String"});
    assertEquals(1,num);
    assertNull(context.hasEndpoint("seda:bar"));
    registered=mbeanServer.isRegistered(seda);
    assertFalse("Should not be registered " + seda,registered);
    num=mbeanServer.invoke(on,"removeEndpoints",new Object[]{"seda:*"},new String[]{"java.lang.String"});
    assertEquals(0,num);
    assertNull(context.hasEndpoint("seda:bar"));
    registered=mbeanServer.isRegistered(seda);
    assertFalse("Should not be registered " + seda,registered);
  }
  @Test public void testFindComponentsInClasspath() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    @SuppressWarnings("unchecked") Map<String,Properties> info=(Map<String,Properties>)mbeanServer.invoke(on,"findComponents",null,null);
    assertNotNull(info);
    assertTrue(info.size() > 20);
    Properties prop=info.get("seda");
    assertNotNull(prop);
    assertEquals("seda",prop.get("name"));
    assertEquals("org.apache.camel",prop.get("groupId"));
    assertEquals("camel-core",prop.get("artifactId"));
  }
  @Test public void testManagedCamelContextCreateRouteStaticEndpointJson() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"createRouteStaticEndpointJson",null,null);
    assertNotNull(json);
    assertEquals(7,StringHelper.countChar(json,'{'));
    assertEquals(7,StringHelper.countChar(json,'}'));
    assertTrue(json.contains("{ \"uri\": \"direct://start\" }"));
    assertTrue(json.contains("{ \"uri\": \"direct://foo\" }"));
  }
  @Test public void testManagedCamelContextExplainEndpointUriFalse() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"explainEndpointJson",new Object[]{"log:foo?groupDelay=2000&groupSize=5",false},new String[]{"java.lang.String","boolean"});
    assertNotNull(json);
    int pos=json.indexOf("loggerName");
    int pos2=json.indexOf("groupDelay");
    assertTrue("LoggerName should come before groupDelay",pos < pos2);
    assertEquals(6,StringHelper.countChar(json,'{'));
    assertEquals(6,StringHelper.countChar(json,'}'));
    assertTrue(json.contains("\"scheme\": \"log\""));
    assertTrue(json.contains("\"label\": \"core,monitoring\""));
    assertTrue(json.contains("\"loggerName\": { \"kind\": \"path\", \"group\": \"producer\", \"required\": \"true\""));
    assertTrue(json.contains("\"groupSize\": { \"kind\": \"parameter\", \"group\": \"producer\", \"type\": \"integer\"," + " \"javaType\": \"java.lang.Integer\", \"deprecated\": \"false\", \"secret\": \"false\", \"value\": \"5\""));
    assertTrue(json.contains("Set the initial delay for stats (in millis)"));
  }
  @Test public void testManagedCamelContextExplainEndpointUriTrue() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"explainEndpointJson",new Object[]{"log:foo?groupDelay=2000&groupSize=5",true},new String[]{"java.lang.String","boolean"});
    assertNotNull(json);
    int pos=json.indexOf("loggerName");
    int pos2=json.indexOf("groupDelay");
    assertTrue("LoggerName should come before groupDelay",pos < pos2);
    assertEquals(30,StringHelper.countChar(json,'{'));
    assertEquals(30,StringHelper.countChar(json,'}'));
    assertTrue(json.contains("\"scheme\": \"log\""));
    assertTrue(json.contains("\"label\": \"core,monitoring\""));
    assertTrue(json.contains("\"loggerName\": { \"kind\": \"path\", \"group\": \"producer\", \"required\": \"true\""));
    assertTrue(json.contains("\"groupSize\": { \"kind\": \"parameter\", \"group\": \"producer\", \"type\": \"integer\"," + " \"javaType\": \"java.lang.Integer\", \"deprecated\": \"false\", \"secret\": \"false\", \"value\": \"5\""));
    assertTrue(json.contains("Set the initial delay for stats (in millis)"));
  }
  @Test public void testManagedCamelContextExplainEipFalse() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"explainEipJson",new Object[]{"myTransform",false},new String[]{"java.lang.String","boolean"});
    assertNotNull(json);
    assertTrue(json.contains("\"label\": \"eip,transformation\""));
    assertTrue(json.contains("\"expression\": { \"kind\": \"expression\", \"required\": \"true\", \"type\": \"object\""));
    assertTrue(json.contains("Bye World"));
  }
  @Test public void testManagedCamelContextExplainEipTrue() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"explainEipJson",new Object[]{"myTransform",true},new String[]{"java.lang.String","boolean"});
    assertNotNull(json);
    assertTrue(json.contains("\"label\": \"eip,transformation\""));
    assertTrue(json.contains("\"expression\": { \"kind\": \"expression\", \"required\": \"true\", \"type\": \"object\""));
    assertTrue(json.contains("\"description\": { \"kind\": \"element\", \"required\": \"false\", \"type\": \"object\", \"javaType\""));
    assertTrue(json.contains("Bye World"));
  }
  @Test public void testManagedCamelContextExplainEipModel() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"explainEipJson",new Object[]{"aggregate",false},new String[]{"java.lang.String","boolean"});
    assertNotNull(json);
    assertTrue(json.contains("\"description\": \"Aggregates many messages into a single message\""));
    assertTrue(json.contains("\"label\": \"eip,routing\""));
    assertTrue(json.contains("\"correlationExpression\": { \"kind\": \"expression\", \"displayName\": \"Correlation Expression\", \"required\": true, \"type\": \"object\""));
    assertTrue(json.contains("\"discardOnCompletionTimeout\": { \"kind\": \"attribute\", \"displayName\": \"Discard On Completion Timeout\", \"required\": false, \"type\": \"boolean\""));
  }
  @Test public void testManagedCamelContextExplainComponentModel() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"");
    String json=(String)mbeanServer.invoke(on,"explainComponentJson",new Object[]{"seda",false},new String[]{"java.lang.String","boolean"});
    assertNotNull(json);
    assertTrue(json.contains("\"label\": \"core,endpoint\""));
    assertTrue(json.contains("\"queueSize\": { \"kind\": \"property\", \"group\": \"advanced\", \"label\": \"advanced\""));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").delay(10).to("mock:result");
        from("direct:foo").delay(10).transform(constant("Bye World")).id("myTransform");
      }
    }
;
  }
}
