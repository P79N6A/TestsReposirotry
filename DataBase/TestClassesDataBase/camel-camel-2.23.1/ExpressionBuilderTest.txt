/** 
 * @version 
 */
public class ExpressionBuilderTest extends TestSupport {
  protected CamelContext camelContext=new DefaultCamelContext();
  protected Exchange exchange=new DefaultExchange(camelContext);
  @Test public void testRegexTokenize() throws Exception {
    Expression expression=regexTokenizeExpression(headerExpression("location"),",");
    List<String> expected=new ArrayList<>(Arrays.asList(new String[]{"Islington","London","UK"}));
    assertExpression(expression,exchange,expected);
    Predicate predicate=contains(regexTokenizeExpression(headerExpression("location"),","),constantExpression("London"));
    assertPredicate(predicate,exchange,true);
    predicate=contains(regexTokenizeExpression(headerExpression("location"),","),constantExpression("Manchester"));
    assertPredicate(predicate,exchange,false);
  }
  @Test public void testRegexReplaceAll() throws Exception {
    Expression expression=regexReplaceAll(headerExpression("location"),"London","Westminster");
    assertExpression(expression,exchange,"Islington,Westminster,UK");
    expression=regexReplaceAll(headerExpression("location"),"London",headerExpression("name"));
    assertExpression(expression,exchange,"Islington,James,UK");
  }
  @Test public void testTokenize() throws Exception {
    Expression expression=tokenizeExpression(headerExpression("location"),",");
    List<String> expected=new ArrayList<>(Arrays.asList(new String[]{"Islington","London","UK"}));
    assertExpression(expression,exchange,expected);
    Predicate predicate=contains(tokenizeExpression(headerExpression("location"),","),constantExpression("London"));
    assertPredicate(predicate,exchange,true);
    predicate=contains(tokenizeExpression(headerExpression("location"),","),constantExpression("Manchester"));
    assertPredicate(predicate,exchange,false);
  }
  @Test public void testTokenizeLines() throws Exception {
    Expression expression=regexTokenizeExpression(bodyExpression(),"[\r|\n]");
    exchange.getIn().setBody("Hello World\nBye World\rSee you again");
    List<String> expected=new ArrayList<>(Arrays.asList(new String[]{"Hello World","Bye World","See you again"}));
    assertExpression(expression,exchange,expected);
  }
  @Test public void testSortLines() throws Exception {
    Expression expression=sortExpression(body().tokenize(",").getExpression(),new SortByName());
    exchange.getIn().setBody("Jonathan,Claus,James,Hadrian");
    List<String> expected=new ArrayList<>(Arrays.asList(new String[]{"Claus","Hadrian","James","Jonathan"}));
    assertExpression(expression,exchange,expected);
  }
  @Test public void testCamelContextPropertiesExpression() throws Exception {
    camelContext.getGlobalOptions().put("CamelTestKey","CamelTestValue");
    Expression expression=camelContextPropertyExpression("CamelTestKey");
    assertExpression(expression,exchange,"CamelTestValue");
    expression=camelContextPropertiesExpression();
    Map<?,?> properties=expression.evaluate(exchange,Map.class);
    assertEquals("Get a wrong properties size",properties.size(),1);
  }
  @Test public void testParseSimpleOrFallbackToConstantExpression() throws Exception {
    assertEquals("world",parseSimpleOrFallbackToConstantExpression("world",camelContext).evaluate(exchange,String.class));
    assertEquals("Hello there!",parseSimpleOrFallbackToConstantExpression("${body}",camelContext).evaluate(exchange,String.class));
    assertEquals("Hello there!",parseSimpleOrFallbackToConstantExpression("$simple{body}",camelContext).evaluate(exchange,String.class));
  }
  @Test public void testFunction() throws Exception {
    assertExpression(messageExpression(m -> m.getExchange().getIn().getHeader("name")),exchange,"James");
    assertExpression(messageExpression(m -> m.getHeader("name")),exchange,"James");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    Message in=exchange.getIn();
    in.setBody("Hello there!");
    in.setHeader("name","James");
    in.setHeader("location","Islington,London,UK");
  }
private static class SortByName implements Comparator<String> {
    public int compare(    java.lang.String o1,    java.lang.String o2){
      return o1.compareToIgnoreCase(o2);
    }
  }
}
