public class XsltRouteTest extends ContextTestSupport {
  @Test public void testSendStringMessage() throws Exception {
    sendMessageAndHaveItTransformed("<mail><subject>Hey</subject><body>Hello world!</body></mail>");
  }
  @Test public void testSendBytesMessage() throws Exception {
    sendMessageAndHaveItTransformed("<mail><subject>Hey</subject><body>Hello world!</body></mail>".getBytes());
  }
  @Test public void testSendDomMessage() throws Exception {
    XmlConverter converter=new XmlConverter();
    Document body=converter.toDOMDocument("<mail><subject>Hey</subject><body>Hello world!</body></mail>");
    sendMessageAndHaveItTransformed(body);
  }
  private void sendMessageAndHaveItTransformed(  Object body) throws Exception {
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    endpoint.expectedMessageCount(1);
    template.sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
    List<Exchange> list=endpoint.getReceivedExchanges();
    Exchange exchange=list.get(0);
    String xml=exchange.getIn().getBody(String.class);
    assertNotNull("The transformed XML should not be null",xml);
    assertTrue(xml.indexOf("transformed") > -1);
    assertTrue(xml.indexOf("cheese") > -1);
    assertTrue(xml.indexOf("<subject>Hey</subject>") > -1);
    assertTrue(xml.indexOf("<body>Hello world!</body>") > -1);
    TestBean bean=context.getRegistry().lookupByNameAndType("testBean",TestBean.class);
    assertNotNull(bean);
    assertEquals("bean.subject","Hey",bean.getSubject());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("xslt:org/apache/camel/component/xslt/transform.xsl").multicast().bean("testBean").to("mock:result");
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("testBean",new TestBean());
    return jndi;
  }
}
