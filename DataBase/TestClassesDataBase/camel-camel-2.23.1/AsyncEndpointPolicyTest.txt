/** 
 * @version 
 */
public class AsyncEndpointPolicyTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyPolicy("foo"));
    return jndi;
  }
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedHeaderReceived("foo","was wrapped");
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedHeaderReceived("foo","was wrapped");
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedHeaderReceived("foo","was wrapped");
    getMockEndpoint("mock:response").expectedMessageCount(1);
    getMockEndpoint("mock:response").expectedHeaderReceived("foo","policy finished execution");
    template.sendBody("direct:send","Hello World");
    assertMockEndpointsSatisfied();
    MyPolicy foo=context.getRegistry().lookupByNameAndType("foo",MyPolicy.class);
    assertEquals("Should only be invoked 1 time",1,foo.getInvoked());
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").policy("foo").to("mock:foo").to("async:bye:camel").to("mock:bar").to("mock:result");
        from("direct:send").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:after").to("mock:response");
      }
    }
;
  }
public static class MyPolicy implements Policy {
    private final String name;
    private int invoked;
    public MyPolicy(    String name){
      this.name=name;
    }
    public void beforeWrap(    RouteContext routeContext,    ProcessorDefinition<?> definition){
    }
    public Processor wrap(    RouteContext routeContext,    final Processor processor){
      return new AsyncProcessor(){
        public boolean process(        final Exchange exchange,        final AsyncCallback callback){
          invoked++;
          exchange.getIn().setHeader(name,"was wrapped");
          AsyncProcessor ap=AsyncProcessorConverterHelper.convert(processor);
          boolean sync=ap.process(exchange,new AsyncCallback(){
            public void done(            boolean doneSync){
              if (doneSync) {
                return;
              }
              exchange.getIn().setHeader(name,"policy finished execution");
              callback.done(false);
            }
          }
);
          if (!sync) {
            return false;
          }
          exchange.getIn().setHeader(name,"policy finished execution");
          callback.done(true);
          return true;
        }
        public void process(        Exchange exchange) throws Exception {
          AsyncProcessorHelper.process(this,exchange);
        }
      }
;
    }
    public int getInvoked(){
      return invoked;
    }
  }
}
