public class NettyHttpSimpleBasicAuthConstraintMapperTest extends BaseNettyTest {
  @Override @Before public void setUp() throws Exception {
    System.setProperty("java.security.auth.login.config","src/test/resources/myjaas.config");
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    System.clearProperty("java.security.auth.login.config");
    super.tearDown();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addInclusion("/*");
    matcher.addExclusion("/public/*");
    jndi.bind("myConstraint",matcher);
    return jndi;
  }
  @Test public void testBasicAuth() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello Public","Hello World");
    String out=template.requestBody("netty4-http:http://localhost:{{port}}/foo/public/hello.txt","Hello Public",String.class);
    assertEquals("Bye World",out);
    try {
      template.requestBody("netty4-http:http://localhost:{{port}}/foo","Hello World",String.class);
      fail("Should send back 401");
    }
 catch (    CamelExecutionException e) {
      NettyHttpOperationFailedException cause=assertIsInstanceOf(NettyHttpOperationFailedException.class,e.getCause());
      assertEquals(401,cause.getStatusCode());
    }
    String auth="Basic c2NvdHQ6c2VjcmV0";
    out=template.requestBodyAndHeader("netty4-http:http://localhost:{{port}}/foo","Hello World","Authorization",auth,String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/foo?matchOnUriPrefix=true" + "&securityConfiguration.realm=karaf&securityConfiguration.securityConstraint=#myConstraint").to("mock:input").transform().constant("Bye World");
      }
    }
;
  }
}
