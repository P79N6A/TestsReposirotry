@RunWith(MockitoJUnitRunner.class) public class OsgiParserFactoryTest {
  private static final OsgiParserFactory OSGI_PARSER_FACTORY=new OsgiParserFactory(null);
  @Mock private FTPClientConfig ftpClientConfig;
  @Before public void setup(){
    when(ftpClientConfig.getDefaultDateFormatStr()).thenReturn("yyyy-MM-dd");
  }
  @Test public void createFileEntryParserUnix() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla unix bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(UnixFTPEntryParser.class));
  }
  @Test public void createFileEntryParserLinux() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla linux bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(UnixFTPEntryParser.class));
  }
  @Test public void createFileEntryParserTypeL8() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla type: l8 bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(UnixFTPEntryParser.class));
  }
  @Test public void createFileEntryParserVms() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla vms bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(VMSVersioningFTPEntryParser.class));
  }
  @Test public void createFileEntryParserPlainWindows() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("WINDOWS");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(NTFTPEntryParser.class));
  }
  @Test public void createFileEntryParserNotPlainWindows() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("WINDOWS XP");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(CompositeFileEntryParser.class));
  }
  @Test public void createFileEntryParserWin32() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla WIN32 bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(CompositeFileEntryParser.class));
  }
  @Test public void createFileEntryParserOs2() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla OS/2 bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(OS2FTPEntryParser.class));
  }
  @Test public void createFileEntryParserPlainOs400() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("OS/400");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(OS400FTPEntryParser.class));
  }
  @Test public void createFileEntryParserNotPlainOs400() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("OS/400 bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(CompositeFileEntryParser.class));
  }
  @Test public void createFileEntryParserMvs() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla MvS bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(MVSFTPEntryParser.class));
  }
  @Test public void createFileEntryParserNetware() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla NeTwArE bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(NetwareFTPEntryParser.class));
  }
  @Test public void createFileEntryParserMacOsPeter() throws Exception {
    when(ftpClientConfig.getServerSystemKey()).thenReturn("bla MaCoS PeTER bla");
    FTPFileEntryParser result=OSGI_PARSER_FACTORY.createFileEntryParser(ftpClientConfig);
    assertThat(result,instanceOf(MacOsPeterFTPEntryParser.class));
  }
}
