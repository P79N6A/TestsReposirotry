@RunWith(Parameterized.class) public abstract class SolrComponentTestSupport extends SolrTestSupport {
  protected static final String TEST_ID="test1";
  protected static final String TEST_ID2="test2";
  private SolrFixtures solrFixtures;
  public SolrComponentTestSupport(  SolrFixtures.TestServerType serverToTest){
    this.solrFixtures=new SolrFixtures(serverToTest);
  }
  protected void solrInsertTestEntry(){
    solrInsertTestEntry(TEST_ID);
  }
  protected static Collection<Object[]> secureOrNot(){
    return Arrays.asList(new Object[][]{{true},{false}});
  }
  String solrRouteUri(){
    return solrFixtures.solrRouteUri();
  }
  protected void solrInsertTestEntry(  String id){
    Map<String,Object> headers=new HashMap<>();
    headers.put(SolrConstants.OPERATION,SolrConstants.OPERATION_INSERT);
    headers.put("SolrField.id",id);
    template.sendBodyAndHeaders("direct:start","",headers);
  }
  protected void solrCommit(){
    template.sendBodyAndHeader("direct:start","",SolrConstants.OPERATION,SolrConstants.OPERATION_COMMIT);
  }
  protected QueryResponse executeSolrQuery(  String query) throws SolrServerException, IOException {
    SolrQuery solrQuery=new SolrQuery();
    solrQuery.setQuery(query);
    SolrClient solrServer=solrFixtures.getServer();
    return solrServer.query("collection1",solrQuery);
  }
  @BeforeClass public static void beforeClass() throws Exception {
    SolrFixtures.createSolrFixtures();
  }
  @AfterClass public static void afterClass() throws Exception {
    SolrFixtures.teardownSolrFixtures();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to(solrRouteUri());
        from("direct:splitThenCommit").split(body()).to(solrRouteUri()).end().setHeader(SolrConstants.OPERATION,constant(SolrConstants.OPERATION_COMMIT)).to(solrRouteUri());
      }
    }
;
  }
  @Parameters public static Collection<Object[]> serverTypes(){
    Object[][] serverTypes={{SolrFixtures.TestServerType.USE_CLOUD},{SolrFixtures.TestServerType.USE_HTTPS},{SolrFixtures.TestServerType.USE_HTTP}};
    return Arrays.asList(serverTypes);
  }
  @Before public void clearIndex() throws Exception {
    SolrFixtures.clearIndex();
  }
}
