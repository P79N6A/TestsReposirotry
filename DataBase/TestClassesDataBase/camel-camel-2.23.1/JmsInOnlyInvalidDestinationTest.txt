/** 
 */
public class JmsInOnlyInvalidDestinationTest extends CamelTestSupport {
  @Test public void testInvalidDestination() throws Exception {
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:foo","Hello World","foo","activemq:queue:foo?destinationResolver=#myResolver");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myResolver",new MyDestinationResolver());
    return jndi;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(1));
        from("direct:foo").recipientList(header("foo"));
      }
    }
;
  }
private static class MyDestinationResolver implements DestinationResolver {
    @Override public Destination resolveDestinationName(    Session session,    String destinationName,    boolean pubSubDomain) throws JMSException {
      throw new DestinationResolutionException("Forced");
    }
  }
}
