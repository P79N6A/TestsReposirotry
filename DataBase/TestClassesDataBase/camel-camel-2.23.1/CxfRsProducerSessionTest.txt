public class CxfRsProducerSessionTest extends CamelSpringTestSupport {
  private static int port1=CXFTestSupport.getPort1();
  private static int port2=CXFTestSupport.getPort("CxfRsProducerSessionTest.jetty");
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  public int getPort1(){
    return port1;
  }
  public int getPort2(){
    return port2;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerSession.xml");
  }
  protected void setupDestinationURL(  Message inMessage){
  }
  @Test public void testNoSessionProxy(){
    String response=sendMessage("direct://proxy","World",Boolean.FALSE).getOut().getBody(String.class);
    assertEquals("New New World",response);
    response=sendMessage("direct://proxy","World",Boolean.FALSE).getOut().getBody(String.class);
    assertEquals("New New World",response);
  }
  @Test public void testExchangeSessionProxy(){
    String response=sendMessage("direct://proxyexchange","World",Boolean.FALSE).getOut().getBody(String.class);
    assertEquals("Old New World",response);
    response=sendMessage("direct://proxyexchange","World",Boolean.FALSE).getOut().getBody(String.class);
    assertEquals("Old New World",response);
  }
  @Test public void testInstanceSession(){
    String response=sendMessage("direct://proxyinstance","World",Boolean.FALSE).getOut().getBody(String.class);
    assertEquals("Old New World",response);
    response=sendMessage("direct://proxyinstance","World",Boolean.FALSE).getOut().getBody(String.class);
    assertEquals("Old Old World",response);
    response=sendMessage("direct://httpinstance","World",Boolean.TRUE).getOut().getBody(String.class);
    assertEquals("Old Old World",response);
  }
  @Test public void testNoSessionHttp(){
    String response=sendMessage("direct://http","World",Boolean.TRUE).getOut().getBody(String.class);
    assertEquals("New New World",response);
    response=sendMessage("direct://http","World",Boolean.TRUE).getOut().getBody(String.class);
    assertEquals("New New World",response);
  }
  @Test public void testExchangeSessionHttp(){
    String response=sendMessage("direct://httpexchange","World",Boolean.TRUE).getOut().getBody(String.class);
    assertEquals("Old New World",response);
    response=sendMessage("direct://httpexchange","World",Boolean.TRUE).getOut().getBody(String.class);
    assertEquals("Old New World",response);
  }
  private Exchange sendMessage(  String endpoint,  String body,  Boolean httpApi){
    Exchange exchange=template.send(endpoint,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.OPERATION_NAME,"echo");
        inMessage.setHeader(Exchange.HTTP_METHOD,"POST");
        inMessage.setHeader(Exchange.HTTP_PATH,"/echoservice/echo");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,httpApi);
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,String.class);
        inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE,"application/json");
        inMessage.setBody(body);
      }
    }
);
    return exchange;
  }
}
