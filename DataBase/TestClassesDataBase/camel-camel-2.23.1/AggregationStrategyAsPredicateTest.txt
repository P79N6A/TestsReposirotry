/** 
 */
public class AggregationStrategyAsPredicateTest extends ContextTestSupport {
  @Test public void testAggregateCompletionAware() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:aggregated");
    result.expectedBodiesReceived("A+B+C","X+Y+ZZZZ");
    result.message(0).exchangeProperty(Exchange.AGGREGATED_COMPLETED_BY).isEqualTo("predicate");
    result.message(1).exchangeProperty(Exchange.AGGREGATED_COMPLETED_BY).isEqualTo("predicate");
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","X","id",123);
    template.sendBodyAndHeader("direct:start","Y","id",123);
    template.sendBodyAndHeader("direct:start","ZZZZ","id",123);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyCompletionStrategy()).to("mock:aggregated");
      }
    }
;
  }
private final class MyCompletionStrategy implements AggregationStrategy, Predicate {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class) + "+" + newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body);
      return oldExchange;
    }
    @Override public boolean matches(    Exchange exchange){
      String body=exchange.getIn().getBody(String.class);
      return body.length() >= 5;
    }
  }
}
