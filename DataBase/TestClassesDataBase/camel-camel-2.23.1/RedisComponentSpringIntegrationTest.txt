@Ignore("IntegrationTest") public class RedisComponentSpringIntegrationTest extends CamelSpringTestSupport {
  @EndpointInject(uri="direct:start") private ProducerTemplate template;
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @Test public void shouldFilterDuplicateMessagesUsingIdempotentRepository() throws Exception {
    result.expectedMessageCount(2);
    template.send("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(RedisConstants.COMMAND,"PUBLISH");
        exchange.getIn().setHeader(RedisConstants.CHANNEL,"testChannel");
        exchange.getIn().setHeader(RedisConstants.MESSAGE,"Message one");
      }
    }
);
    template.send("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(RedisConstants.COMMAND,"PUBLISH");
        exchange.getIn().setHeader(RedisConstants.CHANNEL,"testChannel");
        exchange.getIn().setHeader(RedisConstants.MESSAGE,"Message one");
      }
    }
);
    template.send("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(RedisConstants.COMMAND,"PUBLISH");
        exchange.getIn().setHeader(RedisConstants.CHANNEL,"testChannel");
        exchange.getIn().setHeader(RedisConstants.MESSAGE,"Message two");
      }
    }
);
    assertMockEndpointsSatisfied();
    Exchange resultExchangeOne=result.getExchanges().get(0);
    Exchange resultExchangeTwo=result.getExchanges().get(1);
    assertEquals("Message one",resultExchangeOne.getIn().getBody());
    assertEquals("Message two",resultExchangeTwo.getIn().getBody());
  }
  @Override protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("RedisComponentSpringTest-context.xml");
  }
}
