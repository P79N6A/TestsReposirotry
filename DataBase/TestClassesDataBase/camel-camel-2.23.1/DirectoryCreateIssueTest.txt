/** 
 * @version 
 */
public class DirectoryCreateIssueTest extends ContextTestSupport {
  private final int numFiles=10;
  private final String path="target/a/b/c/d/e/f/g/h";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/a");
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        String[] destinations=new String[numFiles];
        for (int i=0; i < numFiles; i++) {
          destinations[i]="direct:file" + i;
          from("direct:file" + i).setHeader(Exchange.FILE_NAME,constant("file" + i + ".txt")).to("file://" + path + "/?fileExist=Override&noop=true","mock:result");
        }
        from("seda:testFileCreatedAsDir").to(destinations);
      }
    }
;
  }
  @Test public void testFileCreatedAsDir() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(numFiles);
    template.send("seda:testFileCreatedAsDir",new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody("Contents of test file");
      }
    }
);
    assertMockEndpointsSatisfied();
    Thread.sleep(50);
    for (int i=0; i < numFiles; i++) {
      assertTrue((new File(path + "/file" + i+ ".txt")).isFile());
    }
  }
}
