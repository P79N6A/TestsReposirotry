public class ImmediateConsumerTest extends BeanstalkMockTestSupport {
  String testMessage="hello, world";
  boolean shouldIdie;
  Processor processor=new Processor(){
    @Override public void process(    Exchange exchange) throws InterruptedException {
      if (shouldIdie) {
        throw new InterruptedException("die");
      }
    }
  }
;
  @Test public void testDeleteOnSuccess() throws Exception {
    if (!canTest()) {
      return;
    }
    final Job jobMock=mock(Job.class);
    final long jobId=111;
    final byte[] payload=Helper.stringToBytes(testMessage);
    when(jobMock.getJobId()).thenReturn(jobId);
    when(jobMock.getData()).thenReturn(payload);
    when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    result.expectedBodiesReceived(testMessage);
    result.expectedHeaderReceived(Headers.JOB_ID,jobId);
    result.message(0).header(Headers.JOB_ID).isEqualTo(jobId);
    result.assertIsSatisfied(100);
    verify(client,atLeast(1)).reserve(0);
    verify(client,atLeast(1)).delete(jobId);
  }
  @Test public void testDeleteOnFailure() throws Exception {
    shouldIdie=true;
    final long jobId=111;
    final byte[] payload=Helper.stringToBytes(testMessage);
    final Job jobMock=mock(Job.class);
    when(jobMock.getJobId()).thenReturn(jobId);
    when(jobMock.getData()).thenReturn(payload);
    when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMinimumMessageCount(1);
    result.assertIsNotSatisfied(1000);
    verify(client,atLeastOnce()).reserve(anyInt());
    verify(client,atLeast(1)).delete(jobId);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from("beanstalk:tube?consumer.awaitJob=false").process(processor).to("mock:result");
      }
    }
;
  }
}
