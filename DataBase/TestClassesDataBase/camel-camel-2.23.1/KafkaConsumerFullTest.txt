public class KafkaConsumerFullTest extends BaseEmbeddedKafkaTest {
  public static final String TOPIC="test";
  @EndpointInject(uri="kafka:" + TOPIC + "?groupId=group1&autoOffsetReset=earliest&keyDeserializer=org.apache.kafka.common.serialization.StringDeserializer&"+ "valueDeserializer=org.apache.kafka.common.serialization.StringDeserializer"+ "&autoCommitIntervalMs=1000&sessionTimeoutMs=30000&autoCommitEnable=true&interceptorClasses=org.apache.camel.component.kafka.MockConsumerInterceptor") private Endpoint from;
  @EndpointInject(uri="mock:result") private MockEndpoint to;
  private org.apache.kafka.clients.producer.KafkaProducer<String,String> producer;
  @Before public void before(){
    Properties props=getDefaultProperties();
    producer=new org.apache.kafka.clients.producer.KafkaProducer<>(props);
  }
  @After public void after(){
    if (producer != null) {
      producer.close();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(from).routeId("foo").to(to);
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myHeaderDeserializer",new MyKafkaHeaderDeserializer());
    return jndi;
  }
  @Test public void kafkaMessageIsConsumedByCamel() throws InterruptedException, IOException {
    String propagatedHeaderKey="PropagatedCustomHeader";
    byte[] propagatedHeaderValue="propagated header value".getBytes();
    String skippedHeaderKey="CamelSkippedHeader";
    to.expectedMessageCount(5);
    to.expectedBodiesReceivedInAnyOrder("message-0","message-1","message-2","message-3","message-4");
    to.expectedHeaderValuesReceivedInAnyOrder(KafkaConstants.LAST_RECORD_BEFORE_COMMIT,null,null,null,null,null);
    to.expectedHeaderReceived(propagatedHeaderKey,propagatedHeaderValue);
    for (int k=0; k < 5; k++) {
      String msg="message-" + k;
      ProducerRecord<String,String> data=new ProducerRecord<>(TOPIC,"1",msg);
      data.headers().add(new RecordHeader("CamelSkippedHeader","skipped header value".getBytes()));
      data.headers().add(new RecordHeader(propagatedHeaderKey,propagatedHeaderValue));
      producer.send(data);
    }
    to.assertIsSatisfied(3000);
    assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count());
    Map<String,Object> headers=to.getExchanges().get(0).getIn().getHeaders();
    assertFalse("Should not receive skipped header",headers.containsKey(skippedHeaderKey));
    assertTrue("Should receive propagated header",headers.containsKey(propagatedHeaderKey));
  }
  @Test @Ignore("Currently there is a bug in kafka which leads to an uninterruptable thread so a resub take too long (works manually)") public void kafkaMessageIsConsumedByCamelSeekedToBeginning() throws Exception {
    to.expectedMessageCount(5);
    to.expectedBodiesReceivedInAnyOrder("message-0","message-1","message-2","message-3","message-4");
    for (int k=0; k < 5; k++) {
      String msg="message-" + k;
      ProducerRecord<String,String> data=new ProducerRecord<>(TOPIC,"1",msg);
      producer.send(data);
    }
    to.assertIsSatisfied(3000);
    to.reset();
    to.expectedMessageCount(5);
    to.expectedBodiesReceivedInAnyOrder("message-0","message-1","message-2","message-3","message-4");
    context.stopRoute("foo");
    KafkaEndpoint kafkaEndpoint=(KafkaEndpoint)from;
    kafkaEndpoint.getConfiguration().setSeekTo("beginning");
    context.startRoute("foo");
    to.assertIsSatisfied(3000);
  }
  @Test @Ignore("Currently there is a bug in kafka which leads to an uninterruptable thread so a resub take too long (works manually)") public void kafkaMessageIsConsumedByCamelSeekedToEnd() throws Exception {
    to.expectedMessageCount(5);
    to.expectedBodiesReceivedInAnyOrder("message-0","message-1","message-2","message-3","message-4");
    for (int k=0; k < 5; k++) {
      String msg="message-" + k;
      ProducerRecord<String,String> data=new ProducerRecord<>(TOPIC,"1",msg);
      producer.send(data);
    }
    to.assertIsSatisfied(3000);
    to.reset();
    to.expectedMessageCount(0);
    context.stopRoute("foo");
    KafkaEndpoint kafkaEndpoint=(KafkaEndpoint)from;
    kafkaEndpoint.getConfiguration().setSeekTo("end");
    context.startRoute("foo");
synchronized (this) {
      Thread.sleep(1000);
    }
    to.assertIsSatisfied(3000);
  }
  @Test public void headerDeserializerCouldBeOverridden(){
    KafkaEndpoint kafkaEndpoint=context.getEndpoint("kafka:random_topic?kafkaHeaderDeserializer=#myHeaderDeserializer",KafkaEndpoint.class);
    assertIsInstanceOf(MyKafkaHeaderDeserializer.class,kafkaEndpoint.getConfiguration().getKafkaHeaderDeserializer());
  }
private static class MyKafkaHeaderDeserializer extends DefaultKafkaHeaderDeserializer {
  }
}
