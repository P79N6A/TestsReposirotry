public class ScpSimpleProduceTest extends ScpServerTestSupport {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:" + getScpPath() + "?recursive=true&delete=true").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
  @Test public void testScpSimpleProduce() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    String uri=getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testScpSimpleProduceTwoTimes() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    String uri=getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader(uri,"Bye World",Exchange.FILE_NAME,"bye.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testScpSimpleSubPathProduce() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    String uri=getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Bye World",Exchange.FILE_NAME,"mysub/bye.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testScpSimpleTwoSubPathProduce() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedBodiesReceived("Farewell World");
    String uri=getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Farewell World",Exchange.FILE_NAME,"mysub/mysubsub/farewell.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testScpProduceChmod() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedBodiesReceived("Bonjour Monde");
    String uri=getScpUri() + "?username=admin&password=admin&chmod=640&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Bonjour Monde",Exchange.FILE_NAME,"monde.txt");
    assertMockEndpointsSatisfied();
  }
  @Test @Ignore("Fails on CI servers") public void testScpProducePrivateKey() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedMessageCount(1);
    String uri=getScpUri() + "?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Hallo Welt",Exchange.FILE_NAME,"welt.txt");
    assertMockEndpointsSatisfied();
  }
  @Test @Ignore("Fails on CI servers") public void testScpProducePrivateKeyFromClasspath() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedMessageCount(1);
    String uri=getScpUri() + "?username=admin&privateKeyFile=classpath:camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Hallo Welt",Exchange.FILE_NAME,"welt.txt");
    assertMockEndpointsSatisfied();
  }
  @Test @Ignore("Fails on CI servers") public void testScpProducePrivateKeyByte() throws Exception {
    Assume.assumeTrue(this.isSetupComplete());
    getMockEndpoint("mock:result").expectedMessageCount(1);
    String uri=getScpUri() + "?username=admin&privateKeyBytes=#privKey&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();
    template.sendBodyAndHeader(uri,"Hallo Welt",Exchange.FILE_NAME,"welt.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    byte[] privKey=Files.readAllBytes(new File("src/test/resources/camel-key.priv").toPath());
    registry.bind("privKey",privKey);
    return registry;
  }
}
