public class ElasticsearchClusterBaseTest extends CamelTestSupport {
  public static ElasticsearchClusterRunner runner;
  public static String clusterName;
  public static TransportClient client;
  protected static final int ES_BASE_TRANSPORT_PORT=AvailablePortFinder.getNextAvailable();
  protected static final int ES_FIRST_NODE_TRANSPORT_PORT=AvailablePortFinder.getNextAvailable(ES_BASE_TRANSPORT_PORT + 1);
  protected static final int ES_BASE_HTTP_PORT=AvailablePortFinder.getNextAvailable(ES_BASE_TRANSPORT_PORT + 10);
  @SuppressWarnings("resource") @BeforeClass public static void cleanUpOnce() throws Exception {
    deleteDirectory("target/testcluster/");
    clusterName="es-cl-run-" + System.currentTimeMillis();
    runner=new ElasticsearchClusterRunner();
    runner.onBuild(new ElasticsearchClusterRunner.Builder(){
      @Override public void build(      final int number,      final Builder settingsBuilder){
        settingsBuilder.put("http.cors.enabled",true);
        settingsBuilder.put("http.cors.allow-origin","*");
      }
    }
).build(newConfigs().clusterName(clusterName).numOfNode(3).baseTransportPort(ES_BASE_TRANSPORT_PORT).baseHttpPort(ES_BASE_HTTP_PORT).basePath("target/testcluster/").disableESLogger());
    runner.ensureGreen();
    client=new PreBuiltTransportClient(getSettings()).addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("localhost"),ES_FIRST_NODE_TRANSPORT_PORT));
  }
  private static Settings getSettings(){
    return Settings.builder().put("cluster.name",clusterName).put("http.enabled",true).put("client.transport.ignore_cluster_name",false).put("client.transport.sniff",true).build();
  }
  @AfterClass public static void teardownOnce() throws Exception {
    if (client != null) {
      client.close();
    }
    if (runner != null) {
      runner.close();
      runner.clean();
    }
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  /** 
 * As we don't delete the  {@code target/data} folder for <b>each</b> testbelow (otherwise they would run much slower), we need to make sure there's no side effect of the same used data through creating unique indexes.
 */
  Map<String,String> createIndexedData(  String... additionalPrefixes){
    String prefix=createPrefix();
    if (additionalPrefixes.length > 0) {
      StringBuilder sb=new StringBuilder(prefix);
      for (      String additionalPrefix : additionalPrefixes) {
        sb.append(additionalPrefix).append("-");
      }
      prefix=sb.toString();
    }
    String key=prefix + "key";
    String value=prefix + "value";
    log.info("Creating indexed data using the key/value pair {} => {}",key,value);
    Map<String,String> map=new HashMap<>();
    map.put(key,value);
    return map;
  }
  String createPrefix(){
    return getTestMethodName().toLowerCase() + "-";
  }
}
