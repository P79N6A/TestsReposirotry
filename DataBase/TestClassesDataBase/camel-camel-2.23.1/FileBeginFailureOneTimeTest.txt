/** 
 * @version 
 */
public class FileBeginFailureOneTimeTest extends ContextTestSupport {
  private MyStrategy myStrategy=new MyStrategy();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/begin");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myStrategy",myStrategy);
    return jndi;
  }
  @Test public void testBeginFailureOneTime() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("file://target/begin","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    assertEquals("Begin should have been invoked 2 times",2,myStrategy.getInvoked());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/begin?initialDelay=0&delay=10&processStrategy=#myStrategy").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
private static class MyStrategy implements GenericFileProcessStrategy<File> {
    private volatile int invoked;
    public void prepareOnStartup(    GenericFileOperations<File> fileGenericFileOperations,    GenericFileEndpoint<File> fileGenericFileEndpoint) throws Exception {
    }
    public boolean begin(    GenericFileOperations<File> fileGenericFileOperations,    GenericFileEndpoint<File> fileGenericFileEndpoint,    Exchange exchange,    GenericFile<File> fileGenericFile) throws Exception {
      invoked++;
      if (invoked <= 1) {
        throw new IllegalArgumentException("Damn I cannot do this");
      }
      return true;
    }
    public void abort(    GenericFileOperations<File> fileGenericFileOperations,    GenericFileEndpoint<File> fileGenericFileEndpoint,    Exchange exchange,    GenericFile<File> fileGenericFile) throws Exception {
    }
    public void commit(    GenericFileOperations<File> fileGenericFileOperations,    GenericFileEndpoint<File> fileGenericFileEndpoint,    Exchange exchange,    GenericFile<File> fileGenericFile) throws Exception {
    }
    public void rollback(    GenericFileOperations<File> fileGenericFileOperations,    GenericFileEndpoint<File> fileGenericFileEndpoint,    Exchange exchange,    GenericFile<File> fileGenericFile) throws Exception {
    }
    public int getInvoked(){
      return invoked;
    }
  }
}
