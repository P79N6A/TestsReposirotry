@ContextConfiguration public class BindySimpleCsvBooleanUnmarshallTest extends AbstractJUnit4SpringContextTests {
  private static final String URI_MOCK_RESULT="mock:result";
  private static final String URI_MOCK_ERROR="mock:error";
  private static final String URI_DIRECT_START="direct:start";
  @Produce(uri=URI_DIRECT_START) private ProducerTemplate template;
  @EndpointInject(uri=URI_MOCK_RESULT) private MockEndpoint result;
  @EndpointInject(uri=URI_MOCK_ERROR) private MockEndpoint error;
  private String expected;
  @SuppressWarnings("unchecked") @Test @DirtiesContext public void testUnMarshallMessageWithBoolean() throws Exception {
    expected="andrew,true\r\n" + "andrew,false\r\n";
    template.sendBody(expected);
    List<BooleanExample> examples=(List<BooleanExample>)result.getExchanges().get(0).getIn().getBody();
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    assertFalse(examples.get(0).getName().isEmpty());
    assertEquals(examples.get(0).getName(),"andrew");
    assertTrue(examples.get(0).getExist());
    assertFalse(examples.get(1).getName().isEmpty());
    assertEquals(examples.get(1).getName(),"andrew");
    assertFalse(examples.get(1).getExist());
    assertNotNull(examples);
  }
  @SuppressWarnings("unchecked") @Test @DirtiesContext public void testUnMarshallMessageWithBooleanMissingFields() throws Exception {
    expected="andrew,true\r\n" + "joseph,false\r\n" + "nicholas,\r\n";
    template.sendBody(expected);
    List<BooleanExample> examples=(List<BooleanExample>)result.getExchanges().get(0).getIn().getBody();
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    assertFalse(examples.get(0).getName().isEmpty());
    assertEquals(examples.get(0).getName(),"andrew");
    assertTrue(examples.get(0).getExist());
    assertFalse(examples.get(1).getName().isEmpty());
    assertEquals(examples.get(1).getName(),"joseph");
    assertFalse(examples.get(1).getExist());
    assertFalse(examples.get(2).getName().isEmpty());
    assertEquals(examples.get(2).getName(),"nicholas");
    assertTrue(examples.get(2).getExist());
    assertNotNull(examples);
  }
public static class ContextConfig extends RouteBuilder {
    BindyCsvDataFormat camelDataFormat=new BindyCsvDataFormat(org.apache.camel.dataformat.bindy.model.simple.bool.BooleanExample.class);
    public void configure(){
      Tracer tracer=new Tracer();
      tracer.setLogLevel(LoggingLevel.ERROR);
      tracer.setLogName("org.apache.camel.bindy");
      getContext().addInterceptStrategy(tracer);
      errorHandler(deadLetterChannel(URI_MOCK_ERROR).redeliveryDelay(0));
      onException(Exception.class).maximumRedeliveries(0).handled(true);
      from(URI_DIRECT_START).unmarshal(camelDataFormat).to(URI_MOCK_RESULT);
    }
  }
}
