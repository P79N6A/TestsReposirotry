/** 
 * Test RabbitMQ component with Spring DSL
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class RabbitMQSpringIntTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(RabbitMQSpringIntTest.class);
  @Produce(uri="direct:rabbitMQ") protected ProducerTemplate template;
  @Autowired private ConnectionFactory connectionFactory;
  private Connection connection;
  private Channel channel;
  private boolean isConnectionOpened(){
    return connection != null && connection.isOpen();
  }
  private Connection openConnection() throws IOException, TimeoutException {
    if (!isConnectionOpened()) {
      LOGGER.info("Open connection");
      connection=connectionFactory.newConnection();
    }
    return connection;
  }
  private boolean isChannelOpened(){
    return channel != null && channel.isOpen();
  }
  private Channel openChannel() throws IOException, TimeoutException {
    if (!isChannelOpened()) {
      LOGGER.info("Open channel");
      channel=openConnection().createChannel();
    }
    return channel;
  }
  @Before public void bindQueueExchange() throws IOException, TimeoutException {
    openChannel();
  }
  @After public void closeConnection() throws TimeoutException {
    if (isChannelOpened()) {
      try {
        LOGGER.info("Close channel");
        channel.close();
      }
 catch (      IOException e) {
      }
    }
    if (isConnectionOpened()) {
      try {
        LOGGER.info("Close connection");
        connection.close();
      }
 catch (      IOException e) {
      }
    }
  }
private static final class LastDeliveryConsumer extends DefaultConsumer {
    private byte[] lastBody;
    private LastDeliveryConsumer(    Channel channel){
      super(channel);
    }
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      lastBody=body;
      super.handleDelivery(consumerTag,envelope,properties,body);
    }
    public byte[] getLastBody(){
      return lastBody;
    }
    public String getLastBodyAsString(){
      return lastBody == null ? null : new String(lastBody);
    }
  }
  @Test public void testSendCustomConnectionFactory() throws Exception {
    String body="Hello Rabbit";
    template.sendBodyAndHeader(body,RabbitMQConstants.ROUTING_KEY,"rk2");
    openChannel();
    LastDeliveryConsumer consumer=new LastDeliveryConsumer(channel);
    channel.basicConsume("q2",true,consumer);
    int i=10;
    while (consumer.getLastBody() == null && i > 0) {
      Thread.sleep(1000L);
      i--;
    }
    assertEquals(body,consumer.getLastBodyAsString());
  }
}
