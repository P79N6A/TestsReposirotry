/** 
 * See MR-170
 * @version 
 */
@Ignore public class JmsHammerTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(JmsHammerTest.class);
  private String message;
  private int size=10;
  public void prepareMessage() throws Exception {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < 20000; i++) {
      sb.append("hellothere");
    }
    message=sb.toString();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ActiveMQComponent activemq=activeMQComponent("vm://localhost?broker.persistent=false&broker.useJmx=false&jms.redeliveryPolicy.maximumRedeliveries=0" + "&jms.redeliveryPolicy.initialRedeliveryDelay=500&jms.useAsyncSend=false&jms.sendTimeout=10000" + "&jms.maxReconnectAttempts=1&jms.timeout=3000");
    camelContext.addComponent("activemq",activemq);
    return camelContext;
  }
  @Test public void testHammerJms() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(size);
    for (int i=0; i < size; i++) {
      template.sendBody("direct:start",message);
      LOG.info("Send #" + i);
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    prepareMessage();
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("activemq:queue:dropOff","mock:result");
      }
    }
;
  }
}
