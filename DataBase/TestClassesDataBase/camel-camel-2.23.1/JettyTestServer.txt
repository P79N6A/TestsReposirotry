public final class JettyTestServer {
  private static final Logger LOG=LoggerFactory.getLogger(JettyTestServer.class);
  private static final int PORT=AvailablePortFinder.getNextAvailable();
  private static JettyTestServer instance;
  public int port;
  private Server server;
  private JettyTestServer(){
  }
  public void startServer(){
    server=new Server(PORT);
    port=PORT;
    ServletContextHandler servletContext=new ServletContextHandler(ServletContextHandler.SESSIONS);
    servletContext.setSecurityHandler(basicAuth("camel","camelPass","Private!"));
    servletContext.setContextPath("/");
    server.setHandler(servletContext);
    servletContext.addServlet(new ServletHolder(new MyHttpServlet()),"/*");
    try {
      server.start();
    }
 catch (    Exception ex) {
      LOG.error("Could not start Server!",ex);
      fail(ex.getLocalizedMessage());
    }
  }
  public void stopServer(){
    if (server != null) {
      try {
        server.stop();
      }
 catch (      Exception ex) {
        LOG.warn("Server doesn't stop normal...",ex);
      }
 finally {
        server=null;
        port=0;
      }
    }
  }
  private SecurityHandler basicAuth(  String username,  String password,  String realm){
    HashLoginService l=new HashLoginService();
    UserStore us=new UserStore();
    us.addUser(username,Credential.getCredential(password),new String[]{"user"});
    l.setUserStore(us);
    l.setName(realm);
    Constraint constraint=new Constraint();
    constraint.setName(Constraint.__BASIC_AUTH);
    constraint.setRoles(new String[]{"user"});
    constraint.setAuthenticate(true);
    ConstraintMapping cm=new ConstraintMapping();
    cm.setConstraint(constraint);
    cm.setPathSpec("/*");
    ConstraintSecurityHandler csh=new ConstraintSecurityHandler();
    csh.setAuthenticator(new BasicAuthenticator());
    csh.setRealmName("myrealm");
    csh.addConstraintMapping(cm);
    csh.setLoginService(l);
    return csh;
  }
  public static JettyTestServer getInstance(){
    if (instance == null) {
      instance=new JettyTestServer();
    }
    return instance;
  }
private class MyHttpServlet extends HttpServlet {
    private static final long serialVersionUID=5594945031962091041L;
    @Override protected void doGet(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      resp.getWriter().write(FileUtils.readFileToString(new File("src/test/data/rss20.xml")));
    }
  }
}
