public class ValidatorContractTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testInputTypeOnly() throws Exception {
    context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        validator().type(A.class).withUri("direct:validator");
        from("direct:a").inputTypeWithValidate(A.class).to("mock:a");
        from("direct:validator").to("mock:validator");
      }
    }
);
    context.start();
    MockEndpoint mocka=context.getEndpoint("mock:a",MockEndpoint.class);
    MockEndpoint mockv=context.getEndpoint("mock:validator",MockEndpoint.class);
    mocka.setExpectedCount(1);
    mockv.setExpectedCount(1);
    Object answer=template.requestBody("direct:a","foo");
    mocka.assertIsSatisfied();
    mockv.assertIsSatisfied();
    Exchange exa=mocka.getExchanges().get(0);
    assertEquals(A.class,exa.getIn().getBody().getClass());
    Exchange exv=mockv.getExchanges().get(0);
    assertEquals(A.class,exv.getIn().getBody().getClass());
    assertEquals(A.class,answer.getClass());
  }
  @Test public void testOutputTypeOnly() throws Exception {
    context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        validator().type(A.class).withUri("direct:validator");
        from("direct:a").outputTypeWithValidate(A.class).to("mock:a");
        from("direct:validator").to("mock:validator");
      }
    }
);
    context.start();
    MockEndpoint mocka=context.getEndpoint("mock:a",MockEndpoint.class);
    MockEndpoint mockv=context.getEndpoint("mock:validator",MockEndpoint.class);
    mocka.setExpectedCount(1);
    mockv.setExpectedCount(1);
    Object answer=template.requestBody("direct:a","foo");
    mocka.assertIsSatisfied();
    mockv.assertIsSatisfied();
    Exchange exa=mocka.getExchanges().get(0);
    assertEquals("foo",exa.getIn().getBody());
    Exchange exv=mockv.getExchanges().get(0);
    assertEquals(A.class,exv.getIn().getBody().getClass());
    assertEquals(A.class,answer.getClass());
  }
public static class MyTypeConverters implements TypeConverters {
    @Converter public A toA(    String in){
      return new A();
    }
  }
public static class A {
  }
}
