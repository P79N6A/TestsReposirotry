public class ErrorHandlerBuilderRefTest extends ContextTestSupport {
  ErrorHandlerBuilderRef errorHandlerBuilderRef=new ErrorHandlerBuilderRef("ref");
  @Override public boolean isUseRouteBuilder(){
    return true;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("ref",new DefaultErrorHandlerBuilder());
    return registry;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setErrorHandlerBuilder(errorHandlerBuilderRef);
    return context;
  }
  @Test public void testErrorHandlerBuilderRef() throws Exception {
    String uuid=UUID.randomUUID().toString();
    context.addRoutes(new TempRouteBuilder(uuid));
    checkObjectSize(2);
    context.stopRoute(uuid);
    context.removeRoute(uuid);
    checkObjectSize(1);
  }
  private void checkObjectSize(  int size) throws Exception {
    assertEquals("Get a wrong size of Route",size,context.getRoutes().size());
    Field field=ErrorHandlerBuilderRef.class.getDeclaredField("handlers");
    field.setAccessible(true);
    assertEquals("Get a wrong size of ErrorHandler",size,((Map<?,?>)field.get(errorHandlerBuilderRef)).size());
  }
private static class TempRouteBuilder extends RouteBuilder {
    final String routeId;
    TempRouteBuilder(    String routeId){
      this.routeId=routeId;
    }
    @Override public void configure() throws Exception {
      from("direct:foo").routeId(routeId).to("mock:foo");
    }
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").to("mock:result");
      }
    }
;
  }
}
