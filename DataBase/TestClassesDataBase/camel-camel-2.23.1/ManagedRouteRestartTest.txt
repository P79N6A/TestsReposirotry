public class ManagedRouteRestartTest extends ManagementTestSupport {
  private MyRoutePolicy myRoutePolicy=new MyRoutePolicy();
  @Test public void testRestartRoute() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    assertEquals(1,myRoutePolicy.getStart());
    assertEquals(0,myRoutePolicy.getStop());
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    String uri=(String)mbeanServer.getAttribute(on,"EndpointUri");
    assertEquals("direct://start",uri);
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be started",ServiceStatus.Started.name(),state);
    String uptime=(String)mbeanServer.getAttribute(on,"Uptime");
    assertNotNull(uptime);
    log.info("Uptime: {}",uptime);
    long uptimeMillis=(Long)mbeanServer.getAttribute(on,"UptimeMillis");
    assertTrue(uptimeMillis > 0);
    mbeanServer.invoke(on,"restart",null,null);
    registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be started",ServiceStatus.Started.name(),state);
    assertEquals(2,myRoutePolicy.getStart());
    assertEquals(1,myRoutePolicy.getStop());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routePolicy(myRoutePolicy).delayer(10).to("log:foo").to("mock:result");
      }
    }
;
  }
private final class MyRoutePolicy extends RoutePolicySupport {
    private int start;
    private int stop;
    @Override public void onStart(    Route route){
      start++;
    }
    @Override public void onStop(    Route route){
      stop++;
    }
    public int getStart(){
      return start;
    }
    public int getStop(){
      return stop;
    }
  }
}
