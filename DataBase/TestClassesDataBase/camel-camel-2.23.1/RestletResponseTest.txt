/** 
 * @version 
 */
public class RestletResponseTest extends RestletTestSupport {
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("restlet:http://localhost:" + portNum + "/users/{username}?restletMethod=POST").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String userName=exchange.getIn().getHeader("username",String.class);
            assertNotNull("userName should not be null",userName);
            exchange.getOut().setBody("{" + userName + "}");
            exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE,"417");
            exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/JSON");
            exchange.getOut().setHeader(HeaderConstants.HEADER_CACHE_CONTROL,"max-age=20");
          }
        }
);
        from("restlet:http://localhost:" + portNum + "/cached/{username}?restletMethod=POST").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String userName=exchange.getIn().getHeader("username",String.class);
            assertNotNull("userName should not be null",userName);
            exchange.getOut().setBody("{" + userName + "}");
            exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE,"417");
            exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/JSON");
            List<CacheDirective> cacheDirectives=new ArrayList<>();
            cacheDirectives.add(CacheDirective.maxAge(20));
            exchange.getOut().setHeader(HeaderConstants.HEADER_CACHE_CONTROL,cacheDirectives);
          }
        }
);
      }
    }
;
  }
  private void getCustomResponse(  String address) throws Exception {
    HttpResponse response=doExecute(new HttpPost("http://localhost:" + portNum + address));
    assertHttpResponse(response,417,"application/JSON");
    String s=response.getFirstHeader(HeaderConstants.HEADER_CACHE_CONTROL).toString().toLowerCase(Locale.US);
    assertEquals("Get a wrong http header","cache-control: max-age=20",s);
  }
  @Test public void testCustomResponse() throws Exception {
    getCustomResponse("/users/homer");
    getCustomResponse("/cached/homer");
  }
  @Test(expected=CamelExecutionException.class) public void testRestletProducer() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put("username","homer");
    String response=(String)template.requestBodyAndHeaders("restlet:http://localhost:" + portNum + "/users/{username}?restletMethod=POST","<request>message</request>",headers);
    assertEquals("The response is wrong ",response,"{homer}");
  }
}
