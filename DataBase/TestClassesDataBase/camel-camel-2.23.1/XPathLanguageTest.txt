/** 
 */
public class XPathLanguageTest extends CamelSpringTestSupport {
  private static final String KEY=XPathFactory.DEFAULT_PROPERTY_NAME + ":" + "http://java.sun.com/jaxp/xpath/dom";
  private boolean jvmAdequate=true;
  private String oldPropertyValue;
  @Override @Before public void setUp() throws Exception {
    if (!isJavaVendor("ibm")) {
      oldPropertyValue=System.setProperty(KEY,"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl");
    }
 else {
      jvmAdequate=false;
    }
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    if (oldPropertyValue != null) {
      System.setProperty(KEY,oldPropertyValue);
    }
 else {
      System.clearProperty(KEY);
    }
    super.tearDown();
  }
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/language/xpath/XPathLanguageTest.xml");
  }
  @Test public void testSpringDSLXPathSaxonFlag() throws Exception {
    if (!jvmAdequate) {
      return;
    }
    MockEndpoint mockEndpoint=getMockEndpoint("mock:testSaxonWithFlagResult");
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:testSaxonWithFlag","<a>Hello|there|Camel</a>");
    assertMockEndpointsSatisfied();
    Exchange received=mockEndpoint.getExchanges().get(0);
    Object body=received.getIn().getBody();
    assertEquals("Hello",body);
  }
  @Test public void testSpringDSLXPathFactory() throws Exception {
    if (!jvmAdequate) {
      return;
    }
    MockEndpoint mockEndpoint=getMockEndpoint("mock:testSaxonWithFactoryResult");
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:testSaxonWithFactory","<a>Hello|there|Camel</a>");
    assertMockEndpointsSatisfied();
    Exchange received=mockEndpoint.getExchanges().get(0);
    Object body=received.getIn().getBody();
    assertEquals("Hello",body);
  }
  @Ignore("See http://www.saxonica.com/documentation/index.html#!xpath-api/jaxp-xpath/factory") @Test public void testSpringDSLXPathObjectModel() throws Exception {
    if (!jvmAdequate) {
      return;
    }
    MockEndpoint mockEndpoint=getMockEndpoint("mock:testSaxonWithObjectModelResult");
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:testSaxonWithObjectModel","<a>Hello|there|Camel</a>");
    assertMockEndpointsSatisfied();
    Exchange received=mockEndpoint.getExchanges().get(0);
    Object body=received.getIn().getBody();
    assertEquals("Hello",body);
  }
  @Test public void testSpringDSLXPathSaxonFlagPredicate() throws Exception {
    if (!jvmAdequate) {
      return;
    }
    MockEndpoint mockEndpoint=getMockEndpoint("mock:testSaxonWithFlagResultPredicate");
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:testSaxonWithFlagPredicate","<a>Hello|there|Camel</a>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSpringDSLXPathFactoryPredicate() throws Exception {
    if (!jvmAdequate) {
      return;
    }
    MockEndpoint mockEndpoint=getMockEndpoint("mock:testSaxonWithFactoryResultPredicate");
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:testSaxonWithFactoryPredicate","<a>Hello|there|Camel</a>");
    assertMockEndpointsSatisfied();
  }
  @Ignore("See http://www.saxonica.com/documentation/index.html#!xpath-api/jaxp-xpath/factory") @Test public void testSpringDSLXPathObjectModelPredicate() throws Exception {
    if (!jvmAdequate) {
      return;
    }
    MockEndpoint mockEndpoint=getMockEndpoint("mock:testSaxonWithObjectModelResultPredicate");
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:testSaxonWithObjectModelPredicate","<a>Hello|there|Camel</a>");
    assertMockEndpointsSatisfied();
  }
}
