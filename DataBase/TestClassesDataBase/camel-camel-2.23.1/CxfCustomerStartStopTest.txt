@org.junit.Ignore public class CxfCustomerStartStopTest extends Assert {
  static final int PORT1=CXFTestSupport.getPort1();
  static final int PORT2=CXFTestSupport.getPort1();
  @Test public void startAndStopService() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("cxf:http://localhost:" + PORT1 + "/test?serviceClass=org.apache.camel.component.cxf.HelloService").to("log:endpoint");
      }
    }
);
    context.start();
    Thread.sleep(300);
    context.stop();
    Bus bus=BusFactory.getDefaultBus();
    JettyHTTPServerEngineFactory factory=bus.getExtension(JettyHTTPServerEngineFactory.class);
    JettyHTTPServerEngine engine=factory.retrieveJettyHTTPServerEngine(PORT1);
    assertNotNull("Jetty engine should be found there",engine);
    String orig=System.setProperty("org.apache.cxf.transports.http_jetty.DontClosePort","false");
    bus.shutdown(true);
    System.setProperty("org.apache.cxf.transports.http_jetty.DontClosePort",orig == null ? "true" : "false");
    engine=factory.retrieveJettyHTTPServerEngine(PORT1);
    assertNull("Jetty engine should be removed",engine);
  }
  @Test public void startAndStopServiceFromSpring() throws Exception {
    System.setProperty("CamelCxfConsumerContext.port2",Integer.toString(PORT2));
    ClassPathXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CamelCxfConsumerContext.xml");
    Bus bus=applicationContext.getBean("cxf",Bus.class);
    String orig=System.setProperty("org.apache.cxf.transports.http_jetty.DontClosePort","false");
    IOHelper.close(applicationContext);
    System.setProperty("org.apache.cxf.transports.http_jetty.DontClosePort",orig == null ? "true" : "false");
    JettyHTTPServerEngineFactory factory=bus.getExtension(JettyHTTPServerEngineFactory.class);
    JettyHTTPServerEngine engine=factory.retrieveJettyHTTPServerEngine(PORT2);
    assertNull("Jetty engine should be removed",engine);
  }
}
