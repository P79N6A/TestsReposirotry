public class Web3jConsumerCatchUpToLatestAndSubscribeToNewBlocksObservableMockTest extends Web3jMockTestSupport {
  @Mock private Observable<EthBlock> observable;
  @Test public void successTest() throws Exception {
    mockError.expectedMinimumMessageCount(0);
    mockResult.expectedMinimumMessageCount(1);
    Mockito.when(mockWeb3j.catchUpToLatestAndSubscribeToNewBlocksObservable(any(DefaultBlockParameter.class),any(Boolean.class))).thenReturn(observable);
    Mockito.when(observable.subscribe(any(),any(),any())).thenAnswer(new Answer(){
      public Subscription answer(      InvocationOnMock invocation){
        Object[] args=invocation.getArguments();
        ((Action1<EthBlock>)args[0]).call(new EthBlock());
        return subscription;
      }
    }
);
    context.start();
    mockResult.assertIsSatisfied();
    mockError.assertIsSatisfied();
  }
  @Test public void errorTest() throws Exception {
    mockResult.expectedMessageCount(0);
    mockError.expectedMinimumMessageCount(1);
    Mockito.when(mockWeb3j.catchUpToLatestAndSubscribeToNewBlocksObservable(any(DefaultBlockParameter.class),any(Boolean.class))).thenReturn(observable);
    Mockito.when(observable.subscribe(any(),any(),any())).thenAnswer(new Answer(){
      public Subscription answer(      InvocationOnMock invocation){
        Object[] args=invocation.getArguments();
        ((Action1<Throwable>)args[1]).call(new RuntimeException("Error"));
        return subscription;
      }
    }
);
    context.start();
    mockError.assertIsSatisfied();
    mockResult.assertIsSatisfied();
  }
  @Test public void doneTest() throws Exception {
    mockResult.expectedMessageCount(1);
    mockResult.expectedHeaderReceived("status","done");
    mockError.expectedMinimumMessageCount(0);
    Mockito.when(mockWeb3j.catchUpToLatestAndSubscribeToNewBlocksObservable(any(DefaultBlockParameter.class),any(Boolean.class))).thenReturn(observable);
    Mockito.when(observable.subscribe(any(),any(),any())).thenAnswer(new Answer(){
      public Subscription answer(      InvocationOnMock invocation){
        Object[] args=invocation.getArguments();
        ((Action0)args[2]).call();
        return subscription;
      }
    }
);
    context.start();
    mockError.assertIsSatisfied();
    mockResult.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error"));
        from(getUrl() + OPERATION.toLowerCase() + "="+ CATCH_UP_TO_LATEST_AND_SUBSCRIBE_TO_NEW_BLOCKS_OBSERVABLE+ "&fromBlock=5499965&fullTransactionObjects=true").to("mock:result");
      }
    }
;
  }
}
