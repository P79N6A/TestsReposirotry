/** 
 * Base class for unit testing using a FTPServer
 */
public abstract class FtpServerTestSupport extends BaseServerTestSupport {
  protected static final String FTP_ROOT_DIR="./target/res/home";
  protected static final File USERS_FILE=new File("./src/test/resources/users.properties");
  protected static final String DEFAULT_LISTENER="default";
  protected FtpServer ftpServer;
  protected boolean canTest;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory(FTP_ROOT_DIR);
    canTest=false;
    FtpServerFactory factory=createFtpServerFactory();
    if (factory != null) {
      ftpServer=factory.createServer();
      if (ftpServer != null) {
        ftpServer.start();
        canTest=true;
      }
    }
    try {
      super.setUp();
    }
 catch (    Exception e) {
      NoSuchAlgorithmException nsae=ObjectHelper.getException(NoSuchAlgorithmException.class,e);
      if (nsae != null) {
        canTest=false;
        String name=System.getProperty("os.name");
        String message=nsae.getMessage();
        log.warn("SunX509 is not avail on this platform [{}] Testing is skipped! Real cause: {}",name,message);
      }
 else {
        throw e;
      }
    }
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    if (ftpServer != null) {
      try {
        ftpServer.stop();
        ftpServer=null;
      }
 catch (      Exception e) {
      }
    }
  }
  protected boolean canTest(){
    return canTest;
  }
  protected FtpServerFactory createFtpServerFactory() throws Exception {
    assertTrue(USERS_FILE.exists());
    assertTrue("Port number is not initialized in an expected range: " + BaseServerTestSupport.port,BaseServerTestSupport.port >= 21000);
    NativeFileSystemFactory fsf=new NativeFileSystemFactory();
    fsf.setCreateHome(true);
    PropertiesUserManagerFactory pumf=new PropertiesUserManagerFactory();
    pumf.setAdminName("admin");
    pumf.setPasswordEncryptor(new ClearTextPasswordEncryptor());
    pumf.setFile(USERS_FILE);
    UserManager userMgr=pumf.createUserManager();
    ListenerFactory factory=new ListenerFactory();
    factory.setPort(BaseServerTestSupport.port);
    FtpServerFactory serverFactory=new FtpServerFactory();
    serverFactory.setUserManager(userMgr);
    serverFactory.setFileSystem(fsf);
    serverFactory.setConnectionConfig(new ConnectionConfigFactory().createConnectionConfig());
    serverFactory.addListener(DEFAULT_LISTENER,factory.createListener());
    return serverFactory;
  }
  public void sendFile(  String url,  Object body,  String fileName){
    template.sendBodyAndHeader(url,body,Exchange.FILE_NAME,simple(fileName));
  }
}
