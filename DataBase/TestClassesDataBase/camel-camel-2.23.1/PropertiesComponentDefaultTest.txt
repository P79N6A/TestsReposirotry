/** 
 * @version 
 */
public class PropertiesComponentDefaultTest extends ContextTestSupport {
  @Test public void testPropertiesComponentDefault() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=org/apache/camel/component/properties/bar.properties");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testPropertiesComponentDefaultNoFileFound() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=org/apache/camel/component/properties/unknown.properties");
      }
    }
);
    try {
      context.start();
      fail("Should throw exception");
    }
 catch (    FailedToCreateRouteException e) {
      ResolveEndpointFailedException cause=assertIsInstanceOf(ResolveEndpointFailedException.class,e.getCause());
      FileNotFoundException fnfe=assertIsInstanceOf(FileNotFoundException.class,cause.getCause());
      assertEquals("Properties file org/apache/camel/component/properties/unknown.properties not found in classpath",fnfe.getMessage());
    }
  }
  @Test public void testIgnoreMissingPropertyFilesOnClasspath() throws Exception {
    System.setProperty("bar.end","mock:bar");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=org/apache/camel/component/properties/unknown.properties&ignoreMissingLocation=true");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testIgnoreMissingPropertyFilesFromRegistry() throws Exception {
    System.setProperty("bar.end","mock:bar");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=ref:unknown.properties&ignoreMissingLocation=true");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testIgnoreMissingPropertyFilesFromFilePath() throws Exception {
    System.setProperty("bar.end","mock:bar");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=file:unknown.properties&ignoreMissingLocation=true");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testIgnoreMissingPropertySystemPropertyOnClasspath() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=${my.home}/unknown.properties,org/apache/camel/component/properties/bar.properties" + "&ignoreMissingLocation=true");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNotIgnoreMissingPropertySystemPropertyOnClasspath() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:bar.end?locations=${my.home}/unknown.properties,org/apache/camel/component/properties/bar.properties" + "&ignoreMissingLocation=false");
      }
    }
);
    try {
      context.start();
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      assertEquals("Cannot find JVM system property with key: my.home",e.getCause().getCause().getMessage());
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
