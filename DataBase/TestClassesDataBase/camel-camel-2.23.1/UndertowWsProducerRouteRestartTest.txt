public class UndertowWsProducerRouteRestartTest extends BaseUndertowTest {
  private static final String ROUTE_ID=UndertowWsProducerRouteRestartTest.class.getSimpleName();
  @Produce(uri="direct:shop") private ProducerTemplate producer;
  @Test public void testWSSuspendResumeRoute() throws Exception {
    context.suspendRoute(ROUTE_ID);
    context.resumeRoute(ROUTE_ID);
    doTestWSHttpCall();
  }
  @Test public void testWSStopStartRoute() throws Exception {
    context.stopRoute(ROUTE_ID);
    context.startRoute(ROUTE_ID);
    doTestWSHttpCall();
  }
  @Test public void testWSRemoveAddRoute() throws Exception {
    context.removeRoute(ROUTE_ID);
    context.addRoutes(createRouteBuilder());
    context.startRoute(ROUTE_ID);
    doTestWSHttpCall();
  }
  private void doTestWSHttpCall() throws Exception {
    final List<Object> received=new ArrayList<>();
    final CountDownLatch latch=new CountDownLatch(1);
    AsyncHttpClient c=new DefaultAsyncHttpClient();
    WebSocket websocket=c.prepareGet("ws://localhost:" + getPort() + "/shop").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){
      @Override public void onTextFrame(      String message,      boolean finalFragment,      int rsv){
        received.add(message);
        log.info("received --> " + message);
        latch.countDown();
      }
      @Override public void onOpen(      WebSocket websocket){
      }
      @Override public void onClose(      WebSocket websocket,      int code,      String reason){
      }
      @Override public void onError(      Throwable t){
        t.printStackTrace();
      }
    }
).build()).get();
    producer.sendBodyAndHeader("Beer on stock at Apache Mall",UndertowConstants.SEND_TO_ALL,"true");
    assertTrue(latch.await(10,TimeUnit.SECONDS));
    assertEquals(1,received.size());
    Object r=received.get(0);
    assertTrue(r instanceof String);
    assertEquals("Beer on stock at Apache Mall",r);
    websocket.sendCloseFrame();
    c.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:shop").id(ROUTE_ID).log(">>> Message received from Shopping center : ${body}").to("undertow:ws://localhost:" + getPort() + "/shop");
      }
    }
;
  }
}
