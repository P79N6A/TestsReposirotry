public class RouteScopedOnExceptionMultipleRouteBuildersTest extends ContextTestSupport {
  @Test public void testOnExceptionErrorHandlerRef() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:handled").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:exc").expectedMessageCount(1);
    template.sendBody("direct:foo","Hello Foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOnExceptionErrorHandlerRefFoo() throws Exception {
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:exc").expectedMessageCount(0);
    template.sendBody("direct:bar","Hello Bar");
    assertMockEndpointsSatisfied();
  }
  @Override @SuppressWarnings("deprecation") protected CamelContext createCamelContext() throws Exception {
    CamelContext context=new DefaultCamelContext(createRegistry());
    context.setErrorHandlerBuilder(new DeadLetterChannelBuilder("mock:dead"));
    context.setLazyLoadTypeConverters(isLazyLoadingTypeConverter());
    return context;
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").onException(IllegalArgumentException.class).handled(true).to("mock:handled").end().to("mock:bar").throwException(new IllegalArgumentException("Damn"));
      }
    }
,new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").onException(Exception.class).handled(true).to("mock:exc").end().to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
};
  }
}
