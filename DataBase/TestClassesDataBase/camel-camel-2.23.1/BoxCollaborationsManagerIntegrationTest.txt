/** 
 * Test class for {@link BoxCollaborationsManager} APIs.
 */
public class BoxCollaborationsManagerIntegrationTest extends AbstractBoxTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BoxCollaborationsManagerIntegrationTest.class);
  private static final String PATH_PREFIX=BoxApiCollection.getCollection().getApiName(BoxCollaborationsManagerApiMethod.class).getName();
  private static final String CAMEL_TEST_FOLDER="CamelTestFolder";
  private static final String CAMEL_TEST_COLLABORATOR_EMAIL="cameltest@example.com";
  private static final String CAMEL_TEST_COLLABORATOR_NAME="cameltest";
  private BoxCollaboration testCollaboration;
  @Test public void testAddFolderCollaborationByEmail() throws Exception {
    deleteTestCollaborator();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",testFolder.getID());
    headers.put("CamelBox.email",CAMEL_TEST_COLLABORATOR_EMAIL);
    headers.put("CamelBox.role",BoxCollaboration.Role.EDITOR);
    final com.box.sdk.BoxCollaboration result=requestBodyAndHeaders("direct://ADDFOLDERCOLLABORATIONBYEMAIL",testFolder.getID(),headers);
    assertNotNull("addFolderCollaboration result",result);
    LOG.debug("addFolderCollaboration: " + result);
  }
  @Test public void testAddFolderCollaboration() throws Exception {
    deleteTestCollaborator();
    BoxUser user=null;
    try {
      CreateUserParams params=new CreateUserParams();
      params.setSpaceAmount(1073741824);
      user=BoxUser.createAppUser(getConnection(),CAMEL_TEST_COLLABORATOR_NAME,params).getResource();
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.folderId",testFolder.getID());
      headers.put("CamelBox.collaborator",user);
      headers.put("CamelBox.role",BoxCollaboration.Role.EDITOR);
      final com.box.sdk.BoxCollaboration result=requestBodyAndHeaders("direct://ADDFOLDERCOLLABORATION",testFolder.getID(),headers);
      assertNotNull("addFolderCollaboration result",result);
      LOG.debug("addFolderCollaboration: " + result);
    }
 catch (    BoxAPIException e) {
      throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s",e.getResponseCode(),e.getResponse()),e);
    }
 finally {
      if (user != null) {
        user.delete(false,true);
      }
    }
  }
  @Test public void testGetCollaborationInfo() throws Exception {
    final com.box.sdk.BoxCollaboration.Info result=requestBody("direct://GETCOLLABORATIONINFO",testCollaboration.getID());
    assertNotNull("getCollaborationInfo result",result);
    LOG.debug("getCollaborationInfo: " + result);
  }
  @Test public void testGetFolderCollaborations() throws Exception {
    @SuppressWarnings("rawtypes") final java.util.Collection result=requestBody("direct://GETFOLDERCOLLABORATIONS",testFolder.getID());
    assertNotNull("getFolderCollaborations result",result);
    LOG.debug("getFolderCollaborations: " + result);
  }
  @SuppressWarnings("rawtypes") @Test public void testGetPendingCollaborations() throws Exception {
    final java.util.Collection result=requestBody("direct://GETPENDINGCOLLABORATIONS",null);
    assertNotNull("getPendingCollaborations result",result);
    LOG.debug("getPendingCollaborations: " + result);
  }
  @Test public void testUpdateCollaborationInfo() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.collaborationId",testCollaboration.getID());
    BoxCollaboration.Info info=testCollaboration.getInfo();
    info.setRole(BoxCollaboration.Role.PREVIEWER);
    headers.put("CamelBox.info",info);
    final com.box.sdk.BoxCollaboration result=requestBodyAndHeaders("direct://UPDATECOLLABORATIONINFO",null,headers);
    assertNotNull("updateCollaborationInfo result",result);
    assertNotNull("updateCollaborationInfo info",result.getInfo());
    assertEquals("updateCollaborationInfo info",BoxCollaboration.Role.PREVIEWER,result.getInfo().getRole());
    LOG.debug("updateCollaborationInfo: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ADDFOLDERCOLLABORATIONBYEMAIL").to("box://" + PATH_PREFIX + "/addFolderCollaborationByEmail");
        from("direct://ADDFOLDERCOLLABORATION").to("box://" + PATH_PREFIX + "/addFolderCollaboration");
        from("direct://DELETECOLLABORATION").to("box://" + PATH_PREFIX + "/deleteCollaboration?inBody=collaborationId");
        from("direct://GETCOLLABORATIONINFO").to("box://" + PATH_PREFIX + "/getCollaborationInfo?inBody=collaborationId");
        from("direct://GETFOLDERCOLLABORATIONS").to("box://" + PATH_PREFIX + "/getFolderCollaborations?inBody=folderId");
        from("direct://GETPENDINGCOLLABORATIONS").to("box://" + PATH_PREFIX + "/getPendingCollaborations");
        from("direct://UPDATECOLLABORATIONINFO").to("box://" + PATH_PREFIX + "/updateCollaborationInfo");
      }
    }
;
  }
  @Before public void setupTest() throws Exception {
    createTestFolder();
    createTestCollaborator();
  }
  @After public void teardownTest(){
    deleteTestCollaborator();
    deleteTestFolder();
  }
  public BoxAPIConnection getConnection(){
    BoxEndpoint endpoint=(BoxEndpoint)context().getEndpoint("box://" + PATH_PREFIX + "/addFolderCollaboration");
    return endpoint.getBoxConnection();
  }
  private void createTestFolder() throws FileNotFoundException {
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    testFolder=rootFolder.createFolder(CAMEL_TEST_FOLDER).getResource();
  }
  private void createTestCollaborator(){
    testCollaboration=testFolder.collaborate(CAMEL_TEST_COLLABORATOR_EMAIL,BoxCollaboration.Role.EDITOR).getResource();
  }
  private void deleteTestCollaborator(){
    if (testCollaboration != null) {
      testCollaboration.delete();
      testCollaboration=null;
    }
  }
}
