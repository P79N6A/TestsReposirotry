/** 
 * @version 
 */
@Ignore("This test can cause CI servers to hang") public class Netty2978IssueTest extends BaseNettyTest {
  @Test public void testNetty2978() throws Exception {
    CamelClient client=new CamelClient(context);
    try {
      for (int i=0; i < 1000; i++) {
        Object reply=client.lookup(i);
        assertEquals("Bye " + i,reply);
      }
    }
  finally {
      client.close();
    }
  }
  @Test public void testNetty2978Concurrent() throws Exception {
    final CamelClient client=new CamelClient(context);
    try {
      final List<Callable<String>> callables=new ArrayList<>();
      for (int count=0; count < 1000; count++) {
        final int i=count;
        callables.add(new Callable<String>(){
          public String call(){
            return client.lookup(i);
          }
        }
);
      }
      final ExecutorService executorService=Executors.newFixedThreadPool(10);
      final List<Future<String>> results=executorService.invokeAll(callables);
      final Set<String> replies=new HashSet<>();
      for (      Future<String> future : results) {
        String reply=future.get(60,TimeUnit.SECONDS);
        assertTrue(reply.startsWith("Bye "));
        replies.add(reply);
      }
      assertEquals(1000,replies.size());
      executorService.shutdownNow();
    }
  finally {
      client.close();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4:tcp://localhost:{{port}}?sync=true").process(new Processor(){
          public void process(          final Exchange exchange){
            String body=exchange.getIn().getBody(String.class);
            exchange.getOut().setBody("Bye " + body);
          }
        }
);
      }
    }
;
  }
private static final class CamelClient {
    private final Endpoint endpoint;
    private final ProducerTemplate producerTemplate;
    CamelClient(    CamelContext camelContext){
      this.endpoint=camelContext.getEndpoint("netty4:tcp://localhost:{{port}}?sync=true");
      this.producerTemplate=camelContext.createProducerTemplate();
    }
    public void close() throws Exception {
      producerTemplate.stop();
    }
    public String lookup(    int num){
      return producerTemplate.requestBody(endpoint,num,String.class);
    }
  }
}
