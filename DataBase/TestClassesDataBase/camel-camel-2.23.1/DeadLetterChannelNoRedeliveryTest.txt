/** 
 */
public class DeadLetterChannelNoRedeliveryTest extends ContextTestSupport {
  private static volatile int counter;
  @Test public void testDLCNoRedelivery() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals("Only the original attempt",1,counter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(0));
        from("direct:start").to("mock:a").process(new MyFailProcessor()).to("mock:b");
      }
    }
;
  }
public static final class MyFailProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      counter++;
      throw new IllegalArgumentException("Forced");
    }
  }
}
