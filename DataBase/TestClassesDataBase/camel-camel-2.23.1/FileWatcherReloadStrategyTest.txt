public class FileWatcherReloadStrategyTest extends ContextTestSupport {
  private FileWatcherReloadStrategy reloadStrategy;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    reloadStrategy=new FileWatcherReloadStrategy();
    reloadStrategy.setFolder("target/dummy");
    reloadStrategy.setPollTimeout(100);
    context.setReloadStrategy(reloadStrategy);
    return context;
  }
  @Test public void testAddNewRoute() throws Exception {
    deleteDirectory("target/dummy");
    createDirectory("target/dummy");
    context.start();
    assertEquals(0,context.getRoutes().size());
    log.info("Copying file to target/dummy");
    FileUtil.copyFile(new File("src/test/resources/org/apache/camel/model/barRoute.xml"),new File("target/dummy/barRoute.xml"));
    await().atMost(20,TimeUnit.SECONDS).untilAsserted(() -> assertEquals(1,context.getRoutes().size()));
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:bar","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUpdateExistingRoute() throws Exception {
    deleteDirectory("target/dummy");
    createDirectory("target/dummy");
    final CountDownLatch latch=new CountDownLatch(2);
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      @Override public void notify(      EventObject event) throws Exception {
        latch.countDown();
      }
      @Override public boolean isEnabled(      EventObject event){
        return event instanceof RouteAddedEvent;
      }
    }
);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").to("mock:foo");
      }
    }
);
    context.start();
    assertEquals(1,context.getRoutes().size());
    getMockEndpoint("mock:bar").expectedMessageCount(0);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    template.sendBody("direct:bar","Hello World");
    assertMockEndpointsSatisfied();
    resetMocks();
    log.info("Copying file to target/dummy");
    FileUtil.copyFile(new File("src/test/resources/org/apache/camel/model/barRoute.xml"),new File("target/dummy/barRoute.xml"));
    boolean done=latch.await(20,TimeUnit.SECONDS);
    assertTrue("Should reload file within 20 seconds",done);
    Thread.sleep(500);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    template.sendBody("direct:bar","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUpdateXmlRoute() throws Exception {
    deleteDirectory("target/dummy");
    createDirectory("target/dummy");
    final CountDownLatch latch=new CountDownLatch(2);
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      @Override public void notify(      EventObject event) throws Exception {
        latch.countDown();
      }
      @Override public boolean isEnabled(      EventObject event){
        return event instanceof RouteAddedEvent;
      }
    }
);
    context.start();
    assertEquals(0,context.getRoutes().size());
    log.info("Copying file to target/dummy");
    FileUtil.copyFile(new File("src/test/resources/org/apache/camel/model/barRoute.xml"),new File("target/dummy/barRoute.xml"));
    await().atMost(20,TimeUnit.SECONDS).untilAsserted(() -> assertEquals(1,context.getRoutes().size()));
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:bar","Hello World");
    assertMockEndpointsSatisfied();
    resetMocks();
    log.info("Updating file in target/dummy");
    FileUtil.copyFile(new File("src/test/resources/org/apache/camel/model/barUpdatedRoute.xml"),new File("target/dummy/barRoute.xml"));
    boolean done=latch.await(20,TimeUnit.SECONDS);
    assertTrue("Should reload file within 20 seconds",done);
    Thread.sleep(500);
    getMockEndpoint("mock:bar").expectedBodiesReceived("Bye Camel");
    template.sendBody("direct:bar","Camel");
    assertMockEndpointsSatisfied();
  }
}
