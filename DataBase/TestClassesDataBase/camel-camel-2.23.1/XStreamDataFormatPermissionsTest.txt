public class XStreamDataFormatPermissionsTest extends CamelTestSupport {
  protected static final String XML_PURCHASE_ORDER="<org.apache.camel.dataformat.xstream.PurchaseOrder>" + "<name>foo</name>" + "<price>10.0</price>"+ "<amount>1.0</amount>"+ "</org.apache.camel.dataformat.xstream.PurchaseOrder>";
  protected static final String XML_PURCHASE_ORDERS_LIST="<list>" + "<org.apache.camel.dataformat.xstream.PurchaseOrder>" + "<name>foo</name>"+ "<price>10.0</price>"+ "<amount>1.0</amount>"+ "</org.apache.camel.dataformat.xstream.PurchaseOrder>"+ "<org.apache.camel.dataformat.xstream.PurchaseOrder>"+ "<name>bar</name>"+ "<price>9.0</price>"+ "<amount>2.0</amount>"+ "</org.apache.camel.dataformat.xstream.PurchaseOrder>"+ "</list>";
  @Test public void testNone(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    try {
      xStream.fromXML(XML_PURCHASE_ORDER);
      fail("should fail to unmarshall");
    }
 catch (    ForbiddenClassException e) {
    }
  }
  @Test public void testDeny(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("-org.apache.camel.dataformat.xstream.PurchaseOrder");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    try {
      xStream.fromXML(XML_PURCHASE_ORDER);
      fail("should fail to unmarshall");
    }
 catch (    ForbiddenClassException e) {
    }
  }
  @Test public void testAllow(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("org.apache.camel.dataformat.xstream.PurchaseOrder");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    Object po=xStream.fromXML(XML_PURCHASE_ORDER);
    assertNotNull(po);
    po=xStream.fromXML(XML_PURCHASE_ORDERS_LIST);
    assertNotNull(po);
  }
  @Test public void testAllowAndDeny(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("org.apache.camel.dataformat.xstream.PurchaseOrder,-org.apache.camel.dataformat.xstream.*");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    try {
      xStream.fromXML(XML_PURCHASE_ORDER);
      fail("should fail to unmarshall");
    }
 catch (    ForbiddenClassException e) {
    }
  }
  @Test public void testDenyAndAllowDeny(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("-org.apache.camel.dataformat.xstream.*,org.apache.camel.dataformat.xstream.PurchaseOrder");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    Object po=xStream.fromXML(XML_PURCHASE_ORDER);
    assertNotNull(po);
    po=xStream.fromXML(XML_PURCHASE_ORDERS_LIST);
    assertNotNull(po);
  }
  @Test public void testAllowAny(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("*");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    Object po=xStream.fromXML(XML_PURCHASE_ORDER);
    assertNotNull(po);
    po=xStream.fromXML(XML_PURCHASE_ORDERS_LIST);
    assertNotNull(po);
  }
  @Test public void testAllowAnyAndDeny(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("*,-org.apache.camel.dataformat.xstream.PurchaseOrder");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    try {
      xStream.fromXML(XML_PURCHASE_ORDER);
      fail("should fail to unmarshall");
    }
 catch (    ForbiddenClassException e) {
    }
  }
  @Test public void testDenyAny(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("-*");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    try {
      xStream.fromXML(XML_PURCHASE_ORDER);
      fail("should fail to unmarshall");
    }
 catch (    ForbiddenClassException e) {
    }
  }
  @Test public void testDenyAnyAndAllow(){
    XStreamDataFormat xStreamDataFormat=new XStreamDataFormat();
    xStreamDataFormat.setPermissions("-*,org.apache.camel.dataformat.xstream.PurchaseOrder");
    XStream xStream=xStreamDataFormat.createXStream(context.getClassResolver(),context.getApplicationContextClassLoader());
    Object po=xStream.fromXML(XML_PURCHASE_ORDER);
    assertNotNull(po);
    try {
      xStream.fromXML(XML_PURCHASE_ORDERS_LIST);
      fail("should fail to unmarshall");
    }
 catch (    ForbiddenClassException e) {
    }
  }
}
