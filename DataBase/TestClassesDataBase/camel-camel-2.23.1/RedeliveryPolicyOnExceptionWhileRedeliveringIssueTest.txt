/** 
 */
public class RedeliveryPolicyOnExceptionWhileRedeliveringIssueTest extends ContextTestSupport {
private class FirstException extends Exception {
    private static final long serialVersionUID=1L;
  }
private class SecondException extends Exception {
    private static final long serialVersionUID=1L;
  }
private class ExceptionThrowingProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      String camelRedeliveryCounter=exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER,String.class);
      int redeliveries=camelRedeliveryCounter == null ? 0 : Integer.valueOf(camelRedeliveryCounter);
switch (redeliveries) {
case 0:
        throw new FirstException();
case 1:
      throw new SecondException();
default :
    break;
}
}
}
@Test public void testMessageShouldGoToError() throws Exception {
String msg="payload";
getMockEndpoint("mock:destination").expectedMessageCount(0);
getMockEndpoint("mock:error").expectedMessageCount(1);
getMockEndpoint("mock:error").expectedBodiesReceived(msg);
template.sendBody("direct:source",msg);
assertMockEndpointsSatisfied();
}
@Override protected RouteBuilder createRouteBuilder() throws Exception {
return new RouteBuilder(){
@Override public void configure() throws Exception {
  from("direct:source").onException(FirstException.class).redeliveryDelay(0).maximumRedeliveries(-1).handled(true).end().onException(SecondException.class).handled(true).to("mock:error").end().process(new ExceptionThrowingProcessor()).to("mock:destination");
}
}
;
}
}
