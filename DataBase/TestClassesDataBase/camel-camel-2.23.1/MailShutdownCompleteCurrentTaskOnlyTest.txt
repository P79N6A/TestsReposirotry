/** 
 * Unit test for shutdown.
 */
public class MailShutdownCompleteCurrentTaskOnlyTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    prepareMailbox();
    super.setUp();
  }
  @Test public void testShutdownCompleteCurrentTaskOnly() throws Exception {
    context.getShutdownStrategy().setTimeout(20);
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMinimumMessageCount(1);
    bar.setResultWaitTime(3000);
    assertMockEndpointsSatisfied();
    context.stop();
    assertTrue("Should NOT complete all messages, was: " + bar.getReceivedCounter(),bar.getReceivedCounter() < 5);
  }
  private void prepareMailbox() throws Exception {
    Mailbox.clearAll();
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore("pop3");
    store.connect("localhost",25,"jones","secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    Message[] messages=new Message[5];
    for (int i=0; i < 5; i++) {
      messages[i]=new MimeMessage(sender.getSession());
      messages[i].setText("Message " + i);
      messages[i].setHeader("Message-ID","" + i);
    }
    folder.appendMessages(messages);
    folder.close(true);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100").routeId("route1").shutdownRunningTask(ShutdownRunningTask.CompleteCurrentTaskOnly).delay(1000).to("seda:foo");
        from("seda:foo").routeId("route2").to("mock:bar");
      }
    }
;
  }
}
