/** 
 * @version 
 */
public class MailConvertersTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    Mailbox.clearAll();
    super.setUp();
  }
  @Test public void testMailMessageToString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:a","Hello World","Subject","Camel rocks");
    assertMockEndpointsSatisfied();
    Message mailMessage=mock.getReceivedExchanges().get(0).getIn().getBody(MailMessage.class).getMessage();
    assertNotNull(mailMessage);
    String s=MailConverters.toString(mailMessage);
    assertEquals("Hello World",s);
  }
  @Test public void testMailMessageToInputStream() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:a","Hello World","Subject","Camel rocks");
    assertMockEndpointsSatisfied();
    Message mailMessage=mock.getReceivedExchanges().get(0).getIn().getBody(MailMessage.class).getMessage();
    assertNotNull(mailMessage);
    InputStream is=MailConverters.toInputStream(mailMessage);
    assertNotNull(is);
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,is));
  }
  @Test public void testMultipartToInputStream() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.send("direct:a",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
        exchange.getIn().setHeader(MailConstants.MAIL_ALTERNATIVE_BODY,"Alternative World");
      }
    }
);
    assertMockEndpointsSatisfied();
    Message mailMessage=mock.getReceivedExchanges().get(0).getIn().getBody(MailMessage.class).getMessage();
    assertNotNull(mailMessage);
    Object content=mailMessage.getContent();
    assertIsInstanceOf(Multipart.class,content);
    InputStream is=mock.getReceivedExchanges().get(0).getIn().getBody(InputStream.class);
    assertNotNull(is);
    assertEquals("Alternative World",context.getTypeConverter().convertTo(String.class,is));
  }
  @Test public void testMultipartToByteArray() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.send("direct:a",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
        exchange.getIn().setHeader(MailConstants.MAIL_ALTERNATIVE_BODY,"Alternative World");
      }
    }
);
    assertMockEndpointsSatisfied();
    Message mailMessage=mock.getReceivedExchanges().get(0).getIn().getBody(MailMessage.class).getMessage();
    assertNotNull(mailMessage);
    Object content=mailMessage.getContent();
    assertIsInstanceOf(Multipart.class,content);
    byte[] is=mock.getReceivedExchanges().get(0).getIn().getBody(byte[].class);
    assertNotNull(is);
    assertEquals("Alternative World",context.getTypeConverter().convertTo(String.class,is));
  }
  @Test public void testMultipartToString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.send("direct:a",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
        exchange.getIn().setHeader(MailConstants.MAIL_ALTERNATIVE_BODY,"Alternative World");
      }
    }
);
    assertMockEndpointsSatisfied();
    Message mailMessage=mock.getReceivedExchanges().get(0).getIn().getBody(MailMessage.class).getMessage();
    assertNotNull(mailMessage);
    Object content=mailMessage.getContent();
    Multipart mp=assertIsInstanceOf(Multipart.class,content);
    String s=MailConverters.toString(mp);
    assertEquals("Alternative World",s);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").to("smtp://localhost?username=james@localhost");
        from("pop3://localhost?username=james&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result");
      }
    }
;
  }
}
