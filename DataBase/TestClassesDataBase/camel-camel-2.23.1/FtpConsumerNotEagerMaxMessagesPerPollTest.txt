/** 
 * @version 
 */
public class FtpConsumerNotEagerMaxMessagesPerPollTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/poll/?password=admin&delay=6000&delete=true"+ "&sortBy=file:name&maxMessagesPerPoll=2&eagerMaxMessagesPerPoll=false";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  @Test public void testMaxMessagesPerPoll() throws Exception {
    context.startRoute("foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("AAA","BBB");
    mock.setResultWaitTime(4000);
    mock.expectedPropertyReceived(Exchange.BATCH_SIZE,2);
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedBodiesReceived("CCC");
    mock.expectedPropertyReceived(Exchange.BATCH_SIZE,1);
    assertMockEndpointsSatisfied();
  }
  private void prepareFtpServer() throws Exception {
    sendFile(getFtpUrl(),"CCC","ccc.txt");
    sendFile(getFtpUrl(),"AAA","aaa.txt");
    sendFile(getFtpUrl(),"BBB","bbb.txt");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).noAutoStartup().routeId("foo").to("mock:result");
      }
    }
;
  }
}
