public class CXFWsdlOnlyPayloadModeNoSpringTest extends CamelTestSupport {
  protected static final String SERVICE_NAME_PROP="serviceName=";
  protected static final String PORT_NAME_PROP="portName={http://camel.apache.org/wsdl-first}soap";
  protected static final String WSDL_URL_PROP="wsdlURL=classpath:person.wsdl";
  protected Endpoint endpoint;
  protected int port1=CXFTestSupport.getPort1();
  protected int port2=CXFTestSupport.getPort2();
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @Before public void startService(){
    endpoint=Endpoint.publish("http://localhost:" + port1 + "/"+ getClass().getSimpleName()+ "/PersonService",new PersonImpl());
  }
  @After public void stopService(){
    if (endpoint != null) {
      endpoint.stop();
    }
  }
  protected void checkSOAPAction(  Exchange exchange){
    assertNull(exchange.getIn().getHeader("SOAPAction"));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    final String cn=getClass().getSimpleName();
    return new RouteBuilder(){
      public void configure(){
        from("cxf://http://localhost:" + port2 + "/"+ cn+ "/PersonService?"+ PORT_NAME_PROP+ "&"+ SERVICE_NAME_PROP+ getServiceName()+ "&"+ WSDL_URL_PROP+ "&dataFormat="+ getDataFormat()).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            checkSOAPAction(exchange);
          }
        }
).to("cxf://http://localhost:" + port1 + "/"+ cn+ "/PersonService?"+ PORT_NAME_PROP+ "&"+ SERVICE_NAME_PROP+ getServiceName()+ "&"+ WSDL_URL_PROP+ "&dataFormat="+ getDataFormat());
      }
    }
;
  }
  protected String getDataFormat(){
    return "PAYLOAD";
  }
  @Test public void testRoutes() throws Exception {
    URL wsdlURL=getClass().getClassLoader().getResource("person.wsdl");
    PersonService ss=new PersonService(wsdlURL,QName.valueOf(getServiceName()));
    Person client=ss.getSoap();
    Client c=ClientProxy.getClient(client);
    ((BindingProvider)client).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,"http://localhost:" + port1 + "/"+ getClass().getSimpleName()+ "/PersonService");
    c.getInInterceptors().add(new LoggingInInterceptor());
    c.getOutInterceptors().add(new LoggingOutInterceptor());
    Holder<String> personId=new Holder<>();
    personId.value="hello";
    Holder<String> ssn=new Holder<>();
    Holder<String> name=new Holder<>();
    client.getPerson(personId,ssn,name);
    assertEquals("Bonjour",name.value);
  }
  @Test public void testApplicationFault(){
    URL wsdlURL=getClass().getClassLoader().getResource("person.wsdl");
    PersonService ss=new PersonService(wsdlURL,QName.valueOf(getServiceName()));
    Person client=ss.getSoap();
    ((BindingProvider)client).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,"http://localhost:" + port1 + "/"+ getClass().getSimpleName()+ "/PersonService");
    Client c=ClientProxy.getClient(client);
    c.getInInterceptors().add(new LoggingInInterceptor());
    c.getOutInterceptors().add(new LoggingOutInterceptor());
    Holder<String> personId=new Holder<>();
    personId.value="";
    Holder<String> ssn=new Holder<>();
    Holder<String> name=new Holder<>();
    Throwable t=null;
    try {
      client.getPerson(personId,ssn,name);
      fail("expect UnknownPersonFault");
    }
 catch (    UnknownPersonFault e) {
      t=e;
    }
    assertNotNull(t);
    assertTrue(t instanceof UnknownPersonFault);
  }
  protected String getServiceName(){
    return "{http://camel.apache.org/wsdl-first}PersonService";
  }
}
