@FixMethodOrder(MethodSorters.NAME_ASCENDING) public class AckModeNoneTest extends PubsubTestSupport {
  private static final String TOPIC_NAME="ackNoneTopic";
  private static final String SUBSCRIPTION_NAME="ackNoneSub";
  @EndpointInject(uri="direct:in") private Endpoint directIn;
  @EndpointInject(uri="google-pubsub:{{project.id}}:" + TOPIC_NAME) private Endpoint pubsubTopic;
  @EndpointInject(uri="google-pubsub:{{project.id}}:" + SUBSCRIPTION_NAME + "?ackMode=NONE") private Endpoint pubsubSub;
  @EndpointInject(uri="mock:receiveResult") private MockEndpoint receiveResult;
  @Produce(uri="direct:in") private ProducerTemplate producer;
  @BeforeClass public static void createPubSub() throws Exception {
    createTopicSubscriptionPair(TOPIC_NAME,SUBSCRIPTION_NAME,1);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(directIn).routeId("AckNONE_SEND").to(pubsubTopic);
        from(pubsubSub).routeId("AckNONE_RECV").autoStartup(true).to(receiveResult);
      }
    }
;
  }
  /** 
 * Expecting two messages received for the one sent. With Ack mode set to NONE the same message will be delivered again and again, after the deadline expiration. Setting deadline to 1 second and waiting for more than 2 to ensure the message has been resent.
 * @throws Exception
 */
  @Test public void singleMessage() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("ACK NONE  : " + exchange.getExchangeId());
    receiveResult.expectedMessageCount(2);
    producer.send(exchange);
    receiveResult.assertIsSatisfied(4000);
  }
}
