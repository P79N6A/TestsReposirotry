/** 
 * @version 
 */
public class OnCompletionContainsTest extends ContextTestSupport {
class SimpleSynchronizationAdapter extends SynchronizationAdapter {
    private final String endPoint;
    private final String body;
    SimpleSynchronizationAdapter(    String endPoint,    String body){
      this.endPoint=endPoint;
      this.body=body;
    }
    @Override public void onDone(    Exchange exchange){
      template.sendBody(endPoint,body);
    }
    @Override public String toString(){
      return body;
    }
  }
  @Test public void testOnCompletionContainsTest() throws Exception {
    getMockEndpoint("mock:sync").expectedBodiesReceived("C","B","B","A","Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onCompletion().to("mock:sync");
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            SynchronizationAdapter adapter=new SimpleSynchronizationAdapter("mock:sync","A");
            exchange.addOnCompletion(adapter);
            if (!exchange.containsOnCompletion(adapter)) {
              exchange.addOnCompletion(adapter);
            }
            adapter=new SimpleSynchronizationAdapter("mock:sync","B");
            exchange.addOnCompletion(adapter);
            if (exchange.containsOnCompletion(adapter)) {
              exchange.addOnCompletion(adapter);
            }
            exchange.addOnCompletion(new SynchronizationAdapter(){
              @Override public void onDone(              Exchange exchange){
                template.sendBody("mock:sync","C");
              }
              @Override public String toString(){
                return "C";
              }
            }
);
          }
        }
).to("mock:result");
      }
    }
;
  }
}
