/** 
 * @version 
 */
public class IdempotentConsumerUsingCustomRepositoryTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  protected IdempotentRepository<String> customRepo=new MyRepo();
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").idempotentConsumer(header("messageId"),customRepo).to("mock:result");
      }
    }
;
  }
  @Test public void testDuplicateMessagesAreFilteredOut() throws Exception {
    resultEndpoint.expectedBodiesReceived("one","two","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("4","four");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
    assertTrue(customRepo.contains("1"));
    assertTrue(customRepo.contains("2"));
    assertTrue(customRepo.contains("3"));
    assertTrue(customRepo.contains("4"));
    assertFalse(customRepo.contains("5"));
    customRepo.clear();
    assertFalse(customRepo.contains("1"));
    assertFalse(customRepo.contains("2"));
    assertFalse(customRepo.contains("3"));
    assertFalse(customRepo.contains("4"));
    assertFalse(customRepo.contains("5"));
  }
  protected void sendMessage(  final Object messageId,  final Object body){
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("messageId",messageId);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start");
    resultEndpoint=getMockEndpoint("mock:result");
  }
private static final class MyRepo implements IdempotentRepository<String> {
    private final Map<String,String> cache=new HashMap<>();
    private MyRepo(){
      cache.put("4","4");
    }
    public boolean add(    String key){
      if (cache.containsKey(key)) {
        return false;
      }
 else {
        cache.put(key,key);
        return true;
      }
    }
    @Override public void clear(){
      cache.clear();
    }
    public boolean contains(    String key){
      return cache.containsKey(key);
    }
    public boolean remove(    String key){
      return cache.remove(key) != null;
    }
    public boolean confirm(    String key){
      return true;
    }
    public void start() throws Exception {
    }
    public void stop() throws Exception {
    }
  }
}
