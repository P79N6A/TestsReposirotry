/** 
 * Unit test for scan stream file
 */
public class ScanStreamFileTest extends CamelTestSupport {
  private File file;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/stream");
    createDirectory("target/stream");
    file=new File("target/stream/scanstreamfile.txt");
    file.createNewFile();
    super.setUp();
  }
  @Test public void testScanFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(2);
    mock.message(0).header(StreamConstants.STREAM_INDEX).isEqualTo(0);
    mock.message(0).header(StreamConstants.STREAM_COMPLETE).isEqualTo(false);
    mock.message(1).header(StreamConstants.STREAM_INDEX).isEqualTo(1);
    mock.message(1).header(StreamConstants.STREAM_COMPLETE).isEqualTo(false);
    context.startAllRoutes();
    FileOutputStream fos=new FileOutputStream(file);
    try {
      fos.write("Hello\n".getBytes());
      Thread.sleep(150);
      fos.write("World\n".getBytes());
      Thread.sleep(1000);
    }
  finally {
      fos.close();
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testScanRefreshedFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(5);
    FileOutputStream fos=refreshFile(null);
    try {
      fos.write("Hello\nWorld\n".getBytes());
      Thread.sleep(150);
      context.startAllRoutes();
      Thread.sleep(1500);
      fos=refreshFile(fos);
      fos.write("Bye\nWorld\n".getBytes());
      fos.write("!\n".getBytes());
      Thread.sleep(1500);
    }
  finally {
      fos.close();
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testScanFileAlreadyWritten() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(4);
    FileOutputStream fos=refreshFile(null);
    try {
      fos.write("Hello\nthere\nWorld\n!\n".getBytes());
      context.startAllRoutes();
      Thread.sleep(1000);
    }
  finally {
      fos.close();
    }
    assertMockEndpointsSatisfied();
  }
  private FileOutputStream refreshFile(  FileOutputStream fos) throws Exception {
    if (fos != null) {
      fos.close();
    }
    file.delete();
    file.createNewFile();
    return new FileOutputStream(file);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("stream:file?fileName=target/stream/scanstreamfile.txt&scanStream=true&scanStreamDelay=200&retry=true&fileWatcher=true").routeId("foo").noAutoStartup().to("log:line").to("mock:result");
      }
    }
;
  }
}
