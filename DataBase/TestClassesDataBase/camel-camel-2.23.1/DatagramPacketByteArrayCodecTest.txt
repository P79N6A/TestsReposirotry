public class DatagramPacketByteArrayCodecTest {
  private static final String VALUE="~!Camel rocks@%";
  @Test public void testDecoder(){
    ByteBuf buf=Unpooled.buffer();
    buf.writeBytes(VALUE.getBytes());
    ByteBuf input=buf.duplicate();
    AddressedEnvelope<Object,InetSocketAddress> addressedEnvelop=new DefaultAddressedEnvelope<>(input,new InetSocketAddress(8888));
    EmbeddedChannel channel=new EmbeddedChannel(ChannelHandlerFactories.newByteArrayDecoder("udp").newChannelHandler());
    Assert.assertTrue(channel.writeInbound(addressedEnvelop));
    Assert.assertTrue(channel.finish());
    AddressedEnvelope<Object,InetSocketAddress> result=(AddressedEnvelope)channel.readInbound();
    Assert.assertEquals(result.recipient().getPort(),addressedEnvelop.recipient().getPort());
    Assert.assertTrue(result.content() instanceof byte[]);
    Assert.assertEquals(VALUE,new String((byte[])result.content()));
    Assert.assertNull(channel.readInbound());
  }
  @Test public void testEncoder(){
    ByteBuf buf=Unpooled.buffer();
    buf.writeBytes(VALUE.getBytes());
    AddressedEnvelope<Object,InetSocketAddress> addressedEnvelop=new DefaultAddressedEnvelope<>(VALUE.getBytes(),new InetSocketAddress(8888));
    EmbeddedChannel channel=new EmbeddedChannel(ChannelHandlerFactories.newByteArrayEncoder("udp").newChannelHandler());
    Assert.assertTrue(channel.writeOutbound(addressedEnvelop));
    Assert.assertTrue(channel.finish());
    AddressedEnvelope output=(AddressedEnvelope)channel.readOutbound();
    Assert.assertTrue(output.content() instanceof ByteBuf);
    ByteBuf resultContent=(ByteBuf)output.content();
    Assert.assertEquals(VALUE,new String(resultContent.array()));
    Assert.assertNull(channel.readOutbound());
  }
}
