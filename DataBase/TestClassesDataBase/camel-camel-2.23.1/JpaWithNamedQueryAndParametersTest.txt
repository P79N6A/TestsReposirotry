public class JpaWithNamedQueryAndParametersTest extends Assert {
  protected static final Logger LOG=LoggerFactory.getLogger(JpaWithNamedQueryAndParametersTest.class);
  protected DefaultCamelContext camelContext;
  protected ProducerTemplate template;
  protected JpaEndpoint endpoint;
  protected EntityManager entityManager;
  protected TransactionTemplate transactionTemplate;
  protected Consumer consumer;
  protected Exchange receivedExchange;
  protected CountDownLatch latch=new CountDownLatch(1);
  protected String entityName=Customer.class.getName();
  protected String queryText="select o from " + entityName + " o where o.name like 'Willem'";
  @Test public void testProducerInsertsIntoDatabaseThenConsumerFiresMessageExchange() throws Exception {
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus status){
        entityManager.joinTransaction();
        entityManager.createQuery("delete from " + entityName).executeUpdate();
        Customer dummy=new Customer();
        dummy.setName("Test");
        entityManager.persist(dummy);
        return null;
      }
    }
);
    List<?> results=entityManager.createQuery(queryText).getResultList();
    assertEquals("Should have no results: " + results,0,results.size());
    template.send(endpoint,new Processor(){
      public void process(      Exchange exchange){
        Customer customer=new Customer();
        customer.setName("Willem");
        exchange.getIn().setBody(customer);
      }
    }
);
    results=entityManager.createQuery(queryText).getResultList();
    assertEquals("Should have results: " + results,1,results.size());
    Customer customer=(Customer)results.get(0);
    assertEquals("name property","Willem",customer.getName());
    consumer=endpoint.createConsumer(new Processor(){
      public void process(      Exchange e){
        LOG.info("Received exchange: " + e.getIn());
        receivedExchange=e;
        latch.countDown();
      }
    }
);
    consumer.start();
    assertTrue(latch.await(10,TimeUnit.SECONDS));
    assertReceivedResult(receivedExchange);
    JpaConsumer jpaConsumer=(JpaConsumer)consumer;
    assertURIQueryOption(jpaConsumer);
  }
  protected void assertReceivedResult(  Exchange exchange){
    assertNotNull(exchange);
    Customer result=exchange.getIn().getBody(Customer.class);
    assertNotNull("Received a POJO",result);
    assertEquals("name property","Willem",result.getName());
  }
  protected void assertURIQueryOption(  JpaConsumer jpaConsumer){
    assertEquals("findAllCustomersWithName",jpaConsumer.getNamedQuery());
  }
  @Before public void setUp() throws Exception {
    camelContext=new DefaultCamelContext();
    SimpleRegistry registry=new SimpleRegistry();
    Map<String,Object> params=new HashMap<>();
    params.put("custName","Willem");
    registry.put("params",params);
    camelContext.setRegistry(registry);
    template=camelContext.createProducerTemplate();
    ServiceHelper.startServices(template,camelContext);
    Endpoint value=camelContext.getEndpoint(getEndpointUri());
    assertNotNull("Could not find endpoint!",value);
    assertTrue("Should be a JPA endpoint but was: " + value,value instanceof JpaEndpoint);
    endpoint=(JpaEndpoint)value;
    transactionTemplate=endpoint.createTransactionTemplate();
    entityManager=endpoint.createEntityManager();
  }
  protected String getEndpointUri(){
    return "jpa://" + Customer.class.getName() + "?consumer.namedQuery=findAllCustomersWithName&consumer.parameters=#params";
  }
  @After public void tearDown() throws Exception {
    ServiceHelper.stopServices(consumer,template,camelContext);
  }
}
