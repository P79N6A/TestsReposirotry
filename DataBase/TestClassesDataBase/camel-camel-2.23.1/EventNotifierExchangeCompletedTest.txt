/** 
 * @version 
 */
public class EventNotifierExchangeCompletedTest extends ContextTestSupport {
  private static List<EventObject> events=new ArrayList<>();
  @Override @Before public void setUp() throws Exception {
    events.clear();
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=new DefaultCamelContext(createRegistry());
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      public void notify(      EventObject event) throws Exception {
        events.add(event);
      }
      public boolean isEnabled(      EventObject event){
        return event instanceof ExchangeCompletedEvent;
      }
      protected void doStart() throws Exception {
      }
      protected void doStop() throws Exception {
      }
    }
);
    return context;
  }
  @Test public void testExchangeCompleted() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(1,events.size());
    ExchangeCompletedEvent event=(ExchangeCompletedEvent)events.get(0);
    assertNotNull(event.getExchange());
    assertNotNull(event.getExchange().getFromEndpoint());
    assertEquals("direct://start",event.getExchange().getFromEndpoint().getEndpointUri());
    Date created=event.getExchange().getCreated();
    assertNotNull(created);
    Date now=new Date();
    long elapsed=now.getTime() - created.getTime();
    assertTrue("Should be > 400, was: " + elapsed,elapsed > 400);
    log.info("Elapsed time in millis: " + elapsed);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("direct:bar").to("mock:result");
        from("direct:bar").delay(500).to("mock:bar");
      }
    }
;
  }
}
