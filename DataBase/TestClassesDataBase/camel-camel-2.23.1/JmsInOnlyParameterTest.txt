/** 
 * @version 
 */
public class JmsInOnlyParameterTest extends CamelTestSupport {
  @Test public void testInOnly() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").message(0).header("JMSCorrelationID").isNull();
    getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOut);
    getMockEndpoint("mock:in").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:in").message(0).header("JMSCorrelationID").isNull();
    getMockEndpoint("mock:in").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly);
    String out=template.requestBody("direct:start","Hello World",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyWithJMSCorrelationID() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").message(0).header("JMSCorrelationID").isEqualTo("foobar");
    getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOut);
    getMockEndpoint("mock:in").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:in").message(0).header("JMSCorrelationID").isEqualTo("foobar");
    getMockEndpoint("mock:in").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly);
    String out=template.requestBodyAndHeader("direct:start","Hello World","JMSCorrelationID","foobar",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").to("activemq:queue:in?exchangePattern=InOnly").transform().constant("Bye World").to("mock:result");
        from("activemq:queue:in").to("mock:in");
      }
    }
;
  }
}
