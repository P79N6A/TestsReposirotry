public class ThrottlerDslTest extends ContextTestSupport {
  private static final int INTERVAL=500;
  protected int messageCount=9;
  protected boolean canTest(){
    return !isPlatform("windows");
  }
  @Test public void testDsl() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(messageCount);
    ExecutorService executor=Executors.newFixedThreadPool(messageCount);
    long start=System.currentTimeMillis();
    for (int i=0; i < messageCount; i++) {
      executor.execute(() -> template.sendBodyAndHeader("direct:start","payload","ThrottleCount",1));
    }
    resultEndpoint.assertIsSatisfied();
    long minimumTime=(messageCount - 1) * INTERVAL;
    long delta=System.currentTimeMillis() - start + 200;
    assertTrue("Should take at least " + minimumTime + "ms, was: "+ delta,delta >= minimumTime);
    executor.shutdownNow();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").throttle().message(m -> m.getHeader("ThrottleCount",Integer.class)).timePeriodMillis(INTERVAL).to("log:result","mock:result");
      }
    }
;
  }
}
