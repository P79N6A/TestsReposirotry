public class DefaultAsyncProcessorAwaitManagerTest {
  private static final MessageHistoryFactory MESSAGE_HISTORY_FACTORY=new DefaultMessageHistoryFactory();
  private DefaultAsyncProcessorAwaitManager defaultAsyncProcessorAwaitManager;
  private DefaultExchange exchange;
  private CountDownLatch latch;
  private Thread thread;
  @Test public void testNoMessageHistory() throws Exception {
    startAsyncProcess();
    AsyncProcessorAwaitManager.AwaitThread awaitThread=defaultAsyncProcessorAwaitManager.browse().iterator().next();
    assertThat(awaitThread.getRouteId(),is(nullValue()));
    assertThat(awaitThread.getNodeId(),is(nullValue()));
    waitForEndOfAsyncProcess();
  }
  @Test public void testMessageHistoryWithEmptyList() throws Exception {
    startAsyncProcess();
    exchange.setProperty(Exchange.MESSAGE_HISTORY,new LinkedList<MessageHistory>());
    AsyncProcessorAwaitManager.AwaitThread awaitThread=defaultAsyncProcessorAwaitManager.browse().iterator().next();
    assertThat(awaitThread.getRouteId(),is(nullValue()));
    assertThat(awaitThread.getNodeId(),is(nullValue()));
    waitForEndOfAsyncProcess();
  }
  @Test public void testMessageHistoryWithNullMessageHistory() throws Exception {
    startAsyncProcess();
    LinkedList<MessageHistory> messageHistories=new LinkedList<>();
    messageHistories.add(null);
    exchange.setProperty(Exchange.MESSAGE_HISTORY,messageHistories);
    AsyncProcessorAwaitManager.AwaitThread awaitThread=defaultAsyncProcessorAwaitManager.browse().iterator().next();
    assertThat(awaitThread.getRouteId(),is(nullValue()));
    assertThat(awaitThread.getNodeId(),is(nullValue()));
    waitForEndOfAsyncProcess();
  }
  @Test public void testMessageHistoryWithNullElements() throws Exception {
    startAsyncProcess();
    LinkedList<MessageHistory> messageHistories=new LinkedList<>();
    messageHistories.add(MESSAGE_HISTORY_FACTORY.newMessageHistory(null,new MockNamedNode().withId(null),0));
    exchange.setProperty(Exchange.MESSAGE_HISTORY,messageHistories);
    AsyncProcessorAwaitManager.AwaitThread awaitThread=defaultAsyncProcessorAwaitManager.browse().iterator().next();
    assertThat(awaitThread.getRouteId(),is(nullValue()));
    assertThat(awaitThread.getNodeId(),is(nullValue()));
    waitForEndOfAsyncProcess();
  }
  @Test public void testMessageHistoryWithNotNullElements() throws Exception {
    startAsyncProcess();
    LinkedList<MessageHistory> messageHistories=new LinkedList<>();
    messageHistories.add(MESSAGE_HISTORY_FACTORY.newMessageHistory("routeId",new MockNamedNode().withId("nodeId"),0));
    exchange.setProperty(Exchange.MESSAGE_HISTORY,messageHistories);
    AsyncProcessorAwaitManager.AwaitThread awaitThread=defaultAsyncProcessorAwaitManager.browse().iterator().next();
    assertThat(awaitThread.getRouteId(),is("routeId"));
    assertThat(awaitThread.getNodeId(),is("nodeId"));
    waitForEndOfAsyncProcess();
  }
  private void waitForEndOfAsyncProcess(){
    latch.countDown();
    while (thread.isAlive()) {
    }
  }
  private void startAsyncProcess() throws InterruptedException {
    defaultAsyncProcessorAwaitManager=new DefaultAsyncProcessorAwaitManager();
    latch=new CountDownLatch(1);
    BackgroundAwait backgroundAwait=new BackgroundAwait();
    exchange=new DefaultExchange(new DefaultCamelContext());
    thread=new Thread(backgroundAwait);
    thread.start();
    Thread.sleep(100);
  }
private class BackgroundAwait implements Runnable {
    @Override public void run(){
      defaultAsyncProcessorAwaitManager.await(exchange,latch);
    }
  }
private static class MockNamedNode implements NamedNode {
    private String id;
    @Override public String getId(){
      return id;
    }
    @Override public String getShortName(){
      return this.getClass().getSimpleName();
    }
    @Override public String getLabel(){
      return this.getClass().getName();
    }
    @Override public String getDescriptionText(){
      return this.getClass().getCanonicalName();
    }
    public MockNamedNode withId(    String id){
      this.id=id;
      return this;
    }
  }
}
