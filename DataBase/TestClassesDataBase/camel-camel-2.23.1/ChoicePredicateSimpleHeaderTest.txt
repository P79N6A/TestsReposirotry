/** 
 * @version 
 */
public class ChoicePredicateSimpleHeaderTest extends ContextTestSupport {
  @Test public void testAAE() throws Exception {
    getMockEndpoint("mock:aae").expectedMessageCount(1);
    getMockEndpoint("mock:pca").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","Hello World","Action","AAE");
    assertMockEndpointsSatisfied();
  }
  @Test public void testPCA() throws Exception {
    getMockEndpoint("mock:aae").expectedMessageCount(0);
    getMockEndpoint("mock:pca").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","Hello World","Action","PCA");
    assertMockEndpointsSatisfied();
  }
  @Test public void testError() throws Exception {
    getMockEndpoint("mock:aae").expectedMessageCount(0);
    getMockEndpoint("mock:pca").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","Action","Foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNoHeader() throws Exception {
    getMockEndpoint("mock:aae").expectedMessageCount(0);
    getMockEndpoint("mock:pca").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").choice().when().simple("${in.header.Action} == 'AAE'").to("mock:aae").when().simple("${in.header.Action} == 'PCA'").to("mock:pca").otherwise().to("mock:error");
      }
    }
;
  }
}
