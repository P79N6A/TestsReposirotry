/** 
 * @version 
 */
public class RedeliverWithExceptionAndFaultTest extends ContextTestSupport {
  private static int counter;
  @Test public void testOk() throws Exception {
    counter=0;
    getMockEndpoint("mock:result").expectedMessageCount(1);
    String out=template.requestBody("direct:start","Hello World",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTransientAndPersistentError() throws Exception {
    counter=0;
    getMockEndpoint("mock:result").expectedMessageCount(0);
    String out=template.requestBody("direct:start","Boom",String.class);
    assertEquals("Persistent error",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTransientAndPersistentErrorWithExchange() throws Exception {
    counter=0;
    getMockEndpoint("mock:result").expectedMessageCount(0);
    Exchange out=template.request("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Boom");
      }
    }
);
    assertTrue("Should be failed",out.isFailed());
    assertNull("No exception",out.getException());
    assertTrue(out.getOut() != null && out.getOut().isFault());
    assertEquals("Persistent error",out.getOut().getBody());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(0));
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            if (counter < 3) {
              throw new IllegalArgumentException("Try again");
            }
            if (exchange.getIn().getBody().equals("Boom")) {
              exchange.getOut().setFault(true);
              exchange.getOut().setBody("Persistent error");
            }
 else {
              exchange.getOut().setBody("Bye World");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
}
