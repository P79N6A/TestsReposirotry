/** 
 * Test class for  {@link BoxFoldersManager}APIs.
 */
public class BoxFoldersManagerIntegrationTest extends AbstractBoxTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BoxFoldersManagerIntegrationTest.class);
  private static final String PATH_PREFIX=BoxApiCollection.getCollection().getApiName(BoxFoldersManagerApiMethod.class).getName();
  private static final String CAMEL_TEST_FOLDER="CamelTestFolder";
  private static final String CAMEL_TEST_FOLDER_DESCRIPTION="This is a description of CamelTestFolder";
  private static final String CAMEL_TEST_COPY_FOLDER=BoxFoldersManagerIntegrationTest.CAMEL_TEST_FOLDER + "_Copy";
  private static final String CAMEL_TEST_MOVE_FOLDER=BoxFoldersManagerIntegrationTest.CAMEL_TEST_FOLDER + "_Move";
  private static final String CAMEL_TEST_RENAME_FOLDER=BoxFoldersManagerIntegrationTest.CAMEL_TEST_FOLDER + "_Rename";
  private static final String CAMEL_TEST_ROOT_FOLDER_ID="0";
  private static final String CAMEL_TEST_DESTINATION_FOLDER_ID="0";
  @Test public void testCreateFolder() throws Exception {
    deleteTestFolder();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.parentFolderId","0");
    headers.put("CamelBox.folderName",CAMEL_TEST_FOLDER);
    testFolder=requestBodyAndHeaders("direct://CREATEFOLDER",null,headers);
    assertNotNull("createFolder result",testFolder);
    assertEquals("createFolder folder name",CAMEL_TEST_FOLDER,testFolder.getInfo().getName());
    LOG.debug("createFolder: " + testFolder);
  }
  @Test public void testCreateFolderByPath() throws Exception {
    deleteTestFolder();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.parentFolderId","0");
    headers.put("CamelBox.path",new String[]{CAMEL_TEST_FOLDER});
    testFolder=requestBodyAndHeaders("direct://CREATEFOLDER",null,headers);
    assertNotNull("createFolder result",testFolder);
    assertEquals("createFolder folder name",CAMEL_TEST_FOLDER,testFolder.getInfo().getName());
    LOG.debug("createFolder: " + testFolder);
  }
  @Test public void testDeleteFolder() throws Exception {
    requestBody("direct://DELETEFOLDER",testFolder.getID());
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    Iterable<BoxItem.Info> it=rootFolder.search("^" + CAMEL_TEST_FOLDER + "$");
    int searchResults=sizeOfIterable(it);
    boolean exists=searchResults > 0 ? true : false;
    assertEquals("deleteFolder exists",false,exists);
    LOG.debug("deleteFolder: exists? " + exists);
  }
  @Test public void testCopyFolder() throws Exception {
    com.box.sdk.BoxFolder result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.folderId",testFolder.getID());
      headers.put("CamelBox.destinationFolderId",CAMEL_TEST_DESTINATION_FOLDER_ID);
      headers.put("CamelBox.newName",CAMEL_TEST_COPY_FOLDER);
      result=requestBodyAndHeaders("direct://COPYFOLDER",null,headers);
      assertNotNull("copyFolder result",result);
      assertEquals("copyFolder folder name",CAMEL_TEST_COPY_FOLDER,result.getInfo().getName());
      LOG.debug("copyFolder: " + result);
    }
  finally {
      if (result != null) {
        try {
          result.delete(true);
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  @Test public void testCreateSharedLink() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",testFolder.getID());
    headers.put("CamelBox.access",BoxSharedLink.Access.COLLABORATORS);
    headers.put("CamelBox.unshareDate",null);
    headers.put("CamelBox.permissions",new BoxSharedLink.Permissions());
    final com.box.sdk.BoxSharedLink result=requestBodyAndHeaders("direct://CREATEFOLDERSHAREDLINK",null,headers);
    assertNotNull("createFolderSharedLink result",result);
    LOG.debug("createFolderSharedLink: " + result);
  }
  @Test public void testGetFolder() throws Exception {
    final com.box.sdk.BoxFolder result=requestBody("direct://GETFOLDER",new String[]{CAMEL_TEST_FOLDER});
    assertNotNull("getFolder result",result);
    assertEquals("getFolder folder id",testFolder.getID(),result.getID());
    LOG.debug("getFolder: " + result);
  }
  @Test public void testGetFolderInfo() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",testFolder.getID());
    headers.put("CamelBox.fields",new String[]{"name"});
    final com.box.sdk.BoxFolder.Info result=requestBodyAndHeaders("direct://GETFOLDERINFO",null,headers);
    assertNotNull("getFolderInfo result",result);
    assertNotNull("getFolderInfo result.getName()",result.getName());
    assertEquals("getFolderInfo info name",CAMEL_TEST_FOLDER,result.getName());
    LOG.debug("getFolderInfo: " + result);
  }
  @Test public void testGetFolderItems() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",CAMEL_TEST_ROOT_FOLDER_ID);
    headers.put("CamelBox.offset",null);
    headers.put("CamelBox.limit",null);
    headers.put("CamelBox.fields",null);
    @SuppressWarnings("rawtypes") final java.util.Collection result=requestBodyAndHeaders("direct://GETFOLDERITEMS",null,headers);
    assertNotNull("getFolderItems result",result);
    LOG.debug("getFolderItems: " + result);
  }
  @Test public void testGetRootFolder() throws Exception {
    final com.box.sdk.BoxFolder result=requestBody("direct://GETROOTFOLDER",null);
    assertNotNull("getRootFolder result",result);
    LOG.debug("getRootFolder: " + result);
  }
  @Test public void testMoveFolder() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",testFolder.getID());
    headers.put("CamelBox.destinationFolderId",CAMEL_TEST_DESTINATION_FOLDER_ID);
    headers.put("CamelBox.newName",CAMEL_TEST_MOVE_FOLDER);
    final com.box.sdk.BoxFolder result=requestBodyAndHeaders("direct://MOVEFOLDER",null,headers);
    assertNotNull("moveFolder result",result);
    assertEquals("moveFolder folder name",CAMEL_TEST_MOVE_FOLDER,result.getInfo().getName());
    LOG.debug("moveFolder: " + result);
  }
  @Test public void testRenameFolder() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",testFolder.getID());
    headers.put("CamelBox.newFolderName",CAMEL_TEST_RENAME_FOLDER);
    final com.box.sdk.BoxFolder result=requestBodyAndHeaders("direct://RENAMEFOLDER",null,headers);
    assertNotNull("renameFolder result",result);
    assertEquals("moveFolder folder name",CAMEL_TEST_RENAME_FOLDER,result.getInfo().getName());
    LOG.debug("renameFolder: " + result);
  }
  @Test public void testUpdateInfo() throws Exception {
    final BoxFolder.Info testFolderInfo=testFolder.getInfo();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.folderId",testFolder.getID());
    testFolderInfo.setDescription(CAMEL_TEST_FOLDER_DESCRIPTION);
    headers.put("CamelBox.info",testFolderInfo);
    final com.box.sdk.BoxFolder result=requestBodyAndHeaders("direct://UPDATEFOLDERINFO",null,headers);
    assertNotNull("updateInfo result",result);
    assertEquals("update folder info description",CAMEL_TEST_FOLDER_DESCRIPTION,result.getInfo().getDescription());
    LOG.debug("updateInfo: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://COPYFOLDER").to("box://" + PATH_PREFIX + "/copyFolder");
        from("direct://CREATEFOLDER").to("box://" + PATH_PREFIX + "/createFolder");
        from("direct://CREATEFOLDERSHAREDLINK").to("box://" + PATH_PREFIX + "/createFolderSharedLink");
        from("direct://DELETEFOLDER").to("box://" + PATH_PREFIX + "/deleteFolder?inBody=folderId");
        from("direct://GETFOLDER").to("box://" + PATH_PREFIX + "/getFolder?inBody=path");
        from("direct://GETFOLDERINFO").to("box://" + PATH_PREFIX + "/getFolderInfo");
        from("direct://GETFOLDERITEMS").to("box://" + PATH_PREFIX + "/getFolderItems");
        from("direct://GETROOTFOLDER").to("box://" + PATH_PREFIX + "/getRootFolder");
        from("direct://MOVEFOLDER").to("box://" + PATH_PREFIX + "/moveFolder");
        from("direct://RENAMEFOLDER").to("box://" + PATH_PREFIX + "/renameFolder");
        from("direct://UPDATEFOLDERINFO").to("box://" + PATH_PREFIX + "/updateFolderInfo");
      }
    }
;
  }
  @Before public void setupTest() throws Exception {
    createTestFolder();
  }
  @After public void teardownTest(){
    deleteTestFolder();
  }
  public BoxAPIConnection getConnection(){
    BoxEndpoint endpoint=(BoxEndpoint)context().getEndpoint("box://" + PATH_PREFIX + "/copyFolder");
    return endpoint.getBoxConnection();
  }
  private void createTestFolder(){
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    testFolder=rootFolder.createFolder(CAMEL_TEST_FOLDER).getResource();
  }
  private int sizeOfIterable(  Iterable<?> it){
    if (it instanceof Collection) {
      return ((Collection<?>)it).size();
    }
 else {
      int i=0;
      for (      @SuppressWarnings("unused") Object obj : it) {
        i++;
      }
      return i;
    }
  }
}
