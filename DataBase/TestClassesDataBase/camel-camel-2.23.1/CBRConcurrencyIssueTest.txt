/** 
 * @version 
 */
public class CBRConcurrencyIssueTest extends ContextTestSupport {
  @Test public void testCBRConcurrencyIssue() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:other").expectedBodiesReceived("Bye World");
    template.sendBodyAndHeader("seda:start","Hello World","foo","send");
    template.sendBodyAndHeader("seda:start","Bye World","foo","receive");
    assertMockEndpointsSatisfied();
  }
  @Test public void testCBRConcurrencyManyMessagesIssue() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(50);
    getMockEndpoint("mock:other").expectedMessageCount(150);
    for (int i=0; i < 200; i++) {
      if (i % 4 == 0) {
        template.sendBodyAndHeader("seda:start","Hello World","foo","send");
      }
 else {
        template.sendBodyAndHeader("seda:start","Bye World","foo","receive");
      }
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("seda:start?concurrentConsumers=10").log("Got foo ${header.foo} header").choice().when(header("foo").isEqualTo("send")).to("mock:result").when(header("foo").isEqualTo("receive")).to("mock:other");
      }
    }
;
  }
}
