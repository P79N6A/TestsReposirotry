/** 
 * @version 
 */
public class DataSetEndpointTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testDataSetEndpoint() throws Exception {
    @SuppressWarnings("deprecation") final DataSetEndpoint endpoint=new DataSetEndpoint();
    endpoint.setCamelContext(context);
    endpoint.setEndpointUriIfNotSpecified("dataset://foo");
    endpoint.setDataSet(new SimpleDataSet(2));
    endpoint.setInitialDelay(0);
    assertEquals(0,endpoint.getPreloadSize());
    assertEquals(0,endpoint.getConsumeDelay());
    assertEquals(3,endpoint.getProduceDelay());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(endpoint).to("direct:foo");
        from("direct:foo").to(endpoint);
      }
    }
);
    context.start();
    endpoint.assertIsSatisfied();
  }
  @Test public void testDataSetEndpointCtr() throws Exception {
    final DataSetEndpoint endpoint=new DataSetEndpoint("dataset://foo",context.getComponent("dataset"),new SimpleDataSet(2));
    endpoint.setConsumeDelay(2);
    assertEquals(2,endpoint.getConsumeDelay());
    endpoint.setProduceDelay(5);
    assertEquals(5,endpoint.getProduceDelay());
    endpoint.setInitialDelay(1);
    assertEquals(1,endpoint.getInitialDelay());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(endpoint).to("direct:foo");
        from("direct:foo").to(endpoint);
      }
    }
);
    context.start();
    endpoint.assertIsSatisfied();
  }
  @Test public void testDataSetReporter() throws Exception {
    final DataSetEndpoint endpoint=new DataSetEndpoint("dataset://foo",context.getComponent("dataset"),new SimpleDataSet(10));
    endpoint.setInitialDelay(0);
    final AtomicBoolean reported=new AtomicBoolean(false);
    endpoint.setReporter(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        reported.set(true);
      }
    }
);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(endpoint).to("direct:foo");
        from("direct:foo").to(endpoint);
      }
    }
);
    context.start();
    endpoint.assertIsSatisfied();
    assertTrue(reported.get());
  }
  @Test public void testSimpleDataSet() throws Exception {
    SimpleDataSet ds=new SimpleDataSet();
    ds.setSize(2);
    ds.setDefaultBody("Hi");
    assertEquals("Hi",ds.getDefaultBody());
  }
  @Test public void testDataSetSupport() throws Exception {
    MyDataSet ds=new MyDataSet();
    ds.setSize(4);
    ds.setReportCount(0);
    ds.setOutputTransformer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        String body="Hi " + exchange.getIn().getBody(String.class);
        exchange.getIn().setBody(body);
      }
    }
);
    assertNotNull(ds.getOutputTransformer());
    final DataSetEndpoint endpoint=new DataSetEndpoint("dataset://foo",context.getComponent("dataset"),ds);
    endpoint.setInitialDelay(0);
    endpoint.allMessages().body().startsWith("Hi ");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(endpoint).to("direct:foo");
        from("direct:foo").to(endpoint);
      }
    }
);
    context.start();
    endpoint.assertIsSatisfied();
  }
private static class MyDataSet extends DataSetSupport {
    @Override protected Object createMessageBody(    long messageIndex){
      return "Message " + messageIndex;
    }
  }
}
