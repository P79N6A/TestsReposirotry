public class NettyRfc5425LongMessageTest extends CamelTestSupport {
  private static String uri;
  private static int serverPort;
  private static final String MESSAGE="<34>1 2003-10-11T22:14:15.003Z mymachine.example.com su - ID47 - " + "Lorem ipsum dolor sit amet, tempor democritum vix ad, est partiendo laboramus ei. " + "Munere laudem commune vis ad, et qui altera singulis. Ut assum deleniti sit, vix constituto assueverit appellantur at, et meis voluptua usu. "+ "Quem imperdiet in ius, mei ex dictas mandamus, ut pri tation appetere oportere. Et est harum dictas. \n Omnis quaestio mel te, ex duo autem molestie. "+ "Ei sed dico minim, nominavi facilisis evertitur quo an, te adipiscing contentiones his. Cum partem deseruisse at, ne iuvaret mediocritatem pro. "+ "Ex prima utinam convenire usu, volumus legendos nec et, natum putant quo ne. Invidunt necessitatibus at ius, ne eum wisi dicat mediocrem. "+ "\n Cu usu odio labores sententiae. Ex eos duis singulis necessitatibus, dico omittam vix at. Sit iudico option detracto an, sit no modus exerci oportere. "+ "Vix dicta munere at, no vis feugiat omnesque convenire. Duo at quod illum dolor, nec amet tantas iisque no, mei quod graece volutpat ea.\n "+ "Ornatus legendos theophrastus id mei. Cum alia assum abhorreant et, nam indoctum intellegebat ei. Unum constituto quo cu. "+ "Vero tritani sit ei, ea commodo menandri usu, ponderum hendrerit voluptatibus sed te. "+ "\n Semper aliquid fabulas ei mel. Vix ei nullam malorum bonorum, movet nemore scaevola cu vel. "+ "Quo ut esse dictas incorrupte, ex denique splendide nec, mei dicit doming omnium no. Nulla putent nec id, vis vide ignota eligendi in.";
  @BeforeClass public static void initPort(){
    serverPort=AvailablePortFinder.getNextAvailable();
    uri="netty4:tcp://localhost:" + serverPort + "?sync=false&allowDefaultCodec=false&decoders=#decoder&encoder=#encoder";
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("decoder",new Rfc5425FrameDecoder());
    jndi.bind("encoder",new Rfc5425Encoder());
    return jndi;
  }
  @Test public void testSendingCamel() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:syslogReceiver");
    MockEndpoint mock2=getMockEndpoint("mock:syslogReceiver2");
    mock.expectedMessageCount(1);
    mock2.expectedMessageCount(1);
    mock2.expectedBodiesReceived(MESSAGE);
    template.sendBody("direct:start",MESSAGE.getBytes("UTF8"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    context().getRegistry(JndiRegistry.class).bind("rfc5426FrameDecoder",new Rfc5425FrameDecoder());
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        DataFormat syslogDataFormat=new SyslogDataFormat();
        from(uri).unmarshal(syslogDataFormat).process(new Processor(){
          @Override public void process(          Exchange ex){
            assertTrue(ex.getIn().getBody() instanceof SyslogMessage);
          }
        }
).to("mock:syslogReceiver").marshal(syslogDataFormat).to("mock:syslogReceiver2");
        from("direct:start").convertBodyTo(ByteBuf.class).to(uri);
      }
    }
;
  }
}
