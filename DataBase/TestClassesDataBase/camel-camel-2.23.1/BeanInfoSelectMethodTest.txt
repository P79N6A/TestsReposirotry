/** 
 * @version 
 */
public class BeanInfoSelectMethodTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyFooBean());
    return jndi;
  }
  @Test public void testOrder() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Order");
    template.sendBody("direct:a","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFailure() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Failure");
    template.send("direct:b",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello");
        exchange.setException(new IllegalArgumentException("Forced by unit test"));
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").logStackTrace(false).maximumRedeliveries(3));
        onException(Exception.class).handled(true).bean("foo","handleFailure").to("mock:result");
        from("direct:a").bean("foo").to("mock:result");
        from("direct:b").to("mock:foo");
      }
    }
;
  }
public static class MyFooBean {
    public String handleException(    Exception e){
      fail("Should not call this method as it is not intended for Camel");
      return "Exception";
    }
    public String handleFailure(    @Body String order,    @ExchangeException IllegalArgumentException e){
      return "Failure";
    }
    public String handleOrder(    @Body String order){
      return "Order";
    }
  }
}
