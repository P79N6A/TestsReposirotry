/** 
 * @version 
 */
public class AsyncEndpointCustomAsyncInterceptorTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  private MyInterceptor interceptor=new MyInterceptor();
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertEquals(8,interceptor.getCounter());
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        context.addInterceptStrategy(interceptor);
        from("direct:start").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
private static class MyInterceptor implements InterceptStrategy {
    private AtomicInteger counter=new AtomicInteger();
    public Processor wrapProcessorInInterceptors(    final CamelContext context,    final ProcessorDefinition<?> definition,    final Processor target,    final Processor nextTarget) throws Exception {
      return new DelegateAsyncProcessor(target){
        @Override public boolean process(        Exchange exchange,        AsyncCallback callback){
          counter.incrementAndGet();
          return processor.process(exchange,callback);
        }
      }
;
    }
    public int getCounter(){
      return counter.get();
    }
  }
}
