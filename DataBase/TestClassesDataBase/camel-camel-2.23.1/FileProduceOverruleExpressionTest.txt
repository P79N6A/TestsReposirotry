/** 
 * Unit test to verify the writeFileName option
 */
public class FileProduceOverruleExpressionTest extends ContextTestSupport {
  @Test public void testNoOverrule() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(Exchange.FILE_NAME,"hello.txt");
    mock.expectedFileExists("target/write/copy-of-hello.txt","Hello World");
    template.sendBodyAndHeader("direct:start","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOverrule() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(Exchange.FILE_NAME,"hello.txt");
    mock.message(0).header(Exchange.OVERRULE_FILE_NAME).isNull();
    mock.expectedFileExists("target/write/copy-of-overruled.txt","Hello World");
    Map<String,Object> map=new HashMap<>();
    map.put(Exchange.FILE_NAME,"hello.txt");
    map.put(Exchange.OVERRULE_FILE_NAME,"overruled.txt");
    template.sendBodyAndHeaders("direct:start","Hello World",map);
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/write");
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").to("file://target/write?fileName=copy-of-${file:name}","mock:result");
      }
    }
;
  }
}
