public class RedeliveryDeadLetterErrorHandlerNoRedeliveryOnShutdownTest extends ContextTestSupport {
  private final AtomicInteger counter=new AtomicInteger();
  @Test public void testRedeliveryErrorHandlerNoRedeliveryOnShutdown() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:deadLetter").expectedMessageCount(1);
    getMockEndpoint("mock:deadLetter").setResultWaitTime(25000);
    template.sendBody("seda:foo","Hello World");
    getMockEndpoint("mock:foo").assertIsSatisfied();
    StopWatch watch=new StopWatch();
    Thread.sleep(500);
    log.info("==== stopping route foo ====");
    context.stopRoute("foo");
    long taken=watch.taken();
    getMockEndpoint("mock:deadLetter").assertIsSatisfied();
    log.info("OnRedelivery processor counter {}",counter.get());
    assertTrue("Should stop route faster, was " + taken,taken < 5000);
    assertTrue("Redelivery counter should be >= 20 and < 100, was: " + counter.get(),counter.get() >= 20 && counter.get() < 100);
  }
private final class MyRedeliverProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      counter.incrementAndGet();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:deadLetter").allowRedeliveryWhileStopping(false).onRedelivery(new MyRedeliverProcessor()).maximumRedeliveries(200).redeliveryDelay(10).retryAttemptedLogLevel(LoggingLevel.INFO));
        from("seda:foo").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
