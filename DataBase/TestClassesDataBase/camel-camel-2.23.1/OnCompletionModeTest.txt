public class OnCompletionModeTest extends ContextTestSupport {
  @Test public void testOnCompletionScopeBefore() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("I was here Hello Camel");
    String out=template.requestBody("seda:foo","Camel",String.class);
    assertEquals("I was here Hello Camel",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testOnCompletionScopeAfter() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("World");
    getMockEndpoint("mock:after").expectedBodiesReceived("I was here Hello World");
    String out=template.requestBody("seda:bar","World",String.class);
    assertEquals("Hello World",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo").onCompletion().modeBeforeConsumer().transform(body().prepend("I was here ")).to("mock:after").end().to("mock:input").transform(body().prepend("Hello ")).to("log:foo");
        from("seda:bar").onCompletion().modeAfterConsumer().parallelProcessing().transform(body().prepend("I was here ")).to("mock:after").end().to("mock:input").transform(body().prepend("Hello ")).to("log:bar");
      }
    }
;
  }
}
