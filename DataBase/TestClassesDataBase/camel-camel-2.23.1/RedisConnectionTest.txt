@RunWith(MockitoJUnitRunner.class) public class RedisConnectionTest extends RedisTestSupport {
  @Mock private RedisTemplate<String,String> redisTemplate;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("redisTemplate",redisTemplate);
    return registry;
  }
  @Test public void shouldExecuteECHO() throws Exception {
    when(redisTemplate.execute(ArgumentMatchers.<RedisCallback<String>>any())).thenReturn("value");
    Object result=sendHeaders(RedisConstants.COMMAND,"ECHO",RedisConstants.VALUE,"value");
    assertEquals("value",result);
  }
  @Test public void shouldExecutePING() throws Exception {
    when(redisTemplate.execute(ArgumentMatchers.<RedisCallback<String>>any())).thenReturn("PONG");
    Object result=sendHeaders(RedisConstants.COMMAND,"PING");
    assertEquals("PONG",result);
  }
  @Test public void shouldExecuteQUIT() throws Exception {
    sendHeaders(RedisConstants.COMMAND,"QUIT");
    verify(redisTemplate).execute(ArgumentMatchers.<RedisCallback<String>>any());
  }
  @Test public void shouldExecutePUBLISH() throws Exception {
    sendHeaders(RedisConstants.COMMAND,"PUBLISH",RedisConstants.CHANNEL,"channel",RedisConstants.MESSAGE,"a message");
    verify(redisTemplate).convertAndSend("channel","a message");
  }
}
