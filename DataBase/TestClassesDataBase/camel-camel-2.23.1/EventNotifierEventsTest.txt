/** 
 * @version 
 */
public class EventNotifierEventsTest extends ContextTestSupport {
  private static List<EventObject> events=new ArrayList<>();
  @Override @Before public void setUp() throws Exception {
    events.clear();
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=new DefaultCamelContext(createRegistry());
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      public void notify(      EventObject event) throws Exception {
        events.add(event);
      }
      public boolean isEnabled(      EventObject event){
        return true;
      }
      @Override protected void doStart() throws Exception {
      }
      @Override protected void doStop() throws Exception {
      }
    }
);
    return context;
  }
  @Test public void testExchangeDone() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(14,events.size());
    assertIsInstanceOf(CamelContextStartingEvent.class,events.get(0));
    assertIsInstanceOf(RouteAddedEvent.class,events.get(1));
    assertIsInstanceOf(RouteAddedEvent.class,events.get(2));
    assertIsInstanceOf(RouteStartedEvent.class,events.get(3));
    assertIsInstanceOf(RouteStartedEvent.class,events.get(4));
    assertIsInstanceOf(CamelContextStartedEvent.class,events.get(5));
    assertIsInstanceOf(ExchangeCreatedEvent.class,events.get(7));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(9));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(11));
    assertIsInstanceOf(ExchangeCompletedEvent.class,events.get(12));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(13));
    context.stop();
    assertEquals(20,events.size());
    assertIsInstanceOf(CamelContextStoppingEvent.class,events.get(14));
    assertIsInstanceOf(RouteStoppedEvent.class,events.get(15));
    assertIsInstanceOf(RouteRemovedEvent.class,events.get(16));
    assertIsInstanceOf(RouteStoppedEvent.class,events.get(17));
    assertIsInstanceOf(RouteRemovedEvent.class,events.get(18));
    assertIsInstanceOf(CamelContextStoppedEvent.class,events.get(19));
  }
  @Test public void testExchangeFailed() throws Exception {
    try {
      template.sendBody("direct:fail","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
    }
    assertEquals(10,events.size());
    assertIsInstanceOf(CamelContextStartingEvent.class,events.get(0));
    assertIsInstanceOf(RouteAddedEvent.class,events.get(1));
    assertIsInstanceOf(RouteAddedEvent.class,events.get(2));
    assertIsInstanceOf(RouteStartedEvent.class,events.get(3));
    assertIsInstanceOf(RouteStartedEvent.class,events.get(4));
    assertIsInstanceOf(CamelContextStartedEvent.class,events.get(5));
    assertIsInstanceOf(ExchangeSendingEvent.class,events.get(6));
    assertIsInstanceOf(ExchangeCreatedEvent.class,events.get(7));
    assertIsInstanceOf(ExchangeFailedEvent.class,events.get(8));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(9));
    context.stop();
    assertEquals(16,events.size());
    assertIsInstanceOf(CamelContextStoppingEvent.class,events.get(10));
    assertIsInstanceOf(RouteStoppedEvent.class,events.get(11));
    assertIsInstanceOf(RouteRemovedEvent.class,events.get(12));
    assertIsInstanceOf(RouteStoppedEvent.class,events.get(13));
    assertIsInstanceOf(RouteRemovedEvent.class,events.get(14));
    assertIsInstanceOf(CamelContextStoppedEvent.class,events.get(15));
  }
  @Test public void testSuspendResume() throws Exception {
    assertEquals(6,events.size());
    assertIsInstanceOf(CamelContextStartingEvent.class,events.get(0));
    assertIsInstanceOf(RouteAddedEvent.class,events.get(1));
    assertIsInstanceOf(RouteAddedEvent.class,events.get(2));
    assertIsInstanceOf(RouteStartedEvent.class,events.get(3));
    assertIsInstanceOf(RouteStartedEvent.class,events.get(4));
    assertIsInstanceOf(CamelContextStartedEvent.class,events.get(5));
    context.suspend();
    assertEquals(8,events.size());
    assertIsInstanceOf(CamelContextSuspendingEvent.class,events.get(6));
    assertIsInstanceOf(CamelContextSuspendedEvent.class,events.get(7));
    context.resume();
    assertEquals(10,events.size());
    assertIsInstanceOf(CamelContextResumingEvent.class,events.get(8));
    assertIsInstanceOf(CamelContextResumedEvent.class,events.get(9));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
        from("direct:fail").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
}
