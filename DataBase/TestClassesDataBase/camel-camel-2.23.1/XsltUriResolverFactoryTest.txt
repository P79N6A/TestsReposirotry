/** 
 */
public class XsltUriResolverFactoryTest extends ContextTestSupport {
  private JndiRegistry registry;
  @Test public void testConfigurationOnEndpoint() throws Exception {
    String endpointUri="xslt:xslt/staff/staff.xsl?uriResolverFactory=#uriResolverFactory";
    String directStart="direct:start";
    registry.getContext().unbind("xslt");
    execute(endpointUri,directStart);
  }
  @Test public void testConfigurationOnComponent() throws Exception {
    XsltComponent xsltComponent=new XsltComponent();
    xsltComponent.setUriResolverFactory(new CustomXsltUriResolverFactory());
    registry.bind("xslt",xsltComponent);
    String endpointUri="xslt:xslt/staff/staff.xsl";
    String directStart="direct:startComponent";
    execute(endpointUri,directStart);
  }
  void execute(  String endpointUri,  String directStart) throws InterruptedException {
    InputStream payloud=XsltUriResolverFactoryTest.class.getClassLoader().getResourceAsStream("xslt/staff/staff.xml");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    sendBody(directStart,payloud);
    await().atMost(1,TimeUnit.SECONDS).until(() -> resolveMandatoryEndpoint(endpointUri,XsltEndpoint.class) != null);
    assertMockEndpointsSatisfied();
    XsltEndpoint xsltEndpoint=resolveMandatoryEndpoint(endpointUri,XsltEndpoint.class);
    assertNotNull(xsltEndpoint);
    CustomXsltUriResolver resolver=(CustomXsltUriResolver)xsltEndpoint.getUriResolver();
    checkResourceUri(resolver.resolvedResourceUris,"xslt/staff/staff.xsl");
    checkResourceUri(resolver.resolvedResourceUris,"../common/staff_template.xsl");
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setHeader("xslt_file",new ConstantExpression("xslt/staff/staff.xsl")).recipientList(new SimpleExpression("xslt:${header.xslt_file}?uriResolverFactory=#uriResolverFactory")).to("mock:result");
      }
    }
,new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:startComponent").setHeader("xslt_file",new ConstantExpression("xslt/staff/staff.xsl")).recipientList(new SimpleExpression("xslt:${header.xslt_file}")).to("mock:result");
      }
    }
};
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    registry=super.createRegistry();
    registry.bind("uriResolverFactory",new CustomXsltUriResolverFactory());
    return registry;
  }
  void checkResourceUri(  Set<String> uris,  String resourceUri){
    Assert.assertTrue("Missing resource uri " + resourceUri + " in resolved resource URI set",uris.contains(resourceUri));
  }
static class CustomXsltUriResolverFactory implements XsltUriResolverFactory {
    @Override public URIResolver createUriResolver(    CamelContext camelContext,    String resourceUri){
      return new CustomXsltUriResolver(camelContext,resourceUri);
    }
  }
static class CustomXsltUriResolver extends XsltUriResolver {
    private final Set<String> resolvedResourceUris=new HashSet<>();
    CustomXsltUriResolver(    CamelContext context,    String location){
      super(context,location);
    }
    public Source resolve(    String href,    String base) throws TransformerException {
      Source result=super.resolve(href,base);
      resolvedResourceUris.add(href);
      return result;
    }
  }
}
