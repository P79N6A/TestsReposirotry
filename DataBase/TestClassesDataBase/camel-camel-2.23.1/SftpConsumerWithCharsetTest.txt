public class SftpConsumerWithCharsetTest extends SftpServerTestSupport {
  private static final String SAMPLE_FILE_NAME=String.format("sample-%s.txt",SftpConsumerWithCharsetTest.class.getSimpleName());
  private static final String SAMPLE_FILE_CHARSET="iso-8859-1";
  private static final String SAMPLE_FILE_PAYLOAD="\u00e6\u00f8\u00e5 \u00a9";
  @Test public void testConsumeWithCharset() throws Exception {
    if (!canTest()) {
      return;
    }
    createSampleFile();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived(SAMPLE_FILE_PAYLOAD);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    RemoteFile<?> file=(RemoteFile<?>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
    assertNotNull(file);
    assertEquals(SAMPLE_FILE_CHARSET,file.getCharset());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "?username=admin&password=admin&charset="+ SAMPLE_FILE_CHARSET).routeId("foo").noAutoStartup().to("mock:result");
      }
    }
;
  }
  private void createSampleFile() throws IOException {
    File file=new File(FTP_ROOT_DIR + "/" + SAMPLE_FILE_NAME);
    FileUtils.write(file,SAMPLE_FILE_PAYLOAD,SAMPLE_FILE_CHARSET);
  }
}
