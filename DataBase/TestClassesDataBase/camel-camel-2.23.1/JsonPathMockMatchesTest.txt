public class JsonPathMockMatchesTest extends CamelTestSupport {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
      }
    }
;
  }
  @Test public void testMockMatches() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    mock.message(0).predicate().jsonpath("$.store.book[?(@.price < 10)]");
    mock.message(2).predicate().jsonpath("$.store.book[?(@.price < 30)]");
    mock.message(1).predicate().jsonpath("$.store.book[?(@.price > 30)]");
    template.sendBody("direct:start",new File("src/test/resources/cheap.json"));
    template.sendBody("direct:start",new File("src/test/resources/expensive.json"));
    template.sendBody("direct:start",new File("src/test/resources/average.json"));
    mock.assertIsSatisfied();
  }
  @Test public void testMockNotMatches() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    mock.message(0).predicate().jsonpath("$.store.book[?(@.price < 10)]");
    mock.message(1).predicate().jsonpath("$.store.book[?(@.price < 30)]");
    mock.message(2).predicate().jsonpath("$.store.book[?(@.price > 30)]");
    template.sendBody("direct:start",new File("src/test/resources/cheap.json"));
    template.sendBody("direct:start",new File("src/test/resources/expensive.json"));
    template.sendBody("direct:start",new File("src/test/resources/average.json"));
    mock.assertIsNotSatisfied();
  }
}
