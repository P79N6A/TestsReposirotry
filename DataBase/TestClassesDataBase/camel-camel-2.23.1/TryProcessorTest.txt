/** 
 * Unit test for try .. handle routing (CAMEL-564).
 */
public class TryProcessorTest extends ContextTestSupport {
  private boolean handled;
  @Test public void testTryCatchFinallyProcessor() throws Exception {
    testTryCatchFinally("direct:processor");
  }
  @Test public void testTryCatchFinallyExpression() throws Exception {
    testTryCatchFinally("direct:expression");
  }
  @Test public void testTryCatchFinallyPredicate() throws Exception {
    testTryCatchFinally("direct:predicate");
  }
  private void testTryCatchFinally(  String endpointName) throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    getMockEndpoint("mock:last").expectedMessageCount(1);
    getMockEndpoint("mock:finally").expectedMessageCount(1);
    sendBody(endpointName,"<test>Hello World!</test>");
    assertTrue("Should have been handled",handled);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:processor").doTry().process(new ProcessorFail()).to("mock:result").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last");
        from("direct:expression").doTry().setBody(new ProcessorFail()).to("mock:result").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last");
        from("direct:predicate").doTry().to("direct:sub-predicate").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last");
        from("direct:sub-predicate").errorHandler(noErrorHandler()).filter(new ProcessorFail()).to("mock:result");
      }
    }
;
  }
private class ProcessorFail implements Processor, Predicate, Expression {
    public void process(    Exchange exchange) throws Exception {
      throw new RuntimeCamelException(new CamelException("Force to fail"));
    }
    public <T>T evaluate(    Exchange exchange,    Class<T> type){
      throw new RuntimeCamelException(new CamelException("Force to fail"));
    }
    public boolean matches(    Exchange exchange){
      throw new RuntimeCamelException(new CamelException("Force to fail"));
    }
  }
private class ProcessorHandle implements Processor {
    public void process(    Exchange exchange) throws Exception {
      handled=true;
      assertEquals("Should not be marked as failed",false,exchange.isFailed());
      Exception e=(Exception)exchange.getProperty(Exchange.EXCEPTION_CAUGHT);
      assertNotNull("There should be an exception",e);
      CamelException cause=assertIsInstanceOf(CamelException.class,e.getCause());
      assertNotNull(cause);
      assertEquals("Force to fail",cause.getMessage());
    }
  }
}
