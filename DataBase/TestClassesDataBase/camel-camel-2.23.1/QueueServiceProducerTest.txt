public class QueueServiceProducerTest {
  private static final String AZURE_STORAGE_QUEUE="AZURE_STORAGE_QUEUE";
  @Test public void testAppendQueue() throws Exception {
    StorageCredentials creds=getStorageCredentials("camelqueue",System.getenv(AZURE_STORAGE_QUEUE));
    Assume.assumeNotNull("Credentials not null",creds);
    OperationContext.setLoggingEnabledByDefault(true);
    CamelContext camelctx=createCamelContext(creds);
    camelctx.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:createQueue").to("azure-queue://camelqueue/queue1?credentials=#creds&operation=createQueue");
        from("direct:listQueues").to("azure-queue://camelqueue?credentials=#creds&operation=listQueues");
        from("direct:deleteQueue").to("azure-queue://camelqueue/queue1?credentials=#creds&operation=deleteQueue");
        from("direct:addMessage").to("azure-queue://camelqueue/queue1?credentials=#creds&operation=addMessage");
        from("direct:retrieveMessage").to("azure-queue://camelqueue/queue1?credentials=#creds&operation=retrieveMessage");
      }
    }
);
    camelctx.start();
    try {
      ProducerTemplate producer=camelctx.createProducerTemplate();
      Iterator<?> it=producer.requestBody("direct:listQueues",null,Iterable.class).iterator();
      Assert.assertFalse("No more queues",it.hasNext());
      producer.sendBody("direct:addMessage","SomeMsg");
      it=producer.requestBody("direct:listQueues",null,Iterable.class).iterator();
      Assert.assertTrue("Has queues",it.hasNext());
      CloudQueue queue=(CloudQueue)it.next();
      Assert.assertEquals("queue1",queue.getName());
      Assert.assertFalse("No more queues",it.hasNext());
      try {
        CloudQueueMessage msg=producer.requestBody("direct:retrieveMessage",null,CloudQueueMessage.class);
        Assert.assertNotNull("Retrieve a message",msg);
        Assert.assertEquals("SomeMsg",msg.getMessageContentAsString());
      }
  finally {
        queue.delete();
      }
    }
  finally {
      camelctx.stop();
    }
  }
  private StorageCredentials getStorageCredentials(  String account,  String key){
    return key != null ? new StorageCredentialsAccountAndKey(account,key) : null;
  }
  private CamelContext createCamelContext(  StorageCredentials credentials) throws Exception {
    JndiRegistry registry=new JndiRegistry(createJndiContext());
    registry.bind("creds",credentials);
    return new DefaultCamelContext(registry);
  }
  private Context createJndiContext() throws Exception {
    Properties properties=new Properties();
    properties.put("java.naming.factory.initial","org.apache.camel.util.jndi.CamelInitialContextFactory");
    return new InitialContext(new Hashtable<>(properties));
  }
}
