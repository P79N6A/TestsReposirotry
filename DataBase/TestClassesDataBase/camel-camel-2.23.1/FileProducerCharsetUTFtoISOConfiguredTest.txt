/** 
 */
public class FileProducerCharsetUTFtoISOConfiguredTest extends ContextTestSupport {
  private byte[] utf;
  private byte[] iso;
  @Override @Before public void setUp() throws Exception {
    utf="ABC\u00e6".getBytes("utf-8");
    iso="ABC\u00e6".getBytes("iso-8859-1");
    deleteDirectory("target/charset");
    createDirectory("target/charset/input");
    log.debug("utf: {}",new String(utf,Charset.forName("utf-8")));
    log.debug("iso: {}",new String(iso,Charset.forName("iso-8859-1")));
    for (    byte b : utf) {
      log.debug("utf byte: {}",b);
    }
    for (    byte b : iso) {
      log.debug("iso byte: {}",b);
    }
    OutputStream fos=Files.newOutputStream(Paths.get("target/charset/input/input.txt"));
    fos.write(utf);
    fos.close();
    super.setUp();
  }
  @Test public void testFileProducerCharsetUTFtoISO() throws Exception {
    oneExchangeDone.matchesMockWaitTime();
    File file=new File("target/charset/output.txt");
    assertTrue("File should exist",file.exists());
    InputStream fis=Files.newInputStream(Paths.get(file.getAbsolutePath()));
    byte[] buffer=new byte[100];
    int len=fis.read(buffer);
    assertTrue("Should read data: " + len,len != -1);
    byte[] data=new byte[len];
    System.arraycopy(buffer,0,data,0,len);
    fis.close();
    assertEquals(4,data.length);
    assertEquals(65,data[0]);
    assertEquals(66,data[1]);
    assertEquals(67,data[2]);
    assertEquals(-26,data[3]);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/charset/input?initialDelay=0&delay=10&charset=utf-8&noop=true").to("file:target/charset/?fileName=output.txt&charset=iso-8859-1");
      }
    }
;
  }
}
