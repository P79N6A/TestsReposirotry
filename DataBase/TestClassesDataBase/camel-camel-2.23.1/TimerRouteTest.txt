@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes={TimerRouteTest.TestConfig.class},loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpoints public class TimerRouteTest {
  @EndpointInject(uri="mock:out") private MockEndpoint endpoint;
  @Produce(uri="direct:in-1") private ProducerTemplate producer1;
  @Produce(uri="direct:in-2") private ProducerTemplate producer2;
  private MetricRegistry mockRegistry;
  private Timer mockTimer;
  private InOrder inOrder;
@Configuration public static class TestConfig extends SingleRouteCamelConfiguration {
    @Bean @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:in-1").to("metrics:timer:A?action=start").to("mock:out");
          from("direct:in-2").to("metrics:timer:A").to("mock:out");
        }
      }
;
    }
    @Bean(name=METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry(){
      return Mockito.mock(MetricRegistry.class);
    }
  }
  @Before public void setup(){
    mockRegistry=endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME,MetricRegistry.class);
    mockTimer=Mockito.mock(Timer.class);
    inOrder=Mockito.inOrder(mockRegistry,mockTimer);
  }
  @After public void tearDown(){
    endpoint.reset();
    reset(mockRegistry,mockTimer);
  }
  @Test public void testOverrideMetricsName() throws Exception {
    when(mockRegistry.timer("B")).thenReturn(mockTimer);
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer1.sendBodyAndHeader(body,HEADER_METRIC_NAME,"B");
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).timer("B");
    inOrder.verify(mockTimer,times(1)).time();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testOverrideExistingAction() throws Exception {
    when(mockRegistry.timer("A")).thenReturn(mockTimer);
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer1.sendBodyAndHeader(body,HEADER_TIMER_ACTION,MetricsTimerAction.stop);
    endpoint.assertIsSatisfied();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testOverrideNoAction() throws Exception {
    when(mockRegistry.timer("A")).thenReturn(mockTimer);
    Object body=new Object();
    endpoint.expectedBodiesReceived(body);
    producer2.sendBodyAndHeader(body,HEADER_TIMER_ACTION,MetricsTimerAction.start);
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).timer("A");
    inOrder.verify(mockTimer,times(1)).time();
    inOrder.verifyNoMoreInteractions();
  }
}
