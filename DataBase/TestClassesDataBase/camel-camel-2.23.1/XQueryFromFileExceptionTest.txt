/** 
 */
public class XQueryFromFileExceptionTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/xquery");
    super.setUp();
  }
  @Test public void testXQueryFromFileExceptionOk() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    String body="<person user='James'><firstName>James</firstName>" + "<lastName>Strachan</lastName><city>London</city></person>";
    template.sendBodyAndHeader("file:target/xquery",body,Exchange.FILE_NAME,"hello.xml");
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    File file=new File("target/xquery/hello.xml");
    assertFalse("File should not exists " + file,file.exists());
    file=new File("target/xquery/ok/hello.xml");
    assertTrue("File should exists " + file,file.exists());
  }
  @Test public void testXQueryFromFileExceptionFail() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    String body="<person user='James'><firstName>James</firstName>" + "<lastName>Strachan</lastName><city>London</city></person";
    template.sendBodyAndHeader("file:target/xquery",body,Exchange.FILE_NAME,"hello2.xml");
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    File file=new File("target/xquery/hello2.xml");
    assertFalse("File should not exists " + file,file.exists());
    file=new File("target/xquery/error/hello2.xml");
    assertTrue("File should exists " + file,file.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/xquery?moveFailed=error&move=ok").onException(Exception.class).to("mock:error").end().to("xquery:org/apache/camel/component/xquery/myTransform.xquery").to("mock:result");
      }
    }
;
  }
}
