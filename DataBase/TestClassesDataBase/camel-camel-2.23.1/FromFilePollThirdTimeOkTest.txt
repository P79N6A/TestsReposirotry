public class FromFilePollThirdTimeOkTest extends ContextTestSupport {
  private static int counter;
  private String body="Hello World this file will be deleted";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/deletefile");
    super.setUp();
  }
  @Test public void testPollFileAndShouldBeDeletedAtThirdPoll() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(3).create();
    template.sendBodyAndHeader("file://target/deletefile",body,Exchange.FILE_NAME,"hello.txt");
    context.startRoute("FromFilePollThirdTimeOkTest");
    getMockEndpoint("mock:result").expectedBodiesReceived(body);
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    assertEquals(3,counter);
    File file=new File("target/deletefile/hello.txt");
    assertFalse("The file should have been deleted",file.exists());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/deletefile?delete=true&initialDelay=0&delay=10").noAutoStartup().routeId("FromFilePollThirdTimeOkTest").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            if (counter < 3) {
              File file=new File("target/deletefile/hello.txt");
              assertTrue("The file should NOT have been deleted",file.exists());
              throw new IllegalArgumentException("Forced by unittest");
            }
          }
        }
).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
