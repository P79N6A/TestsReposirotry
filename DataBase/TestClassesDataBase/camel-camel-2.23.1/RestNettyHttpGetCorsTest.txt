public class RestNettyHttpGetCorsTest extends BaseNettyTest {
  @Test public void testCors() throws Exception {
    getMockEndpoint("mock:input").expectedMessageCount(0);
    Exchange out=template.request("http://localhost:" + getPort() + "/users/123/basic",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(Exchange.HTTP_METHOD,"OPTIONS");
      }
    }
);
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_ORIGIN,out.getOut().getHeader("Access-Control-Allow-Origin"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_METHODS,out.getOut().getHeader("Access-Control-Allow-Methods"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_HEADERS,out.getOut().getHeader("Access-Control-Allow-Headers"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_MAX_AGE,out.getOut().getHeader("Access-Control-Max-Age"));
    assertMockEndpointsSatisfied();
    resetMocks();
    getMockEndpoint("mock:input").expectedMessageCount(1);
    String out2=template.requestBody("http://localhost:" + getPort() + "/users/123/basic",null,String.class);
    assertEquals("123;Donald Duck",out2);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("netty4-http").host("localhost").port(getPort()).enableCORS(true);
        rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("id",String.class);
            exchange.getOut().setBody(id + ";Donald Duck");
          }
        }
);
      }
    }
;
  }
}
