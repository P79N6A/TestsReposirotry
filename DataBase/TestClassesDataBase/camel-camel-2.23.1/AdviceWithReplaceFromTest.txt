/** 
 * Advice with match multiple ids test
 */
public class AdviceWithReplaceFromTest extends ContextTestSupport {
  @Test public void testReplaceFromUri() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        replaceFromWith("seda:foo");
      }
    }
);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testReplaceFromEndpoint() throws Exception {
    final Endpoint endpoint=context.getEndpoint("seda:foo");
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        replaceFromWith(endpoint);
      }
    }
);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testReplaceFromInvalidUri() throws Exception {
    try {
      context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
        @Override public void configure() throws Exception {
          replaceFromWith("xxx:foo");
        }
      }
);
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      assertIsInstanceOf(ResolveEndpointFailedException.class,e.getCause());
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
      }
    }
;
  }
}
