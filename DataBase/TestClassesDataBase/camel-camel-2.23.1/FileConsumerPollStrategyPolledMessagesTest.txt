/** 
 * Unit test for poll strategy
 */
public class FileConsumerPollStrategyPolledMessagesTest extends ContextTestSupport {
  private static int maxPolls;
  private final CountDownLatch latch=new CountDownLatch(1);
  private String fileUrl="file://target/pollstrategy/?consumer.pollStrategy=#myPoll&initialDelay=0&delay=10";
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myPoll",new MyPollStrategy());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/pollstrategy");
    super.setUp();
  }
  @Test public void testPolledMessages() throws Exception {
    template.sendBodyAndHeader("file:target/pollstrategy/","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:target/pollstrategy/","Bye World",Exchange.FILE_NAME,"bye.txt");
    context.startRoute("foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    assertMockEndpointsSatisfied();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertEquals(2,maxPolls);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
private class MyPollStrategy implements PollingConsumerPollStrategy {
    public boolean begin(    Consumer consumer,    Endpoint endpoint){
      return true;
    }
    public void commit(    Consumer consumer,    Endpoint endpoint,    int polledMessages){
      if (polledMessages > maxPolls) {
        maxPolls=polledMessages;
      }
      latch.countDown();
    }
    public boolean rollback(    Consumer consumer,    Endpoint endpoint,    int retryCounter,    Exception cause) throws Exception {
      return false;
    }
  }
}
