public class JGroupsClusterRouteTest extends Assert {
  CamelContext firstCamelContext;
  CamelContext secondCamelContext;
  String clusterName=randomUUID().toString();
  String masterMockUri="mock:master?resultWaitTime=2m";
class Builder extends RouteBuilder {
    @Override public void configure() throws Exception {
      from("jgroups:" + clusterName + "?enableViewMessages=true").filter(dropNonCoordinatorViews()).threads().delay(delayIfContextNotStarted(SECONDS.toMillis(15))).to("controlbus:route?routeId=masterRoute&action=start&async=true");
      from("timer://master?repeatCount=1").routeId("masterRoute").autoStartup(false).to(masterMockUri);
    }
  }
  @Before public void setUp() throws Exception {
    firstCamelContext=new DefaultCamelContext();
    firstCamelContext.addRoutes(new Builder());
    secondCamelContext=new DefaultCamelContext();
    secondCamelContext.addRoutes(new Builder());
  }
  @Test public void shouldElectSecondNode() throws Exception {
    expectMasterIs(firstCamelContext);
    firstCamelContext.start();
    assertMasterIs(firstCamelContext);
    expectMasterIsNot(secondCamelContext);
    secondCamelContext.start();
    assertMasterIsNot(secondCamelContext);
    expectMasterIs(secondCamelContext);
    firstCamelContext.stop();
    assertMasterIs(secondCamelContext);
  }
  @Test public void shouldKeepMaster() throws Exception {
    expectMasterIs(firstCamelContext);
    firstCamelContext.start();
    assertMasterIs(firstCamelContext);
    expectMasterIsNot(secondCamelContext);
    secondCamelContext.start();
    assertMasterIsNot(secondCamelContext);
    expectMasterIs(firstCamelContext);
    secondCamelContext.stop();
    assertMasterIs(firstCamelContext);
  }
  @Test public void shouldElectSecondNodeAndReturnToFirst() throws Exception {
    expectMasterIs(firstCamelContext);
    firstCamelContext.start();
    assertMasterIs(firstCamelContext);
    expectMasterIsNot(secondCamelContext);
    secondCamelContext.start();
    assertMasterIsNot(secondCamelContext);
    expectMasterIsNot(firstCamelContext);
    firstCamelContext.stop();
    assertMasterIsNot(firstCamelContext);
    expectMasterIsNot(firstCamelContext);
    firstCamelContext.start();
    assertMasterIsNot(firstCamelContext);
    expectMasterIs(firstCamelContext);
    secondCamelContext.stop();
    assertMasterIs(firstCamelContext);
  }
  private void expectMasterIs(  CamelContext camelContext){
    camelContext.getEndpoint(masterMockUri,MockEndpoint.class).expectedMessageCount(1);
  }
  private void expectMasterIsNot(  CamelContext camelContext){
    camelContext.getEndpoint(masterMockUri,MockEndpoint.class).expectedMessageCount(0);
  }
  private void assertMasterIs(  CamelContext camelContext) throws InterruptedException {
    camelContext.getEndpoint(masterMockUri,MockEndpoint.class).assertIsSatisfied();
  }
  private void assertMasterIsNot(  CamelContext camelContext) throws InterruptedException {
    camelContext.getEndpoint(masterMockUri,MockEndpoint.class).assertIsSatisfied();
  }
}
