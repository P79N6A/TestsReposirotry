/** 
 * Unit test for Mail using camel headers to set recipient subject.
 */
public class RawMailMessageTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    Mailbox.clearAll();
    prepareMailbox("jonesPop3","pop3");
    prepareMailbox("jonesRawPop3","pop3");
    prepareMailbox("jonesImap","imap");
    prepareMailbox("jonesRawImap","imap");
    super.setUp();
  }
  @Test public void testGetRawJavaMailMessage() throws Exception {
    Mailbox.clearAll();
    Map<String,Object> map=new HashMap<>();
    map.put("To","davsclaus@apache.org");
    map.put("From","jstrachan@apache.org");
    map.put("Subject","Camel rocks");
    String body="Hello Claus.\nYes it does.\n\nRegards James.";
    getMockEndpoint("mock:mail").expectedMessageCount(1);
    template.sendBodyAndHeaders("smtp://davsclaus@apache.org",body,map);
    assertMockEndpointsSatisfied();
    Exchange exchange=getMockEndpoint("mock:mail").getReceivedExchanges().get(0);
    Message javaMailMessage=exchange.getIn(MailMessage.class).getMessage();
    assertNotNull(javaMailMessage);
    assertEquals("Camel rocks",javaMailMessage.getSubject());
  }
  @Test public void testRawMessageConsumerPop3() throws Exception {
    testRawMessageConsumer("Pop3");
  }
  @Test public void testRawMessageConsumerImap() throws Exception {
    testRawMessageConsumer("Imap");
  }
  private void testRawMessageConsumer(  String type) throws Exception {
    Mailbox mailboxRaw=Mailbox.get("jonesRaw" + type + "@localhost");
    assertEquals(1,mailboxRaw.size());
    MockEndpoint mock=getMockEndpoint("mock://rawMessage" + type);
    mock.expectedMessageCount(1);
    mock.expectedBodyReceived().body().isNotNull();
    assertMockEndpointsSatisfied();
    Message mailMessage=mock.getExchanges().get(0).getIn().getBody(Message.class);
    assertNotNull("mail subject should not be null",mailMessage.getSubject());
    assertEquals("mail subject should be hurz","hurz",mailMessage.getSubject());
    Map<String,Object> headers=mock.getExchanges().get(0).getIn().getHeaders();
    assertNotNull(headers);
    assertTrue(!headers.isEmpty());
  }
  @Test public void testNormalMessageConsumerPop3() throws Exception {
    testNormalMessageConsumer("Pop3");
  }
  @Test public void testNormalMessageConsumerImap() throws Exception {
    testNormalMessageConsumer("Imap");
  }
  private void testNormalMessageConsumer(  String type) throws Exception {
    Mailbox mailbox=Mailbox.get("jones" + type + "@localhost");
    assertEquals(1,mailbox.size());
    MockEndpoint mock=getMockEndpoint("mock://normalMessage" + type);
    mock.expectedMessageCount(1);
    mock.expectedBodyReceived().body().isNotNull();
    assertMockEndpointsSatisfied();
    String body=mock.getExchanges().get(0).getIn().getBody(String.class);
    MimeMessage mm=new MimeMessage(null,new ByteArrayInputStream(body.getBytes()));
    String subject=mm.getSubject();
    assertNull("mail subject should not be available",subject);
    Map<String,Object> headers=mock.getExchanges().get(0).getIn().getHeaders();
    assertNotNull(headers);
    assertTrue(!headers.isEmpty());
  }
  private void prepareMailbox(  String user,  String type) throws Exception {
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore(type);
    store.connect("localhost",25,user,"secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    InputStream is=getClass().getResourceAsStream("/SignedMailTestCaseHurz.elm");
    Message hurzMsg=new MimeMessage(sender.getSession(),is);
    Message[] messages=new Message[]{hurzMsg};
    folder.appendMessages(messages);
    folder.close(true);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("pop3://davsclaus@apache.org").to("mock:mail");
        from("pop3://jonesRawPop3@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true&mapMailMessage=false").to("mock://rawMessagePop3");
        from("imap://jonesRawImap@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true&mapMailMessage=false").to("mock://rawMessageImap");
        from("pop3://jonesPop3@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true").to("mock://normalMessagePop3");
        from("imap://jonesImap@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true").to("mock://normalMessageImap");
      }
    }
;
  }
}
