public class AggregationStrategyWithPreservationTest extends CamelTestSupport {
  private static final int EXPECTED_NO_FILES=5;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/out");
    super.setUp();
  }
  @Test public void testSplitter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregateToZipEntry");
    mock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    File[] files=new File("target/out").listFiles();
    assertTrue("Should be a file in target/out directory",files.length > 0);
    File resultFile=files[0];
    Set<String> expectedZipFiles=new HashSet<>(Arrays.asList("another" + File.separator + "hello.txt","other" + File.separator + "greetings.txt","chiau.txt","hi.txt","hola.txt"));
    ZipInputStream zin=new ZipInputStream(new FileInputStream(resultFile));
    try {
      int fileCount=0;
      for (ZipEntry ze=zin.getNextEntry(); ze != null; ze=zin.getNextEntry()) {
        expectedZipFiles.remove(ze.toString());
        fileCount++;
      }
      assertTrue("Zip file should contains " + AggregationStrategyWithPreservationTest.EXPECTED_NO_FILES + " files",fileCount == AggregationStrategyWithPreservationTest.EXPECTED_NO_FILES);
      assertEquals("Should have found all of the zip files in the file.",0,expectedZipFiles.size());
    }
  finally {
      IOHelper.close(zin);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:src/test/resources/org/apache/camel/aggregate/zipfile/data?consumer.delay=1000&noop=true&recursive=true").aggregate(new ZipAggregationStrategy(true,true)).constant(true).completionFromBatchConsumer().eagerCheckCompletion().to("file:target/out").to("mock:aggregateToZipEntry").log("Done processing zip file: ${header.CamelFileName}");
      }
    }
;
  }
}
