/** 
 * Unit test for URI validation when creating an endpoint
 */
public class DefaultComponentValidateURITest extends ContextTestSupport {
  @Test public void testNoParameters() throws Exception {
    Endpoint endpoint=context.getEndpoint("timer://foo");
    assertNotNull("Should have created an endpoint",endpoint);
  }
  @Test public void testUnknownParameter() throws Exception {
    try {
      context.getEndpoint("timer://foo?delay=250&unknown=1&period=500");
      fail("Should have thrown ResolveEndpointFailedException");
    }
 catch (    ResolveEndpointFailedException e) {
    }
  }
  @Test public void testDoubleAmpersand() throws Exception {
    try {
      context.getEndpoint("timer://foo?delay=250&&period=500");
      fail("Should have thrown ResolveEndpointFailedException");
    }
 catch (    ResolveEndpointFailedException e) {
    }
  }
  @Test public void testTrailingAmpersand() throws Exception {
    try {
      context.getEndpoint("timer://foo?delay=250&period=500&");
      fail("Should have thrown ResolveEndpointFailedException");
    }
 catch (    ResolveEndpointFailedException e) {
    }
  }
  @Test public void testScheduledPollConsumerOptions() throws Exception {
    Endpoint endpint=context.getEndpoint("file://target/foo?consumer.delay=1000");
    assertNotNull(endpint);
    endpint=context.getEndpoint("file://target/foo?consumer.delay=1000&consumer.initialDelay=5000");
    assertNotNull(endpint);
    endpint=context.getEndpoint("file://target/foo?consumer.delay=1000&consumer.initialDelay=5000&consumer.useFixedDelay=false");
    assertNotNull(endpint);
    endpint=context.getEndpoint("file://foo2?delay=1000");
    assertNotNull(endpint);
    endpint=context.getEndpoint("file://foo2?delay=1000&initialDelay=5000");
    assertNotNull(endpint);
    endpint=context.getEndpoint("file://foo2?delay=1000&initialDelay=5000&useFixedDelay=false");
    assertNotNull(endpint);
    endpint=context.getEndpoint("file://foo3?delay=1000&consumer.initialDelay=5000&useFixedDelay=false");
    assertNotNull(endpint);
  }
}
