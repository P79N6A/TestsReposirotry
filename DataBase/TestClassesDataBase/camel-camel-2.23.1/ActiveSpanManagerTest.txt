public class ActiveSpanManagerTest extends ExchangeTestSupport {
  private MockTracer tracer=new MockTracer();
  @Test public void testNoSpan(){
    Exchange exchange=createExchange();
    assertNull(ActiveSpanManager.getSpan(exchange));
  }
  @Test public void testCurrentSpan(){
    Exchange exchange=createExchange();
    Span span=tracer.buildSpan("test").start();
    ActiveSpanManager.activate(exchange,span);
    assertEquals(span,ActiveSpanManager.getSpan(exchange));
    ActiveSpanManager.deactivate(exchange);
    assertNull(ActiveSpanManager.getSpan(exchange));
  }
  @Test public void testCreateChild(){
    Exchange exchange=createExchange();
    Span parent=tracer.buildSpan("parent").start();
    ActiveSpanManager.activate(exchange,parent);
    Span child=tracer.buildSpan("child").start();
    ActiveSpanManager.activate(exchange,child);
    assertEquals(child,ActiveSpanManager.getSpan(exchange));
    ActiveSpanManager.deactivate(exchange);
    assertEquals(parent,ActiveSpanManager.getSpan(exchange));
  }
  @Test public void testIsolatedConcurrentExchanges(){
    Exchange exchange=createExchange();
    Span parent=tracer.buildSpan("parent").start();
    ActiveSpanManager.activate(exchange,parent);
    Exchange path1=exchange.copy(true);
    Exchange path2=exchange.copy(true);
    assertEquals(parent,ActiveSpanManager.getSpan(path1));
    assertEquals(parent,ActiveSpanManager.getSpan(path2));
    Span child1=tracer.buildSpan("child1").start();
    ActiveSpanManager.activate(path1,child1);
    Span child2=tracer.buildSpan("child2").start();
    ActiveSpanManager.activate(path2,child2);
    ActiveSpanManager.deactivate(path2);
    ActiveSpanManager.activate(path2,parent);
  }
}
