/** 
 * @version 
 */
public class WireTapStreamCachingTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  public void testSendingAMessageUsingWiretapConvertsToReReadable() throws Exception {
    x.expectedBodiesReceived("<input/>+output");
    y.expectedBodiesReceived("<input/>+output");
    z.expectedBodiesReceived("<input/>+output");
    template.send("direct:a",new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(new StreamSource(new StringReader("<input/>")));
        in.setHeader("foo","bar");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendingAMessageUsingWiretapShouldNotDeleteStreamFileBeforeAllExcangesAreComplete() throws InterruptedException {
    x.expectedMessageCount(1);
    y.expectedMessageCount(1);
    z.expectedMessageCount(1);
    template.sendBody("direct:a",this.getClass().getClassLoader().getResourceAsStream("org/apache/camel/processor/twoCharacters.txt"));
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  protected RouteBuilder createRouteBuilder(){
    final Processor processor=new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        String body=in.getBody(String.class);
        in.setBody(body + "+output");
      }
    }
;
    return new RouteBuilder(){
      public void configure(){
        context.setStreamCaching(true);
        context.getStreamCachingStrategy().setSpoolThreshold(1);
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
        from("direct:a").wireTap("direct:x").wireTap("direct:y").wireTap("direct:z");
        from("direct:x").process(processor).to("mock:x");
        from("direct:y").delay(500).process(processor).to("mock:y");
        from("direct:z").process(processor).to("mock:z");
      }
    }
;
  }
}
