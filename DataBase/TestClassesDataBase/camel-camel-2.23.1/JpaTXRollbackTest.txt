/** 
 * @version 
 */
public class JpaTXRollbackTest extends AbstractJpaTest {
  protected static final String SELECT_ALL_STRING="select x from " + SendEmail.class.getName() + " x";
  private static AtomicInteger foo=new AtomicInteger();
  private static AtomicInteger bar=new AtomicInteger();
  @Test public void testTXRollback() throws Exception {
    template.sendBody("jpa://" + SendEmail.class.getName(),new SendEmail("foo@beer.org"));
    template.sendBody("jpa://" + SendEmail.class.getName(),new SendEmail("bar@beer.org"));
    template.sendBody("jpa://" + SendEmail.class.getName(),new SendEmail("kaboom@beer.org"));
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(4);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    assertTrue("Should be >= 2, was: " + foo.intValue(),foo.intValue() >= 2);
    assertTrue("Should be >= 2, was: " + bar.intValue(),bar.intValue() >= 2);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jpa://" + SendEmail.class.getName() + "?consumer.transacted=true&delay=1000").routeId("foo").noAutoStartup().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            SendEmail send=exchange.getIn().getBody(SendEmail.class);
            if ("kaboom@beer.org".equals(send.getAddress())) {
              throw new IllegalArgumentException("Forced");
            }
            if ("foo@beer.org".equals(send.getAddress())) {
              foo.incrementAndGet();
            }
 else             if ("bar@beer.org".equals(send.getAddress())) {
              bar.incrementAndGet();
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
  @Override protected String routeXml(){
    return "org/apache/camel/processor/jpa/springJpaRouteTest.xml";
  }
  @Override protected String selectAllString(){
    return SELECT_ALL_STRING;
  }
}
