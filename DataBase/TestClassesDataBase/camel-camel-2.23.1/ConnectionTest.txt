public class ConnectionTest extends CamelTestSupport {
  private static final String DIRECT_SEND_S_1="direct:sendServer1";
  private static final String DIRECT_SEND_C_1="direct:sendClient1";
  private static final String MOCK_CLIENT_1="mock:testClient1";
  private static final String MOCK_CLIENT_2="mock:testClient2";
  private static final String MOCK_SERVER_1="mock:testServer1";
  @Produce(uri=DIRECT_SEND_S_1) protected ProducerTemplate producerServer1;
  @Produce(uri=DIRECT_SEND_C_1) protected ProducerTemplate producerClient1;
  @EndpointInject(uri=MOCK_CLIENT_1) protected MockEndpoint testClient1Endpoint;
  @EndpointInject(uri=MOCK_CLIENT_2) protected MockEndpoint testClient2Endpoint;
  @EndpointInject(uri=MOCK_SERVER_1) protected MockEndpoint testServer1Endpoint;
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    final int port=Ports.pickServerPort();
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(DIRECT_SEND_S_1).toF("iec60870-server:localhost:%s/00-00-00-00-01",port);
        fromF("iec60870-client:localhost:%s/00-00-00-00-01",port).to(MOCK_CLIENT_1);
        fromF("iec60870-client:localhost:%s/00-00-00-00-02",port).to(MOCK_CLIENT_2);
        from(DIRECT_SEND_C_1).toF("iec60870-client:localhost:%s/00-00-00-01-01",port);
        fromF("iec60870-server:localhost:%s/00-00-00-01-01",port).to(MOCK_SERVER_1);
      }
    }
;
  }
  @Test public void testFloat1() throws InterruptedException {
    this.producerServer1.sendBody(1.23f);
    this.testClient1Endpoint.setExpectedCount(1);
    this.testClient2Endpoint.setExpectedCount(0);
    expectValue(testClient1Endpoint.message(0),assertGoodValue(1.23f));
    assertMockEndpointsSatisfied(1_000,TimeUnit.MILLISECONDS);
  }
  @Test public void testBoolean1() throws InterruptedException {
    this.producerServer1.sendBody(true);
    this.testClient1Endpoint.setExpectedCount(1);
    this.testClient2Endpoint.setExpectedCount(0);
    expectValue(testClient1Endpoint.message(0),assertGoodValue(true));
    assertMockEndpointsSatisfied(1_000,TimeUnit.MILLISECONDS);
  }
  @Test public void testCommand1() throws InterruptedException {
    Thread.sleep(1_000);
    this.producerClient1.sendBody(true);
    this.testServer1Endpoint.setExpectedCount(1);
    expectRequest(testServer1Endpoint.message(0),expectRequest(true));
    assertMockEndpointsSatisfied(2_000,TimeUnit.MILLISECONDS);
    System.out.println(testServer1Endpoint.getExchanges().get(0).getIn().getBody());
  }
  private <T>void expectValue(  AssertionClause message,  Consumer<Value<?>> consumer){
    message.predicate(exchange -> {
      final Value<?> body=exchange.getIn().getBody(Value.class);
      consumer.accept(body);
      return true;
    }
);
  }
  private <T>void expectRequest(  AssertionClause message,  Consumer<Request<?>> consumer){
    message.predicate(exchange -> {
      final Request<?> body=exchange.getIn().getBody(Request.class);
      consumer.accept(body);
      return true;
    }
);
  }
  public static Consumer<Value<?>> assertGoodValue(  final Object expectedValue){
    return value -> {
      assertNotNull(value);
      assertEquals(expectedValue,value.getValue());
      assertTrue(value.getQualityInformation().isValid());
      assertTrue(value.getQualityInformation().isTopical());
      assertFalse(value.getQualityInformation().isBlocked());
      assertFalse(value.getQualityInformation().isSubstituted());
    }
;
  }
  private Consumer<Request<?>> expectRequest(  final Object expectedValue){
    return value -> {
      assertNotNull(value);
      assertEquals(expectedValue,value.getValue());
    }
;
  }
}
