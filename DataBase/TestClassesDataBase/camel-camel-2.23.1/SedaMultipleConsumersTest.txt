/** 
 * @version 
 */
public class SedaMultipleConsumersTest extends ContextTestSupport {
  @Test public void testSedaMultipleConsumers() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    getMockEndpoint("mock:b").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    template.sendBody("seda:foo","Hello World");
    template.sendBody("seda:bar","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSedaMultipleConsumersNewAdded() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    getMockEndpoint("mock:b").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    getMockEndpoint("mock:c").expectedMessageCount(0);
    template.sendBody("seda:foo","Hello World");
    template.sendBody("seda:bar","Bye World");
    assertMockEndpointsSatisfied();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?multipleConsumers=true").id("testRoute").to("mock:c");
      }
    }
);
    resetMocks();
    getMockEndpoint("mock:a").expectedMessageCount(20);
    getMockEndpoint("mock:b").expectedMessageCount(20);
    getMockEndpoint("mock:c").expectedMessageCount(20);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:foo","Hello World");
      template.sendBody("seda:bar","Bye World");
    }
    assertMockEndpointsSatisfied();
    resetMocks();
    context.suspendRoute("testRoute");
    getMockEndpoint("mock:a").expectedMessageCount(20);
    getMockEndpoint("mock:b").expectedMessageCount(20);
    getMockEndpoint("mock:c").expectedMessageCount(0);
    for (int i=0; i < 10; i++) {
      template.sendBody("seda:foo","Hello World");
      template.sendBody("seda:bar","Bye World");
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?multipleConsumers=true").to("mock:a");
        from("seda:foo?multipleConsumers=true").to("mock:b");
        from("seda:bar").to("seda:foo?multipleConsumers=true");
      }
    }
;
  }
}
