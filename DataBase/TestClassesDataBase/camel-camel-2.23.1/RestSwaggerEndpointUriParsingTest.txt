@RunWith(Parameterized.class) public class RestSwaggerEndpointUriParsingTest {
  @Parameter(3) public String operationId;
  @Parameter(1) public String remaining;
  @Parameter(2) public String specificationUri;
  @Parameter(0) public String uri;
  @Test public void shouldParseEndpointUri(){
    final RestSwaggerComponent component=new RestSwaggerComponent();
    final RestSwaggerEndpoint endpoint=new RestSwaggerEndpoint(specificationUri,remaining,component,Collections.emptyMap());
    assertThat(endpoint.getSpecificationUri().toString()).isEqualTo(specificationUri);
    assertThat(endpoint.getOperationId()).isEqualTo(operationId);
  }
  @Parameters(name="uri={0}, remaining={1}") public static Iterable<Object[]> parameters(){
    return Arrays.asList(params("rest-swagger:operation","operation","swagger.json","operation"),params("rest-swagger:my-api.json#operation","my-api.json#operation","my-api.json","operation"),params("rest-swagger:http://api.example.com/swagger.json#operation","http://api.example.com/swagger.json#operation","http://api.example.com/swagger.json","operation"));
  }
  static Object[] params(  final String uri,  final String remaining,  final String specificationUri,  final String operationId){
    return new Object[]{uri,remaining,specificationUri,operationId};
  }
}
