/** 
 * Unit test for aggregate grouped exchanges completed by size
 */
public class AggregateGroupedExchangeSizeTest extends ContextTestSupport {
  @SuppressWarnings("unchecked") @Test public void testGroupedSize() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(2);
    template.sendBody("direct:start","100");
    template.sendBody("direct:start","150");
    template.sendBody("direct:start","130");
    template.sendBody("direct:start","200");
    template.sendBody("direct:start","190");
    template.sendBody("direct:start","120");
    assertMockEndpointsSatisfied();
    Exchange out=result.getExchanges().get(0);
    List<Exchange> grouped=out.getIn().getBody(List.class);
    assertEquals(3,grouped.size());
    assertEquals("100",grouped.get(0).getIn().getBody(String.class));
    assertEquals("150",grouped.get(1).getIn().getBody(String.class));
    assertEquals("130",grouped.get(2).getIn().getBody(String.class));
    out=result.getExchanges().get(1);
    grouped=out.getIn().getBody(List.class);
    assertEquals(3,grouped.size());
    assertEquals("200",grouped.get(0).getIn().getBody(String.class));
    assertEquals("190",grouped.get(1).getIn().getBody(String.class));
    assertEquals("120",grouped.get(2).getIn().getBody(String.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").aggregate(new GroupedExchangeAggregationStrategy()).constant(true).completionSize(3).to("mock:result").end();
      }
    }
;
  }
}
