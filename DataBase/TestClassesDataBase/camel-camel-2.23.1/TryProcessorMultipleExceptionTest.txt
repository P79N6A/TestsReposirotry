/** 
 * Unit test for try .. handle with multiple exceptions.
 */
public class TryProcessorMultipleExceptionTest extends ContextTestSupport {
  @Test public void testIOException() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:catch").expectedMessageCount(1);
    getMockEndpoint("mock:finally").expectedMessageCount(1);
    sendBody("direct:start","Damn IO");
    assertMockEndpointsSatisfied();
  }
  @Test public void testIllegalStateException() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:catch").expectedMessageCount(1);
    getMockEndpoint("mock:finally").expectedMessageCount(1);
    sendBody("direct:start","Damn State");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:catch").expectedMessageCount(0);
    getMockEndpoint("mock:finally").expectedMessageCount(1);
    sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @SuppressWarnings("unchecked") public void configure(){
        from("direct:start").doTry().process(new ProcessorFail()).to("mock:result").doCatch(IOException.class,IllegalStateException.class).to("mock:catch").doFinally().to("mock:finally").end();
      }
    }
;
  }
public static class ProcessorFail implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Damn IO".equals(body)) {
        throw new IOException("Damn IO");
      }
 else       if ("Damn State".equals(body)) {
        throw new IllegalStateException("Damn State");
      }
    }
  }
}
