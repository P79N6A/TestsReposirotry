/** 
 * @version 
 */
public class EnricherAggregateOnExceptionTest extends ContextTestSupport {
  @Test public void testEnrichTrueOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testEnrichTrueKaboom() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("I cannot do this");
    template.sendBody("direct:start","Kaboom");
    assertMockEndpointsSatisfied();
  }
  @Test public void testEnrichFalseOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("direct:start2","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testEnrichFalseKaboom() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBody("direct:start2","Kaboom");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("I cannot do this",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").enrich("direct:foo",new MyAggregationStrategy(),true).to("mock:result");
        from("direct:start2").enrich("direct:foo",new MyAggregationStrategy(),false).to("mock:result");
        from("direct:foo").process(new MyProcessor());
      }
    }
;
  }
public static class MyProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if (body.startsWith("Kaboom")) {
        throw new IllegalArgumentException("I cannot do this");
      }
      exchange.getIn().setBody("Hello " + body);
    }
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (newExchange.getException() != null) {
        oldExchange.getIn().setBody(newExchange.getException().getMessage());
        return oldExchange;
      }
      oldExchange.getIn().setBody(newExchange.getIn().getBody());
      return oldExchange;
    }
  }
}
