/** 
 * @version 
 */
public class NeilSplitterTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
class CatFight {
    String name;
    String[] cats;
    public String[] getCats(){
      return cats;
    }
    public void setCats(    String[] cats){
      this.cats=cats;
    }
    public String getName(){
      return name;
    }
    public void setName(    String name){
      this.name=name;
    }
  }
  @Test public void testCustomExpression() throws Exception {
    resultEndpoint.expectedBodiesReceived("Ginger","Mr Boots");
    template.send("direct:custom",new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        CatFight catFight=new CatFight();
        catFight.setName("blueydart");
        catFight.setCats(new String[]{"Ginger","Mr Boots"});
        in.setBody(catFight);
        in.setHeader("foo","bar");
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testXPathExpression() throws Exception {
    resultEndpoint.expectedBodiesReceived("<b>Ginger</b>","<b>Mr Boots</b>");
    template.send("direct:xpath",new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody("<a><b>Ginger</b><b>Mr Boots</b></a> ");
        in.setHeader("foo","bar");
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    resultEndpoint=getMockEndpoint("mock:result");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        Expression catFightCats=new ExpressionAdapter(){
          public Object evaluate(          Exchange exchange){
            CatFight catFight=(CatFight)exchange.getIn().getBody();
            String[] cats=catFight.getCats();
            return cats;
          }
        }
;
        from("direct:custom").split(catFightCats).to("mock:result");
        from("direct:xpath").split(xpath("/a/b")).to("mock:result");
      }
    }
;
  }
}
