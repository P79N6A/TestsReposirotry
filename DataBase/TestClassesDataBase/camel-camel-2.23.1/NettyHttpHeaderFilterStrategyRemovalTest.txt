public class NettyHttpHeaderFilterStrategyRemovalTest extends BaseNettyTest {
  NettyHttpHeaderFilterStrategy headerFilterStrategy=new NettyHttpHeaderFilterStrategy();
  @EndpointInject(uri="mock:test") MockEndpoint mockEndpoint;
  @Test public void shouldRemoveStrategyOption() throws Exception {
    String options="headerFilterStrategy=#headerFilterStrategy";
    mockEndpoint.expectedMessageCount(1);
    mockEndpoint.message(0).header(HTTP_QUERY).isNull();
    template.sendBody("netty4-http:http://localhost:" + getPort() + "/?"+ options,"message");
    assertMockEndpointsSatisfied();
  }
  @Test public void shouldResolveStrategyFromParameter() throws Exception {
    String headerToFilter="foo";
    headerFilterStrategy.setOutFilter(singleton(headerToFilter));
    String options="headerFilterStrategy=#headerFilterStrategy";
    mockEndpoint.expectedMessageCount(1);
    mockEndpoint.message(0).header(headerToFilter).isNull();
    template.sendBodyAndHeader("netty4-http:http://localhost:" + getPort() + "/?"+ options,"message",headerToFilter,"headerValue");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("headerFilterStrategy",headerFilterStrategy);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/").to(mockEndpoint);
      }
    }
;
  }
}
