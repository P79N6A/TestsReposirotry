public class ThriftProducerZlibCompressionTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(ThriftProducerZlibCompressionTest.class);
  private static TServerSocket serverTransport;
  private static TServer server;
  @SuppressWarnings({"rawtypes"}) private static Calculator.Processor processor;
  private static final int THRIFT_TEST_PORT=AvailablePortFinder.getNextAvailable();
  private static final int THRIFT_TEST_NUM1=12;
  private static final int THRIFT_TEST_NUM2=13;
  private static final int THRIFT_CLIENT_TIMEOUT=2000;
  @BeforeClass @SuppressWarnings({"unchecked","rawtypes"}) public static void startThriftServer() throws Exception {
    processor=new Calculator.Processor(new CalculatorSyncServerImpl());
    serverTransport=new TServerSocket(new InetSocketAddress(InetAddress.getByName("localhost"),THRIFT_TEST_PORT),THRIFT_CLIENT_TIMEOUT);
    TThreadPoolServer.Args args=new TThreadPoolServer.Args(serverTransport);
    args.processor(processor);
    args.protocolFactory(new TBinaryProtocol.Factory());
    args.transportFactory(new TZlibTransport.Factory());
    server=new TThreadPoolServer(args);
    Runnable simple=new Runnable(){
      public void run(){
        LOG.info("Thrift server with zlib compression started on port: {}",THRIFT_TEST_PORT);
        server.serve();
      }
    }
;
    new Thread(simple).start();
  }
  @AfterClass public static void stopThriftServer() throws IOException {
    if (server != null) {
      server.stop();
      serverTransport.close();
      LOG.info("Thrift server with zlib compression stoped");
    }
  }
  @Test @SuppressWarnings({"rawtypes","unchecked"}) public void testCalculateMethodInvocation() throws Exception {
    LOG.info("Thrift calculate method sync test start");
    List requestBody=new ArrayList();
    requestBody.add(1);
    requestBody.add(new Work(THRIFT_TEST_NUM1,THRIFT_TEST_NUM2,Operation.MULTIPLY));
    Object responseBody=template.requestBody("direct:thrift-zlib-calculate",requestBody);
    assertNotNull(responseBody);
    assertTrue(responseBody instanceof Integer);
    assertEquals(THRIFT_TEST_NUM1 * THRIFT_TEST_NUM2,responseBody);
  }
  @Test public void testVoidMethodInvocation() throws Exception {
    LOG.info("Thrift method with empty parameters and void output sync test start");
    Object requestBody=null;
    Object responseBody=template.requestBody("direct:thrift-zlib-ping",requestBody);
    assertNull(responseBody);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:thrift-zlib-calculate").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?method=calculate&compressionType=ZLIB&synchronous=true");
        from("direct:thrift-zlib-ping").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?method=ping&compressionType=ZLIB&synchronous=true");
      }
    }
;
  }
}
