@DirtiesContext @RunWith(SpringRunner.class) @SpringBootTest(classes={CamelAutoConfiguration.class,SupervisingRouteControllerAutoConfiguration.class,SupervisingRouteControllerRestartTest.TestConfiguration.class},properties={"camel.springboot.xml-routes = false","camel.springboot.main-run-controller = true","camel.supervising.controller.enabled = true","camel.supervising.controller.initial-delay = 2s","camel.supervising.controller.default-back-off.delay = 1s","camel.supervising.controller.default-back-off.max-attempts = 10","camel.supervising.controller.routes.bar.back-off.delay = 10s","camel.supervising.controller.routes.bar.back-off.max-attempts = 3","camel.supervising.controller.routes.timer-unmanaged.supervise = false"}) public class SupervisingRouteControllerRestartTest {
  @Autowired private CamelContext context;
  @Test public void testRouteRestart() throws Exception {
    Assert.assertNotNull(context.getRouteController());
    Assert.assertTrue(context.getRouteController() instanceof SupervisingRouteController);
    SupervisingRouteController controller=context.getRouteController().unwrap(SupervisingRouteController.class);
    await().atMost(3,TimeUnit.SECONDS).untilAsserted(() -> {
      Assert.assertEquals(ServiceStatus.Started,context.getRouteStatus("foo"));
      Assert.assertEquals(ServiceStatus.Started,context.getRouteStatus("bar"));
      Assert.assertEquals(ServiceStatus.Started,context.getRouteStatus("dummy"));
    }
);
    controller.stopRoute("dummy");
    Assert.assertNull(context.getRoute("dummy").getRouteContext().getRouteController());
    try {
      controller.startRoute("dummy");
    }
 catch (    Exception e) {
      Assert.assertEquals("Forced error on restart",e.getMessage());
    }
    Assert.assertTrue(controller.getBackOffContext("dummy").isPresent());
    Assert.assertEquals(BackOffTimer.Task.Status.Active,controller.getBackOffContext("dummy").get().getStatus());
    Assert.assertTrue(controller.getBackOffContext("dummy").get().getCurrentAttempts() > 0);
    await().atMost(2,TimeUnit.SECONDS).untilAsserted(() -> {
      Assert.assertEquals(ServiceStatus.Started,context.getRouteStatus("dummy"));
      Assert.assertNotNull(context.getRoute("dummy").getRouteContext().getRouteController());
      Assert.assertFalse(controller.getBackOffContext("dummy").isPresent());
    }
);
  }
@Configuration public static class TestConfiguration {
    @Bean public RouteBuilder routeBuilder(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          getContext().addComponent("dummy",new DummyComponent());
          from("timer:foo?period=5s").id("foo").startupOrder(2).to("mock:foo");
          from("timer:bar?period=5s").id("bar").startupOrder(1).to("mock:bar");
          from("timer:unmanaged?period=5s").id("timer-unmanaged").to("mock:timer-unmanaged");
          from("timer:no-autostartup?period=5s").id("timer-no-autostartup").autoStartup(false).to("mock:timer-no-autostartup");
          from("dummy:foo?failOnRestart=true").id("dummy").to("mock:dummy");
        }
      }
;
    }
  }
}
