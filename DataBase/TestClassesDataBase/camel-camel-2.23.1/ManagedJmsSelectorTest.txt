/** 
 */
public class ManagedJmsSelectorTest extends CamelTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext context=new DefaultCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    context.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return context;
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testJmsSelectorChangeViaJmx() throws Exception {
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=consumers,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    assertTrue("Should be registered",mbeanServer.isRegistered(on));
    String selector=(String)mbeanServer.getAttribute(on,"MessageSelector");
    assertEquals("brand='beer'",selector);
    getMockEndpoint("mock:result").expectedBodiesReceived("Carlsberg");
    template.sendBodyAndHeader("activemq:queue:start","Pepsi","brand","softdrink");
    template.sendBodyAndHeader("activemq:queue:start","Carlsberg","brand","beer");
    assertMockEndpointsSatisfied();
    resetMocks();
    mbeanServer.setAttribute(on,new Attribute("MessageSelector","brand='softdrink'"));
    Thread.sleep(100);
    getMockEndpoint("mock:result").expectedBodiesReceived("Pepsi");
    template.sendBodyAndHeader("activemq:queue:start","Pepsi","brand","softdrink");
    template.sendBodyAndHeader("activemq:queue:start","Carlsberg","brand","beer");
    assertMockEndpointsSatisfied();
    selector=(String)mbeanServer.getAttribute(on,"MessageSelector");
    assertEquals("brand='softdrink'",selector);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:start?cacheLevelName=CACHE_NONE&selector=brand='beer'").routeId("foo").to("log:foo").to("mock:result");
      }
    }
;
  }
}
