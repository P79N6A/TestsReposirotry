/** 
 */
public class DefaultScheduledPollConsumerBridgeErrorHandlerTest extends ContextTestSupport {
  @Test public void testDefaultConsumerBridgeErrorHandler() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMinimumMessageCount(1);
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertEquals("Simulated",cause.getMessage());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().addComponent("my",new MyComponent());
        errorHandler(deadLetterChannel("mock:dead"));
        from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result");
      }
    }
;
  }
public static class MyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new MyEndpoint(uri,this);
    }
  }
public static class MyEndpoint extends DefaultEndpoint {
    public MyEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    @Override public Producer createProducer() throws Exception {
      return null;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      Consumer answer=new MyConsumer(this,processor);
      configureConsumer(answer);
      return answer;
    }
    @Override public boolean isSingleton(){
      return true;
    }
  }
public static class MyConsumer extends ScheduledPollConsumer {
    public MyConsumer(    Endpoint endpoint,    Processor processor){
      super(endpoint,processor);
    }
    @Override protected int poll() throws Exception {
      throw new IllegalArgumentException("Simulated");
    }
  }
}
