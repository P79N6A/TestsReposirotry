public class PatternBasedPackageScanFilterTest extends org.apache.camel.spring.scan.ScanTestSupport {
  private Set<Class<?>> allClasses;
  @Before public void setUp() throws Exception {
    allClasses=new HashSet<>();
    allClasses.add(List.class);
    allClasses.add(ArrayList.class);
    allClasses.add(LinkedList.class);
    allClasses.add(File.class);
    allClasses.add(FileInputStream.class);
    allClasses.add(RandomAccessFile.class);
    allClasses.add(JarFile.class);
    super.setUp();
  }
  @Test public void testNoPattersIncludeAllClasses(){
    validateMatchingSetContains(allClasses);
  }
  @Test public void testIncludePatterns(){
    addIncludePatterns("*");
    validateMatchingSetContains(allClasses);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java*");
    validateMatchingSetContains(allClasses);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.io.*");
    validateMatchingSetContains(File.class,FileInputStream.class,RandomAccessFile.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.util.**");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class,JarFile.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.io.*","java.util.*");
    validateMatchingSetContains(allClasses);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.io.File");
    validateMatchingSetContains(File.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.io.File*");
    validateMatchingSetContains(File.class,FileInputStream.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.io.*File*");
    validateMatchingSetContains(File.class,FileInputStream.class,RandomAccessFile.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.**.*File*");
    validateMatchingSetContains(File.class,FileInputStream.class,RandomAccessFile.class,JarFile.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.util.*List");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class);
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.lang","java.lang.*");
    validateMatchingSetContains();
    filter=new PatternBasedPackageScanFilter();
    addIncludePatterns("java.lang","java.lang.*");
    validateMatchingSetContains();
  }
  @Test public void testExcludePatterns(){
    addExcludePatterns("*");
    validateMatchingSetContains();
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java*");
    validateMatchingSetContains();
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.io.*");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class,JarFile.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.util.**");
    validateMatchingSetContains(File.class,FileInputStream.class,RandomAccessFile.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.io.*","java.util.*");
    validateMatchingSetContains();
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.io.File");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class,JarFile.class,FileInputStream.class,RandomAccessFile.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.io.File*");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class,JarFile.class,RandomAccessFile.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.io.*File*");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class,JarFile.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.**.*File*");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.util.*List");
    validateMatchingSetContains(File.class,FileInputStream.class,RandomAccessFile.class,JarFile.class);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.lang","java.lang.*");
    validateMatchingSetContains(allClasses);
    filter=new PatternBasedPackageScanFilter();
    addExcludePatterns("java.lang","java.lang.*");
    validateMatchingSetContains(allClasses);
  }
  @Test public void testExcludeHasPrecedenceOverInclude(){
    addIncludePatterns("java.util.*");
    addExcludePatterns("java.util.jar.*");
    validateMatchingSetContains(List.class,ArrayList.class,LinkedList.class);
  }
  @Test public void testBulkIncludeAdd(){
    Set<String> includes=CollectionHelper.createSetContaining("java.io.*","java.util.*");
    filter.addIncludePatterns(includes);
    validateMatchingSetContains(allClasses);
  }
  @Test public void testBulkExcludeAdd(){
    Set<String> excludes=CollectionHelper.createSetContaining("java.io.*","java.util.*");
    filter.addExcludePatterns(excludes);
    validateMatchingSetContains();
  }
  protected void validateMatchingSetContains(  Class<?>... matchingClasses){
    super.validateMatchingSetContains(allClasses,matchingClasses);
  }
  protected void validateMatchingSetContains(  Set<Class<?>> matchingClasses){
    super.validateMatchingSetContains(allClasses,matchingClasses);
  }
}
