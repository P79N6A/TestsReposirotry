/** 
 * Unit tests for writing from the client side
 */
public class WriteClientTest extends AbstractMiloServerTest {
  private static final String DIRECT_START_1="direct:start1";
  private static final String DIRECT_START_2="direct:start2";
  private static final String DIRECT_START_3="direct:start3";
  private static final String DIRECT_START_4="direct:start4";
  private static final String MILO_SERVER_ITEM_1="milo-server:myitem1";
  private static final String MILO_SERVER_ITEM_2="milo-server:myitem2";
  private static final String MILO_CLIENT_BASE_C1="milo-client:tcp://foo:bar@localhost:@@port@@";
  private static final String MILO_CLIENT_BASE_C2="milo-client:tcp://foo2:bar2@localhost:@@port@@";
  private static final String MILO_CLIENT_ITEM_C1_1=MILO_CLIENT_BASE_C1 + "?node=" + nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem1")+ "&overrideHost=true";
  private static final String MILO_CLIENT_ITEM_C1_2=MILO_CLIENT_BASE_C1 + "?node=" + nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem2")+ "&overrideHost=true";
  private static final String MILO_CLIENT_ITEM_C2_1=MILO_CLIENT_BASE_C2 + "?node=" + nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem1")+ "&overrideHost=true";
  private static final String MILO_CLIENT_ITEM_C2_2=MILO_CLIENT_BASE_C2 + "?node=" + nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem2")+ "&overrideHost=true";
  private static final String MOCK_TEST_1="mock:test1";
  private static final String MOCK_TEST_2="mock:test2";
  @EndpointInject(uri=MOCK_TEST_1) protected MockEndpoint test1Endpoint;
  @EndpointInject(uri=MOCK_TEST_2) protected MockEndpoint test2Endpoint;
  @Produce(uri=DIRECT_START_1) protected ProducerTemplate producer1;
  @Produce(uri=DIRECT_START_2) protected ProducerTemplate producer2;
  @Produce(uri=DIRECT_START_3) protected ProducerTemplate producer3;
  @Produce(uri=DIRECT_START_4) protected ProducerTemplate producer4;
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(MILO_SERVER_ITEM_1).to(MOCK_TEST_1);
        from(MILO_SERVER_ITEM_2).to(MOCK_TEST_2);
        from(DIRECT_START_1).to(resolve(MILO_CLIENT_ITEM_C1_1));
        from(DIRECT_START_2).to(resolve(MILO_CLIENT_ITEM_C1_2));
        from(DIRECT_START_3).to(resolve(MILO_CLIENT_ITEM_C2_1));
        from(DIRECT_START_4).to(resolve(MILO_CLIENT_ITEM_C2_2));
      }
    }
;
  }
  @Test public void testWrite1() throws Exception {
    this.test1Endpoint.setExpectedCount(2);
    testBody(this.test1Endpoint.message(0),assertGoodValue("Foo1"));
    testBody(this.test1Endpoint.message(1),assertGoodValue("Foo2"));
    this.test2Endpoint.setExpectedCount(0);
    sendValue(this.producer1,new Variant("Foo1"));
    sendValue(this.producer1,new Variant("Foo2"));
    assertMockEndpointsSatisfied();
  }
  @Test public void testWrite2() throws Exception {
    this.test1Endpoint.setExpectedCount(0);
    this.test2Endpoint.setExpectedCount(2);
    testBody(this.test2Endpoint.message(0),assertGoodValue("Foo1"));
    testBody(this.test2Endpoint.message(1),assertGoodValue("Foo2"));
    sendValue(this.producer2,new Variant("Foo1"));
    sendValue(this.producer2,new Variant("Foo2"));
    assertMockEndpointsSatisfied();
  }
  @Test public void testWrite3() throws Exception {
    this.test1Endpoint.setExpectedCount(2);
    testBody(this.test1Endpoint.message(0),assertGoodValue("Foo1"));
    testBody(this.test1Endpoint.message(1),assertGoodValue("Foo3"));
    this.test2Endpoint.setExpectedCount(2);
    testBody(this.test2Endpoint.message(0),assertGoodValue("Foo2"));
    testBody(this.test2Endpoint.message(1),assertGoodValue("Foo4"));
    sendValue(this.producer1,new Variant("Foo1"));
    sendValue(this.producer2,new Variant("Foo2"));
    sendValue(this.producer3,new Variant("Foo3"));
    sendValue(this.producer4,new Variant("Foo4"));
    assertMockEndpointsSatisfied();
  }
  private static void sendValue(  final ProducerTemplate producerTemplate,  final Variant variant){
    producerTemplate.sendBodyAndHeader(variant,"await",true);
  }
}
