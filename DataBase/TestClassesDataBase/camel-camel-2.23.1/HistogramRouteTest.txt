@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes={HistogramRouteTest.TestConfig.class},loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpoints public class HistogramRouteTest {
  @EndpointInject(uri="mock:out") private MockEndpoint endpoint;
  @Produce(uri="direct:in") private ProducerTemplate producer;
  private MetricRegistry mockRegistry;
  private Histogram mockHistogram;
  private InOrder inOrder;
@Configuration public static class TestConfig extends SingleRouteCamelConfiguration {
    @Bean @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:in").to("metrics:histogram:A?value=332491").to("mock:out");
        }
      }
;
    }
    @Bean(name=METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry(){
      return Mockito.mock(MetricRegistry.class);
    }
  }
  @Before public void setup(){
    mockRegistry=endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME,MetricRegistry.class);
    mockHistogram=Mockito.mock(Histogram.class);
    inOrder=Mockito.inOrder(mockRegistry,mockHistogram);
  }
  @After public void tearDown(){
    endpoint.reset();
    reset(mockRegistry);
  }
  @Test public void testOverrideMetricsName() throws Exception {
    when(mockRegistry.histogram("B")).thenReturn(mockHistogram);
    endpoint.expectedMessageCount(1);
    producer.sendBodyAndHeader(new Object(),HEADER_METRIC_NAME,"B");
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).histogram("B");
    inOrder.verify(mockHistogram,times(1)).update(332491L);
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testOverrideValue() throws Exception {
    when(mockRegistry.histogram("A")).thenReturn(mockHistogram);
    endpoint.expectedMessageCount(1);
    producer.sendBodyAndHeader(new Object(),HEADER_HISTOGRAM_VALUE,181L);
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).histogram("A");
    inOrder.verify(mockHistogram,times(1)).update(181L);
    inOrder.verifyNoMoreInteractions();
  }
}
