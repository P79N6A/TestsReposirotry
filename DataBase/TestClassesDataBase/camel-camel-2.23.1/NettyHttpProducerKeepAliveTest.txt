public class NettyHttpProducerKeepAliveTest extends BaseNettyTest {
  @Test public void testHttpKeepAlive() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World","Hello Again");
    String out=template.requestBody("netty4-http:http://localhost:{{port}}/foo?keepAlive=true","Hello World",String.class);
    assertEquals("Bye World",out);
    out=template.requestBody("netty4-http:http://localhost:{{port}}/foo?keepAlive=true","Hello Again",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpKeepAliveFalse() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World","Hello Again");
    String out=template.requestBody("netty4-http:http://localhost:{{port}}/foo?keepAlive=false","Hello World",String.class);
    assertEquals("Bye World",out);
    out=template.requestBody("netty4-http:http://localhost:{{port}}/foo?keepAlive=false","Hello Again",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testConnectionClosed() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World");
    Exchange ex=template.request("netty4-http:http://localhost:{{port}}/bar?keepAlive=false",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertEquals(HttpHeaderValues.CLOSE.toString(),ex.getOut().getHeader(HttpHeaderNames.CONNECTION.toString()));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://localhost:{{port}}/foo").to("mock:input").transform().constant("Bye World");
        from("netty4-http:http://localhost:{{port}}/bar").removeHeaders("*").to("mock:input").transform().constant("Bye World");
      }
    }
;
  }
}
