/** 
 * @version 
 */
public class SpringJacksonJsonDataFormatTest extends CamelSpringTestSupport {
  @Test public void testMarshalAndUnmarshalMap() throws Exception {
    Map<String,Object> in=new HashMap<>();
    in.put("name","Camel");
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Map.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:in",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"name\":\"Camel\"}",marshalledAsString);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalAndUnmarshalMapWithPrettyPrint() throws Exception {
    Map<String,Object> in=new HashMap<>();
    in.put("name","Camel");
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Map.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:inPretty",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    String expected=String.format("{%s  \"name\" : \"Camel\"%s}",LS,LS);
    assertEquals(expected,marshalledAsString);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalAndUnmarshalPojo() throws Exception {
    TestPojo in=new TestPojo();
    in.setName("Camel");
    MockEndpoint mock=getMockEndpoint("mock:reversePojo");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(TestPojo.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:inPojo",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"name\":\"Camel\"}",marshalledAsString);
    template.sendBody("direct:backPojo",marshalled);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalAndUnmarshalAgeView() throws Exception {
    TestPojoView in=new TestPojoView();
    MockEndpoint mock=getMockEndpoint("mock:reverseAgeView");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(TestPojoView.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:inAgeView",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"age\":30,\"height\":190}",marshalledAsString);
    template.sendBody("direct:backAgeView",marshalled);
    mock.assertIsSatisfied();
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/jackson/SpringJacksonJsonDataFormatTest.xml");
  }
}
