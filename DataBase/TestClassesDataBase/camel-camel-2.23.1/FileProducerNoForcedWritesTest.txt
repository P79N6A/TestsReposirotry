public class FileProducerNoForcedWritesTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/file");
    super.setUp();
  }
  @Test public void testNoForcedWrites() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file://target/file","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    assertFileExists("target/file/output.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/output.txt")));
    assertFileExists("target/file/output2.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/output2.txt")));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/file?initialDelay=0&delay=10&noop=true").multicast().to("file:target/file/?fileName=output.txt&forceWrites=false","file:target/file/?fileName=output2.txt&charset=iso-8859-1&forceWrites=false").to("mock:result");
      }
    }
;
  }
}
