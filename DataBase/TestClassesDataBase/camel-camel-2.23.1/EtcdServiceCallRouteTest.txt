public class EtcdServiceCallRouteTest extends EtcdTestSupport {
  private static final ObjectMapper MAPPER=EtcdHelper.createObjectMapper();
  private static final String SERVICE_NAME="http-service";
  private static final int SERVICE_COUNT=5;
  private static final int SERVICE_PORT_BASE=8080;
  private EtcdClient client;
  private List<Map<String,Object>> servers;
  private List<String> expectedBodies;
  @Override protected void doPreSetup() throws Exception {
    client=getClient();
    servers=new ArrayList<>(SERVICE_COUNT);
    expectedBodies=new ArrayList<>(SERVICE_COUNT);
    for (int i=0; i < SERVICE_COUNT; i++) {
      Map<String,Object> server=new HashMap<>();
      server.put("name",SERVICE_NAME);
      server.put("address","127.0.0.1");
      server.put("port",SERVICE_PORT_BASE + i);
      client.put("/services/" + "service-" + i,MAPPER.writeValueAsString(server)).send().get();
      servers.add(Collections.unmodifiableMap(server));
      expectedBodies.add("ping on " + (SERVICE_PORT_BASE + i));
    }
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    client.deleteDir("/services/").recursive().send().get();
  }
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(SERVICE_COUNT);
    getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder(expectedBodies);
    servers.forEach(s -> template.sendBody("direct:start","ping"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").serviceCall().name(SERVICE_NAME).etcdServiceDiscovery().type("on-demand").endParent().to("log:org.apache.camel.component.etcd.processor.service?level=INFO&showAll=true&multiline=true").to("mock:result");
        servers.forEach(s -> fromF("jetty:http://%s:%d",s.get("address"),s.get("port")).transform().simple("${in.body} on " + s.get("port")));
      }
    }
;
  }
}
