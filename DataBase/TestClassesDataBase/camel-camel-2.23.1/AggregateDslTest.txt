public class AggregateDslTest extends ContextTestSupport {
  @Test public void testAggregate() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("0,3","1,4","2,5");
    getMockEndpoint("mock:aggregated-supplier").expectedBodiesReceived("0,3,6","1,4,7","2,5,8");
    for (int i=0; i < 9; i++) {
      template.sendBodyAndHeader("direct:start",i,"type",i % 3);
      template.sendBodyAndHeader("direct:start-supplier",i,"type",i % 3);
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate().message(m -> m.getHeader("type")).strategy().body(String.class,AggregateDslTest::joinString).completion().body(String.class,s -> s.split(",").length == 2).to("mock:aggregated");
        from("direct:start-supplier").aggregate().header("type").strategy(AggregateDslTest::joinStringStrategy).completion().body(String.class,s -> s.split(",").length == 3).to("mock:aggregated-supplier");
      }
    }
;
  }
  private static String joinString(  String o,  String n){
    return Stream.of(o,n).filter(Objects::nonNull).collect(Collectors.joining(","));
  }
  private static Exchange joinStringStrategy(  Exchange oldExchange,  Exchange newExchange){
    newExchange.getIn().setBody(joinString(oldExchange != null ? oldExchange.getIn().getBody(String.class) : null,newExchange.getIn().getBody(String.class)));
    return newExchange;
  }
}
