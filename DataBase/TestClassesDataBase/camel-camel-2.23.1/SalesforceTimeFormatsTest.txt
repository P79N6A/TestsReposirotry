@RunWith(Parameterized.class) public class SalesforceTimeFormatsTest {
@XStreamAlias("Dto") public static class DateTransferObject<T> {
    private T value;
    public DateTransferObject(){
    }
    public DateTransferObject(    final T value){
      this.value=value;
    }
    @Override public boolean equals(    final Object obj){
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof DateTransferObject)) {
        return false;
      }
      final DateTransferObject<?> dto=(DateTransferObject<?>)obj;
      return Objects.equals(value,dto.value);
    }
    public T getValue(){
      return value;
    }
    @Override public int hashCode(){
      return Objects.hash(value,value);
    }
    public void setValue(    final T value){
      this.value=value;
    }
    @Override public String toString(){
      return String.valueOf(value);
    }
  }
  private static final String JSON_FMT="{\"value\":\"%s\"}";
  private static final String XML_FMT="<Dto><value>%s</value></Dto>";
  @Parameter(0) public DateTransferObject<?> dto;
  @Parameter(1) public String json;
  @Parameter(3) public Class<?> parameterType;
  @Parameter(2) public String xml;
  private final ObjectMapper objectMapper=JsonUtils.createObjectMapper();
  private final XStream xStream=XStreamUtils.createXStream(DateTransferObject.class);
  @Test public void shouldDeserializeJson() throws IOException {
    final JavaType javaType=TypeFactory.defaultInstance().constructParametricType(DateTransferObject.class,parameterType);
    final DateTransferObject<?> deserialized=objectMapper.readerFor(javaType).readValue(json);
    assertDeserializationResult(deserialized);
  }
  @Test public void shouldDeserializeXml(){
    xStream.addDefaultImplementation(parameterType,Object.class);
    final DateTransferObject<?> deserialized=(DateTransferObject<?>)xStream.fromXML(xml);
    assertDeserializationResult(deserialized);
  }
  @Test public void shouldSerializeJson() throws JsonProcessingException {
    assertThat(objectMapper.writeValueAsString(dto)).isEqualTo(json);
  }
  @Test public void shouldSerializeXml(){
    assertThat(xStream.toXML(dto)).isEqualTo(xml);
  }
  private void assertDeserializationResult(  final DateTransferObject<?> deserialized){
    if (dto.value instanceof ZonedDateTime) {
      final ZonedDateTime dtoValue=(ZonedDateTime)dto.value;
      final ZonedDateTime deserializedValue=(ZonedDateTime)deserialized.value;
      assertThat(deserializedValue).isEqualTo(dtoValue.withFixedOffsetZone());
    }
 else {
      assertThat(deserialized.value).isEqualTo(dto.value);
    }
  }
  @Parameters public static Iterable<Object[]> cases(){
    final LocalDate localDate=LocalDate.of(2007,03,19);
    final ZonedDateTime zonedDateTime=ZonedDateTime.of(localDate.atTime(10,54,57),ZoneId.of("Z"));
    final Instant instant=zonedDateTime.toInstant();
    final String zone=DateTimeFormatter.ofPattern("XX").format(zonedDateTime.withZoneSameLocal(ZoneId.systemDefault()));
    return Arrays.asList(dto(Date.from(instant),"2007-03-19T10:54:57.000+0000"),dto(Date.from(localDate.atStartOfDay().toInstant(ZoneOffset.UTC)),"2007-03-19T00:00:00.000+0000"),dto(localDate,"2007-03-19"),dto(zonedDateTime.toLocalDateTime(),"2007-03-19T10:54:57.000" + zone),dto(zonedDateTime.toOffsetDateTime(),"2007-03-19T10:54:57.000Z"),dto(zonedDateTime.toOffsetDateTime(),"2007-03-19T10:54:57.000Z"),dto(zonedDateTime.toOffsetDateTime().withOffsetSameInstant(ZoneOffset.of("-7")),"2007-03-19T03:54:57.000-0700"),dto(zonedDateTime,"2007-03-19T10:54:57.000Z"),dto(zonedDateTime.withZoneSameInstant(ZoneId.of("Asia/Kolkata")),"2007-03-19T16:24:57.000+0530"),dto(zonedDateTime.withZoneSameInstant(ZoneId.of("+3")),"2007-03-19T13:54:57.000+0300"),dto(instant,instant.atZone(ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXX"))),dto(ZonedDateTime.of(2018,03,22,9,58,8,5000000,ZoneId.of("Z")),"2018-03-22T09:58:08.005Z"),dto(OffsetTime.of(LocalTime.MIDNIGHT,ZoneOffset.UTC),"00:00:00.000Z"),dto(OffsetTime.of(12,13,14,7000000,ZoneOffset.UTC),"12:13:14.007Z"));
  }
  private static Object[] dto(  final Object value,  final String serialized){
    final DateTransferObject<?> dto=new DateTransferObject<>(value);
    final String json=format(JSON_FMT,serialized);
    final String xml=format(XML_FMT,serialized);
    return new Object[]{dto,json,xml,value.getClass()};
  }
}
