/** 
 * Testing the monitor functionality for item
 */
public class MonitorItemTest extends AbstractMiloServerTest {
  private static final String DIRECT_START_1="direct:start1";
  private static final String MILO_SERVER_ITEM_1="milo-server:myitem1";
  private static final String MILO_CLIENT_ITEM_C1_1="milo-client:tcp://foo:bar@localhost:@@port@@?node=" + NodeIds.nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem1") + "&allowedSecurityPolicies=None&overrideHost=true";
  private static final String MOCK_TEST_1="mock:test1";
  @EndpointInject(uri=MOCK_TEST_1) protected MockEndpoint test1Endpoint;
  @Produce(uri=DIRECT_START_1) protected ProducerTemplate producer1;
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(DIRECT_START_1).to(MILO_SERVER_ITEM_1);
        from(resolve(MILO_CLIENT_ITEM_C1_1)).to(MOCK_TEST_1);
      }
    }
;
  }
  /** 
 * Monitor multiple events
 */
  @Test public void testMonitorItem1() throws Exception {
    this.producer1.sendBody("Foo");
    Thread.sleep(2_000);
    this.producer1.sendBody("Bar");
    Thread.sleep(2_000);
    this.producer1.sendBody("Baz");
    Thread.sleep(2_000);
    this.test1Endpoint.setExpectedCount(3);
    testBody(this.test1Endpoint.message(0),assertGoodValue("Foo"));
    testBody(this.test1Endpoint.message(1),assertGoodValue("Bar"));
    testBody(this.test1Endpoint.message(2),assertGoodValue("Baz"));
    assertMockEndpointsSatisfied();
  }
}
