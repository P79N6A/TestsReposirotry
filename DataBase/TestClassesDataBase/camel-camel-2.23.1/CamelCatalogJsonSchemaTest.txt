public class CamelCatalogJsonSchemaTest {
  private CamelCatalog catalog=new DefaultCamelCatalog();
  @Test public void testValidateJsonComponent() throws Exception {
    for (    String name : catalog.findComponentNames()) {
      String json=catalog.componentJSonSchema(name);
      ObjectMapper mapper=new ObjectMapper();
      JsonNode tree=mapper.readTree(json);
      assertNotNull(tree);
      assertTrue(name,tree.has("component"));
      assertTrue(name,tree.has("componentProperties"));
      assertTrue(name,tree.has("properties"));
    }
  }
  @Test public void testValidateJsonDataFormats() throws Exception {
    for (    String name : catalog.findDataFormatNames()) {
      String json=catalog.dataFormatJSonSchema(name);
      ObjectMapper mapper=new ObjectMapper();
      JsonNode tree=mapper.readTree(json);
      assertNotNull(tree);
      assertTrue(name,tree.has("dataformat"));
      assertTrue(name,tree.has("properties"));
    }
  }
  @Test public void testValidateJsonLanguages() throws Exception {
    for (    String name : catalog.findLanguageNames()) {
      String json=catalog.languageJSonSchema(name);
      ObjectMapper mapper=new ObjectMapper();
      JsonNode tree=mapper.readTree(json);
      assertNotNull(tree);
      assertTrue(name,tree.has("language"));
      assertTrue(name,tree.has("properties"));
    }
  }
  @Test public void testValidateJsonModels() throws Exception {
    for (    String name : catalog.findModelNames()) {
      String json=catalog.modelJSonSchema(name);
      ObjectMapper mapper=new ObjectMapper();
      JsonNode tree=mapper.readTree(json);
      assertNotNull(tree);
      assertTrue(name,tree.has("model"));
      assertTrue(name,tree.has("properties"));
    }
  }
}
