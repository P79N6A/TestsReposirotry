public class JsonPathCharsetTest extends CamelTestSupport {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").transform().jsonpath("$.store.book[*].title").to("mock:authors");
      }
    }
;
  }
  @Test public void testUTF16BEFile() throws Exception {
    getMockEndpoint("mock:authors").expectedMessageCount(1);
    sendBody("direct:start",new File("src/test/resources/booksUTF16BE.json"));
    assertMockEndpointsSatisfied();
    check();
  }
  @Test public void testUTF16LEFile() throws Exception {
    getMockEndpoint("mock:authors").expectedMessageCount(1);
    sendBody("direct:start",new File("src/test/resources/booksUTF16LE.json"));
    assertMockEndpointsSatisfied();
    check();
  }
  @Test public void testUTF16BEInputStream() throws Exception {
    getMockEndpoint("mock:authors").expectedMessageCount(1);
    InputStream input=JsonPathCharsetTest.class.getClassLoader().getResourceAsStream("booksUTF16BE.json");
    Assert.assertNotNull(input);
    sendBody("direct:start",input);
    assertMockEndpointsSatisfied();
    check();
  }
  @Test public void testUTF16BEURL() throws Exception {
    getMockEndpoint("mock:authors").expectedMessageCount(1);
    URL url=new URL("file:src/test/resources/booksUTF16BE.json");
    Assert.assertNotNull(url);
    sendBody("direct:start",url);
    check();
  }
  @Test public void testISO8859WithJsonHeaderCamelJsonInputEncoding() throws Exception {
    getMockEndpoint("mock:authors").expectedMessageCount(1);
    URL url=new URL("file:src/test/resources/germanbooks-iso-8859-1.json");
    Assert.assertNotNull(url);
    sendBody("direct:start",url,Collections.<String,Object>singletonMap(JsonPathConstants.HEADER_JSON_ENCODING,"ISO-8859-1"));
    check("Joseph und seine Brüder","Götzendämmerung");
  }
  private void check() throws InterruptedException {
    check("Sayings of the Century","Sword of Honour");
  }
  private void check(  String title1,  String title2) throws InterruptedException {
    assertMockEndpointsSatisfied();
    List<?> authors=getMockEndpoint("mock:authors").getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(title1,authors.get(0));
    assertEquals(title2,authors.get(1));
  }
}
