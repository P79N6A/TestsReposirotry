/** 
 * Transactional client test with rollback in the DSL.
 * @version 
 */
public class TransactionalClientWithRollbackTest extends SpringTestSupport {
  protected JdbcTemplate jdbc;
  protected boolean useTransactionErrorHandler=true;
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/transactionalClientDataSource.xml");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    final DataSource ds=getMandatoryBean(DataSource.class,"dataSource");
    jdbc=new JdbcTemplate(ds);
  }
  @Test public void testTransactionSuccess() throws Exception {
    template.sendBody("direct:okay","Hello World");
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",3,count);
  }
  @Test public void testTransactionRollback() throws Exception {
    try {
      template.sendBody("direct:fail","Hello World");
      fail("Should have thrown a RollbackExchangeException");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(RuntimeCamelException.class,e.getCause());
      assertTrue(e.getCause().getCause() instanceof RollbackExchangeException);
    }
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new SpringRouteBuilder(){
      public void configure() throws Exception {
        SpringTransactionPolicy required=lookup("PROPAGATION_REQUIRED",SpringTransactionPolicy.class);
        errorHandler(transactionErrorHandler(required));
        from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService");
        from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").rollback();
      }
    }
;
  }
}
