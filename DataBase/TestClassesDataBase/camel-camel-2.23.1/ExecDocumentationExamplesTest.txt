/** 
 * The tests are ignored by default, because they are OS-specific. On demand they can be run manually to validate the documentation examples for that OS.
 */
public class ExecDocumentationExamplesTest extends CamelTestSupport {
  private static final String ANT_BUILD_FILE_NAME="CamelExecTestAntBuildFile.xml";
  private static final String ANT_OUT_FILE_NAME="CamelExecOutFile.txt";
  private static final String ANT_BUILD_FILE_CONTENT=buildAntFileContent();
  private static final String TEST_MSG="Hello Camel Exec!";
  @Produce(uri="direct:javaVersion") protected ProducerTemplate templateJavaVersion;
  @Produce(uri="direct:javaVersionWorkingDir") protected ProducerTemplate templateJavaVersionWorkingDir;
  @Produce(uri="direct:execAnt") protected ProducerTemplate templateExecAnt;
  @Produce(uri="direct:execAntWithOutFile") protected ProducerTemplate templateExecAntWithOutFile;
  @Produce(uri="direct:wordCount") protected ProducerTemplate templateWordCount;
  @Test @Ignore public void testExecLinuxWordCount() throws Exception {
    ExecResult body=templateWordCount.requestBody((Object)"test",ExecResult.class);
    assertNotNull(body);
  }
  /** 
 * The test assumes, that java is in the system path
 */
  @Test @Ignore public void testJavaVersion() throws Exception {
    ExecResult body=templateJavaVersion.requestBody((Object)"test",ExecResult.class);
    InputStream out=body.getStdout();
    InputStream err=body.getStderr();
    assertNull(out);
    assertNotNull(err);
    String outString=IOUtils.toString(err);
    log.info("Received stdout: " + outString);
    assertTrue(outString.contains("java version"));
  }
  @Test @Ignore public void testWinJavaVersionWorkingDir() throws Exception {
    ExecResult body=templateJavaVersionWorkingDir.requestBody((Object)"test",ExecResult.class);
    InputStream out=body.getStdout();
    InputStream err=body.getStderr();
    assertNull(out);
    assertNotNull(err);
    String outerr=IOUtils.toString(err);
    log.info("Received stderr: " + outerr);
    assertTrue(outerr.contains("java version"));
  }
  /** 
 * The test assumes that Apache ant is installed
 */
  @Test @Ignore public void testExecWinAnt() throws Exception {
    File f=new File(ANT_BUILD_FILE_NAME);
    f.createNewFile();
    FileUtils.writeStringToFile(f,ANT_BUILD_FILE_CONTENT);
    assertTrue("You must create a sample build file!",f.exists());
    ExecResult body=templateExecAnt.requestBody((Object)"test",ExecResult.class);
    String stdout=IOUtils.toString(body.getStdout());
    assertNull(body.getStderr());
    assertTrue("The ant script should print" + TEST_MSG,stdout.contains(TEST_MSG));
    f.delete();
  }
  /** 
 * The test assumes that Apache ant is installed
 */
  @Test @Ignore public void testExecWinAntWithOutFile() throws Exception {
    File f=new File(ANT_BUILD_FILE_NAME);
    f.createNewFile();
    FileUtils.writeStringToFile(f,ANT_BUILD_FILE_CONTENT);
    assertTrue("You must create a sample build file!",f.exists());
    InputStream body=templateExecAntWithOutFile.requestBody((Object)"test",InputStream.class);
    String bodyString=IOUtils.toString(body);
    assertTrue("The ant script should print" + TEST_MSG,bodyString.contains(TEST_MSG));
    f.delete();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:wordCount").to("exec:wc?args=--words /usr/share/dict/words").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            assertIsInstanceOf(ExecResult.class,exchange.getIn().getBody());
            String wordCountOutput=exchange.getIn().getBody(String.class);
            log.info(wordCountOutput);
          }
        }
);
        from("direct:javaVersion").to("exec:java?args=-version -server");
        from("direct:javaVersionWorkingDir").to("exec:" + buildJavaExecutablePath() + "?args=-version -Duser.name=Camel&workingDir=C:/temp");
        from("direct:execAnt").to("exec:ant.bat?args=-f " + ANT_BUILD_FILE_NAME);
        from("direct:execAntWithOutFile").to("exec:ant.bat?args=-f " + ANT_BUILD_FILE_NAME + " -l "+ ANT_OUT_FILE_NAME+ "&outFile="+ ANT_OUT_FILE_NAME).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            InputStream outFile=exchange.getIn().getBody(InputStream.class);
            log.info(IOUtils.toString(outFile));
          }
        }
);
      }
    }
;
  }
  private static String buildAntFileContent(){
    StringBuilder builder=new StringBuilder();
    builder.append("<project name=\"TestExec\" default=\"test\" basedir=\".\">");
    builder.append("<target name=\"test\">");
    builder.append("<echo message=\"" + TEST_MSG + "\"/>");
    builder.append("</target>");
    builder.append("</project>");
    return builder.toString();
  }
}
