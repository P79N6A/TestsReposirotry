public class JGroupsComponentTest extends CamelTestSupport {
  static final String CLUSTER_NAME="CLUSTER_NAME";
  static final String MESSAGE="MESSAGE";
  static final String SAMPLE_CHANNEL_PROPERTY="enable_diagnostics=true";
  static final String SAMPLE_CHANNEL_PROPERTIES=String.format("UDP(%s)",SAMPLE_CHANNEL_PROPERTY);
  static final String CONFIGURED_ENDPOINT_URI=String.format("jgroups:%s",CLUSTER_NAME);
  JChannel clientChannel;
  JChannel defaultComponentChannel;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        JGroupsComponent defaultComponent=new JGroupsComponent();
        defaultComponent.setChannel(defaultComponentChannel);
        context().addComponent("my-default-jgroups",defaultComponent);
        from("my-default-jgroups:" + CLUSTER_NAME).to("mock:default");
        from(CONFIGURED_ENDPOINT_URI).to("mock:configured");
      }
    }
;
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    clientChannel=new JChannel();
    clientChannel.connect(CLUSTER_NAME);
    defaultComponentChannel=new JChannel();
  }
  @Override @After public void tearDown() throws Exception {
    clientChannel.close();
    super.tearDown();
  }
  @Test public void shouldConsumeMulticastedMessage() throws Exception {
    MockEndpoint mockEndpoint=getMockEndpoint("mock:default");
    mockEndpoint.setExpectedMessageCount(1);
    mockEndpoint.expectedBodiesReceived(MESSAGE);
    Message message=new Message(null,MESSAGE);
    message.setSrc(null);
    clientChannel.send(message);
    mockEndpoint.assertIsSatisfied();
  }
  @Test public void shouldConfigureChannelWithProperties() throws Exception {
    JGroupsEndpoint endpoint=getMandatoryEndpoint(CONFIGURED_ENDPOINT_URI,JGroupsEndpoint.class);
    assertTrue(endpoint.getResolvedChannel().getProperties().contains(SAMPLE_CHANNEL_PROPERTY));
  }
  @Test public void shouldCreateChannel() throws Exception {
    JGroupsEndpoint endpoint=getMandatoryEndpoint("my-default-jgroups:" + CLUSTER_NAME,JGroupsEndpoint.class);
    JGroupsComponent component=(JGroupsComponent)endpoint.getComponent();
    assertNotNull(component.getChannel());
  }
}
