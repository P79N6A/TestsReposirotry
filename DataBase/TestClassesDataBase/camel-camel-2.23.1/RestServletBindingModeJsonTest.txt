public class RestServletBindingModeJsonTest extends ServletCamelRouterTestSupport {
  @Test public void testBindingMode() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(UserJaxbPojo.class);
    String body="{\"id\": 123, \"name\": \"Donald Duck\"}";
    WebRequest req=new PostMethodWebRequest(CONTEXT_URL + "/services/users/new",new ByteArrayInputStream(body.getBytes()),"application/json");
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(200,response.getResponseCode());
    assertMockEndpointsSatisfied();
    UserJaxbPojo user=mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class);
    assertNotNull(user);
    assertEquals(123,user.getId());
    assertEquals("Donald Duck",user.getName());
  }
  @Test public void testBindingModeWrong() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(0);
    String body="<user name=\"Donald Duck\" id=\"123\"></user>";
    WebRequest req=new PostMethodWebRequest(CONTEXT_URL + "/services/users/new",new ByteArrayInputStream(body.getBytes()),"application/xml");
    ServletUnitClient client=newClient();
    client.setExceptionsThrownOnErrorStatus(false);
    WebResponse response=client.getResponse(req);
    assertEquals(500,response.getResponseCode());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("servlet").bindingMode(RestBindingMode.json);
        rest("/users/").post("new").type(UserJaxbPojo.class).to("mock:input");
      }
    }
;
  }
}
