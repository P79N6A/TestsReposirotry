public class EnableCORSTest extends BaseJettyTest {
  @Test public void testCORSdisabled() throws Exception {
    HttpClient httpclient=new HttpClient();
    HttpMethod httpMethod=new GetMethod("http://localhost:" + getPort() + "/test1");
    httpMethod.addRequestHeader("Origin","http://localhost:9000");
    httpMethod.addRequestHeader("Referer","http://localhost:9000");
    int status=httpclient.executeMethod(httpMethod);
    assertEquals("Get a wrong response status",200,status);
    Header responseHeader=httpMethod.getResponseHeader("Access-Control-Allow-Credentials");
    assertNull("Access-Control-Allow-Credentials HEADER should not be set",responseHeader);
  }
  @Test public void testCORSenabled() throws Exception {
    HttpClient httpclient=new HttpClient();
    HttpMethod httpMethod=new GetMethod("http://localhost:" + getPort2() + "/test2");
    httpMethod.addRequestHeader("Origin","http://localhost:9000");
    httpMethod.addRequestHeader("Referer","http://localhost:9000");
    int status=httpclient.executeMethod(httpMethod);
    assertEquals("Get a wrong response status",200,status);
    Header responseHeader=httpMethod.getResponseHeader("Access-Control-Allow-Credentials");
    assertTrue("CORS not enabled",Boolean.valueOf(responseHeader.getValue()));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("jetty://http://localhost:{{port}}/test1?enableCORS=false").transform(simple("OK"));
        from("jetty://http://localhost:{{port2}}/test2?enableCORS=true").transform(simple("OK"));
      }
    }
;
  }
}
