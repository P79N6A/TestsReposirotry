public class ContextScopedOnExceptionMultipleRouteBuildersTest extends ContextTestSupport {
  @Test public void testFoo() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:handle-foo").expectedMessageCount(1);
    getMockEndpoint("mock:handle-bar").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    template.sendBody("direct:foo","Hello Foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBar() throws Exception {
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:handle-foo").expectedMessageCount(0);
    getMockEndpoint("mock:handle-bar").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    template.sendBody("direct:bar","Hello Bar");
    assertMockEndpointsSatisfied();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setErrorHandlerBuilder(new DeadLetterChannelBuilder("mock:dead"));
    return context;
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:handle-foo");
        from("direct:foo").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
      }
    }
,new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).handled(true).to("mock:handle-bar");
        from("direct:bar").to("mock:bar").throwException(new IllegalArgumentException("Damn"));
      }
    }
};
  }
}
