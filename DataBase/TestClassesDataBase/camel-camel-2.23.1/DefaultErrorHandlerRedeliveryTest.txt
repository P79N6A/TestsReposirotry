/** 
 * Unit test to verify that redelivery counters is working as expected.
 */
public class DefaultErrorHandlerRedeliveryTest extends ContextTestSupport {
  private static int counter;
  @Test public void testRedeliveryTest() throws Exception {
    counter=0;
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown exception");
    }
 catch (    RuntimeCamelException e) {
    }
    assertEquals(3,counter);
  }
  @Test public void testNoRedeliveriesTest() throws Exception {
    counter=0;
    try {
      template.sendBody("direct:no","Hello World");
      fail("Should have thrown exception");
    }
 catch (    RuntimeCamelException e) {
    }
    assertEquals(1,counter);
  }
  @Test public void testOneRedeliveryTest() throws Exception {
    counter=0;
    try {
      template.sendBody("direct:one","Hello World");
      fail("Should have thrown exception");
    }
 catch (    RuntimeCamelException e) {
    }
    assertEquals(2,counter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").errorHandler(defaultErrorHandler().redeliveryDelay(0).maximumRedeliveries(2)).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            throw new Exception("Forced exception by unit test");
          }
        }
);
        from("direct:no").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            throw new Exception("Forced exception by unit test");
          }
        }
);
        from("direct:one").errorHandler(defaultErrorHandler().redeliveryDelay(0).maximumRedeliveries(1)).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            throw new Exception("Forced exception by unit test");
          }
        }
);
      }
    }
;
  }
}
