/** 
 * Unit test of bean can propagate headers in a pipeline
 */
public class BeanPipelineTest extends ContextTestSupport {
  @Test public void testBeanInPipeline() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World from James");
    mock.expectedHeaderReceived("from","James");
    template.sendBodyAndHeader("direct:input","Hello World","from","Claus");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:input").pipeline("bean:foo","bean:bar?method=usingExchange","bean:baz").to("mock:result");
      }
    }
;
  }
  protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("foo",new FooBean());
    answer.bind("bar",new BarBean());
    answer.bind("baz",new BazBean());
    return answer;
  }
public static class FooBean {
    public void onlyPlainBody(    Object body){
      assertEquals("Hello World",body);
    }
  }
public static class BarBean {
    public void doNotUseMe(    String body){
      fail("Should not invoce me");
    }
    public void usingExchange(    Exchange exchange){
      String body=exchange.getIn().getBody(String.class);
      assertEquals("Hello World",body);
      assertEquals("Claus",exchange.getIn().getHeader("from"));
      exchange.getOut().setHeader("from","James");
      exchange.getOut().setBody("Hello World from James");
    }
  }
public static class BazBean {
    public void doNotUseMe(    String body){
      fail("Should not invoce me");
    }
    public void withAnnotations(    @Headers Map<String,Object> headers,    @Body String body){
      assertEquals("Hello World from James",body);
      assertEquals("James",headers.get("from"));
    }
  }
}
