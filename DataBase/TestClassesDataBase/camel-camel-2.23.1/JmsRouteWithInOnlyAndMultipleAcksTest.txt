public class JmsRouteWithInOnlyAndMultipleAcksTest extends CamelTestSupport {
  protected String componentName="amq";
  @Test public void testSendOrderWithMultipleAcks() throws Exception {
    MockEndpoint inbox=getMockEndpoint("mock:inbox");
    inbox.expectedBodiesReceived("Camel in Action");
    String orderId="1";
    MockEndpoint notifCollector=getMockEndpoint("mock:orderNotificationAckCollector");
    notifCollector.expectedMessageCount(2);
    notifCollector.expectedHeaderReceived("JMSCorrelationID",orderId);
    notifCollector.setResultWaitTime(10000);
    Object out=template.requestBodyAndHeader("amq:queue:inbox","Camel in Action","JMSCorrelationID",orderId);
    assertEquals("OK: Camel in Action",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("orderService",new MyOrderServiceBean());
    jndi.bind("orderServiceNotificationWithAck-1",new MyOrderServiceNotificationWithAckBean("1"));
    jndi.bind("orderServiceNotificationWithAck-2",new MyOrderServiceNotificationWithAckBean("2"));
    return jndi;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("amq:queue:inbox").to("mock:inbox").inOnly("amq:topic:orderServiceNotification").bean("orderService","handleOrder");
        from("amq:topic:orderServiceNotification").bean("orderServiceNotificationWithAck-1","handleOrderNotificationWithAck").to("amq:queue:orderServiceNotificationAck");
        from("amq:topic:orderServiceNotification").bean("orderServiceNotificationWithAck-2","handleOrderNotificationWithAck").to("amq:queue:orderServiceNotificationAck");
        from("amq:queue:orderServiceNotificationAck").to("mock:orderNotificationAckCollector");
      }
    }
;
  }
public static class MyOrderServiceBean {
    public String handleOrder(    String body){
      return "OK: " + body;
    }
  }
public static class MyOrderServiceNotificationWithAckBean {
    private String id;
    public MyOrderServiceNotificationWithAckBean(    String id){
      this.id=id;
    }
    public String handleOrderNotificationWithAck(    String body){
      return "Ack-" + id + ":"+ body;
    }
  }
}
