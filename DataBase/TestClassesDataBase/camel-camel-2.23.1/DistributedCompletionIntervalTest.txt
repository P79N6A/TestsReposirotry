/** 
 * Unit test to verify that aggregate by interval only also works.
 * @version 
 */
public class DistributedCompletionIntervalTest extends AbstractDistributedTest {
  private MemoryAggregationRepository sharedAggregationRepository=new MemoryAggregationRepository(true);
  @Test public void testCamelContext1Wins() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Message 19");
    MockEndpoint mock2=getMockEndpoint2("mock:result");
    mock2.expectedMessageCount(0);
    Thread.sleep(2000);
    sendMessages();
    mock.assertIsSatisfied();
    mock2.assertIsSatisfied();
  }
  @Test public void testCamelContext2Wins() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    MockEndpoint mock2=getMockEndpoint2("mock:result");
    mock2.expectedBodiesReceived("Message 19");
    Thread.sleep(2000);
    sendMessages();
    mock2.assertIsSatisfied();
    mock.assertIsSatisfied();
  }
  private void sendMessages(){
    for (int i=0; i < 20; i++) {
      int choice=i % 2;
      if (choice == 0) {
        template.sendBodyAndHeader("direct:start","Message " + i,"id","1");
      }
 else {
        template2.sendBodyAndHeader("direct:start","Message " + i,"id","1");
      }
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new UseLatestAggregationStrategy()).aggregationRepository(sharedAggregationRepository).optimisticLocking().completionInterval(getName().equals("testCamelContext1Wins") ? 5000 : 10000).to("mock:result");
      }
    }
;
  }
  @Override protected RouteBuilder createRouteBuilder2() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new UseLatestAggregationStrategy()).aggregationRepository(sharedAggregationRepository).optimisticLocking().completionInterval(getName().equals("testCamelContext1Wins") ? 10000 : 5000).to("mock:result");
      }
    }
;
  }
}
