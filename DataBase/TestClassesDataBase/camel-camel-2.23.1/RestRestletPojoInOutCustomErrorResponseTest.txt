/** 
 * @version 
 */
public class RestRestletPojoInOutCustomErrorResponseTest extends RestletTestSupport {
  @Test public void testRestletPojoInOutOk() throws Exception {
    String body="{\"id\": 123, \"name\": \"Donald Duck\"}";
    String out=template.requestBody("http://localhost:" + portNum + "/users/lives",body,String.class);
    assertNotNull(out);
    assertEquals("{\"iso\":\"EN\",\"country\":\"England\"}",out);
  }
  @Test public void testRestletPojoInOutError() throws Exception {
    final String body="{\"id\": 77, \"name\": \"John Doe\"}";
    Exchange reply=template.request("http://localhost:" + portNum + "/users/lives?throwExceptionOnFailure=false",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(body);
      }
    }
);
    assertNotNull(reply);
    assertEquals("id value is too low",reply.getOut().getBody(String.class));
    assertEquals(400,reply.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    String type=reply.getOut().getHeader(Exchange.CONTENT_TYPE,String.class);
    assertTrue(type.contains("text/plain"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.json);
        rest("/users/").post("lives").type(UserPojo.class).outType(CountryPojo.class).route().choice().when().simple("${body.id} < 100").bean(new UserErrorService(),"idToLowError").otherwise().bean(new UserService(),"livesWhere");
      }
    }
;
  }
}
