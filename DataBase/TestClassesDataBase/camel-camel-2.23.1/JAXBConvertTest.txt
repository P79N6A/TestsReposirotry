/** 
 * @version 
 */
public class JAXBConvertTest extends Assert {
  protected CamelContext context=new DefaultCamelContext();
  protected TypeConverter converter=context.getTypeConverter();
  @Test public void testConverter() throws Exception {
    PurchaseOrder purchaseOrder=converter.convertTo(PurchaseOrder.class,"<purchaseOrder name='foo' amount='123.45' price='2.22'/>");
    assertNotNull("Purchase order should not be null!",purchaseOrder);
    assertEquals("name","foo",purchaseOrder.getName());
    assertEquals("amount",123.45,purchaseOrder.getAmount(),0);
    assertEquals("price",2.22,purchaseOrder.getPrice(),0);
  }
  @Test public void testConverterTwice() throws Exception {
    PurchaseOrder purchaseOrder=converter.convertTo(PurchaseOrder.class,"<purchaseOrder name='foo' amount='123.45' price='2.22'/>");
    assertNotNull("Purchase order should not be null!",purchaseOrder);
    assertEquals("name","foo",purchaseOrder.getName());
    assertEquals("amount",123.45,purchaseOrder.getAmount(),0);
    assertEquals("price",2.22,purchaseOrder.getPrice(),0);
    PurchaseOrder purchaseOrder2=converter.convertTo(PurchaseOrder.class,"<purchaseOrder name='bar' amount='5.12' price='3.33'/>");
    assertNotNull("Purchase order should not be null!",purchaseOrder2);
    assertEquals("name","bar",purchaseOrder2.getName());
    assertEquals("amount",5.12,purchaseOrder2.getAmount(),0);
    assertEquals("amount",3.33,purchaseOrder2.getPrice(),0);
  }
  @Test public void testStreamShouldBeClosed() throws Exception {
    String data="<purchaseOrder name='foo' amount='123.45' price='2.22'/>";
    InputStream is=new ByteArrayInputStream(data.getBytes());
    PurchaseOrder purchaseOrder=converter.convertTo(PurchaseOrder.class,is);
    assertNotNull(purchaseOrder);
    assertEquals(-1,is.read());
  }
  @Test public void testStreamShouldBeClosedEvenForException() throws Exception {
    String data="<errorOrder name='foo' amount='123.45' price='2.22'/>";
    InputStream is=new ByteArrayInputStream(data.getBytes());
    try {
      converter.convertTo(PurchaseOrder.class,is);
      fail("Should have thrown exception");
    }
 catch (    TypeConversionException e) {
    }
    assertEquals(-1,is.read());
  }
  @Test public void testNoConversionForStreamCache() throws Exception {
    PurchaseOrder order=new PurchaseOrder();
    try {
      converter.mandatoryConvertTo(StreamCache.class,order);
      fail("We should not use the JAXB FallbackTypeConverter for stream caching");
    }
 catch (    NoTypeConversionAvailableException e) {
    }
  }
}
