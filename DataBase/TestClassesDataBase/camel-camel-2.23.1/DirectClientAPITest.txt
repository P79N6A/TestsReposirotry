public class DirectClientAPITest extends ReactiveStreamsTestSupport {
  @Test public void testFromDirect() throws Exception {
    Publisher<Integer> data=camel.from("direct:endpoint",Integer.class);
    BlockingQueue<Integer> queue=new LinkedBlockingDeque<>();
    Flowable.fromPublisher(data).map(i -> -i).doOnNext(queue::add).subscribe();
    context.start();
    template.sendBody("direct:endpoint",1);
    Integer res=queue.poll(1,TimeUnit.SECONDS);
    assertNotNull(res);
    assertEquals(-1,res.intValue());
  }
  @Test public void testFromDirectOnHotContext() throws Exception {
    context.start();
    Thread.sleep(200);
    Publisher<Integer> data=camel.from("direct:endpoint",Integer.class);
    BlockingQueue<Integer> queue=new LinkedBlockingDeque<>();
    Flowable.fromPublisher(data).map(i -> -i).doOnNext(queue::add).subscribe();
    template.sendBody("direct:endpoint",1);
    Integer res=queue.poll(1,TimeUnit.SECONDS);
    assertNotNull(res);
    assertEquals(-1,res.intValue());
  }
  @Test public void testDirectCall() throws Exception {
    context.start();
    BlockingQueue<String> queue=new LinkedBlockingDeque<>();
    Flowable.just(1,2,3).flatMap(camel.to("bean:hello",String.class)::apply).doOnNext(queue::add).subscribe();
    check3HelloInQueue(queue);
  }
  @Test public void testDirectSendAndForget() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:data").to("mock:result");
      }
    }
.addRoutesToCamelContext(context);
    context.start();
    Flowable.just(1,2,3).subscribe(camel.subscriber("direct:data",Integer.class));
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    mock.assertIsSatisfied();
    int idx=1;
    for (    Exchange ex : mock.getExchanges()) {
      Integer num=ex.getIn().getBody(Integer.class);
      assertEquals(new Integer(idx++),num);
    }
  }
  @Test public void testDirectCallOverload() throws Exception {
    context.start();
    BlockingQueue<String> queue=new LinkedBlockingDeque<>();
    Flowable.just(1,2,3).flatMap(e -> camel.to("bean:hello",e,String.class)).doOnNext(queue::add).subscribe();
    check3HelloInQueue(queue);
  }
  @Test public void testDirectCallWithExchange() throws Exception {
    context.start();
    BlockingQueue<String> queue=new LinkedBlockingDeque<>();
    Flowable.just(1,2,3).flatMap(camel.to("bean:hello")::apply).map(ex -> ex.getOut().getBody(String.class)).doOnNext(queue::add).subscribe();
    check3HelloInQueue(queue);
  }
  private void check3HelloInQueue(  BlockingQueue<String> queue) throws InterruptedException {
    Set<String> res=new HashSet<>();
    res.add(queue.poll(1,TimeUnit.SECONDS));
    res.add(queue.poll(1,TimeUnit.SECONDS));
    res.add(queue.poll(1,TimeUnit.SECONDS));
    Assertions.assertThat(res).containsExactlyInAnyOrder("Hello 1","Hello 2","Hello 3");
  }
  @Test public void testDirectCallWithExchangeOverload() throws Exception {
    context.start();
    BlockingQueue<String> queue=new LinkedBlockingDeque<>();
    Flowable.just(1,2,3).flatMap(e -> camel.to("bean:hello",e)).map(ex -> ex.getOut().getBody(String.class)).doOnNext(queue::add).subscribe();
    check3HelloInQueue(queue);
  }
  @Test public void testProxiedDirectCall() throws Exception {
    context.start();
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:proxy").to("bean:hello").setBody().simple("proxy to ${body}");
      }
    }
.addRoutesToCamelContext(context);
    BlockingQueue<String> queue=new LinkedBlockingDeque<>();
    Flowable.just(1,2,3).flatMap(camel.to("direct:proxy",String.class)::apply).doOnNext(queue::add).subscribe();
    for (int i=1; i <= 3; i++) {
      String res=queue.poll(1,TimeUnit.SECONDS);
      assertEquals("proxy to Hello " + i,res);
    }
  }
  @Test public void testDirectCallFromCamel() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest");
      }
    }
.addRoutesToCamelContext(context);
    context.start();
    camel.process("direct:stream",p -> Flowable.fromPublisher(p).map(exchange -> {
      int val=exchange.getIn().getBody(Integer.class);
      exchange.getOut().setBody(-val);
      return exchange;
    }
));
    for (int i=1; i <= 3; i++) {
      template.sendBody("direct:source",i);
    }
    MockEndpoint mock=getMockEndpoint("mock:dest");
    mock.expectedMessageCount(3);
    mock.assertIsSatisfied();
    int id=1;
    for (    Exchange ex : mock.getExchanges()) {
      String content=ex.getIn().getBody(String.class);
      assertEquals("after stream: " + (-id++),content);
    }
  }
  @Test public void testDirectCallFromCamelWithConversion() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest");
      }
    }
.addRoutesToCamelContext(context);
    context.start();
    camel.process("direct:stream",Integer.class,p -> Flowable.fromPublisher(p).map(i -> -i));
    for (int i=1; i <= 3; i++) {
      template.sendBody("direct:source",i);
    }
    MockEndpoint mock=getMockEndpoint("mock:dest");
    mock.expectedMessageCount(3);
    mock.assertIsSatisfied();
    int id=1;
    for (    Exchange ex : mock.getExchanges()) {
      String content=ex.getIn().getBody(String.class);
      assertEquals("after stream: " + (-id++),content);
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("hello",new SampleBean());
    return registry;
  }
public static class SampleBean {
    public String hello(    String name){
      return "Hello " + name;
    }
  }
}
