/** 
 * Unit test the pipeline in concurrent conditions.
 */
public class PipelineConcurrentTest extends ContextTestSupport {
  private String uri="seda:in?size=2000&concurrentConsumers=10";
  @Test public void testConcurrentPipeline() throws Exception {
    int total=200;
    final int group=total / 20;
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(total);
    ExecutorService executor=Executors.newFixedThreadPool(20);
    for (int i=0; i < 20; i++) {
      final int threadCount=i;
      executor.execute(new Runnable(){
        public void run(){
          int start=threadCount * group;
          for (int i=0; i < group; i++) {
            try {
              Thread.sleep(new Random().nextInt(10));
            }
 catch (            InterruptedException e) {
            }
            template.sendBody(uri,"" + (start + i));
          }
        }
      }
);
    }
    mock.assertIsSatisfied();
    mock.expectsNoDuplicates(body());
    executor.shutdown();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        errorHandler(noErrorHandler());
        from(uri).pipeline("direct:do","mock:result");
        from("direct:do").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            exchange.getOut().setBody("Bye " + body);
          }
        }
);
      }
    }
;
  }
}
