public class PubNubTestBase extends CamelTestSupport {
  private final int port=AvailablePortFinder.getNextAvailable(3344);
  private PubNub pubnub;
  @Rule public WireMockRule wireMockRule=new WireMockRule(options().port(port));
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    this.pubnub=createPubNubInstance();
    registry.bind("pubnub",this.pubnub);
    return registry;
  }
  @Before public void beforeEach() throws IOException {
    wireMockRule.start();
  }
  @After public void afterEach(){
    pubnub.destroy();
  }
  protected PubNub getPubnub(){
    return pubnub;
  }
  private PubNub createPubNubInstance(){
    PNConfiguration pnConfiguration=new PNConfiguration();
    pnConfiguration.setOrigin("localhost" + ":" + port);
    pnConfiguration.setSecure(false);
    pnConfiguration.setSubscribeKey("mySubscribeKey");
    pnConfiguration.setPublishKey("myPublishKey");
    pnConfiguration.setUuid("myUUID");
    pnConfiguration.setLogVerbosity(PNLogVerbosity.NONE);
    pnConfiguration.setHeartbeatNotificationOptions(NONE);
class MockedTimePubNub extends PubNub {
      MockedTimePubNub(      PNConfiguration initialConfig){
        super(initialConfig);
      }
      @Override public int getTimestamp(){
        return 1337;
      }
      @Override public String getVersion(){
        return "suchJava";
      }
      @Override public String getInstanceId(){
        return "PubNubInstanceId";
      }
      @Override public String getRequestId(){
        return "PubNubRequestId";
      }
    }
    return new MockedTimePubNub(pnConfiguration);
  }
}
