@RunWith(MockitoJUnitRunner.class) public class InOutCamelWorkItemHandlerTest {
  @Mock ProducerTemplate producerTemplate;
  @Mock Exchange outExchange;
  @Mock Message outMessage;
  @Mock CamelContext camelContext;
  @Mock RuntimeManager runtimeManager;
  @Test public void testExecuteInOutGlobalCamelContext() throws Exception {
    String camelEndpointId="testCamelRoute";
    String camelRouteUri="direct:" + camelEndpointId;
    String testReponse="testResponse";
    when(producerTemplate.send(eq(camelRouteUri),ArgumentMatchers.any(Exchange.class))).thenReturn(outExchange);
    when(producerTemplate.getCamelContext()).thenReturn(camelContext);
    when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
    HeadersMapFactory hmf=new DefaultHeadersMapFactory();
    when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
    when(outExchange.getOut()).thenReturn(outMessage);
    when(outMessage.getBody()).thenReturn(testReponse);
    try {
      ServiceRegistry.get().register("GlobalCamelService",camelContext);
      TestWorkItemManager manager=new TestWorkItemManager();
      WorkItemImpl workItem=new WorkItemImpl();
      workItem.setParameter("CamelEndpointId",camelEndpointId);
      workItem.setParameter("Request","someRequest");
      workItem.setDeploymentId("testDeploymentId");
      workItem.setProcessInstanceId(1L);
      workItem.setId(1L);
      AbstractCamelWorkItemHandler handler=new InOutCamelWorkItemHandler();
      handler.executeWorkItem(workItem,manager);
      assertThat(manager.getResults(),is(notNullValue()));
      assertThat(manager.getResults().size(),equalTo(1));
      assertThat(manager.getResults().containsKey(workItem.getId()),is(true));
      Map<String,Object> results=manager.getResults(workItem.getId());
      assertThat(results.size(),equalTo(2));
      assertThat(results.get("Response"),equalTo(testReponse));
    }
  finally {
      ServiceRegistry.get().remove("GlobalCamelService");
    }
  }
  @Test public void testExecuteInOutLocalCamelContext() throws Exception {
    String camelEndpointId="testCamelRoute";
    String camelRouteUri="direct:" + camelEndpointId;
    String testReponse="testResponse";
    String runtimeManagerId="testRuntimeManager";
    when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
    when(producerTemplate.send(eq(camelRouteUri),ArgumentMatchers.any(Exchange.class))).thenReturn(outExchange);
    when(producerTemplate.getCamelContext()).thenReturn(camelContext);
    when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
    HeadersMapFactory hmf=new DefaultHeadersMapFactory();
    when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
    when(outExchange.getOut()).thenReturn(outMessage);
    when(outMessage.getBody()).thenReturn(testReponse);
    try {
      ServiceRegistry.get().register(runtimeManagerId + "_CamelService",camelContext);
      WorkItemImpl workItem=new WorkItemImpl();
      workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM,camelEndpointId);
      workItem.setParameter("Request","someRequest");
      workItem.setDeploymentId("testDeploymentId");
      workItem.setProcessInstanceId(1L);
      workItem.setId(1L);
      AbstractCamelWorkItemHandler handler=new InOutCamelWorkItemHandler(runtimeManager);
      TestWorkItemManager manager=new TestWorkItemManager();
      handler.executeWorkItem(workItem,manager);
      assertThat(manager.getResults(),is(notNullValue()));
      assertThat(manager.getResults().size(),equalTo(1));
      assertThat(manager.getResults().containsKey(workItem.getId()),is(true));
      Map<String,Object> results=manager.getResults(workItem.getId());
      assertThat(results.size(),equalTo(2));
      assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM),equalTo(testReponse));
    }
  finally {
      ServiceRegistry.get().remove(runtimeManagerId + "_CamelService");
    }
  }
  @Test public void testExecuteInOutLocalCamelContextLazyInit() throws Exception {
    String camelEndpointId="testCamelRoute";
    String camelRouteUri="direct:" + camelEndpointId;
    String testReponse="testResponse";
    String runtimeManagerId="testRuntimeManager";
    when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
    when(producerTemplate.send(eq(camelRouteUri),ArgumentMatchers.any(Exchange.class))).thenReturn(outExchange);
    when(producerTemplate.getCamelContext()).thenReturn(camelContext);
    when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
    HeadersMapFactory hmf=new DefaultHeadersMapFactory();
    when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
    when(outExchange.getOut()).thenReturn(outMessage);
    when(outMessage.getBody()).thenReturn(testReponse);
    WorkItemImpl workItem=new WorkItemImpl();
    workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM,camelEndpointId);
    workItem.setParameter("Request","someRequest");
    workItem.setDeploymentId("testDeploymentId");
    workItem.setProcessInstanceId(1L);
    workItem.setId(1L);
    AbstractCamelWorkItemHandler handler=new InOutCamelWorkItemHandler(runtimeManager);
    try {
      ServiceRegistry.get().register(runtimeManagerId + "_CamelService",camelContext);
      TestWorkItemManager manager=new TestWorkItemManager();
      handler.executeWorkItem(workItem,manager);
      assertThat(manager.getResults(),is(notNullValue()));
      assertThat(manager.getResults().size(),equalTo(1));
      assertThat(manager.getResults().containsKey(workItem.getId()),is(true));
      Map<String,Object> results=manager.getResults(workItem.getId());
      assertThat(results.size(),equalTo(2));
      assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM),equalTo(testReponse));
    }
  finally {
      ServiceRegistry.get().remove(runtimeManagerId + "_CamelService");
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testExecuteInOutLocalCamelContextLazyInitFail() throws Exception {
    String camelEndpointId="testCamelRoute";
    String camelRouteUri="direct:" + camelEndpointId;
    String testReponse="testResponse";
    String runtimeManagerId="testRuntimeManager";
    when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
    WorkItemImpl workItem=new WorkItemImpl();
    workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM,camelEndpointId);
    workItem.setParameter("Request","someRequest");
    workItem.setDeploymentId("testDeploymentId");
    workItem.setProcessInstanceId(1L);
    workItem.setId(1L);
    AbstractCamelWorkItemHandler handler=new InOutCamelWorkItemHandler(runtimeManager);
    TestWorkItemManager manager=new TestWorkItemManager();
    handler.executeWorkItem(workItem,manager);
  }
}
