public class SpringWireTapUsingFireAndForgetTest extends ContextTestSupport {
  protected CamelContext createCamelContext() throws Exception {
    return createSpringCamelContext(this,"org/apache/camel/spring/processor/SpringWireTapUsingFireAndForgetTest.xml");
  }
  @Test public void testFireAndForgetUsingExpression() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Hello World");
    MockEndpoint foo=getMockEndpoint("mock:foo");
    foo.expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    Exchange e1=result.getReceivedExchanges().get(0);
    Exchange e2=foo.getReceivedExchanges().get(0);
    assertNotSame("Should not be same Exchange",e1,e2);
    assertEquals("direct://start",e1.getFromEndpoint().getEndpointUri());
    assertEquals("direct://start",e2.getFromEndpoint().getEndpointUri());
  }
  @Test public void testFireAndForgetUsingProcessor() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Hello World");
    MockEndpoint foo=getMockEndpoint("mock:foo");
    foo.expectedBodiesReceived("Bye World");
    foo.expectedHeaderReceived("foo","bar");
    template.sendBody("direct:start2","Hello World");
    assertMockEndpointsSatisfied();
    Exchange e1=result.getReceivedExchanges().get(0);
    Exchange e2=foo.getReceivedExchanges().get(0);
    assertNotSame("Should not be same Exchange",e1,e2);
    assertEquals("direct://start2",e1.getFromEndpoint().getEndpointUri());
    assertEquals("direct://start2",e2.getFromEndpoint().getEndpointUri());
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setBody("Bye World");
      exchange.getIn().setHeader("foo","bar");
    }
  }
}
