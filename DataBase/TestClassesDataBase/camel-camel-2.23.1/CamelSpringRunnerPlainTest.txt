@RunWith(CamelSpringRunner.class) @BootstrapWith(CamelTestContextBootstrapper.class) @ContextConfiguration() @DirtiesContext(classMode=ClassMode.AFTER_EACH_TEST_METHOD) public class CamelSpringRunnerPlainTest {
  @Autowired protected CamelContext camelContext;
  @Autowired protected CamelContext camelContext2;
  @EndpointInject(uri="mock:a",context="camelContext") protected MockEndpoint mockA;
  @EndpointInject(uri="mock:b",context="camelContext") protected MockEndpoint mockB;
  @EndpointInject(uri="mock:c",context="camelContext2") protected MockEndpoint mockC;
  @Produce(uri="direct:start",context="camelContext") protected ProducerTemplate start;
  @Produce(uri="direct:start2",context="camelContext2") protected ProducerTemplate start2;
  @Test public void testPositive() throws Exception {
    assertEquals(ServiceStatus.Started,camelContext.getStatus());
    assertEquals(ServiceStatus.Started,camelContext2.getStatus());
    mockA.expectedBodiesReceived("David");
    mockB.expectedBodiesReceived("Hello David");
    mockC.expectedBodiesReceived("David");
    start.sendBody("David");
    start2.sendBody("David");
    MockEndpoint.assertIsSatisfied(camelContext);
    MockEndpoint.assertIsSatisfied(camelContext2);
  }
  @Test public void testJmx() throws Exception {
    assertEquals(DefaultManagementStrategy.class,camelContext.getManagementStrategy().getClass());
  }
  @Test public void testShutdownTimeout() throws Exception {
    assertEquals(10,camelContext.getShutdownStrategy().getTimeout());
    assertEquals(TimeUnit.SECONDS,camelContext.getShutdownStrategy().getTimeUnit());
  }
  @Test public void testStopwatch(){
    StopWatch stopWatch=StopWatchTestExecutionListener.getStopWatch();
    assertNotNull(stopWatch);
    assertTrue(stopWatch.taken() < 100);
  }
  @Test public void testExcludedRoute(){
    assertNotNull(camelContext.getRoute("excludedRoute"));
  }
  @Test public void testProvidesBreakpoint(){
    assertNull(camelContext.getDebugger());
    assertNull(camelContext2.getDebugger());
  }
  @Test public void testRouteCoverage() throws Exception {
  }
}
