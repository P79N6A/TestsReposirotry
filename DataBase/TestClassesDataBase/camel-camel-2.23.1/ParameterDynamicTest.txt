public class ParameterDynamicTest {
  private static final String TEST_QUERY=new StringBuilder().append("xquery version \"3.0\" encoding \"UTF-8\";\n").append("declare variable $extParam as xs:boolean external := false();\n").append("if($extParam) then(true()) else (false())").toString();
  private Configuration conf=new Configuration();
  private XQueryExpression query;
  private DynamicQueryContext context;
  @Before public void setup() throws Exception {
    conf.setCompileWithTracing(true);
    query=conf.newStaticQueryContext().compileQuery(TEST_QUERY);
    context=new DynamicQueryContext(conf);
  }
  /** 
 * This is what Camel XQueryBuilder executes, which leads to a parameter binding type error.
 */
  @Test public void testObjectParameter() throws Exception {
    context.setParameter(StructuredQName.fromClarkName("extParam"),new ObjectValue<>(true));
    try {
      Item result=query.iterator(context).next();
      fail("Should have thrown an exception");
      assertTrue(result instanceof BooleanValue);
      assertEquals(true,((BooleanValue)result).getBooleanValue());
    }
 catch (    Exception e) {
    }
  }
  /** 
 * This is what Camel XQueryBuilder should execute to allow Saxon to bind the parameter type properly.
 */
  @Test public void testBooleanParameter() throws Exception {
    context.setParameter(StructuredQName.fromClarkName("extParam"),BooleanValue.TRUE);
    Item result=query.iterator(context).next();
    assertTrue(result instanceof BooleanValue);
    assertEquals(true,((BooleanValue)result).getBooleanValue());
  }
  @Test public void testXQueryBuilder() throws Exception {
    Exchange exchange=new DefaultExchange(new DefaultCamelContext());
    exchange.getIn().setBody("<foo><bar>abc_def_ghi</bar></foo>");
    exchange.setProperty("extParam",true);
    Object result=xquery(TEST_QUERY).asString().evaluate(exchange,boolean.class);
    assertEquals(true,result);
    exchange.setProperty("extParam",false);
    result=xquery(TEST_QUERY).asString().evaluate(exchange,boolean.class);
    assertEquals(false,result);
  }
}
