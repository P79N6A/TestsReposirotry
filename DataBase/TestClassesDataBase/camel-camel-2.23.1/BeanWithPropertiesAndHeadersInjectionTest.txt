/** 
 * @version 
 */
public class BeanWithPropertiesAndHeadersInjectionTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanRouteTest.class);
  protected MyBean myBean=new MyBean();
  @Test public void testSendMessage() throws Exception {
    template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty("p1","abc");
        exchange.setProperty("p2",123);
        Message in=exchange.getIn();
        in.setHeader("h1","xyz");
        in.setHeader("h2",456);
      }
    }
);
    Map<?,?> foo=myBean.foo;
    Map<?,?> bar=myBean.bar;
    assertNotNull("myBean.foo",foo);
    assertNotNull("myBean.bar",bar);
    assertEquals("foo.p1","abc",foo.get("p1"));
    assertEquals("foo.p2",123,foo.get("p2"));
    assertEquals("bar.h1","xyz",bar.get("h1"));
    assertEquals("bar.h2",456,bar.get("h2"));
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").bean("myBean");
      }
    }
;
  }
public static class MyBean {
    public Map<?,?> foo;
    public Map<?,?> bar;
    @Override public String toString(){
      return "MyBean[foo: " + foo + " bar: "+ bar+ "]";
    }
    public void myMethod(    @ExchangeProperties Map<?,?> foo,    @Headers Map<?,?> bar){
      this.foo=foo;
      this.bar=bar;
      LOG.info("myMethod() method called on " + this);
    }
  }
}
