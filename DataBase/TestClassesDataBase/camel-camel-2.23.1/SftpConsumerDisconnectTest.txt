@Ignore public class SftpConsumerDisconnectTest extends SftpServerTestSupport {
  private static final String SAMPLE_FILE_NAME_1=String.format("sample-1-%s.txt",SftpConsumerDisconnectTest.class.getSimpleName());
  private static final String SAMPLE_FILE_NAME_2=String.format("sample-2-%s.txt",SftpConsumerDisconnectTest.class.getSimpleName());
  private static final String SAMPLE_FILE_CHARSET="iso-8859-1";
  private static final String SAMPLE_FILE_PAYLOAD="abc";
  @Test public void testConsumeDelete() throws Exception {
    if (!canTest()) {
      return;
    }
    createSampleFile(SAMPLE_FILE_NAME_1);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived(SAMPLE_FILE_PAYLOAD);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    Thread.sleep(250);
    File deletedFile=new File(FTP_ROOT_DIR + "/" + SAMPLE_FILE_NAME_1);
    assertFalse("File should have been deleted: " + deletedFile,deletedFile.exists());
  }
  @Test public void testConsumeMove() throws Exception {
    if (!canTest()) {
      return;
    }
    String movedFile=FTP_ROOT_DIR + "/.camel/" + SAMPLE_FILE_NAME_2;
    createSampleFile(SAMPLE_FILE_NAME_2);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived(SAMPLE_FILE_PAYLOAD);
    mock.expectedFileExists(movedFile);
    context.startRoute("bar");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "?username=admin&password=admin&delete=true").routeId("foo").noAutoStartup().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            disconnectAllSessions();
          }
        }
).to("mock:result");
        from("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "?username=admin&password=admin&noop=false&move=.camel").routeId("bar").noAutoStartup().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            disconnectAllSessions();
          }
        }
).to("mock:result");
      }
    }
;
  }
  private void createSampleFile(  String fileName) throws IOException {
    File file=new File(FTP_ROOT_DIR + "/" + fileName);
    FileUtils.write(file,SAMPLE_FILE_PAYLOAD,SAMPLE_FILE_CHARSET);
  }
}
