/** 
 * Test class for com.google.api.services.drive.Drive$Files APIs.
 */
public class DriveFilesIntegrationTest extends AbstractGoogleDriveTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(DriveFilesIntegrationTest.class);
  private static final String PATH_PREFIX=GoogleDriveApiCollection.getCollection().getApiName(DriveFilesApiMethod.class).getName();
  @Test public void testCopy() throws Exception {
    File testFile=uploadTestFile();
    String fromFileId=testFile.getId();
    File toFile=new File();
    toFile.setTitle(UPLOAD_FILE.getName() + "_copy");
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.fileId",fromFileId);
    headers.put("CamelGoogleDrive.content",toFile);
    final File result=requestBodyAndHeaders("direct://COPY",null,headers);
    assertNotNull("copy result",result);
    assertEquals(toFile.getTitle(),result.getTitle());
    LOG.debug("copy: " + result);
  }
  @Test public void testDelete() throws Exception {
    File testFile=uploadTestFile();
    String fileId=testFile.getId();
    sendBody("direct://DELETE",fileId);
    try {
      final File result=requestBody("direct://GET",fileId);
      assertTrue("Should have not found deleted file.",false);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  @Test public void testGet() throws Exception {
    File testFile=uploadTestFile();
    String fileId=testFile.getId();
    final File result=requestBody("direct://GET",fileId);
    assertNotNull("get result",result);
    LOG.debug("get: " + result);
  }
  @Test public void testInsert() throws Exception {
    File file=new File();
    file.setTitle(UPLOAD_FILE.getName());
    File result=requestBody("direct://INSERT",file);
    assertNotNull("insert result",result);
    LOG.debug("insert: " + result);
  }
  @Test public void testInsert1() throws Exception {
    File result=uploadTestFile();
    assertNotNull("insert result",result);
    LOG.debug("insert: " + result);
  }
  @Test public void testList() throws Exception {
    File testFile=uploadTestFile();
    FileList result=requestBody("direct://LIST",null);
    assertNotNull("list result",result);
    assertTrue(result.getItems().size() >= 1);
    File testFile2=uploadTestFile();
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.maxResults",1);
    result=requestBodyAndHeaders("direct://LIST",null,headers);
    assertNotNull("list result",result);
    assertTrue(result.getItems().size() == 1);
    List<File> resultList=new ArrayList<>();
    String pageToken;
    int i=0;
    do {
      result=requestBodyAndHeaders("direct://LIST",null,headers);
      resultList.addAll(result.getItems());
      pageToken=result.getNextPageToken();
      headers.put("CamelGoogleDrive.pageToken",pageToken);
      i++;
    }
 while (pageToken != null && pageToken.length() > 0 && i < 2);
    assertTrue(resultList.size() == 2);
    assertFalse(resultList.get(0).getId().equals(resultList.get(1)));
  }
  @Test public void testPatch() throws Exception {
    File file=uploadTestFile();
    file.setTitle(UPLOAD_FILE.getName() + "PATCHED");
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.fileId",file.getId());
    headers.put("CamelGoogleDrive.fields","title");
    headers.put("CamelGoogleDrive.content",file);
    File result=requestBodyAndHeaders("direct://PATCH",null,headers);
    assertNotNull("patch result",result);
    assertEquals(UPLOAD_FILE.getName() + "PATCHED",result.getTitle());
    LOG.debug("patch: " + result);
  }
  @Test public void testTouch() throws Exception {
    File theTestFile=uploadTestFile();
    DateTime createdDate=theTestFile.getModifiedDate();
    File result=requestBody("direct://TOUCH",theTestFile.getId());
    assertNotNull("touch result",result);
    assertTrue(result.getModifiedDate().getValue() > createdDate.getValue());
  }
  @Test public void testTrash() throws Exception {
    File testFile=uploadTestFile();
    String fileId=testFile.getId();
    assertNotNull("trash result",requestBody("direct://TRASH",fileId));
    assertNotNull("untrash result",requestBody("direct://UNTRASH",fileId));
  }
  @Test public void testUpdate() throws Exception {
    File theTestFile=uploadTestFile();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.fileId",theTestFile.getId());
    headers.put("CamelGoogleDrive.content",theTestFile);
    File result=requestBodyAndHeaders("direct://UPDATE",null,headers);
    assertNotNull("update result",result);
    LOG.debug("update: " + result);
  }
  @Test public void testUpdate1() throws Exception {
    File testFile=uploadTestFile();
    String fileId=testFile.getId();
    final File file=requestBody("direct://GET",fileId);
    file.setTitle("camel.png");
    java.io.File fileContent=new java.io.File(TEST_UPLOAD_IMG);
    FileContent mediaContent=new FileContent(null,fileContent);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.fileId",fileId);
    headers.put("CamelGoogleDrive.content",file);
    headers.put("CamelGoogleDrive.mediaContent",mediaContent);
    File result=requestBodyAndHeaders("direct://UPDATE_1",null,headers);
    assertNotNull("update result",result);
    LOG.debug("update: " + result);
  }
  @Ignore @Test public void testWatch() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.fileId",null);
    headers.put("CamelGoogleDrive.contentChannel",null);
    final com.google.api.services.drive.Drive.Files.Watch result=requestBodyAndHeaders("direct://WATCH",null,headers);
    assertNotNull("watch result",result);
    LOG.debug("watch: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://COPY").to("google-drive://" + PATH_PREFIX + "/copy");
        from("direct://DELETE").to("google-drive://" + PATH_PREFIX + "/delete?inBody=fileId");
        from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get?inBody=fileId");
        from("direct://INSERT").to("google-drive://" + PATH_PREFIX + "/insert?inBody=content");
        from("direct://INSERT_1").to("google-drive://" + PATH_PREFIX + "/insert");
        from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list");
        from("direct://PATCH").to("google-drive://" + PATH_PREFIX + "/patch");
        from("direct://TOUCH").to("google-drive://" + PATH_PREFIX + "/touch?inBody=fileId");
        from("direct://TRASH").to("google-drive://" + PATH_PREFIX + "/trash?inBody=fileId");
        from("direct://UNTRASH").to("google-drive://" + PATH_PREFIX + "/untrash?inBody=fileId");
        from("direct://UPDATE").to("google-drive://" + PATH_PREFIX + "/update");
        from("direct://UPDATE_1").to("google-drive://" + PATH_PREFIX + "/update");
        from("direct://WATCH").to("google-drive://" + PATH_PREFIX + "/watch");
      }
    }
;
  }
}
