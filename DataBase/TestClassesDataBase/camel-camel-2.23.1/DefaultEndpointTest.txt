/** 
 * @version
 */
public class DefaultEndpointTest extends ContextTestSupport {
  @Test public void testSanitizeUri(){
    assertNull(URISupport.sanitizeUri(null));
    assertEquals("",URISupport.sanitizeUri(""));
    assertSanitizedUriUnchanged("http://camel.apache.org");
    assertSanitizedUriUnchanged("irc://irc.codehaus.org/camel");
    assertSanitizedUriUnchanged("direct:foo?bar=123&cheese=yes");
    assertSanitizedUriUnchanged("https://issues.apache.org/activemq/secure/AddComment!default.jspa?id=33239");
    assertEquals("ftp://host.mysite.com/records?passiveMode=true&user=someuser&password=xxxxxx",URISupport.sanitizeUri("ftp://host.mysite.com/records?passiveMode=true&user=someuser&password=superSecret"));
    assertEquals("sftp://host.mysite.com/records?user=someuser&privateKeyFile=key.file&privateKeyFilePassphrase=xxxxxx&knownHostsFile=hosts.list",URISupport.sanitizeUri("sftp://host.mysite.com/records?user=someuser&privateKeyFile=key.file&privateKeyFilePassphrase=superSecret&knownHostsFile=hosts.list"));
    assertEquals("aws-sqs://MyQueue?accessKey=1672t4rflhnhli3&secretKey=xxxxxx",URISupport.sanitizeUri("aws-sqs://MyQueue?accessKey=1672t4rflhnhli3&secretKey=qi472qfberu33dqjncq"));
  }
  @Test public void testToString(){
    final String epstr="myep:///test";
    MyEndpoint ep=new MyEndpoint();
    ep.setEndpointUri(epstr);
    assertTrue(ep.toString().contains(epstr));
  }
  /** 
 * Ensures that the Uri was not changed because no password was found.
 * @param uri The uri to test.
 */
  private void assertSanitizedUriUnchanged(  String uri){
    assertEquals(uri,URISupport.sanitizeUri(uri));
  }
private static class MyEndpoint extends DefaultEndpoint {
    @Override public Producer createProducer() throws Exception {
      return null;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    @Override public boolean isSingleton(){
      return false;
    }
  }
}
