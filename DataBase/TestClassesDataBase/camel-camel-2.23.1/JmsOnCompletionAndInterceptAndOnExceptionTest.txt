/** 
 * @version 
 */
public class JmsOnCompletionAndInterceptAndOnExceptionTest extends CamelTestSupport {
  @Test public void testSynchronizeComplete() throws Exception {
    getMockEndpoint("mock:exception").expectedMessageCount(0);
    getMockEndpoint("mock:intercept").expectedMessageCount(5);
    getMockEndpoint("mock:sync").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION,true);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    template.sendBody("activemq:queue:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSynchronizeFailure() throws Exception {
    getMockEndpoint("mock:exception").expectedMessageCount(1);
    getMockEndpoint("mock:intercept").expectedMessageCount(4);
    getMockEndpoint("mock:sync").expectedMessageCount(1);
    getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION,true);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    template.sendBody("activemq:queue:start","Kabom");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        intercept().to("mock:intercept");
        onCompletion().to("log:global").to("mock:sync");
        onException(Exception.class).to("mock:exception");
        from("activemq:queue:start").process(new MyProcessor()).to("mock:result");
      }
    }
;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
public static class MyProcessor implements Processor {
    public MyProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      if ("Kabom".equals(exchange.getIn().getBody())) {
        throw new IllegalArgumentException("Kabom");
      }
      exchange.getIn().setBody("Bye World");
    }
  }
}
