/** 
 * This test validates the marshalling / unmarshalling of a fixed-length data field for which the length of the field is defined by the value of another field in the record.
 */
public class BindyFixedLengthDynamicFieldTest extends CamelTestSupport {
  public static final String URI_DIRECT_MARSHALL="direct:marshall";
  public static final String URI_DIRECT_UNMARSHALL="direct:unmarshall";
  public static final String URI_MOCK_MARSHALL_RESULT="mock:marshall-result";
  public static final String URI_MOCK_UNMARSHALL_RESULT="mock:unmarshall-result";
  private static final String TEST_RECORD="10A9Pauline^M^ISIN10XD12345678BUYShare000002500.45USD01-08-2009\r\n";
  private static final String TEST_RECORD_WITH_EXTRA_CHARS="10A9Pauline^M^ISIN10XD12345678BUYShare000002500.45USD01-08-2009x\r\n";
  @EndpointInject(uri=URI_MOCK_MARSHALL_RESULT) private MockEndpoint marshallResult;
  @EndpointInject(uri=URI_MOCK_UNMARSHALL_RESULT) private MockEndpoint unmarshallResult;
  @Test public void testUnmarshallMessage() throws Exception {
    unmarshallResult.expectedMessageCount(1);
    template.sendBody(URI_DIRECT_UNMARSHALL,TEST_RECORD);
    unmarshallResult.assertIsSatisfied();
    BindyFixedLengthDynamicFieldTest.Order order=(BindyFixedLengthDynamicFieldTest.Order)unmarshallResult.getReceivedExchanges().get(0).getIn().getBody();
    assertEquals(10,order.getOrderNr());
    assertEquals("Pauline",order.getFirstName());
    assertEquals("M",order.getLastName());
    assertEquals("XD12345678",order.getInstrumentNumber());
  }
  @Test public void testFailWhenUnmarshallMessageWithUnmappedChars() throws Exception {
    unmarshallResult.reset();
    unmarshallResult.expectedMessageCount(0);
    try {
      template.sendBody(URI_DIRECT_UNMARSHALL,TEST_RECORD_WITH_EXTRA_CHARS);
    }
 catch (    Exception e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().contains("unmapped characters"));
      return;
    }
    fail("An error is expected when unmapped characters are encountered in the fixed length record");
  }
  @Test public void testMarshallMessage() throws Exception {
    BindyFixedLengthDynamicFieldTest.Order order=new Order();
    order.setOrderNr(10);
    order.setOrderType("BUY");
    order.setClientNr("A9");
    order.setFirstName("Pauline");
    order.setLastName("M");
    order.setAmount(new BigDecimal("2500.45"));
    order.setInstrumentCode("ISIN");
    order.setInstrumentNumberLen(10);
    order.setInstrumentNumber("XD12345678");
    order.setInstrumentType("Share");
    order.setCurrency("USD");
    Calendar calendar=new GregorianCalendar();
    calendar.set(2009,7,1);
    order.setOrderDate(calendar.getTime());
    marshallResult.expectedMessageCount(1);
    marshallResult.expectedBodiesReceived(Arrays.asList(new String[]{TEST_RECORD}));
    template.sendBody(URI_DIRECT_MARSHALL,order);
    marshallResult.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    RouteBuilder routeBuilder=new RouteBuilder(){
      @Override public void configure() throws Exception {
        BindyDataFormat bindy=new BindyDataFormat();
        bindy.setLocale("en");
        bindy.setClassType(BindyFixedLengthDynamicFieldTest.Order.class);
        bindy.setType(BindyType.Fixed);
        from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT);
        from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed,BindyFixedLengthDynamicFieldTest.Order.class).to(URI_MOCK_UNMARSHALL_RESULT);
      }
    }
;
    return routeBuilder;
  }
@FixedLengthRecord() public static class Order {
    @DataField(pos=1,length=2) private int orderNr;
    @DataField(pos=2,length=2) private String clientNr;
    @DataField(pos=3,delimiter="^") private String firstName;
    @DataField(pos=4,delimiter="^") private String lastName;
    @DataField(pos=5,length=4) private String instrumentCode;
    @DataField(pos=6,length=2,align="R",paddingChar='0') private int instrumentNumberLen;
    @DataField(pos=7,length=10) private String instrumentNumber;
    @DataField(pos=8,length=3) private String orderType;
    @DataField(pos=9,length=5) private String instrumentType;
    @DataField(pos=10,precision=2,length=12,paddingChar='0') private BigDecimal amount;
    @DataField(pos=11,length=3) private String currency;
    @DataField(pos=12,length=10,pattern="dd-MM-yyyy") private Date orderDate;
    public int getOrderNr(){
      return orderNr;
    }
    public void setOrderNr(    int orderNr){
      this.orderNr=orderNr;
    }
    public String getClientNr(){
      return clientNr;
    }
    public void setClientNr(    String clientNr){
      this.clientNr=clientNr;
    }
    public String getFirstName(){
      return firstName;
    }
    public void setFirstName(    String firstName){
      this.firstName=firstName;
    }
    public String getLastName(){
      return lastName;
    }
    public void setLastName(    String lastName){
      this.lastName=lastName;
    }
    public String getInstrumentCode(){
      return instrumentCode;
    }
    public void setInstrumentCode(    String instrumentCode){
      this.instrumentCode=instrumentCode;
    }
    public void setInstrumentNumberLen(    int instrumentNumberLen){
      this.instrumentNumberLen=instrumentNumberLen;
    }
    public int getInstrumentNumberLen(){
      return instrumentNumberLen;
    }
    public String getInstrumentNumber(){
      return instrumentNumber;
    }
    public void setInstrumentNumber(    String instrumentNumber){
      this.instrumentNumber=instrumentNumber;
    }
    public String getOrderType(){
      return orderType;
    }
    public void setOrderType(    String orderType){
      this.orderType=orderType;
    }
    public String getInstrumentType(){
      return instrumentType;
    }
    public void setInstrumentType(    String instrumentType){
      this.instrumentType=instrumentType;
    }
    public BigDecimal getAmount(){
      return amount;
    }
    public void setAmount(    BigDecimal amount){
      this.amount=amount;
    }
    public String getCurrency(){
      return currency;
    }
    public void setCurrency(    String currency){
      this.currency=currency;
    }
    public Date getOrderDate(){
      return orderDate;
    }
    public void setOrderDate(    Date orderDate){
      this.orderDate=orderDate;
    }
    @Override public String toString(){
      return "Model : " + Order.class.getName() + " : "+ this.orderNr+ ", "+ this.orderType+ ", "+ String.valueOf(this.amount)+ ", "+ this.instrumentCode+ ", "+ this.instrumentNumber+ ", "+ this.instrumentType+ ", "+ this.currency+ ", "+ this.clientNr+ ", "+ this.firstName+ ", "+ this.lastName+ ", "+ String.valueOf(this.orderDate);
    }
  }
}
