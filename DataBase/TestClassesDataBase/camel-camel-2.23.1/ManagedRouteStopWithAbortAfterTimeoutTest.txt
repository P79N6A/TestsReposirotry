/** 
 * @version 
 */
public class ManagedRouteStopWithAbortAfterTimeoutTest extends ManagementTestSupport {
  @Test public void testStopRouteWithAbortAfterTimeoutTrue() throws Exception {
    if (isPlatform("aix") || isPlatform("windows")) {
      return;
    }
    MockEndpoint mockEP=getMockEndpoint("mock:result");
    mockEP.setExpectedMessageCount(10);
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=getRouteObjectName(mbeanServer);
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("route should be started",ServiceStatus.Started.name(),state);
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    Long timeout=new Long(1);
    Boolean abortAfterTimeout=Boolean.TRUE;
    Object[] params={timeout,abortAfterTimeout};
    String[] sig={"java.lang.Long","java.lang.Boolean"};
    Boolean stopRouteResponse=(Boolean)mbeanServer.invoke(on,"stop",params,sig);
    state=(String)mbeanServer.getAttribute(on,"State");
    assertFalse("stopRoute response should be False",stopRouteResponse);
    assertEquals("route should still be started",ServiceStatus.Started.name(),state);
    for (int i=5; i < 10; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    mockEP.assertIsSatisfied();
  }
  @Test public void testStopRouteWithAbortAfterTimeoutFalse() throws Exception {
    if (isPlatform("aix") || isPlatform("windows")) {
      return;
    }
    MockEndpoint mockEP=getMockEndpoint("mock:result");
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=getRouteObjectName(mbeanServer);
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("route should be started",ServiceStatus.Started.name(),state);
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    Long timeout=new Long(1);
    Boolean abortAfterTimeout=Boolean.FALSE;
    Object[] params={timeout,abortAfterTimeout};
    String[] sig={"java.lang.Long","java.lang.Boolean"};
    Boolean stopRouteResponse=(Boolean)mbeanServer.invoke(on,"stop",params,sig);
    state=(String)mbeanServer.getAttribute(on,"State");
    assertTrue("stopRoute response should be True",stopRouteResponse);
    assertEquals("route should be stopped",ServiceStatus.Stopped.name(),state);
    for (int i=5; i < 10; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    Thread.sleep(1000);
    assertTrue("Should not have received more than 5 messages",mockEP.getExchanges().size() <= 5);
  }
  static ObjectName getRouteObjectName(  MBeanServer mbeanServer) throws Exception {
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    return set.iterator().next();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getShutdownStrategy().setTimeout(3);
        from("seda:start").delay(100).to("mock:result");
      }
    }
;
  }
}
