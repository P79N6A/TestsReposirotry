public class ActiveMQPropagateSerializableHeadersTest extends CamelTestSupport {
  protected Object expectedBody="<time>" + new Date() + "</time>";
  protected ActiveMQQueue replyQueue=new ActiveMQQueue("test.reply.queue");
  protected String correlationID="ABC-123";
  protected String messageType=getClass().getName();
  private Calendar calValue;
  private Map<String,Object> mapValue;
  @Before public void setup(){
    calValue=Calendar.getInstance();
    mapValue=new LinkedHashMap<>();
    mapValue.put("myStringEntry","stringValue");
    mapValue.put("myCalEntry",Calendar.getInstance());
    mapValue.put("myIntEntry",123);
  }
  @Test public void testForwardingAMessageAcrossJMSKeepingCustomJMSHeaders() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedBodiesReceived(expectedBody);
    AssertionClause firstMessageExpectations=resultEndpoint.message(0);
    firstMessageExpectations.header("myCal").isEqualTo(calValue);
    firstMessageExpectations.header("myMap").isEqualTo(mapValue);
    template.sendBody("activemq:test.a",expectedBody);
    resultEndpoint.assertIsSatisfied();
    List<Exchange> list=resultEndpoint.getReceivedExchanges();
    Exchange exchange=list.get(0);
{
      String headerValue=exchange.getIn().getHeader("myString",String.class);
      assertEquals("myString","stringValue",headerValue);
    }
{
      Calendar headerValue=exchange.getIn().getHeader("myCal",Calendar.class);
      assertEquals("myCal",calValue,headerValue);
    }
{
      Map<String,Object> headerValue=exchange.getIn().getHeader("myMap",Map.class);
      assertEquals("myMap",mapValue,headerValue);
    }
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    camelContext.setMessageHistory(false);
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("activemq:test.a").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Message in=exchange.getIn();
            in.setHeader("myString","stringValue");
            in.setHeader("myMap",mapValue);
            in.setHeader("myCal",calValue);
          }
        }
).to("activemq:test.b?transferExchange=true&allowSerializedHeaders=true");
        from("activemq:test.b").to("mock:result");
      }
    }
;
  }
}
