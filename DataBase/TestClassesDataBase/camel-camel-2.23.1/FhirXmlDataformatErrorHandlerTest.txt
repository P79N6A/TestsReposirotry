public class FhirXmlDataformatErrorHandlerTest extends CamelTestSupport {
  private static final String INPUT="<Patient><active value=\"true\"/><active value=\"false\"/></Patient>";
  private MockEndpoint mockEndpoint;
  private final FhirContext fhirContext=FhirContext.forDstu3();
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    mockEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
  }
  @Test(expected=DataFormatException.class) public void unmarshalParserErrorHandler() throws Throwable {
    try {
      template.sendBody("direct:unmarshalErrorHandlerStrict",INPUT);
    }
 catch (    CamelExecutionException e) {
      throw e.getCause();
    }
  }
  @Test public void unmarshalLenientErrorHandler() throws Exception {
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:unmarshalErrorHandlerLenient",INPUT);
    mockEndpoint.assertIsSatisfied();
    Exchange exchange=mockEndpoint.getExchanges().get(0);
    Patient patient=(Patient)exchange.getIn().getBody();
    assertEquals(true,patient.getActive());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        FhirXmlDataFormat strickErrorHandlerDataformat=getStrictErrorHandlerDataFormat();
        FhirXmlDataFormat lenientErrorHandlerDataFormat=getLenientErrorHandlerDataFormat();
        from("direct:unmarshalErrorHandlerStrict").unmarshal(strickErrorHandlerDataformat).to("mock:errorIsThrown");
        from("direct:unmarshalErrorHandlerLenient").unmarshal(lenientErrorHandlerDataFormat).to("mock:result");
      }
      private FhirXmlDataFormat getStrictErrorHandlerDataFormat(){
        FhirXmlDataFormat fhirXmlDataFormat=new FhirXmlDataFormat();
        fhirXmlDataFormat.setFhirContext(fhirContext);
        IParserErrorHandler parserErrorHandler=new StrictErrorHandler();
        fhirXmlDataFormat.setParserErrorHandler(parserErrorHandler);
        return fhirXmlDataFormat;
      }
      private FhirXmlDataFormat getLenientErrorHandlerDataFormat(){
        FhirXmlDataFormat fhirXmlDataFormat=new FhirXmlDataFormat();
        fhirXmlDataFormat.setFhirContext(fhirContext);
        IParserErrorHandler parserErrorHandler=new LenientErrorHandler();
        fhirXmlDataFormat.setParserErrorHandler(parserErrorHandler);
        return fhirXmlDataFormat;
      }
    }
;
  }
}
