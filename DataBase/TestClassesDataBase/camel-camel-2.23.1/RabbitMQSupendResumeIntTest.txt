public class RabbitMQSupendResumeIntTest extends AbstractRabbitMQIntTest {
  private static final String EXCHANGE="ex6";
  @EndpointInject(uri="mock:result") private MockEndpoint resultEndpoint;
  @EndpointInject(uri="rabbitmq:localhost:5672/" + EXCHANGE + "?username=cameltest&password=cameltest&queue=q6&routingKey=rk3&autoDelete=false") private Endpoint rabbitMQEndpoint;
  @Produce(uri="direct:start") private ProducerTemplate template;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("producer").log("sending ${body}").to(rabbitMQEndpoint);
        from(rabbitMQEndpoint).routeId("consumer").log("got ${body}").to("mock:result");
      }
    }
;
  }
  @Test public void testSuspendedResume() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.expectedBodiesReceived("hello");
    template.sendBody("hello");
    assertMockEndpointsSatisfied();
    context.suspendRoute("consumer");
    Thread.sleep(2000);
    resetMocks();
    resultEndpoint.expectedMessageCount(0);
    template.sendBody("Hello2");
    assertMockEndpointsSatisfied(1,TimeUnit.SECONDS);
    resetMocks();
    resultEndpoint.expectedBodiesReceived("Hello2");
    resultEndpoint.expectedMessageCount(1);
    context.resumeRoute("consumer");
    assertMockEndpointsSatisfied();
  }
}
