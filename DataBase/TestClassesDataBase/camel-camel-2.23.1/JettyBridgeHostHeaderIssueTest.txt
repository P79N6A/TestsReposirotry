public class JettyBridgeHostHeaderIssueTest extends CamelTestSupport {
  private int port;
  private int port2;
  private int port3;
  private int port4;
  private int port5;
  private String receivedHostHeaderEndpoint1;
  private String receivedHostHeaderEndpoint2;
  private String receivedHostHeaderEndpoint3;
  private String receivedHostHeaderEndpoint4;
  @Test public void testHostHeader() throws Exception {
    Exchange reply=template.request("http4:localhost:" + port + "/myapp",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
      }
    }
);
    assertNotNull(reply);
    assertEquals("foo",reply.getOut().getBody(String.class));
    assertEquals("localhost:" + port,receivedHostHeaderEndpoint1);
    Exchange reply2=template.request("http4:localhost:" + port + "/myapp",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Bye World");
      }
    }
);
    assertNotNull(reply2);
    assertEquals("bar",reply2.getOut().getBody(String.class));
    assertEquals("localhost:" + port3,receivedHostHeaderEndpoint2);
    Exchange reply3=template.request("http4:localhost:" + port + "/myapp",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Bye JWorld");
      }
    }
);
    assertNotNull(reply3);
    assertEquals("jbar",reply3.getOut().getBody(String.class));
    assertEquals("localhost:" + port,receivedHostHeaderEndpoint3);
    Exchange reply4=template.request("http4:localhost:" + port + "/myapp",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("JAVA!!!!");
      }
    }
);
    assertNotNull(reply4);
    assertEquals("java???",reply4.getOut().getBody(String.class));
    assertEquals("localhost:" + port5,receivedHostHeaderEndpoint4);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    port=AvailablePortFinder.getNextAvailable(12000);
    port2=AvailablePortFinder.getNextAvailable(12100);
    port3=AvailablePortFinder.getNextAvailable(12200);
    port4=AvailablePortFinder.getNextAvailable(12300);
    port5=AvailablePortFinder.getNextAvailable(12400);
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jetty:http://localhost:" + port + "/myapp?matchOnUriPrefix=true").loadBalance().roundRobin().to("http4://localhost:" + port2 + "/foo?bridgeEndpoint=true&throwExceptionOnFailure=false&preserveHostHeader=true").to("http4://localhost:" + port3 + "/bar?bridgeEndpoint=true&throwExceptionOnFailure=false").to("jetty:http://localhost:" + port4 + "/jbar?bridgeEndpoint=true&throwExceptionOnFailure=false&preserveHostHeader=true").to("jetty:http://localhost:" + port5 + "/jbarf?bridgeEndpoint=true&throwExceptionOnFailure=false");
        from("jetty:http://localhost:" + port2 + "/foo").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            receivedHostHeaderEndpoint1=exchange.getIn().getHeader("Host",String.class);
          }
        }
).transform().constant("foo");
        from("jetty:http://localhost:" + port3 + "/bar").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            receivedHostHeaderEndpoint2=exchange.getIn().getHeader("Host",String.class);
          }
        }
).transform().constant("bar");
        from("jetty:http://localhost:" + port4 + "/jbar").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            receivedHostHeaderEndpoint3=exchange.getIn().getHeader("Host",String.class);
          }
        }
).transform().constant("jbar");
        from("jetty:http://localhost:" + port5 + "/jbarf").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            receivedHostHeaderEndpoint4=exchange.getIn().getHeader("Host",String.class);
          }
        }
).transform().constant("java???");
      }
    }
;
  }
}
