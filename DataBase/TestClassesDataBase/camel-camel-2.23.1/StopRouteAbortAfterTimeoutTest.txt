public class StopRouteAbortAfterTimeoutTest extends ContextTestSupport {
  @Test public void testStopRouteWithAbortAfterTimeoutTrue() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mockEP=getMockEndpoint("mock:result");
    mockEP.setExpectedMessageCount(10);
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    boolean stopRouteResponse=context.stopRoute("start",1,TimeUnit.SECONDS,true);
    assertFalse("stopRoute response should be False",stopRouteResponse);
    assertEquals("route should still be started",true,context.getRouteStatus("start").isStarted());
    for (int i=5; i < 10; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    mockEP.assertIsSatisfied();
  }
  @Test public void testStopRouteWithAbortAfterTimeoutFalse() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mockEP=getMockEndpoint("mock:result");
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    boolean stopRouteResponse=context.stopRoute("start",1,TimeUnit.SECONDS,false);
    assertTrue("stopRoute response should be True",stopRouteResponse);
    assertEquals("route should be stopped",true,context.getRouteStatus("start").isStopped());
    int before=mockEP.getExchanges().size();
    for (int i=5; i < 10; i++) {
      template.sendBody("seda:start","message-" + i);
    }
    int after=mockEP.getExchanges().size();
    assertEquals("Should not route messages",before,after);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getShutdownStrategy().setTimeout(3);
        from("seda:start").routeId("start").delay(100).to("mock:result");
      }
    }
;
  }
}
