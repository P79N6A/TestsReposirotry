/** 
 * @version 
 */
public class BeanWithHeadersAndBodyInjectionTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanRouteTest.class);
  protected MyBean myBean=new MyBean();
  @Test public void testSendMessage() throws Exception {
    template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty("p1","abc");
        exchange.setProperty("p2",123);
        Message in=exchange.getIn();
        in.setHeader("h1","xyz");
        in.setHeader("h2",456);
        in.setBody("TheBody");
      }
    }
);
    Map<String,Object> foo=myBean.headers;
    assertNotNull("myBean.foo",foo);
    assertEquals("foo.h1","xyz",foo.get("h1"));
    assertEquals("foo.h2",456,foo.get("h2"));
    assertEquals("body","TheBody",myBean.body);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").to("bean:myBean?method=myMethod");
      }
    }
;
  }
public static class MyBean {
    public Map<String,Object> headers;
    public Object body;
    @Override public String toString(){
      return "MyBean[foo: " + headers + " body: "+ body+ "]";
    }
    public void myMethod(    @Headers Map<String,Object> headers,    Object body){
      this.headers=headers;
      this.body=body;
      LOG.info("myMethod() method called on " + this);
    }
    public void anotherMethod(    @Headers Map<String,Object> headers,    Object body){
      fail("Should not have called this method!");
    }
  }
}
