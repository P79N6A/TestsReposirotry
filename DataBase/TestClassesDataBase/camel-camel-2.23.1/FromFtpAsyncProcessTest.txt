/** 
 */
public class FromFtpAsyncProcessTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/async/?password=admin&delete=true";
  }
  @Test public void testFtpAsyncProcess() throws Exception {
    template.sendBodyAndHeader("file:" + FTP_ROOT_DIR + "/async","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:" + FTP_ROOT_DIR + "/async","Bye World",Exchange.FILE_NAME,"bye.txt");
    getMockEndpoint("mock:result").expectedMessageCount(2);
    getMockEndpoint("mock:result").expectedHeaderReceived("foo",123);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    Thread.sleep(1000);
    File hello=new File(FTP_ROOT_DIR + "/async/hello.txt");
    assertFalse("File should not exist " + hello,hello.exists());
    File bye=new File(FTP_ROOT_DIR + "/async/bye.txt");
    assertFalse("File should not exist " + bye,bye.exists());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).routeId("foo").noAutoStartup().process(new MyAsyncProcessor()).to("mock:result");
      }
    }
;
  }
private class MyAsyncProcessor implements AsyncProcessor {
    private ExecutorService executor=Executors.newSingleThreadExecutor();
    @Override public boolean process(    final Exchange exchange,    final AsyncCallback callback){
      executor.submit(new Runnable(){
        @Override public void run(){
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
          }
          exchange.getIn().setHeader("foo",123);
          callback.done(false);
        }
      }
);
      return false;
    }
    @Override public void process(    Exchange exchange) throws Exception {
    }
  }
}
