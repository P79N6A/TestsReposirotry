/** 
 * @version 
 */
public class JmsRouteUsingJMSXGroupTest extends CamelTestSupport {
  @Test public void testNoConcurrentProducersJMSXGroupID() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducersJMSXGroupID() throws Exception {
    doSendMessages(10,1);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files * 2);
    getMockEndpoint("mock:result").expectsNoDuplicates(body());
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    for (int i=0; i < files; i++) {
      final int index=i;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          template.sendBodyAndHeader("direct:start","IBM: " + index,JMS_X_GROUP_ID,"IBM");
          template.sendBodyAndHeader("direct:start","SUN: " + index,JMS_X_GROUP_ID,"SUN");
          return null;
        }
      }
);
    }
    assertMockEndpointsSatisfied();
    executor.shutdownNow();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("jms",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("jms:queue:foo");
        from("jms:queue:foo?concurrentConsumers=2").to("log:foo?showHeaders=false").to("mock:result");
      }
    }
;
  }
}
