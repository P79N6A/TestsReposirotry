/** 
 * Unit test to verify remotefile sortby option.
 */
public class FromFtpRemoteFileSortByExpressionTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/sortby?password=admin&consumer.delay=5000";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testSortFiles() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl() + "&sortBy=file:ext").to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Paris","Hello London","Hello Copenhagen");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSortFilesReverse() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl() + "&sortBy=reverse:file:ext").to("mock:reverse");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedBodiesReceived("Hello Copenhagen","Hello London","Hello Paris");
    assertMockEndpointsSatisfied();
  }
  private void prepareFtpServer() throws Exception {
    sendFile(getFtpUrl(),"Hello Paris","paris.dat");
    sendFile(getFtpUrl(),"Hello London","london.txt");
    sendFile(getFtpUrl(),"Hello Copenhagen","copenhagen.xml");
  }
}
