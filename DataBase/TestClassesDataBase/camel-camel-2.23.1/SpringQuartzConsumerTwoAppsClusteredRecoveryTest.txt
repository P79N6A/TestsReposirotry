/** 
 * Tests a Quartz based cluster setup of two Camel Apps being triggered through with recoverableJob option is true  {@link QuartzConsumer}.
 */
public class SpringQuartzConsumerTwoAppsClusteredRecoveryTest extends TestSupport {
  @Test public void testQuartzPersistentStoreClusteredApp() throws Exception {
    AbstractXmlApplicationContext db=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml");
    AbstractXmlApplicationContext app=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppOne.xml");
    log.warn("The first app is going to crash NOW!");
    IOHelper.close(app);
    log.warn("Crashed...");
    log.warn("Crashed...");
    log.warn("Crashed...");
    Thread.sleep(2000);
    AbstractXmlApplicationContext app2=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppTwo.xml");
    app2.start();
    Thread.sleep(20000);
    CamelContext camel2=app2.getBean("camelContext2",CamelContext.class);
    MockEndpoint mock2=camel2.getEndpoint("mock:result",MockEndpoint.class);
    mock2.expectedMinimumMessageCount(2);
    mock2.expectedMessagesMatches(new ClusteringPredicate(false));
    mock2.assertIsSatisfied();
    IOHelper.close(app2,db);
  }
private static class ClusteringPredicate implements Predicate {
    private final String expectedPayload;
    ClusteringPredicate(    boolean pings){
      expectedPayload=pings ? "clustering PINGS!" : "clustering PONGS!";
    }
    @Override public boolean matches(    Exchange exchange){
      return exchange.getIn().getBody().equals(expectedPayload);
    }
  }
public static class MyProcessor implements Processor, ApplicationContextAware {
    ApplicationContext applicationContext;
    @Override public void process(    Exchange exchange) throws Exception {
      ((AbstractXmlApplicationContext)applicationContext).close();
    }
    @Override public void setApplicationContext(    ApplicationContext applicationContext) throws BeansException {
      this.applicationContext=applicationContext;
    }
  }
}
