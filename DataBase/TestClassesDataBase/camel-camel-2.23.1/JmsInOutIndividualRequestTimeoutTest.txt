/** 
 */
public class JmsInOutIndividualRequestTimeoutTest extends CamelTestSupport {
  protected String componentName="activemq";
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String out=template.requestBody("direct:start","Camel",String.class);
    assertEquals("Bye Camel",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTimeout() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.requestBodyAndHeader("direct:start","World",JmsConstants.JMS_REQUEST_TIMEOUT,1500L,String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ExchangeTimedOutException timeout=assertIsInstanceOf(ExchangeTimedOutException.class,e.getCause());
      assertEquals(1500,timeout.getTimeout());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testIndividualTimeout() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    String out=template.requestBodyAndHeader("direct:start","World",JmsConstants.JMS_REQUEST_TIMEOUT,8000L,String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").inOut("activemq:queue:foo?replyTo=queue:bar&requestTimeout=2000").to("mock:result");
        from("activemq:queue:foo").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("World".equals(body)) {
              log.debug("Sleeping for 4 sec to force a timeout");
              Thread.sleep(4000);
            }
          }
        }
).transform(body().prepend("Bye ")).to("log:reply");
      }
    }
;
  }
}
