/** 
 * @version 
 */
public class AuditInterceptorDelegateIssueTest extends ContextTestSupport {
  private MyIntercepStrategy strategy;
  @Override @Before public void setUp() throws Exception {
    strategy=new MyIntercepStrategy();
    super.setUp();
  }
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:handled").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(true,strategy.isInvoked());
  }
  @Test public void testILE() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    template.sendBody("direct:iae","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(true,strategy.isInvoked());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().addInterceptStrategy(strategy);
        onException(IllegalArgumentException.class).handled(true).to("mock:handled");
        errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(1));
        from("direct:start").to("mock:result");
        from("direct:iae").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
private static final class MyIntercepStrategy implements InterceptStrategy {
    private volatile boolean invoked;
    public Processor wrapProcessorInInterceptors(    CamelContext context,    ProcessorDefinition<?> definition,    Processor target,    Processor nextTarget) throws Exception {
      return new DelegateProcessor(target){
        protected void processNext(        Exchange exchange) throws Exception {
          invoked=true;
          super.processNext(exchange);
        }
      }
;
    }
    public boolean isInvoked(){
      return invoked;
    }
  }
}
