/** 
 * @version 
 */
public class TraceInterceptorDestinationTest extends ContextTestSupport {
  private List<String> tracedBodies=new ArrayList<>();
  private List<String> tracedHeaders=new ArrayList<>();
  @Test public void testSendingSomeMessagesBeingTraced() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Bye World","Foo World","Foo World");
    MockEndpoint mock=getMockEndpoint("mock:traced");
    mock.expectedMessageCount(8);
    mock.message(0).body().regex("^direct://start;.*;.*;Hello London");
    mock.message(1).body().regex("^direct://start;.*;.*;Hello World");
    mock.message(2).body().regex("^direct://start;.*;.*;Goodday World");
    mock.message(3).body().regex("^direct://start;.*;.*;Bye World");
    mock.message(4).body().regex("^direct://foo;.*;.*;Hello Copenhagen");
    mock.message(5).body().regex("^direct://foo;.*;.*;Foo World");
    mock.message(6).body().regex("^direct://foo;.*;.*;Hello Beijing");
    mock.message(7).body().regex("^direct://foo;.*;.*;Foo World");
    template.sendBodyAndHeader("direct:start","Hello London","to","James");
    template.sendBody("direct:foo","Hello Copenhagen");
    template.sendBody("direct:foo","Hello Beijing");
    assertMockEndpointsSatisfied();
    assertEquals("Hello London",tracedBodies.get(0));
    assertEquals("Hello World",tracedBodies.get(1));
    assertEquals("Goodday World",tracedBodies.get(2));
    assertEquals("Bye World",tracedBodies.get(3));
    assertEquals("Hello Copenhagen",tracedBodies.get(4));
    assertEquals("Foo World",tracedBodies.get(5));
    assertEquals("Hello Beijing",tracedBodies.get(6));
    assertEquals("Foo World",tracedBodies.get(7));
    assertTrue(tracedHeaders.get(0),tracedHeaders.get(0).contains("to=James"));
    assertTrue(tracedHeaders.get(1),tracedHeaders.get(1).contains("to=Hello"));
    assertTrue(tracedHeaders.get(2),tracedHeaders.get(2).contains("to=Goodday"));
    assertTrue(tracedHeaders.get(3),tracedHeaders.get(3).contains("to=Bye"));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        Tracer tracer=new Tracer();
        tracer.setDestinationUri("direct:traced");
        tracer.setLogLevel(LoggingLevel.OFF);
        getContext().addInterceptStrategy(tracer);
        from("direct:start").process(new MyProcessor("Hello World")).process(new MyProcessor("Goodday World")).process(new MyProcessor("Bye World")).to("mock:result");
        from("direct:foo").process(new MyProcessor("Foo World")).to("mock:result");
        from("direct:traced").process(new MyTraveAssertProcessor()).process(new MyTraceMessageProcessor()).to("mock:traced");
      }
    }
;
  }
class MyProcessor implements Processor {
    private String msg;
    MyProcessor(    String msg){
      this.msg=msg;
    }
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setBody(msg);
      exchange.getIn().setHeader("to",msg.split(" ")[0]);
    }
  }
class MyTraveAssertProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String nodeId=exchange.getProperty(Exchange.TRACE_EVENT_NODE_ID,String.class);
      Date timestamp=exchange.getProperty(Exchange.TRACE_EVENT_TIMESTAMP,Date.class);
      assertNotNull(nodeId);
      assertNotNull(timestamp);
      TraceEventMessage msg=exchange.getIn().getBody(DefaultTraceEventMessage.class);
      tracedBodies.add(msg.getBody());
      if (msg.getHeaders() != null) {
        tracedHeaders.add(msg.getHeaders());
      }
    }
  }
class MyTraceMessageProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      TraceEventMessage msg=exchange.getIn().getBody(DefaultTraceEventMessage.class);
      String s=msg.getFromEndpointUri() + ";" + msg.getToNode()+ ";"+ msg.getExchangeId()+ ";"+ msg.getBody();
      exchange.getIn().setBody(s);
    }
  }
}
