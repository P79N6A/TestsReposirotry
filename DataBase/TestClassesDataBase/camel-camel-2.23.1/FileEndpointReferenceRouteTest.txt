public class FileEndpointReferenceRouteTest extends Assert {
public static class RouteInstaller extends RouteBuilder {
    public void configure() throws Exception {
      includeRoutes(new MyConfigurableRoute(endpoint("file://src/test/resources?noop=true&filter=#fileFilter"),endpoint("direct:b")));
    }
  }
public static class MyFileFilter<T> implements GenericFileFilter<T> {
    public boolean accept(    GenericFile<T> file){
      return file.getFileName().startsWith("report");
    }
  }
public static class MyModule extends CamelModuleWithRouteTypes {
    @SuppressWarnings("unchecked") public MyModule(){
      super(RouteInstaller.class);
    }
    @Provides @JndiBind("fileFilter") public GenericFileFilter<?> getfileFilter(){
      return new MyFileFilter<>();
    }
  }
  public static void assertCamelContextRunningThenCloseInjector(  Injector injector) throws Exception {
    CamelContext camelContext=injector.getInstance(CamelContext.class);
    org.hamcrest.MatcherAssert.assertThat(camelContext,org.hamcrest.Matchers.is(GuiceCamelContext.class));
    GuiceCamelContext guiceContext=(GuiceCamelContext)camelContext;
    assertTrue("is started!",guiceContext.isStarted());
    Thread.sleep(1000);
    Injectors.close(injector);
  }
  @Test public void runTest() throws Exception {
    Hashtable<String,Object> env=new Hashtable<>();
    env.put(Context.PROVIDER_URL,GuiceInitialContextFactory.class.getName());
    env.put(Injectors.MODULE_CLASS_NAMES,MyModule.class.getName());
    InitialContext context=new InitialContext(env);
    Injector injector=(Injector)context.lookup(Injector.class.getName());
    assertNotNull("Found injector",injector);
    Object value=context.lookup("fileFilter");
    assertNotNull("Should have found a value for foo!",value);
    assertCamelContextRunningThenCloseInjector(injector);
  }
}
