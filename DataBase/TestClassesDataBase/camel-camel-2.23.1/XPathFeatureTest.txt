public class XPathFeatureTest extends ContextTestSupport {
  public static final String DOM_BUILDER_FACTORY_FEATURE=XmlConverter.DOCUMENT_BUILDER_FACTORY_FEATURE;
  public static final String XML_DATA=" <!DOCTYPE foo [ " + " <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///bin/test.sh\" >]> <test> &xxe; </test>";
  public static final String XML_DATA_INVALID=" <!DOCTYPE foo [ " + " <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///bin/test.sh\" >]> <test> &xxe; </test><notwellformed>";
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testXPathResult() throws Exception {
    String result=(String)xpath("/").stringResult().evaluate(createExchange(XML_DATA));
    assertEquals("Get a wrong result","  ",result);
  }
  @Test public void testXPath() throws Exception {
    System.setProperty(DOM_BUILDER_FACTORY_FEATURE + ":" + "http://xml.org/sax/features/external-general-entities","true");
    try {
      xpath("/").stringResult().evaluate(createExchange(XML_DATA));
      fail("Expect an Exception here");
    }
 catch (    TypeConversionException ex) {
      assertTrue("Get a wrong exception cause.",ex.getCause() instanceof RuntimeCamelException);
      assertTrue("Get a wrong exception cause.",ex.getCause().getCause() instanceof FileNotFoundException);
    }
 finally {
      System.clearProperty(DOM_BUILDER_FACTORY_FEATURE + ":" + "http://xml.org/sax/features/external-general-entities");
    }
  }
  @Test public void testXPathNoTypeConverter() throws Exception {
    try {
      xpath("/").documentType(Exchange.class).stringResult().evaluate(createExchange(XML_DATA));
      fail("Expect an Exception here");
    }
 catch (    RuntimeCamelException ex) {
      assertTrue("Get a wrong exception cause.",ex.getCause() instanceof NoTypeConversionAvailableException);
    }
  }
  @Test public void testXPathResultOnInvalidData() throws Exception {
    try {
      xpath("/").stringResult().evaluate(createExchange(XML_DATA_INVALID));
      fail("Expect an Exception here");
    }
 catch (    TypeConversionException ex) {
      assertTrue("Get a wrong exception cause.",ex.getCause() instanceof RuntimeCamelException);
      assertTrue("Get a wrong exception cause.",ex.getCause().getCause() instanceof SAXParseException);
    }
  }
  protected Exchange createExchange(  Object xml){
    Exchange exchange=createExchangeWithBody(context,xml);
    return exchange;
  }
}
