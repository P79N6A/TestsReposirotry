/** 
 */
public class RecordableReaderTest extends Assert {
  private static final byte[] DATA;
static {
    DATA=new byte[512];
    final int radix=0x7f - 0x20;
    for (int i=0; i < 512; i++) {
      DATA[i]=(byte)(i % radix + 0x20);
    }
  }
  @Test public void testReadAndGetTextsBufferPurge() throws Exception {
    RecordableInputStream ris=new RecordableInputStream(new ByteArrayInputStream(DATA),"utf-8");
    assertEquals(0,ris.size());
    byte[] buf=new byte[64];
    for (int i=0; i < 8; i++) {
      int n=ris.read(buf,0,buf.length);
      assertEquals(64,n);
      assertEquals(64,ris.size());
      int offset=i * 64;
      String text=ris.getText(32);
      assertEquals(new String(DATA,offset,32,"utf-8"),text);
      assertEquals(32,ris.size());
      text=ris.getText(32);
      assertEquals(new String(DATA,offset + 32,32,"utf-8"),text);
      assertEquals(0,ris.size());
      ris.record();
    }
    ris.close();
  }
  @Test public void testReadAndGetTextsAutoStopRecord() throws Exception {
    RecordableInputStream ris=new RecordableInputStream(new ByteArrayInputStream(DATA),"utf-8");
    assertEquals(0,ris.size());
    byte[] buf=new byte[64];
    int n=ris.read(buf,0,buf.length);
    assertEquals(64,n);
    assertEquals(64,ris.size());
    String text=ris.getText(64);
    assertEquals(new String(DATA,0,64,"utf-8"),text);
    assertEquals(0,ris.size());
    n=ris.read(buf,0,buf.length);
    assertEquals(64,n);
    assertEquals(0,ris.size());
    ris.record();
    n=ris.read(buf,0,buf.length);
    assertEquals(64,n);
    assertEquals(64,ris.size());
    text=ris.getText(64);
    assertEquals(new String(DATA,128,64,"utf-8"),text);
    assertEquals(0,ris.size());
    ris.close();
  }
}
