public class HttpMethodsHelperTest {
  @Test public void createMethodAlwaysUseUserChoosenMethod() throws URISyntaxException {
    HttpMethods method=HttpHelper.createMethod(createExchangeWithOptionalHttpQueryAndHttpMethodHeader("q=camel",HttpMethods.POST),createHttpEndpoint(true,"http://www.google.com/search"),false);
    assertEquals(HttpMethods.POST,method);
  }
  @Test public void createMethodUseGETIfQueryIsProvidedInHeader() throws URISyntaxException {
    HttpMethods method=HttpHelper.createMethod(createExchangeWithOptionalHttpQueryAndHttpMethodHeader("q=camel",null),createHttpEndpoint(true,"http://www.google.com/search"),false);
    assertEquals(HttpMethods.GET,method);
  }
  @Test public void createMethodUseGETIfQueryIsProvidedInEndpointURI() throws URISyntaxException {
    HttpMethods method=HttpHelper.createMethod(createExchangeWithOptionalHttpQueryAndHttpMethodHeader(null,null),createHttpEndpoint(true,"http://www.google.com/search?q=test"),false);
    assertEquals(HttpMethods.GET,method);
  }
  @Test public void createMethodUseGETIfNoneQueryOrPayloadIsProvided() throws URISyntaxException {
    HttpMethods method=HttpHelper.createMethod(createExchangeWithOptionalHttpQueryAndHttpMethodHeader(null,null),createHttpEndpoint(true,"http://www.google.com/search"),false);
    assertEquals(HttpMethods.GET,method);
  }
  @Test public void createMethodUsePOSTIfNoneQueryButPayloadIsProvided() throws URISyntaxException {
    HttpMethods method=HttpHelper.createMethod(createExchangeWithOptionalHttpQueryAndHttpMethodHeader(null,null),createHttpEndpoint(true,"http://www.google.com/search"),true);
    assertEquals(HttpMethods.POST,method);
  }
  private Exchange createExchangeWithOptionalHttpQueryAndHttpMethodHeader(  String httpQuery,  HttpMethods httpMethod){
    CamelContext context=new DefaultCamelContext();
    Exchange exchange=new DefaultExchange(context);
    Message inMsg=exchange.getIn();
    if (httpQuery != null) {
      inMsg.setHeader(Exchange.HTTP_QUERY,httpQuery);
    }
    if (httpMethod != null) {
      inMsg.setHeader(Exchange.HTTP_METHOD,httpMethod);
    }
    return exchange;
  }
  private HttpEndpoint createHttpEndpoint(  boolean bridgeEndpoint,  String endpointURI) throws URISyntaxException {
    HttpEndpoint endpoint=new HttpEndpoint();
    endpoint.setBridgeEndpoint(bridgeEndpoint);
    if (endpointURI != null) {
      endpoint.setHttpUri(new URI(endpointURI));
    }
    return endpoint;
  }
}
