public class ScanCommandTest {
  private ScanCommand command;
  private AmazonDDBClientMock ddbClient;
  private DdbConfiguration configuration;
  private Exchange exchange;
  @Before public void setUp(){
    ddbClient=new AmazonDDBClientMock();
    configuration=new DdbConfiguration();
    configuration.setTableName("DOMAIN1");
    exchange=new DefaultExchange(new DefaultCamelContext());
    command=new ScanCommand(ddbClient,configuration,exchange);
  }
  @Test public void execute(){
    Map<String,Condition> scanFilter=new HashMap<>();
    Condition condition=new Condition().withComparisonOperator(ComparisonOperator.GT.toString()).withAttributeValueList(new AttributeValue().withN("1985"));
    scanFilter.put("year",condition);
    exchange.getIn().setHeader(DdbConstants.SCAN_FILTER,scanFilter);
    command.execute();
    Map<String,AttributeValue> mapAssert=new HashMap<>();
    mapAssert.put("1",new AttributeValue("LAST_KEY"));
    ConsumedCapacity consumed=(ConsumedCapacity)exchange.getIn().getHeader(DdbConstants.CONSUMED_CAPACITY);
    assertEquals(scanFilter,ddbClient.scanRequest.getScanFilter());
    assertEquals(Integer.valueOf(10),exchange.getIn().getHeader(DdbConstants.SCANNED_COUNT,Integer.class));
    assertEquals(Integer.valueOf(1),exchange.getIn().getHeader(DdbConstants.COUNT,Integer.class));
    assertEquals(Double.valueOf(1.0),consumed.getCapacityUnits());
    assertEquals(mapAssert,exchange.getIn().getHeader(DdbConstants.LAST_EVALUATED_KEY,Map.class));
    Map<?,?> items=(Map<?,?>)exchange.getIn().getHeader(DdbConstants.ITEMS,List.class).get(0);
    assertEquals(new AttributeValue("attrValue"),items.get("attrName"));
  }
}
