/** 
 * CAMEL-6455
 */
public class BeanMethodWithEmptyParameterAndNoMethodWithNoParameterIssueTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyBean());
    jndi.bind("myOtherBean",new MyOtherBean());
    return jndi;
  }
  @Test public void testBean() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Camel");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      MethodNotFoundException cause=assertIsInstanceOf(MethodNotFoundException.class,e.getCause());
      assertEquals("doSomething()",cause.getMethodName());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testOtherBean() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:other","Camel");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      MethodNotFoundException cause=assertIsInstanceOf(MethodNotFoundException.class,e.getCause());
      assertEquals("doSomething()",cause.getMethodName());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean?method=doSomething()").to("mock:result");
        from("direct:other").to("bean:myOtherBean?method=doSomething()").to("mock:result");
      }
    }
;
  }
public static final class MyBean {
    public static void doSomething(    Exchange exchange){
      exchange.getIn().setHeader("foo","bar");
    }
  }
public static final class MyOtherBean {
    public static void doSomething(    Exchange exchange){
      exchange.getIn().setHeader("foo","bar");
    }
    public static void doSomething(    Exchange exchange,    String foo,    String bar){
      exchange.getIn().setHeader(foo,bar);
    }
  }
}
