/** 
 * @version 
 */
public class ExchangeHelperTest extends ContextTestSupport {
  protected Exchange exchange;
  @Test public void testValidProperty() throws Exception {
    String value=ExchangeHelper.getMandatoryProperty(exchange,"foo",String.class);
    assertEquals("foo property","123",value);
  }
  @Test public void testMissingProperty() throws Exception {
    try {
      String value=ExchangeHelper.getMandatoryProperty(exchange,"bar",String.class);
      fail("Should have failed but got: " + value);
    }
 catch (    NoSuchPropertyException e) {
      assertEquals("bar",e.getPropertyName());
    }
  }
  @Test public void testPropertyOfIncompatibleType() throws Exception {
    try {
      List<?> value=ExchangeHelper.getMandatoryProperty(exchange,"foo",List.class);
      fail("Should have failed but got: " + value);
    }
 catch (    NoSuchPropertyException e) {
      assertEquals("foo",e.getPropertyName());
    }
  }
  @Test public void testMissingHeader() throws Exception {
    try {
      String value=ExchangeHelper.getMandatoryHeader(exchange,"unknown",String.class);
      fail("Should have failed but got: " + value);
    }
 catch (    NoSuchHeaderException e) {
      assertEquals("unknown",e.getHeaderName());
    }
  }
  @Test public void testHeaderOfIncompatibleType() throws Exception {
    exchange.getIn().setHeader("foo",123);
    try {
      List<?> value=ExchangeHelper.getMandatoryHeader(exchange,"foo",List.class);
      fail("Should have failed but got: " + value);
    }
 catch (    NoSuchHeaderException e) {
      assertEquals("foo",e.getHeaderName());
    }
  }
  @Test public void testNoSuchBean() throws Exception {
    try {
      ExchangeHelper.lookupMandatoryBean(exchange,"foo");
      fail("Should have thrown an exception");
    }
 catch (    NoSuchBeanException e) {
      assertEquals("No bean could be found in the registry for: foo",e.getMessage());
      assertEquals("foo",e.getName());
    }
  }
  @Test public void testNoSuchBeanType() throws Exception {
    try {
      ExchangeHelper.lookupMandatoryBean(exchange,"foo",String.class);
      fail("Should have thrown an exception");
    }
 catch (    NoSuchBeanException e) {
      assertEquals("No bean could be found in the registry for: foo",e.getMessage());
      assertEquals("foo",e.getName());
    }
  }
  @Test public void testGetExchangeById() throws Exception {
    List<Exchange> list=new ArrayList<>();
    Exchange e1=context.getEndpoint("mock:foo").createExchange();
    Exchange e2=context.getEndpoint("mock:foo").createExchange();
    list.add(e1);
    list.add(e2);
    assertNull(ExchangeHelper.getExchangeById(list,"unknown"));
    assertEquals(e1,ExchangeHelper.getExchangeById(list,e1.getExchangeId()));
    assertEquals(e2,ExchangeHelper.getExchangeById(list,e2.getExchangeId()));
  }
  @Test public void testPopulateVariableMap() throws Exception {
    exchange.setPattern(ExchangePattern.InOut);
    exchange.getOut().setBody("bar");
    exchange.getOut().setHeader("quote","Camel rocks");
    Map<String,Object> map=new HashMap<>();
    ExchangeHelper.populateVariableMap(exchange,map);
    assertEquals(8,map.size());
    assertSame(exchange,map.get("exchange"));
    assertSame(exchange.getIn(),map.get("in"));
    assertSame(exchange.getIn(),map.get("request"));
    assertSame(exchange.getOut(),map.get("out"));
    assertSame(exchange.getOut(),map.get("response"));
    assertSame(exchange.getIn().getHeaders(),map.get("headers"));
    assertSame(exchange.getIn().getBody(),map.get("body"));
    assertSame(exchange.getContext(),map.get("camelContext"));
  }
  @Test public void testCreateVariableMap() throws Exception {
    exchange.setPattern(ExchangePattern.InOut);
    exchange.getOut().setBody("bar");
    exchange.getOut().setHeader("quote","Camel rocks");
    Map<?,?> map=ExchangeHelper.createVariableMap(exchange);
    assertEquals(8,map.size());
    assertSame(exchange,map.get("exchange"));
    assertSame(exchange.getIn(),map.get("in"));
    assertSame(exchange.getIn(),map.get("request"));
    assertSame(exchange.getOut(),map.get("out"));
    assertSame(exchange.getOut(),map.get("response"));
    assertSame(exchange.getIn().getHeaders(),map.get("headers"));
    assertSame(exchange.getIn().getBody(),map.get("body"));
    assertSame(exchange.getContext(),map.get("camelContext"));
  }
  @Test public void testCreateVariableMapNoExistingOut() throws Exception {
    exchange.setPattern(ExchangePattern.InOut);
    exchange.getIn().setBody("bar");
    exchange.getIn().setHeader("quote","Camel rocks");
    assertFalse(exchange.hasOut());
    Map<?,?> map=ExchangeHelper.createVariableMap(exchange);
    assertEquals(8,map.size());
    assertSame(exchange,map.get("exchange"));
    assertSame(exchange.getIn(),map.get("in"));
    assertSame(exchange.getIn(),map.get("request"));
    assertSame(exchange.getIn(),map.get("out"));
    assertSame(exchange.getIn(),map.get("response"));
    assertSame(exchange.getIn().getHeaders(),map.get("headers"));
    assertSame(exchange.getIn().getBody(),map.get("body"));
    assertSame(exchange.getContext(),map.get("camelContext"));
    assertFalse(exchange.hasOut());
  }
  @Test public void testGetContentType() throws Exception {
    exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"text/xml");
    assertEquals("text/xml",ExchangeHelper.getContentType(exchange));
  }
  @Test public void testGetContentEncoding() throws Exception {
    exchange.getIn().setHeader(Exchange.CONTENT_ENCODING,"iso-8859-1");
    assertEquals("iso-8859-1",ExchangeHelper.getContentEncoding(exchange));
  }
  @Test public void testIsStreamCaching() throws Exception {
    assertFalse(ExchangeHelper.isStreamCachingEnabled(exchange));
    exchange.getContext().getStreamCachingStrategy().setEnabled(true);
    assertTrue(ExchangeHelper.isStreamCachingEnabled(exchange));
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    exchange=new DefaultExchange(new DefaultCamelContext());
    exchange.setProperty("foo",123);
  }
}
