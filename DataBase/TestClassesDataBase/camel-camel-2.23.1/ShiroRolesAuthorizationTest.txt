public class ShiroRolesAuthorizationTest extends CamelTestSupport {
  @EndpointInject(uri="mock:success") protected MockEndpoint successEndpoint;
  @EndpointInject(uri="mock:authorizationException") protected MockEndpoint failureEndpoint;
  private byte[] passPhrase={(byte)0x08,(byte)0x09,(byte)0x0A,(byte)0x0B,(byte)0x0C,(byte)0x0D,(byte)0x0E,(byte)0x0F,(byte)0x10,(byte)0x11,(byte)0x12,(byte)0x13,(byte)0x14,(byte)0x15,(byte)0x16,(byte)0x17};
  @Test public void testShiroAuthorizationFailure() throws Exception {
    ShiroSecurityToken shiroSecurityToken=new ShiroSecurityToken("ringo","starr");
    TestShiroSecurityTokenInjector shiroSecurityTokenInjector=new TestShiroSecurityTokenInjector(shiroSecurityToken,passPhrase);
    successEndpoint.expectedMessageCount(0);
    failureEndpoint.expectedMessageCount(1);
    template.send("direct:secureEndpoint",shiroSecurityTokenInjector);
    successEndpoint.assertIsSatisfied();
    failureEndpoint.assertIsSatisfied();
  }
  @Test public void testSuccessfulAuthorization() throws Exception {
    ShiroSecurityToken shiroSecurityToken=new ShiroSecurityToken("george","harrison");
    TestShiroSecurityTokenInjector shiroSecurityTokenInjector=new TestShiroSecurityTokenInjector(shiroSecurityToken,passPhrase);
    successEndpoint.expectedMessageCount(1);
    failureEndpoint.expectedMessageCount(0);
    template.send("direct:secureEndpoint",shiroSecurityTokenInjector);
    successEndpoint.assertIsSatisfied();
    failureEndpoint.assertIsSatisfied();
  }
  @Test public void testSuccessfulAuthorizationForHigherScope() throws Exception {
    ShiroSecurityToken shiroSecurityToken=new ShiroSecurityToken("john","lennon");
    TestShiroSecurityTokenInjector shiroSecurityTokenInjector=new TestShiroSecurityTokenInjector(shiroSecurityToken,passPhrase);
    successEndpoint.expectedMessageCount(1);
    failureEndpoint.expectedMessageCount(0);
    template.send("direct:secureEndpoint",shiroSecurityTokenInjector);
    successEndpoint.assertIsSatisfied();
    failureEndpoint.assertIsSatisfied();
  }
  @Test public void testFailureAuthorizationAll() throws Exception {
    ShiroSecurityToken shiroSecurityToken=new ShiroSecurityToken("george","harrison");
    TestShiroSecurityTokenInjector shiroSecurityTokenInjector=new TestShiroSecurityTokenInjector(shiroSecurityToken,passPhrase);
    successEndpoint.expectedMessageCount(0);
    failureEndpoint.expectedMessageCount(1);
    template.send("direct:secureAllEndpoint",shiroSecurityTokenInjector);
    successEndpoint.assertIsSatisfied();
    failureEndpoint.assertIsSatisfied();
  }
  @Test public void testSuccessfulAuthorizationAll() throws Exception {
    ShiroSecurityToken shiroSecurityToken=new ShiroSecurityToken("paul","mccartney");
    TestShiroSecurityTokenInjector shiroSecurityTokenInjector=new TestShiroSecurityTokenInjector(shiroSecurityToken,passPhrase);
    successEndpoint.expectedMessageCount(1);
    failureEndpoint.expectedMessageCount(0);
    template.send("direct:secureAllEndpoint",shiroSecurityTokenInjector);
    successEndpoint.assertIsSatisfied();
    failureEndpoint.assertIsSatisfied();
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{new RouteBuilder(){
      public void configure(){
        List<String> rolesList=new ArrayList<>();
        rolesList.add("sec-level2");
        rolesList.add("sec-level3");
        final ShiroSecurityPolicy securityPolicy=new ShiroSecurityPolicy("src/test/resources/securityconfig.ini",passPhrase,true);
        securityPolicy.setRolesList(rolesList);
        onException(CamelAuthorizationException.class).to("mock:authorizationException");
        from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success");
      }
    }
,new RouteBuilder(){
      public void configure(){
        List<String> rolesList=new ArrayList<>();
        rolesList.add("sec-level2");
        rolesList.add("sec-level3");
        final ShiroSecurityPolicy securityPolicy=new ShiroSecurityPolicy("src/test/resources/securityconfig.ini",passPhrase,true);
        securityPolicy.setRolesList(rolesList);
        securityPolicy.setAllRolesRequired(true);
        onException(CamelAuthorizationException.class).to("mock:authorizationException");
        from("direct:secureAllEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success");
      }
    }
};
  }
private static class TestShiroSecurityTokenInjector extends ShiroSecurityTokenInjector {
    TestShiroSecurityTokenInjector(    ShiroSecurityToken shiroSecurityToken,    byte[] bytes){
      super(shiroSecurityToken,bytes);
    }
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(ShiroSecurityConstants.SHIRO_SECURITY_TOKEN,encrypt());
      exchange.getIn().setBody("Beatle Mania");
    }
  }
}
