/** 
 * Test case for routes that contain <code>jt400:</code> endpoints This test case does nothing by default -- you can use it to test integration when there is a real AS/400 system available by filling in correct values for {@link #USER},  {@link #PASSWORD},  {@link #SYSTEM},  {@link #LIBRARY} and{@link #QUEUE}
 */
public class Jt400PgmRouteTest extends CamelTestSupport {
  private static final String USER="grupo";
  private static final String PASSWORD="atwork";
  private static final String SYSTEM=null;
  private static final String LIBRARY="library";
  private static final String PGM="program";
  private static final String FIELDS_LENGTH="1,512,2";
  private static final String OUTPUT_FIELDS="1,2";
  @Test public void testBasicTest() throws Exception {
    if (SYSTEM != null) {
      final MockEndpoint endpoint=getMockEndpoint("mock:a");
      endpoint.setExpectedMessageCount(1);
      Runnable runnable=new Runnable(){
        public void run(){
          Exchange exchange=endpoint.getReceivedExchanges().get(0);
          char[] secondParameter=new char[512];
          Arrays.fill(secondParameter,' ');
          String[] expectedBody=new String[]{"1234",new String(secondParameter),"01"};
          Object actualBody=exchange.getIn().getBody();
          assertNotNull(actualBody);
          assertTrue(actualBody.getClass().isArray());
          String[] actualBodyTyped=(String[])actualBody;
          for (int i=0; i < expectedBody.length; i++) {
            assertEquals(expectedBody[i],actualBodyTyped[i]);
          }
        }
      }
;
      endpoint.expects(runnable);
      sendBody("direct:a",new String[]{"1234","",""});
      endpoint.assertIsSatisfied();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        if (SYSTEM != null) {
          String uri=String.format("jt400://%s:%s@%s/QSYS.LIB/%s.LIB/%s.pgm?outputFieldsIdx=%s&fieldsLength=%s",USER,PASSWORD,SYSTEM,LIBRARY,PGM,OUTPUT_FIELDS,FIELDS_LENGTH);
          from("direct:a").to(uri).to("mock:a");
        }
      }
    }
;
  }
}
