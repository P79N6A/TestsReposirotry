public class JdbcAggregateRecoverTest extends AbstractJdbcAggregationTestSupport {
  private static AtomicInteger counter=new AtomicInteger(0);
  void configureJdbcAggregationRepository(){
    repo.setUseRecovery(true);
    repo.setRecoveryInterval(500,TimeUnit.MILLISECONDS);
  }
  @Test public void testJdbcAggregateRecover() throws Exception {
    getMockEndpoint("mock:aggregated").expectedMessageCount(3);
    getMockEndpoint("mock:result").expectedBodiesReceived("ABCDE");
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(2);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").delay(1000).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            int count=counter.incrementAndGet();
            if (count <= 2) {
              throw new IllegalArgumentException("Damn");
            }
          }
        }
).to("mock:result").end();
      }
    }
;
  }
}
