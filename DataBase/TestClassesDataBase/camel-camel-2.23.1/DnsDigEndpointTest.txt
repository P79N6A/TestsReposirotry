/** 
 * Tests for the dig endpoint.
 */
@Ignore("Wikipedia service is broken now") public class DnsDigEndpointTest extends CamelTestSupport {
  private static final String RESPONSE_MONKEY="\"A Macaque, an old world species of " + "monkey native to Southeast Asia|thumb]A monkey is a primate of the " + "Haplorrhini suborder and simian infraorder, either an Old World monkey "+ "or a New World monkey, but excluding apes. There are about 260 known "+ "living specie\" \"s of monkey. Many are arboreal, although there are "+ "species that live primarily on the ground, such as baboons... "+ "http://en.wikipedia.org/wiki/Monkey\"";
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") protected ProducerTemplate template;
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("dns:dig").to("mock:result");
      }
    }
;
  }
  @Test public void testDigForMonkey() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      public boolean matches(      Exchange exchange){
        String str=((Message)exchange.getIn().getBody()).getSectionArray(Section.ANSWER)[0].rdataToString();
        return RESPONSE_MONKEY.equals(str);
      }
    }
);
    Map<String,Object> headers=new HashMap<>();
    headers.put("dns.name","monkey.wp.dg.cx");
    headers.put("dns.type","TXT");
    template.sendBodyAndHeaders(null,headers);
    resultEndpoint.assertIsSatisfied();
  }
}
