public class NettyManualEndpointTest extends BaseNettyTest {
  private NettyEndpoint endpoint;
  @Test public void testNettyManaul() throws Exception {
    assertNotNull(endpoint);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody(endpoint,"Hello World\n");
    assertMockEndpointsSatisfied();
    assertEquals("netty4:tcp://localhost:" + getPort(),endpoint.getEndpointUri());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        NettyConfiguration nettyConfig=new NettyConfiguration();
        nettyConfig.setProtocol("tcp");
        nettyConfig.setHost("localhost");
        nettyConfig.setPort(getPort());
        nettyConfig.setSync(false);
        nettyConfig.setEncoder(ChannelHandlerFactories.newStringEncoder(CharsetUtil.UTF_8,"tcp"));
        List<ChannelHandler> decoders=new ArrayList<>();
        decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(1000,Delimiters.lineDelimiter(),"tcp"));
        decoders.add(ChannelHandlerFactories.newStringDecoder(CharsetUtil.UTF_8,"tcp"));
        nettyConfig.setDecoders(decoders);
        NettyComponent component=new NettyComponent(getContext());
        component.setConfiguration(nettyConfig);
        getContext().addComponent("netty4",component);
        component.start();
        endpoint=new NettyEndpoint(null,component,nettyConfig);
        endpoint.start();
        from(endpoint).to("mock:result");
      }
    }
;
  }
}
