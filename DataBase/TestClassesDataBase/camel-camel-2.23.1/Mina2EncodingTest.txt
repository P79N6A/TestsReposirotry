/** 
 * Unit testing using different encodings with the TCP protocol.
 * @version 
 */
public class Mina2EncodingTest extends BaseMina2Test {
  @Test public void testTCPEncodeUTF8InputIsBytes() throws Exception {
    final String uri=String.format("mina2:tcp://localhost:%1$s?encoding=UTF-8&sync=false",getPort());
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(uri).to("mock:result");
      }
    }
);
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    byte[] body="Hello Thai Elephant \u0E08".getBytes("UTF-8");
    endpoint.expectedMessageCount(1);
    endpoint.expectedBodiesReceived(body);
    template.sendBody(uri,body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTCPEncodeUTF8InputIsString() throws Exception {
    final String uri=String.format("mina2:tcp://localhost:%1$s?encoding=UTF-8&sync=false",getPort());
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(uri).to("mock:result");
      }
    }
);
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    String body="Hello Thai Elephant \u0E08";
    endpoint.expectedMessageCount(1);
    endpoint.expectedBodiesReceived(body);
    template.sendBody(uri,body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTCPEncodeUTF8TextLineInputIsString() throws Exception {
    final String uri=String.format("mina2:tcp://localhost:%1$s?textline=true&encoding=UTF-8&sync=false",getPort());
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(uri).to("mock:result");
      }
    }
);
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    String body="Hello Thai Elephant \u0E08";
    endpoint.expectedMessageCount(1);
    endpoint.expectedBodiesReceived(body);
    template.sendBody(uri,body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testUDPEncodeUTF8InputIsBytes() throws Exception {
    final String uri=String.format("mina2:udp://localhost:%1$s?encoding=UTF-8&sync=false",getPort());
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(uri).to("mock:result");
      }
    }
);
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    byte[] body="Hello Thai Elephant \u0E08".getBytes();
    endpoint.expectedMessageCount(1);
    endpoint.expectedBodiesReceived(body);
    template.sendBody(uri,body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testUDPEncodeUTF8InputIsString() throws Exception {
    final String uri=String.format("mina2:udp://localhost:%1$s?encoding=UTF-8&sync=false",getPort());
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(uri).to("mock:result");
      }
    }
);
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    String body="Hello Thai Elephant \u0E08";
    endpoint.expectedMessageCount(1);
    endpoint.expectedBodiesReceived(body);
    template.sendBody(uri,body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testUDPEncodeUTF8InputIsStringNoMock() throws Exception {
    final String hello="Hello Thai Elephant \u0E08";
    final String bye="Hello Thai Elephant \u0E08";
    final String uri=String.format("mina2:udp://localhost:%1$s?sync=true&encoding=UTF-8",getPort());
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(uri).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String s=exchange.getIn().getBody(String.class);
            assertEquals(hello,s);
            exchange.getOut().setBody(bye);
          }
        }
);
      }
    }
);
    Endpoint endpoint=context.getEndpoint(uri);
    Producer producer=endpoint.createProducer();
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setBody(hello);
    producer.start();
    producer.process(exchange);
    String s=exchange.getOut().getBody(String.class);
    assertEquals(bye,s);
    producer.stop();
  }
  @Test public void testInvalidEncoding() throws Exception {
    final String uri=String.format("mina2:tcp://localhost:%1$s?textline=true&encoding=XXX&sync=false",getPort());
    try {
      context.addRoutes(new RouteBuilder(){
        public void configure(){
          from(uri).to("mock:result");
        }
      }
);
      fail("Should have thrown a ResolveEndpointFailedException due invalid encoding parameter");
    }
 catch (    FailedToCreateRouteException e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("The encoding: XXX is not supported",iae.getMessage());
    }
  }
}
