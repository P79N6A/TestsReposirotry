public class KMSProducerSpringTest extends CamelSpringTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint mock;
  @Test public void mqListBrokersTest() throws Exception {
    mock.expectedMessageCount(1);
    Exchange exchange=template.request("direct:listKeys",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KMSConstants.OPERATION,KMSOperations.listKeys);
      }
    }
);
    assertMockEndpointsSatisfied();
    ListKeysResult resultGet=(ListKeysResult)exchange.getIn().getBody();
    assertEquals(1,resultGet.getKeys().size());
    assertEquals("keyId",resultGet.getKeys().get(0).getKeyId());
  }
  @Test public void kmsCreateKeyTest() throws Exception {
    mock.expectedMessageCount(1);
    Exchange exchange=template.request("direct:createKey",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KMSConstants.OPERATION,KMSOperations.createKey);
      }
    }
);
    assertMockEndpointsSatisfied();
    CreateKeyResult resultGet=(CreateKeyResult)exchange.getIn().getBody();
    assertEquals("test",resultGet.getKeyMetadata().getKeyId());
    assertEquals(true,resultGet.getKeyMetadata().isEnabled());
  }
  @Test public void kmsDisableKeyTest() throws Exception {
    mock.expectedMessageCount(1);
    template.request("direct:disableKey",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KMSConstants.OPERATION,KMSOperations.disableKey);
        exchange.getIn().setHeader(KMSConstants.KEY_ID,"test");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Test public void kmsEnableKeyTest() throws Exception {
    mock.expectedMessageCount(1);
    template.request("direct:enableKey",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KMSConstants.OPERATION,KMSOperations.enableKey);
        exchange.getIn().setHeader(KMSConstants.KEY_ID,"test");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Test public void kmsScheduleKeyDeletionTest() throws Exception {
    mock.expectedMessageCount(1);
    Exchange exchange=template.request("direct:scheduleDelete",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KMSConstants.OPERATION,KMSOperations.scheduleKeyDeletion);
        exchange.getIn().setHeader(KMSConstants.KEY_ID,"test");
      }
    }
);
    assertMockEndpointsSatisfied();
    ScheduleKeyDeletionResult resultGet=(ScheduleKeyDeletionResult)exchange.getIn().getBody();
    assertEquals("test",resultGet.getKeyId());
  }
  @Test public void kmsDescribeKeyTest() throws Exception {
    mock.expectedMessageCount(1);
    Exchange exchange=template.request("direct:describeKey",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KMSConstants.OPERATION,KMSOperations.describeKey);
        exchange.getIn().setHeader(KMSConstants.KEY_ID,"test");
      }
    }
);
    assertMockEndpointsSatisfied();
    DescribeKeyResult resultGet=exchange.getIn().getBody(DescribeKeyResult.class);
    assertEquals("test",resultGet.getKeyMetadata().getKeyId());
    assertEquals("MyCamelKey",resultGet.getKeyMetadata().getDescription());
    assertFalse(resultGet.getKeyMetadata().isEnabled());
  }
  @Override protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/aws/kms/KMSComponentSpringTest-context.xml");
  }
}
