public class NettyHttpGetWithParamAsExchangeHeaderTest extends BaseNettyTest {
  private String serverUri="netty4-http:http://localhost:" + getPort() + "/myservice?urlDecodeHeaders=true";
  @Test public void testHttpGetWithParamsViaURI() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("one","einz");
    mock.expectedHeaderReceived("two","twei");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    template.requestBody(serverUri + "&one=einz&two=twei",null,Object.class);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpGetWithUTF8EncodedParamsViaURI() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("message","Keine g\u00FCltige GPS-Daten!");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    template.requestBody(serverUri + "&message=Keine%20g%C3%BCltige%20GPS-Daten!",null,Object.class);
    assertMockEndpointsSatisfied();
  }
  @Test @Ignore public void testHttpGetWithISO8859EncodedParamsViaURI() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("message","Keine g\u00C6ltige GPS-Daten!");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    template.requestBody(serverUri + "&message=Keine+g%C6ltige+GPS-Daten%21",null,Object.class);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpGetWithSpaceInParams() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("message"," World");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    template.requestBody(serverUri + "&message=%2BWorld",null,Object.class);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpGetWithSpaceAsPlusInParams() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("message"," World");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    template.requestBody(serverUri + "&message=+World",null,Object.class);
    assertMockEndpointsSatisfied();
  }
  @Test @Ignore("HTTP_QUERY not yet supported") public void testHttpGetWithParamsViaHeader() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("one","uno");
    mock.expectedHeaderReceived("two","dos");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    template.requestBodyAndHeader(serverUri,null,Exchange.HTTP_QUERY,"one=uno&two=dos");
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpPost() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    template.requestBody(serverUri,"Hello World");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(serverUri).to("mock:result");
      }
    }
;
  }
}
