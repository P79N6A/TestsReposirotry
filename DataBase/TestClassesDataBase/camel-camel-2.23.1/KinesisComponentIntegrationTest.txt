@Ignore("Must be manually tested.") public class KinesisComponentIntegrationTest extends CamelTestSupport {
  @EndpointInject(uri="direct:start") private ProducerTemplate template;
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @Test public void send() throws Exception {
    result.expectedMessageCount(2);
    template.send("direct:start",ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KinesisConstants.PARTITION_KEY,"partition-1");
        exchange.getIn().setBody("Kinesis Event 1.");
      }
    }
);
    template.send("direct:start",ExchangePattern.InOut,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KinesisConstants.PARTITION_KEY,"partition-1");
        exchange.getIn().setBody("Kinesis Event 2.");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertResultExchange(result.getExchanges().get(0),"Kinesis Event 1.","partition-1");
    assertResultExchange(result.getExchanges().get(1),"Kinesis Event 2.","partition-1");
  }
  private void assertResultExchange(  Exchange resultExchange,  String data,  String partition){
    assertIsInstanceOf(Record.class,resultExchange.getIn().getBody());
    Record record=resultExchange.getIn().getBody(Record.class);
    assertEquals(data,new String(record.getData().array()));
    assertEquals(partition,resultExchange.getIn().getHeader(KinesisConstants.PARTITION_KEY));
    assertNotNull(resultExchange.getIn().getHeader(KinesisConstants.APPROX_ARRIVAL_TIME));
    assertNotNull(resultExchange.getIn().getHeader(KinesisConstants.SEQUENCE_NUMBER));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    AmazonKinesis client=AmazonKinesisClientBuilder.standard().withRegion(Regions.EU_CENTRAL_1).build();
    registry.bind("amazonKinesisClient",client);
    return registry;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        String kinesisEndpointUri="aws-kinesis://etl?amazonKinesisClient=#amazonKinesisClient";
        from("direct:start").to(kinesisEndpointUri);
        from(kinesisEndpointUri).to("mock:result");
      }
    }
;
  }
}
