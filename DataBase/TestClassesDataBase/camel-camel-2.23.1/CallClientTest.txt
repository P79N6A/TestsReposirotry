/** 
 * Unit tests for calling from the client side
 */
public class CallClientTest extends AbstractMiloServerTest {
  private static final String DIRECT_START_1="direct:start1";
  private static final String MILO_CLIENT_BASE_C1="milo-client:tcp://localhost:@@port@@";
  private static final String MILO_CLIENT_ITEM_C1_1=MILO_CLIENT_BASE_C1 + "?node=" + nodeValue(MockNamespace.URI,MockNamespace.FOLDER_ID)+ "&method="+ nodeValue(MockNamespace.URI,"id1")+ "&overrideHost=true";
  @Produce(uri=DIRECT_START_1) protected ProducerTemplate producer1;
  private OpcUaServer server;
  private Call1 call1;
  @Override protected boolean isAddServer(){
    return false;
  }
  @Before public void start() throws Exception {
    final OpcUaServerConfigBuilder config=new OpcUaServerConfigBuilder();
    config.setBindAddresses(Arrays.asList("localhost"));
    config.setBindPort(getServerPort());
    config.setIdentityValidator(AnonymousIdentityValidator.INSTANCE);
    config.setUserTokenPolicies(Arrays.asList(OpcUaServerConfig.USER_TOKEN_POLICY_ANONYMOUS));
    config.setSecurityPolicies(EnumSet.of(SecurityPolicy.None));
    config.setCertificateManager(new DefaultCertificateManager());
    config.setCertificateValidator(new InsecureCertificateValidator());
    this.server=new OpcUaServer(config.build());
    this.call1=new MockCall.Call1();
    this.server.getNamespaceManager().registerAndAdd(MockNamespace.URI,index -> {
      final List<UaMethodNode> methods=new LinkedList<>();
      methods.add(MockCall.fromNode(index,this.server.getNodeMap(),"id1","name1",this.call1));
      return new MockNamespace(index,this.server,methods);
    }
);
    this.server.startup().get();
  }
  @After public void stop(){
    this.server.shutdown();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(DIRECT_START_1).to(resolve(MILO_CLIENT_ITEM_C1_1));
      }
    }
;
  }
  @Test public void testCall1() throws Exception {
    doCall(this.producer1,"foo");
    doCall(this.producer1,"bar");
    Assert.assertArrayEquals(new Object[]{"foo","bar"},this.call1.calls.toArray());
  }
  private static void doCall(  final ProducerTemplate producerTemplate,  final Object input){
    producerTemplate.sendBodyAndHeader(input,"await",true);
  }
}
