public class SplitterWireTapStreamCacheTest extends ContextTestSupport {
  private MockEndpoint startEnd;
  private MockEndpoint splitEnd;
  private MockEndpoint wiretapEnd;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEnd=getMockEndpoint("mock:startEnd");
    splitEnd=getMockEndpoint("mock:splitEnd");
    wiretapEnd=getMockEndpoint("mock:wireTapEnd");
  }
  @Test public void testWireTapAfterSplitDeletesStreamCacheFileWhenSplitFinishes() throws Exception {
    startEnd.expectedMessageCount(1);
    splitEnd.expectedMessageCount(1);
    wiretapEnd.expectedMessageCount(1);
    template.sendBody("direct:start","text");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        StreamCachingStrategy streamCachingStrategy=new DefaultStreamCachingStrategy();
        streamCachingStrategy.setSpoolThreshold(1L);
        context.setStreamCachingStrategy(streamCachingStrategy);
        context.setStreamCaching(true);
        from("direct:start").split(bodyAs(String.class).tokenize()).to("direct:split").to("mock:startEnd").end();
        from("direct:split").wireTap("direct:wireTap").delay(1000).to("mock:splitEnd");
        from("direct:wireTap").setBody(constant(this.getClass().getResourceAsStream("/log4j2.properties"))).delay(3000).to("mock:wireTapEnd");
      }
    }
;
  }
}
