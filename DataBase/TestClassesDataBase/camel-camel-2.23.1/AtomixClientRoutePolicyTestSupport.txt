public abstract class AtomixClientRoutePolicyTestSupport {
  private static final Logger LOGGER=LoggerFactory.getLogger(AtomixClientRoutePolicyTestSupport.class);
  private final Address address=new Address("127.0.0.1",AvailablePortFinder.getNextAvailable());
  private final List<String> clients=IntStream.range(0,3).mapToObj(Integer::toString).collect(Collectors.toList());
  private final List<String> results=new ArrayList<>();
  private final ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(clients.size() * 2);
  private final CountDownLatch latch=new CountDownLatch(clients.size());
  @Test public void test() throws Exception {
    AtomixReplica boot=null;
    try {
      boot=AtomixFactory.replica(address);
      for (      String id : clients) {
        scheduler.submit(() -> run(id));
      }
      latch.await(1,TimeUnit.MINUTES);
      scheduler.shutdownNow();
      Assert.assertEquals(clients.size(),results.size());
      Assert.assertTrue(results.containsAll(clients));
    }
  finally {
      if (boot != null) {
        boot.shutdown();
      }
    }
  }
  private void run(  String id){
    try {
      int events=ThreadLocalRandom.current().nextInt(2,6);
      CountDownLatch contextLatch=new CountDownLatch(events);
      DefaultCamelContext context=new DefaultCamelContext();
      context.disableJMX();
      context.setName("context-" + id);
      context.addService(createClusterService(id,address));
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("timer:atomix?delay=1s&period=1s").routeId("route-" + id).routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")).log("From ${routeId}").process(e -> contextLatch.countDown());
        }
      }
);
      Thread.sleep(ThreadLocalRandom.current().nextInt(500));
      context.start();
      contextLatch.await();
      LOGGER.debug("Shutting down client node {}",id);
      results.add(id);
      context.stop();
      latch.countDown();
    }
 catch (    Exception e) {
      LOGGER.warn("",e);
    }
  }
  protected abstract CamelClusterService createClusterService(  String id,  Address bootstrapNode);
}
