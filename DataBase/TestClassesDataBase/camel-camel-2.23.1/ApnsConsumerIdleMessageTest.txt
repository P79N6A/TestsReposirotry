/** 
 * Test to verify that the polling consumer delivers an empty Exchange when the sendEmptyMessageWhenIdle property is set and a polling event yields no results.
 */
@Ignore public class ApnsConsumerIdleMessageTest extends CamelTestSupport {
  ApnsServerStub server;
  @Before public void startup() throws InterruptedException {
    server=ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT,TestConstants.TEST_FEEDBACK_PORT);
  }
  @After public void stop(){
    server.stop();
  }
  @Test public void testConsumeIdleMessages() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(2);
    Thread.sleep(1100);
    server.stop();
    server.start();
    Thread.sleep(1100);
    server.stop();
    assertMockEndpointsSatisfied();
    assertTrue(mock.getExchanges().get(0).getIn().getBody() == null);
    assertTrue(mock.getExchanges().get(1).getIn().getBody() == null);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ApnsServiceFactory apnsServiceFactory=ApnsUtils.createDefaultTestConfiguration(camelContext);
    ApnsService apnsService=apnsServiceFactory.getApnsService();
    ApnsComponent apnsComponent=new ApnsComponent(apnsService);
    camelContext.addComponent("apns",apnsComponent);
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("apns:consumer?initialDelay=1&delay=1&timeUnit=SECONDS&useFixedDelay=true" + "&sendEmptyMessageWhenIdle=true").to("log:com.apache.camel.component.apns?showAll=true&multiline=true").to("mock:result");
      }
    }
;
  }
}
