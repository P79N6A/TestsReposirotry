public class CassandraComponentBeanRefTest extends BaseCassandraTest {
  public static final String CQL="insert into camel_user(login, first_name, last_name) values (?, ?, ?)";
  public static final String SESSION_URI="cql:bean:cassandraSession?cql=#insertCql";
  public static final String CLUSTER_URI="cql:bean:cassandraCluster/camel_ks?cql=#insertCql";
  @Produce(uri="direct:input") public ProducerTemplate producerTemplate;
  @Rule public CassandraCQLUnit cassandra=CassandraUnitUtils.cassandraCQLUnit();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    if (canTest()) {
      Cluster cluster=Cluster.builder().addContactPoint("localhost").build();
      registry.bind("cassandraCluster",cluster);
      registry.bind("cassandraSession",cluster.connect("camel_ks"));
      registry.bind("insertCql",CQL);
    }
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:inputSession").to(SESSION_URI);
        from("direct:inputCluster").to(CLUSTER_URI);
      }
    }
;
  }
  @Test public void testSession() throws Exception {
    if (!canTest()) {
      return;
    }
    CassandraEndpoint endpoint=getMandatoryEndpoint(SESSION_URI,CassandraEndpoint.class);
    assertEquals("camel_ks",endpoint.getKeyspace());
    assertEquals(CQL,endpoint.getCql());
  }
  @Test public void testCluster() throws Exception {
    if (!canTest()) {
      return;
    }
    CassandraEndpoint endpoint=getMandatoryEndpoint(CLUSTER_URI,CassandraEndpoint.class);
    assertEquals("camel_ks",endpoint.getKeyspace());
    assertEquals(CQL,endpoint.getCql());
  }
}
