public abstract class AbstractCxfWsdlFirstTest extends CamelSpringTestSupport {
  static int port1=CXFTestSupport.getPort1();
  public static int getPort1(){
    return port1;
  }
  public static int getPort2(){
    return CXFTestSupport.getPort2();
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    JaxwsTestHandler fromHandler=getMandatoryBean(JaxwsTestHandler.class,"fromEndpointJaxwsHandler");
    fromHandler.reset();
    JaxwsTestHandler toHandler=getMandatoryBean(JaxwsTestHandler.class,"toEndpointJaxwsHandler");
    toHandler.reset();
    URL wsdlURL=getClass().getClassLoader().getResource("person.wsdl");
    PersonService ss=new PersonService(wsdlURL,new QName("http://camel.apache.org/wsdl-first","PersonService"));
    Person client=ss.getSoap();
    ((BindingProvider)client).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,"http://localhost:" + getPort2() + "/"+ getClass().getSimpleName()+ "/PersonService/");
    Holder<String> personId=new Holder<>();
    personId.value="hello";
    Holder<String> ssn=new Holder<>();
    Holder<String> name=new Holder<>();
    client.getPerson(personId,ssn,name);
    assertEquals("we should get the right answer from router","Bonjour",name.value);
    personId.value="";
    try {
      client.getPerson(personId,ssn,name);
      fail("We expect to get the UnknowPersonFault here");
    }
 catch (    UnknownPersonFault fault) {
    }
    personId.value="Invoking getPerson with invalid length string, expecting exception...xxxxxxxxx";
    try {
      client.getPerson(personId,ssn,name);
      fail("We expect to get the WebSerivceException here");
    }
 catch (    WebServiceException ex) {
      assertTrue("Should get the xml vaildate error! " + ex.getMessage(),ex.getMessage().indexOf("MyStringType") > 0 || ex.getMessage().indexOf("Could not parse the XML stream") != -1);
    }
    verifyJaxwsHandlers(fromHandler,toHandler);
  }
  protected void verifyJaxwsHandlers(  JaxwsTestHandler fromHandler,  JaxwsTestHandler toHandler){
    assertEquals(2,fromHandler.getFaultCount());
    assertEquals(4,fromHandler.getMessageCount());
    assertEquals(3,toHandler.getMessageCount());
    assertEquals(1,toHandler.getFaultCount());
  }
  @Test @SuppressWarnings("unchecked") public void testInvokingServiceWithCamelProducer() throws Exception {
    Exchange exchange=sendJaxWsMessageWithHolders("hello");
    assertEquals("The request should be handled sucessfully ",exchange.isFailed(),false);
    org.apache.camel.Message out=exchange.getOut();
    List<Object> result=out.getBody(List.class);
    assertEquals("The result list should not be empty",result.size(),4);
    Holder<String> name=(Holder<String>)result.get(3);
    assertEquals("we should get the right answer from router","Bonjour",name.value);
    exchange=sendJaxWsMessageWithHolders("");
    assertEquals("We should get a fault here",exchange.isFailed(),true);
    Throwable ex=exchange.getException();
    assertTrue("We should get the UnknowPersonFault here",ex instanceof UnknownPersonFault);
  }
  protected Exchange sendJaxWsMessageWithHolders(  final String personIdString){
    Exchange exchange=template.send("direct:producer",new Processor(){
      public void process(      final Exchange exchange){
        final List<Object> params=new ArrayList<>();
        Holder<String> personId=new Holder<>();
        personId.value=personIdString;
        params.add(personId);
        Holder<String> ssn=new Holder<>();
        Holder<String> name=new Holder<>();
        params.add(ssn);
        params.add(name);
        exchange.getIn().setBody(params);
        exchange.getIn().setHeader(CxfConstants.OPERATION_NAME,"GetPerson");
      }
    }
);
    return exchange;
  }
}
