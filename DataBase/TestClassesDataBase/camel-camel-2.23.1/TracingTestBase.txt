public abstract class TracingTestBase extends SpringTestSupport {
  protected List<StringBuilder> getTracedMessages(){
    Tracer tracer=this.applicationContext.getBean("tracer",Tracer.class);
    TraceHandlerTestHandler handler=(TraceHandlerTestHandler)tracer.getTraceHandlers().get(0);
    return handler.getEventMessages();
  }
  protected void prepareTestTracerExceptionInOut(){
  }
  protected void validateTestTracerExceptionInOut(){
    List<StringBuilder> tracedMessages=getTracedMessages();
    assertEquals(7,tracedMessages.size());
    for (    StringBuilder tracedMessage : tracedMessages) {
      String message=tracedMessage.toString();
      assertTrue(message.startsWith("In"));
      assertTrue(message.contains("Out:"));
    }
    assertTrue(tracedMessages.get(4).toString().contains("Ex:"));
  }
  protected int getMessageCount(){
    return getTracedMessages().size();
  }
  @Test public void testTracerExceptionInOut() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    ((Tracer)context.getDefaultTracer()).setTraceOutExchanges(true);
    result.expectedMessageCount(3);
    prepareTestTracerExceptionInOut();
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    try {
      template.sendBody("direct:start","Kaboom");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
    template.sendBody("direct:start","Hello Camel");
    assertMockEndpointsSatisfied();
    validateTestTracerExceptionInOut();
  }
}
