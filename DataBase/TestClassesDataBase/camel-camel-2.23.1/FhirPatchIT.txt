/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirPatch} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirPatchIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirPatchIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirPatchApiMethod.class).getName();
  private static final String PATCH="[ { \"op\":\"replace\", \"path\":\"/active\", \"value\":true } ]";
  @Test public void testPatchById() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.patchBody",PATCH);
    headers.put("CamelFhir.id",this.patient.getIdElement());
    headers.put("CamelFhir.preferReturn",null);
    MethodOutcome result=requestBodyAndHeaders("direct://PATCH_BY_ID",null,headers);
    assertNotNull("patchById result",result);
    assertActive(result);
  }
  @Test public void testPatchByStringId() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.patchBody",PATCH);
    headers.put("CamelFhir.stringId",this.patient.getId());
    headers.put("CamelFhir.preferReturn",null);
    MethodOutcome result=requestBodyAndHeaders("direct://PATCH_BY_SID",null,headers);
    assertActive(result);
  }
  @Test public void testPatchByStringIdPreferResponseTypes() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.patchBody",PATCH);
    headers.put("CamelFhir.stringId",this.patient.getId());
    headers.put("CamelFhir.preferReturn",null);
    List<Class<? extends IBaseResource>> preferredResponseTypes=new ArrayList<>();
    preferredResponseTypes.add(Patient.class);
    headers.put(ExtraParameters.PREFER_RESPONSE_TYPES.getHeaderName(),preferredResponseTypes);
    MethodOutcome result=requestBodyAndHeaders("direct://PATCH_BY_SID",null,headers);
    assertActive(result);
  }
  @Test @Ignore(value="https://github.com/jamesagnew/hapi-fhir/issues/955") public void testPatchByUrl() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.patchBody",PATCH);
    headers.put("CamelFhir.url","Patient?given=Vincent&family=Freeman");
    headers.put("CamelFhir.preferReturn",null);
    MethodOutcome result=requestBodyAndHeaders("direct://PATCH_BY_URL",null,headers);
    assertNotNull("patchByUrl result",result);
    LOG.debug("patchByUrl: " + result);
    assertActive(result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://PATCH_BY_ID").to("fhir://" + PATH_PREFIX + "/patchById");
        from("direct://PATCH_BY_SID").to("fhir://" + PATH_PREFIX + "/patchById");
        from("direct://PATCH_BY_URL").to("fhir://" + PATH_PREFIX + "/patchByUrl");
      }
    }
;
  }
  private void assertActive(  MethodOutcome result){
    LOG.debug("result: " + result);
    IIdType id=result.getId();
    Patient patient=fhirClient.read().resource(Patient.class).withId(id).preferResponseType(Patient.class).execute();
    assertTrue(patient.getActive());
  }
}
