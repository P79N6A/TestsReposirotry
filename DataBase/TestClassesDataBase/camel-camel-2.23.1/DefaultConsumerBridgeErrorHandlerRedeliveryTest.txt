/** 
 */
public class DefaultConsumerBridgeErrorHandlerRedeliveryTest extends DefaultConsumerBridgeErrorHandlerTest {
  protected final AtomicInteger redeliverCounter=new AtomicInteger();
  @Test public void testDefaultConsumerBridgeErrorHandler() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World","Hello World");
    getMockEndpoint("mock:dead").expectedBodiesReceived("Cannot process");
    latch.countDown();
    assertMockEndpointsSatisfied();
    assertEquals(0,redeliverCounter.get());
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertEquals("Simulated",cause.getMessage());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().addComponent("my",new MyComponent());
        onException(Exception.class).maximumRedeliveries(3).onRedelivery(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            redeliverCounter.incrementAndGet();
          }
        }
).redeliveryDelay(0).handled(true).to("mock:dead");
        from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result");
      }
    }
;
  }
}
