/** 
 * Unit test with custom codec.
 */
public class MinaCustomCodecTest extends BaseMinaTest {
  @Test public void testMyCodec() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Bye World");
    Object out=template.requestBody("mina:tcp://localhost:{{port}}?sync=true&codec=#myCodec","Hello World");
    assertEquals("Bye World",out);
    mock.assertIsSatisfied();
  }
  @Test public void testTCPEncodeUTF8InputIsString() throws Exception {
    final String myUri="mina:tcp://localhost:" + getNextPort() + "?encoding=UTF-8&sync=false";
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(myUri).to("mock:result");
      }
    }
);
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    String body="Hello Thai Elephant \u0E08";
    endpoint.expectedMessageCount(1);
    endpoint.expectedBodiesReceived(body);
    template.sendBody(myUri,body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBadConfiguration() throws Exception {
    try {
      template.sendBody("mina:tcp://localhost:{{port}}?sync=true&codec=#XXX","Hello World");
      fail("Should have thrown a ResolveEndpointFailedException");
    }
 catch (    ResolveEndpointFailedException e) {
    }
  }
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myCodec",new MyCodec());
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("mina:tcp://localhost:{{port}}?sync=true&codec=#myCodec").transform(constant("Bye World")).to("mock:result");
      }
    }
;
  }
private static class MyCodec implements ProtocolCodecFactory {
    public ProtocolEncoder getEncoder() throws Exception {
      return new ProtocolEncoder(){
        public void encode(        IoSession ioSession,        Object message,        ProtocolEncoderOutput out) throws Exception {
          ByteBuffer bb=ByteBuffer.allocate(32).setAutoExpand(true);
          String s=(String)message;
          bb.put(s.getBytes("US-ASCII"));
          bb.flip();
          out.write(bb);
        }
        public void dispose(        IoSession ioSession) throws Exception {
        }
      }
;
    }
    public ProtocolDecoder getDecoder() throws Exception {
      return new CumulativeProtocolDecoder(){
        protected boolean doDecode(        IoSession session,        ByteBuffer in,        ProtocolDecoderOutput out) throws Exception {
          if (in.remaining() > 0) {
            byte[] buf=new byte[in.remaining()];
            in.get(buf);
            out.write(new String(buf,"US-ASCII"));
            return true;
          }
 else {
            return false;
          }
        }
      }
;
    }
  }
}
