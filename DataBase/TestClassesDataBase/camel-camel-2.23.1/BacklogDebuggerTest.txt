public class BacklogDebuggerTest extends ManagementTestSupport {
  @SuppressWarnings("unchecked") @Test public void testBacklogDebugger() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("bar",suspended.iterator().next());
    }
);
    String xml=(String)mbeanServer.invoke(on,"dumpTracedMessagesAsXml",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertNotNull(xml);
    log.info(xml);
    assertTrue("Should contain our body",xml.contains("Hello World"));
    assertTrue("Should contain bar node",xml.contains("<toNode>bar</toNode>"));
    resetMocks();
    mock.expectedMessageCount(1);
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerUpdateBodyAndHeader() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("foo",nodes.iterator().next());
    mbeanServer.invoke(on,"setMessageBodyOnBreakpoint",new Object[]{"foo","Changed body"},new String[]{"java.lang.String","java.lang.Object"});
    mbeanServer.invoke(on,"setMessageHeaderOnBreakpoint",new Object[]{"foo","beer","Carlsberg"},new String[]{"java.lang.String","java.lang.String","java.lang.Object"});
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("bar",suspended.iterator().next());
    }
);
    String xml=(String)mbeanServer.invoke(on,"dumpTracedMessagesAsXml",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertNotNull(xml);
    log.info(xml);
    assertTrue("Should contain our body",xml.contains("Changed body"));
    assertTrue("Should contain bar node",xml.contains("<toNode>bar</toNode>"));
    assertTrue("Should contain our added header",xml.contains("<header key=\"beer\" type=\"java.lang.String\">Carlsberg</header>"));
    resetMocks();
    mock.expectedMessageCount(1);
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertMockEndpointsSatisfied();
    nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerUpdateBodyAndHeaderType() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("foo",nodes.iterator().next());
    mbeanServer.invoke(on,"setMessageBodyOnBreakpoint",new Object[]{"foo","444","java.lang.Integer"},new String[]{"java.lang.String","java.lang.Object","java.lang.String"});
    mbeanServer.invoke(on,"setMessageHeaderOnBreakpoint",new Object[]{"foo","beer","123","java.lang.Integer"},new String[]{"java.lang.String","java.lang.String","java.lang.Object","java.lang.String"});
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("bar",suspended.iterator().next());
    }
);
    String xml=(String)mbeanServer.invoke(on,"dumpTracedMessagesAsXml",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertNotNull(xml);
    log.info(xml);
    assertTrue("Should contain our body",xml.contains("444"));
    assertTrue("Should contain bar node",xml.contains("<toNode>bar</toNode>"));
    assertTrue("Should contain our added header",xml.contains("<header key=\"beer\" type=\"java.lang.Integer\">123</header>"));
    resetMocks();
    mock.expectedMessageCount(1);
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertMockEndpointsSatisfied();
    nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerRemoveBodyAndHeader() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("foo",nodes.iterator().next());
    mbeanServer.invoke(on,"removeMessageBodyOnBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    mbeanServer.invoke(on,"removeMessageHeaderOnBreakpoint",new Object[]{"foo","beer"},new String[]{"java.lang.String","java.lang.String"});
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("bar",suspended.iterator().next());
    }
);
    String xml=(String)mbeanServer.invoke(on,"dumpTracedMessagesAsXml",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertNotNull(xml);
    log.info(xml);
    assertTrue("Should not contain our body",xml.contains("<body>[Body is null]</body>"));
    assertTrue("Should contain bar node",xml.contains("<toNode>bar</toNode>"));
    assertFalse("Should not contain any headers",xml.contains("<header"));
    resetMocks();
    mock.expectedMessageCount(1);
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertMockEndpointsSatisfied();
    nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerSuspendOnlyOneAtBreakpoint() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    template.sendBody("seda:start","Hello World");
    template.sendBody("seda:start","Hello Camel");
    template.sendBody("seda:start","Hello Earth");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("bar",nodes.iterator().next());
    String xml=(String)mbeanServer.invoke(on,"dumpTracedMessagesAsXml",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertNotNull(xml);
    log.info(xml);
    assertTrue("Should contain bar node",xml.contains("<toNode>bar</toNode>"));
    resetMocks();
    mock.expectedMessageCount(1);
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertMockEndpointsSatisfied();
    nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerConditional() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    Object out=mbeanServer.invoke(on,"validateConditionalBreakpoint",new Object[]{"unknown","${body contains 'Camel'"},new String[]{"java.lang.String","java.lang.String"});
    assertEquals("No language could be found for: unknown",out);
    out=mbeanServer.invoke(on,"validateConditionalBreakpoint",new Object[]{"simple","${body contains 'Camel'"},new String[]{"java.lang.String","java.lang.String"});
    assertNotNull(out);
    assertTrue(out.toString().startsWith("Invalid syntax ${body contains 'Camel'"));
    out=mbeanServer.invoke(on,"validateConditionalBreakpoint",new Object[]{"simple","${body} contains 'Camel'"},new String[]{"java.lang.String","java.lang.String"});
    assertNull(out);
    mbeanServer.invoke(on,"addConditionalBreakpoint",new Object[]{"bar","simple","${body} contains 'Camel'"},new String[]{"java.lang.String","java.lang.String","java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
    resetMocks();
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello Camel");
    assertMockEndpointsSatisfied();
    nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("bar",nodes.iterator().next());
    String xml=(String)mbeanServer.invoke(on,"dumpTracedMessagesAsXml",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertNotNull(xml);
    log.info(xml);
    assertTrue("Should contain our body",xml.contains("Hello Camel"));
    assertTrue("Should contain bar node",xml.contains("<toNode>bar</toNode>"));
    resetMocks();
    mock.expectedMessageCount(1);
    mbeanServer.invoke(on,"resumeBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    assertMockEndpointsSatisfied();
    nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(0,nodes.size());
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerStep() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("foo",nodes.iterator().next());
    Boolean stepMode=(Boolean)mbeanServer.getAttribute(on,"SingleStepMode");
    assertEquals("Should not be in step mode",Boolean.FALSE,stepMode);
    mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("bar",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"step",null,null);
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("transform",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"step",null,null);
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("cheese",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"step",null,null);
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("result",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"step",null,null);
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(0,suspended.size());
    }
);
    stepMode=(Boolean)mbeanServer.getAttribute(on,"SingleStepMode");
    assertEquals("Should not be in step mode",Boolean.FALSE,stepMode);
  }
  @SuppressWarnings("unchecked") @Test public void testBacklogDebuggerStepCurrentNode() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should not be enabled",Boolean.FALSE,enabled);
    mbeanServer.invoke(on,"enableDebugger",null,null);
    enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
    assertEquals("Should be enabled",Boolean.TRUE,enabled);
    mbeanServer.invoke(on,"addBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setSleepForEmptyTest(100);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(nodes);
    assertEquals(1,nodes.size());
    assertEquals("foo",nodes.iterator().next());
    Boolean stepMode=(Boolean)mbeanServer.getAttribute(on,"SingleStepMode");
    assertEquals("Should not be in step mode",Boolean.FALSE,stepMode);
    mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("bar",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("transform",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"transform"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("cheese",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"cheese"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(1,suspended.size());
      assertEquals("result",suspended.iterator().next());
    }
);
    mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"result"},new String[]{"java.lang.String"});
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
      Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
      assertNotNull(suspended);
      assertEquals(0,suspended.size());
    }
);
    stepMode=(Boolean)mbeanServer.getAttribute(on,"SingleStepMode");
    assertEquals("Should not be in step mode",Boolean.FALSE,stepMode);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setUseBreadcrumb(false);
        from("seda:start?concurrentConsumers=2").to("log:foo").id("foo").to("log:bar").id("bar").transform().constant("Bye World").id("transform").to("log:cheese?showExchangeId=true").id("cheese").to("mock:result").id("result");
      }
    }
;
  }
}
