/** 
 * @version 
 */
public class ManagedCustomPolicyTest extends ManagementTestSupport {
  private final AtomicInteger counter=new AtomicInteger();
  @Test public void testPolicy() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(1,counter.get());
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=processors,*"),null);
    assertEquals(3,set.size());
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"foo\"");
    assertTrue("Should be registered: foo",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"result\"");
    assertTrue("Should be registered: result",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"bar\"");
    assertTrue("Should be registered: bar",mbeanServer.isRegistered(on));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").policy(new MyPolicy()).to("log:foo").id("foo").to("mock:result").id("result");
        from("direct:bar").to("log:bar").id("bar");
      }
    }
;
  }
private final class MyPolicy implements Policy {
    @Override public void beforeWrap(    RouteContext routeContext,    ProcessorDefinition<?> definition){
    }
    @Override public Processor wrap(    RouteContext routeContext,    final Processor processor){
      return new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          counter.incrementAndGet();
          processor.process(exchange);
        }
      }
;
    }
  }
}
