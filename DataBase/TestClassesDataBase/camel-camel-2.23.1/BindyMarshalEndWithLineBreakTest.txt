/** 
 */
public class BindyMarshalEndWithLineBreakTest extends CamelTestSupport {
  @Test public void testCsvWithEndingLineBreak() throws Exception {
    final CsvRecord record=MyCsvRecord.class.getAnnotation(CsvRecord.class);
    final MyCsvRecord csvRecord=new MyCsvRecord();
    csvRecord.setAddressLine1("221b Baker Street");
    csvRecord.setCity("London");
    csvRecord.setCountry("England");
    csvRecord.setAttention("1");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().convertToString().endsWith(ConverterUtils.getStringCarriageReturn(record.crlf()));
    template.sendBody("direct:withlb",csvRecord);
    assertMockEndpointsSatisfied();
  }
  @Test public void testCsvWithoutEndingLineBreak() throws Exception {
    final CsvRecord record=MyCsvRecord2.class.getAnnotation(CsvRecord.class);
    final MyCsvRecord2 csvRecord2=new MyCsvRecord2();
    csvRecord2.setAddressLine1("221b Baker Street");
    csvRecord2.setCity("London");
    csvRecord2.setCountry("England");
    csvRecord2.setAttention("1");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().convertToString().endsWith(record.separator());
    template.sendBody("direct:withoutlb",csvRecord2);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:withoutlb").marshal().bindy(BindyType.Csv,MyCsvRecord2.class).to("log:after.unmarshal").to("mock:result");
        from("direct:withlb").marshal().bindy(BindyType.Csv,MyCsvRecord.class).to("log:after.marshal").to("mock:result");
      }
    }
;
  }
}
