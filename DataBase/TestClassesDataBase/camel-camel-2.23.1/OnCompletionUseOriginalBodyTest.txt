/** 
 * @version 
 */
public class OnCompletionUseOriginalBodyTest extends ContextTestSupport {
  @Test public void testOnCompletionUseOriginalBody() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:before").expectedPropertyReceived(Exchange.ON_COMPLETION,true);
    getMockEndpoint("mock:after").expectedBodiesReceived("OnComplete:Hello World");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    String out=template.requestBody("direct:start","Hello World",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onCompletion().useOriginalBody().parallelProcessing().to("mock:before").delay(1000).setBody(simple("OnComplete:${body}")).to("mock:after");
        from("direct:start").process(new MyProcessor()).to("mock:result");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public MyProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      if (exchange.getIn().getBody(String.class).contains("Kabom")) {
        throw new IllegalArgumentException("Kabom");
      }
      exchange.getIn().setBody("Bye World");
    }
  }
}
