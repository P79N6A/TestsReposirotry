/** 
 * @version 
 */
public class SubmitOrderedCompletionServiceTest extends Assert {
  private ExecutorService executor;
  private SubmitOrderedCompletionService<Object> service;
  @Before public void setUp() throws Exception {
    executor=Executors.newFixedThreadPool(5);
    service=new SubmitOrderedCompletionService<>(executor);
  }
  @After public void tearDown() throws Exception {
    executor.shutdownNow();
  }
  @Test public void testSubmitOrdered() throws Exception {
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "B";
      }
    }
);
    Object a=service.take().get();
    Object b=service.take().get();
    assertEquals("A",a);
    assertEquals("B",b);
  }
  @Test public void testSubmitOrderedFirstTaskIsSlow() throws Exception {
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        Thread.sleep(200);
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "B";
      }
    }
);
    Object a=service.take().get();
    Object b=service.take().get();
    assertEquals("A",a);
    assertEquals("B",b);
  }
  @Test public void testSubmitOrderedFirstTaskIsSlowUsingPollTimeout() throws Exception {
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        Thread.sleep(200);
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "B";
      }
    }
);
    Object a=service.poll(5,TimeUnit.SECONDS).get();
    Object b=service.poll(5,TimeUnit.SECONDS).get();
    assertEquals("A",a);
    assertEquals("B",b);
  }
  @Test public void testSubmitOrderedFirstTaskIsSlowUsingPoll() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        latch.await(5,TimeUnit.SECONDS);
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "B";
      }
    }
);
    Object a=service.poll();
    assertNull(a);
    a=service.poll();
    assertNull(a);
    latch.countDown();
    a=service.take().get();
    Object b=service.take().get();
    assertEquals("A",a);
    assertEquals("B",b);
  }
  @Test public void testSubmitOrderedSecondTaskIsSlow() throws Exception {
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        Thread.sleep(100);
        return "B";
      }
    }
);
    Object a=service.take().get();
    Object b=service.take().get();
    assertEquals("A",a);
    assertEquals("B",b);
  }
  @Test public void testSubmitOrderedSecondTaskIsSlowUsingPollTimeout() throws Exception {
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        Thread.sleep(100);
        return "B";
      }
    }
);
    Object a=service.poll(5,TimeUnit.SECONDS).get();
    Object b=service.poll(5,TimeUnit.SECONDS).get();
    assertEquals("A",a);
    assertEquals("B",b);
  }
  @Test public void testSubmitOrderedLastTaskIsSlowUsingPoll() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        return "A";
      }
    }
);
    service.submit(new Callable<Object>(){
      public Object call() throws Exception {
        latch.await(5,TimeUnit.SECONDS);
        return "B";
      }
    }
);
    Object a=service.take().get(5,TimeUnit.SECONDS);
    assertNotNull(a);
    Object b=service.poll();
    assertNull(b);
    b=service.poll();
    assertNull(b);
    latch.countDown();
    b=service.take().get(5,TimeUnit.SECONDS);
    assertEquals("A",a);
    assertEquals("B",b);
  }
}
