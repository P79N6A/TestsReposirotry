public class HystrixCircuitOpenTest extends CamelTestSupport {
  public static final Integer REQUEST_VOLUME_THRESHOLD=4;
  private static final Logger LOG=LoggerFactory.getLogger(HystrixCircuitOpenTest.class);
  private HystrixExceptionRoute route=new HystrixExceptionRoute();
  @Test public void testCircuitOpen() throws Exception {
    LOG.info("testCircuitOpen start");
    route.throwException=true;
    for (int i=0; i < 2 * REQUEST_VOLUME_THRESHOLD; i++) {
      try {
        template.asyncRequestBody("direct:start","Request Body");
      }
 catch (      CamelExecutionException e) {
        LOG.info(e.toString());
      }
    }
    Thread.sleep(1500);
    resetMocks();
    getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SHORT_CIRCUITED,true);
    route.throwException=false;
    try {
      template.requestBody("direct:start","Request Body");
      LOG.info("Instead circuit open expected");
    }
 catch (    CamelExecutionException e) {
      LOG.info("Circuit open expected ",e);
    }
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    for (int i=0; i < 2 * REQUEST_VOLUME_THRESHOLD; i++) {
      try {
        template.requestBody("direct:start","Request Body");
        LOG.info("Circuit has closed");
      }
 catch (      CamelExecutionException e) {
        Thread.sleep(i * 100);
        LOG.info("Circuit will be closed soon " + e.toString());
      }
    }
    resetMocks();
    getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SHORT_CIRCUITED,false);
    getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SUCCESSFUL_EXECUTION,true);
    template.requestBody("direct:start","Request Body");
    assertMockEndpointsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return route;
  }
class HystrixExceptionRoute extends RouteBuilder {
    volatile boolean throwException=true;
    @Override public void configure() throws Exception {
      from("direct:start").hystrix().hystrixConfiguration().executionTimeoutInMilliseconds(100).circuitBreakerRequestVolumeThreshold(REQUEST_VOLUME_THRESHOLD).metricsRollingStatisticalWindowInMilliseconds(1000).circuitBreakerSleepWindowInMilliseconds(2000).end().log("Hystrix processing start: ${threadName}").process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          if (throwException) {
            LOG.info("Will throw exception");
            throw new IOException("Route has failed");
          }
 else {
            LOG.info("Will NOT throw exception");
          }
        }
      }
).log("Hystrix processing end: ${threadName}").end().log(HYSTRIX_RESPONSE_SHORT_CIRCUITED + " = ${exchangeProperty." + HYSTRIX_RESPONSE_SHORT_CIRCUITED+ "}").to("mock:result");
    }
  }
}
