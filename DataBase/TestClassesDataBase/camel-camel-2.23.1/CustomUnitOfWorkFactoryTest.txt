public class CustomUnitOfWorkFactoryTest extends ContextTestSupport {
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setUnitOfWorkFactory(new MyUnitOfWorkFactory());
    return context;
  }
  @Test public void testCustomUnitOfWorkFactory() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedHeaderReceived("before","I was here");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
      }
    }
;
  }
private class MyUnitOfWorkFactory implements UnitOfWorkFactory {
    @Override public UnitOfWork createUnitOfWork(    Exchange exchange){
      return new MyUnitOfWork(exchange);
    }
  }
private class MyUnitOfWork extends DefaultUnitOfWork {
    MyUnitOfWork(    Exchange exchange){
      super(exchange);
    }
    @Override public AsyncCallback beforeProcess(    Processor processor,    Exchange exchange,    AsyncCallback callback){
      exchange.getIn().setHeader("before","I was here");
      return callback;
    }
  }
}
