public class RabbitMQConsumerTest {
  private RabbitMQEndpoint endpoint=Mockito.mock(RabbitMQEndpoint.class);
  private Connection conn=Mockito.mock(Connection.class);
  private Processor processor=Mockito.mock(Processor.class);
  private Channel channel=Mockito.mock(Channel.class);
  @Test public void testStoppingConsumerShutdownExecutor() throws Exception {
    RabbitMQConsumer consumer=new RabbitMQConsumer(endpoint,processor);
    ThreadPoolExecutor e=(ThreadPoolExecutor)Executors.newFixedThreadPool(3);
    Mockito.when(endpoint.createExecutor()).thenReturn(e);
    Mockito.when(endpoint.getConcurrentConsumers()).thenReturn(1);
    Mockito.when(endpoint.connect(any(ExecutorService.class))).thenReturn(conn);
    Mockito.when(conn.createChannel()).thenReturn(channel);
    consumer.doStart();
    assertFalse(e.isShutdown());
    consumer.doStop();
    assertTrue(e.isShutdown());
  }
  @Test public void testStoppingConsumerShutdownConnection() throws Exception {
    RabbitMQConsumer consumer=new RabbitMQConsumer(endpoint,processor);
    Mockito.when(endpoint.createExecutor()).thenReturn(Executors.newFixedThreadPool(3));
    Mockito.when(endpoint.getConcurrentConsumers()).thenReturn(1);
    Mockito.when(endpoint.connect(any(ExecutorService.class))).thenReturn(conn);
    Mockito.when(conn.createChannel()).thenReturn(channel);
    consumer.doStart();
    consumer.doStop();
    Mockito.verify(conn).close(30 * 1000);
  }
  @Test public void testStoppingConsumerShutdownConnectionWhenServerHasClosedChannel() throws Exception {
    AlreadyClosedException alreadyClosedException=Mockito.mock(AlreadyClosedException.class);
    RabbitMQConsumer consumer=new RabbitMQConsumer(endpoint,processor);
    Mockito.when(endpoint.createExecutor()).thenReturn(Executors.newFixedThreadPool(3));
    Mockito.when(endpoint.getConcurrentConsumers()).thenReturn(1);
    Mockito.when(endpoint.connect(any(ExecutorService.class))).thenReturn(conn);
    Mockito.when(conn.createChannel()).thenReturn(channel);
    Mockito.when(channel.basicConsume(anyString(),anyBoolean(),any(Consumer.class))).thenReturn("TAG");
    Mockito.when(channel.isOpen()).thenReturn(false);
    Mockito.doThrow(alreadyClosedException).when(channel).basicCancel("TAG");
    Mockito.doThrow(alreadyClosedException).when(channel).close();
    consumer.doStart();
    consumer.doStop();
    Mockito.verify(conn).close(30 * 1000);
  }
}
