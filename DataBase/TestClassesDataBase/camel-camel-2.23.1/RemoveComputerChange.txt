private static class RemoveComputerChange implements ProblemFactChange<Object> {
  private final CloudComputer removingComputer;
  RemoveComputerChange(  CloudComputer removingComputer){
    this.removingComputer=removingComputer;
  }
  @Override public void doChange(  ScoreDirector<Object> scoreDirector){
    CloudBalance cloudBalance=(CloudBalance)scoreDirector.getWorkingSolution();
    for (    CloudProcess process : cloudBalance.getProcessList()) {
      if (Objects.equals(process.getComputer(),removingComputer)) {
        scoreDirector.beforeVariableChanged(process,"computer");
        process.setComputer(null);
        scoreDirector.afterVariableChanged(process,"computer");
      }
    }
    cloudBalance.setComputerList(new ArrayList<>(cloudBalance.getComputerList()));
    for (Iterator<CloudComputer> it=cloudBalance.getComputerList().iterator(); it.hasNext(); ) {
      CloudComputer workingComputer=it.next();
      if (Objects.equals(workingComputer,removingComputer)) {
        scoreDirector.beforeProblemFactRemoved(workingComputer);
        it.remove();
        scoreDirector.beforeProblemFactRemoved(workingComputer);
        scoreDirector.triggerVariableListeners();
        break;
      }
    }
  }
}
