public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
  private CountDownLatch latch;
  private MyBean bean;
  @Override @Before public void setUp() throws Exception {
    latch=new CountDownLatch(2);
    bean=spy(new MyBean(latch));
    super.setUp();
  }
  @Test public void testAsyncAwaitInterrupt() throws Exception {
    context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
    assertEquals(0,context.getAsyncProcessorAwaitManager().size());
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(0);
    createThreadToInterrupt();
    try {
      template.sendBody("direct:start","Hello Camel");
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      RejectedExecutionException cause=assertIsInstanceOf(RejectedExecutionException.class,e.getCause());
      assertTrue(cause.getMessage().startsWith("Interrupted while waiting for asynchronous callback"));
    }
    assertMockEndpointsSatisfied();
    verify(bean,atMost(4)).callMe();
    assertEquals(0,context.getAsyncProcessorAwaitManager().size());
    assertEquals(1,context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
    assertEquals(1,context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
  }
  private void createThreadToInterrupt(){
    new Thread(() -> {
      try {
        latch.await(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      int size=context.getAsyncProcessorAwaitManager().size();
      assertEquals(1,size);
      Collection<AsyncProcessorAwaitManager.AwaitThread> threads=context.getAsyncProcessorAwaitManager().browse();
      AsyncProcessorAwaitManager.AwaitThread thread=threads.iterator().next();
      String id=thread.getExchange().getExchangeId();
      context.getAsyncProcessorAwaitManager().interrupt(id);
    }
).start();
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext jndiContext=new JndiContext();
    jndiContext.bind("myBean",bean);
    return jndiContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());
        from("direct:start").routeId("myRoute").to("mock:before").bean("myBean","callMe").to("mock:result");
      }
    }
;
  }
public static class MyBean {
    private CountDownLatch latch;
    public MyBean(    CountDownLatch latch){
      this.latch=latch;
    }
    public void callMe() throws Exception {
      latch.countDown();
      throw new Exception();
    }
  }
}
