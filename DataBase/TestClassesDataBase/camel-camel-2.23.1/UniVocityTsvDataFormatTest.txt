/** 
 * This class tests the options of  {@link org.apache.camel.dataformat.univocity.UniVocityTsvDataFormat}.
 */
public final class UniVocityTsvDataFormatTest {
  @Test public void shouldConfigureNullValue(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setNullValue("N/A");
    assertEquals("N/A",dataFormat.getNullValue());
    assertEquals("N/A",dataFormat.createAndConfigureWriterSettings().getNullValue());
    assertEquals("N/A",dataFormat.createAndConfigureParserSettings().getNullValue());
  }
  @Test public void shouldConfigureSkipEmptyLines(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setSkipEmptyLines(true);
    assertTrue(dataFormat.getSkipEmptyLines());
    assertTrue(dataFormat.createAndConfigureWriterSettings().getSkipEmptyLines());
    assertTrue(dataFormat.createAndConfigureParserSettings().getSkipEmptyLines());
  }
  @Test public void shouldConfigureIgnoreTrailingWhitespaces(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setIgnoreTrailingWhitespaces(true);
    assertTrue(dataFormat.getIgnoreTrailingWhitespaces());
    assertTrue(dataFormat.createAndConfigureWriterSettings().getIgnoreTrailingWhitespaces());
    assertTrue(dataFormat.createAndConfigureParserSettings().getIgnoreTrailingWhitespaces());
  }
  @Test public void shouldConfigureIgnoreLeadingWhitespaces(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setIgnoreLeadingWhitespaces(true);
    assertTrue(dataFormat.getIgnoreLeadingWhitespaces());
    assertTrue(dataFormat.createAndConfigureWriterSettings().getIgnoreLeadingWhitespaces());
    assertTrue(dataFormat.createAndConfigureParserSettings().getIgnoreLeadingWhitespaces());
  }
  @Test public void shouldConfigureHeadersDisabled(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setHeadersDisabled(true);
    assertTrue(dataFormat.isHeadersDisabled());
    assertNull(dataFormat.createAndConfigureWriterSettings().getHeaders());
    assertNull(dataFormat.createAndConfigureParserSettings().getHeaders());
  }
  @Test public void shouldConfigureHeaders(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setHeaders(new String[]{"A","B","C"});
    assertArrayEquals(new String[]{"A","B","C"},dataFormat.getHeaders());
    assertArrayEquals(new String[]{"A","B","C"},dataFormat.createAndConfigureWriterSettings().getHeaders());
    assertArrayEquals(new String[]{"A","B","C"},dataFormat.createAndConfigureParserSettings().getHeaders());
  }
  @Test public void shouldConfigureHeaderExtractionEnabled(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setHeaderExtractionEnabled(true);
    assertTrue(dataFormat.getHeaderExtractionEnabled());
    assertTrue(dataFormat.createAndConfigureParserSettings().isHeaderExtractionEnabled());
  }
  @Test public void shouldConfigureNumberOfRecordsToRead(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setNumberOfRecordsToRead(42);
    assertEquals(Integer.valueOf(42),dataFormat.getNumberOfRecordsToRead());
    assertEquals(42,dataFormat.createAndConfigureParserSettings().getNumberOfRecordsToRead());
  }
  @Test public void shouldConfigureEmptyValue(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setEmptyValue("empty");
    assertEquals("empty",dataFormat.getEmptyValue());
    assertEquals("empty",dataFormat.createAndConfigureWriterSettings().getEmptyValue());
  }
  @Test public void shouldConfigureLineSeparator(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setLineSeparator("ls");
    assertEquals("ls",dataFormat.getLineSeparator());
    assertEquals("ls",dataFormat.createAndConfigureWriterSettings().getFormat().getLineSeparatorString());
    assertEquals("ls",dataFormat.createAndConfigureParserSettings().getFormat().getLineSeparatorString());
  }
  @Test public void shouldConfigureNormalizedLineSeparator(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setNormalizedLineSeparator('n');
    assertEquals(Character.valueOf('n'),dataFormat.getNormalizedLineSeparator());
    assertEquals('n',dataFormat.createAndConfigureWriterSettings().getFormat().getNormalizedNewline());
    assertEquals('n',dataFormat.createAndConfigureParserSettings().getFormat().getNormalizedNewline());
  }
  @Test public void shouldConfigureComment(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setComment('c');
    assertEquals(Character.valueOf('c'),dataFormat.getComment());
    assertEquals('c',dataFormat.createAndConfigureWriterSettings().getFormat().getComment());
    assertEquals('c',dataFormat.createAndConfigureParserSettings().getFormat().getComment());
  }
  @Test public void shouldConfigureLazyLoad(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setLazyLoad(true);
    assertTrue(dataFormat.isLazyLoad());
  }
  @Test public void shouldConfigureAsMap(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setAsMap(true);
    assertTrue(dataFormat.isAsMap());
  }
  @Test public void shouldConfigureEscapeChar(){
    UniVocityTsvDataFormat dataFormat=new UniVocityTsvDataFormat().setEscapeChar('e');
    assertEquals(Character.valueOf('e'),dataFormat.getEscapeChar());
    assertEquals('e',dataFormat.createAndConfigureWriterSettings().getFormat().getEscapeChar());
    assertEquals('e',dataFormat.createAndConfigureParserSettings().getFormat().getEscapeChar());
  }
}
