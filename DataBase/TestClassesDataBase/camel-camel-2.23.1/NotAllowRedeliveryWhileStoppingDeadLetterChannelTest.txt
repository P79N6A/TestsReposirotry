/** 
 * @version 
 */
public class NotAllowRedeliveryWhileStoppingDeadLetterChannelTest extends ContextTestSupport {
  @Test public void testRedelivery() throws Exception {
    StopWatch watch=new StopWatch();
    MockEndpoint before=getMockEndpoint("mock:foo");
    before.expectedMessageCount(1);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    context.stopRoute("foo");
    assertTrue("Should stop quickly: " + watch.taken(),watch.taken() < 5000);
    Exchange dead=getMockEndpoint("mock:dead").getExchanges().get(0);
    assertNotNull(dead);
    Throwable cause=dead.getProperty(Exchange.EXCEPTION_CAUGHT,Throwable.class);
    assertNotNull(cause);
    assertIsInstanceOf(RejectedExecutionException.class,cause);
    assertEquals("Redelivery not allowed while stopping",cause.getMessage());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(5).redeliveryDelay(5000).allowRedeliveryWhileStopping(false));
        from("seda:start").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
