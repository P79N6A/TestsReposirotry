/** 
 * Unit test of the string data format.
 */
public class RefDataFormatTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("reverse",new MyReverseDataFormat());
    return jndi;
  }
  @Test public void testMarshalRef() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("CBA");
    template.sendBody("direct:a","ABC");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUnmarshalRef() throws Exception {
    getMockEndpoint("mock:b").expectedBodiesReceived("ABC");
    template.sendBody("direct:b","CBA");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").marshal().custom("reverse").to("mock:a");
        from("direct:b").unmarshal().custom("reverse").to("mock:b");
      }
    }
;
  }
public static final class MyReverseDataFormat extends ServiceSupport implements DataFormat {
    public void marshal(    Exchange exchange,    Object graph,    OutputStream stream) throws Exception {
      byte[] bytes=exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class,graph);
      String body=reverseBytes(bytes);
      stream.write(body.getBytes());
    }
    public Object unmarshal(    Exchange exchange,    InputStream stream) throws Exception {
      byte[] bytes=exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class,stream);
      String body=reverseBytes(bytes);
      return body;
    }
    private String reverseBytes(    byte[] data){
      StringBuilder sb=new StringBuilder(data.length);
      for (int i=data.length - 1; i >= 0; i--) {
        char ch=(char)data[i];
        sb.append(ch);
      }
      return sb.toString();
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
