/** 
 * Default error handler test with trace
 * @version 
 */
public class DefaultErrorHandlerOnExceptionTraceTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myProcessor",new MyProcessor());
    return jndi;
  }
  @Test public void testOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:trace").expectedMessageCount(2);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    TraceEventMessage msg1=getMockEndpoint("mock:trace").getReceivedExchanges().get(0).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg2=getMockEndpoint("mock:trace").getReceivedExchanges().get(1).getIn().getBody(TraceEventMessage.class);
    assertEquals("direct://start",msg1.getFromEndpointUri());
    assertEquals("ref:myProcessor",msg1.getToNode());
    assertEquals("ref:myProcessor",msg2.getPreviousNode());
    assertEquals("mock://result",msg2.getToNode());
  }
  @Test public void testWithError() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:boom");
    mock.expectedMessageCount(1);
    getMockEndpoint("mock:trace").expectedMessageCount(4);
    template.sendBody("direct:start","Kabom");
    assertMockEndpointsSatisfied();
    TraceEventMessage msg1=getMockEndpoint("mock:trace").getReceivedExchanges().get(0).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg2=getMockEndpoint("mock:trace").getReceivedExchanges().get(1).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg3=getMockEndpoint("mock:trace").getReceivedExchanges().get(2).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg4=getMockEndpoint("mock:trace").getReceivedExchanges().get(3).getIn().getBody(TraceEventMessage.class);
    assertEquals("direct://start",msg1.getFromEndpointUri());
    assertEquals("ref:myProcessor",msg1.getToNode());
    assertEquals("ref:myProcessor",msg2.getPreviousNode());
    assertEquals("OnException[IllegalArgumentException]",msg2.getToNode());
    assertEquals("OnException[IllegalArgumentException]",msg3.getPreviousNode());
    assertEquals("log://boom",msg3.getToNode());
    assertEquals("log://boom",msg4.getPreviousNode());
    assertEquals("mock://boom",msg4.getToNode());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        Tracer tracer=new Tracer();
        tracer.setDestinationUri("mock:trace");
        context.addInterceptStrategy(tracer);
        onException(IllegalArgumentException.class).handled(true).to("log:boom").to("mock:boom");
        from("direct:start").process("myProcessor").to("mock:result");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Kabom".equals(body)) {
        throw new IllegalArgumentException("Boom");
      }
      exchange.getIn().setBody("Bye World");
    }
  }
}
