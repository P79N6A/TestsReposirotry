public class CamelDestinationTest extends CamelTransportTestSupport {
  private Message destMessage;
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        onException(RuntimeCamelException.class).handled(true).to("mock:error");
        from("direct:Producer").to("direct:EndpointA");
      }
    }
;
  }
  protected CamelContext createCamelContext() throws Exception {
    return new DefaultCamelContext();
  }
  @Test public void testCamelDestinationConfiguration() throws Exception {
    QName testEndpointQName=new QName("http://camel.apache.org/camel-test","port");
    SpringBusFactory bf=new SpringBusFactory();
    BusFactory.setDefaultBus(null);
    Bus bus=bf.createBus("/org/apache/camel/component/cxf/transport/CamelDestination.xml");
    BusFactory.setDefaultBus(bus);
    endpointInfo.setAddress("camel://direct:EndpointA");
    endpointInfo.setName(testEndpointQName);
    CamelDestination destination=new CamelDestination(null,bus,null,endpointInfo);
    assertEquals("{http://camel.apache.org/camel-test}port.camel-destination",destination.getBeanName());
    CamelContext context=destination.getCamelContext();
    assertNotNull("The camel context which get from camel destination is not null",context);
    assertEquals("Get the wrong camel context",context.getName(),"dest_context");
    assertEquals("The camel context should has two routers",context.getRoutes().size(),2);
    bus.shutdown(false);
  }
  public CamelDestination setupCamelDestination(  EndpointInfo endpointInfo,  boolean send) throws IOException {
    ConduitInitiator conduitInitiator=mock(ConduitInitiator.class);
    CamelDestination camelDestination=new CamelDestination(context,bus,conduitInitiator,endpointInfo);
    if (send) {
      observer=new MessageObserver(){
        public void onMessage(        Message m){
          Exchange exchange=new ExchangeImpl();
          exchange.setInMessage(m);
          m.setExchange(exchange);
          destMessage=m;
        }
      }
;
      camelDestination.setMessageObserver(observer);
    }
    return camelDestination;
  }
  @Test public void testGetTransportFactoryFromBus() throws Exception {
    Bus bus=BusFactory.getDefaultBus();
    assertNotNull(bus.getExtension(ConduitInitiatorManager.class).getConduitInitiator(CamelTransportFactory.TRANSPORT_ID));
  }
  @Test public void testOneWayDestination() throws Exception {
    destMessage=null;
    inMessage=null;
    EndpointInfo conduitEpInfo=new EndpointInfo();
    conduitEpInfo.setAddress("camel://direct:Producer");
    CamelConduit conduit=setupCamelConduit(conduitEpInfo,true,false);
    Message outMessage=new MessageImpl();
    CamelDestination destination=null;
    try {
      endpointInfo.setAddress("camel://direct:EndpointA");
      destination=setupCamelDestination(endpointInfo,true);
    }
 catch (    IOException e) {
      assertFalse("The CamelDestination activate should not through exception ",false);
      e.printStackTrace();
    }
    sendoutMessage(conduit,outMessage,true,"HelloWorld");
    assertTrue("The destiantion should have got the message ",destMessage != null);
    verifyReceivedMessage(destMessage,"HelloWorld");
    destination.shutdown();
  }
  private void verifyReceivedMessage(  Message inMessage,  String content) throws IOException {
    ByteArrayInputStream bis=(ByteArrayInputStream)inMessage.getContent(InputStream.class);
    byte bytes[]=new byte[bis.available()];
    bis.read(bytes);
    String reponse=new String(bytes);
    assertEquals("The reponse date should be equals",content,reponse);
  }
  @Test public void testRoundTripDestination() throws Exception {
    inMessage=null;
    EndpointInfo conduitEpInfo=new EndpointInfo();
    conduitEpInfo.setAddress("camel://direct:Producer");
    CamelConduit conduit=setupCamelConduit(conduitEpInfo,true,false);
    final Message outMessage=new MessageImpl();
    endpointInfo.setAddress("camel://direct:EndpointA");
    final CamelDestination destination=setupCamelDestination(endpointInfo,true);
    MessageObserver observer=new MessageObserver(){
      public void onMessage(      Message m){
        try {
          Exchange exchange=new ExchangeImpl();
          exchange.setInMessage(m);
          m.setExchange(exchange);
          verifyReceivedMessage(m,"HelloWorld");
          Conduit backConduit;
          backConduit=getBackChannel(destination,m);
          Message replyMessage=new MessageImpl();
          sendoutMessage(backConduit,replyMessage,true,"HelloWorld Response");
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    MockEndpoint error=context.getEndpoint("mock:error",MockEndpoint.class);
    error.expectedMessageCount(0);
    destination.setMessageObserver(observer);
    sendoutMessage(conduit,outMessage,false,"HelloWorld");
    verifyReceivedMessage(inMessage,"HelloWorld Response");
    error.assertIsSatisfied();
    destination.shutdown();
  }
  @Test public void testRoundTripDestinationWithFault() throws Exception {
    inMessage=null;
    EndpointInfo conduitEpInfo=new EndpointInfo();
    conduitEpInfo.setAddress("camel://direct:Producer");
    CamelConduit conduit=setupCamelConduit(conduitEpInfo,true,false);
    final Message outMessage=new MessageImpl();
    endpointInfo.setAddress("camel://direct:EndpointA");
    final CamelDestination destination=setupCamelDestination(endpointInfo,true);
    destination.setCheckException(true);
    MessageObserver observer=new MessageObserver(){
      public void onMessage(      Message m){
        try {
          Exchange exchange=new ExchangeImpl();
          exchange.setInMessage(m);
          m.setExchange(exchange);
          verifyReceivedMessage(m,"HelloWorld");
          Conduit backConduit;
          backConduit=getBackChannel(destination,m);
          Message replyMessage=new MessageImpl();
          replyMessage.setContent(Exception.class,new RuntimeCamelException());
          sendoutMessage(backConduit,replyMessage,true,"HelloWorld Fault");
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    MockEndpoint error=context.getEndpoint("mock:error",MockEndpoint.class);
    error.expectedMessageCount(1);
    destination.setMessageObserver(observer);
    sendoutMessage(conduit,outMessage,false,"HelloWorld");
    verifyReceivedMessage(inMessage,"HelloWorld Fault");
    error.assertIsSatisfied();
    destination.shutdown();
  }
  private Conduit getBackChannel(  CamelDestination destination,  Message m) throws IOException {
    return destination.getInbuiltBackChannel(m);
  }
  @Test public void testExceptionForwardedToExchange() throws IOException {
    final RuntimeException expectedException=new RuntimeException("We simulate an exception in CXF processing");
    DefaultCamelContext camelContext=new DefaultCamelContext();
    CamelDestination dest=mock(CamelDestination.class);
    doThrow(expectedException).when(dest).incoming(isA(org.apache.camel.Exchange.class));
    ConsumerProcessor consumerProcessor=dest.new ConsumerProcessor();
    DefaultExchange exchange=new DefaultExchange(camelContext);
    consumerProcessor.process(exchange);
    Exception exc=exchange.getException();
    assertNotNull(exc);
    assertEquals(expectedException,exc);
  }
  @Test public void testCAMEL4073() throws Exception {
    try {
      Endpoint.publish("camel://foo",new Person(){
        public void getPerson(        Holder<String> personId,        Holder<String> ssn,        Holder<String> name) throws UnknownPersonFault {
        }
      }
);
      fail("Should throw and Exception");
    }
 catch (    WebServiceException ex) {
      Throwable c=ex.getCause();
      assertNotNull(c);
      assertTrue(c instanceof NoSuchEndpointException);
    }
  }
}
