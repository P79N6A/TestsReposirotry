@Ignore("Test manually as CI server cannot run this test") public class PublishSubscribeTest extends CamelTestSupport {
  private int port1;
  private int port2;
  private int port3;
  @EndpointInject(uri="mock:neverland") private MockEndpoint unreachableEndpoint;
  @EndpointInject(uri="mock:notification") private MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") private ProducerTemplate producerTemplate;
  @Override @Before public void setUp() throws Exception {
    port1=AvailablePortFinder.getNextAvailable(17189);
    port2=AvailablePortFinder.getNextAvailable(port1 + 1);
    port3=AvailablePortFinder.getNextAvailable(port2 + 1);
    super.setUp();
  }
  @Test public void testPresenceAgentBasedPubSub() throws Exception {
    unreachableEndpoint.expectedMessageCount(0);
    resultEndpoint.expectedMinimumMessageCount(1);
    producerTemplate.sendBodyAndHeader("sip://agent@localhost:" + port1 + "?stackName=client&eventHeaderName=evtHdrName&eventId=evtid&fromUser=user2&fromHost=localhost&fromPort="+ port3,"EVENT_A","REQUEST_METHOD",Request.PUBLISH);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        fromF("sip://agent@localhost:%s?stackName=PresenceAgent&presenceAgent=true&eventHeaderName=evtHdrName&eventId=evtid",port1).to("log:neverland").to("mock:neverland");
        fromF("sip://johndoe@localhost:%s?stackName=Subscriber&toUser=agent&toHost=localhost&toPort=%s&eventHeaderName=evtHdrName&eventId=evtid",port2,port1).to("log:notification").to("mock:notification");
      }
    }
;
  }
}
