public class MulticastDslTest extends ContextTestSupport {
  @Test public void testMulticastDsl() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("onPrepare",true);
    mock.expectedBodiesReceived(5);
    template.sendBody("direct:start",1);
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast().onPrepare().message(m -> m.setHeader("onPrepare",true)).aggregationStrategy().body(Integer.class,(o,n) -> o != null ? o + n : n).to("direct:increase-by-1").to("direct:increase-by-2").end().to("mock:result");
        from("direct:increase-by-1").bean(new Increase(1));
        from("direct:increase-by-2").bean(new Increase(2));
      }
    }
;
  }
public static class Increase {
    private final int amount;
    public Increase(    int amount){
      this.amount=amount;
    }
    public int add(    int num){
      return num + amount;
    }
  }
}
