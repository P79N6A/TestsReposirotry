public class CxfPayloadRouterContentLengthTest extends CamelTestSupport {
  private static final String RESPONSE_STRING="This is the response string";
  private static final String RESPONSE_MESSAGE="<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>" + "<ns0:payload xmlns:ns0=\"http://schema.apache.org/test\"><ns0:response>" + RESPONSE_STRING + "</ns0:response></ns0:payload>"+ "</s:Body></s:Envelope>";
  private static final String REQUEST_MESSAGE="<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>" + "<ns0:payload xmlns:ns0=\"http://schema.apache.org/test\"><ns0:request>foo</ns0:request></ns0:payload>" + "</s:Body></s:Envelope>";
  private static final int JETTY_PORT=AvailablePortFinder.getNextAvailable();
  private AbstractXmlApplicationContext applicationContext;
  private Server server;
static {
    System.setProperty("CXFTestSupport.jettyPort",Integer.toString(JETTY_PORT));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    return SpringCamelContext.springCamelContext(applicationContext);
  }
  @Before public void setUp() throws Exception {
    log.info("Starting jetty server at port {}",JETTY_PORT);
    server=new Server();
    HttpConfiguration httpconf=new HttpConfiguration();
    httpconf.setSendServerVersion(false);
    ServerConnector http=new ServerConnector(server,new HttpConnectionFactory(httpconf));
    http.setPort(JETTY_PORT);
    server.addConnector(http);
    server.setHandler(new AbstractHandler(){
      @Override public void handle(      String target,      Request baseRequest,      HttpServletRequest request,      HttpServletResponse response) throws IOException, ServletException {
        response.setContentType("text/xml");
        response.setContentLength(RESPONSE_MESSAGE.length());
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        PrintWriter pw=response.getWriter();
        pw.write(RESPONSE_MESSAGE);
        pw.close();
      }
    }
);
    server.start();
    log.info("Start Routing Scenario at port {}",CXFTestSupport.getPort1());
    applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfPayloadRouterContentLengthBeans.xml");
    super.setUp();
    assertNotNull("Should have created a valid spring context",applicationContext);
  }
  @After public void tearDown() throws Exception {
    IOHelper.close(applicationContext);
    if (server != null && server.isRunning()) {
      server.stop();
      server.join();
    }
    super.tearDown();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("cxf:bean:proxyEndpoint?dataFormat=PAYLOAD").removeHeaders(".*").to("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD");
      }
    }
;
  }
  @Test public void testInvokeRouter() throws IOException {
    CloseableHttpClient httpclient=HttpClients.createDefault();
    long contentLength=0;
    boolean isChunked=false;
    String receivedContent=null;
    try {
      HttpPost httppost=new HttpPost("http://localhost:" + CXFTestSupport.getPort1() + "/TEST/PROXY");
      StringEntity reqEntity=new StringEntity(REQUEST_MESSAGE,ContentType.TEXT_XML);
      reqEntity.setChunked(false);
      httppost.setEntity(reqEntity);
      CloseableHttpResponse response=httpclient.execute(httppost);
      try {
        HttpEntity respEntity=response.getEntity();
        contentLength=respEntity.getContentLength();
        isChunked=respEntity.isChunked();
        receivedContent=EntityUtils.toString(respEntity);
        EntityUtils.consume(response.getEntity());
      }
  finally {
        response.close();
      }
    }
  finally {
      httpclient.close();
    }
    assertNotNull(receivedContent);
    if (!isChunked) {
      assertEquals(receivedContent.length(),contentLength);
    }
    assertTrue("[" + receivedContent + "] does not contain ["+ RESPONSE_STRING+ "]",receivedContent.contains(RESPONSE_STRING));
    assertTrue("[" + receivedContent + "] does not contain the closing Envelope tag.",receivedContent.matches(".*\\</.*:Envelope\\>"));
  }
}
