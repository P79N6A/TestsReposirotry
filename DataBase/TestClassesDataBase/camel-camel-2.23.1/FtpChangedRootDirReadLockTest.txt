/** 
 */
public class FtpChangedRootDirReadLockTest extends FtpServerTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FtpChangedRootDirReadLockTest.class);
  protected String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/?password=admin&readLock=changed&readLockCheckInterval=1000&delete=true";
  }
  @Test public void testChangedReadLock() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedFileExists("target/out/slowfile.dat");
    writeSlowFile();
    assertMockEndpointsSatisfied();
    String content=context.getTypeConverter().convertTo(String.class,new File("target/out/slowfile.dat"));
    String[] lines=content.split(LS);
    assertEquals("There should be 20 lines in the file",20,lines.length);
    for (int i=0; i < 20; i++) {
      assertEquals("Line " + i,lines[i]);
    }
  }
  private void writeSlowFile() throws Exception {
    LOG.debug("Writing slow file...");
    createDirectory(FTP_ROOT_DIR + "/");
    FileOutputStream fos=new FileOutputStream(FTP_ROOT_DIR + "/slowfile.dat",true);
    for (int i=0; i < 20; i++) {
      fos.write(("Line " + i + LS).getBytes());
      LOG.debug("Writing line " + i);
      Thread.sleep(200);
    }
    fos.flush();
    fos.close();
    LOG.debug("Writing slow file DONE...");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl()).to("file:target/out","mock:result");
      }
    }
;
  }
}
