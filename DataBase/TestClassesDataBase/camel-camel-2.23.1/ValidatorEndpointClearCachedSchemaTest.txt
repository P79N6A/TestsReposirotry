/** 
 * Tests whether the ValidatorEndpoint.clearCachedSchema() can be executed when several sender threads are running.
 */
public class ValidatorEndpointClearCachedSchemaTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(ValidatorEndpointClearCachedSchemaTest.class);
  private SimpleRegistry simpleReg;
  private CamelContext context;
  @Test public void testClearCachedSchema() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    new Sender().run();
    ExecutorService senderPool=Executors.newFixedThreadPool(5);
    ExecutorService executorClearCache=Executors.newFixedThreadPool(1);
    for (int i=0; i < 5; i++) {
      senderPool.execute(new Sender());
      if (i == 2) {
        executorClearCache.execute(new ClearCache());
      }
    }
    senderPool.shutdown();
    executorClearCache.shutdown();
    senderPool.awaitTermination(2,TimeUnit.SECONDS);
    List<Exchange> exchanges=mock.getExchanges();
    assertNotNull(exchanges);
    assertTrue("Less then expected exchanges",exchanges.size() > 5);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    String handlerPackageSystemProp="java.protocol.handler.pkgs";
    String customUrlHandlerPackage="org.apache.camel.urlhandler";
    registerSystemProperty(handlerPackageSystemProp,customUrlHandlerPackage,"|");
    simpleReg=new SimpleRegistry();
    context=new DefaultCamelContext(simpleReg);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("validator:pd:somefile.xsd").convertBodyTo(String.class).to("log:after").to("mock:result");
      }
    }
;
  }
private class Sender implements Runnable {
    private final String message="<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<p:TestMessage xmlns:p=\"http://apache.camel.org/test\">" + "<MessageContent>MessageContent</MessageContent>"+ "</p:TestMessage>";
    private final byte[] messageBytes=message.getBytes(StandardCharsets.UTF_8);
    @Override public void run(){
      for (int j=0; j < 5; j++) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
        sendBody("direct:start",messageBytes);
      }
    }
  }
private class ClearCache implements Runnable {
    @Override public void run(){
      try {
        Thread.sleep(200);
        clearCachedSchema();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  private void clearCachedSchema() throws Exception {
    Collection<Endpoint> endpoints=context.getEndpoints();
    for (    Endpoint endpoint : endpoints) {
      LOG.info("Endpoint URI: " + endpoint.getEndpointUri());
      if (endpoint.getEndpointUri().startsWith("validator:")) {
        ValidatorEndpoint xsltEndpoint=(ValidatorEndpoint)endpoint;
        xsltEndpoint.clearCachedSchema();
        LOG.info("schema cache cleared");
      }
    }
  }
}
