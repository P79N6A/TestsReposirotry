public class SqsConcurrentConsumerTest extends CamelTestSupport {
  private static final int NUM_CONCURRENT=10;
  private static final int NUM_MESSAGES=100;
  final Set<Long> threadNumbers=new HashSet<>();
  @Test public void consumeMessagesFromQueue() throws Exception {
    NotifyBuilder notifier=new NotifyBuilder(context).whenCompleted(NUM_MESSAGES).create();
    assertTrue("We didn't process " + NUM_MESSAGES + " messages as we expected!",notifier.matches(5,TimeUnit.SECONDS));
    if (isPlatform("windows")) {
    }
 else {
      if (threadNumbers.size() < (NUM_CONCURRENT / 2)) {
        fail(String.format("We were expecting to have about half of %d numbers of concurrent consumers, but only found %d",NUM_CONCURRENT,threadNumbers.size()));
      }
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry reg=super.createRegistry();
    AmazonSQSClientMock client=new AmazonSQSClientMock();
    createDummyMessages(client,NUM_MESSAGES);
    reg.bind("client",client);
    return reg;
  }
  private void createDummyMessages(  AmazonSQSClientMock client,  int numMessages){
    for (int counter=0; counter < numMessages; counter++) {
      Message message=new Message();
      message.setBody("Message " + counter);
      message.setMD5OfBody("6a1559560f67c5e7a7d5d838bf0272ee");
      message.setMessageId("f6fb6f99-5eb2-4be4-9b15-144774141458");
      message.setReceiptHandle("0NNAq8PwvXsyZkR6yu4nQ07FGxNmOBWi5");
      client.messages.add(message);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("aws-sqs://demo?concurrentConsumers=" + NUM_CONCURRENT + "&maxMessagesPerPoll=10&amazonSQSClient=#client").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            threadNumbers.add(Thread.currentThread().getId());
          }
        }
).log("processed a new message!");
      }
    }
;
  }
}
