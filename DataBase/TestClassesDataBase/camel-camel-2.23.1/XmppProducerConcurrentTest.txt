/** 
 * @version 
 */
public class XmppProducerConcurrentTest extends CamelTestSupport {
  private EmbeddedXmppTestServer embeddedXmppTestServer;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    embeddedXmppTestServer.bindSSLContextTo(registry);
    return registry;
  }
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files);
    getMockEndpoint("mock:result").assertNoDuplicates(body());
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    for (int i=0; i < files; i++) {
      final int index=i;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          template.sendBody("direct:start","Hello " + index);
          return null;
        }
      }
);
    }
    assertMockEndpointsSatisfied();
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "?connectionConfig=#customConnectionConfig&user=camel_consumer&password=secret&serviceName=apache.camel").to("mock:result");
      }
    }
;
  }
  @Override public void doPreSetup() throws Exception {
    embeddedXmppTestServer=new EmbeddedXmppTestServer();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    embeddedXmppTestServer.stop();
  }
}
