public class BaseEmbeddedKafkaTest extends CamelTestSupport {
  @ClassRule public static EmbeddedZookeeper zookeeper=new EmbeddedZookeeper(AvailablePortFinder.getNextAvailable(23000));
  @ClassRule public static EmbeddedKafkaBroker kafkaBroker=new EmbeddedKafkaBroker(0,AvailablePortFinder.getNextAvailable(24000),zookeeper.getConnection(),new Properties());
  private static final Logger LOG=LoggerFactory.getLogger(BaseEmbeddedKafkaTest.class);
  @BeforeClass public static void beforeClass(){
    LOG.info("### Embedded Zookeeper connection: " + zookeeper.getConnection());
    LOG.info("### Embedded Kafka cluster broker list: " + kafkaBroker.getBrokerList());
  }
  protected Properties getDefaultProperties(){
    Properties props=new Properties();
    LOG.info("Connecting to Kafka port {}",kafkaBroker.getPort());
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaBroker.getBrokerList());
    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,KafkaConstants.KAFKA_DEFAULT_SERIALIZER);
    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,KafkaConstants.KAFKA_DEFAULT_SERIALIZER);
    props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,KafkaConstants.KAFKA_DEFAULT_PARTITIONER);
    props.put(ProducerConfig.ACKS_CONFIG,"1");
    return props;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    Properties prop=new Properties();
    prop.setProperty("zookeeperPort","" + getZookeeperPort());
    prop.setProperty("kafkaPort","" + getKafkaPort());
    jndi.bind("prop",prop);
    return jndi;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("properties",new PropertiesComponent("ref:prop"));
    KafkaComponent kafka=new KafkaComponent(context);
    kafka.setBrokers("localhost:" + getKafkaPort());
    context.addComponent("kafka",kafka);
    return context;
  }
  protected static int getZookeeperPort(){
    return zookeeper.getPort();
  }
  protected static int getKafkaPort(){
    return kafkaBroker.getPort();
  }
}
