/** 
 * @version 
 */
public class FtpConsumerResumeDownloadTest extends FtpServerTestSupport {
  protected String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/myserver/?password=admin&localWorkDirectory=target/lwd&resumeDownload=true&binary=true";
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/lwd");
    deleteDirectory("target/out");
    super.setUp();
    createDirectory(FTP_ROOT_DIR + "/myserver");
    File temp=new File(FTP_ROOT_DIR + "/myserver","hello.txt");
    temp.createNewFile();
    FileOutputStream fos=new FileOutputStream(temp);
    fos.write("Hello\nWorld\nI was here".getBytes());
    fos.close();
    createDirectory("target/lwd");
    temp=new File("target/lwd/hello.txt.inprogress");
    temp.createNewFile();
    fos=new FileOutputStream(temp);
    fos.write("Hello\n".getBytes());
    fos.close();
  }
  @Test public void testResumeDownload() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(1).create();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello\nWorld\nI was here");
    context.startRoute("myRoute");
    assertMockEndpointsSatisfied();
    assertTrue(notify.matchesMockWaitTime());
    File out=new File("target/out/hello.txt");
    assertTrue("file should exists",out.exists());
    assertEquals("Hello\nWorld\nI was here",IOConverter.toString(out,null));
    File local=new File("target/lwd/hello.txt");
    assertFalse("Local work file should have been deleted",local.exists());
    File temp=new File("target/lwd/hello.txt.inprogress");
    assertFalse("Local work file should have been deleted",temp.exists());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).routeId("myRoute").noAutoStartup().to("mock:result","file://target/out");
      }
    }
;
  }
}
