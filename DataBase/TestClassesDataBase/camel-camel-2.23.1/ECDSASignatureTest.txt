public class ECDSASignatureTest extends CamelTestSupport {
  private String payload="Dear Alice, Rest assured it's me, signed Bob";
  private boolean ibmJDK;
  private PrivateKey privateKey;
  private X509Certificate x509;
  private boolean canRun=true;
  public ECDSASignatureTest() throws Exception {
    if (isJava16() && Security.getProvider("BC") == null) {
      Constructor<?> cons;
      Class<?> c=Class.forName("org.bouncycastle.jce.provider.BouncyCastleProvider");
      cons=c.getConstructor(new Class[]{});
      Provider provider=(java.security.Provider)cons.newInstance();
      Security.insertProviderAt(provider,2);
    }
    if (isJavaVendor("IBM")) {
      ibmJDK=true;
    }
    try {
      KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
      InputStream in=ECDSASignatureTest.class.getResourceAsStream("/org/apache/camel/component/crypto/ecdsa.jks");
      keyStore.load(in,"security".toCharArray());
      privateKey=(PrivateKey)keyStore.getKey("ECDSA","security".toCharArray());
      x509=(X509Certificate)keyStore.getCertificate("ECDSA");
    }
 catch (    Throwable e) {
      log.warn("Cannot setup keystore for running this test due " + e.getMessage() + ". This test is skipped.",e);
      canRun=false;
    }
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    if (ibmJDK || !canRun) {
      return new RouteBuilder[]{};
    }
    return new RouteBuilder[]{new RouteBuilder(){
      public void configure() throws Exception {
        context.getEndpoint("crypto:sign:ecdsa-sha1?algorithm=SHA1withECDSA",DigitalSignatureEndpoint.class).setPrivateKey(privateKey);
        context.getEndpoint("crypto:verify:ecdsa-sha1?algorithm=SHA1withECDSA",DigitalSignatureEndpoint.class).setPublicKey(x509.getPublicKey());
        from("direct:ecdsa-sha1").to("crypto:sign:ecdsa-sha1?algorithm=SHA1withECDSA").to("crypto:verify:ecdsa-sha1?algorithm=SHA1withECDSA").to("mock:result");
      }
    }
};
  }
  @Test public void testECDSASHA1() throws Exception {
    if (ibmJDK || !canRun) {
      return;
    }
    setupMock();
    sendBody("direct:ecdsa-sha1",payload);
    assertMockEndpointsSatisfied();
  }
  private MockEndpoint setupMock(){
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(payload);
    return mock;
  }
  public Exchange doTestSignatureRoute(  RouteBuilder builder) throws Exception {
    return doSignatureRouteTest(builder,null,Collections.<String,Object>emptyMap());
  }
  public Exchange doSignatureRouteTest(  RouteBuilder builder,  Exchange e,  Map<String,Object> headers) throws Exception {
    CamelContext context=new DefaultCamelContext();
    try {
      context.addRoutes(builder);
      context.start();
      MockEndpoint mock=context.getEndpoint("mock:result",MockEndpoint.class);
      mock.setExpectedMessageCount(1);
      ProducerTemplate template=context.createProducerTemplate();
      if (e != null) {
        template.send("direct:in",e);
      }
 else {
        template.sendBodyAndHeaders("direct:in",payload,headers);
      }
      assertMockEndpointsSatisfied();
      return mock.getReceivedExchanges().get(0);
    }
  finally {
      context.stop();
    }
  }
  @Before public void setUp() throws Exception {
    disableJMX();
    super.setUp();
  }
}
