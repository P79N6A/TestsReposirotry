/** 
 * Abstract base class for Fhir Integration tests generated by Camel API component maven plugin.
 */
public abstract class AbstractFhirTestSupport extends CamelTestSupport {
  private static final String TEST_OPTIONS_PROPERTIES="/test-options.properties";
  private static final ThreadLocal<FhirContext> FHIR_CONTEXT_THREAD_LOCAL=new ThreadLocal<>();
  private static final ThreadLocal<IGenericClient> GENERIC_CLIENT_THREAD_LOCAL=new ThreadLocal<>();
  protected Patient patient;
  FhirContext fhirContext;
  IGenericClient fhirClient;
  @Before public void cleanFhirServerState(){
    if (patientExists()) {
      deletePatient();
    }
    createPatient();
  }
  boolean patientExists(){
    try {
      Bundle bundle=fhirClient.search().byUrl("Patient?given=Vincent&family=Freeman").returnBundle(Bundle.class).execute();
      return !bundle.getEntry().isEmpty();
    }
 catch (    ResourceGoneException e) {
      return false;
    }
  }
  private void deletePatient(){
    fhirClient.delete().resourceConditionalByUrl("Patient?given=Vincent&family=Freeman").execute();
  }
  private void createPatient(){
    this.patient=new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman")).setActive(false);
    this.patient.setId(fhirClient.create().resource(patient).execute().getId());
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=super.createCamelContext();
    final Properties properties=new Properties();
    try {
      properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES));
    }
 catch (    Exception e) {
      throw new IOException(String.format("%s could not be loaded: %s",TEST_OPTIONS_PROPERTIES,e.getMessage()),e);
    }
    Map<String,Object> options=new HashMap<>();
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      options.put(entry.getKey().toString(),entry.getValue());
    }
    FhirVersionEnum version=FhirVersionEnum.valueOf((String)options.get("fhirVersion"));
    this.fhirContext=new FhirContext(version);
    FHIR_CONTEXT_THREAD_LOCAL.set(this.fhirContext);
    this.fhirClient=this.fhirContext.newRestfulGenericClient((String)options.get("serverUrl"));
    GENERIC_CLIENT_THREAD_LOCAL.set(this.fhirClient);
    final FhirConfiguration configuration=new FhirConfiguration();
    IntrospectionSupport.setProperties(configuration,options);
    configuration.setFhirContext(this.fhirContext);
    final FhirComponent component=new FhirComponent(context);
    component.setConfiguration(configuration);
    context.addComponent("fhir",component);
    return context;
  }
  @Override protected void postProcessTest() throws Exception {
    super.postProcessTest();
    this.fhirContext=FHIR_CONTEXT_THREAD_LOCAL.get();
    this.fhirClient=GENERIC_CLIENT_THREAD_LOCAL.get();
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @SuppressWarnings("unchecked") <T>T requestBodyAndHeaders(  String endpointUri,  Object body,  Map<String,Object> headers) throws CamelExecutionException {
    return (T)template().requestBodyAndHeaders(endpointUri,body,headers);
  }
  @SuppressWarnings("unchecked") <T>T requestBody(  String endpoint,  Object body) throws CamelExecutionException {
    return (T)template().requestBody(endpoint,body);
  }
}
