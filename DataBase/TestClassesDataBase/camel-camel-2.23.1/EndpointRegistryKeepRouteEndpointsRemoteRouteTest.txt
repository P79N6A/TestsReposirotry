public class EndpointRegistryKeepRouteEndpointsRemoteRouteTest extends ContextTestSupport {
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getGlobalOptions().put(Exchange.MAXIMUM_ENDPOINT_CACHE_SIZE,"20");
    return context;
  }
  @Test public void testEndpointRegistryKeepRouteEndpointsRemoveRoute() throws Exception {
    assertTrue(context.hasEndpoint("direct://start") != null);
    assertTrue(context.hasEndpoint("log://start") != null);
    assertTrue(context.hasEndpoint("log://foo") != null);
    assertTrue(context.hasEndpoint("mock://result") != null);
    assertTrue(context.hasEndpoint("direct://bar") != null);
    assertTrue(context.hasEndpoint("log://bar") != null);
    assertEquals(6,context.getEndpointRegistry().staticSize());
    assertFalse(context.hasEndpoint("mock://unknown0") != null);
    for (int i=0; i < 50; i++) {
      template.sendBody("mock:unknown" + i,"Hello " + i);
    }
    assertEquals(6,context.getEndpointRegistry().staticSize());
    assertTrue(context.hasEndpoint("direct://start") != null);
    assertTrue(context.hasEndpoint("log://start") != null);
    assertTrue(context.hasEndpoint("log://foo") != null);
    assertTrue(context.hasEndpoint("mock://result") != null);
    assertTrue(context.hasEndpoint("direct://bar") != null);
    assertTrue(context.hasEndpoint("log://bar") != null);
    context.stopRoute("bar");
    context.removeRoute("bar");
    assertEquals(4,context.getEndpointRegistry().staticSize());
    assertTrue(context.hasEndpoint("direct://start") != null);
    assertTrue(context.hasEndpoint("log://start") != null);
    assertTrue(context.hasEndpoint("log://foo") != null);
    assertTrue(context.hasEndpoint("mock://result") != null);
    assertFalse(context.hasEndpoint("direct://bar") != null);
    assertFalse(context.hasEndpoint("log://bar") != null);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("foo").to("log:start").to("log:foo").to("mock:result");
        from("direct:bar").routeId("bar").to("log:bar");
      }
    }
;
  }
}
