/** 
 * @version
 */
public class RollbackTest extends ContextTestSupport {
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:rollback").expectedMessageCount(0);
    template.requestBody("direct:start","ok");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRollback() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:rollback").expectedMessageCount(1);
    try {
      template.requestBody("direct:start","bad");
      fail("Should have thrown a RollbackExchangeException");
    }
 catch (    RuntimeCamelException e) {
      assertTrue(e.getCause() instanceof RollbackExchangeException);
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testRollbackWithExchange() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:rollback").expectedMessageCount(1);
    Exchange out=template.request("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("bad");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertNotNull(out.getException());
    assertIsInstanceOf(RollbackExchangeException.class,out.getException());
    assertEquals("Should be marked as rollback",true,out.isRollbackOnly());
    assertEquals(0,out.getIn().getHeader(Exchange.REDELIVERY_COUNTER));
    assertEquals(false,out.getIn().getHeader(Exchange.REDELIVERED));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").choice().when(body().isNotEqualTo("ok")).to("mock:rollback").rollback("That do not work").otherwise().to("mock:result").end();
      }
    }
;
  }
}
