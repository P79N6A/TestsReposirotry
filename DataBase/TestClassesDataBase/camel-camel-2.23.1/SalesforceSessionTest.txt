public class SalesforceSessionTest {
  private static final int TIMEOUT=1;
  private final KeyStoreParameters parameters;
  public SalesforceSessionTest(){
    parameters=new KeyStoreParameters();
    parameters.setResource("test.p12");
    parameters.setType("PKCS12");
    parameters.setPassword("password");
  }
  @Test public void shouldGenerateJwtTokens(){
    final SalesforceLoginConfig config=new SalesforceLoginConfig("https://login.salesforce.com","ABCD","username",parameters,true);
    final SalesforceSession session=new SalesforceSession(new DefaultCamelContext(),mock(SalesforceHttpClient.class),TIMEOUT,config);
    final String jwtAssertion=session.generateJwtAssertion();
    Assert.assertNotNull(jwtAssertion);
  }
  @Test public void shouldUseTheOverridenInstanceUrl() throws Exception {
    final SalesforceLoginConfig config=new SalesforceLoginConfig("https://login.salesforce.com","clientId","clientSecret","username","password",true);
    config.setInstanceUrl("https://custom.salesforce.com:8443");
    final SalesforceSession session=login(config);
    assertEquals("https://custom.salesforce.com:8443",session.getInstanceUrl());
  }
  @Test public void shouldUseTheSalesforceSuppliedInstanceUrl() throws Exception {
    final SalesforceLoginConfig config=new SalesforceLoginConfig("https://login.salesforce.com","clientId","clientSecret","username","password",true);
    final SalesforceSession session=login(config);
    assertEquals("https://eu11.salesforce.com",session.getInstanceUrl());
  }
  static SalesforceSession login(  final SalesforceLoginConfig config) throws InterruptedException, TimeoutException, ExecutionException, SalesforceException {
    final SalesforceHttpClient client=mock(SalesforceHttpClient.class);
    final SalesforceSession session=new SalesforceSession(new DefaultCamelContext(),client,TIMEOUT,config);
    final Request request=mock(Request.class);
    when(client.POST(eq("https://login.salesforce.com/services/oauth2/token"))).thenReturn(request);
    when(request.content(any())).thenReturn(request);
    when(request.timeout(anyLong(),any())).thenReturn(request);
    final ContentResponse response=mock(ContentResponse.class);
    when(request.send()).thenReturn(response);
    when(response.getStatus()).thenReturn(HttpStatus.OK_200);
    when(response.getContentAsString()).thenReturn("{\"instance_url\": \"https://eu11.salesforce.com\"}");
    session.login(null);
    return session;
  }
}
