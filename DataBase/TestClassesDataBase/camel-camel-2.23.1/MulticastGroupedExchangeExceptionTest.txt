public class MulticastGroupedExchangeExceptionTest extends ContextTestSupport {
  @Test public void testBothGood() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","dummy");
    assertMockEndpointsSatisfied();
    Exchange received=result.getReceivedExchanges().get(0);
    assertThat("no exception",received.isFailed(),is(false));
  }
  @Test public void testBFail() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    MockEndpoint endpointB=getMockEndpoint("mock:endpointB");
    endpointB.whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new IllegalArgumentException("Fake exception");
      }
    }
);
    template.sendBody("direct:start","dummy");
    assertMockEndpointsSatisfied();
    Exchange received=result.getReceivedExchanges().get(0);
    assertThat("no exception",received.isFailed(),is(false));
  }
  @Test public void testAFail() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    MockEndpoint endpointA=getMockEndpoint("mock:endpointA");
    endpointA.whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new IllegalArgumentException("Fake exception");
      }
    }
);
    template.sendBody("direct:start","dummy");
    assertMockEndpointsSatisfied();
    Exchange received=result.getReceivedExchanges().get(0);
    assertThat("no exception",received.isFailed(),is(false));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast(new GroupedExchangeAggregationStrategy()).to("mock:endpointA","mock:endpointB").end().to("mock:result");
      }
    }
;
  }
}
