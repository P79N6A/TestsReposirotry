/** 
 * A unit test to verify mbean registration of multi-instances of a processor
 * @version 
 */
public class MultiInstanceProcessorTest extends JmxInstrumentationUsingDefaultsTest {
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Thread.sleep(10);
          }
        }
).to("mock:end").to("mock:end");
      }
    }
;
  }
  /** 
 * It retrieves a mbean for each "to" processor instance in the query ":type=processor"
 */
  @Override @Test public void testMBeansRegistered() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    assertDefaultDomain();
    resolveMandatoryEndpoint("mock:end",MockEndpoint.class);
    Set<ObjectName> s=mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"),null);
    assertEquals("Could not find 2 endpoints: " + s,2,s.size());
    s=mbsc.queryNames(new ObjectName(domainName + ":type=context,*"),null);
    assertEquals("Could not find 1 context: " + s,1,s.size());
    s=mbsc.queryNames(new ObjectName(domainName + ":type=processors,*"),null);
    assertEquals("Could not find 3 processor: " + s,3,s.size());
    s=mbsc.queryNames(new ObjectName(domainName + ":type=routes,*"),null);
    assertEquals("Could not find 1 route: " + s,1,s.size());
  }
  @Override @Test public void testCounters() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:end",MockEndpoint.class);
    resultEndpoint.expectedBodiesReceived("<hello>world!</hello>","<hello>world!</hello>");
    sendBody("direct:start","<hello>world!</hello>");
    resultEndpoint.assertIsSatisfied();
    verifyCounter(mbsc,new ObjectName(domainName + ":type=routes,*"));
  }
}
