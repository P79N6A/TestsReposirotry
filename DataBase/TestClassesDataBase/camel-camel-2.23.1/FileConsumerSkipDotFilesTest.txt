/** 
 * Unit test that file consumer will skip any files starting with a dot
 */
public class FileConsumerSkipDotFilesTest extends ContextTestSupport {
  private String fileUrl="file://target/dotfiles/?initialDelay=0&delay=10";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/dotfiles");
    super.setUp();
  }
  @Test public void testSkipDotFiles() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    mock.setResultWaitTime(100);
    template.sendBodyAndHeader("file:target/dotfiles/","This is a dot file",Exchange.FILE_NAME,".skipme");
    mock.assertIsSatisfied();
  }
  @Test public void testSkipDotFilesWithARegularFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/dotfiles/","This is a dot file",Exchange.FILE_NAME,".skipme");
    template.sendBodyAndHeader("file:target/dotfiles/","Hello World",Exchange.FILE_NAME,"hello.txt");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
