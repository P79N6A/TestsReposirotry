/** 
 * Unit test for setting arbitrary payload in PAYLOAD mode
 */
public class CxfDispatchPayloadTest extends CxfDispatchTestSupport {
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfDispatchPayloadBeans.xml");
  }
  @Test public void testDispatchPayload() throws Exception {
    final String name="Tila";
    Exchange exchange=sendJaxWsDispatchPayload(name,false);
    assertEquals("The request should be handled sucessfully ",exchange.isFailed(),false);
    org.apache.camel.Message response=exchange.getOut();
    assertNotNull("The response must not be null ",response);
    String value=decodeResponseFromPayload((CxfPayload<?>)response.getBody(CxfPayload.class),exchange);
    assertTrue("The response must match the request ",value.endsWith(name));
  }
  @Test public void testDispatchPayloadOneway() throws Exception {
    final String name="Tila";
    Exchange exchange=sendJaxWsDispatchPayload(name,true);
    assertEquals("The request should be handled sucessfully ",exchange.isFailed(),false);
    org.apache.camel.Message response=exchange.getOut();
    assertNotNull("The response must not be null ",response);
    assertNull("The response must be null ",response.getBody());
  }
  private Exchange sendJaxWsDispatchPayload(  final String name,  final boolean oneway){
    Exchange exchange=template.send("direct:producer",new Processor(){
      public void process(      final Exchange exchange){
        CxfPayload<SoapHeader> request=encodeRequestInPayload(oneway ? PAYLOAD_ONEWAY_TEMPLATE : PAYLOAD_TEMPLATE,name,exchange);
        exchange.getIn().setBody(request,CxfPayload.class);
        exchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE,DISPATCH_NS);
        if (oneway) {
          exchange.getIn().setHeader(CxfConstants.OPERATION_NAME,INVOKE_ONEWAY_NAME);
        }
      }
    }
);
    return exchange;
  }
  private static <T>CxfPayload<T> encodeRequestInPayload(  String form,  String name,  Exchange exchange){
    String payloadstr=String.format(form,name);
    CxfPayload<T> payload=null;
    try {
      Document doc=getDocumentBuilderFactory().newDocumentBuilder().parse(new ByteArrayInputStream(payloadstr.getBytes("utf-8")));
      payload=CxfPayloadConverter.documentToCxfPayload(doc,exchange);
    }
 catch (    Exception e) {
    }
    return payload;
  }
  private <T>String decodeResponseFromPayload(  CxfPayload<T> payload,  Exchange exchange){
    String value=null;
    NodeList nodes=CxfPayloadConverter.cxfPayloadToNodeList(payload,exchange);
    if (nodes != null && nodes.getLength() == 1 && nodes.item(0) instanceof Element) {
      value=getResponseType((Element)nodes.item(0));
    }
    return value;
  }
}
