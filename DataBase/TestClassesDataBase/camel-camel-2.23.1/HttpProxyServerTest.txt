/** 
 * @version 
 */
public class HttpProxyServerTest extends BaseHttpTest {
  private HttpServer proxy;
  @Before @Override public void setUp() throws Exception {
    Map<String,String> expectedHeaders=new HashMap<>();
    expectedHeaders.put("Proxy-Connection","Keep-Alive");
    proxy=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("*",new HeaderValidationHandler("GET",null,null,getExpectedContent(),expectedHeaders)).create();
    proxy.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (proxy != null) {
      proxy.stop();
    }
  }
  @Override protected HttpProcessor getBasicHttpProcessor(){
    List<HttpRequestInterceptor> requestInterceptors=new ArrayList<>();
    requestInterceptors.add(new RequestProxyBasicAuth());
    List<HttpResponseInterceptor> responseInterceptors=new ArrayList<>();
    responseInterceptors.add(new ResponseContent());
    responseInterceptors.add(new ResponseProxyBasicUnauthorized());
    ImmutableHttpProcessor httpproc=new ImmutableHttpProcessor(requestInterceptors,responseInterceptors);
    return httpproc;
  }
  @Test public void testDifferentHttpProxyConfigured() throws Exception {
    HttpEndpoint http1=context.getEndpoint("http4://www.google.com?proxyAuthHost=www.myproxy.com&proxyAuthPort=1234",HttpEndpoint.class);
    HttpEndpoint http2=context.getEndpoint("http4://www.google.com?test=parameter&proxyAuthHost=www.otherproxy.com&proxyAuthPort=2345",HttpEndpoint.class);
    assertEquals("Get a wrong endpoint uri of http1","http4://www.google.com?proxyAuthHost=www.myproxy.com&proxyAuthPort=1234",URISupport.normalizeUri(http1.getEndpointUri()));
    assertEquals("Get a wrong endpoint uri of http2","http4://www.google.com?proxyAuthHost=www.otherproxy.com&proxyAuthPort=2345&test=parameter",URISupport.normalizeUri(http2.getEndpointUri()));
    assertEquals("Should get the same EndpointKey",http1.getEndpointKey(),http2.getEndpointKey());
  }
  @Test public void httpGetWithProxyAndWithoutUser() throws Exception {
    Exchange exchange=template.request("http4://" + getProxyHost() + ":"+ getProxyPort()+ "?proxyAuthHost="+ getProxyHost()+ "&proxyAuthPort="+ getProxyPort(),new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchange(exchange);
  }
  private String getProxyHost(){
    return proxy.getInetAddress().getHostName();
  }
  private String getProxyPort(){
    return "" + proxy.getLocalPort();
  }
private static class RequestProxyBasicAuth implements HttpRequestInterceptor {
    public void process(    final HttpRequest request,    final HttpContext context) throws HttpException, IOException {
      String auth=null;
      String requestLine=request.getRequestLine().toString();
      if (requestLine.contains("http4://localhost")) {
        throw new HttpException("Get a wrong proxy GET url");
      }
      Header h=request.getFirstHeader(AUTH.PROXY_AUTH_RESP);
      if (h != null) {
        String s=h.getValue();
        if (s != null) {
          auth=s.trim();
        }
      }
      if (auth != null) {
        int i=auth.indexOf(' ');
        if (i == -1) {
          throw new ProtocolException("Invalid Authorization header: " + auth);
        }
        String authscheme=auth.substring(0,i);
        if (authscheme.equalsIgnoreCase("basic")) {
          String s=auth.substring(i + 1).trim();
          byte[] credsRaw=s.getBytes("ASCII");
          BinaryDecoder codec=new Base64();
          try {
            String creds=new String(codec.decode(credsRaw),"ASCII");
            context.setAttribute("proxy-creds",creds);
          }
 catch (          DecoderException ex) {
            throw new ProtocolException("Malformed BASIC credentials");
          }
        }
      }
    }
  }
private static class ResponseProxyBasicUnauthorized implements HttpResponseInterceptor {
    public void process(    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      if (response.getStatusLine().getStatusCode() == HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED) {
        response.addHeader(AUTH.PROXY_AUTH,"Basic realm=\"test realm\"");
      }
    }
  }
}
