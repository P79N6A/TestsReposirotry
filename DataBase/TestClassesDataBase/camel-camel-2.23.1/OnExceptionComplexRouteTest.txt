public class OnExceptionComplexRouteTest extends ContextTestSupport {
  protected MyServiceBean myServiceBean;
  @Test public void testNoError() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","<order><type>myType</type><user>James</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNoError2() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start2","<order><type>myType</type><user>James</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFunctionalError() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","<order><type>myType</type><user>Func</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFunctionalError2() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start2","<order><type>myType</type><user>Func</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testTechnicalError() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:tech.error").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","<order><type>myType</type><user>Tech</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testTechnicalError2() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:tech.error").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start2","<order><type>myType</type><user>Tech</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    myServiceBean=new MyServiceBean();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myServiceBean",myServiceBean);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).logStackTrace(false));
        onException(MyTechnicalException.class).handled(true).maximumRedeliveries(2).to("mock:tech.error");
        from("direct:start").onException(MyFunctionalException.class).maximumRedeliveries(0).end().to("bean:myServiceBean").to("mock:result");
        from("direct:start2").onException(MyFunctionalException.class).handled(true).maximumRedeliveries(0).to("mock:handled").end().to("bean:myServiceBean").to("mock:result");
      }
    }
;
  }
}
