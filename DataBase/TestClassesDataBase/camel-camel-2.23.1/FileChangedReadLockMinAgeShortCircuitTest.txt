/** 
 * @version
 */
public class FileChangedReadLockMinAgeShortCircuitTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FileChangedReadLockMinAgeShortCircuitTest.class);
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/changed/");
    createDirectory("target/changed/in");
    writeFile();
    Thread.sleep(100);
    super.setUp();
  }
  @Test public void testChangedReadLockMinAge() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedFileExists("target/changed/out/file.dat");
    mock.expectedMessagesMatches(exchangeProperty(Exchange.RECEIVED_TIMESTAMP).convertTo(long.class).isLessThan(new Date().getTime() + 15000));
    assertMockEndpointsSatisfied();
  }
  private void writeFile() throws Exception {
    LOG.debug("Writing file...");
    FileOutputStream fos=new FileOutputStream("target/changed/in/file.dat");
    fos.write("Line".getBytes());
    fos.flush();
    fos.close();
    LOG.debug("Writing file DONE...");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/changed/in?initialDelay=0&delay=10&readLock=changed&readLockMinAge=10&readLockCheckInterval=30000&readLockTimeout=90000").to("file:target/changed/out","mock:result");
      }
    }
;
  }
}
