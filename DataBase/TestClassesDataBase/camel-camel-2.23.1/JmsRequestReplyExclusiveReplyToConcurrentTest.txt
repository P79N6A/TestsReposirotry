/** 
 * @version
 */
public class JmsRequestReplyExclusiveReplyToConcurrentTest extends CamelTestSupport {
  private final int size=100;
  private final CountDownLatch latch=new CountDownLatch(size);
  @Test public void testJmsRequestReplyExclusiveFixedReplyTo() throws Exception {
    StopWatch watch=new StopWatch();
    ExecutorService executor=Executors.newFixedThreadPool(10);
    for (int i=0; i < size; i++) {
      final Integer num=i;
      executor.submit(new Runnable(){
        @Override public void run(){
          String reply=template.requestBody("direct:start","" + num,String.class);
          log.info("Sent {} expecting reply 'Hello {}' got --> {}",num,num,reply);
          assertNotNull(reply);
          assertEquals("Hello " + num,reply);
          latch.countDown();
        }
      }
);
    }
    log.info("Waiting to process {} messages...",size);
    assertTrue("All assertions outside the main thread above should have passed",latch.await(3,TimeUnit.SECONDS));
    long delta=watch.stop();
    log.info("Took {} millis",delta);
    Thread.sleep(1000);
    executor.shutdownNow();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("activemq:queue:foo?replyTo=bar&replyToType=Exclusive&concurrentConsumers=5&maxConcurrentConsumers=10&maxMessagesPerTask=100").to("log:reply").to("mock:reply");
        from("activemq:queue:foo?concurrentConsumers=5&maxConcurrentConsumers=10&maxMessagesPerTask=100").transform(body().prepend("Hello "));
      }
    }
;
  }
}
