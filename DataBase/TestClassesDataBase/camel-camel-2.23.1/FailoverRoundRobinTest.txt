/** 
 * @version 
 */
public class FailoverRoundRobinTest extends ContextTestSupport {
  @Test public void testFailoverRoundRobin() throws Exception {
    getMockEndpoint("mock:bad").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bad2").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:good").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:good2").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    resetMocks();
    getMockEndpoint("mock:bad").expectedMessageCount(0);
    getMockEndpoint("mock:bad2").expectedMessageCount(0);
    getMockEndpoint("mock:good").expectedMessageCount(0);
    getMockEndpoint("mock:good2").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").loadBalance().failover(-1,false,true).to("direct:bad","direct:bad2","direct:good","direct:good2");
        from("direct:bad").to("mock:bad").throwException(new IllegalArgumentException("Damn"));
        from("direct:bad2").to("mock:bad2").throwException(new IllegalArgumentException("Damn Again"));
        from("direct:good").to("mock:good");
        from("direct:good2").to("mock:good2");
      }
    }
;
  }
}
