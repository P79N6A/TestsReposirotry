/** 
 * @version 
 */
public class AsyncEndpointTryCatchFinally2Test extends ContextTestSupport {
  private static String beforeThreadName;
  private static String middleThreadName;
  private static String afterThreadName;
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:catch").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye World",reply);
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(middleThreadName));
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
    assertFalse("Should use different threads",middleThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("log:before").doTry().process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:camel?failFirstAttempts=1").doCatch(Exception.class).to("log:catch").to("mock:catch").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            middleThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:world").doFinally().to("log:finally").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:after").end().to("mock:result");
      }
    }
;
  }
}
