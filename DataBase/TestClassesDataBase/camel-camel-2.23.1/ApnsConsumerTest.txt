/** 
 * Unit test that we can produce JMS message from files
 */
public class ApnsConsumerTest extends CamelTestSupport {
  ApnsServerStub server;
  @Before public void startup() throws InterruptedException {
    server=ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT,TestConstants.TEST_FEEDBACK_PORT);
  }
  @After public void stop(){
    server.stop();
  }
  @Test(timeout=15000) public void testConsumer() throws Exception {
    byte[] deviceTokenBytes=ApnsUtils.createRandomDeviceTokenBytes();
    String deviceToken=ApnsUtils.encodeHexToken(deviceTokenBytes);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(InactiveDevice.class);
    byte[] feedBackBytes=ApnsUtils.generateFeedbackBytes(deviceTokenBytes);
    server.getToSend().write(feedBackBytes);
    Thread.sleep(1000);
    assertMockEndpointsSatisfied();
    InactiveDevice inactiveDevice=(InactiveDevice)mock.getExchanges().get(0).getIn().getBody();
    assertNotNull(inactiveDevice);
    assertNotNull(inactiveDevice.getDate());
    assertNotNull(inactiveDevice.getDeviceToken());
    assertEquals(deviceToken,inactiveDevice.getDeviceToken());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ApnsServiceFactory apnsServiceFactory=ApnsUtils.createDefaultTestConfiguration(camelContext);
    ApnsService apnsService=apnsServiceFactory.getApnsService();
    ApnsComponent apnsComponent=new ApnsComponent(apnsService);
    camelContext.addComponent("apns",apnsComponent);
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("apns:consumer?initialDelay=500&delay=500&timeUnit=MILLISECONDS").to("log:apns?showAll=true&multiline=true").to("mock:result");
      }
    }
;
  }
}
