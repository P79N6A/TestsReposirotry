/** 
 */
public class MulticastRedeliverTest extends ContextTestSupport {
  private static int counter;
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    template.sendBody("direct:test1","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testThrowExceptionAtA() throws Exception {
    counter=0;
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(0);
    try {
      template.sendBody("direct:test2","Hello World");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Forced",e.getCause().getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    assertEquals(1 + 3,counter);
  }
  @Test public void testThrowExceptionAtB() throws Exception {
    counter=0;
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:c").expectedMessageCount(0);
    try {
      template.sendBody("direct:test3","Hello World");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Forced",e.getCause().getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    assertEquals(1 + 3,counter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0));
        from("direct:test1").multicast().stopOnException().to("mock:a").to("mock:b");
        from("direct:test2").multicast().stopOnException().to("mock:a").to("direct:a").to("mock:b");
        from("direct:test3").multicast().stopOnException().to("mock:a").to("mock:b").to("direct:b").to("mock:c");
        from("direct:a").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            assertEquals("Hello World",exchange.getIn().getBody());
            assertFalse("Should not have OUT",exchange.hasOut());
            assertNull(exchange.getException());
            counter++;
            throw new IllegalArgumentException("Forced");
          }
        }
);
        from("direct:b").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            assertEquals("Hello World",exchange.getIn().getBody());
            assertFalse("Should not have OUT",exchange.hasOut());
            assertNull(exchange.getException());
            exchange.getOut().setBody("Bye World");
            counter++;
            throw new IllegalArgumentException("Forced");
          }
        }
);
      }
    }
;
  }
}
