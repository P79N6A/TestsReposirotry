/** 
 * Unit test for the retry until predicate
 */
public class OnExceptionRetryUntilWithDefaultErrorHandlerTest extends ContextTestSupport {
  private static int invoked;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myRetryHandler",new MyRetryBean());
    return jndi;
  }
  @Test public void testRetryUntil() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(1).logStackTrace(false));
        onException(MyFunctionalException.class).retryWhile(method("myRetryHandler")).redeliveryDelay(0).handled(true).transform().constant("Sorry").stop();
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new MyFunctionalException("Sorry you cannot do this");
          }
        }
);
      }
    }
);
    Object out=template.requestBody("direct:start","Hello World");
    assertEquals("Sorry",out);
    assertEquals(3,invoked);
  }
public class MyRetryBean {
    public boolean retry(    @Header(Exchange.REDELIVERY_COUNTER) Integer counter,    @Body String body,    @ExchangeException Exception causedBy){
      invoked++;
      assertEquals("Hello World",body);
      assertTrue(causedBy instanceof MyFunctionalException);
      return counter < 3;
    }
  }
}
