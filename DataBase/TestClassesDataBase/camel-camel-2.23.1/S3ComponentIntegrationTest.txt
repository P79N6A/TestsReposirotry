@Ignore("Must be manually tested. Provide your own accessKey and secretKey!") public class S3ComponentIntegrationTest extends CamelTestSupport {
  @EndpointInject(uri="direct:start") private ProducerTemplate template;
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @Test public void sendInOnly() throws Exception {
    result.expectedMessageCount(2);
    Exchange exchange1=template.send("direct:start",ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(S3Constants.KEY,"CamelUnitTest1");
        exchange.getIn().setBody("This is my bucket content.");
      }
    }
);
    Exchange exchange2=template.send("direct:start",ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(S3Constants.KEY,"CamelUnitTest2");
        exchange.getIn().setBody("This is my bucket content.");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertResultExchange(result.getExchanges().get(0));
    assertResultExchange(result.getExchanges().get(1));
    assertResponseMessage(exchange1.getIn());
    assertResponseMessage(exchange2.getIn());
  }
  @Test public void sendInOut() throws Exception {
    result.expectedMessageCount(1);
    Exchange exchange=template.send("direct:start",ExchangePattern.InOut,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(S3Constants.KEY,"CamelUnitTest");
        exchange.getIn().setBody("This is my bucket content.");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertResultExchange(result.getExchanges().get(0));
    assertResponseMessage(exchange.getOut());
  }
  private void assertResultExchange(  Exchange resultExchange){
    assertIsInstanceOf(InputStream.class,resultExchange.getIn().getBody());
    assertEquals("This is my bucket content.",resultExchange.getIn().getBody(String.class));
    assertEquals("mynewcamelbucket",resultExchange.getIn().getHeader(S3Constants.BUCKET_NAME));
    assertTrue(resultExchange.getIn().getHeader(S3Constants.KEY,String.class).startsWith("CamelUnitTest"));
    assertNull(resultExchange.getIn().getHeader(S3Constants.VERSION_ID));
    assertNotNull(resultExchange.getIn().getHeader(S3Constants.LAST_MODIFIED));
    assertEquals("3a5c8b1ad448bca04584ecb55b836264",resultExchange.getIn().getHeader(S3Constants.E_TAG));
    assertEquals("application/octet-stream",resultExchange.getIn().getHeader(S3Constants.CONTENT_TYPE));
    assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_ENCODING));
    assertEquals(26L,resultExchange.getIn().getHeader(S3Constants.CONTENT_LENGTH));
    assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_DISPOSITION));
    assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_MD5));
    assertNull(resultExchange.getIn().getHeader(S3Constants.CACHE_CONTROL));
  }
  private void assertResponseMessage(  Message message){
    assertEquals("3a5c8b1ad448bca04584ecb55b836264",message.getHeader(S3Constants.E_TAG));
    assertNull(message.getHeader(S3Constants.VERSION_ID));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        String s3EndpointUri="aws-s3://mynewcamelbucket?accessKey=xxx&secretKey=yyy&region=us-west-1&policy=%7B%22Version%22%3A%222008-10-17%22,%22Id%22%3A%22Policy4324355464%22," + "%22Statement%22%3A%5B%7B%22Sid%22%3A%22Stmt456464646477%22,%22Action%22%3A%5B%22s3%3AGetObject%22%5D,%22Effect%22%3A%22Allow%22,%22Resource%22%3A%5B%22arn%3A" + "aws%3As3%3A%3A%3Amynewcamelbucket/*%22%5D,%22Principal%22%3A%7B%22AWS%22%3A%5B%22*%22%5D%7D%7D%5D%7D";
        from("direct:start").to(s3EndpointUri);
        from(s3EndpointUri).to("mock:result");
      }
    }
;
  }
}
