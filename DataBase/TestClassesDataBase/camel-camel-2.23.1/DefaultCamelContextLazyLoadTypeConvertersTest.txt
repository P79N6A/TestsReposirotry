/** 
 * Tests the lazy loading property of the camel context. The default behavior is to load all of the type converters up front. When the lazy load property is enabled on the context, the loading will be deferred until the converters are accessed.
 */
public class DefaultCamelContextLazyLoadTypeConvertersTest extends TestSupport {
  private CamelContext context=new DefaultCamelContext();
  @SuppressWarnings("deprecation") @Test public void testLazyLoadDefault() throws Exception {
    assertFalse("Default setting should have been true",context.isLazyLoadTypeConverters());
  }
  @SuppressWarnings("deprecation") @Test public void testConvertLoadUpFront() throws Exception {
    context.setLazyLoadTypeConverters(false);
    doConvertTest();
  }
  @SuppressWarnings("deprecation") @Test public void testConvertLazyLoad() throws Exception {
    context.setLazyLoadTypeConverters(true);
    doConvertTest();
  }
  private void doConvertTest() throws Exception {
    context.start();
    convert();
    context.stop();
    convert();
  }
  private void convert() throws Exception {
    TypeConverter converter=context.getTypeConverter();
    Integer value=converter.convertTo(Integer.class,"1000");
    assertNotNull(value);
    assertEquals("Converted to Integer",new Integer(1000),value);
    String text=converter.convertTo(String.class,value);
    assertEquals("Converted to String","1000",text);
  }
}
