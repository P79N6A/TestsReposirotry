public class NettyCustomPipelineFactorySynchTest extends BaseNettyTest {
  private volatile boolean clientInvoked;
  private volatile boolean serverInvoked;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("cpf",new TestClientChannelPipelineFactory(null));
    registry.bind("spf",new TestServerChannelPipelineFactory(null));
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4:tcp://localhost:{{port}}?serverInitializerFactory=#spf&sync=true&textline=true").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'");
          }
        }
);
      }
    }
;
  }
  @Test public void testCustomClientPipelineFactory() throws Exception {
    String response=(String)template.requestBody("netty4:tcp://localhost:{{port}}?clientInitializerFactory=#cpf&sync=true&textline=true","Forest Gump describing Vietnam...");
    assertEquals("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'",response);
    assertEquals(true,clientInvoked);
    assertEquals(true,serverInvoked);
  }
public class TestClientChannelPipelineFactory extends ClientInitializerFactory {
    private int maxLineSize=1024;
    private NettyProducer producer;
    public TestClientChannelPipelineFactory(    NettyProducer producer){
      this.producer=producer;
    }
    @Override protected void initChannel(    Channel ch) throws Exception {
      ChannelPipeline channelPipeline=ch.pipeline();
      clientInvoked=true;
      channelPipeline.addLast("decoder-DELIM",new DelimiterBasedFrameDecoder(maxLineSize,true,Delimiters.lineDelimiter()));
      channelPipeline.addLast("decoder-SD",new StringDecoder(CharsetUtil.UTF_8));
      channelPipeline.addLast("encoder-SD",new StringEncoder(CharsetUtil.UTF_8));
      channelPipeline.addLast("handler",new ClientChannelHandler(producer));
    }
    @Override public ClientInitializerFactory createPipelineFactory(    NettyProducer producer){
      return new TestClientChannelPipelineFactory(producer);
    }
  }
public class TestServerChannelPipelineFactory extends ServerInitializerFactory {
    private int maxLineSize=1024;
    private NettyConsumer consumer;
    public TestServerChannelPipelineFactory(    NettyConsumer consumer){
      this.consumer=consumer;
    }
    @Override protected void initChannel(    Channel ch) throws Exception {
      ChannelPipeline channelPipeline=ch.pipeline();
      serverInvoked=true;
      channelPipeline.addLast("encoder-SD",new StringEncoder(CharsetUtil.UTF_8));
      channelPipeline.addLast("decoder-DELIM",new DelimiterBasedFrameDecoder(maxLineSize,true,Delimiters.lineDelimiter()));
      channelPipeline.addLast("decoder-SD",new StringDecoder(CharsetUtil.UTF_8));
      channelPipeline.addLast("handler",new ServerChannelHandler(consumer));
    }
    @Override public ServerInitializerFactory createPipelineFactory(    NettyConsumer consumer){
      return new TestServerChannelPipelineFactory(consumer);
    }
  }
}
