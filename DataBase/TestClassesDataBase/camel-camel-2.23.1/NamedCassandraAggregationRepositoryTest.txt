/** 
 * Unite test for  {@link CassandraAggregationRepository}
 */
public class NamedCassandraAggregationRepositoryTest extends BaseCassandraTest {
  @Rule public CassandraCQLUnit cassandraRule=CassandraUnitUtils.cassandraCQLUnit("NamedAggregationDataSet.cql");
  private Cluster cluster;
  private Session session;
  private CassandraAggregationRepository aggregationRepository;
  private CamelContext camelContext;
  @Before public void setUp() throws Exception {
    camelContext=new DefaultCamelContext();
    if (canTest()) {
      cluster=CassandraUnitUtils.cassandraCluster();
      session=cluster.connect(CassandraUnitUtils.KEYSPACE);
      aggregationRepository=new NamedCassandraAggregationRepository(session,"ID");
      aggregationRepository.setTable("NAMED_CAMEL_AGGREGATION");
      aggregationRepository.start();
    }
  }
  @After public void tearDown() throws Exception {
    if (canTest()) {
      aggregationRepository.stop();
      session.close();
      cluster.close();
    }
  }
  private boolean exists(  String key){
    return session.execute("select KEY from NAMED_CAMEL_AGGREGATION where NAME=? and KEY=?","ID",key).one() != null;
  }
  @Test public void testAdd(){
    if (!canTest()) {
      return;
    }
    String key="Add";
    assertFalse(exists(key));
    Exchange exchange=new DefaultExchange(camelContext);
    aggregationRepository.add(camelContext,key,exchange);
    assertTrue(exists(key));
  }
  @Test public void testGetExists(){
    if (!canTest()) {
      return;
    }
    String key="Get_Exists";
    Exchange exchange=new DefaultExchange(camelContext);
    aggregationRepository.add(camelContext,key,exchange);
    assertTrue(exists(key));
    Exchange exchange2=aggregationRepository.get(camelContext,key);
    assertNotNull(exchange2);
    assertEquals(exchange.getExchangeId(),exchange2.getExchangeId());
  }
  @Test public void testGetNotExists(){
    if (!canTest()) {
      return;
    }
    String key="Get_NotExists";
    assertFalse(exists(key));
    Exchange exchange2=aggregationRepository.get(camelContext,key);
    assertNull(exchange2);
  }
  @Test public void testRemoveExists(){
    if (!canTest()) {
      return;
    }
    String key="Remove_Exists";
    Exchange exchange=new DefaultExchange(camelContext);
    aggregationRepository.add(camelContext,key,exchange);
    assertTrue(exists(key));
    aggregationRepository.remove(camelContext,key,exchange);
    assertFalse(exists(key));
  }
  @Test public void testRemoveNotExists(){
    if (!canTest()) {
      return;
    }
    String key="RemoveNotExists";
    Exchange exchange=new DefaultExchange(camelContext);
    assertFalse(exists(key));
    aggregationRepository.remove(camelContext,key,exchange);
    assertFalse(exists(key));
  }
  @Test public void testGetKeys(){
    if (!canTest()) {
      return;
    }
    String[] keys={"GetKeys1","GetKeys2"};
    addExchanges(keys);
    Set<String> keySet=aggregationRepository.getKeys();
    for (    String key : keys) {
      assertTrue(keySet.contains(key));
    }
  }
  @Test public void testConfirmExist(){
    if (!canTest()) {
      return;
    }
    for (int i=1; i < 4; i++) {
      String key="Confirm_" + i;
      Exchange exchange=new DefaultExchange(camelContext);
      exchange.setExchangeId("Exchange_" + i);
      aggregationRepository.add(camelContext,key,exchange);
      assertTrue(exists(key));
    }
    aggregationRepository.confirm(camelContext,"Exchange_2");
    assertTrue(exists("Confirm_1"));
    assertFalse(exists("Confirm_2"));
    assertTrue(exists("Confirm_3"));
  }
  @Test public void testConfirmNotExist(){
    if (!canTest()) {
      return;
    }
    String[] keys=new String[3];
    for (int i=1; i < 4; i++) {
      keys[i - 1]="Confirm" + i;
    }
    addExchanges(keys);
    for (    String key : keys) {
      assertTrue(exists(key));
    }
    aggregationRepository.confirm(camelContext,"Exchange-Confirm5");
    for (    String key : keys) {
      assertTrue(exists(key));
    }
  }
  private void addExchanges(  String... keys){
    for (    String key : keys) {
      Exchange exchange=new DefaultExchange(camelContext);
      exchange.setExchangeId("Exchange-" + key);
      aggregationRepository.add(camelContext,key,exchange);
    }
  }
  @Test public void testScan(){
    if (!canTest()) {
      return;
    }
    String[] keys={"Scan1","Scan2"};
    addExchanges(keys);
    Set<String> exchangeIdSet=aggregationRepository.scan(camelContext);
    for (    String key : keys) {
      assertTrue(exchangeIdSet.contains("Exchange-" + key));
    }
  }
  @Test public void testRecover(){
    if (!canTest()) {
      return;
    }
    String[] keys={"Recover1","Recover2"};
    addExchanges(keys);
    Exchange exchange2=aggregationRepository.recover(camelContext,"Exchange-Recover2");
    Exchange exchange3=aggregationRepository.recover(camelContext,"Exchange-Recover3");
    assertNotNull(exchange2);
    assertNull(exchange3);
  }
}
