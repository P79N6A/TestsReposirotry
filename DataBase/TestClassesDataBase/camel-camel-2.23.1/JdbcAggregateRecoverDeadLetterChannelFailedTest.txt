public class JdbcAggregateRecoverDeadLetterChannelFailedTest extends AbstractJdbcAggregationTestSupport {
  void configureJdbcAggregationRepository(){
    repo.setUseRecovery(true);
    repo.setMaximumRedeliveries(3);
    repo.setDeadLetterUri("direct:dead");
    repo.setRecoveryInterval(1000,TimeUnit.MILLISECONDS);
  }
  @Test public void testJdbcAggregateRecoverDeadLetterChannelFailed() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:aggregated").expectedMessageCount(4);
    getMockEndpoint("mock:dead").expectedMinimumMessageCount(3);
    getMockEndpoint("mock:dead").allMessages().header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end();
        from("direct:dead").to("mock:dead").throwException(new IllegalArgumentException("We are dead"));
      }
    }
;
  }
}
