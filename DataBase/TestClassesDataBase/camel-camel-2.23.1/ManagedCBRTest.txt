/** 
 */
public class ManagedCBRTest extends ManagementTestSupport {
  @Test public void testManagedCBR() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=routes,name=\"route\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"task-a\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"choice\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"task-b\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"task-c\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"task-d\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"task-e\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"task-done\"");
    assertTrue("MBean '" + on + "' not registered",mbeanServer.isRegistered(on));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("route").to("mock:a").id("task-a").choice().id("choice").when(simple("${body} contains 'Camel'")).id("when").to("mock:b").id("task-b").to("mock:c").id("task-c").when(simple("${body} contains 'Donkey'")).id("when2").to("mock:d").id("task-d").otherwise().id("otherwise").to("mock:e").id("task-e").end().to("mock:done").id("task-done");
      }
    }
;
  }
}
