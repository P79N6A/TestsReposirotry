/** 
 */
public class JmsAllowNullBodyTest extends CamelTestSupport {
  @Test public void testAllowNullBodyDefault() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).body().isNull();
    getMockEndpoint("mock:result").message(0).header("bar").isEqualTo(123);
    template.sendBodyAndHeader("activemq:queue:foo",null,"bar",123);
    assertMockEndpointsSatisfied();
  }
  @Test public void testAllowNullBody() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).body().isNull();
    getMockEndpoint("mock:result").message(0).header("bar").isEqualTo(123);
    template.sendBodyAndHeader("activemq:queue:foo?allowNullBody=true",null,"bar",123);
    assertMockEndpointsSatisfied();
  }
  @Test public void testAllowNullTextBody() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).body().isNull();
    getMockEndpoint("mock:result").message(0).header("bar").isEqualTo(123);
    template.sendBodyAndHeader("activemq:queue:foo?allowNullBody=true&jmsMessageType=Text",null,"bar",123);
    assertMockEndpointsSatisfied();
  }
  @Test public void testNoAllowNullBody() throws Exception {
    try {
      template.sendBodyAndHeader("activemq:queue:foo?allowNullBody=false",null,"bar",123);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      JMSException cause=assertIsInstanceOf(JMSException.class,e.getCause().getCause());
      assertEquals("Cannot send message as message body is null, and option allowNullBody is false.",cause.getMessage());
    }
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").to("mock:result");
      }
    }
;
  }
}
