/** 
 * @version 
 */
public class AsyncEndpointRedeliveryErrorHandlerNonBlockedDelayTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(AsyncEndpointRedeliveryErrorHandlerNonBlockedDelayTest.class);
  private static volatile int attempt;
  private static String beforeThreadName;
  private static String afterThreadName;
  @Test public void testRedelivery() throws Exception {
    MockEndpoint before=getMockEndpoint("mock:result");
    before.expectedBodiesReceived("Hello World","Hello Camel");
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Bye Camel","Bye Camel");
    template.sendBody("seda:start","World");
    template.sendBody("seda:start","Camel");
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery());
        from("seda:start").to("log:before").to("mock:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            LOG.info("Processing at attempt {} {}",attempt,exchange);
            String body=exchange.getIn().getBody(String.class);
            if (body.contains("World")) {
              if (++attempt <= 2) {
                LOG.info("Processing failed will thrown an exception");
                throw new IllegalArgumentException("Damn");
              }
            }
            exchange.getIn().setBody("Hello " + body);
            LOG.info("Processing at attempt {} complete {}",attempt,exchange);
          }
        }
).to("log:after").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("mock:result");
      }
    }
;
  }
}
