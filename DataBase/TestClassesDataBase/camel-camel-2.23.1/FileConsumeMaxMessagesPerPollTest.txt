/** 
 * Unit test for max messages per poll
 */
public class FileConsumeMaxMessagesPerPollTest extends ContextTestSupport {
  private String fileUrl="file://target/poll/?initialDelay=0&delay=10&maxMessagesPerPoll=2";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/poll");
    super.setUp();
  }
  @Test public void testMaxMessagesPerPoll() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(2);
    mock.message(0).exchangeProperty(Exchange.BATCH_SIZE).isEqualTo(2);
    mock.message(1).exchangeProperty(Exchange.BATCH_SIZE).isEqualTo(2);
    template.sendBodyAndHeader(fileUrl,"Bye World",Exchange.FILE_NAME,"bye.txt");
    template.sendBodyAndHeader(fileUrl,"Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader(fileUrl,"Godday World",Exchange.FILE_NAME,"godday.txt");
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
