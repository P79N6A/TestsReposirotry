/** 
 * @version 
 */
@Ignore("Manual test") public class FileAsyncStressTest extends ContextTestSupport {
  private int files=150;
  @Override @Before public void setUp() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    super.setUp();
    deleteDirectory("target/filestress");
    for (int i=0; i < files; i++) {
      template.sendBodyAndHeader("file:target/filestress","Hello World",Exchange.FILE_NAME,i + ".txt");
    }
  }
  @Test public void testAsyncStress() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    context.startRoute("foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(100);
    mock.setResultWaitTime(30000);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/filestress?maxMessagesPerPoll=50").routeId("foo").noAutoStartup().threads(10).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Random ran=new Random();
            int delay=ran.nextInt(50) + 10;
            Thread.sleep(delay);
          }
        }
).to("mock:result");
      }
    }
;
  }
}
