public class CxfSimpleRouterTest extends CamelTestSupport {
  protected static final String SERVICE_CLASS="serviceClass=org.apache.camel.component.cxf.HelloService";
  protected Server server;
  private String routerEndpointURI="cxf://" + getRouterAddress() + "?"+ SERVICE_CLASS+ "&dataFormat=POJO";
  private String serviceEndpointURI="cxf://" + getServiceAddress() + "?"+ SERVICE_CLASS+ "&dataFormat=POJO";
  protected String getRouterAddress(){
    return "http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/router";
  }
  protected String getServiceAddress(){
    return "http://localhost:" + CXFTestSupport.getPort2() + "/"+ getClass().getSimpleName()+ "/helloworld";
  }
  protected void configureFactory(  ServerFactoryBean svrBean){
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @Before public void startService(){
    ServerFactoryBean svrBean=new ServerFactoryBean();
    svrBean.setAddress(getServiceAddress());
    svrBean.setServiceClass(HelloService.class);
    svrBean.setServiceBean(new HelloServiceImpl());
    configureFactory(svrBean);
    server=svrBean.create();
    server.start();
  }
  @After public void shutdownService(){
    if (server != null) {
      server.stop();
    }
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        errorHandler(noErrorHandler());
        from(routerEndpointURI).to("log:org.apache.camel?level=DEBUG").to(serviceEndpointURI);
      }
    }
;
  }
  protected CamelContext createCamelContext() throws Exception {
    return new DefaultCamelContext();
  }
  protected HelloService getCXFClient() throws Exception {
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(getRouterAddress());
    clientBean.setServiceClass(HelloService.class);
    HelloService client=(HelloService)proxyFactory.create();
    return client;
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    HelloService client=getCXFClient();
    String result=client.echo("hello world");
    assertEquals("we should get the right answer from router",result,"echo hello world");
  }
  @Test public void testOnwayInvocation() throws Exception {
    HelloService client=getCXFClient();
    int count=client.getInvocationCount();
    client.ping();
    assertEquals("The ping should be invocated",client.getInvocationCount(),++count);
  }
}
