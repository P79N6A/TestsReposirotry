/** 
 */
public class UnsharableCodecsConflictsTest extends BaseNettyTest {
  static final byte[] LENGTH_HEADER={0x00,0x00,0x40,0x00};
  private Processor processor=new P();
  private int port1;
  private int port2;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    ChannelHandlerFactory decoder=ChannelHandlerFactories.newLengthFieldBasedFrameDecoder(1048576,0,4,0,4);
    registry.bind("length-decoder",decoder);
    registry.bind("length-decoder2",decoder);
    return registry;
  }
  @Test public void canSupplyMultipleCodecsToEndpointPipeline() throws Exception {
    byte[] sPort1=new byte[8192];
    byte[] sPort2=new byte[16383];
    Arrays.fill(sPort1,(byte)0x38);
    Arrays.fill(sPort2,(byte)0x39);
    byte[] bodyPort1=(new String(LENGTH_HEADER) + new String(sPort1)).getBytes();
    byte[] bodyPort2=(new String(LENGTH_HEADER) + new String(sPort2)).getBytes();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(new String(sPort2) + "9");
    Socket server1=getSocket("localhost",port1);
    Socket server2=getSocket("localhost",port2);
    try {
      sendSopBuffer(bodyPort2,server2);
      sendSopBuffer(bodyPort1,server1);
      sendSopBuffer(new String("9").getBytes(),server2);
    }
 catch (    Exception e) {
      log.error("",e);
    }
 finally {
      server1.close();
      server2.close();
    }
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        port1=getPort();
        port2=getNextPort();
        from("netty4:tcp://localhost:" + port1 + "?decoder=#length-decoder&sync=false").process(processor);
        from("netty4:tcp://localhost:" + port2 + "?decoder=#length-decoder2&sync=false").process(processor).to("mock:result");
      }
    }
;
  }
  private static Socket getSocket(  String host,  int port) throws IOException {
    Socket s=new Socket(host,port);
    s.setSoTimeout(60000);
    return s;
  }
  public static void sendSopBuffer(  byte[] buf,  Socket server) throws Exception {
    BufferedOutputStream dataOut=IOHelper.buffered(server.getOutputStream());
    try {
      dataOut.write(buf,0,buf.length);
      dataOut.flush();
    }
 catch (    Exception e) {
      IOHelper.close(dataOut);
      server.close();
      throw e;
    }
  }
class P implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getOut().setBody(exchange.getIn().getBody(String.class));
    }
  }
}
