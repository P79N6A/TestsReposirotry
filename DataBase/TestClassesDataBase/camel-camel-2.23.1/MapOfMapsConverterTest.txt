public class MapOfMapsConverterTest {
  Converter converter=new MapOfMapsConverter();
  XmlPullParser parser;
  public MapOfMapsConverterTest() throws XmlPullParserException {
    final XmlPullParserFactory factory=XmlPullParserFactory.newInstance();
    parser=factory.newPullParser();
  }
  @Test public void shoulUnmarshallToMapTrivialCase() throws Exception {
    final Object object=converter.unmarshal(readerFor("<holder><some>value</some></holder>"),null);
    assertNotNull(object);
    assertTrue(object instanceof Map);
    @SuppressWarnings("unchecked") final Map<String,String> map=(Map<String,String>)object;
    assertEquals(1,map.size());
    assertEquals("value",map.get("some"));
  }
  @Test public void shoulUnmarshallWithAttributesToMapTrivialCase() throws Exception {
    final Object object=converter.unmarshal(readerFor("<holder><some attr=\"attrVal\">value</some></holder>"),null);
    assertNotNull(object);
    assertTrue(object instanceof Map);
    @SuppressWarnings("unchecked") final Map<String,Object> map=(Map<String,Object>)object;
    assertEquals(1,map.size());
    @SuppressWarnings("unchecked") final Map<String,Object> some=(Map<String,Object>)map.get("some");
    assertEquals(2,some.size());
    assertEquals("value",some.get("some"));
    @SuppressWarnings("unchecked") final Map<String,String> attributes=(Map<String,String>)some.get("attributes");
    assertEquals(1,attributes.size());
    assertEquals("attrVal",attributes.get("attr"));
  }
  @Test public void shoulUnmarshallToMapWithTwoElements() throws Exception {
    final Object object=converter.unmarshal(readerFor("<holder><some1>value1</some1><some2>value2</some2></holder>"),null);
    assertNotNull(object);
    assertTrue(object instanceof Map);
    @SuppressWarnings("unchecked") final Map<String,String> map=(Map<String,String>)object;
    assertEquals(2,map.size());
    assertEquals("value1",map.get("some1"));
    assertEquals("value2",map.get("some2"));
  }
  @Test public void shoulUnmarshallToMapWithNestedMap() throws Exception {
    final Object object=converter.unmarshal(readerFor("<holder><some1><some2>value2</some2></some1></holder>"),null);
    assertNotNull(object);
    assertTrue(object instanceof Map);
    @SuppressWarnings("unchecked") final Map<String,String> map=(Map<String,String>)object;
    assertEquals(1,map.size());
    assertEquals(Collections.singletonMap("some2","value2"),map.get("some1"));
  }
  @Test public void shoulUnmarshallToMapWithNestedMapAndAttributes() throws Exception {
    final Object object=converter.unmarshal(readerFor("<holder><some1 attr1=\"val1\"><some2 attr2=\"val2\">value2</some2></some1></holder>"),null);
    assertNotNull(object);
    assertTrue(object instanceof Map);
    @SuppressWarnings("unchecked") final Map<String,Object> map=(Map<String,Object>)object;
    assertEquals(1,map.size());
    @SuppressWarnings("unchecked") final Map<String,Object> some1=(Map<String,Object>)map.get("some1");
    assertEquals(2,some1.size());
    assertEquals(Collections.singletonMap("attr1","val1"),some1.get("attributes"));
    @SuppressWarnings("unchecked") final Map<String,Object> some2=(Map<String,Object>)some1.get("some2");
    assertEquals(2,some2.size());
    assertEquals(Collections.singletonMap("attr2","val2"),some2.get("attributes"));
  }
  HierarchicalStreamReader readerFor(  final String xml) throws XmlPullParserException, IOException {
    parser.setInput(new StringReader(xml));
    final XppDom dom=XppDom.build(parser);
    final HierarchicalStreamReader reader=new XppDomReader(dom);
    return reader;
  }
}
