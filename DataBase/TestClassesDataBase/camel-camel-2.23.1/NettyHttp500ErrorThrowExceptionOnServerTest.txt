public class NettyHttp500ErrorThrowExceptionOnServerTest extends BaseNettyTest {
  @Test public void testHttp500Error() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World");
    try {
      template.requestBody("netty4-http:http://localhost:{{port}}/foo","Hello World",String.class);
      fail("Should have failed");
    }
 catch (    CamelExecutionException e) {
      NettyHttpOperationFailedException cause=assertIsInstanceOf(NettyHttpOperationFailedException.class,e.getCause());
      assertEquals(500,cause.getStatusCode());
      String trace=cause.getContentAsString();
      assertNotNull(trace);
      assertTrue(trace.startsWith("java.lang.IllegalArgumentException: Camel cannot do this"));
      assertEquals("http://localhost:" + getPort() + "/foo",cause.getUri());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttp500ErrorDisabled() throws Exception {
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World");
    String body=template.requestBody("netty4-http:http://localhost:{{port}}/foo?throwExceptionOnFailure=false","Hello World",String.class);
    assertTrue(body.startsWith("java.lang.IllegalArgumentException: Camel cannot do this"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").throwException(new IllegalArgumentException("Camel cannot do this"));
      }
    }
;
  }
}
