/** 
 */
public class DirectVmConsumerExpressionTest extends ContextTestSupport {
  private CamelContext context2;
  private CamelContext context3;
  private CamelContext context4;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context2=new DefaultCamelContext();
    context3=new DefaultCamelContext();
    context4=new DefaultCamelContext();
    ServiceHelper.startServices(context2);
    ServiceHelper.startServices(context3);
    ServiceHelper.startServices(context4);
    RouteBuilder routeBuilder=createRouteBuilderCamelContext2();
    if (routeBuilder != null) {
      context2.addRoutes(routeBuilder);
    }
    routeBuilder=createRouteBuilderCamelContext3();
    if (routeBuilder != null) {
      context3.addRoutes(routeBuilder);
    }
    routeBuilder=createRouteBuilderCamelContext4();
    if (routeBuilder != null) {
      context4.addRoutes(routeBuilder);
    }
  }
  @Override @After public void tearDown() throws Exception {
    ServiceHelper.stopServices(context2,context3,context4);
    super.tearDown();
  }
  @Test public void testSelectEndpoint() throws Exception {
    MockEndpoint result2=context2.getEndpoint("mock:result2",MockEndpoint.class);
    result2.expectedBodiesReceived("Hello World");
    MockEndpoint result3=context3.getEndpoint("mock:result3",MockEndpoint.class);
    result3.expectedBodiesReceived("Hello World");
    MockEndpoint result4=context4.getEndpoint("mock:result4",MockEndpoint.class);
    result4.expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    MockEndpoint.assertIsSatisfied(context2);
    MockEndpoint.assertIsSatisfied(context3);
    MockEndpoint.assertIsSatisfied(context4);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").recipientList(new DirectVmConsumerExpression("direct-vm://parent/**/context*"));
      }
    }
;
  }
  private RouteBuilder createRouteBuilderCamelContext2(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct-vm:parent/child/context2").to("mock:result2");
      }
    }
;
  }
  private RouteBuilder createRouteBuilderCamelContext3(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct-vm:parent/child/grandchild/context3").to("mock:result3");
      }
    }
;
  }
  private RouteBuilder createRouteBuilderCamelContext4(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct-vm:parent/child/ctx4").to("mock:result4");
      }
    }
;
  }
}
