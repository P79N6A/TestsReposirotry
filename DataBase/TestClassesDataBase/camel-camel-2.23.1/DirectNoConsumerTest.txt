/** 
 * @version 
 */
public class DirectNoConsumerTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  public void testInOnly() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("direct:foo");
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should throw an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(DirectConsumerNotAvailableException.class,e.getCause());
    }
  }
  public void testInOut() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("direct:foo");
      }
    }
);
    context.start();
    try {
      template.requestBody("direct:start","Hello World");
      fail("Should throw an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(DirectConsumerNotAvailableException.class,e.getCause());
    }
  }
  @Test public void testFailIfNoConsumerFalse() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("direct:foo?failIfNoConsumers=false");
      }
    }
);
    context.start();
    template.sendBody("direct:start","Hello World");
  }
  @Test public void testWireTapFailIfNoConsumerFalse() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").wireTap("direct:foo?failIfNoConsumers=false").to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFailIfNoConsumersAfterConsumersLeave() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("stopThisRoute").to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
    context.stopRoute("stopThisRoute");
    TimeUnit.MILLISECONDS.sleep(100);
    try {
      template.sendBody("direct:foo","Hello World");
      fail("Should throw an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(DirectConsumerNotAvailableException.class,e.getCause());
    }
  }
  @Test public void testFailIfNoConsumersWithValidConsumer() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").to("direct:foo");
        from("direct:foo").to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    template.sendBody("direct:in","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFailIfNoConsumersFalseWithPipeline() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").to("direct:foo?failIfNoConsumers=false").to("direct:bar");
        from("direct:bar").to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    template.sendBody("direct:in","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConfigOnAConsumer() throws Exception {
    context.getComponent("direct",DirectComponent.class).setBlock(false);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo?failIfNoConsumers=false").to("log:test");
      }
    }
);
    context.start();
  }
}
