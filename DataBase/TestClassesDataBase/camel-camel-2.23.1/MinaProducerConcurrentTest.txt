/** 
 * @version 
 */
public class MinaProducerConcurrentTest extends BaseMinaTest {
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files);
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    Map<Integer,Future<String>> responses=new HashMap<>();
    for (int i=0; i < files; i++) {
      final int index=i;
      Future<String> out=executor.submit(new Callable<String>(){
        public String call() throws Exception {
          return template.requestBody("mina:tcp://localhost:{{port}}?sync=true",index,String.class);
        }
      }
);
      responses.put(index,out);
    }
    assertMockEndpointsSatisfied();
    assertEquals(files,responses.size());
    Set<String> unique=new HashSet<>();
    for (    Future<String> future : responses.values()) {
      unique.add(future.get());
    }
    assertEquals("Should be " + files + " unique responses",files,unique.size());
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("mina:tcp://localhost:{{port}}?sync=true").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            exchange.getOut().setBody("Bye " + body);
          }
        }
).to("mock:result");
      }
    }
;
  }
}
