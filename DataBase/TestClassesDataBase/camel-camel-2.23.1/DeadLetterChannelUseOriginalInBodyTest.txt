/** 
 * Unit test for useOriginalnBody option on DeadLetterChannel
 * @version 
 */
public class DeadLetterChannelUseOriginalInBodyTest extends ContextTestSupport {
  @Test public void testUseOriginalnBody() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:a");
    dead.expectedBodiesReceived("Hello");
    template.sendBody("direct:a","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDoNotUseOriginalInBody() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:b");
    dead.expectedBodiesReceived("Hello World");
    template.sendBody("direct:b","Hello");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        ErrorHandlerFactory a=deadLetterChannel("mock:a").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false).useOriginalMessage();
        ErrorHandlerFactory b=deadLetterChannel("mock:b").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false);
        from("direct:a").errorHandler(a).setBody(body().append(" World")).process(new MyThrowProcessor());
        from("direct:b").errorHandler(b).setBody(body().append(" World")).process(new MyThrowProcessor());
      }
    }
;
  }
public static class MyThrowProcessor implements Processor {
    public MyThrowProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      assertEquals("Hello World",exchange.getIn().getBody(String.class));
      throw new IllegalArgumentException("Forced");
    }
  }
}
