@RunWith(Arquillian.class) public class RawEventEndpointCdi12Test {
  @Inject private MockEndpoint consumed;
  @Inject private MockEndpoint produced;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(RawEventRoute.class,RawEventObserver.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Before public void resetMock(){
    consumed.reset();
  }
  @Test public void sendEventToConsumer(  Event<Object> event) throws InterruptedException {
    consumed.expectedMessageCount(1);
    consumed.expectedBodiesReceived("test");
    event.select(String.class).fire("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,consumed);
  }
  @Test public void sendMessageToProducer(  @Uri("direct:produce") ProducerTemplate producer) throws InterruptedException {
    long random=Math.round(Math.random() * Long.MAX_VALUE);
    produced.expectedMessageCount(1);
    produced.expectedBodiesReceived(random);
    consumed.expectedMessageCount(1);
    consumed.expectedBodiesReceived(random);
    producer.sendBody(random);
    assertIsSatisfied(2L,TimeUnit.SECONDS,consumed,produced);
  }
}
