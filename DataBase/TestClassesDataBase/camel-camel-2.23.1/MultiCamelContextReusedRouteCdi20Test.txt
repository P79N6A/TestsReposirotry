@RunWith(Arquillian.class) public class MultiCamelContextReusedRouteCdi20Test {
  @Inject @ContextName("first") private CamelContext firstCamelContext;
  @Inject @ContextName("first") @Uri("direct:inbound") private ProducerTemplate firstInbound;
  @Inject @ContextName("first") @Uri("mock:outbound") private MockEndpoint firstOutbound;
  @Inject @ContextName("second") private CamelContext secondCamelContext;
  @Inject @ContextName("second") @Uri("direct:inbound") private ProducerTemplate secondInbound;
  @Inject @ContextName("second") @Uri("mock:outbound") private MockEndpoint secondOutbound;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(FirstCamelContextBean.class,SecondNamedCamelContextBean.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test public void sendMessageToFirstCamelContextInbound() throws InterruptedException {
    firstOutbound.expectedMessageCount(1);
    firstOutbound.expectedBodiesReceived("test-first");
    firstOutbound.expectedHeaderReceived("context","test");
    firstOutbound.message(0).exchange().matches(fromCamelContext("first"));
    firstInbound.sendBody("test-first");
    assertIsSatisfied(2L,TimeUnit.SECONDS,firstOutbound);
  }
  @Test public void sendMessageToSecondCamelContextInbound() throws InterruptedException {
    secondOutbound.expectedMessageCount(1);
    secondOutbound.expectedBodiesReceived("test-second");
    secondOutbound.expectedHeaderReceived("context","test");
    secondOutbound.message(0).exchange().matches(fromCamelContext("second"));
    secondInbound.sendBody("test-second");
    assertIsSatisfied(2L,TimeUnit.SECONDS,secondOutbound);
  }
@ContextName("first") @ContextName("second") static class ReusedRouteBuilder extends RouteBuilder {
    @Override public void configure(){
      from("direct:inbound").setHeader("context").constant("test").to("mock:outbound");
    }
  }
}
