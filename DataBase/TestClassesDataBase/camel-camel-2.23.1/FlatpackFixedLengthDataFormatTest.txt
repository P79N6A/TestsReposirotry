/** 
 * Unit test for fixed length DataFormat.
 */
public class FlatpackFixedLengthDataFormatTest extends CamelTestSupport {
  @Test public void testUnmarshal() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:unmarshal");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(DataSetList.class);
    String data=IOConverter.toString(new File("src/test/data/fixed/PEOPLE-FixedLength.txt"),null);
    template.sendBody("direct:unmarshal",data);
    assertMockEndpointsSatisfied();
    DataSetList list=mock.getExchanges().get(0).getIn().getBody(DataSetList.class);
    assertEquals(4,list.size());
    Map<?,?> row=list.get(0);
    assertEquals("JOHN",row.get("FIRSTNAME"));
  }
  @Test public void testMarshalWithDefinition() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:marshal");
    mock.expectedMessageCount(1);
    List<Map<String,Object>> data=new ArrayList<>();
    Map<String,Object> row=new LinkedHashMap<>();
    row.put("FIRSTNAME","JOHN");
    row.put("LASTNAME","DOE");
    row.put("ADDRESS","1234 CIRCLE CT");
    row.put("CITY","ELYRIA");
    row.put("STATE","OH");
    row.put("ZIP","44035");
    data.add(row);
    template.sendBody("direct:marshal",data);
    assertMockEndpointsSatisfied();
    String s=mock.getExchanges().get(0).getIn().getBody(String.class);
    assertTrue(s.startsWith("JOHN                               DOE"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        FlatpackDataFormat df=new FlatpackDataFormat();
        df.setDefinition("PEOPLE-FixedLength.pzmap.xml");
        df.setFixed(true);
        df.setIgnoreFirstRecord(false);
        from("direct:unmarshal").unmarshal(df).to("mock:unmarshal");
        from("direct:marshal").marshal(df).convertBodyTo(String.class).to("mock:marshal");
      }
    }
;
  }
}
