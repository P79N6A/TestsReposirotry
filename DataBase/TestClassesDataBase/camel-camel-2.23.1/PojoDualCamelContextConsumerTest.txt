/** 
 * @version 
 */
public class PojoDualCamelContextConsumerTest extends TestSupport {
  private CamelContext camel1;
  private CamelContext camel2;
  private ApplicationContext ac;
  @Test public void testCamel1() throws Exception {
    String body="<hello>world!</hello>";
    MockEndpoint result=camel1.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived(body);
    ProducerTemplate template=camel1.createProducerTemplate();
    template.start();
    template.sendBody("direct:start",body);
    template.stop();
    result.assertIsSatisfied();
  }
  @Test public void testCamel2() throws Exception {
    String body="<bye>world!</bye>";
    MockEndpoint result=camel2.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived(body);
    ProducerTemplate template=camel2.createProducerTemplate();
    template.start();
    template.sendBody("direct:start",body);
    template.stop();
    result.assertIsSatisfied();
  }
  @Test public void testCamel1RecipientList() throws Exception {
    String body="<hello>world!</hello>";
    MockEndpoint result=camel1.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedMessageCount(0);
    result.setResultMinimumWaitTime(50);
    ProducerTemplate template=camel1.createProducerTemplate();
    template.start();
    template.sendBody("seda:foo",body);
    template.stop();
    result.assertIsSatisfied();
  }
  @Test public void testCamel2RecipientList() throws Exception {
    String body="<bye>world!</bye>";
    MockEndpoint result=camel2.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived(body);
    MockEndpoint foo=camel2.getEndpoint("mock:foo",MockEndpoint.class);
    foo.expectedBodiesReceived(body);
    ProducerTemplate template=camel2.createProducerTemplate();
    template.start();
    template.sendBody("direct:foo",body);
    template.stop();
    result.assertIsSatisfied();
    foo.assertIsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    ac=new ClassPathXmlApplicationContext("org/apache/camel/spring/example/pojoDualCamelContextConsumer.xml");
    camel1=ac.getBean("camel-1",CamelContext.class);
    camel2=ac.getBean("camel-2",CamelContext.class);
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    camel1.stop();
    camel2.stop();
  }
}
