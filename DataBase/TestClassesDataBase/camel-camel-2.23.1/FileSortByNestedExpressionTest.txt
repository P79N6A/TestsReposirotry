/** 
 * Unit test for the file sort by expression with nested groups
 */
public class FileSortByNestedExpressionTest extends ContextTestSupport {
  private String fileUrl="file://target/filesorter/";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filesorter");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  private void prepareFolder(  String folder){
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello Paris",Exchange.FILE_NAME,"paris.txt");
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello London",Exchange.FILE_NAME,"london.txt");
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello Copenhagen",Exchange.FILE_NAME,"copenhagen.xml");
    template.sendBodyAndHeader("file:target/filesorter/" + folder,"Hello Dublin",Exchange.FILE_NAME,"dublin.txt");
  }
  @Test public void testSortNestedFiles() throws Exception {
    prepareFolder("a");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(fileUrl + "a/?initialDelay=0&delay=10&sortBy=file:ext;file:name").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Dublin","Hello London","Hello Paris","Hello Copenhagen");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSortNestedFilesReverse() throws Exception {
    prepareFolder("b");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(fileUrl + "b/?initialDelay=0&delay=10&sortBy=file:ext;reverse:file:name").convertBodyTo(String.class).to("mock:reverse");
      }
    }
);
    context.start();
    MockEndpoint reverse=getMockEndpoint("mock:reverse");
    reverse.expectedBodiesReceived("Hello Paris","Hello London","Hello Dublin","Hello Copenhagen");
    assertMockEndpointsSatisfied();
  }
}
