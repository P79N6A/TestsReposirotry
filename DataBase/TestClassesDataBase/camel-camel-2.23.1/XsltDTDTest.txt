public class XsltDTDTest extends ContextTestSupport {
  private static final String MESSAGE="<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc//user//test\">]><task><name>&xxe;</name></task>";
  @Test public void testSendingStringMessage() throws Exception {
    sendEntityMessage(MESSAGE);
  }
  @Test public void testSendingInputStreamMessage() throws Exception {
    InputStream is=IOConverter.toInputStream(MESSAGE,new DefaultExchange(context));
    sendEntityMessage(is);
  }
  private void sendEntityMessage(  Object message) throws Exception {
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    endpoint.reset();
    endpoint.expectedMessageCount(1);
    template.sendBody("direct:start1",message);
    assertMockEndpointsSatisfied();
    List<Exchange> list=endpoint.getReceivedExchanges();
    Exchange exchange=list.get(0);
    String xml=exchange.getIn().getBody(String.class);
    assertTrue("Get a wrong transformed message",xml.indexOf("<transformed subject=\"\">") > 0);
    try {
      endpoint.reset();
      endpoint.expectedMessageCount(1);
      template.sendBody("direct:start2",message);
      assertMockEndpointsSatisfied();
      list=endpoint.getReceivedExchanges();
      exchange=list.get(0);
      xml=exchange.getIn().getBody(String.class);
      assertTrue("Get a wrong transformed message",xml.indexOf("<transformed subject=\"\">") > 0);
    }
 catch (    Exception ex) {
      assertTrue("Get a wrong exception",ex instanceof CamelExecutionException);
      assertTrue("Get a wrong exception cause",ex.getCause() instanceof TransformerException);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start1").to("xslt:org/apache/camel/component/xslt/transform_dtd.xsl").to("mock:result");
        from("direct:start2").to("xslt:org/apache/camel/component/xslt/transform_dtd.xsl?allowStAX=false").to("mock:result");
      }
    }
;
  }
}
