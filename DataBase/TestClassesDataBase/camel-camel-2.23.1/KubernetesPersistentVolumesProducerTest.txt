public class KubernetesPersistentVolumesProducerTest extends KubernetesTestSupport {
  @Rule public KubernetesServer server=new KubernetesServer();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("kubernetesClient",server.getClient());
    return registry;
  }
  @Test public void listTest() throws Exception {
    server.expect().withPath("/api/v1/persistentvolumes").andReturn(200,new PersistentVolumeListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    List<PersistentVolume> result=template.requestBody("direct:list","",List.class);
    assertEquals(3,result.size());
  }
  @Test public void listByLabelsTest() throws Exception {
    server.expect().withPath("/api/v1/persistentvolumes?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200,new PersistentVolumeListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    Exchange ex=template.request("direct:listByLabels",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Map<String,String> labels=new HashMap<>();
        labels.put("key1","value1");
        labels.put("key2","value2");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PERSISTENT_VOLUMES_LABELS,labels);
      }
    }
);
    List<PersistentVolume> result=ex.getOut().getBody(List.class);
    assertEquals(3,result.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:list").to("kubernetes-persistent-volumes:///?kubernetesClient=#kubernetesClient&operation=listPersistentVolumes");
        from("direct:listByLabels").to("kubernetes-persistent-volumes:///?kubernetesClient=#kubernetesClient&operation=listPersistentVolumesByLabels");
      }
    }
;
  }
}
