public class AbstractClientBaseTest {
static class Client extends AbstractClientBase {
    Client(    final SalesforceSession session) throws SalesforceException {
      super(null,session,mock(SalesforceHttpClient.class),1);
    }
    @Override protected SalesforceException createRestException(    final Response response,    final InputStream responseContent){
      return null;
    }
    @Override protected void setAccessToken(    final Request request){
    }
  }
  SalesforceSession session=mock(SalesforceSession.class);
  final Client client;
  public AbstractClientBaseTest() throws SalesforceException {
    client=new Client(session);
    when(session.getAccessToken()).thenReturn("token");
  }
  @Before public void startClient() throws Exception {
    client.start();
  }
  @Test public void shouldDetermineHeadersForRequest(){
    final CamelContext context=new DefaultCamelContext();
    final Exchange exchange=new DefaultExchange(context);
    final Message in=new DefaultMessage(context);
    in.setHeader("sforce-auto-assign","TRUE");
    in.setHeader("SFORCE-CALL-OPTIONS",new String[]{"client=SampleCaseSensitiveToken/100","defaultNamespace=battle"});
    in.setHeader("Sforce-Limit-Info",singletonList("per-app-api-usage"));
    in.setHeader("x-sfdc-packageversion-clientPackage","1.0");
    in.setHeader("Sforce-Query-Options","batchSize=1000");
    in.setHeader("Non-Related","Header");
    exchange.setIn(in);
    final Map<String,List<String>> headers=AbstractClientBase.determineHeaders(exchange);
    assertThat(headers).containsOnly(entry("sforce-auto-assign",singletonList("TRUE")),entry("SFORCE-CALL-OPTIONS",asList("client=SampleCaseSensitiveToken/100","defaultNamespace=battle")),entry("Sforce-Limit-Info",singletonList("per-app-api-usage")),entry("x-sfdc-packageversion-clientPackage",singletonList("1.0")),entry("Sforce-Query-Options",singletonList("batchSize=1000")));
  }
  @Test public void shouldDetermineHeadersFromResponse(){
    final Response response=mock(Response.class);
    final HttpFields httpHeaders=new HttpFields();
    httpHeaders.add("Date","Mon, 20 May 2013 22:21:46 GMT");
    httpHeaders.add("Sforce-Limit-Info","api-usage=18/5000");
    httpHeaders.add("Last-Modified","Mon, 20 May 2013 20:49:32 GMT");
    httpHeaders.add("Content-Type","application/json;charset=UTF-8");
    httpHeaders.add("Transfer-Encoding","chunked");
    when(response.getHeaders()).thenReturn(httpHeaders);
    final Map<String,String> headers=AbstractClientBase.determineHeadersFrom(response);
    assertThat(headers).containsEntry("Sforce-Limit-Info","api-usage=18/5000");
  }
  @Test public void shouldNotHangIfRequestsHaveFinished() throws Exception {
    final Request request=mock(Request.class);
    final ArgumentCaptor<CompleteListener> listener=ArgumentCaptor.forClass(CompleteListener.class);
    doNothing().when(request).send(listener.capture());
    client.doHttpRequest(request,(response,headers,exception) -> {
    }
);
    final Result result=mock(Result.class);
    final Response response=mock(Response.class);
    when(result.getResponse()).thenReturn(response);
    when(response.getHeaders()).thenReturn(new HttpFields());
    final SalesforceHttpRequest salesforceRequest=mock(SalesforceHttpRequest.class);
    when(result.getRequest()).thenReturn(salesforceRequest);
    final HttpConversation conversation=mock(HttpConversation.class);
    when(salesforceRequest.getConversation()).thenReturn(conversation);
    when(conversation.getAttribute(SalesforceSecurityHandler.AUTHENTICATION_REQUEST_ATTRIBUTE)).thenReturn(salesforceRequest);
    listener.getValue().onComplete(result);
    final long stopStartTime=System.currentTimeMillis();
    client.stop();
    final long elapsed=System.currentTimeMillis() - stopStartTime;
    assertTrue(elapsed < 10);
  }
  @Test public void shouldTimeoutWhenRequestsAreStillOngoing() throws Exception {
    client.doHttpRequest(mock(Request.class),(response,headers,exception) -> {
    }
);
    final long stopStartTime=System.currentTimeMillis();
    client.stop();
    final long elapsed=System.currentTimeMillis() - stopStartTime;
    assertTrue(elapsed > 900 && elapsed < 1100);
  }
}
