@RunWith(MockitoJUnitRunner.class) public class CamelKieServerExtensionTest {
  @Mock InternalRuntimeManager runtimeManager;
  @Mock RuntimeEnvironment runtimeEnvironment;
  @Mock private KieContainerInstance kieContainerInstance;
  @Mock private KieContainer kieContainer;
  private String identifier="test";
  @After public void cleanup(){
    RuntimeManagerRegistry.get().remove(identifier);
  }
  @Test public void testInit(){
    CamelKieServerExtension extension=new CamelKieServerExtension();
    extension.init(null,null);
    CamelContext globalCamelContext=(CamelContext)ServiceRegistry.get().service(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
    List<RouteDefinition> globalRestDefinitions=globalCamelContext.getRouteDefinitions();
    assertThat(globalRestDefinitions.size(),equalTo(1));
    assertThat(globalCamelContext.getRouteDefinition("unitTestRoute"),is(notNullValue()));
  }
  @Test public void testCreateContainer(){
    CamelKieServerExtension extension=new CamelKieServerExtension();
    final String containerId="testContainer";
    when(kieContainerInstance.getKieContainer()).thenReturn(kieContainer);
    when(kieContainer.getClassLoader()).thenReturn(this.getClass().getClassLoader());
    extension.createContainer(containerId,kieContainerInstance,new HashMap<String,Object>());
    CamelContext camelContext=(CamelContext)ServiceRegistry.get().service("testContainer" + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX);
    List<RouteDefinition> restDefinitions=camelContext.getRouteDefinitions();
    assertThat(restDefinitions.size(),equalTo(1));
    assertThat(camelContext.getRoute("unitTestRoute"),is(notNullValue()));
  }
  @Test public void testDefaultSetup(){
    CamelKieServerExtension extension=new CamelKieServerExtension();
    assertNull(extension.getCamelContextBuilder());
  }
  @Test public void testDefaultSetupCustomDiscovery(){
    CamelKieServerExtension extension=new CamelKieServerExtension(){
      @Override protected CamelContextBuilder discoverCamelContextBuilder(){
        return new CamelContextBuilder(){
          @Override public CamelContext buildCamelContext(){
            return null;
          }
        }
;
      }
    }
;
    assertNotNull(extension.getCamelContextBuilder());
    assertNull(extension.getCamelContextBuilder().buildCamelContext());
  }
  @Test public void testBuildGlobalCamelContext() throws Exception {
    CamelKieServerExtension extension=new CamelKieServerExtension();
    CamelContext context=extension.buildGlobalContext();
    assertNotNull(context);
    context.stop();
  }
  @Test public void testBuildGlobalCamelContextCustomBuilder() throws Exception {
    CamelKieServerExtension extension=new CamelKieServerExtension(new CamelContextBuilder(){
      @Override public CamelContext buildCamelContext(){
        return null;
      }
    }
);
    CamelContext context=extension.buildGlobalContext();
    assertNull(context);
  }
  @Test public void testBuildDeploymentCamelContext() throws Exception {
    when(runtimeManager.getIdentifier()).thenReturn(identifier);
    when(runtimeManager.getEnvironment()).thenReturn(runtimeEnvironment);
    Environment environment=KieServices.get().newEnvironment();
    when(runtimeEnvironment.getEnvironment()).thenReturn(environment);
    RuntimeManagerRegistry.get().register(runtimeManager);
    CamelKieServerExtension extension=new CamelKieServerExtension();
    CamelContext context=extension.buildDeploymentContext(identifier);
    assertNotNull(context);
    context.stop();
  }
  @Test public void testBuildDeploymentCamelContextCustomBuilder() throws Exception {
    when(runtimeManager.getIdentifier()).thenReturn(identifier);
    when(runtimeManager.getEnvironment()).thenReturn(runtimeEnvironment);
    Environment environment=KieServices.get().newEnvironment();
    environment.set(JBPMConstants.CAMEL_CONTEXT_BUILDER_KEY,new CamelContextBuilder(){
      @Override public CamelContext buildCamelContext(){
        return null;
      }
    }
);
    when(runtimeEnvironment.getEnvironment()).thenReturn(environment);
    RuntimeManagerRegistry.get().register(runtimeManager);
    CamelKieServerExtension extension=new CamelKieServerExtension();
    CamelContext context=extension.buildDeploymentContext(identifier);
    assertNull(context);
  }
}
