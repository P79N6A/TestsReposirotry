public class RestNettyHttpBindingModeJsonWithContractTest extends BaseNettyTest {
  @Test public void testBindingModeJsonWithContract() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(UserPojoEx.class);
    String body="{\"id\": 123, \"name\": \"Donald Duck\"}";
    Object answer=template.requestBody("netty4-http:http://localhost:" + getPort() + "/users/new",body);
    assertNotNull(answer);
    String answerString=new String((byte[])answer);
    assertTrue("Unexpected response: " + answerString,answerString.contains("\"active\":true"));
    assertMockEndpointsSatisfied();
    Object obj=mock.getReceivedExchanges().get(0).getIn().getBody();
    assertEquals(UserPojoEx.class,obj.getClass());
    UserPojoEx user=(UserPojoEx)obj;
    assertNotNull(user);
    assertEquals(123,user.getId());
    assertEquals("Donald Duck",user.getName());
    assertEquals(true,user.isActive());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters());
        restConfiguration().component("netty4-http").host("localhost").port(getPort()).bindingMode(RestBindingMode.json);
        rest("/users/").post("new").type(UserPojo.class).route().inputType(UserPojoEx.class).to("mock:input");
      }
    }
;
  }
public static class MyTypeConverters implements TypeConverters {
    @Converter public UserPojoEx toEx(    UserPojo user){
      UserPojoEx ex=new UserPojoEx();
      ex.setId(user.getId());
      ex.setName(user.getName());
      ex.setActive(true);
      return ex;
    }
  }
}
