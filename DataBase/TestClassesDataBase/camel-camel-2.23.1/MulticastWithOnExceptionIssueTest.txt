/** 
 * @version 
 */
public class MulticastWithOnExceptionIssueTest extends ContextTestSupport {
  @Test public void testEnd1FailureTest() throws Exception {
    MockEndpoint end1=getMockEndpoint("mock:end1");
    end1.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        throw new RuntimeException("Simulated Exception");
      }
    }
);
    getMockEndpoint("mock:end2").expectedMessageCount(1);
    getMockEndpoint("mock:end3").expectedMessageCount(0);
    getMockEndpoint("mock:end4").expectedMessageCount(1);
    String result=template.requestBody("direct:start","Hello World!",String.class);
    assertEquals("Stop!",result);
    assertMockEndpointsSatisfied();
  }
  @Test public void testEnd2FailureTest() throws Exception {
    MockEndpoint end2=getMockEndpoint("mock:end2");
    end2.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        throw new RuntimeException("Simulated Exception");
      }
    }
);
    getMockEndpoint("mock:end1").expectedMessageCount(1);
    getMockEndpoint("mock:end3").expectedMessageCount(0);
    getMockEndpoint("mock:end4").expectedMessageCount(1);
    String result=template.requestBody("direct:start","Hello World!",String.class);
    assertEquals("Stop!",result);
    assertMockEndpointsSatisfied();
  }
  @Test public void testEnd3FailureTest() throws Exception {
    MockEndpoint end3=getMockEndpoint("mock:end3");
    end3.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        throw new RuntimeException("Simulated Exception");
      }
    }
);
    getMockEndpoint("mock:end1").expectedMessageCount(1);
    getMockEndpoint("mock:end2").expectedMessageCount(1);
    getMockEndpoint("mock:end4").expectedMessageCount(1);
    String result=template.requestBody("direct:start","Hello World!",String.class);
    assertEquals("Stop!",result);
    assertMockEndpointsSatisfied();
  }
  @Test public void testOK() throws Exception {
    getMockEndpoint("mock:end1").expectedMessageCount(1);
    getMockEndpoint("mock:end2").expectedMessageCount(1);
    getMockEndpoint("mock:end3").expectedMessageCount(1);
    getMockEndpoint("mock:end4").expectedMessageCount(0);
    String result=template.requestBody("direct:start","Hello World!",String.class);
    assertEquals("Hello to you too!",result);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("log:onException").to("mock:end4").transform(constant("Stop!"));
        from("direct:start").multicast().to("mock:end1","mock:end2").end().to("mock:end3").transform(constant("Hello to you too!"));
      }
    }
;
  }
}
