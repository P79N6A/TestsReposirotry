/** 
 * @version 
 */
public class ChoiceWithEndTest extends ContextTestSupport {
  @Test public void testRouteIsCorrectAtRuntime() throws Exception {
    Navigate<Processor> nav=getRoute("direct://start").navigate();
    List<Processor> node=nav.next();
    assertEquals(4,node.size());
    assertIsInstanceOf(SendProcessor.class,unwrapChannel(node.get(0)).getNextProcessor());
    assertIsInstanceOf(ChoiceProcessor.class,unwrapChannel(node.get(1)).getNextProcessor());
    assertIsInstanceOf(TransformProcessor.class,unwrapChannel(node.get(2)).getNextProcessor());
    assertIsInstanceOf(SendProcessor.class,unwrapChannel(node.get(3)).getNextProcessor());
  }
  private Route getRoute(  String routeEndpointURI){
    Route answer=null;
    for (    Route route : context.getRoutes()) {
      if (routeEndpointURI.equals(route.getEndpoint().getEndpointUri())) {
        answer=route;
        break;
      }
    }
    return answer;
  }
  @Test public void testChoiceHello() throws Exception {
    getMockEndpoint("mock:start").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:echo").expectedBodiesReceived("echo Hello World");
    getMockEndpoint("mock:last").expectedBodiesReceived("last echo Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testChoiceBye() throws Exception {
    getMockEndpoint("mock:start").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:bye").expectedBodiesReceived("We do not care");
    getMockEndpoint("mock:last").expectedBodiesReceived("last We do not care");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testChoiceOther() throws Exception {
    getMockEndpoint("mock:start").expectedBodiesReceived("Camel");
    getMockEndpoint("mock:other").expectedBodiesReceived("other Camel");
    getMockEndpoint("mock:last").expectedBodiesReceived("last other Camel");
    template.sendBody("direct:start","Camel");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        MyChoiceBean bean=new MyChoiceBean();
        from("direct:start").to("mock:start").choice().when(body().contains("Hello")).bean(bean,"echo").to("mock:echo").when(body().contains("Bye")).to("direct:bye").to("mock:bye").otherwise().bean(bean,"other").to("mock:other").end().transform(body().prepend("last ")).to("mock:last");
        from("direct:bye").doTry().bean(bean,"bye").to("mock:bye").doCatch(Exception.class).setBody(constant("We do not care")).end();
      }
    }
;
  }
public class MyChoiceBean {
    public String echo(    String s){
      return "echo " + s;
    }
    public String bye(    String s) throws Exception {
      throw new IllegalArgumentException("Damn does not work");
    }
    public String other(    String s){
      return "other " + s;
    }
  }
}
