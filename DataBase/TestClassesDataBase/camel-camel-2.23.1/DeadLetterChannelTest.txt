/** 
 * @version 
 */
public class DeadLetterChannelTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint deadEndpoint;
  protected MockEndpoint successEndpoint;
  protected int failUntilAttempt=2;
  protected String body="<hello>world!</hello>";
  @Test public void testFirstFewAttemptsFail() throws Exception {
    successEndpoint.expectedBodiesReceived(body);
    successEndpoint.message(0).header(Exchange.REDELIVERED).isEqualTo(true);
    successEndpoint.message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(1);
    successEndpoint.message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(2);
    deadEndpoint.expectedMessageCount(0);
    sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testLotsOfAttemptsFail() throws Exception {
    failUntilAttempt=5;
    deadEndpoint.expectedBodiesReceived(body);
    deadEndpoint.message(0).header(Exchange.REDELIVERED).isNull();
    deadEndpoint.message(0).header(Exchange.REDELIVERY_COUNTER).isNull();
    deadEndpoint.message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull();
    successEndpoint.expectedMessageCount(0);
    sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
    Throwable t=deadEndpoint.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Throwable.class);
    assertNotNull("Should have been a cause property",t);
    assertTrue(t instanceof RuntimeException);
    assertEquals("Failed to process due to attempt: 3 being less than: 5",t.getMessage());
    Exchange dead=deadEndpoint.getReceivedExchanges().get(0);
    assertEquals(ExchangePattern.InOnly,dead.getPattern());
  }
  @Test public void testLotsOfAttemptsFailInOut() throws Exception {
    failUntilAttempt=5;
    deadEndpoint.expectedBodiesReceived(body);
    deadEndpoint.message(0).header(Exchange.REDELIVERED).isNull();
    deadEndpoint.message(0).header(Exchange.REDELIVERY_COUNTER).isNull();
    deadEndpoint.message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull();
    successEndpoint.expectedMessageCount(0);
    template.requestBody("direct:start",body);
    assertMockEndpointsSatisfied();
    Throwable t=deadEndpoint.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Throwable.class);
    assertNotNull("Should have been a cause property",t);
    assertTrue(t instanceof RuntimeException);
    assertEquals("Failed to process due to attempt: 3 being less than: 5",t.getMessage());
    Exchange dead=deadEndpoint.getReceivedExchanges().get(0);
    assertEquals(ExchangePattern.InOnly,dead.getPattern());
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    deadEndpoint=getMockEndpoint("mock:failed");
    successEndpoint=getMockEndpoint("mock:success");
  }
  protected RouteBuilder createRouteBuilder(){
    final Processor processor=new Processor(){
      public void process(      Exchange exchange){
        Integer counter=exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER,Integer.class);
        int attempt=(counter == null) ? 1 : counter + 1;
        if (attempt < failUntilAttempt) {
          throw new RuntimeException("Failed to process due to attempt: " + attempt + " being less than: "+ failUntilAttempt);
        }
      }
    }
;
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").errorHandler(deadLetterChannel("mock:failed").maximumRedeliveries(2).redeliveryDelay(50).loggingLevel(LoggingLevel.DEBUG)).process(processor).to("mock:success");
      }
    }
;
  }
}
