/** 
 */
public class VmComponentReferenceEndpointTest extends ContextTestSupport {
  @Test public void testVmComponentReference() throws Exception {
    VmComponent vm=context.getComponent("vm",VmComponent.class);
    String key=vm.getQueueKey("vm://foo");
    assertEquals(1,vm.getQueues().get(key).getCount());
    assertEquals(2,numberOfReferences(vm));
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:foo?blockWhenFull=true").routeId("foo2").to("mock:foo2");
      }
    }
);
    assertEquals(2,vm.getQueues().get(key).getCount());
    assertEquals(3,numberOfReferences(vm));
    context.stopRoute("foo");
    context.removeRoute("foo");
    assertEquals(1,vm.getQueues().get(key).getCount());
    assertEquals(2,numberOfReferences(vm));
    context.stopRoute("foo2");
    context.removeRoute("foo2");
    assertNull(vm.getQueues().get(key));
    assertEquals(1,numberOfReferences(vm));
    key=vm.getQueueKey("vm://bar");
    assertEquals(1,vm.getQueues().get(key).getCount());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:foo").routeId("foo").to("mock:foo");
        from("vm:bar").routeId("bar").to("mock:bar");
      }
    }
;
  }
  private int numberOfReferences(  VmComponent vm){
    int num=0;
    Iterator<QueueReference> it=vm.getQueues().values().iterator();
    while (it.hasNext()) {
      num+=it.next().getCount();
    }
    return num;
  }
}
