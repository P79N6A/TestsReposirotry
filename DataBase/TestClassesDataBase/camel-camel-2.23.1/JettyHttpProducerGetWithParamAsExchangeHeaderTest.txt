/** 
 * Unit test to verify that we can have URI options for external system (endpoint is lenient)
 */
public class JettyHttpProducerGetWithParamAsExchangeHeaderTest extends BaseJettyTest {
  private String serverUri="jetty://http://localhost:" + getPort() + "/myservice";
  @Test public void testHttpGetWithParamsViaURI() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedHeaderReceived("one","einz");
    mock.expectedHeaderReceived("two","twei");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    Thread.sleep(1000);
    template.requestBody(serverUri + "?one=einz&two=twei",null,Object.class);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpGetWithParamsViaHeader() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedHeaderReceived("one","uno");
    mock.expectedHeaderReceived("two","dos");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"GET");
    Thread.sleep(1000);
    template.requestBodyAndHeader(serverUri,null,Exchange.HTTP_QUERY,"one=uno&two=dos");
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpPost() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    Thread.sleep(1000);
    template.requestBody(serverUri,"Hello World");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(serverUri).to("mock:result");
      }
    }
;
  }
}
