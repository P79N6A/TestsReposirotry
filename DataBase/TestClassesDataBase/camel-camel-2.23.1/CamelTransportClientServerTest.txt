public class CamelTransportClientServerTest extends Assert {
  static AbstractApplicationContext context;
  static int port;
  @BeforeClass public static void startUpServer() throws Exception {
    if (!"true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))) {
      port=AvailablePortFinder.getNextAvailable();
      System.setProperty("port",String.valueOf(port));
      context=new ClassPathXmlApplicationContext(new String[]{"/META-INF/spring/CamelTransportSpringConfig.xml"});
    }
 else {
      System.out.println("Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.");
    }
  }
  @AfterClass public static void shutDownServer(){
    if (context != null) {
      context.stop();
    }
  }
  @Test public void testClientInvocation() throws MalformedURLException {
    Client client=new Client("http://localhost:" + port + "/GreeterContext/GreeterPort");
    Greeter port=client.getProxy();
    assertNotNull("The proxy should not be null",port);
    String resp=port.sayHi();
    assertEquals("Get a wrong response ","Bonjour from EndpointA",resp);
    resp=port.sayHi();
    assertEquals("Get a wrong response ","Bonjour from EndpointB",resp);
    resp=port.greetMe("Mike");
    assertEquals("Get a wrong response ","Hello Mike from EndpointA",resp);
    resp=port.greetMe("James");
    assertEquals("Get a wrong response ","Hello James from EndpointB",resp);
    port.greetMeOneWay(System.getProperty("user.name"));
    try {
      port.pingMe("hello");
      fail("exception expected but none thrown");
    }
 catch (    PingMeFault ex) {
      assertEquals("Wrong exception message received","PingMeFault raised by server EndpointB",ex.getMessage());
      FaultDetail detail=ex.getFaultInfo();
      assertEquals("Wrong FaultDetail major:",2,detail.getMajor());
      assertEquals("Wrong FaultDetail minor:",1,detail.getMinor());
    }
  }
}
