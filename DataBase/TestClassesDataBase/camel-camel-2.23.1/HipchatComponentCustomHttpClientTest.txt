public class HipchatComponentCustomHttpClientTest extends CamelTestSupport {
  @EndpointInject(uri="hipchat:http://api.hipchat.com?httpClient=#myHttpClient&authToken=anything&consumeUsers=@AUser") private HipchatEndpoint hipchatEndpoint;
  @Test public void ensureCustomHttpClientIsDefined(){
    HttpClient httpClient=hipchatEndpoint.getConfiguration().getHttpClient();
    assertNotNull(httpClient);
    assertIsInstanceOf(MyCustomHttpClient.class,httpClient);
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry reg=super.createRegistry();
    reg.bind("myHttpClient",new MyCustomHttpClient());
    return reg;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").to("hipchat:http://api.hipchat.com?httpClient=#myHttpClient&authToken=anything&consumeUsers=@AUser").to("mock:result");
      }
    }
;
  }
public static class MyCustomHttpClient extends CloseableHttpClient {
    private final CloseableHttpClient innerHttpClient;
    public MyCustomHttpClient(){
      this.innerHttpClient=HttpClientBuilder.create().build();
    }
    @Override public HttpParams getParams(){
      return innerHttpClient.getParams();
    }
    @Override public ClientConnectionManager getConnectionManager(){
      return innerHttpClient.getConnectionManager();
    }
    @Override public void close() throws IOException {
      innerHttpClient.close();
    }
    @Override protected CloseableHttpResponse doExecute(    HttpHost target,    HttpRequest request,    HttpContext context) throws IOException, ClientProtocolException {
      return innerHttpClient.execute(target,request,context);
    }
  }
}
