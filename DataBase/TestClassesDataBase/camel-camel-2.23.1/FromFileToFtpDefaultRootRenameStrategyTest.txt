/** 
 * @version 
 */
public class FromFileToFtpDefaultRootRenameStrategyTest extends FtpServerTestSupport {
  @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  private String getFtpPollingUrl(){
    return "ftp://admin@localhost:" + getPort() + "?password=admin&delete=true&binary=true&delay=1000&initialDelay=1500&readLock=rename";
  }
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "?password=admin&binary=true";
  }
  @Test public void testFromFileToFtp() throws Exception {
    File expectedOnFtpServer=new File(FTP_ROOT_DIR + "/logo.jpeg");
    assertTrue(expectedOnFtpServer.exists());
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
    Thread.sleep(250);
    assertTrue(!expectedOnFtpServer.exists());
  }
  private void prepareFtpServer() throws Exception {
    Endpoint endpoint=context.getEndpoint(getFtpUrl());
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setBody(IOConverter.toFile("src/test/data/ftpbinarytest/logo.jpeg"));
    exchange.getIn().setHeader(Exchange.FILE_NAME,"logo.jpeg");
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    producer.stop();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpPollingUrl()).to("mock:result");
      }
    }
;
  }
}
