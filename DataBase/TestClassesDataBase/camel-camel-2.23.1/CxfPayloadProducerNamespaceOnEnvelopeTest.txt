public class CxfPayloadProducerNamespaceOnEnvelopeTest extends CamelTestSupport {
  protected static final String RESPONSE_MESSAGE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"><soap:Body>" + "<ns2:getTokenResponse xmlns:ns2=\"http://camel.apache.org/cxf/namespace\"><return xsi:type=\"xs:string\">Return Value</return></ns2:getTokenResponse></soap:Body></soap:Envelope>";
  protected static final String REQUEST_PAYLOAD="<ns2:getToken xmlns:ns2=\"http://camel.apache.org/cxf/namespace\"/>";
  private AbstractXmlApplicationContext applicationContext;
static {
    CXFTestSupport.getPort1();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    return SpringCamelContext.springCamelContext(applicationContext);
  }
  @Before public void setUp() throws Exception {
    applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/GetTokenBeans.xml");
    super.setUp();
    assertNotNull("Should have created a valid spring context",applicationContext);
  }
  @After public void tearDown() throws Exception {
    IOHelper.close(applicationContext);
    super.tearDown();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:router").to("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD").convertBodyTo(String.class).convertBodyTo(Document.class).convertBodyTo(String.class);
        from("cxf:bean:serviceEndpoint?dataFormat=MESSAGE").setBody().constant(RESPONSE_MESSAGE);
      }
    }
;
  }
  @Test public void testInvokeRouter(){
    Object returnValue=template.requestBody("direct:router",REQUEST_PAYLOAD);
    assertNotNull(returnValue);
    assertTrue(returnValue instanceof String);
    assertTrue(((String)returnValue).contains("Return Value"));
    assertTrue(((String)returnValue).contains("http://www.w3.org/2001/XMLSchema-instance"));
  }
}
