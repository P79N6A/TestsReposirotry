public class CxfRsGlobalSslProducerTest extends CamelSpringTestSupport {
  private static int port1=CXFTestSupport.getSslPort();
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  public int getPort1(){
    return port1;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringGlobalSslProducer.xml");
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    SSLContextParameters parameters=context.getRegistry().lookupByNameAndType("mySslContext",SSLContextParameters.class);
    context.setSSLContextParameters(parameters);
    ((SSLContextParametersAware)context.getComponent("cxfrs")).setUseGlobalSslContextParameters(true);
    return context;
  }
  protected void setupDestinationURL(  Message inMessage){
  }
  @Test public void testCorrectTrustStore(){
    Exchange exchange=template.send("direct://trust",new CxfRsGlobalSslProducerTest.MyProcessor());
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",String.valueOf(response.getId()),"123");
    assertEquals("Get a wrong customer name",response.getName(),"John");
    assertEquals("Get a wrong response code",200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("Get a wrong header value","value",exchange.getOut().getHeader("key"));
  }
  @Test public void testNoTrustStore(){
    Exchange exchange=template.send("direct://noTrust",new CxfRsGlobalSslProducerTest.MyProcessor());
    assertThat(exchange.isFailed(),is(true));
    Exception e=exchange.getException();
    assertThat(e.getCause().getClass().getCanonicalName(),is("javax.net.ssl.SSLHandshakeException"));
  }
  @Test public void testWrongTrustStore(){
    Exchange exchange=template.send("direct://wrongTrust",new CxfRsGlobalSslProducerTest.MyProcessor());
    assertThat(exchange.isFailed(),is(true));
    Exception e=exchange.getException();
    assertThat(e.getCause().getClass().getCanonicalName(),is("javax.net.ssl.SSLHandshakeException"));
  }
private class MyProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.setPattern(ExchangePattern.InOut);
      Message inMessage=exchange.getIn();
      setupDestinationURL(inMessage);
      inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
      inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
      inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
      inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
      inMessage.setHeader("key","value");
      inMessage.setBody(null);
    }
  }
}
