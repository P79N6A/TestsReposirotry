/** 
 * Unit test for consuming a batch of files (multiple files in one consume)
 */
public class FileConsumerBatchTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/file-batch");
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/file-batch?initialDelay=0&delay=10").noAutoStartup().convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
  @Test public void testConsumeBatch() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    template.sendBodyAndHeader("file://target/file-batch/","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file-batch/","Bye World",Exchange.FILE_NAME,"bye.txt");
    mock.message(0).exchangeProperty(Exchange.BATCH_SIZE).isEqualTo(2);
    mock.message(0).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(0);
    mock.message(1).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(1);
    context.startAllRoutes();
    assertMockEndpointsSatisfied();
  }
}
