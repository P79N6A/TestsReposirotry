public class InterceptSendToEndpointServicePoolProducerTest extends ContextTestSupport {
  private MyProducer myProducer;
  @Test public void testInterceptSendToEndpointServicePoolProducer() throws Exception {
    assertNotNull(myProducer);
    getMockEndpoint("mock:result").expectedMessageCount(2);
    getMockEndpoint("mock:hello").expectedMessageCount(2);
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("mycomp",new MyComponent());
        interceptSendToEndpoint("mycomp:*").to("mock:hello");
        from("direct:start").to("mycomp:hello").to("mock:result");
      }
    }
;
  }
public class MyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new MyEndpoint(uri,this);
    }
  }
public class MyEndpoint extends DefaultEndpoint {
    public MyEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    @Override public Producer createProducer() throws Exception {
      if (myProducer != null) {
        throw new IllegalStateException("The producer should only be created once and pooled");
      }
      myProducer=new MyProducer(this);
      return myProducer;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    @Override public boolean isSingleton(){
      return true;
    }
  }
public class MyProducer extends DefaultProducer implements ServicePoolAware {
    public MyProducer(    Endpoint endpoint){
      super(endpoint);
    }
    @Override public void process(    Exchange exchange) throws Exception {
      if (!isStarted()) {
        throw new IllegalArgumentException("Should be started");
      }
    }
    @Override public boolean isSingleton(){
      return false;
    }
  }
}
