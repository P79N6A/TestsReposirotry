public class RestComponentVerifierTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("rest",new RestComponent());
    registry.bind("rest-component",new MyComponent());
    return registry;
  }
  @Test public void testParameters() throws Exception {
    RestComponent component=context.getComponent("rest",RestComponent.class);
    ComponentVerifier verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","rest-component");
    parameters.put("host","http://localhost:1234");
    parameters.put("path","verify");
    parameters.put("method","get");
    parameters.put("authProxy","http://localhost:8080");
    ComponentVerifier.Result result=verifier.verify(ComponentVerifier.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.OK,result.getStatus());
  }
  @Test public void testMissingParameters() throws Exception {
    RestComponent component=context.getComponent("rest",RestComponent.class);
    ComponentVerifier verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","rest-component");
    parameters.put("host","http://localhost:" + 1234);
    parameters.put("path","verify");
    parameters.put("authProxy","http://localhost:8080");
    ComponentVerifier.Result result=verifier.verify(ComponentVerifier.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(ComponentVerifier.VerificationError.StandardCode.MISSING_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertEquals(1,result.getErrors().get(0).getParameterKeys().size());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("method"));
  }
private final class MyComponent extends DefaultComponent implements RestProducerFactory, RestConsumerFactory {
    public MyComponent(){
      registerExtension(new ComponentVerifierExtension(){
        @Override public Result verify(        Scope scope,        Map<String,Object> parameters){
          return ResultBuilder.withStatusAndScope(RestComponentVerifierExtension.Result.Status.OK,scope).error(ResultErrorHelper.requiresOption("authProxy",parameters)).build();
        }
      }
);
    }
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      throw new UnsupportedOperationException();
    }
    @Override public Producer createProducer(    CamelContext camelContext,    String host,    String verb,    String basePath,    String uriTemplate,    String queryParameters,    String consumes,    String produces,    RestConfiguration configuration,    Map<String,Object> parameters) throws Exception {
      throw new UnsupportedOperationException();
    }
    @Override public Consumer createConsumer(    CamelContext camelContext,    Processor processor,    String verb,    String basePath,    String uriTemplate,    String consumes,    String produces,    RestConfiguration configuration,    Map<String,Object> parameters) throws Exception {
      throw new UnsupportedOperationException();
    }
  }
}
