public class PullRequestCommentConsumerTest extends GitHubComponentTestBase {
  protected static final Logger LOG=LoggerFactory.getLogger(PullRequestCommentConsumerTest.class);
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from("github://pullRequestComment?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo").process(new PullRequestCommentProcessor()).to(mockResultEndpoint);
      }
    }
;
  }
  @Test public void pullRequestCommentTest() throws Exception {
    PullRequest pr1=pullRequestService.addPullRequest("First add");
    PullRequest pr2=pullRequestService.addPullRequest("Second");
    CommitComment commitComment1=pullRequestService.addComment(pr1.getId(),"First comment");
    CommitComment commitComment2=pullRequestService.addComment(pr2.getId(),"Second comment");
    mockResultEndpoint.expectedBodiesReceivedInAnyOrder(commitComment1,commitComment2);
    Thread.sleep(1 * 1000);
    mockResultEndpoint.assertIsSatisfied();
  }
public class PullRequestCommentProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Comment comment=(Comment)in.getBody();
      LOG.debug("Got Comment " + comment.getId() + " ["+ comment.getBody()+ "] from User ["+ comment.getUser().getLogin()+ "]");
    }
  }
}
