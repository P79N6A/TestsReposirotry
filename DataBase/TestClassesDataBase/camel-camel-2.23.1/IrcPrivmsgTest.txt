/** 
 * @version 
 */
public class IrcPrivmsgTest extends IrcIntegrationTestSupport {
  protected String expectedBody1="Message One";
  protected String expectedBody2="Message Two";
  protected String body1=expectedBody1;
  protected String body2=expectedBody2;
  private boolean sentMessages;
  @Test public void testIrcPrivateMessages() throws Exception {
    resultEndpoint.expectedBodiesReceived(expectedBody1,expectedBody2);
    resultEndpoint.assertIsSatisfied();
    List<Exchange> list=resultEndpoint.getReceivedExchanges();
    for (    Exchange exchange : list) {
      log.info("Received exchange: " + exchange + " headers: "+ exchange.getIn().getHeaders());
    }
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fromUri()).choice().when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("PRIVMSG")).to("direct:mock").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to("seda:consumerJoined");
        from("seda:consumerJoined").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            sendMessages();
          }
        }
);
        from("direct:mock").filter(e -> !e.getIn().getBody(String.class).contains("VERSION")).to(resultEndpoint);
      }
    }
;
  }
  @Override protected String sendUri(){
    return "ircs://{{camelTo}}@{{server}}?channels={{channel1}}&username={{username}}&password={{password}}";
  }
  /** 
 * Lets send messages once the consumer has joined
 */
  protected void sendMessages() throws InterruptedException {
    if (!sentMessages) {
      sentMessages=true;
      template.sendBodyAndHeader(sendUri(),body1,"irc.target",properties.get("camelFrom"));
      template.sendBodyAndHeader(sendUri(),body2,"irc.target",properties.get("camelFrom"));
    }
  }
}
