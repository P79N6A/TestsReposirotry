/** 
 * Test cases for dealing with stream types in an exception handler
 * @version 
 */
public class ExceptionHandlerStreamCacheTest extends ContextTestSupport {
  private MockEndpoint successEndpoint;
  private MockEndpoint exceptionEndpoint;
  @Test public void testSendFault() throws Exception {
    doTestInputStreamPayload("fault");
  }
  @Test public void testSendError() throws Exception {
    doTestInputStreamPayload("error");
  }
  private void doTestInputStreamPayload(  String message) throws InterruptedException, IOException {
    successEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedMessageCount(1);
    template.sendBody("direct:start",new ByteArrayInputStream(message.getBytes()));
    successEndpoint.assertIsSatisfied();
    exceptionEndpoint.assertIsSatisfied();
    InputStream body=(InputStream)exceptionEndpoint.getExchanges().get(0).getIn().getBody();
    assertEquals("Ensure message re-readability in the exception handler",message,new String(IOConverter.toBytes(body)));
  }
  @Test public void testSendFaultXml() throws Exception {
    doTestXmlPayload("<fault/>");
  }
  @Test public void testSendErrorXml() throws Exception {
    doTestXmlPayload("<error/>");
  }
  private void doTestXmlPayload(  String xml) throws InterruptedException, TransformerException {
    successEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedMessageCount(1);
    template.sendBody("direct:start",new StreamSource(new ByteArrayInputStream(xml.getBytes())));
    successEndpoint.assertIsSatisfied();
    exceptionEndpoint.assertIsSatisfied();
    StreamSource body=(StreamSource)exceptionEndpoint.getExchanges().get(0).getIn().getBody();
    assertEquals("Ensure message re-readability in the exception handler",xml,new XmlConverter().toString(body,null));
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    exceptionEndpoint=getMockEndpoint("mock:exception");
    successEndpoint=getMockEndpoint("mock:success");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        context.setHandleFault(true);
        context.setStreamCaching(true);
        onException(Exception.class).handled(true).to("mock:exception");
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String message=exchange.getIn().getBody(String.class);
            if (message.contains("fault")) {
              exchange.getOut().copyFrom(exchange.getIn());
              exchange.getOut().setBody(new ByteArrayInputStream(message.getBytes()));
              exchange.getOut().setFault(true);
            }
            if (message.contains("error")) {
              throw new RuntimeException(message);
            }
          }
        }
).to("mock:success");
      }
    }
;
  }
}
