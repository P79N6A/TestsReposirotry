public class NettyProducerHangTest extends CamelTestSupport {
  private static final int PORT=4093;
  @Test public void nettyProducerHangsOnTheSecondRequestToTheSocketWhichIsClosed() throws Exception {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          acceptReplyAcceptClose();
          acceptReplyAcceptClose();
        }
 catch (        IOException e) {
          log.error("Exception occured: " + e.getMessage(),e);
        }
      }
    }
).start();
    String response1=template.requestBody("netty4:tcp://localhost:" + PORT + "?textline=true&sync=true","request1",String.class);
    log.info("Received first response <" + response1 + ">");
    try {
      template.requestBody("netty4:tcp://localhost:" + PORT + "?textline=true&sync=true","request2",String.class);
    }
 catch (    Exception e) {
      assertStringContains(e.getCause().getMessage(),"No response received from remote server");
    }
    String response2=template.requestBody("netty4:tcp://localhost:" + PORT + "?textline=true&sync=true","request3",String.class);
    log.info("Received 2nd response <" + response2 + ">");
    try {
      template.requestBody("netty4:tcp://localhost:" + PORT + "?textline=true&sync=true","request4",String.class);
    }
 catch (    Exception e) {
      assertStringContains(e.getCause().getMessage(),"No response received from remote server");
    }
  }
  private void acceptReplyAcceptClose() throws IOException {
    byte buf[]=new byte[128];
    ServerSocket serverSocket=new ServerSocket(PORT);
    Socket soc=serverSocket.accept();
    log.info("Open socket and accept data");
    try (InputStream is=soc.getInputStream();OutputStream os=soc.getOutputStream()){
      is.read(buf);
      os.write("response\n".getBytes());
      is.read(buf);
    }
  finally {
      soc.close();
      serverSocket.close();
    }
    log.info("Close socket");
  }
}
