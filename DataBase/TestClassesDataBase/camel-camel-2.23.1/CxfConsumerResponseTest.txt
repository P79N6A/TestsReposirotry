public class CxfConsumerResponseTest extends CamelTestSupport {
  private static final String ECHO_OPERATION="echo";
  private static final String ECHO_BOOLEAN_OPERATION="echoBoolean";
  private static final String PING_OPERATION="ping";
  private static final String TEST_MESSAGE="Hello World!";
  private static int pingCounter;
  protected final String simpleEndpointAddress="http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/test";
  protected final String simpleEndpointURI="cxf://" + simpleEndpointAddress + "?serviceClass=org.apache.camel.component.cxf.HelloService"+ "&publishedEndpointUrl=http://www.simple.com/services/test";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(simpleEndpointURI).inOnly("log:test").choice().when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_OPERATION)).process(new Processor(){
          public void process(          final Exchange exchange){
            assertEquals(DataFormat.POJO,exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.class));
            Message in=exchange.getIn();
            org.apache.cxf.message.Message cxfMessage=in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE,org.apache.cxf.message.Message.class);
            assertNotNull("Should get the cxfMessage instance from message header",cxfMessage);
            ServletRequest request=(ServletRequest)cxfMessage.get("HTTP.REQUEST");
            assertNotNull("Should get the ServletRequest",request);
            assertNotNull("Should get the RemoteAddress" + request.getRemoteAddr());
            List<?> parameter=in.getBody(List.class);
            String operation=(String)in.getHeader(CxfConstants.OPERATION_NAME);
            Object result=operation + " " + (String)parameter.get(0);
            exchange.getIn().setBody(result);
            Map<String,Object> map=new HashMap<>();
            map.put("org.apache.cxf.stax.force-start-document",Boolean.TRUE);
            exchange.getIn().setHeader(Client.RESPONSE_CONTEXT,map);
          }
        }
).when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_BOOLEAN_OPERATION)).process(new Processor(){
          public void process(          final Exchange exchange){
            Message in=exchange.getIn();
            List<?> parameter=in.getBody(List.class);
            exchange.getOut().setBody(parameter.get(0));
          }
        }
).when(header(CxfConstants.OPERATION_NAME).isEqualTo(PING_OPERATION)).process(new Processor(){
          public void process(          final Exchange exchange){
            pingCounter++;
          }
        }
);
      }
    }
;
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(simpleEndpointAddress);
    clientBean.setServiceClass(HelloService.class);
    clientBean.setBus(BusFactory.getDefaultBus());
    HelloService client=(HelloService)proxyFactory.create();
    assertNotNull(client);
    String result=client.echo(TEST_MESSAGE);
    assertEquals("We should get the echo string result from router",result,"echo " + TEST_MESSAGE);
    Boolean bool=client.echoBoolean(Boolean.TRUE);
    assertNotNull("The result should not be null",bool);
    assertEquals("We should get the echo boolean result from router ",bool.toString(),"true");
    int beforeCallingPing=pingCounter;
    client.ping();
    int afterCallingPing=pingCounter;
    assertTrue("The ping operation doesn't be called",afterCallingPing - beforeCallingPing == 1);
  }
}
