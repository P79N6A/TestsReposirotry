@Ignore("Must be manually tested. Provide your own accessKey and secretKey!") public class EC2ComponentIntegrationTest extends CamelTestSupport {
  @Test public void createAndRunInstancesTest(){
    template.send("direct:createAndRun",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(EC2Constants.IMAGE_ID,"ami-fd65ba94");
        exchange.getIn().setHeader(EC2Constants.INSTANCE_TYPE,InstanceType.T2Micro);
        exchange.getIn().setHeader(EC2Constants.INSTANCE_MIN_COUNT,1);
        exchange.getIn().setHeader(EC2Constants.INSTANCE_MAX_COUNT,1);
      }
    }
);
  }
  @Test public void createAndRunInstancesWithSecurityGroupsTest(){
    template.send("direct:createAndRun",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(EC2Constants.IMAGE_ID,"ami-fd65ba94");
        exchange.getIn().setHeader(EC2Constants.INSTANCE_TYPE,InstanceType.T2Micro);
        exchange.getIn().setHeader(EC2Constants.INSTANCE_MIN_COUNT,1);
        exchange.getIn().setHeader(EC2Constants.INSTANCE_MAX_COUNT,1);
        Collection<String> secGroups=new ArrayList<>();
        secGroups.add("secgroup-1");
        secGroups.add("secgroup-2");
        exchange.getIn().setHeader(EC2Constants.INSTANCE_SECURITY_GROUPS,secGroups);
      }
    }
);
  }
  @Test public void ec2CreateAndRunTestWithKeyPair() throws Exception {
    template.request("direct:createAndRun",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(EC2Constants.OPERATION,EC2Operations.createAndRunInstances);
        exchange.getIn().setHeader(EC2Constants.IMAGE_ID,"ami-fd65ba94");
        exchange.getIn().setHeader(EC2Constants.INSTANCE_TYPE,InstanceType.T2Micro);
        exchange.getIn().setHeader(EC2Constants.INSTANCE_MIN_COUNT,1);
        exchange.getIn().setHeader(EC2Constants.INSTANCE_MAX_COUNT,1);
        exchange.getIn().setHeader(EC2Constants.INSTANCES_KEY_PAIR,"keypair-1");
      }
    }
);
  }
  @Test public void stopInstances(){
    template.send("direct:stop",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void startInstances(){
    template.send("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void terminateInstances(){
    template.send("direct:terminate",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void ec2DescribeInstancesTest() throws Exception {
    template.request("direct:describe",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
      }
    }
);
  }
  @Test public void ec2DescribeSpecificInstancesTest() throws Exception {
    template.request("direct:describe",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("instance-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void ec2DescribeInstancesStatusTest() throws Exception {
    template.request("direct:describeStatus",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
      }
    }
);
  }
  @Test public void ec2DescribeStatusSpecificInstancesTest() throws Exception {
    template.request("direct:describeStatus",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void ec2RebootInstancesTest() throws Exception {
    template.request("direct:reboot",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void ec2MonitorInstancesTest() throws Exception {
    template.request("direct:monitor",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Test public void ec2UnmonitorInstancesTest() throws Exception {
    template.request("direct:unmonitor",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Collection<String> l=new ArrayList<>();
        l.add("test-1");
        exchange.getIn().setHeader(EC2Constants.INSTANCES_IDS,l);
      }
    }
);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:createAndRun").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=createAndRunInstances");
        from("direct:stop").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=stopInstances");
        from("direct:start").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=startInstances");
        from("direct:terminate").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=terminateInstances");
        from("direct:describe").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=describeInstances");
        from("direct:describeStatus").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=describeInstancesStatus");
        from("direct:reboot").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=rebootInstances");
        from("direct:monitor").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=monitorInstances");
        from("direct:unmonitor").to("aws-ec2://TestDomain?accessKey=xxxx&secretKey=xxxx&operation=unmonitorInstances");
      }
    }
;
  }
}
