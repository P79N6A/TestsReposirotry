@RunWith(CamelSpringRunner.class) @ContextConfiguration(value="/META-INF/spring/camel-context.xml",loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpointsAndSkip("direct:csv") public class OrderRouteSpringTest {
  @Produce(uri="direct:java") protected ProducerTemplate javaProducer;
  @Produce(uri="direct:xml") protected ProducerTemplate xmlProducer;
  @Produce(uri="direct:json") protected ProducerTemplate jsonProducer;
  @EndpointInject(uri="mock:direct:csv") private MockEndpoint mockCsv;
  @Before public void before(){
    mockCsv.reset();
  }
  @Test public void testJava() throws Exception {
    mockCsv.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange){
        Object mockBody=exchange.getIn().getBody();
        assertEquals(Order.class,mockBody.getClass());
        Order mockOrder=(Order)mockBody;
        assertEquals("Order-Java-0001",mockOrder.getOrderId());
        assertEquals("MILK",mockOrder.getItemId());
        assertEquals(3,mockOrder.getQuantity());
      }
    }
);
    mockCsv.setExpectedMessageCount(1);
    Order order=new Order().setOrderId("Order-Java-0001").setItemId("MILK").setQuantity(3);
    Object answer=javaProducer.requestBody(order);
    assertEquals(OrderResponse.class,answer.getClass());
    OrderResponse or=(OrderResponse)answer;
    assertEquals("Order-Java-0001",or.getOrderId());
    assertEquals(true,or.isAccepted());
    assertEquals("Order accepted:[item='MILK' quantity='3']",or.getDescription());
    mockCsv.assertIsSatisfied();
  }
  @Test public void testXML() throws Exception {
    mockCsv.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange){
        Object mockBody=exchange.getIn().getBody();
        assertEquals(Order.class,mockBody.getClass());
        Order mockOrder=(Order)mockBody;
        assertEquals("Order-XML-0001",mockOrder.getOrderId());
        assertEquals("MIKAN",mockOrder.getItemId());
        assertEquals(365,mockOrder.getQuantity());
      }
    }
);
    mockCsv.setExpectedMessageCount(1);
    String order="<order orderId=\"Order-XML-0001\" itemId=\"MIKAN\" quantity=\"365\"/>";
    String expectedAnswer="<orderResponse orderId=\"Order-XML-0001\" accepted=\"true\" description=\"Order accepted:[item='MIKAN' quantity='365']\"/>";
    Exchange answer=xmlProducer.send("direct:xml",ex -> {
      ((DataTypeAware)ex.getIn()).setBody(order,new DataType("xml:XMLOrder"));
    }
);
    XMLUnit.compareXML(expectedAnswer,answer.getOut().getBody(String.class));
    mockCsv.assertIsSatisfied();
  }
  @Test public void testJSON() throws Exception {
    mockCsv.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange){
        Object mockBody=exchange.getIn().getBody();
        assertEquals(Order.class,mockBody.getClass());
        Order mockOrder=(Order)mockBody;
        assertEquals("Order-JSON-0001",mockOrder.getOrderId());
        assertEquals("MIZUYO-KAN",mockOrder.getItemId());
        assertEquals(16350,mockOrder.getQuantity());
      }
    }
);
    mockCsv.setExpectedMessageCount(1);
    String order="{\"orderId\":\"Order-JSON-0001\", \"itemId\":\"MIZUYO-KAN\", \"quantity\":\"16350\"}";
    OrderResponse expected=new OrderResponse().setAccepted(true).setOrderId("Order-JSON-0001").setDescription("Order accepted:[item='MIZUYO-KAN' quantity='16350']");
    ObjectMapper jsonMapper=new ObjectMapper();
    String expectedJson=jsonMapper.writeValueAsString(expected);
    Exchange answer=jsonProducer.send("direct:json",ex -> {
      ((DataTypeAware)ex.getIn()).setBody(order,new DataType("json"));
    }
);
    assertEquals(expectedJson,answer.getOut().getBody(String.class));
    mockCsv.assertIsSatisfied();
  }
}
