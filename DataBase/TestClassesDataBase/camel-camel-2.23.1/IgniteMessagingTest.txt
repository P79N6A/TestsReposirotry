public class IgniteMessagingTest extends AbstractIgniteTest implements Serializable {
  private static final long serialVersionUID=3967738538216977749L;
  private static final String TOPIC1="TOPIC1";
  private static final String TOPIC2="TOPIC2";
  private UUID uuid;
  @Override protected String getScheme(){
    return "ignite-messaging";
  }
  @Override protected AbstractIgniteComponent createComponent(){
    return IgniteMessagingComponent.fromConfiguration(createConfiguration());
  }
  @Test public void testProducerSendMessage(){
    List<Object> messages=Lists.newArrayList();
    setupMessageListener(TOPIC1,messages);
    template.requestBody("ignite-messaging:TOPIC1",1);
    await().atMost(5,TimeUnit.SECONDS).until(() -> messages.size() == 1);
    assert_().that(messages.get(0)).isEqualTo(1);
  }
  @Test public void testProducerSendMessageTopicInHeader() throws Exception {
    List<Object> messages1=Lists.newArrayList();
    setupMessageListener(TOPIC1,messages1);
    List<Object> messages2=Lists.newArrayList();
    setupMessageListener(TOPIC2,messages2);
    template.requestBodyAndHeader("ignite-messaging:TOPIC1",1,IgniteConstants.IGNITE_MESSAGING_TOPIC,"TOPIC2");
    Thread.sleep(1000);
    assert_().that(messages1.size()).isEqualTo(0);
    assert_().that(messages2.size()).isEqualTo(1);
  }
  @Test public void testProducerSendManyMessages(){
    List<Object> messages=Lists.newArrayList();
    setupMessageListener(TOPIC1,messages);
    Set<Integer> request=ContiguousSet.create(Range.closedOpen(0,100),DiscreteDomain.integers());
    template.requestBody("ignite-messaging:TOPIC1",request);
    await().atMost(5,TimeUnit.SECONDS).until(() -> messages.size() == 100);
    assert_().that(messages).containsAllIn(request);
  }
  @Test public void testProducerSendManyMessagesOrdered(){
    List<Object> messages=Lists.newArrayList();
    setupMessageListener(TOPIC1,messages);
    ContiguousSet<Integer> set=ContiguousSet.create(Range.closedOpen(0,100),DiscreteDomain.integers());
    for (    int i : set) {
      template.requestBody("ignite-messaging:TOPIC1?sendMode=ORDERED&timeout=1000",i);
    }
    await().atMost(5,TimeUnit.SECONDS).until(() -> messages.size() == 100);
    assert_().that(messages).containsAllIn(set);
  }
  @Test public void testProducerSendCollectionAsObject(){
    List<Object> messages=Lists.newArrayList();
    setupMessageListener(TOPIC1,messages);
    Set<Integer> request=ContiguousSet.create(Range.closedOpen(0,100),DiscreteDomain.integers());
    template.requestBody("ignite-messaging:TOPIC1?treatCollectionsAsCacheObjects=true",request);
    await().atMost(5,TimeUnit.SECONDS).until(() -> messages.size() == 1);
    assert_().that(messages.get(0)).isEqualTo(request);
  }
  @Test public void testConsumerManyMessages() throws Exception {
    List<Object> messages=Lists.newArrayList();
    Consumer consumer=context.getEndpoint("ignite-messaging:TOPIC1").createConsumer(storeBodyInListProcessor(messages));
    consumer.start();
    Set<Integer> messagesToSend=ContiguousSet.create(Range.closedOpen(0,100),DiscreteDomain.integers());
    ignite().message().send(TOPIC1,messagesToSend);
    await().atMost(5,TimeUnit.SECONDS).until(() -> messages.size() == 100);
    consumer.stop();
  }
  private void setupMessageListener(  String topic,  final List<Object> messages){
    uuid=ignite().message().remoteListen(topic,new IgniteBiPredicate<UUID,Object>(){
      private static final long serialVersionUID=1L;
      @Override public boolean apply(      UUID uuid,      Object message){
        messages.add(message);
        return true;
      }
    }
);
  }
  @After public void stopMessageListener(){
    if (uuid == null) {
      return;
    }
    ignite().message().stopRemoteListen(uuid);
    uuid=null;
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  private Processor storeBodyInListProcessor(  final List<Object> list){
    return new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        list.add(exchange.getIn().getBody());
      }
    }
;
  }
}
