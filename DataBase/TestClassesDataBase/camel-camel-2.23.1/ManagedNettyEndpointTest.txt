public class ManagedNettyEndpointTest extends BaseNettyTest {
  @Override protected boolean useJmx(){
    return true;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    return context;
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testManagement() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    getMockEndpoint("mock:foo").expectedMessageCount(10);
    for (int i=0; i < 10; i++) {
      String out=template.requestBody("netty4-http:http://localhost:{{port}}/foo?param" + i + "=value"+ i,"Hello World",String.class);
      assertEquals("param" + i + "=value"+ i,out);
    }
    assertMockEndpointsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"");
    mbeanServer.isRegistered(on);
    Set<ObjectName> set=getMBeanServer().queryNames(new ObjectName("*:context=camel-1,type=endpoints,*"),null);
    assertEquals(2,set.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:foo").transform().header(Exchange.HTTP_QUERY);
      }
    }
;
  }
}
