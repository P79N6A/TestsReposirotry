/** 
 * @version 
 */
public class BeanValidatorConfigurationTest extends CamelTestSupport {
  private MessageInterpolator messageInterpolator;
  private TraversableResolver traversableResolver;
  private ConstraintValidatorFactory constraintValidatorFactory;
  @Override @Before public void setUp() throws Exception {
    this.messageInterpolator=new MyMessageInterpolator();
    this.traversableResolver=new MyTraversableResolver();
    this.constraintValidatorFactory=new MyConstraintValidatorFactory();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("myMessageInterpolator",this.messageInterpolator);
    registry.bind("myTraversableResolver",this.traversableResolver);
    registry.bind("myConstraintValidatorFactory",this.constraintValidatorFactory);
    return registry;
  }
  @Test public void configureWithDefaults() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    BeanValidatorEndpoint endpoint=context.getEndpoint("bean-validator://x",BeanValidatorEndpoint.class);
    assertNull(endpoint.getGroup());
  }
  @Test public void configureBeanValidator() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    BeanValidatorEndpoint endpoint=context.getEndpoint("bean-validator://x" + "?group=org.apache.camel.component.bean.validator.OptionalChecks" + "&messageInterpolator=#myMessageInterpolator"+ "&traversableResolver=#myTraversableResolver"+ "&constraintValidatorFactory=#myConstraintValidatorFactory",BeanValidatorEndpoint.class);
    assertEquals("org.apache.camel.component.bean.validator.OptionalChecks",endpoint.getGroup());
    assertSame(endpoint.getMessageInterpolator(),this.messageInterpolator);
    assertSame(endpoint.getTraversableResolver(),this.traversableResolver);
    assertSame(endpoint.getConstraintValidatorFactory(),this.constraintValidatorFactory);
  }
class MyMessageInterpolator implements MessageInterpolator {
    public String interpolate(    String messageTemplate,    Context context){
      return null;
    }
    public String interpolate(    String messageTemplate,    Context context,    Locale locale){
      return null;
    }
  }
class MyTraversableResolver implements TraversableResolver {
    public boolean isCascadable(    Object traversableObject,    Node traversableProperty,    Class<?> rootBeanType,    Path pathToTraversableObject,    ElementType elementType){
      return false;
    }
    public boolean isReachable(    Object traversableObject,    Node traversableProperty,    Class<?> rootBeanType,    Path pathToTraversableObject,    ElementType elementType){
      return false;
    }
  }
class MyConstraintValidatorFactory implements ConstraintValidatorFactory {
    public <T extends ConstraintValidator<?,?>>T getInstance(    Class<T> key){
      return null;
    }
    @Override public void releaseInstance(    ConstraintValidator<?,?> arg0){
    }
  }
}
