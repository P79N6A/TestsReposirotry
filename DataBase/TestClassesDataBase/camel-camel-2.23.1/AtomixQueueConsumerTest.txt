public class AtomixQueueConsumerTest extends AtomixClientTestSupport {
  private static final String QUEUE_NAME=UUID.randomUUID().toString();
  private DistributedQueue<Object> queue;
  @Override protected Map<String,Component> createComponents(){
    AtomixQueueComponent component=new AtomixQueueComponent();
    component.setNodes(Collections.singletonList(getReplicaAddress()));
    return Collections.singletonMap("atomix-queue",component);
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    queue=getClient().getQueue(QUEUE_NAME).join();
  }
  @Override @After public void tearDown() throws Exception {
    queue.close();
    super.tearDown();
  }
  @Test public void testEvents() throws Exception {
    String val1=context().getUuidGenerator().generateUuid();
    String val2=context().getUuidGenerator().generateUuid();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(4);
    mock.message(0).body().isEqualTo(val1);
    mock.message(0).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedQueue.Events.ADD);
    mock.message(1).body().isEqualTo(val2);
    mock.message(1).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedQueue.Events.ADD);
    mock.message(2).body().isEqualTo(val2);
    mock.message(2).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedQueue.Events.REMOVE);
    mock.message(3).body().isEqualTo(val1);
    mock.message(3).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.REMOVE);
    queue.add(val1).join();
    queue.add(val2).join();
    queue.remove(val2).join();
    queue.remove(val1).join();
    mock.assertIsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        fromF("atomix-queue:%s",QUEUE_NAME).to("mock:result");
      }
    }
;
  }
}
