/** 
 * @version 
 */
public class SpringTransactionErrorHandlerAndContextScopedOnExceptionIssueTest extends SpringTestSupport {
  protected JdbcTemplate jdbc;
  @Before public void setUp() throws Exception {
    super.setUp();
    final DataSource ds=getMandatoryBean(DataSource.class,"dataSource");
    jdbc=new JdbcTemplate(ds);
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/spring/issues/SpringTransactionErrorHandlerAndContextScopedOnExceptionIssueTest.xml");
  }
  @Test public void testSpringTXOnExceptionIssueCommit() throws Exception {
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
    getMockEndpoint("mock:onException").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Lion in Action");
    assertMockEndpointsSatisfied();
    count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",2,count);
  }
  @Test public void testSpringTXOnExceptionIssueRollback() throws Exception {
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
    getMockEndpoint("mock:onException").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Donkey in Action");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(RuntimeCamelException.class,e.getCause());
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause().getCause());
      assertEquals("We don't have Donkeys, only Camels",e.getCause().getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
  }
}
