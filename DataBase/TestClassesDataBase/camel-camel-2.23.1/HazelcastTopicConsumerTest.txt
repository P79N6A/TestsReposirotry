public class HazelcastTopicConsumerTest extends HazelcastCamelTestSupport {
  @Mock private ITopic<String> topic;
  @Captor private ArgumentCaptor<MessageListener<String>> argument;
  @Override protected void trainHazelcastInstance(  HazelcastInstance hazelcastInstance){
    when(hazelcastInstance.<String>getTopic("foo")).thenReturn(topic);
    when(topic.addMessageListener(any())).thenReturn("foo");
  }
  @Override @SuppressWarnings("unchecked") protected void verifyHazelcastInstance(  HazelcastInstance hazelcastInstance){
    verify(hazelcastInstance).getTopic("foo");
    verify(topic).addMessageListener(any(MessageListener.class));
  }
  @Test public void receive() throws InterruptedException {
    MockEndpoint out=getMockEndpoint("mock:received");
    out.expectedMessageCount(1);
    verify(topic).addMessageListener(argument.capture());
    final Message<String> msg=new Message<>("foo","foo",new java.util.Date().getTime(),null);
    argument.getValue().onMessage(msg);
    assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS);
    this.checkHeaders(out.getExchanges().get(0).getIn().getHeaders(),HazelcastConstants.RECEIVED);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(String.format("hazelcast-%sfoo",HazelcastConstants.TOPIC_PREFIX)).log("object...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.RECEIVED)).log("...received").to("mock:received").otherwise().log("fail!");
      }
    }
;
  }
  private void checkHeaders(  Map<String,Object> headers,  String action){
    assertEquals(action,headers.get(HazelcastConstants.LISTENER_ACTION));
    assertEquals(HazelcastConstants.CACHE_LISTENER,headers.get(HazelcastConstants.LISTENER_TYPE));
    assertEquals(null,headers.get(HazelcastConstants.OBJECT_ID));
    assertNotNull(headers.get(HazelcastConstants.LISTENER_TIME));
  }
}
