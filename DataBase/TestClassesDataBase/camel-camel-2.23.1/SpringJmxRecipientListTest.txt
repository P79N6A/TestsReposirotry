/** 
 * @version 
 */
public class SpringJmxRecipientListTest extends SpringTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/spring/management/SpringJmxRecipientListTest.xml");
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testJmxEndpointsAddedDynamicallyDefaultRegister() throws Exception {
    MockEndpoint x=getMockEndpoint("mock:x");
    MockEndpoint y=getMockEndpoint("mock:y");
    MockEndpoint z=getMockEndpoint("mock:z");
    x.expectedBodiesReceived("answer");
    y.expectedBodiesReceived("answer");
    z.expectedBodiesReceived("answer");
    template.sendBodyAndHeader("direct:a","answer","recipientListHeader","mock:x,mock:y,mock:z");
    assertMockEndpointsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://a\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(name));
    name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://x\"");
    assertFalse("Should not be registered",mbeanServer.isRegistered(name));
    name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://y\"");
    assertFalse("Should not be registered",mbeanServer.isRegistered(name));
    name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://z\"");
    assertFalse("Should not be registered",mbeanServer.isRegistered(name));
    name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"mock\"");
    assertTrue("Should be registered",mbeanServer.isRegistered(name));
  }
}
