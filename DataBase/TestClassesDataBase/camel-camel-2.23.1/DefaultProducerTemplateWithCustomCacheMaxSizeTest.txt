/** 
 * @version 
 */
public class DefaultProducerTemplateWithCustomCacheMaxSizeTest extends ContextTestSupport {
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getGlobalOptions().put(Exchange.MAXIMUM_CACHE_POOL_SIZE,"200");
    return context;
  }
  @Test public void testCacheProducers() throws Exception {
    ProducerTemplate template=context.createProducerTemplate();
    assertEquals("Size should be 0",0,template.getCurrentCacheSize());
    for (int i=0; i < 203; i++) {
      Endpoint e=context.getEndpoint("seda:queue:" + i);
      template.sendBody(e,"Hello");
    }
    template.cleanUp();
    assertEquals("Size should be 200",200,template.getCurrentCacheSize());
    template.stop();
    assertEquals("Size should be 0",0,template.getCurrentCacheSize());
  }
  @Test public void testInvalidSizeABC(){
    context.getGlobalOptions().put(Exchange.MAXIMUM_CACHE_POOL_SIZE,"ABC");
    try {
      context.createProducerTemplate();
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertEquals("Property CamelMaximumCachePoolSize must be a positive number, was: ABC",e.getMessage());
    }
  }
  @Test public void testInvalidSizeZero(){
    context.getGlobalOptions().put(Exchange.MAXIMUM_CACHE_POOL_SIZE,"0");
    try {
      context.createProducerTemplate();
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertEquals("Property CamelMaximumCachePoolSize must be a positive number, was: 0",e.getMessage());
    }
  }
}
