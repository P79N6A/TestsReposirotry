public class MllpTcpServerConsumerOptionalEndOfDataWithoutValidationTest extends TcpServerConsumerEndOfDataAndValidationTestSupport {
  @Override boolean validatePayload(){
    return false;
  }
  @Override boolean requireEndOfData(){
    return false;
  }
  @Override public void testInvalidMessage() throws Exception {
    expectedCompleteCount=1;
    runInvalidMessage();
  }
  @Override public void testNthInvalidMessage() throws Exception {
    runNthInvalidMessage();
  }
  @Override public void testMessageContainingEmbeddedStartOfBlock() throws Exception {
    expectedCompleteCount=1;
    runMessageContainingEmbeddedStartOfBlock();
  }
  @Override public void testNthMessageContainingEmbeddedStartOfBlock() throws Exception {
    runNthMessageContainingEmbeddedStartOfBlock();
  }
  @Override public void testMessageContainingEmbeddedEndOfBlock() throws Exception {
    expectedCompleteCount=1;
    setExpectedCounts();
    NotifyBuilder done=new NotifyBuilder(context()).whenDone(1).create();
    mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage().replaceFirst("EVN","EVN" + MllpProtocolConstants.END_OF_BLOCK));
    assertTrue("Exchange should have completed",done.matches(5,TimeUnit.SECONDS));
  }
  @Override public void testNthMessageContainingEmbeddedEndOfBlock() throws Exception {
    runNthMessageContainingEmbeddedEndOfBlock();
  }
  @Override public void testInvalidMessageContainingEmbeddedEndOfBlock() throws Exception {
    runInvalidMessageContainingEmbeddedEndOfBlock();
  }
  @Test public void testInitialMessageWithoutEndOfDataByte() throws Exception {
    expectedCompleteCount=1;
    setExpectedCounts();
    mllpClient.setSendEndOfData(false);
    mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage());
  }
  @Test public void testMessageWithoutEndOfDataByte() throws Exception {
    expectedCompleteCount=2;
    setExpectedCounts();
    mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage());
    mllpClient.setSendEndOfData(false);
    mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage());
  }
}
