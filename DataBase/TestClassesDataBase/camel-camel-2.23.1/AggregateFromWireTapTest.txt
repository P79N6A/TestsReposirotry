public class AggregateFromWireTapTest extends ContextTestSupport {
  @Test public void testAggregateFromWireTap() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedBodiesReceived("A","B");
    MockEndpoint aggregated=getMockEndpoint("mock:aggregated");
    aggregated.expectedMessageCount(1);
    template.sendBody("direct:start","A");
    template.sendBody("direct:start","B");
    assertMockEndpointsSatisfied();
    String body=aggregated.getReceivedExchanges().get(0).getIn().getBody(String.class);
    assertTrue("Should be AB or BA, was: " + body,"AB".equals(body) || "BA".equals(body));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        context.setTracing(true);
        from("direct:start").wireTap("direct:tap").to("mock:end");
        from("direct:tap").aggregate(constant(true),new MyAggregationStrategy()).completionSize(2).completionTimeout(5000L).to("direct:aggregated").end();
        from("direct:aggregated").to("mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String oldBody=oldExchange.getIn().getBody(String.class);
      String newBody=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(oldBody + newBody);
      return oldExchange;
    }
  }
}
