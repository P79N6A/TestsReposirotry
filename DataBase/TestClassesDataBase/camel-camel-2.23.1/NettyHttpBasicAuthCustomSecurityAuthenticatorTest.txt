public class NettyHttpBasicAuthCustomSecurityAuthenticatorTest extends BaseNettyTest {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myAuthenticator",new MyAuthenticator());
    return jndi;
  }
  @Test public void testBasicAuth() throws Exception {
    try {
      template.requestBody("netty4-http:http://localhost:{{port}}/foo","Hello World",String.class);
      fail("Should send back 401");
    }
 catch (    CamelExecutionException e) {
      NettyHttpOperationFailedException cause=assertIsInstanceOf(NettyHttpOperationFailedException.class,e.getCause());
      assertEquals(401,cause.getStatusCode());
    }
    Thread.sleep(500);
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World");
    String auth="Basic c2NvdHQ6c2VjcmV0";
    String out=template.requestBodyAndHeader("netty4-http:http://localhost:{{port}}/foo","Hello World","Authorization",auth,String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/foo?securityConfiguration.realm=foo&securityConfiguration.securityAuthenticator=#myAuthenticator").to("mock:input").transform().constant("Bye World");
      }
    }
;
  }
private final class MyAuthenticator implements SecurityAuthenticator {
    public void setName(    String name){
    }
    public String getName(){
      return null;
    }
    @Override public void setRoleClassNames(    String names){
    }
    @Override public Subject login(    HttpPrincipal principal) throws LoginException {
      if (!principal.getPassword().equalsIgnoreCase("secret")) {
        throw new LoginException("Login denied");
      }
      return new Subject();
    }
    @Override public void logout(    Subject subject) throws LoginException {
    }
    @Override public String getUserRoles(    Subject subject){
      return null;
    }
  }
}
