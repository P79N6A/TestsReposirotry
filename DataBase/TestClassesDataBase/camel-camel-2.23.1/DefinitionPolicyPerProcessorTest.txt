/** 
 * @version 
 */
public class DefinitionPolicyPerProcessorTest extends ContextTestSupport {
  @Test public void testDefintionAugmentationPolicy() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedHeaderReceived("foo","was wrapped");
    getMockEndpoint("mock:foo").expectedBodyReceived().constant("body was altered");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    MyPolicy foo=context.getRegistry().lookupByNameAndType("foo",MyPolicy.class);
    assertEquals("Should only be invoked 1 time",1,foo.getInvoked());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyPolicy("foo"));
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").policy("foo").setBody().constant("body not altered").to("mock:foo").end();
      }
    }
;
  }
public static class MyPolicy implements Policy {
    private final String name;
    private int invoked;
    public MyPolicy(    String name){
      this.name=name;
    }
    public int getInvoked(){
      return invoked;
    }
    public void beforeWrap(    RouteContext routeContext,    ProcessorDefinition<?> definition){
      SetBodyDefinition bodyDef=(SetBodyDefinition)definition.getOutputs().get(0);
      bodyDef.setExpression(new ConstantExpression("body was altered"));
    }
    public Processor wrap(    final RouteContext routeContext,    final Processor processor){
      return new Processor(){
        public void process(        Exchange exchange) throws Exception {
          invoked++;
          exchange.getIn().setHeader(name,"was wrapped");
          processor.process(exchange);
        }
      }
;
    }
  }
}
