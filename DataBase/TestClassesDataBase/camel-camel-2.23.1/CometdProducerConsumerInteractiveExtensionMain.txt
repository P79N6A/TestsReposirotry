@Ignore("Run this test manually") public class CometdProducerConsumerInteractiveExtensionMain {
  private static final String URI="cometd://127.0.0.1:9091/channel/test?baseResource=file:./src/test/resources/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2";
  private static final String URIS="cometds://127.0.0.1:9443/channel/test?baseResource=file:./src/test/resources/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2";
  private CamelContext context;
  private String pwd="changeit";
  public static void main(  String[] args) throws Exception {
    CometdProducerConsumerInteractiveExtensionMain me=new CometdProducerConsumerInteractiveExtensionMain();
    me.testCometdProducerConsumerInteractive();
  }
  public void testCometdProducerConsumerInteractive() throws Exception {
    context=new DefaultCamelContext();
    context.addRoutes(createRouteBuilder());
    context.start();
  }
  private RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        CometdComponent component=(CometdComponent)context.getComponent("cometds");
        component.setSslPassword(pwd);
        component.setSslKeyPassword(pwd);
        CometdComponent component2=(CometdComponent)context.getComponent("cometd");
        Censor bayeuxAuthenticator=new Censor();
        component2.addExtension(bayeuxAuthenticator);
        File file=new File("./src/test/resources/jsse/localhost.ks");
        URI keyStoreUrl=file.toURI();
        component.setSslKeystore(keyStoreUrl.getPath());
        from("stream:in").to(URI).to(URIS);
      }
    }
;
  }
public static final class Censor implements BayeuxServer.Extension, ServerSession.RemoveListener {
    private HashSet<String> forbidden=new HashSet<>(Arrays.asList("one","two"));
    public void removed(    ServerSession session,    boolean timeout){
    }
    public boolean rcv(    ServerSession from,    ServerMessage.Mutable message){
      return true;
    }
    public boolean rcvMeta(    ServerSession from,    ServerMessage.Mutable message){
      return true;
    }
    public boolean send(    ServerSession from,    ServerSession to,    ServerMessage.Mutable message){
      Object data=message.getData();
      if (forbidden.contains(data)) {
        message.put("data","***");
      }
      return true;
    }
    public boolean sendMeta(    ServerSession from,    ServerMessage.Mutable message){
      return true;
    }
  }
}
