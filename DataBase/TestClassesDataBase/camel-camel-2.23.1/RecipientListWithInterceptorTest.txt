public class RecipientListWithInterceptorTest extends ContextTestSupport {
  private final MyInterceptStrategy interceptStrategy=new MyInterceptStrategy();
public static class MyInterceptStrategy implements InterceptStrategy {
    private static final Logger LOGGER=LoggerFactory.getLogger(MyInterceptStrategy.class);
    private static int doneCount;
    public Processor wrapProcessorInInterceptors(    final CamelContext context,    final ProcessorDefinition<?> definition,    final Processor target,    final Processor nextTarget) throws Exception {
      if (definition instanceof RecipientListDefinition<?>) {
        final DelegateAsyncProcessor delegateAsyncProcessor=new DelegateAsyncProcessor(){
          @Override public boolean process(          final Exchange exchange,          final AsyncCallback callback){
            LOGGER.info("I'm doing someting");
            return super.process(exchange,new AsyncCallback(){
              public void done(              final boolean doneSync){
                LOGGER.info("I'm done");
                doneCount++;
                callback.done(doneSync);
              }
            }
);
          }
        }
;
        delegateAsyncProcessor.setProcessor(target);
        return delegateAsyncProcessor;
      }
      return new DelegateAsyncProcessor(target);
    }
    public void reset(){
      doneCount=0;
    }
  }
  @Test public void testRecipientListOne() throws Exception {
    interceptStrategy.reset();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","slip","direct:foo");
    assertMockEndpointsSatisfied();
    assertEquals("Done method shall be called only once",1,MyInterceptStrategy.doneCount);
  }
  @Test public void testRecipientListTwo() throws Exception {
    interceptStrategy.reset();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","slip","direct:foo,direct:bar");
    assertMockEndpointsSatisfied();
    assertEquals("Done method shall be called only once",1,MyInterceptStrategy.doneCount);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        context.addInterceptStrategy(interceptStrategy);
        from("direct:start").recipientList(header("slip")).to("mock:result");
        from("direct:foo").to("log:foo").to("mock:foo");
        from("direct:bar").to("log:bar").to("mock:bar");
      }
    }
;
  }
}
