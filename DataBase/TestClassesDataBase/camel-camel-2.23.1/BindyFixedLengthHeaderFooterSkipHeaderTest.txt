/** 
 * This test validates that the header for a fixed length record will be skipped during marshalling or unmarshalling if 'skipHeader=true' is set in the FixedLengthRecord annotation
 */
public class BindyFixedLengthHeaderFooterSkipHeaderTest extends CamelTestSupport {
  public static final String URI_DIRECT_MARSHALL="direct:marshall";
  public static final String URI_DIRECT_UNMARSHALL="direct:unmarshall";
  public static final String URI_MOCK_MARSHALL_RESULT="mock:marshall-result";
  public static final String URI_MOCK_UNMARSHALL_RESULT="mock:unmarshall-result";
  private static final String TEST_HEADER="101-08-2009\r\n";
  private static final String TEST_RECORD="10A9  PaulineM    ISINXD12345678BUYShare000002500.45USD01-08-2009\r\n";
  private static final String TEST_FOOTER="9000000001\r\n";
  @EndpointInject(uri=URI_MOCK_MARSHALL_RESULT) private MockEndpoint marshallResult;
  @EndpointInject(uri=URI_MOCK_UNMARSHALL_RESULT) private MockEndpoint unmarshallResult;
  @SuppressWarnings("unchecked") @Test public void testUnmarshallMessage() throws Exception {
    StringBuffer buff=new StringBuffer();
    buff.append(TEST_HEADER).append(TEST_RECORD).append(TEST_FOOTER);
    unmarshallResult.expectedMessageCount(1);
    template.sendBody(URI_DIRECT_UNMARSHALL,buff.toString());
    unmarshallResult.assertIsSatisfied();
    Exchange exchange=unmarshallResult.getReceivedExchanges().get(0);
    Order order=(Order)exchange.getIn().getBody();
    assertEquals(10,order.getOrderNr());
    assertEquals("  Pauline",order.getFirstName());
    assertEquals("M    ",order.getLastName());
    Map<String,Object> receivedHeaderMap=(Map<String,Object>)exchange.getIn().getHeader(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_HEADER);
    Map<String,Object> receivedFooterMap=(Map<String,Object>)exchange.getIn().getHeader(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_FOOTER);
    assertNull(receivedHeaderMap);
    assertNotNull(receivedFooterMap);
  }
  @Test public void testMarshallMessage() throws Exception {
    Order order=new Order();
    order.setOrderNr(10);
    order.setOrderType("BUY");
    order.setClientNr("A9");
    order.setFirstName("Pauline");
    order.setLastName("M");
    order.setAmount(new BigDecimal("2500.45"));
    order.setInstrumentCode("ISIN");
    order.setInstrumentNumber("XD12345678");
    order.setInstrumentType("Share");
    order.setCurrency("USD");
    Calendar calendar=new GregorianCalendar();
    calendar.set(2009,7,1);
    order.setOrderDate(calendar.getTime());
    List<Map<String,Object>> input=new ArrayList<>();
    Map<String,Object> bodyRow=new HashMap<>();
    bodyRow.put(Order.class.getName(),order);
    input.add(createHeaderRow());
    input.add(bodyRow);
    input.add(createFooterRow());
    marshallResult.expectedMessageCount(1);
    StringBuffer buff=new StringBuffer();
    buff.append(TEST_RECORD).append(TEST_FOOTER);
    marshallResult.expectedBodiesReceived(Arrays.asList(new String[]{buff.toString()}));
    template.sendBody(URI_DIRECT_MARSHALL,input);
    marshallResult.assertIsSatisfied();
  }
  private Map<String,Object> createHeaderRow(){
    Map<String,Object> headerMap=new HashMap<>();
    OrderHeader header=new OrderHeader();
    Calendar calendar=new GregorianCalendar();
    calendar.set(2009,7,1);
    header.setRecordDate(calendar.getTime());
    headerMap.put(OrderHeader.class.getName(),header);
    return headerMap;
  }
  private Map<String,Object> createFooterRow(){
    Map<String,Object> footerMap=new HashMap<>();
    OrderFooter footer=new OrderFooter();
    footer.setNumberOfRecordsInTheFile(1);
    footerMap.put(OrderFooter.class.getName(),footer);
    return footerMap;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    RouteBuilder routeBuilder=new RouteBuilder(){
      @Override public void configure() throws Exception {
        BindyDataFormat bindy=new BindyDataFormat();
        bindy.setClassType(Order.class);
        bindy.setLocale("en");
        bindy.setType(BindyType.Fixed);
        from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT);
        from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed,Order.class).to(URI_MOCK_UNMARSHALL_RESULT);
      }
    }
;
    return routeBuilder;
  }
}
