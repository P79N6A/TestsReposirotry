public class GroupedExchangeRoundtripTest extends PubsubTestSupport {
  private static final String TOPIC_NAME="groupTopic";
  private static final String SUBSCRIPTION_NAME="groupSubscription";
  @EndpointInject(uri="direct:aggregator") private Endpoint aggregator;
  @EndpointInject(uri="google-pubsub:{{project.id}}:" + TOPIC_NAME) private Endpoint topic;
  @EndpointInject(uri="mock:sendResult") private MockEndpoint sendResult;
  @EndpointInject(uri="google-pubsub:{{project.id}}:" + SUBSCRIPTION_NAME) private Endpoint pubsubSubscription;
  @EndpointInject(uri="mock:receiveResult") private MockEndpoint receiveResult;
  @Produce(uri="direct:aggregator") private ProducerTemplate producer;
  @BeforeClass public static void createTopicSubscription() throws Exception {
    createTopicSubscriptionPair(TOPIC_NAME,SUBSCRIPTION_NAME);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(aggregator).routeId("Group_Send").aggregate(new GroupedExchangeAggregationStrategy()).constant(true).completionSize(2).completionTimeout(5000L).to(topic).to(sendResult);
        from(pubsubSubscription).routeId("Group_Receive").to(receiveResult);
      }
    }
;
  }
  /** 
 * Tests that a grouped exhcange is successfully received
 * @throws Exception
 */
  @Test public void sendGrouped() throws Exception {
    Exchange exchange1=new DefaultExchange(context);
    Exchange exchange2=new DefaultExchange(context);
    String body1="Group 1.1 : " + exchange1.getExchangeId();
    String body2="Group 1.2 : " + exchange2.getExchangeId();
    receiveResult.expectedMessageCount(2);
    receiveResult.expectedBodiesReceivedInAnyOrder(body1,body2);
    exchange1.getIn().setBody(body1);
    exchange2.getIn().setBody(body2);
    producer.send(exchange1);
    producer.send(exchange2);
    receiveResult.assertIsSatisfied(3000);
    List<Exchange> results=sendResult.getExchanges();
    assertEquals("Received exchanges",1,results.size());
    List exchangeGrouped=(List)results.get(0).getProperty(Exchange.GROUPED_EXCHANGE);
    assertEquals("Received messages within the exchange",2,exchangeGrouped.size());
  }
}
