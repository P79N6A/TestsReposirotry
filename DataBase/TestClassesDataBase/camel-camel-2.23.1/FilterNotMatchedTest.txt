/** 
 * @version 
 */
public class FilterNotMatchedTest extends ContextTestSupport {
  @Test public void testSendMatchingMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).exchangeProperty(Exchange.FILTER_MATCHED).isEqualTo(true);
    getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isNotNull();
    getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isEqualTo(true);
    template.sendBodyAndHeader("direct:start","<matched/>","foo","bar");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendNotMatchingMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isNotNull();
    getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isEqualTo(false);
    template.sendBodyAndHeader("direct:start","<notMatched/>","foo","notMatchedHeaderValue");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").filter(header("foo").isEqualTo("bar")).to("mock:result").end().to("mock:end");
      }
    }
;
  }
}
