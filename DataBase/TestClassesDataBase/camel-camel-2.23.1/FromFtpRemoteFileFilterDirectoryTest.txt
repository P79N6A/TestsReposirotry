/** 
 * Unit test to verify FTP filter option.
 */
public class FromFtpRemoteFileFilterDirectoryTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/filefilter?password=admin&recursive=true&filter=#myFilter";
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myFilter",new MyFileFilter<>());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  @Test public void testFtpFilter() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    mock.assertIsSatisfied();
  }
  private void prepareFtpServer() throws Exception {
    sendFile(getFtpUrl(),"This is a file to be filtered","skipDir/skipme.txt");
    sendFile(getFtpUrl(),"This is a file to be filtered","skipDir2/skipme.txt");
    sendFile(getFtpUrl(),"Hello World","okDir/hello.txt");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
public class MyFileFilter<T> implements GenericFileFilter<T> {
    public boolean accept(    GenericFile<T> file){
      if (file.isDirectory() && file.getFileName().startsWith("skip")) {
        return false;
      }
      return true;
    }
  }
}
