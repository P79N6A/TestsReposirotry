public class CachedCxfPayloadTest extends ExchangeTestSupport {
  private static final String PAYLOAD="<foo>bar<![CDATA[ & a cdata section ]]></foo>";
  private static final String PAYLOAD_AMPED="<foo>bar &amp; a cdata section </foo>";
  @Test public void testCachedCxfPayloadSAXSource() throws TypeConversionException, NoTypeConversionAvailableException, IOException {
    SAXSource source=context.getTypeConverter().mandatoryConvertTo(SAXSource.class,PAYLOAD);
    doTest(source,PAYLOAD_AMPED);
  }
  @Test public void testCachedCxfPayloadStAXSource() throws TypeConversionException, NoTypeConversionAvailableException, IOException {
    StAXSource source=context.getTypeConverter().mandatoryConvertTo(StAXSource.class,PAYLOAD);
    doTest(source,PAYLOAD);
  }
  @Test public void testCachedCxfPayloadStaxSource() throws TypeConversionException, NoTypeConversionAvailableException, IOException {
    XMLStreamReader streamReader=StaxUtils.createXMLStreamReader(new StreamSource(new StringReader(PAYLOAD)));
    StaxSource source=new StaxSource(streamReader);
    doTest(source,PAYLOAD);
  }
  @Test public void testCachedCxfPayloadDOMSource() throws TypeConversionException, NoTypeConversionAvailableException, IOException {
    DOMSource source=context.getTypeConverter().mandatoryConvertTo(DOMSource.class,PAYLOAD);
    doTest(source,PAYLOAD);
  }
  @Test public void testCachedCxfPayloadStreamSource() throws TypeConversionException, NoTypeConversionAvailableException, IOException {
    StreamSource source=context.getTypeConverter().mandatoryConvertTo(StreamSource.class,PAYLOAD);
    doTest(source,PAYLOAD);
  }
  @SuppressWarnings({"unchecked","rawtypes"}) private void doTest(  Object source,  String payload) throws IOException {
    CxfPayload<?> originalPayload=context.getTypeConverter().convertTo(CxfPayload.class,source);
    CachedCxfPayload<?> cache=new CachedCxfPayload(originalPayload,exchange,new XmlConverter());
    assertTrue(cache.inMemory());
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    cache.writeTo(bos);
    String s=context.getTypeConverter().convertTo(String.class,bos);
    assertEquals(payload,s);
    cache.reset();
    CachedCxfPayload clone=(CachedCxfPayload)cache.copy(exchange);
    bos=new ByteArrayOutputStream();
    clone.writeTo(bos);
    s=context.getTypeConverter().convertTo(String.class,bos);
    assertEquals(payload,s);
    cache.reset();
    clone.reset();
    s=context.getTypeConverter().convertTo(String.class,cache);
    assertEquals(payload,s);
    s=context.getTypeConverter().convertTo(String.class,clone);
    assertEquals(payload,s);
  }
}
