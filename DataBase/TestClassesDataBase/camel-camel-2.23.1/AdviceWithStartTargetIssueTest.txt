/** 
 */
public class AdviceWithStartTargetIssueTest extends ContextTestSupport {
  @Test public void testAdvised() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised");
      }
    }
);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    getMockEndpoint("mock:advised").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().addInterceptStrategy(new ContainerWideInterceptor());
        from("direct:start").to("mock:foo").to("mock:result");
      }
    }
;
  }
static class ContainerWideInterceptor implements InterceptStrategy {
    private static final Logger LOG=LoggerFactory.getLogger(ContainerWideInterceptor.class);
    private static int count;
    public Processor wrapProcessorInInterceptors(    final CamelContext context,    final ProcessorDefinition<?> definition,    final Processor target,    final Processor nextTarget) throws Exception {
      return new DelegateAsyncProcessor(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          count++;
          LOG.info("I am the container wide interceptor. Intercepted total count: " + count);
          target.process(exchange);
        }
        @Override public String toString(){
          return "ContainerWideInterceptor[" + target + "]";
        }
      }
);
    }
    public int getCount(){
      return count;
    }
  }
}
