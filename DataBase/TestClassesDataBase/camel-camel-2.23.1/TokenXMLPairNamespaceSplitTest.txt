/** 
 */
public class TokenXMLPairNamespaceSplitTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/pair");
    deleteDirectory("target/pair2");
    super.setUp();
  }
  @Test public void testTokenXMLPair() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedMessageCount(3);
    mock.message(0).body().isEqualTo("<order id=\"1\" xmlns=\"http:acme.com\">Camel in Action</order>");
    mock.message(1).body().isEqualTo("<order id=\"2\" xmlns=\"http:acme.com\">ActiveMQ in Action</order>");
    mock.message(2).body().isEqualTo("<order id=\"3\" xmlns=\"http:acme.com\">DSL in Action</order>");
    String body=createBody();
    template.sendBodyAndHeader("file:target/pair",body,Exchange.FILE_NAME,"orders.xml");
    assertMockEndpointsSatisfied();
  }
  @Test public void testTokenXMLPair2() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedMessageCount(3);
    mock.message(0).body().isEqualTo("<order id=\"1\" xmlns=\"http:acme.com\">Camel in Action</order>");
    mock.message(1).body().isEqualTo("<order id=\"2\" xmlns=\"http:acme.com\">ActiveMQ in Action</order>");
    mock.message(2).body().isEqualTo("<order id=\"3\" xmlns=\"http:acme.com\">DSL in Action</order>");
    String body=createBody();
    template.sendBodyAndHeader("file:target/pair2",body,Exchange.FILE_NAME,"orders.xml");
    assertMockEndpointsSatisfied();
  }
  protected String createBody(){
    StringBuilder sb=new StringBuilder("<?xml version=\"1.0\"?>\n");
    sb.append("<orders xmlns=\"http:acme.com\">\n");
    sb.append("  <order id=\"1\">Camel in Action</order>\n");
    sb.append("  <order id=\"2\">ActiveMQ in Action</order>\n");
    sb.append("  <order id=\"3\">DSL in Action</order>\n");
    sb.append("</orders>");
    return sb.toString();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/pair?initialDelay=0&delay=10").split().tokenizeXML("order","orders").to("mock:split");
        from("file:target/pair2?initialDelay=0&delay=10").split(body().tokenizeXML("order","orders")).to("mock:split");
      }
    }
;
  }
}
