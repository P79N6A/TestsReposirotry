public class JaxbDataFormatMustBeJAXBElementTest extends CamelTestSupport {
  @Test public void testJaxbMarshalling() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().endsWith("<foo><bar>Hello Bar</bar></foo>");
    template.sendBody("direct:start","<foo><bar>Hello Bar</bar></foo>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testJaxbMarshalling2() throws InterruptedException {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start2","<foo><bar>Hello Bar</bar></foo>");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      InvalidPayloadException ipe=assertIsInstanceOf(InvalidPayloadException.class,e.getCause().getCause());
      assertNotNull(ipe);
      assertEquals(JAXBElement.class,ipe.getType());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        JaxbDataFormat jaxb=new JaxbDataFormat(JAXBContext.newInstance(Foo.class));
        jaxb.setPrettyPrint(false);
        jaxb.setMustBeJAXBElement(false);
        from("direct:start").marshal(jaxb).to("log:xml","mock:result");
        JaxbDataFormat jaxb2=new JaxbDataFormat(JAXBContext.newInstance(Foo.class));
        jaxb2.setPrettyPrint(false);
        jaxb2.setMustBeJAXBElement(true);
        from("direct:start2").marshal(jaxb2).to("log:xml","mock:result2");
      }
    }
;
  }
@XmlRootElement public static class Foo {
    private String bar;
    public String getBar(){
      return bar;
    }
    public void setBar(    String bar){
      this.bar=bar;
    }
  }
}
