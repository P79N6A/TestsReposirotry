public class TestHelper {
  protected static final String NS_XML_FRAGMENT="<ns1:cheesesites xmlns:ns1=\"http://cheese.xmlsecurity.camel.apache.org/\">" + "<netherlands>" + "<source>cow</source>"+ "<cheese>gouda</cheese>"+ "</netherlands>"+ "<italy>"+ "<source>cow</source>"+ "<cheese>gorgonzola</cheese>"+ "</italy>"+ "<france>"+ "<source>goat</source>"+ "<cheese>brie</cheese>"+ "</france>"+ "</ns1:cheesesites>";
  protected static final String XML_FRAGMENT="<cheesesites>" + "<netherlands>" + "<source>cow</source>"+ "<cheese>gouda</cheese>"+ "</netherlands>"+ "<italy>"+ "<source>cow</source>"+ "<cheese>gorgonzola</cheese>"+ "</italy>"+ "<france>"+ "<source>goat</source>"+ "<cheese>brie</cheese>"+ "</france>"+ "</cheesesites>";
  static final boolean HAS_3DES;
static {
    boolean ok=false;
    try {
      org.apache.xml.security.Init.init();
      XMLCipher.getInstance(XMLCipher.TRIPLEDES_KeyWrap);
      ok=true;
    }
 catch (    XMLEncryptionException e) {
      e.printStackTrace();
    }
    HAS_3DES=ok;
  }
  static final boolean UNRESTRICTED_POLICIES_INSTALLED;
static {
    boolean ok=false;
    try {
      byte[] data={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
      SecretKey key192=new SecretKeySpec(new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17},"AES");
      Cipher c=Cipher.getInstance("AES");
      c.init(Cipher.ENCRYPT_MODE,key192);
      c.doFinal(data);
      ok=true;
    }
 catch (    Exception e) {
    }
    UNRESTRICTED_POLICIES_INSTALLED=ok;
  }
  Logger log=LoggerFactory.getLogger(TestHelper.class);
  protected void sendText(  final String fragment,  CamelContext context) throws Exception {
    ProducerTemplate template=context.createProducerTemplate();
    template.start();
    template.send("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty(Exchange.CHARSET_NAME,"UTF-8");
        Message in=exchange.getIn();
        in.setBody(fragment);
        log.info("xmlFragment: {}",fragment);
      }
    }
);
  }
  protected Document testEncryption(  String fragment,  CamelContext context) throws Exception {
    MockEndpoint resultEndpoint=context.getEndpoint("mock:encrypted",MockEndpoint.class);
    resultEndpoint.setExpectedMessageCount(1);
    context.start();
    sendText(fragment,context);
    resultEndpoint.assertIsSatisfied(100);
    Exchange exchange=resultEndpoint.getExchanges().get(0);
    Document inDoc=getDocumentForInMessage(exchange);
    if (log.isDebugEnabled()) {
      logMessage(exchange,inDoc);
    }
    Assert.assertTrue("The XML message has no encrypted data.",hasEncryptedData(inDoc));
    return inDoc;
  }
  protected void testEncryption(  CamelContext context) throws Exception {
    testEncryption(XML_FRAGMENT,context);
  }
  protected void testDecryption(  String fragment,  CamelContext context) throws Exception {
    MockEndpoint resultEndpoint=context.getEndpoint("mock:decrypted",MockEndpoint.class);
    resultEndpoint.setExpectedMessageCount(1);
    testEncryption(fragment,context);
    resultEndpoint.assertIsSatisfied(100);
    Exchange exchange=resultEndpoint.getExchanges().get(0);
    Document inDoc=getDocumentForInMessage(exchange);
    if (log.isDebugEnabled()) {
      logMessage(exchange,inDoc);
    }
    Assert.assertFalse("The XML message has encrypted data.",hasEncryptedData(inDoc));
    Diff xmlDiff=DiffBuilder.compare(fragment).withTest(inDoc).checkForIdentical().build();
    Assert.assertFalse("The decrypted document does not match the control document:\n" + xmlDiff.toString(),xmlDiff.hasDifferences());
  }
  protected void testDecryption(  CamelContext context) throws Exception {
    testDecryption(XML_FRAGMENT,context);
  }
  protected void testDecryptionNoEncryptedKey(  CamelContext context) throws Exception {
    MockEndpoint resultEndpoint=context.getEndpoint("mock:decrypted",MockEndpoint.class);
    resultEndpoint.setExpectedMessageCount(1);
    context.start();
    resultEndpoint.assertIsSatisfied(100);
    Exchange exchange=resultEndpoint.getExchanges().get(0);
    Document inDoc=getDocumentForInMessage(exchange);
    XmlConverter converter=new XmlConverter();
    String xmlStr=converter.toString(inDoc,exchange);
    log.info(xmlStr);
    Assert.assertFalse("The XML message has encrypted data.",hasEncryptedData(inDoc));
  }
  private boolean hasEncryptedData(  Document doc) throws Exception {
    NodeList nodeList=doc.getElementsByTagNameNS("http://www.w3.org/2001/04/xmlenc#","EncryptedData");
    return nodeList.getLength() > 0;
  }
  private void logMessage(  Exchange exchange,  Document inDoc) throws Exception {
    XmlConverter converter=new XmlConverter();
    String xmlStr=converter.toString(inDoc,exchange);
    log.debug(xmlStr);
  }
  private Document getDocumentForInMessage(  Exchange exchange){
    byte[] body=exchange.getIn().getBody(byte[].class);
    Document d=createDocumentfromInputStream(new ByteArrayInputStream(body),exchange.getContext());
    return d;
  }
  private Document createDocumentfromInputStream(  InputStream is,  CamelContext context){
    return context.getTypeConverter().convertTo(Document.class,is);
  }
}
