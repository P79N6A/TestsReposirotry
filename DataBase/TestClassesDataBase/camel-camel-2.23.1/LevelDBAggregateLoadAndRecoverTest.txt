public class LevelDBAggregateLoadAndRecoverTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(LevelDBAggregateLoadAndRecoverTest.class);
  private static final int SIZE=200;
  private static AtomicInteger counter=new AtomicInteger();
  @Before @Override public void setUp() throws Exception {
    deleteDirectory("target/data");
    super.setUp();
  }
  @Test public void testLoadAndRecoverLevelDBAggregate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(SIZE / 10);
    mock.setResultWaitTime(50 * 1000);
    LOG.info("Staring to send " + SIZE + " messages.");
    for (int i=0; i < SIZE; i++) {
      final int value=1;
      char id='A';
      Map<String,Object> headers=new HashMap<>();
      headers.put("id",id);
      headers.put("seq",i);
      LOG.debug("Sending {} with id {}",value,id);
      template.sendBodyAndHeaders("seda:start",value,headers);
      Thread.sleep(5);
    }
    LOG.info("Sending all " + SIZE + " message done. Now waiting for aggregation to complete.");
    assertMockEndpointsSatisfied();
    int recovered=0;
    for (    Exchange exchange : mock.getReceivedExchanges()) {
      if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {
        recovered++;
      }
    }
    int expected=SIZE / 10 / 10;
    int delta=Math.abs(expected - recovered);
    if (delta == 0) {
      assertEquals("There should be " + expected + " recovered",expected,recovered);
    }
 else {
      assertTrue("We expected " + expected + " recovered but the delta is within accepted range "+ delta,delta < 3);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        LevelDBAggregationRepository repo=new LevelDBAggregationRepository("repo1","target/data/leveldb.dat");
        repo.setUseRecovery(true);
        repo.setRecoveryInterval(500);
        from("seda:start?size=" + SIZE).to("log:input?groupSize=500").aggregate(header("id"),new MyAggregationStrategy()).aggregationRepository(repo).completionSize(10).to("log:output?showHeaders=true").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            int num=counter.incrementAndGet();
            if (num % 10 == 0) {
              throw new IllegalStateException("Failed for num " + num);
            }
          }
        }
).to("mock:result").end();
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      Integer body1=oldExchange.getIn().getBody(Integer.class);
      Integer body2=newExchange.getIn().getBody(Integer.class);
      int sum=body1 + body2;
      oldExchange.getIn().setBody(sum);
      return oldExchange;
    }
  }
}
