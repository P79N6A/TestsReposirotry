public class CMISTestSupport extends CamelTestSupport {
  protected static final String CMIS_ENDPOINT_TEST_SERVER="http://localhost:%s/chemistry-opencmis-server-inmemory/atom11";
  protected static final String OPEN_CMIS_SERVER_WAR_PATH="target/dependency/chemistry-opencmis-server-inmemory.war";
  protected static Server cmisServer;
  protected static int port;
  protected String getUrl(){
    return String.format(CMIS_ENDPOINT_TEST_SERVER,port);
  }
  protected Exchange createExchangeWithInBody(  String body){
    DefaultExchange exchange=new DefaultExchange(context);
    if (body != null) {
      exchange.getIn().setBody(body);
    }
    return exchange;
  }
  protected CmisObject retrieveCMISObjectByIdFromServer(  String nodeId) throws Exception {
    Session session=createSession();
    return session.getObject(nodeId);
  }
  protected void deleteAllContent(){
    Session session=createSession();
    Folder rootFolder=session.getRootFolder();
    ItemIterable<CmisObject> children=rootFolder.getChildren();
    for (    CmisObject cmisObject : children) {
      if ("cmis:folder".equals(cmisObject.getPropertyValue(PropertyIds.OBJECT_TYPE_ID))) {
        List<String> notDeltedIdList=((Folder)cmisObject).deleteTree(true,UnfileObject.DELETE,true);
        if (notDeltedIdList != null && notDeltedIdList.size() > 0) {
          throw new RuntimeException("Cannot empty repo");
        }
      }
 else {
        cmisObject.delete(true);
      }
    }
    session.getBinding().close();
  }
  protected Session createSession(){
    SessionFactory sessionFactory=SessionFactoryImpl.newInstance();
    Map<String,String> parameter=new HashMap<>();
    parameter.put(SessionParameter.ATOMPUB_URL,getUrl());
    parameter.put(SessionParameter.BINDING_TYPE,BindingType.ATOMPUB.value());
    Repository repository=sessionFactory.getRepositories(parameter).get(0);
    return repository.createSession();
  }
  protected String getDocumentContentAsString(  String nodeId) throws Exception {
    CmisObject cmisObject=retrieveCMISObjectByIdFromServer(nodeId);
    Document doc=(Document)cmisObject;
    InputStream inputStream=doc.getContentStream().getStream();
    return readFromStream(inputStream);
  }
  protected String readFromStream(  InputStream in) throws Exception {
    StringBuilder result=new StringBuilder();
    BufferedReader br=new BufferedReader(new InputStreamReader(in));
    String strLine;
    while ((strLine=br.readLine()) != null) {
      result.append(strLine);
    }
    in.close();
    return result.toString();
  }
  protected Folder createFolderWithName(  String folderName){
    Folder rootFolder=createSession().getRootFolder();
    return createChildFolderWithName(rootFolder,folderName);
  }
  protected Folder createChildFolderWithName(  Folder parent,  String childName){
    Map<String,String> newFolderProps=new HashMap<>();
    newFolderProps.put(PropertyIds.OBJECT_TYPE_ID,"cmis:folder");
    newFolderProps.put(PropertyIds.NAME,childName);
    return parent.createFolder(newFolderProps);
  }
  protected void createTextDocument(  Folder newFolder,  String content,  String fileName) throws UnsupportedEncodingException {
    byte[] buf=content.getBytes("UTF-8");
    ByteArrayInputStream input=new ByteArrayInputStream(buf);
    ContentStream contentStream=createSession().getObjectFactory().createContentStream(fileName,buf.length,"text/plain; charset=UTF-8",input);
    Map<String,Object> properties=new HashMap<>();
    properties.put(PropertyIds.OBJECT_TYPE_ID,"cmis:document");
    properties.put(PropertyIds.NAME,fileName);
    newFolder.createDocument(properties,contentStream,VersioningState.NONE);
  }
  @BeforeClass public static void startServer() throws Exception {
    port=AvailablePortFinder.getNextAvailable(26500);
    cmisServer=new Server(port);
    cmisServer.setHandler(new WebAppContext(OPEN_CMIS_SERVER_WAR_PATH,"/chemistry-opencmis-server-inmemory"));
    cmisServer.start();
  }
  @AfterClass public static void stopServer() throws Exception {
    cmisServer.stop();
  }
  @Override @Before public void setUp() throws Exception {
    deleteAllContent();
    super.setUp();
  }
}
