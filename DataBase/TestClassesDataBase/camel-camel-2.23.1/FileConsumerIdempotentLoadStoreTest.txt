public class FileConsumerIdempotentLoadStoreTest extends ContextTestSupport {
  private IdempotentRepository<String> repo;
  protected CamelContext createCamelContext() throws Exception {
    return createSpringCamelContext(this,"org/apache/camel/spring/processor/idempotent/fileConsumerIdempotentTest.xml");
  }
  @SuppressWarnings("unchecked") @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/fileidempotent");
    createDirectory("target/fileidempotent");
    File file=new File("target/fileidempotent/.filestore.dat");
    FileOutputStream fos=new FileOutputStream(file);
    String name=FileUtil.normalizePath(new File("target/fileidempotent/report.txt").getAbsolutePath());
    fos.write(name.getBytes());
    fos.write(LS.getBytes());
    fos.close();
    super.setUp();
    repo=context.getRegistry().lookupByNameAndType("fileStore",IdempotentRepository.class);
  }
  @Test public void testIdempotentLoad() throws Exception {
    template.sendBodyAndHeader("file://target/fileidempotent/","Hello World",Exchange.FILE_NAME,"report.txt");
    template.sendBodyAndHeader("file://target/fileidempotent/","Bye World",Exchange.FILE_NAME,"report2.txt");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    String name=FileUtil.normalizePath(new File("target/fileidempotent/report.txt").getAbsolutePath());
    assertTrue("Should contain file: " + name,repo.contains(name));
    String name2=FileUtil.normalizePath(new File("target/fileidempotent/report2.txt").getAbsolutePath());
    assertTrue("Should contain file: " + name2,repo.contains(name2));
  }
}
