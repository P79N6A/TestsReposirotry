public class DynamicRouterConcurrentPOJOTest extends ContextTestSupport {
  private static final int COUNT=100;
  @Test public void testConcurrentDynamicRouter() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(COUNT);
    getMockEndpoint("mock:b").expectedMessageCount(COUNT);
    Thread sendToSedaA=createSedaSenderThread("seda:a");
    Thread sendToSedaB=createSedaSenderThread("seda:b");
    sendToSedaA.start();
    sendToSedaB.start();
    assertMockEndpointsSatisfied();
  }
  private Thread createSedaSenderThread(  final String seda){
    return new Thread(new Runnable(){
      @Override public void run(){
        for (int i=0; i < COUNT; i++) {
          template.sendBody(seda,"Message from " + seda);
        }
      }
    }
);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("seda:a").bean(new MyDynamicRouterPojo("mock:a"));
        from("seda:b").bean(new MyDynamicRouterPojo("mock:b"));
      }
    }
;
  }
public class MyDynamicRouterPojo {
    private final String target;
    public MyDynamicRouterPojo(    String target){
      this.target=target;
    }
    @DynamicRouter public String route(    @Header(Exchange.SLIP_ENDPOINT) String previous){
      if (previous == null) {
        return target;
      }
 else {
        return null;
      }
    }
  }
}
