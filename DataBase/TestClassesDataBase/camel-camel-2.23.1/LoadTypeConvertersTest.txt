/** 
 * Tests loading type converters from classpath scanning.
 */
public class LoadTypeConvertersTest {
  @Test public void launchBenchmark() throws Exception {
    Options opt=new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.All).timeUnit(TimeUnit.MICROSECONDS).warmupTime(TimeValue.seconds(1)).warmupIterations(2).measurementTime(TimeValue.seconds(1)).measurementIterations(2).threads(2).forks(1).shouldFailOnError(true).shouldDoGC(true).build();
    new Runner(opt).run();
  }
  /** 
 * Setup a fresh CamelContext per invocation
 */
@State(Scope.Thread) public static class BenchmarkState {
    CamelContext camel;
    @Setup(Level.Invocation) public void initialize(){
      camel=new DefaultCamelContext();
    }
    @TearDown(Level.Invocation) public void close(){
      try {
        camel.stop();
      }
 catch (      Exception e) {
      }
    }
  }
  @Benchmark @Measurement(batchSize=1000) public void load(  BenchmarkState state,  Blackhole bh){
    int size=0;
    try {
      state.camel.start();
      size=state.camel.getTypeConverterRegistry().size();
      bh.consume(size);
    }
 catch (    Exception e) {
    }
    if (size < 200) {
      throw new IllegalArgumentException("Should have 200+ type converters loaded");
    }
  }
  @Benchmark @Measurement(batchSize=1000) public void notLoad(  BenchmarkState state,  Blackhole bh){
    int size=0;
    try {
      state.camel.setLoadTypeConverters(false);
      state.camel.start();
      size=state.camel.getTypeConverterRegistry().size();
      bh.consume(size);
    }
 catch (    Exception e) {
    }
    if (size > 200) {
      throw new IllegalArgumentException("Should not load additional type converters from classpath");
    }
  }
}
