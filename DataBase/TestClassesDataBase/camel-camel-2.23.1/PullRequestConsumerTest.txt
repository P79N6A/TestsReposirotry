public class PullRequestConsumerTest extends GitHubComponentTestBase {
  protected static final Logger LOG=LoggerFactory.getLogger(PullRequestConsumerTest.class);
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from("github://pullRequest?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo").process(new MockPullRequestProcessor()).to(mockResultEndpoint);
      }
    }
;
  }
  @Test public void pullRequestTest() throws Exception {
    PullRequest pr1=pullRequestService.addPullRequest("First add");
    PullRequest pr2=pullRequestService.addPullRequest("Second");
    mockResultEndpoint.expectedMessageCount(2);
    mockResultEndpoint.expectedBodiesReceivedInAnyOrder(pr1,pr2);
    Thread.sleep(1 * 1000);
    mockResultEndpoint.assertIsSatisfied();
  }
public class MockPullRequestProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      PullRequest pullRequest=(PullRequest)in.getBody();
      User pullRequestUser=pullRequest.getUser();
      pullRequest.getTitle();
      pullRequest.getHtmlUrl();
      pullRequest.getUser().getLogin();
      pullRequest.getUser().getHtmlUrl();
      LOG.debug("Got PullRequest " + pullRequest.getHtmlUrl() + " ["+ pullRequest.getTitle()+ "] From "+ pullRequestUser.getLogin());
    }
  }
}
