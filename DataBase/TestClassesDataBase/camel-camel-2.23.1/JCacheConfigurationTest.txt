public class JCacheConfigurationTest extends JCacheComponentTestSupport {
  private static final Factory<ExpiryPolicy> EXPIRY_POLICY_FACTORY=AccessedExpiryPolicy.factoryOf(Duration.ONE_MINUTE);
  private static final Factory<CacheWriter<Object,Object>> CACHE_WRITER_FACTORY=MyCacheWriter.factory();
  private static final Factory<CacheLoader<Object,Object>> CACHE_LOADER_FACTORY=MyCacheLoader.factory();
  @EndpointInject(uri="jcache://test-cache" + "?expiryPolicyFactory=#myExpiryPolicyFactory" + "&cacheWriterFactory=#myCacheWriterFactory"+ "&cacheLoaderFactory=#myCacheLoaderFactory") JCacheEndpoint from;
  @EndpointInject(uri="mock:to") MockEndpoint to;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("myExpiryPolicyFactory",EXPIRY_POLICY_FACTORY);
    registry.bind("myCacheWriterFactory",CACHE_WRITER_FACTORY);
    registry.bind("myCacheLoaderFactory",CACHE_LOADER_FACTORY);
    return registry;
  }
  @Test public void testConfigurations() throws Exception {
    final Cache<Object,Object> cache=from.getManager().getCache();
    final CompleteConfiguration<Object,Object> conf=cache.getConfiguration(CompleteConfiguration.class);
    assertEquals(EXPIRY_POLICY_FACTORY,conf.getExpiryPolicyFactory());
    assertEquals(CACHE_WRITER_FACTORY,conf.getCacheWriterFactory());
    assertEquals(CACHE_LOADER_FACTORY,conf.getCacheLoaderFactory());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(from).to(to);
      }
    }
;
  }
private static final class MyCacheLoader implements CacheLoader<Object,Object>, Serializable {
    @Override public Object load(    Object key) throws CacheLoaderException {
      return null;
    }
    @Override public Map<Object,Object> loadAll(    Iterable<?> keys) throws CacheLoaderException {
      return null;
    }
    public static Factory<CacheLoader<Object,Object>> factory(){
      return new FactoryBuilder.SingletonFactory(new MyCacheLoader());
    }
  }
private static final class MyCacheWriter implements CacheWriter<Object,Object>, Serializable {
    @Override public void write(    Cache.Entry<?,?> entry) throws CacheWriterException {
    }
    @Override public void writeAll(    Collection<Cache.Entry<?,?>> entries) throws CacheWriterException {
    }
    @Override public void delete(    Object key) throws CacheWriterException {
    }
    @Override public void deleteAll(    Collection<?> keys) throws CacheWriterException {
    }
    public static Factory<CacheWriter<Object,Object>> factory(){
      return new FactoryBuilder.SingletonFactory(new MyCacheWriter());
    }
  }
}
