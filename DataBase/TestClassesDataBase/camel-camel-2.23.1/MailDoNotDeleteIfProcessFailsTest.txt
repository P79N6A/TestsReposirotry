/** 
 * Unit test for rollback option.
 */
public class MailDoNotDeleteIfProcessFailsTest extends CamelTestSupport {
  private static int counter;
  @Override @Before public void setUp() throws Exception {
    prepareMailbox();
    super.setUp();
  }
  @Test public void testRoolbackIfProcessFails() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Message 1");
    getMockEndpoint("mock:error").expectedMessageCount(2);
    assertMockEndpointsSatisfied();
    assertEquals(3,counter);
  }
  private void prepareMailbox() throws Exception {
    Mailbox.clearAll();
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore("imap");
    store.connect("localhost",25,"claus","secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    Message[] msg=new Message[2];
    msg[0]=new MimeMessage(sender.getSession());
    msg[0].setText("Message 1");
    msg[0].setHeader("Message-ID","0");
    msg[0].setFlag(Flags.Flag.SEEN,false);
    msg[1]=new MimeMessage(sender.getSession());
    msg[1].setText("Message 2");
    msg[0].setHeader("Message-ID","1");
    msg[1].setFlag(Flags.Flag.SEEN,true);
    folder.appendMessages(msg);
    folder.close(true);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        onException(IllegalArgumentException.class).to("mock:error");
        from("imap://localhost?username=claus&password=secret&unseen=true&consumer.initialDelay=100&consumer.delay=100").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            if (counter < 3) {
              throw new IllegalArgumentException("Forced by unit test");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
}
