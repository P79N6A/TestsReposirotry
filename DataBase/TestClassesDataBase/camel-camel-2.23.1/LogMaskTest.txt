public class LogMaskTest {
  protected JndiRegistry registry;
  protected CamelContext createCamelContext() throws Exception {
    registry=new JndiRegistry(JndiTest.createInitialContext());
    CamelContext context=new DefaultCamelContext(registry);
    return context;
  }
  @Test public void testLogMask() throws Exception {
    CamelContext context=createCamelContext();
    context.setLogMask(true);
    context.start();
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBodyAndHeader("log:mask?showHeaders=true","password=passw0rd@","headerPassword","#header-password$");
    template.sendBodyAndProperty("log:mask?showProperties=true","password=passw0rd@","propertyPassphrase","#property-passphrase$");
    context.stop();
  }
  @Test public void testDisableLogMaskViaParam() throws Exception {
    CamelContext context=createCamelContext();
    context.setLogMask(true);
    context.start();
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBodyAndHeader("log:mask?showHeaders=true","password=passw0rd@","headerPassword","#header-password$");
    template.sendBodyAndProperty("log:no-mask?showProperties=true&logMask=false","password=passw0rd@","propertyPassphrase","#property-passphrase$");
    context.stop();
  }
  @Test public void testCustomFormatter() throws Exception {
    CamelContext context=createCamelContext();
    MockMaskingFormatter customFormatter=new MockMaskingFormatter();
    registry.bind(Constants.CUSTOM_LOG_MASK_REF,customFormatter);
    context.start();
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBody("log:mock?logMask=true","password=passw0rd@");
    context.stop();
    Assert.assertTrue(customFormatter.received,customFormatter.received.contains("password=passw0rd@"));
  }
public static class MockMaskingFormatter implements MaskingFormatter {
    private String received;
    @Override public String format(    String source){
      received=source;
      return source;
    }
  }
}
