public class SplitContinuedLogIssueTest extends ContextTestSupport {
  @Test public void testFooBar() throws Exception {
    getMockEndpoint("mock:error").expectedBodiesReceived("bar");
    getMockEndpoint("mock:line").expectedBodiesReceived("foo","bar");
    getMockEndpoint("mock:result").expectedBodiesReceived("foo=bar");
    String out=template.requestBody("direct:start","foo,bar",String.class);
    assertEquals("foo=bar",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBarFoo() throws Exception {
    getMockEndpoint("mock:error").expectedBodiesReceived("bar");
    getMockEndpoint("mock:line").expectedBodiesReceived("bar","foo");
    getMockEndpoint("mock:result").expectedBodiesReceived("bar=foo");
    String out=template.requestBody("direct:start","bar,foo",String.class);
    assertEquals("bar=foo",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).continued(true).logContinued(false).to("log:error","mock:error");
        from("direct:start").split(body(),new SplitAggregationStrategy()).shareUnitOfWork().to("mock:line").filter(simple("${body} == 'bar'")).throwException(new IllegalArgumentException("Forced")).end().end().to("log:result").to("mock:result");
      }
    }
;
  }
private class SplitAggregationStrategy implements AggregationStrategy {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String s1=oldExchange.getIn().getBody(String.class);
      String s2=newExchange.getIn().getBody(String.class);
      String body=s1 + "=" + s2;
      oldExchange.getIn().setBody(body);
      return oldExchange;
    }
  }
}
