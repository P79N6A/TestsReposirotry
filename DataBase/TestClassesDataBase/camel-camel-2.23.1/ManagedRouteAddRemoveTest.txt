/** 
 * Tests mbeans is registered when adding a 2nd route after CamelContext has been started.
 * @version 
 */
public class ManagedRouteAddRemoveTest extends ManagementTestSupport {
  private int services=10;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("foo").to("mock:result");
      }
    }
;
  }
  @Test public void testRouteAddRemoteRouteWithTo() throws Exception {
    Assume.assumeFalse(isPlatform("aix"));
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    ObjectName onP=ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");
    Set<ObjectName> namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").to("mock:bar");
      }
    }
);
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(1);
    template.sendBody("direct:bar","Hello World");
    bar.assertIsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(2,namesP.size());
    log.info("Removing 2nd route");
    context.stopRoute("bar");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Shutting down...");
  }
  @Test public void testRouteAddRemoteRouteWithRecipientList() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    ObjectName onP=ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");
    Set<ObjectName> namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").recipientList(header("bar"));
      }
    }
);
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:bar","Hello World","bar","mock:bar");
    bar.assertIsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Removing 2nd route");
    context.stopRoute("bar");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Shutting down...");
  }
  @Test public void testRouteAddRemoteRouteWithRoutingSlip() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    ObjectName onP=ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");
    Set<ObjectName> namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").routingSlip(header("bar"));
      }
    }
);
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:bar","Hello World","bar","mock:bar");
    bar.assertIsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Removing 2nd route");
    context.stopRoute("bar");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(1,namesP.size());
    log.info("Shutting down...");
  }
  @Test public void testRouteAddRemoteRouteWithRecipientListAndRouteScopedOnException() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").onException(Exception.class).handled(true).recipientList(header("error")).end().end().recipientList(header("bar")).throwException(new IllegalArgumentException("Forced"));
      }
    }
);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("error","mock:error");
    headers.put("bar","mock:bar");
    template.sendBodyAndHeaders("direct:bar","Hello World",headers);
    assertMockEndpointsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Stopping 2nd route");
    context.stopRoute("bar");
    log.info("Removing 2nd route");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Shutting down...");
  }
  @Test public void testRouteAddRemoteRouteWithRecipientListAndContextScopedOnException() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).recipientList(header("error")).end();
        from("direct:bar").routeId("bar").recipientList(header("bar")).throwException(new IllegalArgumentException("Forced"));
      }
    }
);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("error","mock:error");
    headers.put("bar","mock:bar");
    template.sendBodyAndHeaders("direct:bar","Hello World",headers);
    assertMockEndpointsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Stopping 2nd route");
    context.stopRoute("bar");
    log.info("Removing 2nd route");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Shutting down...");
  }
  @Test public void testRouteAddRemoteRouteWithRecipientListAndRouteScopedOnCompletion() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").onCompletion().recipientList(header("done")).end().end().recipientList(header("bar"));
      }
    }
);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:done").expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("done","mock:done");
    headers.put("bar","mock:bar");
    template.sendBodyAndHeaders("direct:bar","Hello World",headers);
    assertMockEndpointsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Stopping 2nd route");
    context.stopRoute("bar");
    log.info("Removing 2nd route");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Shutting down...");
  }
  @Test public void testRouteAddRemoteRouteWithRecipientListAndContextScopedOnCompletion() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onCompletion().recipientList(header("done")).end();
        from("direct:bar").routeId("bar").recipientList(header("bar"));
      }
    }
);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:done").expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("done","mock:done");
    headers.put("bar","mock:bar");
    template.sendBodyAndHeaders("direct:bar","Hello World",headers);
    assertMockEndpointsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Stopping 2nd route");
    context.stopRoute("bar");
    log.info("Removing 2nd route");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    log.info("Shutting down...");
  }
}
