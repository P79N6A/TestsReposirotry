/** 
 */
public class WsProducerConsumerTest extends CamelTestSupport {
  protected static final String TEST_MESSAGE="Hello World!";
  protected static final int PORT=AvailablePortFinder.getNextAvailable();
  protected Server server;
  protected List<Object> messages;
  public void startTestServer() throws Exception {
    server=new Server(PORT);
    Connector connector=new ServerConnector(server);
    server.addConnector(connector);
    ServletContextHandler ctx=new ServletContextHandler();
    ctx.setContextPath("/");
    ctx.addServlet(TestServletFactory.class.getName(),"/*");
    server.setHandler(ctx);
    server.start();
    assertTrue(server.isStarted());
  }
  public void stopTestServer() throws Exception {
    server.stop();
    server.destroy();
  }
  @Override @Before public void setUp() throws Exception {
    startTestServer();
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    stopTestServer();
  }
  @Test public void testTwoRoutes() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(TEST_MESSAGE);
    template.sendBody("direct:input",TEST_MESSAGE);
    mock.assertIsSatisfied();
  }
  @Test public void testTwoRoutesRestartConsumer() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(TEST_MESSAGE);
    template.sendBody("direct:input",TEST_MESSAGE);
    mock.assertIsSatisfied();
    resetMocks();
    log.info("Restarting bar route");
    context.stopRoute("bar");
    Thread.sleep(500);
    context.startRoute("bar");
    mock.expectedBodiesReceived(TEST_MESSAGE);
    template.sendBody("direct:input",TEST_MESSAGE);
    mock.assertIsSatisfied();
  }
  @Test public void testTwoRoutesRestartProducer() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(TEST_MESSAGE);
    template.sendBody("direct:input",TEST_MESSAGE);
    mock.assertIsSatisfied();
    resetMocks();
    log.info("Restarting foo route");
    context.stopRoute("foo");
    Thread.sleep(500);
    context.startRoute("foo");
    mock.expectedBodiesReceived(TEST_MESSAGE);
    template.sendBody("direct:input",TEST_MESSAGE);
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    RouteBuilder[] rbs=new RouteBuilder[2];
    rbs[0]=new RouteBuilder(){
      public void configure(){
        from("direct:input").routeId("foo").to("ahc-ws://localhost:" + PORT);
      }
    }
;
    rbs[1]=new RouteBuilder(){
      public void configure(){
        from("ahc-ws://localhost:" + PORT).routeId("bar").to("mock:result");
      }
    }
;
    return rbs;
  }
}
