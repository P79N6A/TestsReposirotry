/** 
 * @version 
 */
public class OnCompletionGlobalTraceTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myProcessor",new MyProcessor());
    return jndi;
  }
  @Test public void testSynchronizeComplete() throws Exception {
    getMockEndpoint("mock:sync").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION,true);
    getMockEndpoint("mock:trace").expectedMessageCount(4);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    TraceEventMessage msg1=getMockEndpoint("mock:trace").getReceivedExchanges().get(0).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg2=getMockEndpoint("mock:trace").getReceivedExchanges().get(1).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg3=getMockEndpoint("mock:trace").getReceivedExchanges().get(2).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg4=getMockEndpoint("mock:trace").getReceivedExchanges().get(3).getIn().getBody(TraceEventMessage.class);
    assertEquals("direct://start",msg1.getFromEndpointUri());
    assertEquals("ref:myProcessor",msg1.getToNode());
    assertEquals("ref:myProcessor",msg2.getPreviousNode());
    assertEquals("mock://result",msg2.getToNode());
    assertTrue(msg3.getPreviousNode().startsWith("OnCompletion"));
    assertEquals("log://global",msg3.getToNode());
    assertEquals("log://global",msg4.getPreviousNode());
    assertEquals("mock://sync",msg4.getToNode());
  }
  @Test public void testSynchronizeFailure() throws Exception {
    getMockEndpoint("mock:sync").expectedMessageCount(1);
    getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION,true);
    getMockEndpoint("mock:trace").expectedMessageCount(3);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Kabom");
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Kabom",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    TraceEventMessage msg1=getMockEndpoint("mock:trace").getReceivedExchanges().get(0).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg2=getMockEndpoint("mock:trace").getReceivedExchanges().get(1).getIn().getBody(TraceEventMessage.class);
    TraceEventMessage msg3=getMockEndpoint("mock:trace").getReceivedExchanges().get(2).getIn().getBody(TraceEventMessage.class);
    assertEquals("direct://start",msg1.getFromEndpointUri());
    assertEquals("ref:myProcessor",msg1.getToNode());
    assertTrue(msg2.getPreviousNode().startsWith("OnCompletion"));
    assertEquals("log://global",msg2.getToNode());
    assertEquals("log://global",msg3.getPreviousNode());
    assertEquals("mock://sync",msg3.getToNode());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        Tracer tracer=new Tracer();
        tracer.setDestinationUri("mock:trace");
        context.addInterceptStrategy(tracer);
        onCompletion().to("log:global").to("mock:sync");
        from("direct:start").process("myProcessor").to("mock:result");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public MyProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      if ("Kabom".equals(exchange.getIn().getBody())) {
        throw new IllegalArgumentException("Kabom");
      }
      exchange.getIn().setBody("Bye World");
    }
  }
}
