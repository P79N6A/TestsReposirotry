/** 
 * Unit test for expression option for file consumer.
 */
public class FileConsumerMoveExpressionTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filelanguage");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myguidgenerator",new MyGuidGenerator());
    return jndi;
  }
  @Test public void testRenameToId() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=${id}.bak").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file://target/filelanguage/","Hello World",Exchange.FILE_NAME,"report.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    String id=mock.getExchanges().get(0).getIn().getMessageId();
    File file=new File("target/filelanguage/" + id + ".bak");
    assertTrue("File should have been renamed",file.exists());
  }
  @Test public void testRenameToComplexWithId() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=backup-${id}-${file:name.noext}.bak").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    template.sendBodyAndHeader("file://target/filelanguage/","Bye World",Exchange.FILE_NAME,"report2.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    String id=mock.getExchanges().get(0).getIn().getMessageId();
    File file=new File("target/filelanguage/backup-" + id + "-report2.bak");
    assertTrue("File should have been renamed",file.exists());
  }
  @Test public void testRenameToBean() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=backup/${bean:myguidgenerator.guid}.txt").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye Big World");
    mock.expectedFileExists("target/filelanguage/backup/123.txt","Bye Big World");
    template.sendBodyAndHeader("file://target/filelanguage/","Bye Big World",Exchange.FILE_NAME,"report3.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRenameToSiblingFolder() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=../backup/${file:name}.bak").to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Big World");
    mock.expectedFileExists("target/backup/report4.txt.bak");
    template.sendBodyAndHeader("file://target/filelanguage/","Hello Big World",Exchange.FILE_NAME,"report4.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRenameToBeanWithBeanLanguage() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        FileEndpoint endpoint=new FileEndpoint();
        endpoint.setCamelContext(context);
        endpoint.setFile(new File("target/filelanguage/"));
        endpoint.setAutoCreate(false);
        endpoint.setMove(BeanLanguage.bean("myguidgenerator"));
        endpoint.setExclude(".*bak");
        endpoint.setInitialDelay(10);
        from(endpoint).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bean Language Rules The World");
    mock.expectedFileExists("target/filelanguage/123");
    template.sendBodyAndHeader("file://target/filelanguage/","Bean Language Rules The World",Exchange.FILE_NAME,"report5.txt");
    assertMockEndpointsSatisfied();
  }
public class MyGuidGenerator {
    public String guid(){
      return "123";
    }
  }
}
