public class FtpPollEnrichBridgeErrorHandlerTest extends BaseServerTestSupport {
  private String uri="ftp://admin@localhost:" + getPort() + "/unknown/?password=admin"+ "&maximumReconnectAttempts=0&autoCreate=false&throwExceptionOnConnectFailed=true&consumer.bridgeErrorHandler=true";
  @Test public void testPollEnrich() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    Exchange out=getMockEndpoint("mock:dead").getExchanges().get(0);
    assertNotNull(out);
    Exception caught=out.getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull("Should store caught exception",caught);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("seda:start").pollEnrich(uri,60000,new MyAggregationStrategy(),true).to("mock:result");
      }
    }
;
  }
private class MyAggregationStrategy implements AggregationStrategy {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (newExchange != null) {
        copyResultsPreservePattern(oldExchange,newExchange);
      }
 else {
        oldExchange.getIn().setBody(null);
        oldExchange.setOut(null);
      }
      oldExchange.removeProperties(Exchange.REDELIVERY_EXHAUSTED);
      return oldExchange;
    }
  }
}
