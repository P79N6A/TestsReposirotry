public abstract class CamelHBaseTestSupport extends CamelTestSupport {
  protected static Boolean systemReady=true;
  protected static HBaseTestingUtility hbaseUtil=new HBaseTestingUtility();
  protected static int numServers=1;
  protected static final String PERSON_TABLE="person";
  protected static final String INFO_FAMILY="info";
  private static final Logger LOG=LoggerFactory.getLogger(CamelHBaseTestSupport.class);
  protected String[] key={"1","2","3"};
  protected final String[] family={"info","birthdate","address"};
  protected final String[][] column={{"id","firstName","lastName"},{"day","month","year"},{"street","number","zip"}};
  protected final String[][][] body={{{"1","Ioannis","Canellos"},{"09","03","1980"},{"Awesome Street","23","15344"}},{{"2","John","Dow"},{"01","01","1979"},{"Unknown Street","1","1010"}},{{"3","Christian","Mueller"},{"09","01","1979"},{"Another Unknown Street","14","2020"}}};
  protected final byte[][] families={family[0].getBytes(),family[1].getBytes(),family[2].getBytes()};
  @BeforeClass public static void setUpClass() throws Exception {
    try {
      hbaseUtil.startMiniCluster(numServers);
    }
 catch (    Exception e) {
      LOG.warn("couldn't start HBase cluster. Test is not started, but passed!",e);
      systemReady=false;
    }
  }
  @AfterClass public static void tearDownClass() throws Exception {
    if (systemReady) {
      hbaseUtil.shutdownMiniCluster();
    }
  }
  @Before public void setUp() throws Exception {
    if (systemReady) {
      try {
        hbaseUtil.createTable(HBaseHelper.getHBaseFieldAsBytes(PERSON_TABLE),families);
      }
 catch (      TableExistsException ex) {
      }
      super.setUp();
    }
  }
  @After public void tearDown() throws Exception {
    if (systemReady) {
      hbaseUtil.deleteTable(PERSON_TABLE.getBytes());
      super.tearDown();
    }
  }
  @Override public CamelContext createCamelContext() throws Exception {
    CamelContext context=new DefaultCamelContext(createRegistry());
    HBaseComponent component=context.getComponent("hbase",HBaseComponent.class);
    component.setConfiguration(hbaseUtil.getConfiguration());
    return context;
  }
  protected void putMultipleRows() throws IOException {
    Configuration configuration=hbaseUtil.getHBaseAdmin().getConfiguration();
    Connection connection=ConnectionFactory.createConnection(configuration);
    Table table=connection.getTable(TableName.valueOf(PERSON_TABLE.getBytes()));
    for (int r=0; r < key.length; r++) {
      Put put=new Put(key[r].getBytes());
      put.addColumn(family[0].getBytes(),column[0][0].getBytes(),body[r][0][0].getBytes());
      table.put(put);
    }
    IOHelper.close(table);
  }
}
