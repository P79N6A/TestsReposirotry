private static final class TestOlingo2ResponseHandler<T> implements Olingo2ResponseHandler<T> {
  private T response;
  private Exception error;
  private CountDownLatch latch=new CountDownLatch(1);
  @Override public void onResponse(  T response,  Map<String,String> responseHeaders){
    this.response=response;
    if (LOG.isDebugEnabled()) {
      if (response instanceof ODataFeed) {
        LOG.debug("Received response: {}",prettyPrint((ODataFeed)response));
      }
 else       if (response instanceof ODataEntry) {
        LOG.debug("Received response: {}",prettyPrint((ODataEntry)response));
      }
 else {
        LOG.debug("Received response: {}",response);
      }
    }
    latch.countDown();
  }
  @Override public void onException(  Exception ex){
    error=ex;
    latch.countDown();
  }
  @Override public void onCanceled(){
    error=new IllegalStateException("Request Canceled");
    latch.countDown();
  }
  public T await() throws Exception {
    return await(TIMEOUT,TimeUnit.SECONDS);
  }
  public T await(  long timeout,  TimeUnit unit) throws Exception {
    assertTrue("Timeout waiting for response",latch.await(timeout,unit));
    if (error != null) {
      throw error;
    }
    assertNotNull("Response",response);
    return response;
  }
  public void reset(){
    latch.countDown();
    latch=new CountDownLatch(1);
    response=null;
    error=null;
  }
}
