public class CacheBasedTokenReplacerTest extends BaseCacheTest {
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce(uri="direct:loadcache") protected ProducerTemplate producerTemplate;
  String quote="#novel# - #author#\n" + "'Tis all a Chequer-board of Nights and Days\n" + "Where Destiny with Men for Pieces plays:\n"+ "Hither and thither moves, and mates, and slays,\n"+ "And #number# by #number# back in the Closet lays.";
  @Test public void testCacheBasedTokenReplacer() throws Exception {
    log.debug("Beginning Test ---> testCacheBasedTokenReplacer()");
    resultEndpoint.expectedMessageCount(1);
    List<String> keys=new ArrayList<>();
    keys.add("novel");
    keys.add("author");
    keys.add("number");
    keys.add("quote");
    for (    final String key : keys) {
      producerTemplate.send(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          exchange.setProperty(Exchange.CHARSET_NAME,"UTF-8");
          Message in=exchange.getIn();
          in.setHeader(CacheConstants.CACHE_OPERATION,CacheConstants.CACHE_OPERATION_ADD);
          in.setHeader(CacheConstants.CACHE_KEY,key);
          if (key.equalsIgnoreCase("novel")) {
            in.setBody("Rubaiyat");
          }
 else           if (key.equalsIgnoreCase("author")) {
            in.setBody("Omar Khayyam");
          }
 else           if (key.equalsIgnoreCase("number")) {
            in.setBody("one");
          }
 else {
            in.setBody(quote);
          }
        }
      }
);
    }
    resultEndpoint.assertIsSatisfied();
    log.debug("Completed Test ---> testCacheBasedTokenReplacer()");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("cache://TestCache1").filter(header(CacheConstants.CACHE_KEY).isEqualTo("quote")).process(new CacheBasedTokenReplacer("cache://TestCache1","novel","#novel#")).process(new CacheBasedTokenReplacer("cache://TestCache1","author","#author#")).process(new CacheBasedTokenReplacer("cache://TestCache1","number","#number#")).to("direct:next");
        from("direct:next").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String key=(String)exchange.getIn().getHeader(CacheConstants.CACHE_KEY);
            Object body=exchange.getIn().getBody();
            String data=exchange.getContext().getTypeConverter().convertTo(String.class,body);
            if (log.isDebugEnabled()) {
              log.debug("------- Payload Replacement Results ---------");
              log.debug("The following Payload was replaced from Cache: TestCache1");
              log.debug("key = {}",key);
              log.debug("Before Value = {}",quote);
              log.debug("After value = {}",data);
              log.debug("------ End  ------");
            }
          }
        }
).to("mock:result");
        from("direct:loadcache").to("cache://TestCache1");
      }
    }
;
  }
}
