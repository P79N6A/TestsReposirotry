/** 
 */
public class HttpJettyProducerTwoParametersWithSameKeyTest extends BaseJettyTest {
  @Test public void testTwoParametersWithSameKey() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    Thread.sleep(1000);
    Exchange out=template.request("jetty:http://localhost:{{port}}/myapp?from=me&to=foo&to=bar",null);
    assertNotNull(out);
    assertFalse("Should not fail",out.isFailed());
    assertEquals("OK",out.getOut().getBody(String.class));
    assertEquals("yes",out.getOut().getHeader("bar"));
    List<?> foo=out.getOut().getHeader("foo",List.class);
    assertEquals(2,foo.size());
    assertEquals("123",foo.get(0));
    assertEquals("456",foo.get(1));
  }
  @Test public void testTwoHeadersWithSameKeyHeader() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    Thread.sleep(1000);
    Exchange out=template.request("jetty:http://localhost:{{port}}/myapp",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(null);
        exchange.getIn().setHeader("from","me");
        List<String> list=new ArrayList<>();
        list.add("foo");
        list.add("bar");
        exchange.getIn().setHeader("to",list);
      }
    }
);
    assertNotNull(out);
    assertFalse("Should not fail",out.isFailed());
    assertEquals("OK",out.getOut().getBody(String.class));
    assertEquals("yes",out.getOut().getHeader("bar"));
    List<?> foo=out.getOut().getHeader("foo",List.class);
    assertNotNull(foo);
    assertEquals(2,foo.size());
    assertEquals("123",foo.get(0));
    assertEquals("456",foo.get(1));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jetty://http://localhost:{{port}}/myapp").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String from=exchange.getIn().getHeader("from",String.class);
            assertEquals("me",from);
            List<?> values=exchange.getIn().getHeader("to",List.class);
            assertNotNull(values);
            assertEquals(2,values.size());
            assertEquals("foo",values.get(0));
            assertEquals("bar",values.get(1));
            exchange.getOut().setBody("OK");
            List<Integer> list=new ArrayList<>();
            list.add(123);
            list.add(456);
            exchange.getOut().setHeader("foo",list);
            exchange.getOut().setHeader("bar","yes");
          }
        }
);
      }
    }
;
  }
}
