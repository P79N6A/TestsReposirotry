public class EventDrivenPollingConsumerQueueSizeTest extends ContextTestSupport {
  private String uri="my:foo?pollingConsumerQueueSize=10&pollingConsumerBlockWhenFull=false";
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context.addComponent("my",new MyQueueComponent());
  }
  @Test public void testQueueSize() throws Exception {
    context.start();
    PollingConsumer consumer=context.getEndpoint(uri).createPollingConsumer();
    consumer.start();
    assertNotNull(consumer);
    EventDrivenPollingConsumer edpc=assertIsInstanceOf(EventDrivenPollingConsumer.class,consumer);
    assertEquals(0,edpc.getQueueSize());
    assertEquals(10,edpc.getQueueCapacity());
    assertFalse(edpc.isBlockWhenFull());
    for (int i=0; i < 10; i++) {
      template.sendBody(uri,"Message " + i);
    }
    assertEquals(10,edpc.getQueueSize());
    try {
      template.sendBody(uri,"Message 10");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(IllegalStateException.class,e.getCause());
    }
    Exchange out=consumer.receive(5000);
    assertNotNull(out);
    assertEquals("Message 0",out.getIn().getBody());
    assertEquals(9,edpc.getQueueSize());
    assertEquals(10,edpc.getQueueCapacity());
    template.sendBody(uri,"Message 10");
    assertEquals(10,edpc.getQueueSize());
    assertEquals(10,edpc.getQueueCapacity());
    ServiceHelper.stopService(consumer);
    assertEquals(10,edpc.getQueueSize());
    assertEquals(10,edpc.getQueueCapacity());
    ServiceHelper.stopAndShutdownService(consumer);
    assertEquals(0,edpc.getQueueSize());
    assertEquals(10,edpc.getQueueCapacity());
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
private final class MyQueueComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new MyQueueEndpoint(uri,this);
    }
  }
private final class MyQueueEndpoint extends DefaultEndpoint {
    private EventDrivenPollingConsumer consumer;
    private MyQueueEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    @Override public Producer createProducer() throws Exception {
      return new DefaultProducer(this){
        @Override public void process(        Exchange exchange) throws Exception {
          consumer.process(exchange);
        }
      }
;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return consumer;
    }
    @Override public PollingConsumer createPollingConsumer() throws Exception {
      return consumer;
    }
    @Override public boolean isSingleton(){
      return true;
    }
    @Override protected void doStart() throws Exception {
      consumer=(EventDrivenPollingConsumer)super.createPollingConsumer();
      super.doStart();
    }
  }
}
