/** 
 * Unit test done files with moveFailed option
 */
public class FilerConsumerMoveFailedDoneFileNameTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/done");
    super.setUp();
  }
  @Test public void testDoneFile() throws Exception {
    getMockEndpoint("mock:input").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/done","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:target/done","",Exchange.FILE_NAME,"done");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    File file=new File("target/done/done");
    assertFalse("Done file should be deleted: " + file,file.exists());
    file=new File("target/done/failed/hello.txt");
    assertTrue("Original file should be moved: " + file,file.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/done?doneFileName=done&initialDelay=0&delay=10&moveFailed=failed").to("mock:input").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
