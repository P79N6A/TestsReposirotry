public class ManagedZipkinSimpleRouteTest extends CamelTestSupport {
  private ZipkinTracer zipkin;
  protected void setSpanReporter(  ZipkinTracer zipkin){
    zipkin.setSpanReporter(Reporter.NOOP);
  }
  @Override protected boolean useJmx(){
    return true;
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    zipkin=new ZipkinTracer();
    zipkin.setServiceName("dude");
    setSpanReporter(zipkin);
    zipkin.init(context);
    return context;
  }
  @Test public void testZipkinRoute() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=services,name=ZipkinTracer");
    assertNotNull(on);
    assertTrue(mbeanServer.isRegistered(on));
    Float rate=(Float)mbeanServer.getAttribute(on,"Rate");
    assertEquals("Should be 1.0f",1.0f,rate.floatValue(),0.1f);
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(5).create();
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:dude","Hello World");
    }
    assertTrue(notify.matches(30,TimeUnit.SECONDS));
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:dude").routeId("dude").log("routing at ${routeId}").delay(simple("${random(10,20)}"));
      }
    }
;
  }
}
