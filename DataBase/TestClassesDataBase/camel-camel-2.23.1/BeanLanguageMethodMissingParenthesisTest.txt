public class BeanLanguageMethodMissingParenthesisTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testFooCorrect() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").filter(method(BeanLanguageMethodMissingParenthesisTest.class,"couldThisBeFoo(${body}, ${header.foo})")).to("mock:foo").end().to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","foo","yes");
    assertMockEndpointsSatisfied();
    resetMocks();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","Hello World","foo","no");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFooMissingParenthesis() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").filter(method(BeanLanguageMethodMissingParenthesisTest.class,"couldThisBeFoo(${body}, ${header.foo}")).to("mock:foo").end().to("mock:result");
      }
    }
);
    context.start();
    try {
      template.sendBodyAndHeader("direct:start","Hello World","foo","yes");
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause().getCause());
      assertEquals("Method should end with parenthesis, was couldThisBeFoo(${body}, ${header.foo}",iae.getMessage());
    }
  }
  @Test public void testFooInvalidName() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").filter(method(BeanLanguageMethodMissingParenthesisTest.class,"--couldThisBeFoo(${body}, ${header.foo})")).to("mock:foo").end().to("mock:result");
      }
    }
);
    context.start();
    try {
      template.sendBodyAndHeader("direct:start","Hello World","foo","yes");
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause().getCause());
      assertEquals("Method name must start with a valid java identifier at position: 0 in method: --couldThisBeFoo(${body}, ${header.foo})",iae.getMessage());
    }
  }
  public boolean couldThisBeFoo(  String body,  String header){
    return "yes".equals(header);
  }
}
