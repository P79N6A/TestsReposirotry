/** 
 */
public class AdviceWithOnExceptionMultipleIssueTest extends CamelSpringTestSupport {
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/test/issues/AdviceWithOnExceptionMultipleIssueTest.xml");
  }
  @Override public boolean isUseAdviceWith(){
    return true;
  }
  @Test public void testSimpleMultipleAdvice() throws Exception {
    context.getRouteDefinition("RouteA").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock:resultA").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
          }
        }
);
      }
    }
);
    context.getRouteDefinition("RouteB").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
      }
    }
);
    context.start();
    getMockEndpoint("mock:resultA").expectedMessageCount(1);
    template.sendBody("direct:startA","a trigger");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMultipleAdviceWithExceptionThrown() throws Exception {
    context.getRouteDefinition("RouteA").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock:resultA").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            throw new Exception("my exception");
          }
        }
);
      }
    }
);
    context.start();
    getMockEndpoint("mock:resultA").expectedMessageCount(0);
    template.sendBody("direct:startA","a trigger");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMultipleAdvice() throws Exception {
    context.getRouteDefinition("RouteA").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock:resultA").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            throw new Exception("my exception");
          }
        }
);
      }
    }
);
    context.getRouteDefinition("RouteB").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
      }
    }
);
    context.start();
    getMockEndpoint("mock:resultA").expectedMessageCount(0);
    template.sendBody("direct:startA","a trigger");
    assertMockEndpointsSatisfied();
  }
}
