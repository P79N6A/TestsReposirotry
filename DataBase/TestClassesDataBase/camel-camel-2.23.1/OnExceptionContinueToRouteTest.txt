/** 
 * @version 
 */
public class OnExceptionContinueToRouteTest extends ContextTestSupport {
  @Test public void testOnExceptionContinueToRoute() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:b").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:catch").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:catch").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class);
    getMockEndpoint("mock:c").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:c").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class);
    template.sendBody("direct:a","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).continued(true).to("mock:catch");
        from("direct:a").to("mock:a").to("direct:b").to("direct:c");
        from("direct:b").to("mock:b").throwException(new IllegalArgumentException("Damn"));
        from("direct:c").to("mock:c");
      }
    }
;
  }
}
