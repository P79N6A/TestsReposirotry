public class PahoComponentTest extends CamelTestSupport {
  MqttConnectOptions connectOptions=new MqttConnectOptions();
  @EndpointInject(uri="mock:test") MockEndpoint mock;
  @EndpointInject(uri="mock:testCustomizedPaho") MockEndpoint testCustomizedPahoMock;
  BrokerService broker;
  int mqttPort=AvailablePortFinder.getNextAvailable();
  @Override protected boolean useJmx(){
    return false;
  }
  @Override public void doPreSetup() throws Exception {
    super.doPreSetup();
    broker=new BrokerService();
    broker.setPersistent(false);
    broker.addConnector("mqtt://localhost:" + mqttPort);
    broker.start();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    broker.stop();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        PahoComponent customizedPaho=new PahoComponent();
        context.addComponent("customizedPaho",customizedPaho);
        from("direct:test").to("paho:queue?brokerUrl=tcp://localhost:" + mqttPort);
        from("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).to("mock:test");
        from("direct:test2").to("paho:queue?brokerUrl=tcp://localhost:" + mqttPort);
        from("paho:persistenceTest?persistence=FILE&brokerUrl=tcp://localhost:" + mqttPort).to("mock:persistenceTest");
        from("direct:connectOptions").to("paho:registryConnectOptions?connectOptions=#connectOptions&brokerUrl=tcp://localhost:" + mqttPort);
        from("direct:testCustomizedPaho").to("customizedPaho:testCustomizedPaho?brokerUrl=tcp://localhost:" + mqttPort);
        from("paho:testCustomizedPaho?brokerUrl=tcp://localhost:" + mqttPort).to("mock:testCustomizedPaho");
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("connectOptions",connectOptions);
    return registry;
  }
  @Test public void checkOptions(){
    String uri="paho:/test/topic" + "?clientId=sampleClient" + "&brokerUrl=tcp://localhost:" + mqttPort + "&qos=2"+ "&persistence=file";
    PahoEndpoint endpoint=getMandatoryEndpoint(uri,PahoEndpoint.class);
    assertEquals("/test/topic",endpoint.getTopic());
    assertEquals("sampleClient",endpoint.getClientId());
    assertEquals("tcp://localhost:" + mqttPort,endpoint.getBrokerUrl());
    assertEquals(2,endpoint.getQos());
    assertEquals(PahoPersistence.FILE,endpoint.getPersistence());
  }
  @Test public void shouldReadMessageFromMqtt() throws InterruptedException {
    String msg="msg";
    mock.expectedBodiesReceived(msg);
    template.sendBody("direct:test",msg);
    mock.assertIsSatisfied();
  }
  @Test public void shouldNotReadMessageFromUnregisteredTopic() throws InterruptedException {
    mock.expectedMessageCount(0);
    template.sendBody("paho:someRandomQueue?brokerUrl=tcp://localhost:" + mqttPort,"msg");
    mock.assertIsSatisfied();
  }
  @Test public void shouldUseConnectionOptionsFromRegistry(){
    PahoEndpoint pahoWithConnectOptionsFromRegistry=getMandatoryEndpoint("paho:registryConnectOptions?connectOptions=#connectOptions&brokerUrl=tcp://localhost:" + mqttPort,PahoEndpoint.class);
    assertSame(connectOptions,pahoWithConnectOptionsFromRegistry.resolveMqttConnectOptions());
  }
  @Test public void shouldAutomaticallyUseConnectionOptionsFromRegistry(){
    PahoEndpoint pahoWithConnectOptionsFromRegistry=getMandatoryEndpoint("paho:registryConnectOptions?brokerUrl=tcp://localhost:" + mqttPort,PahoEndpoint.class);
    assertSame(connectOptions,pahoWithConnectOptionsFromRegistry.resolveMqttConnectOptions());
  }
  @Test public void shouldKeepDefaultMessageInHeader() throws InterruptedException, UnsupportedEncodingException {
    final String msg="msg";
    mock.expectedBodiesReceived(msg);
    template.sendBody("direct:test",msg);
    mock.assertIsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    String payload=new String((byte[])exchange.getIn().getBody(),"utf-8");
    assertEquals("queue",exchange.getIn().getHeader(PahoConstants.MQTT_TOPIC));
    assertEquals(msg,payload);
  }
  @Test public void shouldKeepOriginalMessageInHeader() throws InterruptedException {
    final String msg="msg";
    mock.expectedBodiesReceived(msg);
    template.sendBody("direct:test2",msg);
    mock.assertIsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    MqttMessage message=exchange.getIn(PahoMessage.class).getMqttMessage();
    assertNotNull(message);
    assertEquals(msg,new String(message.getPayload()));
  }
  @Test public void shouldReadMessageFromCustomizedComponent() throws InterruptedException {
    String msg="msg";
    testCustomizedPahoMock.expectedBodiesReceived(msg);
    template.sendBody("direct:testCustomizedPaho",msg);
    testCustomizedPahoMock.assertIsSatisfied();
  }
  @Test public void shouldNotSendMessageAuthIsNotValid() throws InterruptedException {
    mock.expectedMessageCount(0);
    template.sendBody("paho:someRandomQueue?brokerUrl=tcp://localhost:" + mqttPort + "&userName=test&password=test","msg");
    mock.assertIsSatisfied();
  }
}
