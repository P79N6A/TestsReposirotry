/** 
 * Easier transaction configuration as we do not have to setup a transaction error handler
 */
public class TransactedInterceptUsingAdviceWithSendToEndpointTest extends TransactionalClientDataSourceTest {
  @Test public void testTransactionSuccess() throws Exception {
    MockEndpoint intercepted=getMockEndpoint("mock:intercepted");
    addInterceptor("ok_route");
    intercepted.expectedBodiesReceived("Hello World");
    super.testTransactionSuccess();
    assertMockEndpointsSatisfied();
  }
  @Test public void testTransactionRollback() throws Exception {
    MockEndpoint intercepted=getMockEndpoint("mock:intercepted");
    addInterceptor("fail_route");
    intercepted.expectedBodiesReceived("Tiger in Action");
    super.testTransactionRollback();
    assertMockEndpointsSatisfied();
  }
  private void addInterceptor(  String routeId) throws Exception {
    context.getRouteDefinition(routeId).adviceWith(context,new SpringRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("direct:(foo|bar)").to("mock:intercepted");
      }
    }
);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new SpringRouteBuilder(){
      public void configure() throws Exception {
        from("direct:okay").routeId("ok_route").transacted().enrich("direct:foo",(oldExchange,newExchange) -> {
          return newExchange;
        }
).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService");
        from("direct:fail").routeId("fail_route").transacted().setBody(constant("Tiger in Action")).bean("bookService").enrich("direct:bar",(oldExchange,newExchange) -> {
          return newExchange;
        }
).setBody(constant("Donkey in Action")).bean("bookService");
        from("direct:foo").to("log:okay");
        from("direct:bar").to("mock:fail");
      }
    }
;
  }
}
