public class JettyHttpProducerSessionTest extends CamelTestSupport {
  private static volatile int port;
  @BeforeClass public static void initPort() throws Exception {
    port=AvailablePortFinder.getNextAvailable(24000);
  }
  @Test public void testNoSession() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("New New World","Old Old World");
    template.sendBody("direct:start","World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInstanceSession() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Old New World","Old Old World");
    template.sendBody("direct:instance","World");
    template.sendBody("direct:instance","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testExchangeSession() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Old New World","Old New World");
    template.sendBody("direct:exchange","World");
    template.sendBody("direct:exchange","World");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndiRegistry=super.createRegistry();
    jndiRegistry.bind("instanceCookieHandler",new InstanceCookieHandler());
    jndiRegistry.bind("exchangeCookieHandler",new ExchangeCookieHandler());
    return jndiRegistry;
  }
  private String getTestServerEndpointSessionUrl(){
    return "http://127.0.0.1:" + port + "/session";
  }
  private String getTestServerEndpointSessionUri(){
    return "jetty:" + getTestServerEndpointSessionUrl() + "?sessionSupport=true";
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("jetty://" + getTestServerEndpointSessionUrl()).to("jetty://" + getTestServerEndpointSessionUrl()).to("mock:result");
        from("direct:instance").to("jetty://" + getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("jetty://" + getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("mock:result");
        from("direct:exchange").to("jetty://" + getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("jetty://" + getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("mock:result");
        from(getTestServerEndpointSessionUri()).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            HttpMessage message=exchange.getIn(HttpMessage.class);
            HttpSession session=message.getRequest().getSession();
            String body=message.getBody(String.class);
            if ("bar".equals(session.getAttribute("foo"))) {
              message.setBody("Old " + body);
            }
 else {
              session.setAttribute("foo","bar");
              message.setBody("New " + body);
            }
          }
        }
);
      }
    }
;
  }
}
