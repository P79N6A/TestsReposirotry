/** 
 * @version 
 */
public class JmsCustomHeaderFilterStrategyTest extends CamelTestSupport {
  protected String componentName="activemq";
  @Test public void testCustomHeaderFilterStrategy() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("foo").isEqualTo("bar");
    mock.message(0).header("skipme").isNull();
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo","bar");
    headers.put("skipme",123);
    template.sendBodyAndHeaders("activemq:queue:foo","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    JmsComponent jms=camelContext.getComponent(componentName,JmsComponent.class);
    jms.setHeaderFilterStrategy(new MyHeaderFilterStrategy());
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo?eagerLoadingOfProperties=true").to("mock:result");
      }
    }
;
  }
private static class MyHeaderFilterStrategy implements HeaderFilterStrategy {
    public boolean applyFilterToCamelHeaders(    String s,    Object o,    Exchange exchange){
      return false;
    }
    public boolean applyFilterToExternalHeaders(    String s,    Object o,    Exchange exchange){
      return s.equals("skipme");
    }
  }
}
