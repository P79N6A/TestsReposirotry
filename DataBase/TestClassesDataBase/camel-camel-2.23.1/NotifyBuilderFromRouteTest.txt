/** 
 * @version 
 */
public class NotifyBuilderFromRouteTest extends ContextTestSupport {
  @Test public void testDoneFromRoute() throws Exception {
    NotifyBuilder builder=new NotifyBuilder(context).fromRoute("foo").whenDone(1);
    builder.create();
    template.sendBody("seda:foo","Hello world!");
    assertTrue(builder.matchesMockWaitTime());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    final JndiRegistry registry=super.createRegistry();
    registry.bind("proxy",new ProxyComponent());
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("proxy:seda:foo").routeId("foo").to("mock:foo");
      }
    }
;
  }
private static final class ProxyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new ProxyEndpoint(this,uri,remaining);
    }
  }
private static final class ProxyEndpoint extends DefaultEndpoint {
    private final Endpoint target;
    private ProxyEndpoint(    ProxyComponent component,    String uri,    String target){
      super(uri,component);
      this.target=getCamelContext().getEndpoint(target);
    }
    @Override public Producer createProducer() throws Exception {
      return target.createProducer();
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return target.createConsumer(processor);
    }
    @Override public boolean isSingleton(){
      return target.isSingleton();
    }
  }
}
