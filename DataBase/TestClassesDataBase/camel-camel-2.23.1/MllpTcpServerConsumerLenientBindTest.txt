public class MllpTcpServerConsumerLenientBindTest extends CamelTestSupport {
  static final int RECEIVE_TIMEOUT=1000;
  static final int READ_TIMEOUT=500;
  @Rule public MllpClientResource mllpClient=new MllpClientResource();
  @EndpointInject(uri="mock://result") MockEndpoint result;
  ServerSocket portBlocker;
  @Override protected void doPreSetup() throws Exception {
    mllpClient.setMllpHost("localhost");
    mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());
    portBlocker=new ServerSocket(mllpClient.getMllpPort());
    assertTrue(portBlocker.isBound());
    super.doPreSetup();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    RouteBuilder builder=new RouteBuilder(){
      String routeId="mllp-receiver-with-lenient-bind";
      public void configure(){
        fromF("mllp://%s:%d?bindTimeout=15000&bindRetryInterval=500&receiveTimeout=%d&readTimeout=%d&reuseAddress=false&lenientBind=true",mllpClient.getMllpHost(),mllpClient.getMllpPort(),RECEIVE_TIMEOUT,READ_TIMEOUT).routeId(routeId).log(LoggingLevel.INFO,routeId,"Receiving: ${body}").to(result);
      }
    }
;
    return builder;
  }
  @Test public void testLenientBind() throws Exception {
    assertEquals(ServiceStatus.Started,context.getStatus());
    mllpClient.connect();
    try {
      mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(10001));
    }
 catch (    MllpJUnitResourceTimeoutException expectedEx) {
      assertIsInstanceOf(SocketTimeoutException.class,expectedEx.getCause());
    }
    mllpClient.reset();
    portBlocker.close();
    Thread.sleep(2000);
    assertEquals(ServiceStatus.Started,context.getStatus());
    mllpClient.connect();
    String acknowledgement=mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(10002));
    assertStringContains(acknowledgement,"10002");
  }
}
