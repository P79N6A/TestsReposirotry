/** 
 * @version 
 */
public class JMXTXUseOriginalBodyTest extends CamelSpringTestSupport {
  @EndpointInject(uri="mock:end") protected MockEndpoint endpoint;
  @EndpointInject(uri="mock:error") protected MockEndpoint error;
  @EndpointInject(uri="mock:checkpoint1") protected MockEndpoint checkpoint1;
  @EndpointInject(uri="mock:checkpoint2") protected MockEndpoint checkpoint2;
  @Produce(uri="activemq:start") protected ProducerTemplate start;
  @Produce(uri="activemq:broken") protected ProducerTemplate broken;
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/JMXTXUseOriginalBodyTest.xml");
  }
  @Test public void testWithConstant() throws InterruptedException {
    endpoint.expectedMessageCount(0);
    error.expectedBodiesReceived("foo");
    checkpoint1.expectedBodiesReceived("foo");
    checkpoint2.expectedBodiesReceived("oh no");
    start.sendBody("foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testWithBean() throws InterruptedException {
    endpoint.expectedMessageCount(0);
    error.expectedBodiesReceived("foo");
    checkpoint1.expectedBodiesReceived("foo");
    checkpoint2.expectedBodiesReceived("oh no");
    broken.sendBody("foo");
    assertMockEndpointsSatisfied();
  }
public static class FooBean {
    @Handler public String process(    @Body String body){
      return "oh no";
    }
  }
public static class TestRoutes extends SpringRouteBuilder {
    @Override public void configure() throws Exception {
      onException(Exception.class).handled(true).useOriginalMessage().maximumRedeliveries(2).to("mock:error");
      from("activemq:broken").transacted().to("mock:checkpoint1").setBody(method("foo")).to("mock:checkpoint2").throwException(new Exception("boo")).to("mock:end");
      from("activemq:start").transacted().to("mock:checkpoint1").setBody(constant("oh no")).to("mock:checkpoint2").throwException(new Exception("boo")).to("mock:end");
    }
  }
}
