/** 
 * @version 
 */
public class TwoRouteSuspendResumeTest extends ContextTestSupport {
  @Test public void testSuspendResume() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("A");
    template.sendBody("seda:foo","A");
    assertMockEndpointsSatisfied();
    log.info("Suspending");
    resetMocks();
    mock.expectedMessageCount(0);
    MockEndpoint mockBar=getMockEndpoint("mock:bar");
    mockBar.expectedMessageCount(1);
    context.suspendRoute("foo");
    await().atMost(1,TimeUnit.SECONDS).until(() -> {
      return context.getEndpoint("seda:bar",SedaEndpoint.class).getQueue().size() == 0;
    }
);
    template.sendBody("seda:foo","B");
    template.sendBody("direct:bar","C");
    mockBar.assertIsSatisfied();
    mock.assertIsSatisfied(1000);
    assertEquals("Suspended",context.getRouteStatus("foo").name());
    assertEquals("Started",context.getRouteStatus("bar").name());
    log.info("Resuming");
    resetMocks();
    mock.expectedBodiesReceived("B");
    context.resumeRoute("foo");
    assertMockEndpointsSatisfied();
    assertEquals("Started",context.getRouteStatus("foo").name());
    assertEquals("Started",context.getRouteStatus("bar").name());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo").routeId("foo").to("log:foo").to("mock:result");
        from("direct:bar").routeId("bar").to("log:bar").to("mock:bar");
      }
    }
;
  }
}
