/** 
 * Test cases for  {@link StreamCacheConverter}
 */
public class StreamCacheConverterTest extends ContextTestSupport {
  private static final String TEST_FILE="org/apache/camel/converter/stream/test.xml";
  private static final String MESSAGE="<test>This is a test</test>";
  private Exchange exchange;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    this.exchange=new DefaultExchange(context);
  }
  @Test public void testConvertToStreamCache() throws Exception {
    context.start();
    ByteArrayInputStream inputStream=new ByteArrayInputStream(MESSAGE.getBytes());
    StreamCache streamCache=StreamCacheConverter.convertToStreamCache(new SAXSource(new InputSource(inputStream)),exchange);
    String message=exchange.getContext().getTypeConverter().convertTo(String.class,streamCache);
    assertNotNull(message);
    assertEquals("The converted message is wrong",MESSAGE,message);
  }
  @Test public void testConvertToStreamCacheStreamSource() throws Exception {
    context.start();
    StreamSource source=new StreamSource(getTestFileStream());
    StreamCache cache=StreamCacheConverter.convertToStreamCache(source,exchange);
    XmlConverter converter=new XmlConverter();
    assertNotNull(converter.toString((Source)cache,null));
    cache.reset();
    assertNotNull(converter.toString((Source)cache,null));
  }
  @Test public void testConvertToStreamCacheInputStream() throws Exception {
    context.start();
    InputStream is=getTestFileStream();
    InputStream cache=(InputStream)StreamCacheConverter.convertToStreamCache(is,exchange);
    String data=IOConverter.toString(cache,null);
    cache.reset();
    String data2=IOConverter.toString(cache,null);
    assertEquals(data,data2);
  }
  @Test public void testConvertToStreamCacheInputStreamWithFileCache() throws Exception {
    exchange.getContext().getStreamCachingStrategy().setSpoolThreshold(1);
    context.start();
    InputStream is=getTestFileStream();
    InputStream cache=(InputStream)StreamCacheConverter.convertToStreamCache(is,exchange);
    assertNotNull(IOConverter.toString(cache,null));
    try {
      cache.reset();
      exchange.getUnitOfWork().done(exchange);
      fail("except the exception here");
    }
 catch (    Exception exception) {
    }
  }
  @Test public void testConvertToSerializable() throws Exception {
    context.start();
    InputStream is=getTestFileStream();
    StreamCache cache=StreamCacheConverter.convertToStreamCache(is,exchange);
    Serializable ser=StreamCacheConverter.convertToSerializable(cache,exchange);
    assertNotNull(ser);
  }
  @Test public void testConvertToByteArray() throws Exception {
    context.start();
    InputStream is=getTestFileStream();
    StreamCache cache=StreamCacheConverter.convertToStreamCache(is,exchange);
    byte[] bytes=StreamCacheConverter.convertToByteArray(cache,exchange);
    assertNotNull(bytes);
  }
  protected InputStream getTestFileStream(){
    InputStream answer=getClass().getClassLoader().getResourceAsStream(TEST_FILE);
    assertNotNull("Should have found the file: " + TEST_FILE + " on the classpath",answer);
    return answer;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
