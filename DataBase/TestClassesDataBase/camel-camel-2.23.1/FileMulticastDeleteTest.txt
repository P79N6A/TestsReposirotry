/** 
 */
public class FileMulticastDeleteTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/inbox");
    super.setUp();
  }
  @Test public void testFileMulticastDelete() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Got Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/inbox","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/inbox?delete=true&initialDelay=0&delay=10").multicast(new UseLatestAggregationStrategy()).shareUnitOfWork().to("direct:foo","direct:bar").end().convertBodyTo(String.class).to("mock:result");
        from("direct:foo").to("log:foo").aggregate(header(Exchange.FILE_NAME),new MyFileAggregator()).completionTimeout(100).convertBodyTo(String.class).to("mock:foo").end();
        from("direct:bar").to("log:bar").convertBodyTo(String.class).to("mock:bar");
      }
    }
;
  }
public class MyFileAggregator implements AggregationStrategy {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      String data=newExchange.getIn().getBody(String.class);
      newExchange.getIn().setBody("Got " + data);
      return newExchange;
    }
  }
}
