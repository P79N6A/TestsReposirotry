/** 
 */
public class SqlConsumerTest extends CamelTestSupport {
  EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testConsume() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(3);
    assertMockEndpointsSatisfied();
    List<Exchange> exchanges=mock.getReceivedExchanges();
    assertTrue(exchanges.size() >= 3);
    assertEquals(1,exchanges.get(0).getIn().getBody(Map.class).get("ID"));
    assertEquals("Camel",exchanges.get(0).getIn().getBody(Map.class).get("PROJECT"));
    assertEquals(2,exchanges.get(1).getIn().getBody(Map.class).get("ID"));
    assertEquals("AMQ",exchanges.get(1).getIn().getBody(Map.class).get("PROJECT"));
    assertEquals(3,exchanges.get(2).getIn().getBody(Map.class).get("ID"));
    assertEquals("Linux",exchanges.get(2).getIn().getBody(Map.class).get("PROJECT"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("sql:select * from projects order by id?consumer.initialDelay=0&consumer.delay=50").to("mock:result");
      }
    }
;
  }
}
