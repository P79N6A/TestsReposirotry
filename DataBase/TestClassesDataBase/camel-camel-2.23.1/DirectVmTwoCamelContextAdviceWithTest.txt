/** 
 */
public class DirectVmTwoCamelContextAdviceWithTest extends AbstractDirectVmTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:step-1a").routeId("step-1a").log("Before Step-1a ${body}").to("direct-vm:step-2a").log("After Step-1a ${body}");
      }
    }
;
  }
  @Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct-vm:step-2a").routeId("step-2a").log("Before Step-2a ${body}").setBody(constant("Bye")).log("After Step-2a ${body}");
      }
    }
;
  }
  @Test public void testTwoCamelContext() throws Exception {
    context.addRoutes(createRouteBuilder());
    context.getRouteDefinition("step-1a").adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveAddLast().to("mock:results");
      }
    }
);
    context.start();
    context2.start();
    MockEndpoint endpoint=getMockEndpoint("mock:results");
    endpoint.expectedBodiesReceived("Bye");
    template.sendBody("direct:step-1a","Hello World");
    assertMockEndpointsSatisfied();
  }
}
