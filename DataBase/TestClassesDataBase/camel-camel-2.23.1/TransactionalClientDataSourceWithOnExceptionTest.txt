/** 
 * Unit test to demonstrate the transactional client pattern.
 */
public class TransactionalClientDataSourceWithOnExceptionTest extends TransactionalClientDataSourceTest {
  @Test public void testTransactionRollback() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:error");
    mock.expectedMessageCount(1);
    try {
      template.sendBody("direct:fail","Hello World");
      fail("Should have thrown exception");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(RuntimeCamelException.class,e.getCause());
      assertTrue(e.getCause().getCause() instanceof IllegalArgumentException);
      assertEquals("We don't have Donkeys, only Camels",e.getCause().getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new SpringRouteBuilder(){
      public void configure() throws Exception {
        SpringTransactionPolicy required=lookup("PROPAGATION_REQUIRED",SpringTransactionPolicy.class);
        errorHandler(transactionErrorHandler(required));
        onException(IllegalArgumentException.class).handled(false).to("mock:error");
        from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService");
        from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService");
      }
    }
;
  }
}
