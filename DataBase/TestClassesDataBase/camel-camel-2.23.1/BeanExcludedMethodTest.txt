/** 
 * @version 
 */
public class BeanExcludedMethodTest extends ContextTestSupport {
  @Test public void testExcludedMethod() throws Exception {
    BeanInfo info=new BeanInfo(context,MyDummyBean.class);
    Exchange exchange=new DefaultExchange(context);
    MyDummyBean pojo=new MyDummyBean();
    MethodInvocation mi=info.createInvocation(pojo,exchange);
    assertNull("Should not be possible to find a suitable method",mi);
  }
  @Test public void testNotExcludedMethod() throws Exception {
    BeanInfo info=new BeanInfo(context,MyOtherDummyBean.class);
    Exchange exchange=new DefaultExchange(context);
    MyOtherDummyBean pojo=new MyOtherDummyBean();
    MethodInvocation mi=info.createInvocation(pojo,exchange);
    assertNotNull(mi);
    assertEquals("hello",mi.getMethod().getName());
  }
public static class MyDummyBean {
    @Override public boolean equals(    Object obj){
      fail("Should not call equals");
      return true;
    }
    @Override public int hashCode(){
      return super.hashCode();
    }
  }
public static class MyOtherDummyBean {
    @Override public boolean equals(    Object obj){
      fail("Should not call equals");
      return true;
    }
    @Override public int hashCode(){
      return super.hashCode();
    }
    @Override public String toString(){
      return "dummy";
    }
    public String hello(    String hi){
      return "Hello " + hi;
    }
  }
}
