/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirHistory} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirHistoryIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirHistoryIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirHistoryApiMethod.class).getName();
  @Test public void testOnInstance() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.id",this.patient.getIdElement());
    headers.put("CamelFhir.returnType",Bundle.class);
    headers.put("CamelFhir.count",1);
    Bundle result=requestBodyAndHeaders("direct://ON_INSTANCE",null,headers);
    LOG.debug("onInstance: " + result);
    assertNotNull("onInstance result",result);
    assertEquals(1,result.getEntry().size());
  }
  @Test public void testOnServer() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.returnType",Bundle.class);
    headers.put("CamelFhir.count",1);
    Bundle result=requestBodyAndHeaders("direct://ON_SERVER",null,headers);
    LOG.debug("onServer: " + result);
    assertNotNull("onServer result",result);
    assertEquals(1,result.getEntry().size());
  }
  @Test public void testOnType() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceType",Patient.class);
    headers.put("CamelFhir.returnType",Bundle.class);
    headers.put("CamelFhir.count",1);
    Bundle result=requestBodyAndHeaders("direct://ON_TYPE",null,headers);
    LOG.debug("onType: " + result);
    assertNotNull("onType result",result);
    assertEquals(1,result.getEntry().size());
  }
  @Test public void testOnTypeWithSubsetElements() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceType",Patient.class);
    headers.put("CamelFhir.returnType",Bundle.class);
    headers.put("CamelFhir.count",1);
    headers.put(ExtraParameters.SUBSET_ELEMENTS.getHeaderName(),new String[]{"identifier","name"});
    Bundle result=requestBodyAndHeaders("direct://ON_TYPE",null,headers);
    LOG.debug("onType: " + result);
    assertNotNull("onType result",result);
    assertEquals(1,result.getEntry().size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ON_INSTANCE").to("fhir://" + PATH_PREFIX + "/onInstance");
        from("direct://ON_SERVER").to("fhir://" + PATH_PREFIX + "/onServer");
        from("direct://ON_TYPE").to("fhir://" + PATH_PREFIX + "/onType");
      }
    }
;
  }
}
