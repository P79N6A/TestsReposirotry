public class SplitWithInterceptorTest extends ContextTestSupport {
  private final MyInterceptStrategy interceptStrategy=new MyInterceptStrategy();
public static class MyInterceptStrategy implements InterceptStrategy {
    private static final Logger LOGGER=LoggerFactory.getLogger(MyInterceptStrategy.class);
    private static int doneCount;
    public Processor wrapProcessorInInterceptors(    final CamelContext context,    final ProcessorDefinition<?> definition,    final Processor target,    final Processor nextTarget) throws Exception {
      if (definition instanceof SplitDefinition) {
        final DelegateAsyncProcessor delegateAsyncProcessor=new DelegateAsyncProcessor(){
          @Override public boolean process(          final Exchange exchange,          final AsyncCallback callback){
            LOGGER.info("I'm doing someting");
            return super.process(exchange,new AsyncCallback(){
              public void done(              final boolean doneSync){
                LOGGER.info("I'm done");
                doneCount++;
                callback.done(doneSync);
              }
            }
);
          }
        }
;
        delegateAsyncProcessor.setProcessor(target);
        return delegateAsyncProcessor;
      }
      return new DelegateAsyncProcessor(target);
    }
    public void reset(){
      doneCount=0;
    }
  }
  @Test public void testSplitOne() throws Exception {
    interceptStrategy.reset();
    getMockEndpoint("mock:line").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals("Done method shall be called only once",1,MyInterceptStrategy.doneCount);
  }
  @Test public void testSplitTwo() throws Exception {
    interceptStrategy.reset();
    getMockEndpoint("mock:line").expectedMessageCount(2);
    template.sendBody("direct:start","Hello World,Bye World");
    assertMockEndpointsSatisfied();
    assertEquals("Done method shall be called only once",1,MyInterceptStrategy.doneCount);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        context.addInterceptStrategy(interceptStrategy);
        from("direct:start").split(body().tokenize(",")).to("log:line").to("mock:line").end().to("mock:result");
      }
    }
;
  }
}
