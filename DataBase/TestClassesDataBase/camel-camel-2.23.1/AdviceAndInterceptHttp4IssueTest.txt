/** 
 */
public class AdviceAndInterceptHttp4IssueTest extends CamelTestSupport {
  private String simpleProvider="http4:fakeHTTPADDRESS.com:80?throwExceptionOnFailure=false";
  private String providerWithParameter="http4:fakeHTTPADDRESS.com:80?throwExceptionOnFailure=false&httpClient.cookieSpec=ignoreCookies";
  private volatile boolean messageIntercepted;
  @Test public void testHttp4WithoutHttpClientParameter() throws Exception {
    doTestHttp4Parameter(simpleProvider);
  }
  @Test public void testHttp4WithHttpClientParameter() throws Exception {
    doTestHttp4Parameter(providerWithParameter);
  }
  @Override public boolean isUseAdviceWith(){
    return true;
  }
  @Override public boolean isUseRouteBuilder(){
    return true;
  }
  private void doTestHttp4Parameter(  final String provider) throws Exception {
    messageIntercepted=false;
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to(provider).to("mock:result");
      }
    }
);
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("http4:fakeHTTPADDRESS.com:80*").skipSendToOriginalEndpoint().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            messageIntercepted=true;
          }
        }
).to("mock:advised");
      }
    }
);
    context.start();
    getMockEndpoint("mock:advised").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertTrue(messageIntercepted);
  }
}
