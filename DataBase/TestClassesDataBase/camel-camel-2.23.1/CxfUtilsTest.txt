public class CxfUtilsTest extends Assert {
  private static final String TEST_XML1="<root><test1 id=\"1\"><test2 id=\"3\" xmlns=\"http://camel.apache.org/schema/one\">hello</test2></test1></root>";
  private static final String EXPECTED_STRING1="<test1 id=\"1\"><test2 xmlns=\"http://camel.apache.org/schema/one\" id=\"3\">hello</test2></test1>";
  private static final String TEST_XML2="<root xmlns=\"http://camel.apache.org/schema/one\" xmlns:two=\"http://camel.apache.org/schema/two\"><test1 id=\"1\"><two:test2 id=\"3\">hello</two:test2></test1></root>";
  private static final String EXPECTED_STRING2="<test1 xmlns=\"http://camel.apache.org/schema/one\" xmlns:two=\"http://camel.apache.org/schema/two\" id=\"1\"><two:test2 id=\"3\">hello</two:test2></test1>";
  @Test public void testXmlToString() throws Exception {
    assertEquals("Get unexpected String",EXPECTED_STRING1,getSubElementString(TEST_XML1));
    assertEquals("Get unexpected String",EXPECTED_STRING2,getSubElementString(TEST_XML2));
  }
  private String getSubElementString(  String string) throws Exception {
    InputStream is=new ByteArrayInputStream(string.getBytes("UTF-8"));
    XmlConverter converter=new XmlConverter();
    Element element=converter.toDOMElement(converter.toDOMSource(is,null));
    Element subElement=(Element)element.getFirstChild();
    return CxfUtils.elementToString(subElement);
  }
}
