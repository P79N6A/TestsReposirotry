/** 
 */
public class BeanAnnotationParameterTest extends ContextTestSupport {
  @Test public void testBeanAnnotationOne() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:one","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanAnnotationTwo() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:two","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanAnnotationThree() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:three","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanAnnotationFour() throws Exception {
    getMockEndpoint("mock:middle").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:four","World");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("GreetingService",new GreetingService());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:one").bean(MyBean.class).to("mock:result");
        from("direct:two").bean(MyBean.class,"callA").to("mock:result");
        from("direct:three").setHeader(Exchange.BEAN_METHOD_NAME,constant("callA")).bean(MyBean.class).to("mock:result");
        from("direct:four").bean(MyBean.class,"callA").to("mock:middle").bean(MyBean.class,"callB").to("mock:result");
      }
    }
;
  }
public static final class MyBean {
    public String callA(    @Bean(ref="GreetingService",method="english") String greeting,    String body){
      return greeting + " " + body;
    }
    public String callB(){
      return "Bye World";
    }
  }
public static final class GreetingService {
    public String callA(){
      throw new IllegalArgumentException("Should not callA");
    }
    public String callB(){
      throw new IllegalArgumentException("Should not callB");
    }
    public String english(){
      return "Hello";
    }
    public String french(){
      return "Bonjour";
    }
    public String german(){
      return "Hallo";
    }
  }
}
