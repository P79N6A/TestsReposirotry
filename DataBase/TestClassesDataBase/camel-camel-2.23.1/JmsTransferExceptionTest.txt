/** 
 * @version 
 */
public class JmsTransferExceptionTest extends CamelTestSupport {
  private static int counter;
  protected String getUri(){
    return "activemq:queue:foo?transferException=true";
  }
  @Override @Before public void setUp() throws Exception {
    counter=0;
    super.setUp();
  }
  @Test public void testOk() throws Exception {
    Object out=template.requestBody(getUri(),"Hello World");
    assertEquals("Bye World",out);
    assertEquals(1,counter);
  }
  @Test public void testTransferExeption() throws Exception {
    try {
      template.requestBody(getUri(),"Kabom");
      fail("Should have thrown an exception");
    }
 catch (    RuntimeCamelException e) {
      assertEquals("Boom",e.getCause().getMessage());
      assertNotNull("Should contain a remote stacktrace",e.getCause().getStackTrace());
    }
    assertEquals(3,counter);
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(2));
        from(getUri()).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            counter++;
            String body=exchange.getIn().getBody(String.class);
            if (body.equals("Kabom")) {
              throw new IllegalArgumentException("Boom");
            }
            exchange.getOut().setBody("Bye World");
          }
        }
);
      }
    }
;
  }
}
