private static class MyReadLockStrategy implements GenericFileExclusiveReadLockStrategy<File> {
  private int counter;
  @Override public void prepareOnStartup(  GenericFileOperations<File> operations,  GenericFileEndpoint<File> endpoint) throws Exception {
  }
  @Override public boolean acquireExclusiveReadLock(  GenericFileOperations<File> operations,  GenericFile<File> file,  Exchange exchange) throws Exception {
    if (file.getFileNameOnly().equals("bye.txt")) {
      if (counter++ == 0) {
        throw new IOException("Forced to simulate no space on device");
      }
    }
    return true;
  }
  @Override public void releaseExclusiveReadLockOnAbort(  GenericFileOperations<File> operations,  GenericFile<File> file,  Exchange exchange) throws Exception {
  }
  @Override public void releaseExclusiveReadLockOnRollback(  GenericFileOperations<File> operations,  GenericFile<File> file,  Exchange exchange) throws Exception {
  }
  @Override public void releaseExclusiveReadLockOnCommit(  GenericFileOperations<File> operations,  GenericFile<File> file,  Exchange exchange) throws Exception {
  }
  @Override public void setTimeout(  long timeout){
  }
  @Override public void setCheckInterval(  long checkInterval){
  }
  @Override public void setReadLockLoggingLevel(  LoggingLevel readLockLoggingLevel){
  }
  @Override public void setMarkerFiler(  boolean markerFile){
  }
  @Override public void setDeleteOrphanLockFiles(  boolean deleteOrphanLockFiles){
  }
  public int getCounter(){
    return counter;
  }
}
