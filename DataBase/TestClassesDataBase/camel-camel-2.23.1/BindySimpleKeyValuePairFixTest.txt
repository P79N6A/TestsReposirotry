@ContextConfiguration public class BindySimpleKeyValuePairFixTest extends AbstractJUnit4SpringContextTests {
  private static final String[] FIX_REQUESTS=new String[]{"8=FIX.4.1 37=1 38=1 40=butter","8=FIX.4.1 37=2 38=2 40=milk","8=FIX.4.1 37=3 38=3 40=bread"};
  private static final String[] FIX_RESPONSES=new String[]{"37=1 38=2 40=butter \r\n","37=2 38=4 40=milk \r\n","37=3 38=6 40=bread \r\n"};
  @Produce(uri="direct:fix") private ProducerTemplate template;
  @EndpointInject(uri="mock:result") private MockEndpoint mock;
  @Test @DirtiesContext public void testUnMarshallMessage() throws Exception {
    mock.expectedMessageCount(FIX_RESPONSES.length);
    mock.expectedBodiesReceived(FIX_RESPONSES);
    for (    String request : FIX_REQUESTS) {
      template.sendBody("direct:fix",request);
    }
    mock.assertIsSatisfied();
  }
public static class ContextConfig extends RouteBuilder {
    @Override public void configure(){
      DataFormat bindy=new BindyKeyValuePairDataFormat(FixOrder.class);
      from("direct:fix").unmarshal(bindy).process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          FixOrder order=exchange.getIn().getBody(FixOrder.class);
          Object body=exchange.getIn().getBody();
          if (order.getProduct().equals("butter")) {
            order.setQuantity("2");
            body=order;
          }
 else           if (order.getProduct().equals("milk")) {
            order.setQuantity("4");
            body=Collections.singletonMap(order.getClass().getName(),order);
          }
 else           if (order.getProduct().equals("bread")) {
            order.setQuantity("6");
            body=Collections.singletonList(Collections.singletonMap(order.getClass().getName(),order));
          }
          exchange.getIn().setBody(body);
        }
      }
).marshal(bindy).to("mock:result");
    }
  }
@Message(keyValuePairSeparator="=",pairSeparator=" ",type="FIX",version="4.1") public static class FixOrder {
    @KeyValuePairField(tag=37) private String id;
    @KeyValuePairField(tag=40) private String product;
    @KeyValuePairField(tag=38) private String quantity;
    public String getId(){
      return id;
    }
    public String getProduct(){
      return product;
    }
    public String getQuantity(){
      return quantity;
    }
    public void setQuantity(    String quantity){
      this.quantity=quantity;
    }
  }
}
