/** 
 * @version 
 */
public class SplitStopOnExceptionIssueTest extends ContextTestSupport {
  @Test public void testSplit() throws Exception {
    getMockEndpoint("mock:line").expectedBodiesReceived("Hello","World","Kaboom");
    getMockEndpoint("mock:line").allMessages().exchangeProperty("foo").isEqualTo("changed");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    Exchange out=template.request("direct:start",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello,World,Kaboom");
      }
    }
);
    assertNotNull(out);
    assertTrue(out.isFailed());
    assertFalse(out.hasOut());
    assertEquals("before",out.getProperty("foo"));
    assertEquals("Hello,World,Kaboom",out.getIn().getBody());
    IllegalArgumentException iae=out.getException(IllegalArgumentException.class);
    assertNotNull(iae);
    assertEquals("Forced exception",iae.getMessage());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setProperty("foo",constant("before")).split().tokenize(",").setProperty("foo",constant("changed")).to("mock:line").filter(body().contains("Kaboom")).throwException(new IllegalArgumentException("Forced exception")).end().end().to("mock:result");
      }
    }
;
  }
}
