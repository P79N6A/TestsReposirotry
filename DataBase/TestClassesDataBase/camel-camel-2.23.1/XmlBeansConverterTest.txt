public class XmlBeansConverterTest extends CamelTestSupport {
  private static final String PAYLOAD="<?xml version=\"1.0\" encoding=\"UTF-8\"?><xsd:buyStocks xmlns:xsd=\"http://services.samples/xsd\"><order><symbol>IBM</symbol><buyerID>cmueller" + "</buyerID><price>140.34</price><volume>2000</volume></order></xsd:buyStocks>";
  @Test public void testConvertToXmlObject() throws Exception {
    Exchange exchange=createExchangeWithBody("<hello>world!</hello>");
    Message in=exchange.getIn();
    XmlObject object=in.getBody(XmlObject.class);
    assertNotNull("Should have created an XmlObject!",object);
    log.info("Found: " + object);
    assertEquals("body as String",in.getBody(String.class),object.toString());
  }
  @Test public void toXmlObjectFromFile() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(new File("src/test/data/buyStocks.xml"),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromReader() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(new FileReader("src/test/data/buyStocks.xml"),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromNode() throws Exception {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    factory.setIgnoringElementContentWhitespace(true);
    factory.setIgnoringComments(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.parse(new InputSource(new StringReader(PAYLOAD)));
    XmlObject result=XmlBeansConverter.toXmlObject(document,new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromInputStream() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(new FileInputStream("src/test/data/buyStocks.xml"),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromString() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(PAYLOAD,new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromByteArray() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(PAYLOAD.getBytes(),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromByteBuffer() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(ByteBuffer.wrap(PAYLOAD.getBytes()),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromXMLStreamReader() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(new XMLStreamReader(new ByteArrayInputStream(PAYLOAD.getBytes()),false),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  @Test public void toXmlObjectFromSource() throws Exception {
    XmlObject result=XmlBeansConverter.toXmlObject(new BytesSource(PAYLOAD.getBytes()),new DefaultExchange(new DefaultCamelContext()));
    assertBuyStocks(result);
  }
  private void assertBuyStocks(  Object result){
    BuyStocks buyStocks=((BuyStocksDocument)result).getBuyStocks();
    assertEquals(1,buyStocks.getOrderArray().length);
    assertEquals("IBM",buyStocks.getOrderArray(0).getSymbol());
    assertEquals("cmueller",buyStocks.getOrderArray(0).getBuyerID());
    assertEquals(140.34,buyStocks.getOrderArray(0).getPrice(),0);
    assertEquals(2000,buyStocks.getOrderArray(0).getVolume());
  }
}
