public class PubNubFireTest extends PubNubTestBase {
  private String endpoint="pubnub:someChannel?operation=fire&pubnub=#pubnub";
  @EndpointInject(uri="mock:result") private MockEndpoint mockResult;
  @Test public void testFire() throws Exception {
    stubFor(get(urlPathEqualTo("/publish/myPublishKey/mySubscribeKey/0/someChannel/0/%22Hi%22")).willReturn(aResponse().withBody("[1,\"Sent\",\"14598111595318003\"]")));
    mockResult.expectedMessageCount(1);
    mockResult.expectedHeaderReceived(TIMETOKEN,"14598111595318003");
    template.sendBody("direct:publish","Hi");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:publish").to(endpoint).to("mock:result");
      }
    }
;
  }
static class Hello {
    private String message;
    Hello(    String message){
      this.message=message;
    }
    public String getMessage(){
      return message;
    }
  }
}
