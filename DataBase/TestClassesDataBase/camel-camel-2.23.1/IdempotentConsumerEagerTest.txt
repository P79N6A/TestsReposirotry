/** 
 * @version 
 */
public class IdempotentConsumerEagerTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testDuplicateMessagesAreFilteredOut() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").idempotentConsumer(header("messageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).eager(false).to("mock:result");
      }
    }
);
    context.start();
    resultEndpoint.expectedBodiesReceived("one","two","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFailedExchangesNotAddedDeadLetterChannel() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false));
        from("direct:start").idempotentConsumer(header("messageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).eager(false).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("messageId",String.class);
            if (id.equals("2")) {
              throw new IllegalArgumentException("Damm I cannot handle id 2");
            }
          }
        }
).to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:error").expectedMessageCount(2);
    resultEndpoint.expectedBodiesReceived("one","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFailedExchangesNotAdded() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").idempotentConsumer(header("messageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).eager(false).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("messageId",String.class);
            if (id.equals("2")) {
              throw new IllegalArgumentException("Damm I cannot handle id 2");
            }
          }
        }
).to("mock:result");
      }
    }
);
    context.start();
    resultEndpoint.expectedBodiesReceived("one","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNotEager() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        final IdempotentRepository<String> repo=MemoryIdempotentRepository.memoryIdempotentRepository(200);
        from("direct:start").idempotentConsumer(header("messageId"),repo).eager(false).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("messageId",String.class);
            assertFalse("Should not eager add to repo",repo.contains(id));
          }
        }
).to("mock:result");
      }
    }
);
    context.start();
    resultEndpoint.expectedBodiesReceived("one","two","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  @Test public void testEager() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        final IdempotentRepository<String> repo=MemoryIdempotentRepository.memoryIdempotentRepository(200);
        from("direct:start").idempotentConsumer(header("messageId"),repo).eager(true).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("messageId",String.class);
            assertTrue("Should eager add to repo",repo.contains(id));
          }
        }
).to("mock:result");
      }
    }
);
    context.start();
    resultEndpoint.expectedBodiesReceived("one","two","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  protected void sendMessage(  final Object messageId,  final Object body){
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("messageId",messageId);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start");
    resultEndpoint=getMockEndpoint("mock:result");
  }
}
