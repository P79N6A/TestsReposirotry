/** 
 * Test class illustrating the invalid shutdown sequence when using the autoconfiguration provided by <code>camel-spring-boot</code>. <p> This is caused by the  {@link TypeConversionConfiguration} class registering a{@link TypeConverter} (of actual type {@link DefaultTypeConverter}) in the Spring {@link ApplicationContext}. Its ' {@code public void shutdown()}' method is inferred as a destroy-method by <i>Spring</i>, which will thus be called before the  {@link CamelContext} shutdownwhen the context is closed. <p> As a consequence, any inflight message that should be processed during the graceful shutdown period of Camel won't have access to any type conversion support.
 */
@RunWith(SpringRunner.class) @DirtiesContext(classMode=ClassMode.AFTER_EACH_TEST_METHOD) @SpringBootTest(classes={CamelAutoConfiguration.class,CamelSpringBootShutdownTest.TestRouteConfiguration.class}) public class CamelSpringBootShutdownTest {
  @Autowired private ConfigurableApplicationContext context;
  @Autowired private ProducerTemplate template;
  @Test public void test1() throws Exception {
    try {
      template.sendBody("direct:start","42");
    }
 catch (    CamelExecutionException e) {
      throw (Exception)e.getCause();
    }
  }
  @Test public void test2() throws Exception {
    try {
      new DelayedCloser(context,500).start();
      template.sendBody("direct:start","42");
    }
 catch (    CamelExecutionException e) {
      throw (Exception)e.getCause();
    }
  }
public static class DelayedCloser extends Thread {
    private final long sleep;
    private final Closeable closeable;
    public DelayedCloser(    Closeable closeable,    long sleep){
      this.closeable=closeable;
      this.sleep=sleep;
    }
    @Override public void run(){
      try {
        Thread.sleep(sleep);
        closeable.close();
      }
 catch (      Exception e) {
      }
    }
  }
public static class TestRouteConfiguration {
    @Bean public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").delay(1000).convertBodyTo(InputStream.class).to("log:route-log");
        }
      }
;
    }
  }
}
