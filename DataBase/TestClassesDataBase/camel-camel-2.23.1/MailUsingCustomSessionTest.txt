public class MailUsingCustomSessionTest extends CamelTestSupport {
  private Session mailSession;
  @Before public void setUp() throws Exception {
    super.setUp();
    Mailbox.clearAll();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    mailSession=Session.getInstance(new Properties());
    registry.bind("myCustomMailSession",mailSession);
    return registry;
  }
  @Test public void testEndpointConfigurationWithCustomSession(){
    assertSame(mailSession,getEndpointMailSession("smtp://james@localhost?session=#myCustomMailSession"));
  }
  @Test public void testSendAndReceiveMailsWithCustomSession() throws Exception {
    MockEndpoint mockEndpoint=getMockEndpoint("mock:result");
    mockEndpoint.expectedBodiesReceived("hello camel!");
    Map<String,Object> headers=new HashMap<>();
    headers.put("subject","Hello Camel");
    template.sendBodyAndHeaders("smtp://james@localhost?session=#myCustomMailSession","hello camel!",headers);
    mockEndpoint.assertIsSatisfied();
    Mailbox mailbox=Mailbox.get("james@localhost");
    assertEquals("Expected one mail for james@localhost",1,mailbox.size());
    Message message=mailbox.get(0);
    assertEquals("hello camel!",message.getContent());
    assertEquals("camel@localhost",message.getFrom()[0].toString());
  }
  private Session getEndpointMailSession(  String uri){
    MailEndpoint endpoint=context.getEndpoint(uri,MailEndpoint.class);
    return endpoint.getConfiguration().getSession();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("pop3://james@localhost?session=#myCustomMailSession&consumer.initialDelay=100&consumer.delay=100").to("mock:result");
      }
    }
;
  }
}
