public class TransactedTopicProducerTest extends CamelTestSupport {
  @Produce protected ProducerTemplate template;
  public TransactedTopicProducerTest(){
  }
  @Override protected boolean useJmx(){
    return false;
  }
  @Test public void testRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World 2");
    template.sendBodyAndHeader("direct:start","Hello World 1","isfailed",true);
    template.sendBodyAndHeader("direct:start","Hello World 2","isfailed",false);
    mock.assertIsSatisfied();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false");
    ConnectionFactoryResource connectionResource=new ConnectionFactoryResource();
    connectionResource.setConnectionFactory(connectionFactory);
    connectionResource.setClientId("test-connection-1");
    CamelContext camelContext=super.createCamelContext();
    SjmsComponent component=new SjmsComponent();
    component.setConnectionResource(connectionResource);
    component.setConnectionCount(1);
    camelContext.addComponent("sjms",component);
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").to("sjms:topic:test.topic?transacted=true").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            if (exchange.getIn().getHeader("isfailed",Boolean.class)) {
              log.info("We failed.  Should roll back.");
              exchange.getOut().setFault(true);
            }
 else {
              log.info("We passed.  Should commit.");
            }
          }
        }
);
        from("sjms:topic:test.topic?durableSubscriptionId=bar&transacted=true").to("mock:result");
      }
    }
;
  }
}
