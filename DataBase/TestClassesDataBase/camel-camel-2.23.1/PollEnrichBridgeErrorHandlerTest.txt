public class PollEnrichBridgeErrorHandlerTest extends ContextTestSupport {
  private MyPollingStrategy myPoll=new MyPollingStrategy();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myPoll",myPoll);
    return jndi;
  }
  @Test public void testPollEnrichBridgeErrorHandler() throws Exception {
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("seda:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(1 + 3,myPoll.getCounter());
    Exception caught=getMockEndpoint("mock:dead").getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(caught);
    assertTrue(caught.getMessage().startsWith("Error during poll"));
    assertEquals("Something went wrong",caught.getCause().getCause().getMessage());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(3).redeliveryDelay(0));
        from("seda:start").pollEnrich("file:target/foo?initialDelay=0&delay=10&pollStrategy=#myPoll&consumer.bridgeErrorHandler=true",10000,new UseLatestAggregationStrategy()).to("mock:result");
      }
    }
;
  }
private class MyPollingStrategy implements PollingConsumerPollStrategy {
    private int counter;
    @Override public boolean begin(    Consumer consumer,    Endpoint endpoint){
      counter++;
      throw new IllegalArgumentException("Something went wrong");
    }
    @Override public void commit(    Consumer consumer,    Endpoint endpoint,    int polledMessages){
    }
    @Override public boolean rollback(    Consumer consumer,    Endpoint endpoint,    int retryCounter,    Exception cause) throws Exception {
      return false;
    }
    public int getCounter(){
      return counter;
    }
  }
}
