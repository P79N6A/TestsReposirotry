public class CalendarConfigurationTest extends AbstractGoogleCalendarTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(CalendarConfigurationTest.class);
  private static final String PATH_PREFIX=GoogleCalendarApiCollection.getCollection().getApiName(CalendarCalendarsApiMethod.class).getName();
  private static final String TEST_URI="google-calendar://" + PATH_PREFIX + "/get?clientId=a&clientSecret=b&applicationName=c&accessToken=d&refreshToken=e";
  @Before @Override public void createTestCalendar(){
  }
  @After @Override public void deleteTestCalendar(){
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=new DefaultCamelContext(createRegistry());
    final GoogleCalendarComponent component=new GoogleCalendarComponent(context);
    context.addComponent("google-calendar",component);
    return context;
  }
  @Test public void testConfiguration() throws Exception {
    GoogleCalendarEndpoint endpoint=getMandatoryEndpoint(TEST_URI,GoogleCalendarEndpoint.class);
    GoogleCalendarConfiguration configuration=endpoint.getConfiguration();
    assertNotNull(configuration);
    assertEquals("a",configuration.getClientId());
    assertEquals("b",configuration.getClientSecret());
    assertEquals("c",configuration.getApplicationName());
    assertEquals("d",configuration.getAccessToken());
    assertEquals("e",configuration.getRefreshToken());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct://COPY").to(TEST_URI);
      }
    }
;
  }
}
