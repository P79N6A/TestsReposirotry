/** 
 * Unit test to verify that Aggregate aggregator does not included filtered exchanges.
 * @version 
 */
public class AggregateShouldSkipFilteredExchangesTest extends ContextTestSupport {
  @Test public void testAggregateWithFilter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World,Bye World");
    MockEndpoint filtered=getMockEndpoint("mock:filtered");
    filtered.expectedBodiesReceived("Hello World","Bye World");
    template.sendBodyAndHeader("direct:start","Hello World","id",1);
    template.sendBodyAndHeader("direct:start","Hi there","id",1);
    template.sendBodyAndHeader("direct:start","Bye World","id",1);
    template.sendBodyAndHeader("direct:start","How do you do?","id",1);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        Predicate goodWord=body().contains("World");
        from("direct:start").filter(goodWord).to("mock:filtered").aggregate(header("id"),new MyAggregationStrategy()).completionTimeout(1000).to("mock:result").end().end();
      }
    }
;
  }
private static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String newBody=newExchange.getIn().getBody(String.class);
      String body=oldExchange.getIn().getBody(String.class);
      body=body + "," + newBody;
      oldExchange.getIn().setBody(body);
      return oldExchange;
    }
  }
}
