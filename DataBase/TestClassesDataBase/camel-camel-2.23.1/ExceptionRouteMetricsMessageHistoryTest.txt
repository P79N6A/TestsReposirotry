public class ExceptionRouteMetricsMessageHistoryTest extends CamelTestSupport {
  private MetricRegistry registry=new MetricRegistry();
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    MetricsMessageHistoryFactory factory=new MetricsMessageHistoryFactory();
    factory.setUseJmx(false);
    factory.setMetricsRegistry(registry);
    context.setMessageHistoryFactory(factory);
    return context;
  }
  @Test public void testMetricsHistory() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(5);
    getMockEndpoint("mock:bar").expectedMessageCount(5);
    getMockEndpoint("mock:baz").expectedMessageCount(0);
    getMockEndpoint("mock:exception").expectedMessageCount(5);
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0) {
        template.sendBody("seda:foo","Hello " + i);
      }
 else {
        template.sendBody("seda:bar","Hello " + i);
      }
    }
    assertMockEndpointsSatisfied();
    assertEquals(5,registry.getNames().size());
    MetricsMessageHistoryService service=context.hasService(MetricsMessageHistoryService.class);
    assertNotNull(service);
    String json=service.dumpStatisticsAsJson();
    assertNotNull(json);
    log.info(json);
    assertTrue(json.contains("foo.history"));
    assertTrue(json.contains("bar.history"));
    assertTrue(json.contains("exception.history"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).routeId("ExceptionRoute").log("Exception received.").to("mock:exception").id("exception");
        from("seda:foo").to("mock:foo").id("foo");
        from("seda:bar").to("mock:bar").id("bar").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            throw new Exception("Metrics Exception");
          }
        }
).to("mock:baz").id("baz");
      }
    }
;
  }
}
