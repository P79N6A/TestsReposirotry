/** 
 * A route for simple performance testing that can be used when we suspect something is wrong. Inspired by end user on forum doing this as proof of concept.
 */
public class RoutePerformanceTest extends ContextTestSupport {
  private int size=250;
  private SimpleDataSet dataSet=new SimpleDataSet(size);
  private String uri="mock:results";
  @Test public void testPerformance() throws Exception {
    StopWatch watch=new StopWatch();
    MockEndpoint endpoint=getMockEndpoint(uri);
    endpoint.expectedMessageCount((int)dataSet.getSize());
    endpoint.expectedHeaderReceived("foo",123);
    MockEndpoint.assertIsSatisfied(context,30,TimeUnit.SECONDS);
    log.info("RoutePerformanceTest: Sent: {} Took: {} ms",size,watch.taken());
  }
  @Override protected boolean canRunOnThisPlatform(){
    String os=System.getProperty("os.name");
    return !os.toLowerCase(Locale.ENGLISH).contains("hp-ux");
  }
  @Override protected Context createJndiContext() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo",123);
    dataSet.setDefaultHeaders(headers);
    Context context=super.createJndiContext();
    context.bind("foo",dataSet);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("dataset:foo").to("direct:start");
        from("direct:start").to("log:a?level=OFF","log:b?level=OFF","direct:c");
        from("direct:c").choice().when().header("foo").to(uri,"dataset:foo").otherwise().to(uri,"dataset:foo").end();
      }
    }
;
  }
}
