/** 
 * Unit test of ValidatingProcessor.
 */
public class ValidatingProcessorNotUseSharedSchemaTest extends ContextTestSupport {
  protected ValidatingProcessor validating;
  @Override @Before public void setUp() throws Exception {
    validating=new ValidatingProcessor();
    validating.setSchemaFile(new File("src/test/resources/org/apache/camel/processor/ValidatingProcessor.xsd"));
    validating.setUseSharedSchema(false);
    super.setUp();
  }
  @Test public void testValidMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:valid");
    mock.expectedMessageCount(1);
    String xml="<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" + "<user xmlns=\"http://foo.com/bar\">" + "  <id>1</id>"+ "  <username>davsclaus</username>"+ "</user>";
    template.sendBody("direct:start",xml);
    assertMockEndpointsSatisfied();
  }
  @Test public void testValidMessageTwice() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:valid");
    mock.expectedMessageCount(2);
    String xml="<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" + "<user xmlns=\"http://foo.com/bar\">" + "  <id>1</id>"+ "  <username>davsclaus</username>"+ "</user>";
    template.sendBody("direct:start",xml);
    template.sendBody("direct:start",xml);
    assertMockEndpointsSatisfied();
  }
  @Test public void testInvalidMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:invalid");
    mock.expectedMessageCount(1);
    String xml="<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" + "<user xmlns=\"http://foo.com/bar\">" + "  <username>someone</username>"+ "</user>";
    try {
      template.sendBody("direct:start",xml);
      fail("Should have thrown a RuntimeCamelException");
    }
 catch (    RuntimeCamelException e) {
      assertTrue(e.getCause() instanceof SchemaValidationException);
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testNoXMLBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:invalid");
    mock.expectedMessageCount(1);
    try {
      template.sendBody("direct:start",null);
      fail("Should have thrown a RuntimeCamelException");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(NoXmlBodyValidationException.class,e.getCause());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testValidatingOptions() throws Exception {
    assertNotNull(validating.getErrorHandler());
    assertNotNull(validating.getSchema());
    assertNotNull(validating.getSchemaFactory());
    assertNotNull(validating.getSchemaFile());
    assertNotNull(validating.getSchemaLanguage());
    assertNull(validating.getSchemaUrl());
    try {
      assertNotNull(validating.getSchemaSource());
      fail("Should have thrown an exception");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
        onException(ValidationException.class).to("mock:invalid");
        from("direct:start").process(validating).to("mock:valid");
      }
    }
;
  }
}
