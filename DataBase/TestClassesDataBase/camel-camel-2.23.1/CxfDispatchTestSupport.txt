/** 
 * Base class for testing arbitrary payload
 */
public abstract class CxfDispatchTestSupport extends CamelSpringTestSupport {
  protected static final String DISPATCH_NS="http://camel.apache.org/cxf/jaxws/dispatch";
  protected static final String INVOKE_NAME="Invoke";
  protected static final String INVOKE_ONEWAY_NAME="InvokeOneWay";
  protected static final String PAYLOAD_TEMPLATE="<ns1:greetMe xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\"><ns1:requestType>%s</ns1:requestType></ns1:greetMe>";
  protected static final String PAYLOAD_ONEWAY_TEMPLATE="<ns1:greetMeOneWay xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\"><ns1:requestType>%s</ns1:requestType></ns1:greetMeOneWay>";
  protected static final String MESSAGE_TEMPLATE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>" + PAYLOAD_TEMPLATE + "</soap:Body></soap:Envelope>";
  protected static final String MESSAGE_ONEWAY_TEMPLATE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>" + PAYLOAD_ONEWAY_TEMPLATE + "</soap:Body></soap:Envelope>";
  private static DocumentBuilderFactory documentBuilderFactory;
  protected Endpoint endpoint;
  private int port=CXFTestSupport.getPort1();
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @Before public void startService(){
    Object implementor=new GreeterImpl();
    String address="http://localhost:" + port + "/"+ getClass().getSimpleName()+ "/SoapContext/GreeterPort";
    endpoint=Endpoint.publish(address,implementor);
  }
  @After public void stopService(){
    if (endpoint != null) {
      endpoint.stop();
    }
  }
  protected static String getResponseType(  Element node){
    NodeList nodes=node.getElementsByTagNameNS("http://apache.org/hello_world_soap_http/types","responseType");
    if (nodes != null && nodes.getLength() == 1) {
      Node c=nodes.item(0).getFirstChild();
      if (c != null) {
        return c.getNodeValue();
      }
    }
    return null;
  }
  protected static synchronized DocumentBuilderFactory getDocumentBuilderFactory(){
    if (documentBuilderFactory == null) {
      documentBuilderFactory=DocumentBuilderFactory.newInstance();
      documentBuilderFactory.setNamespaceAware(true);
      documentBuilderFactory.setIgnoringElementContentWhitespace(true);
      documentBuilderFactory.setIgnoringComments(true);
    }
    return documentBuilderFactory;
  }
}
