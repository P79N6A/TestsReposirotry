public class SqsComponentTest extends CamelTestSupport {
  @EndpointInject(uri="direct:start") private ProducerTemplate template;
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @Test public void sendInOnly() throws Exception {
    result.expectedMessageCount(1);
    Exchange exchange=template.send("direct:start",ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("This is my message text.");
      }
    }
);
    assertMockEndpointsSatisfied();
    Exchange resultExchange=result.getExchanges().get(0);
    assertEquals("This is my message text.",resultExchange.getIn().getBody());
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.MESSAGE_ID));
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE));
    assertEquals("6a1559560f67c5e7a7d5d838bf0272ee",resultExchange.getIn().getHeader(SqsConstants.MD5_OF_BODY));
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.ATTRIBUTES));
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.MESSAGE_ATTRIBUTES));
    assertEquals("This is my message text.",exchange.getIn().getBody());
    assertNotNull(exchange.getIn().getHeader(SqsConstants.MESSAGE_ID));
    assertEquals("6a1559560f67c5e7a7d5d838bf0272ee",exchange.getIn().getHeader(SqsConstants.MD5_OF_BODY));
  }
  @Test public void sendInOut() throws Exception {
    result.expectedMessageCount(1);
    Exchange exchange=template.send("direct:start",ExchangePattern.InOut,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("This is my message text.");
      }
    }
);
    assertMockEndpointsSatisfied();
    Exchange resultExchange=result.getExchanges().get(0);
    assertEquals("This is my message text.",resultExchange.getIn().getBody());
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE));
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.MESSAGE_ID));
    assertEquals("6a1559560f67c5e7a7d5d838bf0272ee",resultExchange.getIn().getHeader(SqsConstants.MD5_OF_BODY));
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.ATTRIBUTES));
    assertNotNull(resultExchange.getIn().getHeader(SqsConstants.MESSAGE_ATTRIBUTES));
    assertEquals("This is my message text.",exchange.getOut().getBody());
    assertNotNull(exchange.getOut().getHeader(SqsConstants.MESSAGE_ID));
    assertEquals("6a1559560f67c5e7a7d5d838bf0272ee",exchange.getOut().getHeader(SqsConstants.MD5_OF_BODY));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("amazonSQSClient",new AmazonSQSClientMock());
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      final String sqsURI=String.format("aws-sqs://MyQueue?amazonSQSClient=#amazonSQSClient&messageRetentionPeriod=%s&maximumMessageSize=%s&policy=%s","1209600","65536","");
      @Override public void configure() throws Exception {
        from("direct:start").to(sqsURI);
        from(sqsURI).to("mock:result");
      }
    }
;
  }
}
