/** 
 * Lets test the use of the ComponentConfiguration on the JMS endpoint
 */
public class JmsComponentConfigurationTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(JmsComponentConfigurationTest.class);
  protected String componentName="activemq456";
  protected boolean verbose;
  @Test public void testConfiguration() throws Exception {
    Component component=context().getComponent(componentName);
    ComponentConfiguration configuration=component.createComponentConfiguration();
    SortedMap<String,ParameterConfiguration> parameterConfigurationMap=configuration.getParameterConfigurationMap();
    if (verbose) {
      Set<Map.Entry<String,ParameterConfiguration>> entries=parameterConfigurationMap.entrySet();
      for (      Map.Entry<String,ParameterConfiguration> entry : entries) {
        String name=entry.getKey();
        ParameterConfiguration config=entry.getValue();
        LOG.info("Has name: {} with type {}",name,config.getParameterType().getName());
      }
    }
    assertParameterConfig(configuration,"concurrentConsumers",int.class);
    assertParameterConfig(configuration,"clientId",String.class);
    assertParameterConfig(configuration,"disableReplyTo",boolean.class);
    assertParameterConfig(configuration,"timeToLive",long.class);
    configuration.setParameter("concurrentConsumers",10);
    configuration.setParameter("clientId","foo");
    configuration.setParameter("disableReplyTo",true);
    configuration.setParameter("timeToLive",1000L);
    JmsEndpoint endpoint=assertIsInstanceOf(JmsEndpoint.class,configuration.createEndpoint());
    assertEquals("endpoint.concurrentConsumers",10,endpoint.getConcurrentConsumers());
    assertEquals("endpoint.clientId","foo",endpoint.getClientId());
    assertEquals("endpoint.disableReplyTo",true,endpoint.isDisableReplyTo());
    assertEquals("endpoint.timeToLive",1000L,endpoint.getTimeToLive());
  }
  public static void assertParameterConfig(  ComponentConfiguration configuration,  String name,  Class<?> parameterType){
    ParameterConfiguration config=configuration.getParameterConfiguration(name);
    assertNotNull("ParameterConfiguration should exist for parameter name " + name,config);
    assertEquals("ParameterConfiguration." + name + ".getName()",name,config.getName());
    assertEquals("ParameterConfiguration." + name + ".getParameterType()",parameterType,config.getParameterType());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    JmsComponent comp=jmsComponentAutoAcknowledge(connectionFactory);
    camelContext.addComponent(componentName,comp);
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
      }
    }
;
  }
}
