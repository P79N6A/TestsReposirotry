public class FromRestGetCorsAllowCredentialsTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("dummy-rest",new DummyRestConsumerFactory());
    return jndi;
  }
  @Test public void testCorsWithoutOrigin() throws Exception {
    getMockEndpoint("mock:update").expectedMessageCount(1);
    Exchange out=template.request("seda:post-say-bye",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("I was here");
      }
    }
);
    assertNotNull(out);
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_ORIGIN,out.getOut().getHeader("Access-Control-Allow-Origin"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_METHODS,out.getOut().getHeader("Access-Control-Allow-Methods"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_HEADERS,out.getOut().getHeader("Access-Control-Allow-Headers"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_MAX_AGE,out.getOut().getHeader("Access-Control-Max-Age"));
    assertEquals("true",out.getOut().getHeader("Access-Control-Allow-Credentials"));
    assertMockEndpointsSatisfied();
  }
  @Test public void testCorsWithOrigin() throws Exception {
    getMockEndpoint("mock:update").expectedMessageCount(1);
    Exchange out=template.request("seda:post-say-bye",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader("Origin","mydomain");
        exchange.getIn().setBody("I was here");
      }
    }
);
    assertNotNull(out);
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_METHODS,out.getOut().getHeader("Access-Control-Allow-Methods"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_HEADERS,out.getOut().getHeader("Access-Control-Allow-Headers"));
    assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_MAX_AGE,out.getOut().getHeader("Access-Control-Max-Age"));
    assertEquals("true",out.getOut().getHeader("Access-Control-Allow-Credentials"));
    assertEquals("mydomain",out.getOut().getHeader("Access-Control-Allow-Origin"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().host("localhost").enableCORS(true).corsAllowCredentials(true);
        rest("/say/hello").get().to("direct:hello");
        rest("/say/bye").get().consumes("application/json").to("direct:bye").post().to("mock:update");
        from("direct:hello").transform().constant("Hello World");
        from("direct:bye").transform().constant("Bye World");
      }
    }
;
  }
}
