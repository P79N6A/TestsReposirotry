/** 
 * @version 
 */
public class AdviceWithMockEndpointsHavingParameterTest extends ContextTestSupport {
  @Test public void testNoAdvised() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAdvisedMockEndpoints() throws Exception {
    context.getRouteDefinitions().get(1).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        mockEndpoints();
      }
    }
);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:direct:start").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:log:start").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:seda:foo").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertNotNull(context.hasEndpoint("direct:start"));
    assertNotNull(context.hasEndpoint("seda:foo"));
    assertNotNull(context.hasEndpoint("log:foo?showHeaders=false"));
    assertNotNull(context.hasEndpoint("log:start?showAll=true"));
    assertNotNull(context.hasEndpoint("mock:result"));
    assertNotNull(context.hasEndpoint("mock:direct:start"));
    assertNotNull(context.hasEndpoint("mock:seda:foo"));
    assertNotNull(context.hasEndpoint("mock:log:start"));
    assertNotNull(context.hasEndpoint("mock:log:foo"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?size=20").transform(constant("Bye World")).log("We transformed ${body}").to("log:foo?showHeaders=false").to("mock:foo");
        from("direct:start").to("seda:foo").to("log:start?showAll=true").to("mock:result");
      }
    }
;
  }
}
