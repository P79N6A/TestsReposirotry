/** 
 * Testing for CAMEL-5002
 */
public class TypeConverterConcurrencyIssueTest extends ContextTestSupport {
  private int size=100 * 1000;
  @Test public void testTypeConverter() throws Exception {
    Method method=TypeConverterConcurrencyIssueTest.class.getMethod("toMyCamelBean",String.class);
    assertNotNull(method);
    context.getTypeConverterRegistry().addTypeConverter(MyCamelBean.class,String.class,new StaticMethodTypeConverter(method));
    ExecutorService pool=context.getExecutorServiceManager().newThreadPool(this,"test",50,50);
    final CountDownLatch latch=new CountDownLatch(size);
    StopWatch watch=new StopWatch();
    for (int i=0; i < size; i++) {
      pool.submit(new Runnable(){
        @Override public void run(){
          try {
            context.getTypeConverter().mandatoryConvertTo(MyCamelBean.class,"1;MyCamel");
            latch.countDown();
          }
 catch (          NoTypeConversionAvailableException e) {
          }
        }
      }
);
    }
    assertTrue("The expected mandatory conversions failed!",latch.await(1,TimeUnit.MINUTES));
    log.info("Took {} millis to convert {} objects",watch.taken(),size);
  }
  public static MyCamelBean toMyCamelBean(  String body){
    MyCamelBean bean=new MyCamelBean();
    String[] data=body.split(";");
    bean.setId(Integer.parseInt(data[0]));
    bean.setName(data[1]);
    return bean;
  }
}
