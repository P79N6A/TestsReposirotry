/** 
 * JmxInstrumentationCustomMBeanTest will verify that all endpoints are registered with the mbean server.
 */
public class JmxInstrumentationCustomMBeanTest extends JmxInstrumentationUsingDefaultsTest {
  @Override protected boolean useJmx(){
    return true;
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("custom",new CustomComponent());
    return context;
  }
  @Test public void testCustomEndpoint() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    assertDefaultDomain();
    resolveMandatoryEndpoint("custom://end",CustomEndpoint.class);
    Set<ObjectName> s=mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"),null);
    assertEquals("Could not find 2 endpoints: " + s,2,s.size());
    Iterator<ObjectName> it=s.iterator();
    ObjectName on1=it.next();
    ObjectName on2=it.next();
    if (on1.getCanonicalName().contains("custom")) {
      assertEquals("bar",mbsc.getAttribute(on1,"Foo"));
    }
 else {
      assertEquals("bar",mbsc.getAttribute(on2,"Foo"));
    }
  }
  @Test public void testManagedEndpoint() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    assertDefaultDomain();
    resolveMandatoryEndpoint("direct:start",DirectEndpoint.class);
    ObjectName objName=new ObjectName(domainName + ":type=endpoints,*");
    Set<ObjectName> s=mbsc.queryNames(objName,null);
    assertEquals(2,s.size());
  }
  @Test public void testCounters() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    CustomEndpoint resultEndpoint=resolveMandatoryEndpoint("custom:end",CustomEndpoint.class);
    resultEndpoint.expectedBodiesReceived("<hello>world!</hello>");
    sendBody("direct:start","<hello>world!</hello>");
    resultEndpoint.assertIsSatisfied();
    verifyCounter(mbsc,new ObjectName(domainName + ":type=routes,*"));
  }
  @Test public void testMBeansRegistered() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    assertDefaultDomain();
    Set<ObjectName> s=mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"),null);
    assertEquals("Could not find 2 endpoints: " + s,2,s.size());
    s=mbsc.queryNames(new ObjectName(domainName + ":type=context,*"),null);
    assertEquals("Could not find 1 context: " + s,1,s.size());
    s=mbsc.queryNames(new ObjectName(domainName + ":type=processors,*"),null);
    assertEquals("Could not find 1 processors: " + s,2,s.size());
    s=mbsc.queryNames(new ObjectName(domainName + ":type=routes,*"),null);
    assertEquals("Could not find 1 route: " + s,1,s.size());
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").delay(10).to("custom:end");
      }
    }
;
  }
private static class CustomComponent extends DefaultComponent {
    protected Endpoint createEndpoint(    final String uri,    final String remaining,    final Map<String,Object> parameters) throws Exception {
      return new CustomEndpoint(uri,this);
    }
  }
}
