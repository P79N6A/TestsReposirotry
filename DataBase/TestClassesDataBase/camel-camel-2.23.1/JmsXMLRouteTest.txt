/** 
 * For unit testing with XML streams that can be troublesome with the StreamCache
 * @version 
 */
public class JmsXMLRouteTest extends CamelTestSupport {
  private static final String TEST_LONDON="src/test/data/message1.xml";
  private static final String TEST_TAMPA="src/test/data/message2.xml";
  @Test public void testLondonWithFileStreamAsObject() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("James");
    Source source=new StreamSource(new FileInputStream(TEST_LONDON));
    assertNotNull(source);
    template.sendBody("direct:object",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testLondonWithFileStreamAsBytes() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("James");
    Source source=new StreamSource(new FileInputStream(TEST_LONDON));
    assertNotNull(source);
    template.sendBody("direct:bytes",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testLondonWithFileStreamAsDefault() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("James");
    Source source=new StreamSource(new FileInputStream(TEST_LONDON));
    assertNotNull(source);
    template.sendBody("direct:default",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTampaWithFileStreamAsObject() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:tampa");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("Hiram");
    Source source=new StreamSource(new FileInputStream(TEST_TAMPA));
    assertNotNull(source);
    template.sendBody("direct:object",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTampaWithFileStreamAsBytes() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:tampa");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("Hiram");
    Source source=new StreamSource(new FileInputStream(TEST_TAMPA));
    assertNotNull(source);
    template.sendBody("direct:bytes",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTampaWithFileStreamAsDefault() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:tampa");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("Hiram");
    Source source=new StreamSource(new FileInputStream(TEST_TAMPA));
    assertNotNull(source);
    template.sendBody("direct:default",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testLondonWithStringSourceAsObject() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("James");
    Source source=new StringSource("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<person user=\"james\">\n" + "  <firstName>James</firstName>\n"+ "  <lastName>Strachan</lastName>\n"+ "  <city>London</city>\n"+ "</person>");
    assertNotNull(source);
    template.sendBody("direct:object",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testLondonWithStringSourceAsBytes() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("James");
    Source source=new StringSource("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<person user=\"james\">\n" + "  <firstName>James</firstName>\n"+ "  <lastName>Strachan</lastName>\n"+ "  <city>London</city>\n"+ "</person>");
    assertNotNull(source);
    template.sendBody("direct:bytes",source);
    assertMockEndpointsSatisfied();
  }
  @Test public void testLondonWithStringSourceAsDefault() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:london");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("James");
    Source source=new StringSource("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<person user=\"james\">\n" + "  <firstName>James</firstName>\n"+ "  <lastName>Strachan</lastName>\n"+ "  <city>London</city>\n"+ "</person>");
    assertNotNull(source);
    template.sendBody("direct:default",source);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setStreamCaching(true);
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0));
        from("direct:object").to("activemq:queue:object?jmsMessageType=Object");
        from("direct:bytes").to("activemq:queue:bytes?jmsMessageType=Bytes");
        from("direct:default").to("activemq:queue:default");
        from("activemq:queue:object").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Object body=exchange.getIn().getBody();
            assertIsInstanceOf(Source.class,body);
          }
        }
).to("seda:choice");
        from("activemq:queue:bytes").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Object body=exchange.getIn().getBody();
            assertIsInstanceOf(byte[].class,body);
          }
        }
).to("seda:choice");
        from("activemq:queue:default").to("seda:choice");
        from("seda:choice").choice().when().xpath("/person/city = 'London'").to("mock:london").when().xpath("/person/city = 'Tampa'").to("mock:tampa").otherwise().to("mock:unknown").end();
      }
    }
;
  }
}
