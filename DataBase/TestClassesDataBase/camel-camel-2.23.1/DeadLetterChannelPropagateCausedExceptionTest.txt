/** 
 */
public class DeadLetterChannelPropagateCausedExceptionTest extends ContextTestSupport {
  @Test public void testDLCPropagateCaused() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").to("mock:a").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertIsInstanceOf(IllegalArgumentException.class,cause);
    assertEquals("Damn",cause.getMessage());
  }
  @Test public void testDLCPropagateCausedInRoute() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("direct:dead"));
        from("direct:dead").to("log:dead").to("mock:dead");
        from("direct:start").to("mock:a").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertIsInstanceOf(IllegalArgumentException.class,cause);
    assertEquals("Damn",cause.getMessage());
  }
  @Test public void testDLCPropagateCausedUseOriginalMessage() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").useOriginalMessage());
        from("direct:start").to("mock:a").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertIsInstanceOf(IllegalArgumentException.class,cause);
    assertEquals("Damn",cause.getMessage());
  }
  @Test public void testDLCPropagateCausedInRouteUseOriginalMessage() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("direct:dead").useOriginalMessage());
        from("direct:dead").to("log:dead").to("mock:dead");
        from("direct:start").to("mock:a").throwException(new IllegalArgumentException("Damn"));
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertIsInstanceOf(IllegalArgumentException.class,cause);
    assertEquals("Damn",cause.getMessage());
  }
  @Test public void testDLCPropagateCausedInSplitter() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").to("mock:a").split(body().tokenize(",")).stopOnException().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("Kaboom".equals(body)) {
              throw new IllegalArgumentException("Damn");
            }
          }
        }
).to("mock:line");
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:line").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","A,B,C,Kaboom");
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertIsInstanceOf(IllegalArgumentException.class,cause);
    assertEquals("Damn",cause.getMessage());
  }
}
