/** 
 * To test camel-mina component using a TCP client that communicates using TCP socket communication.
 * @version 
 */
public class MinaTcpLineDelimiterUsingPlainSocketTest extends BaseMinaTest {
  @Test public void testSendAndReceiveOnce() throws Exception {
    String response=sendAndReceive("World");
    assertNotNull("Nothing received from Mina",response);
    assertEquals("Hello World",response);
  }
  @Test public void testSendAndReceiveTwice() throws Exception {
    String london=sendAndReceive("London");
    String paris=sendAndReceive("Paris");
    assertNotNull("Nothing received from Mina",london);
    assertNotNull("Nothing received from Mina",paris);
    assertEquals("Hello London",london);
    assertEquals("Hello Paris",paris);
  }
  @Test public void testReceiveNoResponseSinceOutBodyIsNull() throws Exception {
    String out=sendAndReceive("force-null-out-body");
    assertNull("no data should be recieved",out);
  }
  @Test public void testReceiveNoResponseSinceOutBodyIsNullTwice() throws Exception {
    String out=sendAndReceive("force-null-out-body");
    assertNull("no data should be recieved",out);
    out=sendAndReceive("force-null-out-body");
    assertNull("no data should be recieved",out);
  }
  @Test public void testExchangeFailedOutShouldBeNull() throws Exception {
    String out=sendAndReceive("force-exception");
    assertTrue("out should not be the same as in when the exchange has failed",!"force-exception".equals(out));
    assertEquals("should get the exception here",out,"java.lang.IllegalArgumentException: Forced exception");
  }
  private String sendAndReceive(  String input) throws IOException {
    byte buf[]=new byte[128];
    Socket soc=new Socket();
    soc.connect(new InetSocketAddress("localhost",getPort()));
    OutputStream os=null;
    InputStream is=null;
    try {
      os=soc.getOutputStream();
      os.write((input + "\r").getBytes());
      is=soc.getInputStream();
      int len=is.read(buf);
      if (len == -1) {
        return null;
      }
    }
  finally {
      IOHelper.close(is,os);
      soc.close();
    }
    StringBuilder sb=new StringBuilder();
    for (    byte b : buf) {
      char ch=(char)b;
      if (ch == '\r' || ch == 0) {
        break;
      }
 else {
        sb.append(ch);
      }
    }
    return sb.toString();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        errorHandler(defaultErrorHandler().maximumRedeliveries(2));
        from("mina:tcp://localhost:{{port}}?textline=true&textlineDelimiter=MAC&sync=true").process(new Processor(){
          public void process(          Exchange e){
            String in=e.getIn().getBody(String.class);
            if ("force-null-out-body".equals(in)) {
              e.getOut().setBody(null);
            }
 else             if ("force-exception".equals(in)) {
              e.getOut().setBody(null);
              throw new IllegalArgumentException("Forced exception");
            }
 else {
              e.getOut().setBody("Hello " + in);
            }
          }
        }
);
      }
    }
;
  }
}
