public class EIPDocumentationMojoTest {
  EipDocumentationEnricherMojo eipDocumentationEnricherMojo=new EipDocumentationEnricherMojo();
  XPath xPath=XPathFactory.newInstance().newXPath();
  File tempFile;
  @Before public void setUp() throws Exception {
    eipDocumentationEnricherMojo.camelCoreDir=ResourceUtils.getResourceAsFile("integration/camel-core-integration");
    eipDocumentationEnricherMojo.camelCoreXmlDir=ResourceUtils.getResourceAsFile("integration/camel-core-integration");
    eipDocumentationEnricherMojo.camelSpringDir=ResourceUtils.getResourceAsFile("integration/camel-core-integration");
    eipDocumentationEnricherMojo.inputCamelSchemaFile=ResourceUtils.getResourceAsFile("integration/camel-spring.xsd");
    eipDocumentationEnricherMojo.pathToModelDir="trgt/classes/org/apache/camel/model";
    eipDocumentationEnricherMojo.pathToCoreXmlModelDir="trgt/classes/org/apache/camel/model";
    eipDocumentationEnricherMojo.pathToSpringModelDir="trgt/classes/org/apache/camel/model";
    xPath.setNamespaceContext(new CamelSpringNamespace());
    tempFile=File.createTempFile("outputXml",".xml");
    tempFile.deleteOnExit();
    eipDocumentationEnricherMojo.outputCamelSchemaFile=tempFile;
  }
  @Test public void testExecuteMojo() throws Exception {
    eipDocumentationEnricherMojo.execute();
    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
    documentBuilderFactory.setNamespaceAware(true);
    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
    Document doc=documentBuilder.parse(tempFile);
    validateElement(doc);
    validateAttributes(doc);
    validateParentAttribute(doc);
  }
  private void validateParentAttribute(  Document doc) throws Exception {
    Element e=(Element)xPath.compile("//xs:attribute[@name='id']").evaluate(doc,XPathConstants.NODE);
    assertEquals("id",e.getAttribute(Constants.NAME_ATTRIBUTE_NAME));
    validateDocumentation(e,"id documentation");
  }
  private void validateAttributes(  Document doc) throws Exception {
    Element e=(Element)xPath.compile("//xs:attribute[@name='beforeUri']").evaluate(doc,XPathConstants.NODE);
    assertEquals("beforeUri",e.getAttribute(Constants.NAME_ATTRIBUTE_NAME));
    validateDocumentation(e,"beforeUri documentation");
  }
  private void validateElement(  Document doc){
    NodeList element=doc.getElementsByTagName("xs:element");
    Element e=(Element)element.item(0);
    assertEquals("aop",e.getAttribute(Constants.NAME_ATTRIBUTE_NAME));
    validateDocumentation(e,"element documentation");
  }
  private void validateDocumentation(  Element element,  String expectedText){
    Element annotation=getFirsElement(element.getChildNodes());
    Element documentation=getFirsElement(annotation.getChildNodes());
    assertEquals("xs:annotation",annotation.getTagName());
    assertEquals("xs:documentation",documentation.getTagName());
    Node cdata=documentation.getFirstChild();
    assertThat(cdata,instanceOf(CharacterData.class));
    assertThat(cdata.getTextContent(),containsString(expectedText));
  }
  private Element getFirsElement(  NodeList nodeList){
    return (Element)nodeList.item(1);
  }
}
