/** 
 * @version 
 */
public class AsyncEndpointRecipientList4Test extends ContextTestSupport {
  private static long beforeThreadId;
  private static long afterThreadId;
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertTrue("Should use different threads " + beforeThreadId + ":"+ afterThreadId,beforeThreadId != afterThreadId);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadId=Thread.currentThread().getId();
          }
        }
).recipientList(constant("async:hi:camel,async:hi:world,direct:foo"));
        from("direct:foo").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadId=Thread.currentThread().getId();
            exchange.getOut().setBody("Bye Camel");
          }
        }
).to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
}
