/** 
 * @version 
 */
public class FileIdempotentReadSameFileAgainTest extends ContextTestSupport {
  private String uri="file://target/inbox?idempotent=false&move=../done&moveFailed=../error" + "&preMove=working/${date:now:yyyyMMddHHmmssSSS}-${file:name}&readLock=none&initialDelay=0&delay=10";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/inbox");
    super.setUp();
  }
  @Test public void testConsumeSameFileAgain() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("Hello World","Foo");
    template.sendBodyAndHeader("file://target/inbox","Hello World",Exchange.FILE_NAME,"foo.txt");
    template.sendBodyAndHeader("file://target/inbox","Foo",Exchange.FILE_NAME,"bar.txt");
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedBodiesReceived("Bye World");
    template.sendBodyAndHeader("file://target/inbox","Bye World",Exchange.FILE_NAME,"foo.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(uri).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
