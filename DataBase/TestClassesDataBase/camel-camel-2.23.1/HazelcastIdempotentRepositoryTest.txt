public class HazelcastIdempotentRepositoryTest extends CamelTestSupport {
  private IMap<String,Boolean> cache;
  private HazelcastIdempotentRepository repo;
  private HazelcastInstance hazelcastInstance;
  private String key01="123";
  private String key02="456";
  @Before public void setUp() throws Exception {
    hazelcastInstance=Hazelcast.newHazelcastInstance(null);
    cache=hazelcastInstance.getMap("myRepo");
    repo=new HazelcastIdempotentRepository(hazelcastInstance,"myRepo");
    super.setUp();
    cache.clear();
    repo.start();
  }
  @After public void tearDown() throws Exception {
    repo.stop();
    super.tearDown();
    cache.clear();
    hazelcastInstance.getLifecycleService().shutdown();
  }
  @Test public void testAdd() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(cache.containsKey(key01));
    assertFalse(repo.add(key01));
    assertEquals(1,cache.size());
    assertTrue(repo.add(key02));
    assertEquals(2,cache.size());
  }
  @Test public void testConfirm() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(repo.confirm(key01));
    assertFalse(repo.confirm(key02));
  }
  @Test public void testContains() throws Exception {
    assertFalse(repo.contains(key01));
    assertTrue(repo.add(key01));
    assertTrue(repo.contains(key01));
  }
  @Test public void testRemove() throws Exception {
    assertTrue(repo.add(key01));
    assertTrue(repo.add(key02));
    assertEquals(2,cache.size());
    repo.clear();
    assertEquals(0,cache.size());
  }
  @Test public void testClear() throws Exception {
    assertTrue(repo.add(key01));
    assertEquals(1,cache.size());
    assertTrue(repo.remove(key01));
    assertEquals(0,cache.size());
    assertFalse(repo.remove(key02));
  }
  @Test public void testRepositoryInRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:out");
    mock.expectedBodiesReceived("a","b");
    assertEquals("Should be started",true,repo.getStatus().isStarted());
    template.sendBodyAndHeader("direct://in","a","messageId",key01);
    template.sendBodyAndHeader("direct://in","b","messageId",key02);
    template.sendBodyAndHeader("direct://in","c","messageId",key01);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct://in").idempotentConsumer(header("messageId"),repo).to("mock://out");
      }
    }
;
  }
}
