/** 
 * @version 
 */
public class HttpConcurrentTest extends BaseHttpTest {
  private final AtomicInteger counter=new AtomicInteger();
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/",new HttpRequestHandler(){
      public void handle(      HttpRequest request,      HttpResponse response,      HttpContext context) throws HttpException, IOException {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        response.setStatusCode(HttpStatus.SC_OK);
        response.setEntity(new StringEntity("" + counter.incrementAndGet()));
      }
    }
).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    Map<Integer,Future<String>> responses=new HashMap<>();
    for (int i=0; i < files; i++) {
      final int index=i;
      Future<String> out=executor.submit(new Callable<String>(){
        public String call() throws Exception {
          return template.requestBody("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort(),null,String.class);
        }
      }
);
      responses.put(index,out);
    }
    assertEquals(files,responses.size());
    Set<String> unique=new HashSet<>();
    for (    Future<String> future : responses.values()) {
      unique.add(future.get());
    }
    assertEquals("Should be " + files + " unique responses",files,unique.size());
    executor.shutdownNow();
  }
}
