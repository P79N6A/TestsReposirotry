public class SplitterSkipTest extends ContextTestSupport {
  @Test public void testSplitterSkip() throws Exception {
    getMockEndpoint("mock:line").expectedBodiesReceived("C","D","E");
    List<Object> data=new ArrayList<>();
    data.add("A");
    data.add("B");
    data.add("C");
    data.add("D");
    data.add("E");
    template.sendBody("direct:start",data);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitterEmpty() throws Exception {
    getMockEndpoint("mock:line").expectedMessageCount(0);
    List<Object> data=new ArrayList<>();
    data.add("A");
    data.add("B");
    template.sendBody("direct:start",data);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitterEmptyAgain() throws Exception {
    getMockEndpoint("mock:line").expectedMessageCount(0);
    List<Object> data=new ArrayList<>();
    data.add("A");
    template.sendBody("direct:start",data);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(simple("${skip(2)}")).to("mock:line");
      }
    }
;
  }
}
