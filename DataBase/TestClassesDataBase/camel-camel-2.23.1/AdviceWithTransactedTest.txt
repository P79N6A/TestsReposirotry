/** 
 * @version 
 */
public class AdviceWithTransactedTest extends ContextTestSupport {
  @Test public void testAdviceTransacted() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:advice").expectedMessageCount(1);
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveAddFirst().to("mock:advice");
      }
    }
);
    template.sendBody("direct:advice","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:advice").policy(new MyDummyPolicy()).log("Advice ${body}").to("mock:result");
      }
    }
;
  }
private static final class MyDummyPolicy implements Policy {
    @Override public void beforeWrap(    RouteContext routeContext,    ProcessorDefinition<?> definition){
    }
    @Override public Processor wrap(    RouteContext routeContext,    Processor processor){
      return processor;
    }
  }
}
