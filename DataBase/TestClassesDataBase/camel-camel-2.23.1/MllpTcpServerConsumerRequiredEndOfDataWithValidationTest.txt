public class MllpTcpServerConsumerRequiredEndOfDataWithValidationTest extends TcpServerConsumerEndOfDataAndValidationTestSupport {
  @Override boolean validatePayload(){
    return true;
  }
  @Override boolean requireEndOfData(){
    return true;
  }
  @Override @Test public void testInvalidMessage() throws Exception {
    expectedInvalidCount=1;
    runNthInvalidMessage();
  }
  @Override @Test public void testNthInvalidMessage() throws Exception {
    expectedInvalidCount=1;
    runNthInvalidMessage();
  }
  @Override @Test public void testMessageContainingEmbeddedStartOfBlock() throws Exception {
    expectedInvalidCount=1;
    runMessageContainingEmbeddedStartOfBlock();
  }
  @Override @Test public void testNthMessageContainingEmbeddedStartOfBlock() throws Exception {
    expectedInvalidCount=1;
    runNthMessageContainingEmbeddedStartOfBlock();
  }
  @Override @Test public void testMessageContainingEmbeddedEndOfBlock() throws Exception {
    setExpectedCounts();
    NotifyBuilder done=new NotifyBuilder(context()).whenDone(1).create();
    mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage().replaceFirst("EVN","EVN" + MllpProtocolConstants.END_OF_BLOCK));
    assertFalse("Exchange should not have completed",done.matches(5,TimeUnit.SECONDS));
  }
  @Override @Test public void testInvalidMessageContainingEmbeddedEndOfBlock() throws Exception {
    expectedInvalidCount=1;
    runInvalidMessageContainingEmbeddedEndOfBlock();
  }
  @Override @Test public void testNthMessageContainingEmbeddedEndOfBlock() throws Exception {
    expectedInvalidCount=1;
    runNthMessageContainingEmbeddedEndOfBlock();
  }
  @Override @Test public void testMessageWithoutEndOfDataByte() throws Exception {
    expectedCompleteCount=1;
    expectedInvalidCount=1;
    runMessageWithoutEndOfDataByte();
  }
}
