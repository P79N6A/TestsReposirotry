@Ignore("Integration test that requires ironmq account.") public class LoadTest extends CamelTestSupport {
  private static final String IRONMQCLOUD="http://mq-v3-aws-us-east-1.iron.io";
  private final String projectId="replace-this";
  private final String token="replace-this";
  private final String ironMQEndpoint="ironmq:testqueue?preserveHeaders=true&projectId=" + projectId + "&token="+ token+ "&maxMessagesPerPoll=100&delay=3000&wait=30&ironMQCloud="+ IRONMQCLOUD;
  private final String datasetEndpoint="dataset:foo?produceDelay=5";
  private InputDataset dataSet=new InputDataset(1000);
  @Before public void clearQueue(){
    template.sendBodyAndHeader(ironMQEndpoint,null,IronMQConstants.OPERATION,IronMQConstants.CLEARQUEUE);
  }
  @Test public void testDataSet() throws Exception {
    MockEndpoint endpoint=getMockEndpoint(datasetEndpoint);
    endpoint.expectedMessageCount((int)dataSet.getSize());
    assertMockEndpointsSatisfied(4,TimeUnit.MINUTES);
  }
  @Override protected Context createJndiContext() throws Exception {
    Context context=super.createJndiContext();
    context.bind("foo",dataSet);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(datasetEndpoint).to(ironMQEndpoint);
        from(ironMQEndpoint).to(datasetEndpoint);
      }
    }
;
  }
public class InputDataset extends DataSetSupport {
    public InputDataset(    int size){
      super(size);
    }
    @Override protected Object createMessageBody(    long messageIndex){
      return "<hello>" + messageIndex;
    }
  }
}
