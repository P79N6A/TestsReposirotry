@ContextConfiguration @RunWith(SpringJUnit4ClassRunner.class) public class ConsumerExceptionPropagationRouteTest extends CamelTestSupport {
  private final String xmlRequestForGoogleStockQuote="<GetQuote xmlns=\"http://www.webserviceX.NET/\"><symbol>GOOG</symbol></GetQuote>";
  @Autowired private CamelEndpointMapping endpointMapping;
  @Autowired private ApplicationContext applicationContext;
  private MockWebServiceClient mockClient;
  @Before public void createClient(){
    mockClient=MockWebServiceClient.createClient(applicationContext);
  }
  @Override public void setUp() throws Exception {
    super.setUp();
    context.setTracing(true);
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("endpointMapping",this.endpointMapping);
    return registry;
  }
  @Ignore("For now getEndpointUri does not return the initial uri. Info like the endpoint scheme is lost") @Test public void testValidUri() throws Exception {
    String deprecate="spring-ws:rootqname:{http://www.webserviceX.NET/}GetQuote?endpointMapping=#endpointMapping";
    String sanitized="spring-ws:rootqname:(http://www.webserviceX.NET/)GetQuote?endpointMapping=#endpointMapping";
    Endpoint endpoint=context.getComponent("spring-ws").createEndpoint(deprecate);
    assertEquals(sanitized,endpoint.getEndpointUri());
    assertNotNull(new URI(endpoint.getEndpointUri()));
  }
  @Test public void consumeWebserviceAndTestForSoapFault() throws Exception {
    StreamSource source=new StreamSource(new StringReader(xmlRequestForGoogleStockQuote));
    mockClient.sendRequest(withPayload(source)).andExpect(serverOrReceiverFault());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("spring-ws:rootqname:{http://www.webserviceX.NET/}GetQuote?endpointMapping=#endpointMapping").throwException(new RuntimeException("this is a test exception!"));
      }
    }
;
  }
}
