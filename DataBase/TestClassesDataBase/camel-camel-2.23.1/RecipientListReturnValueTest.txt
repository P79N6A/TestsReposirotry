/** 
 * Tests to ensure a consistent return value when using the different ways of configuring the RecipientList pattern
 * @version 
 */
public class RecipientListReturnValueTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyBean());
    return jndi;
  }
  @Test public void testRecipientListWithRecipientList() throws Exception {
    doTestRecipientList("direct:recipientList");
  }
  @Test public void testRecipientListWithBeanRef() throws Exception {
    doTestRecipientList("direct:beanRef");
  }
  private void doTestRecipientList(  String uri) throws InterruptedException {
    MockEndpoint a=getMockEndpoint("mock:a");
    a.expectedBodiesReceived("Hello a");
    MockEndpoint b=getMockEndpoint("mock:b");
    b.expectedBodiesReceived("Hello b");
    String out=template.requestBody(uri,"Hello " + uri,String.class);
    assertEquals("Hello b",out);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        getContext().addInterceptStrategy(new Tracer());
        from("direct:beanRef").bean("myBean","route");
        from("direct:recipientList").recipientList().method("myBean","recipientList");
        from("direct:a").transform(constant("Hello a")).to("mock:a");
        from("direct:b").transform(constant("Hello b")).to("mock:b");
      }
    }
;
  }
public class MyBean {
    @org.apache.camel.RecipientList public String[] route(){
      return new String[]{"direct:a","direct:b"};
    }
    public String[] recipientList(){
      return new String[]{"direct:a","direct:b"};
    }
  }
}
