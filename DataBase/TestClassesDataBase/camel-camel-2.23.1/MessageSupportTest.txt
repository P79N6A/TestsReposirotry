/** 
 * @version 
 */
public class MessageSupportTest extends ContextTestSupport {
  @Test public void testSetBodyType() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Message in=exchange.getIn();
    in.setBody("123",Integer.class);
    assertIsInstanceOf(Integer.class,in.getBody());
  }
  @Test public void testGetMandatoryBody() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Message in=exchange.getIn();
    try {
      in.getMandatoryBody();
      fail("Should have thrown an exception");
    }
 catch (    InvalidPayloadException e) {
    }
    in.setBody("Hello World");
    assertEquals("Hello World",in.getMandatoryBody());
  }
  @Test public void testGetMessageId(){
    context.setUuidGenerator(new SimpleUuidGenerator());
    Exchange exchange=new DefaultExchange(context);
    Message in=exchange.getIn();
    assertEquals("1",in.getMessageId());
  }
  @Test public void testGetMessageIdWithoutAnExchange(){
    Message in=new DefaultMessage(context);
    assertNotNull(in.getMessageId());
  }
  @Test public void testCopyFromSameHeadersInstance(){
    Exchange exchange=new DefaultExchange(context);
    Message in=exchange.getIn();
    Map<String,Object> headers=in.getHeaders();
    headers.put("foo",123);
    Message out=new DefaultMessage(context);
    out.setBody("Bye World");
    out.setHeaders(headers);
    out.copyFrom(in);
    assertEquals(123,headers.get("foo"));
    assertEquals(123,in.getHeader("foo"));
    assertEquals(123,out.getHeader("foo"));
  }
  @Test public void testCopyOverExchange() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Message in=exchange.getIn();
    in.setBody("Bye World");
    Message two=in.copy();
    assertSame(exchange,two.getExchange());
    Message three=new DefaultMessage(context);
    three.copyFrom(two);
    assertSame(exchange,three.getExchange());
  }
}
