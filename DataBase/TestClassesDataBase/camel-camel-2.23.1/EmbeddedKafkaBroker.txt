public class EmbeddedKafkaBroker extends ExternalResource {
  private final Logger log=LoggerFactory.getLogger(this.getClass());
  private final Integer brokerId;
  private final Integer port;
  private final String zkConnection;
  private final Properties baseProperties;
  private final String brokerList;
  private KafkaServer kafkaServer;
  private File logDir;
  private ZkUtils zkUtils;
  public EmbeddedKafkaBroker(  int brokerId,  String zkConnection){
    this(brokerId,AvailablePortFinder.getNextAvailable(),zkConnection,new Properties());
  }
  public EmbeddedKafkaBroker(  int brokerId,  int port,  String zkConnection,  Properties baseProperties){
    this.brokerId=brokerId;
    this.port=port;
    this.zkConnection=zkConnection;
    this.baseProperties=baseProperties;
    log.info("Starting broker[{}] on port {}",brokerId,port);
    this.brokerList="localhost:" + this.port;
  }
  public ZkUtils getZkUtils(){
    return zkUtils;
  }
  public void createTopic(  String topic,  int partitionCount){
    AdminUtils.createTopic(getZkUtils(),topic,partitionCount,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
  }
  public void before(){
    logDir=constructTempDir(perTest("kafka-log"));
    Properties properties=new Properties();
    properties.putAll(baseProperties);
    properties.setProperty("zookeeper.connect",zkConnection);
    properties.setProperty("broker.id",brokerId.toString());
    properties.setProperty("host.name","localhost");
    properties.setProperty("port",Integer.toString(port));
    properties.setProperty("log.dir",logDir.getAbsolutePath());
    properties.setProperty("num.partitions",String.valueOf(1));
    properties.setProperty("auto.create.topics.enable",String.valueOf(Boolean.TRUE));
    log.info("log directory: " + logDir.getAbsolutePath());
    properties.setProperty("log.flush.interval.messages",String.valueOf(1));
    properties.setProperty("offsets.topic.replication.factor",String.valueOf(1));
    kafkaServer=startBroker(properties);
  }
  private KafkaServer startBroker(  Properties props){
    zkUtils=ZkUtils.apply(zkConnection,30000,30000,false);
    List<KafkaMetricsReporter> kmrList=new ArrayList<>();
    Buffer<KafkaMetricsReporter> metricsList=scala.collection.JavaConversions.asScalaBuffer(kmrList);
    KafkaServer server=new KafkaServer(new KafkaConfig(props),new SystemTime(),Option.<String>empty(),metricsList);
    server.startup();
    return server;
  }
  public String getBrokerList(){
    return brokerList;
  }
  public Integer getPort(){
    return port;
  }
  public void after(){
    kafkaServer.shutdown();
    try {
      TestUtils.deleteFile(logDir);
    }
 catch (    FileNotFoundException e) {
      log.info("Could not delete {} - not found",logDir.getAbsolutePath());
    }
  }
  @Override public String toString(){
    final StringBuilder sb=new StringBuilder("EmbeddedKafkaBroker{");
    sb.append("brokerList='").append(brokerList).append('\'');
    sb.append('}');
    return sb.toString();
  }
}
