/** 
 */
public class NewFileConsumerTest extends ContextTestSupport {
  private MyFileEndpoint myFile;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/myfile");
    super.setUp();
  }
  @Test public void testNewFileConsumer() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/myfile","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    await("postPollCheck invocation").atMost(1,TimeUnit.SECONDS).until(myFile::isPost);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        myFile=new MyFileEndpoint();
        myFile.setCamelContext(context);
        myFile.setFile(new File("target/myfile"));
        myFile.setDelay(10);
        myFile.setInitialDelay(0);
        from(myFile).to("mock:result");
      }
    }
;
  }
private class MyFileEndpoint extends FileEndpoint {
    private volatile boolean post;
    protected FileConsumer newFileConsumer(    Processor processor,    GenericFileOperations<File> operations){
      return new FileConsumer(this,processor,operations,createGenericFileStrategy()){
        @Override protected void postPollCheck(        int polledMessages){
          post=true;
        }
      }
;
    }
    public boolean isPost(){
      return post;
    }
  }
}
