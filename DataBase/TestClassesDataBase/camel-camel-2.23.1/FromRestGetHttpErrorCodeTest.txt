public class FromRestGetHttpErrorCodeTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("dummy-rest",new DummyRestConsumerFactory());
    return jndi;
  }
  @Test public void testFromRestModel() throws Exception {
    String out=template.requestBody("seda:get-say-bye","I was here",String.class);
    assertEquals("Bye World",out);
    Exchange reply=template.request("seda:get-say-bye",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Kaboom");
      }
    }
);
    assertNotNull(reply);
    assertEquals(404,reply.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("text/plain",reply.getOut().getHeader(Exchange.CONTENT_TYPE));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().host("localhost");
        rest("/say/bye").get().route().choice().when(body().contains("Kaboom")).setHeader(Exchange.HTTP_RESPONSE_CODE,constant(404)).setHeader(Exchange.CONTENT_TYPE,constant("text/plain")).setBody(constant("The data is invalid")).otherwise().transform().constant("Bye World");
      }
    }
;
  }
}
