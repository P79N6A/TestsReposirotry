/** 
 * Unit test of the gzip data format.
 */
public class GzipDataFormatTest extends ContextTestSupport {
  private static final String TEXT="Hamlet by William Shakespeare\n" + "To be, or not to be: that is the question:\n" + "Whether 'tis nobler in the mind to suffer\n"+ "The slings and arrows of outrageous fortune,\n"+ "Or to take arms against a sea of troubles,\n"+ "And by opposing end them? To die: to sleep;";
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  private byte[] sendText() throws Exception {
    return (byte[])template.requestBody("direct:start",TEXT.getBytes("UTF-8"));
  }
  @Test public void testMarshalTextToGZip() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().gzip();
      }
    }
);
    context.start();
    byte[] output=sendText();
    GZIPInputStream stream=new GZIPInputStream(new ByteArrayInputStream(output));
    String result=IOConverter.toString(stream,null);
    assertEquals("Uncompressed something different than compressed",TEXT,result);
  }
  @Test public void testUnMarshalTextToGzip() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("direct:start").marshal().gzip().unmarshal().gzip().to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint result=context.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived(TEXT.getBytes("UTF-8"));
    sendText();
    result.assertIsSatisfied();
  }
}
