/** 
 * @version 
 */
public class HttpPollingConsumerTest extends BaseHttpTest {
  private HttpServer localServer;
  private String user="camel";
  private String password="password";
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/",new DelayValidationHandler("GET",null,null,getExpectedContent(),1000)).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void basicAuthenticationShouldSuccess() throws Exception {
    String body=consumer.receiveBody("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/?authUsername="+ user+ "&authPassword="+ password,String.class);
    assertEquals(getExpectedContent(),body);
  }
  @Test public void basicAuthenticationPreemptiveShouldSuccess() throws Exception {
    String body=consumer.receiveBody("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/?authUsername="+ user+ "&authPassword="+ password+ "&authenticationPreemptive=true",String.class);
    assertEquals(getExpectedContent(),body);
  }
  @Test public void testReceive() throws Exception {
    String body=consumer.receiveBody("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/",String.class);
    assertEquals(getExpectedContent(),body);
  }
  @Test public void testReceiveTimeout() throws Exception {
    String body=consumer.receiveBody("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/",5000,String.class);
    assertEquals(getExpectedContent(),body);
  }
  @Test public void testReceiveTimeoutTriggered() throws Exception {
    try {
      consumer.receiveBody("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/",250,String.class);
      fail("Should have thrown an exception");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(SocketTimeoutException.class,e.getCause());
    }
  }
}
