/** 
 * Integration test to confirm REQUEUE header causes message not to be re-queued when an handled exception occurs.
 */
public class RabbitMQRequeueHandledExceptionIntTest extends CamelTestSupport {
  public static final String ROUTING_KEY="rk4";
  @Produce(uri="direct:rabbitMQ") protected ProducerTemplate directProducer;
  @EndpointInject(uri="rabbitmq:localhost:5672/ex4?username=cameltest&password=cameltest" + "&autoAck=false&queue=q4&routingKey=" + ROUTING_KEY) private Endpoint rabbitMQEndpoint;
  @EndpointInject(uri="mock:producing") private MockEndpoint producingMockEndpoint;
  @EndpointInject(uri="mock:consuming") private MockEndpoint consumingMockEndpoint;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:rabbitMQ").id("producingRoute").log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint);
        from(rabbitMQEndpoint).onException(Exception.class).handled(true).end().id("consumingRoute").log("Receiving message").inOnly(consumingMockEndpoint).throwException(new Exception("Simulated handled exception"));
      }
    }
;
  }
  @Test public void testTrueRequeueHeaderWithHandleExceptionNotCausesRequeue() throws Exception {
    producingMockEndpoint.expectedMessageCount(1);
    consumingMockEndpoint.setMinimumExpectedMessageCount(1);
    directProducer.sendBodyAndHeader("Hello, World!",RabbitMQConstants.REQUEUE,true);
    producingMockEndpoint.assertIsSatisfied();
    consumingMockEndpoint.assertIsSatisfied();
  }
}
