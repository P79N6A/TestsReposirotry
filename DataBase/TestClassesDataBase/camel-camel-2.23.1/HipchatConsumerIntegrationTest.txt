@Ignore("Must be manually tested. Provide your own auth key, user, & room from https://www.hipchat.com/docs/apiv2/auth") public class HipchatConsumerIntegrationTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @Test public void sendInOnly() throws Exception {
    result.expectedMessageCount(1);
    result.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        StatusLine status=(StatusLine)exchange.getIn().getHeader(HipchatConstants.FROM_USER_RESPONSE_STATUS);
        return 200 == status.getStatusCode();
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        String hipchatEndpointUri="hipchat:http:api.hipchat.com?authToken=XXXX&consumeUsers=@ShreyasPurohit&delay=1000";
        from(hipchatEndpointUri).idempotentConsumer(simple("${in.header.HipchatMessageDate} ${in.header.HipchatFromUser}"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result");
      }
    }
;
  }
}
