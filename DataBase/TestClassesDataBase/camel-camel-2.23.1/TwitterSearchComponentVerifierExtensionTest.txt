public class TwitterSearchComponentVerifierExtensionTest extends AbstractComponentVerifierExtensionTest {
  @Override protected String getComponentScheme(){
    return "twitter-search";
  }
  @Test public void testEmptyConfiguration(){
    Component component=context().getComponent(getComponentScheme());
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
{
      ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,Collections.emptyMap());
      Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
      Assert.assertEquals(5,result.getErrors().size());
      List<String> expected=new LinkedList<>();
      expected.add("keywords");
      expected.add("consumerKey");
      expected.add("consumerSecret");
      expected.add("accessToken");
      expected.add("accessTokenSecret");
      for (      ComponentVerifierExtension.VerificationError error : result.getErrors()) {
        expected.removeAll(error.getParameterKeys());
      }
      Assert.assertTrue("Missing expected params: " + expected.toString(),expected.isEmpty());
    }
{
      ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,Collections.emptyMap());
      Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
      Assert.assertEquals(1,result.getErrors().size());
      Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION,result.getErrors().get(0).getCode());
      Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE));
      Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof IllegalArgumentException);
    }
  }
}
