/** 
 * @version 
 */
public class NewInstanceTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanRouteTest.class);
  protected JndiContext jndiContext;
  @Test public void testSendMessageToDifferentBeans() throws Exception {
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    endpoint.expectedBodiesReceived(1,2);
    template.sendBody("direct:start",ExchangePattern.InOut,"first");
    jndiContext.unbind("myBean");
    jndiContext.bind("myBean",new MyBean());
    template.sendBody("direct:start",ExchangePattern.InOut,"second");
    assertMockEndpointsSatisfied();
  }
  @Override protected Context createJndiContext() throws Exception {
    jndiContext=new JndiContext();
    jndiContext.bind("myBean",new MyBean());
    return jndiContext;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").bean("myBean",false).to("mock:result");
      }
    }
;
  }
public static class MyBean {
    private static int counter;
    private int id;
    public MyBean(){
      id=generateId();
    }
    protected static synchronized int generateId(){
      return ++counter;
    }
    @Override public String toString(){
      return "MyBean[" + id + "]";
    }
    public int read(    @Body String body){
      LOG.info("read() method called with: {} on {}",body,this);
      return id;
    }
  }
}
