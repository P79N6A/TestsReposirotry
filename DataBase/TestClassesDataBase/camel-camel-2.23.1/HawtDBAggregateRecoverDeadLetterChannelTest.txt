public class HawtDBAggregateRecoverDeadLetterChannelTest extends CamelTestSupport {
  private HawtDBAggregationRepository repo;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/data");
    repo=new HawtDBAggregationRepository("repo1","target/data/hawtdb.dat");
    repo.setUseRecovery(true);
    repo.setMaximumRedeliveries(3);
    repo.setDeadLetterUri("mock:dead");
    repo.setRecoveryInterval(500,TimeUnit.MILLISECONDS);
    super.setUp();
  }
  @Test public void testHawtDBAggregateRecoverDeadLetterChannel() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:aggregated").expectedMessageCount(4);
    getMockEndpoint("mock:aggregated").message(0).header(Exchange.REDELIVERED).isNull();
    getMockEndpoint("mock:aggregated").message(1).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:aggregated").message(1).header(Exchange.REDELIVERY_COUNTER).isEqualTo(1);
    getMockEndpoint("mock:aggregated").message(1).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(3);
    getMockEndpoint("mock:aggregated").message(2).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:aggregated").message(2).header(Exchange.REDELIVERY_COUNTER).isEqualTo(2);
    getMockEndpoint("mock:aggregated").message(2).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(3);
    getMockEndpoint("mock:aggregated").message(3).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:aggregated").message(3).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
    getMockEndpoint("mock:aggregated").message(3).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(3);
    getMockEndpoint("mock:dead").expectedBodiesReceived("ABCDE");
    getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
    getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull();
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end();
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
