public class CoAPMethodRestrictTest extends CoAPTestSupport {
  @Test public void testDefaultCoAPMethodRestrict(){
    NetworkConfig.createStandardWithoutFile();
    assertCoAPMethodRestrictResponse("/test",CoAPConstants.METHOD_RESTRICT_ALL,"GET: /test");
  }
  @Test public void testSpecifiedCoAPMethodRestrict(){
    NetworkConfig.createStandardWithoutFile();
    assertCoAPMethodRestrictResponse("/test/a","GET","GET: /test/a");
    assertCoAPMethodRestrictResponse("/test/a/b","DELETE","DELETE: /test/a/b");
    assertCoAPMethodRestrictResponse("/test/a/b/c","DELETE,GET","DELETE & GET: /test/a/b/c");
    assertCoAPMethodRestrictResponse("/test/b","GET","GET: /test/b");
  }
  private void assertCoAPMethodRestrictResponse(  String path,  String methodRestrict,  String expectedResponse){
    for (    String method : CoAPConstants.METHOD_RESTRICT_ALL.split(",")) {
      String result=template.requestBodyAndHeader("coap://localhost:" + PORT + path,null,CoAPConstants.COAP_METHOD,method,String.class);
      if (methodRestrict.contains(method)) {
        assertEquals(expectedResponse,result);
      }
 else {
        assertEquals("",result);
      }
    }
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        fromF("coap://localhost:%d/test",PORT).setBody(constant("GET: /test"));
        fromF("coap://localhost:%d/test/a?coapMethodRestrict=GET",PORT).setBody(constant("GET: /test/a"));
        fromF("coap://localhost:%d/test/a/b?coapMethodRestrict=DELETE",PORT).setBody(constant("DELETE: /test/a/b"));
        fromF("coap://localhost:%d/test/a/b/c?coapMethodRestrict=DELETE,GET",PORT).setBody(constant("DELETE & GET: /test/a/b/c"));
        fromF("coap://localhost:%d/test/b?coapMethodRestrict=GET",PORT).setBody(constant("GET: /test/b"));
      }
    }
;
  }
}
