/** 
 * @version 
 */
public class PolicyPerProcessorTest extends ContextTestSupport {
  @Test public void testPolicy() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedHeaderReceived("foo","was wrapped");
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedHeaderReceived("foo","police finished execution");
    getMockEndpoint("mock:bar").expectedHeaderReceived("bar","was wrapped");
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedHeaderReceived("foo","police finished execution");
    getMockEndpoint("mock:result").expectedHeaderReceived("bar","police finished execution");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    MyPolicy foo=context.getRegistry().lookupByNameAndType("foo",MyPolicy.class);
    MyPolicy bar=context.getRegistry().lookupByNameAndType("bar",MyPolicy.class);
    assertEquals("Should only be invoked 1 time",1,foo.getInvoked());
    assertEquals("Should only be invoked 1 time",1,bar.getInvoked());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyPolicy("foo"));
    jndi.bind("bar",new MyPolicy("bar"));
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").policy("foo").to("mock:foo").end().policy("bar").to("mock:bar").end().to("mock:result");
      }
    }
;
  }
public static class MyPolicy implements Policy {
    private final String name;
    private int invoked;
    public MyPolicy(    String name){
      this.name=name;
    }
    public void beforeWrap(    RouteContext routeContext,    ProcessorDefinition<?> definition){
    }
    public Processor wrap(    RouteContext routeContext,    final Processor processor){
      return new Processor(){
        public void process(        Exchange exchange) throws Exception {
          invoked++;
          exchange.getIn().setHeader(name,"was wrapped");
          processor.process(exchange);
          exchange.getIn().setHeader(name,"police finished execution");
        }
      }
;
    }
    public int getInvoked(){
      return invoked;
    }
  }
}
