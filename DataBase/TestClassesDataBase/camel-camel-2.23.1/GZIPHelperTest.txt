public class GZIPHelperTest {
  private static byte[] sampleBytes=new byte[]{1,2,3,1,2,3};
  private static String sampleString="<Hello>World</Hello>";
  @Test public void toGZIPInputStreamShouldReturnTheSameInputStream() throws IOException {
    InputStream inputStream=GZIPHelper.uncompressGzip("text",new ByteArrayInputStream(sampleBytes));
    byte[] bytes=new byte[6];
    inputStream.read(bytes);
    assertEquals(-1,inputStream.read());
    assertArrayEquals(sampleBytes,bytes);
  }
  @Test public void toGZIPInputStreamShouldReturnAByteArrayInputStream() throws IOException {
    InputStream inputStream=GZIPHelper.compressGzip("text",sampleBytes);
    byte[] bytes=IOConverter.toBytes(inputStream);
    assertArrayEquals(sampleBytes,bytes);
  }
  @Test public void testCompressAndUnCompressData() throws IOException {
    InputStream inputStream=GZIPHelper.compressGzip("gzip",new ByteArrayInputStream(sampleString.getBytes()));
    assertNotNull("The inputStream should not be null.",inputStream);
    inputStream=GZIPHelper.uncompressGzip("gzip",inputStream);
    String result=IOConverter.toString(inputStream,null);
    assertEquals("The result is wrong.",sampleString,result);
  }
  @Test public void testIsGzipMessage(){
    assertTrue(GZIPHelper.isGzip(createMessageWithContentEncodingHeader("gzip")));
    assertTrue(GZIPHelper.isGzip(createMessageWithContentEncodingHeader("GZip")));
    assertFalse(GZIPHelper.isGzip(createMessageWithContentEncodingHeader(null)));
    assertFalse(GZIPHelper.isGzip(createMessageWithContentEncodingHeader("zip")));
  }
  @Test public void isGzipString(){
    assertTrue(GZIPHelper.isGzip("gzip"));
    assertTrue(GZIPHelper.isGzip("GZip"));
    assertFalse(GZIPHelper.isGzip((String)null));
    assertFalse(GZIPHelper.isGzip("zip"));
  }
  private Message createMessageWithContentEncodingHeader(  String contentEncoding){
    Message msg=new DefaultMessage(new DefaultCamelContext());
    msg.setHeader("Content-Encoding",contentEncoding);
    return msg;
  }
}
