/** 
 * @version 
 */
public class ContainerWideInterceptorTest extends TestSupport {
  private CamelContext camel1;
  private CamelContext camel2;
  private ApplicationContext ac;
  private ContainerWideInterceptor myInterceptor;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    ac=new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/ContainerWideInterceptorTest.xml");
    camel1=ac.getBean("camel1",CamelContext.class);
    camel2=ac.getBean("camel2",CamelContext.class);
    myInterceptor=ac.getBean("myInterceptor",ContainerWideInterceptor.class);
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    camel2.stop();
    camel1.stop();
  }
  @Test public void testOne() throws Exception {
    int start=myInterceptor.getCount();
    MockEndpoint result=camel1.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived("Hello World");
    ProducerTemplate template=camel1.createProducerTemplate();
    template.start();
    template.sendBody("direct:one","Hello World");
    template.stop();
    result.assertIsSatisfied();
    int delta=myInterceptor.getCount() - start;
    assertEquals("Should have been counted +1",1,delta);
  }
  @Test public void testTwo() throws Exception {
    int start=myInterceptor.getCount();
    MockEndpoint result=camel2.getEndpoint("mock:result",MockEndpoint.class);
    result.expectedBodiesReceived("Bye World");
    ProducerTemplate template=camel2.createProducerTemplate();
    template.start();
    template.sendBody("direct:two","Bye World");
    template.stop();
    result.assertIsSatisfied();
    int delta=myInterceptor.getCount() - start;
    assertEquals("Should have been counted +2",2,delta);
  }
}
