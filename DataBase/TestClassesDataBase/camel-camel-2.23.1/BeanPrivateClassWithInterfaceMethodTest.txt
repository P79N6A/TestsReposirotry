/** 
 * Tests Bean binding for private & package-private classes where the target method is accessible through an interface.
 */
public final class BeanPrivateClassWithInterfaceMethodTest extends ContextTestSupport {
  private static final String INPUT_BODY="Whatever";
  private final HelloCamel packagePrivateImpl=newPackagePrivateHelloCamel();
  private final HelloCamel privateImpl=newPrivateHelloCamel();
  @Test public void testPackagePrivateClassBinding() throws InterruptedException {
    MockEndpoint mockResult=getMockEndpoint("mock:packagePrivateClassResult");
    mockResult.setExpectedMessageCount(1);
    mockResult.message(0).body().isEqualTo(EXPECTED_OUTPUT);
    template.sendBody("direct:testPackagePrivateClass",INPUT_BODY);
    assertMockEndpointsSatisfied();
  }
  @Test public void testPrivateClassBinding() throws InterruptedException {
    MockEndpoint mockResult=getMockEndpoint("mock:privateClassResult");
    mockResult.setExpectedMessageCount(1);
    mockResult.message(0).body().isEqualTo(EXPECTED_OUTPUT);
    template.sendBody("direct:testPrivateClass",INPUT_BODY);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:testPackagePrivateClass").bean(packagePrivateImpl,METHOD_NAME).to("mock:packagePrivateClassResult");
        from("direct:testPrivateClass").bean(privateImpl,METHOD_NAME).to("mock:privateClassResult");
      }
    }
;
  }
}
