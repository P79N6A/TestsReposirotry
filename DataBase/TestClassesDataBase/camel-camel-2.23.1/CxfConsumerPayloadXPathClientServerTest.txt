public class CxfConsumerPayloadXPathClientServerTest extends CamelTestSupport {
  private static final String ECHO_RESPONSE="<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">echo Hello World!</return>" + "</ns1:echoResponse>";
  protected final String simpleEndpointAddress="http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/test";
  protected final String simpleEndpointURI="cxf://" + simpleEndpointAddress + "?serviceClass=org.apache.camel.component.cxf.HelloService";
  private String testMessage;
  private String receivedMessageCxfPayloadApplyingXPath;
  private String receivedMessageByDom;
  private String receivedMessageStringApplyingXPath;
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor(){
          @SuppressWarnings("unchecked") @Override public void process(          final Exchange exchange) throws Exception {
            Object request=exchange.getIn().getBody();
            assertIsInstanceOf(CxfPayload.class,request);
            receivedMessageCxfPayloadApplyingXPath=XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context,request,String.class);
            CxfPayload<SoapHeader> payload=(CxfPayload<SoapHeader>)request;
            Element el=payload.getBody().get(0);
            Element el2=(Element)el.getFirstChild();
            Text textnode=(Text)el2.getFirstChild();
            receivedMessageByDom=textnode.getNodeValue();
            textnode=(Text)textnode.getNextSibling();
            while (textnode != null) {
              receivedMessageByDom=receivedMessageByDom + textnode.getNodeValue();
              textnode=(Text)textnode.getNextSibling();
            }
            request=exchange.getIn().getBody(String.class);
            assertIsInstanceOf(String.class,request);
            receivedMessageStringApplyingXPath=XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context,request,String.class);
            XmlConverter converter=new XmlConverter();
            Document outDocument=converter.toDOMDocument(ECHO_RESPONSE,exchange);
            List<Source> outElements=new ArrayList<>();
            outElements.add(new DOMSource(outDocument.getDocumentElement()));
            CxfPayload<SoapHeader> responsePayload=new CxfPayload<>(null,outElements,null);
            exchange.getOut().setBody(responsePayload);
          }
        }
);
      }
    }
;
  }
  private void buildTestMessage(  int size){
    testMessage=StringUtils.repeat("x",size);
  }
  @Test public void testMessageWithIncreasingSize() throws Exception {
    execTest(1);
    execTest(10);
    execTest(100);
    execTest(1000);
    execTest(10000);
    execTest(100000);
  }
  private void execTest(  int size) throws Exception {
    buildTestMessage(size);
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(simpleEndpointAddress);
    clientBean.setServiceClass(HelloService.class);
    clientBean.setBus(BusFactory.getDefaultBus());
    HelloService client=(HelloService)proxyFactory.create();
    String result=client.echo(testMessage);
    assertEquals("We should get the echo string result from router","echo Hello World!",result);
    assertEquals("Lengths of testMessage and receiveMessage should be equal (conversion body to String),",testMessage.length(),receivedMessageStringApplyingXPath.length());
    assertEquals("Lengths of receivedMessageByDom and receivedMessageCxfPayloadApplyingXPath should be equal",receivedMessageCxfPayloadApplyingXPath.length(),receivedMessageByDom.length());
    assertEquals("Lengths of testMessage and receiveMessage should be equal (body is CxfPayload),",testMessage.length(),receivedMessageCxfPayloadApplyingXPath.length());
  }
}
