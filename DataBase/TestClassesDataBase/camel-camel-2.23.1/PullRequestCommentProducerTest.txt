public class PullRequestCommentProducerTest extends GitHubComponentTestBase {
  protected static final Logger LOG=LoggerFactory.getLogger(PullRequestCommentProducerTest.class);
  private long latestPullRequestId;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from("direct:validPullRequest").process(new MockPullRequestCommentProducerProcessor()).to("github://pullRequestComment?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo");
      }
    }
;
  }
  @Test public void testPullRequestCommentProducer() throws Exception {
    PullRequest pullRequest=pullRequestService.addPullRequest("testPullRequestCommentProducer");
    latestPullRequestId=pullRequest.getId();
    Endpoint commentProducerEndpoint=getMandatoryEndpoint("direct:validPullRequest");
    Exchange exchange=commentProducerEndpoint.createExchange();
    String commentText="Pushed this comment at " + new Date();
    exchange.getIn().setBody(commentText);
    template.send(commentProducerEndpoint,exchange);
    Thread.sleep(1 * 1000);
    List<CommitComment> commitComments=pullRequestService.getComments(null,(int)pullRequest.getId());
    assertEquals(1,commitComments.size());
    CommitComment commitComment=commitComments.get(0);
    assertEquals("Commit IDs did not match ",Long.toString(pullRequest.getId()),commitComment.getCommitId());
    assertEquals("Comment text did not match ",commentText,commitComment.getBodyText());
  }
public class MockPullRequestCommentProducerProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Map<String,Object> headers=in.getHeaders();
      headers.put(GitHubConstants.GITHUB_PULLREQUEST,latestPullRequestId);
    }
  }
}
