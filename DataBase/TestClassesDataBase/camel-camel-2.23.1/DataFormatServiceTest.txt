/** 
 * Test that data format receives callback if its a service / CamelContextAware
 * @version 
 */
public class DataFormatServiceTest extends ContextTestSupport {
  protected final MyDataFormat my=new MyDataFormat();
  @Test public void testMarshal() throws Exception {
    assertEquals(true,my.isStarted());
    assertSame(context,my.getCamelContext());
    getMockEndpoint("mock:a").expectedBodiesReceived("Hi Camel");
    template.sendBody("direct:a","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
    assertEquals(true,my.isStopped());
    assertSame(context,my.getCamelContext());
  }
  @Test public void testUnmarshal() throws Exception {
    assertEquals(true,my.isStarted());
    assertSame(context,my.getCamelContext());
    getMockEndpoint("mock:b").expectedBodiesReceived("Bye World");
    template.sendBody("direct:b","Hello World");
    assertMockEndpointsSatisfied();
    context.stop();
    assertEquals(true,my.isStopped());
    assertSame(context,my.getCamelContext());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").marshal(my).to("mock:a");
        from("direct:b").unmarshal(my).to("mock:b");
      }
    }
;
  }
public static class MyDataFormat extends ServiceSupport implements DataFormat, CamelContextAware {
    private CamelContext camelContext;
    public CamelContext getCamelContext(){
      return camelContext;
    }
    public void setCamelContext(    CamelContext camelContext){
      this.camelContext=camelContext;
    }
    public void marshal(    Exchange exchange,    Object graph,    OutputStream stream) throws Exception {
      stream.write("Hi Camel".getBytes());
    }
    public Object unmarshal(    Exchange exchange,    InputStream stream) throws Exception {
      return "Bye World";
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
