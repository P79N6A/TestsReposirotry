/** 
 * Testing http://camel.apache.org/dsl.html
 */
public class InterceptFromPredicateProceedAndStopTest extends ContextTestSupport {
  @Test public void testInterceptorNoPredicate() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().to("mock:test");
        from("seda:order").to("mock:ok");
      }
    }
);
    MockEndpoint mockTest=getMockEndpoint("mock:test");
    mockTest.expectedBodiesReceived("Camel in Action");
    MockEndpoint mockOk=getMockEndpoint("mock:ok");
    mockOk.expectedBodiesReceived("Camel in Action");
    template.sendBodyAndHeader("seda:order","Camel in Action","user","test");
    mockTest.assertIsSatisfied();
    mockOk.assertIsSatisfied();
  }
  @Test public void testInterceptorNoPredicateAndProceed() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().to("mock:test");
        from("seda:order").to("mock:ok");
      }
    }
);
    MockEndpoint mockTest=getMockEndpoint("mock:test");
    mockTest.expectedBodiesReceived("Camel in Action");
    MockEndpoint mockOk=getMockEndpoint("mock:ok");
    mockOk.expectedBodiesReceived("Camel in Action");
    template.sendBodyAndHeader("seda:order","Camel in Action","user","test");
    mockTest.assertIsSatisfied();
    mockOk.assertIsSatisfied();
  }
  @Test public void testInterceptorNoPredicateAndStop() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().to("mock:test").stop();
        from("seda:order").to("mock:ok");
      }
    }
);
    MockEndpoint mockTest=getMockEndpoint("mock:test");
    mockTest.expectedBodiesReceived("Camel in Action");
    MockEndpoint mockOk=getMockEndpoint("mock:ok");
    mockOk.expectedMessageCount(0);
    template.sendBodyAndHeader("seda:order","Camel in Action","user","test");
    mockTest.assertIsSatisfied();
    mockOk.assertIsSatisfied();
  }
  @Test public void testInterceptorWithPredicate() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().when(header("user").isEqualTo("test")).to("mock:test");
        from("seda:order").to("mock:ok");
      }
    }
);
    MockEndpoint mockTest=getMockEndpoint("mock:test");
    mockTest.expectedBodiesReceived("Camel in Action");
    MockEndpoint mockOk=getMockEndpoint("mock:ok");
    mockOk.expectedBodiesReceived("Camel in Action");
    template.sendBodyAndHeader("seda:order","Camel in Action","user","test");
    mockTest.assertIsSatisfied();
    mockOk.assertIsSatisfied();
  }
  @Test public void testInterceptorWithPredicateAndProceed() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().when(header("user").isEqualTo("test")).to("mock:test");
        from("seda:order").to("mock:ok");
      }
    }
);
    MockEndpoint mockTest=getMockEndpoint("mock:test");
    mockTest.expectedBodiesReceived("Camel in Action");
    MockEndpoint mockOk=getMockEndpoint("mock:ok");
    mockOk.expectedBodiesReceived("Camel in Action");
    template.sendBodyAndHeader("seda:order","Camel in Action","user","test");
    mockTest.assertIsSatisfied();
    mockOk.assertIsSatisfied();
  }
  @Test public void testInterceptorWithPredicateAndStop() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        interceptFrom().when(header("user").isEqualTo("test")).to("mock:test").stop();
        from("seda:order").to("mock:ok");
      }
    }
);
    MockEndpoint mockTest=getMockEndpoint("mock:test");
    mockTest.expectedBodiesReceived("Camel in Action");
    MockEndpoint mockOk=getMockEndpoint("mock:ok");
    mockOk.expectedMessageCount(0);
    template.sendBodyAndHeader("seda:order","Camel in Action","user","test");
    mockTest.assertIsSatisfied();
    mockOk.assertIsSatisfied();
  }
}
