public class FileConsumerIdempotentOnExceptionHandledTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/messages/input");
    super.setUp();
  }
  @Test public void testIdempotent() throws Exception {
    getMockEndpoint("mock:invalid").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/messages/input/","Hello World",Exchange.FILE_NAME,"hello.txt");
    oneExchangeDone.matchesMockWaitTime();
    assertMockEndpointsSatisfied();
    assertFileNotExists("target/messages/input/hello.txt");
    assertFileExists("target/messages/input/.camel/hello.txt");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:invalid");
        from("file:target/messages/input/?initialDelay=0&delay=10&idempotent=true").to("mock:input").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
