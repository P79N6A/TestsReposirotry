public class JacksonConversionsSimpleTest extends CamelTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getProperties().put(JacksonConstants.ENABLE_TYPE_CONVERTER,"true");
    return context;
  }
  @Test public void shouldNotConvertMapToString(){
    Exchange exchange=new DefaultExchange(context);
    Map<String,String> body=new HashMap<>();
    Object convertedObject=context.getTypeConverter().convertTo(String.class,exchange,body);
    assertEquals(body.toString(),convertedObject);
  }
  @Test public void shouldNotConvertMapToNumber(){
    Exchange exchange=new DefaultExchange(context);
    Object convertedObject=context.getTypeConverter().convertTo(Long.class,exchange,new HashMap<String,String>());
    assertNull(convertedObject);
  }
  @Test public void shouldNotConvertMapToPrimitive(){
    Exchange exchange=new DefaultExchange(context);
    Object convertedObject=context.getTypeConverter().convertTo(long.class,exchange,new HashMap<String,String>());
    assertNull(convertedObject);
  }
  @Test public void shouldNotConvertStringToEnum(){
    Exchange exchange=new DefaultExchange(context);
    Object convertedObject=context.getTypeConverter().convertTo(ExchangePattern.class,exchange,"InOnly");
    assertEquals(ExchangePattern.InOnly,convertedObject);
  }
}
