/** 
 * Basic testing to ensure that the StandardAWSS3ClientImpl class is returning a standard client that is capable of encryption given certain parameters. These clients have been in existence for a long time, but haven't been properly unit tested.
 */
public class StandardAWSS3ClientImplTest {
  private static final int MAX_CONNECTIONS=1;
  private EncryptionMaterials encryptionMaterials=mock(EncryptionMaterials.class);
  @Test public void standardAWSS3ClientImplNoEncryption(){
    S3ClientStandardImpl standardAWSS3Client=new S3ClientStandardImpl(getS3ConfigurationNoEncryption(),MAX_CONNECTIONS);
    AmazonS3 s3Client=standardAWSS3Client.getS3Client();
    Assert.assertNotNull(s3Client);
    Assert.assertFalse(s3Client instanceof AmazonS3EncryptionClient);
  }
  @Test public void standardAWSS3ClientImplUseEncryption(){
    S3ClientStandardImpl standardAWSS3Client=new S3ClientStandardImpl(getS3ConfigurationUseEncryption(),MAX_CONNECTIONS);
    AmazonS3 s3Client=standardAWSS3Client.getS3Client();
    Assert.assertNotNull(s3Client);
    Assert.assertTrue(s3Client instanceof AmazonS3EncryptionClient);
  }
  private S3Configuration getS3ConfigurationNoEncryption(){
    S3Configuration s3Configuration=mock(S3Configuration.class);
    when(s3Configuration.getRegion()).thenReturn("US_EAST_1");
    when(s3Configuration.isUseEncryption()).thenReturn(false);
    return s3Configuration;
  }
  private S3Configuration getS3ConfigurationUseEncryption(){
    S3Configuration s3Configuration=mock(S3Configuration.class);
    when(s3Configuration.getRegion()).thenReturn("US_EAST_1");
    when(s3Configuration.isUseEncryption()).thenReturn(true);
    return s3Configuration;
  }
}
