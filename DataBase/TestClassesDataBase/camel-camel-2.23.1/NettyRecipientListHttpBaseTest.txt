public class NettyRecipientListHttpBaseTest extends BaseNettyTest {
  @Test public void testRecipientListHttpBase() throws Exception {
    getMockEndpoint("mock:foo").expectedHeaderValuesReceivedInAnyOrder(Exchange.HTTP_PATH,"/bar","/baz","/bar/baz","/baz/bar");
    getMockEndpoint("mock:foo").expectedHeaderValuesReceivedInAnyOrder("num","1","2","3","4");
    template.sendBodyAndHeader("direct:start","A",Exchange.HTTP_PATH,"/foo/bar?num=1");
    template.sendBodyAndHeader("direct:start","B",Exchange.HTTP_PATH,"/foo/baz?num=2");
    template.sendBodyAndHeader("direct:start","C",Exchange.HTTP_PATH,"/foo/bar/baz?num=3");
    template.sendBodyAndHeader("direct:start","D",Exchange.HTTP_PATH,"/foo/baz/bar?num=4");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/foo?matchOnUriPrefix=true").to("mock:foo").transform(body().prepend("Bye "));
        from("direct:start").recipientList().constant("netty4-http:http://localhost:{{port}}");
      }
    }
;
  }
}
