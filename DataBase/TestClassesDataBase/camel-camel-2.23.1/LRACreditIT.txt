public class LRACreditIT extends AbstractLRATestSupport {
  private OrderManagerService orderManagerService;
  private CreditService creditService;
  @Test public void testCreditExhausted() throws Exception {
    buy(20,false,false);
    buy(70,false,false);
    buy(20,false,true);
    buy(5,false,false);
    await().until(() -> orderManagerService.getOrders().size(),equalTo(3));
    await().until(() -> creditService.getCredit(),equalTo(5));
  }
  @Test public void testTotalCompensation() throws Exception {
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0) {
        buy(10,false,false);
      }
 else {
        buy(10,true,true);
      }
    }
    await().until(() -> orderManagerService.getOrders().size(),equalTo(5));
    await().until(() -> creditService.getCredit(),equalTo(50));
  }
  private void buy(  int amount,  boolean failAtTheEnd,  boolean shouldFail){
    try {
      context.createFluentProducerTemplate().to("direct:saga").withHeader("amount",amount).withHeader("fail",failAtTheEnd).request();
      if (shouldFail) {
        fail("Exception not thrown");
      }
    }
 catch (    Exception ex) {
      if (!shouldFail) {
        fail("Unexpected exception");
      }
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        orderManagerService=new OrderManagerService();
        creditService=new CreditService(100);
        from("direct:saga").saga().propagation(SagaPropagation.REQUIRES_NEW).log("Creating a new order").to("direct:newOrder").log("Taking the credit").to("direct:reserveCredit").log("Finalizing").to("direct:finalize").log("Done!");
        from("direct:newOrder").saga().propagation(SagaPropagation.MANDATORY).compensation("direct:cancelOrder").transform().header(Exchange.SAGA_LONG_RUNNING_ACTION).bean(orderManagerService,"newOrder").log("Order ${body} created");
        from("direct:cancelOrder").transform().header(Exchange.SAGA_LONG_RUNNING_ACTION).bean(orderManagerService,"cancelOrder").log("Order ${body} cancelled");
        from("direct:reserveCredit").saga().propagation(SagaPropagation.MANDATORY).compensation("direct:refundCredit").transform().header(Exchange.SAGA_LONG_RUNNING_ACTION).bean(creditService,"reserveCredit").log("Credit ${header.amount} reserved in action ${body}");
        from("direct:refundCredit").transform().header(Exchange.SAGA_LONG_RUNNING_ACTION).bean(creditService,"refundCredit").log("Credit for action ${body} refunded");
        from("direct:finalize").saga().propagation(SagaPropagation.NOT_SUPPORTED).choice().when(header("fail").isEqualTo(true)).process(x -> {
          throw new RuntimeException("fail");
        }
).end();
      }
    }
;
  }
public static class OrderManagerService {
    private Set<String> orders=new HashSet<>();
    public synchronized void newOrder(    String id){
      orders.add(id);
    }
    public synchronized void cancelOrder(    String id){
      orders.remove(id);
    }
    public synchronized Set<String> getOrders(){
      return new TreeSet<>(orders);
    }
  }
public static class CreditService {
    private int totalCredit;
    private Map<String,Integer> reservations=new HashMap<>();
    public CreditService(    int totalCredit){
      this.totalCredit=totalCredit;
    }
    public synchronized void reserveCredit(    String id,    @Header("amount") int amount){
      int credit=getCredit();
      if (amount > credit) {
        throw new IllegalStateException("Insufficient credit");
      }
      reservations.put(id,amount);
    }
    public synchronized void refundCredit(    String id){
      reservations.remove(id);
    }
    public synchronized int getCredit(){
      return totalCredit - reservations.values().stream().reduce(0,(a,b) -> a + b);
    }
  }
}
