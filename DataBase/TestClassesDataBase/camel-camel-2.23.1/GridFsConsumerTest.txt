/** 
 */
public class GridFsConsumerTest extends AbstractMongoDbTest {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:create").to("mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket=" + getBucket());
        from("direct:create-a").to("mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket=" + getBucket() + "-a");
        from("direct:create-pts").to("mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket=" + getBucket() + "-pts");
        from("mongodb-gridfs:myDb?database={{mongodb.testDb}}&bucket=" + getBucket()).convertBodyTo(String.class).to("mock:test");
        from("mongodb-gridfs:myDb?database={{mongodb.testDb}}&bucket=" + getBucket() + "-a&queryStrategy=FileAttribute").convertBodyTo(String.class).to("mock:test");
        from("mongodb-gridfs:myDb?database={{mongodb.testDb}}&bucket=" + getBucket() + "-pts&queryStrategy=PersistentTimestamp").convertBodyTo(String.class).to("mock:test");
      }
    }
;
  }
  @Test public void testTimestamp() throws Exception {
    runTest("direct:create",gridfs);
  }
  @Test @SuppressWarnings("deprecation") public void testAttribute() throws Exception {
    runTest("direct:create-a",new GridFS(mongo.getDB("test"),getBucket() + "-a"));
  }
  @Test @SuppressWarnings("deprecation") public void testPersistentTS() throws Exception {
    runTest("direct:create-pts",new GridFS(mongo.getDB("test"),getBucket() + "-pts"));
  }
  public void runTest(  String target,  GridFS gridfs) throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:test");
    String data="This is some stuff to go into the db";
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived(data);
    Map<String,Object> headers=new HashMap<>();
    String fn="filename.for.db.txt";
    assertEquals(0,gridfs.find(fn).size());
    headers.put(Exchange.FILE_NAME,fn);
    template.requestBodyAndHeaders(target,data,headers);
    mock.assertIsSatisfied();
    mock.reset();
    mock.expectedMessageCount(3);
    mock.expectedBodiesReceived(data,data,data);
    headers.put(Exchange.FILE_NAME,fn + "_1");
    template.requestBodyAndHeaders(target,data,headers);
    headers.put(Exchange.FILE_NAME,fn + "_2");
    template.requestBodyAndHeaders(target,data,headers);
    headers.put(Exchange.FILE_NAME,fn + "_3");
    template.requestBodyAndHeaders(target,data,headers);
    mock.assertIsSatisfied();
    Thread.sleep(1000);
    mock.assertIsSatisfied();
  }
}
