public class EndpointCompletionTest extends ManagementTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(EndpointCompletionTest.class);
  @Test public void testEndpointCompletion() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    String componentName="file";
    Map<String,Object> properties=new HashMap<>();
    assertCompletion(mbeanServer,on,componentName,properties,"");
    assertCompletion(mbeanServer,on,componentName,properties,"po");
    assertCompletion(mbeanServer,on,componentName,properties,"/");
    assertCompletion(mbeanServer,on,componentName,properties,"/usr/local");
    assertCompletion(mbeanServer,on,componentName,properties,"/usr/local/");
    assertCompletion(mbeanServer,on,componentName,properties,"/usr/local/b");
  }
  @Test public void testEndpointConfigurationJson() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"");
    assertNotNull(on);
    mbeanServer.isRegistered(on);
    assertParameterJsonSchema(mbeanServer,on,"bean");
    assertParameterJsonSchema(mbeanServer,on,"timer");
  }
  @SuppressWarnings("unchecked") private List<String> assertCompletion(  MBeanServer mbeanServer,  ObjectName on,  String componentName,  Map<String,Object> properties,  String completionText) throws Exception {
    Object[] params={componentName,properties,completionText};
    String[] signature={"java.lang.String","java.util.Map","java.lang.String"};
    List<?> completions=assertIsInstanceOf(List.class,mbeanServer.invoke(on,"completeEndpointPath",params,signature));
    LOG.info("Component {} with '{}' Returned: {}",componentName,completionText,completions);
    return (List<String>)completions;
  }
  private String assertParameterJsonSchema(  MBeanServer mbeanServer,  ObjectName on,  String componentName) throws Exception {
    Object[] params={componentName};
    String[] signature={"java.lang.String"};
    String answer=assertIsInstanceOf(String.class,mbeanServer.invoke(on,"componentParameterJsonSchema",params,signature));
    LOG.info("Component {} returned JSON: {}",componentName,answer);
    ObjectMapper mapper=new ObjectMapper();
    HashMap data=mapper.readValue(answer,HashMap.class);
    LOG.info("Read JSON: " + data);
    return answer;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
      }
    }
;
  }
}
