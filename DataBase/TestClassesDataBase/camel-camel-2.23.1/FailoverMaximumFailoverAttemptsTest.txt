/** 
 * @version 
 */
public class FailoverMaximumFailoverAttemptsTest extends ContextTestSupport {
  @Test public void testFailoverMaximumFailoverAttempts() throws Exception {
    getMockEndpoint("mock:bad").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bad2").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bad3").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:good").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should throw exception");
    }
 catch (    Exception e) {
      assertEquals("Damn Again Again",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    resetMocks();
    getMockEndpoint("mock:bad").expectedMessageCount(0);
    getMockEndpoint("mock:bad2").expectedMessageCount(0);
    getMockEndpoint("mock:bad3").expectedMessageCount(0);
    getMockEndpoint("mock:good").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").loadBalance().failover(2,false,true).to("direct:bad","direct:bad2","direct:bad3","direct:good");
        from("direct:bad").to("log:bad").to("mock:bad").throwException(new IllegalArgumentException("Damn"));
        from("direct:bad2").to("log:bad2").to("mock:bad2").throwException(new IllegalArgumentException("Damn Again"));
        from("direct:bad3").to("log:bad3").to("mock:bad3").throwException(new IllegalArgumentException("Damn Again Again"));
        from("direct:good").to("log:good").to("mock:good");
      }
    }
;
  }
}
