public final class XmlFixture {
  private XmlFixture(){
  }
  public static Source toSource(  String aXmlString) throws Exception {
    return Input.fromString(aXmlString).build();
  }
  public static Source toSource(  File aFile) throws Exception {
    return Input.fromFile(aFile).build();
  }
  public static void assertXMLIgnorePrefix(  String aMessage,  Source aExpected,  Source aActual) throws Exception {
    Diff diff=DiffBuilder.compare(aExpected).withTest(aActual).ignoreComments().ignoreWhitespace().checkForSimilar().build();
    try {
      assertFalse(aMessage + ":\n" + diff.toString(),diff.hasDifferences());
    }
 catch (    Throwable t) {
      dump(aActual);
      throw t;
    }
  }
  public static void dump(  Source aActual) throws TransformerConfigurationException, TransformerException {
    TransformerFactory tf=TransformerFactory.newInstance();
    Transformer transformer=tf.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    transformer.transform(aActual,new StreamResult(System.out));
  }
  public static Source stripTimestamp(  Source aSource) throws Exception {
    String resourcePath="/stripTimestamp.xsl";
    return transform(aSource,resourcePath);
  }
  public static Source stripUUID(  Source aSource) throws Exception {
    String resourcePath="/stripUUID.xsl";
    return transform(aSource,resourcePath);
  }
  protected static Source transform(  Source aSource,  String aResourcePath) throws Exception {
    Source stylesheet=new StreamSource(XmlFixture.class.getResourceAsStream(aResourcePath));
    stylesheet.setSystemId(XmlFixture.class.getResource(aResourcePath).toExternalForm());
    return Input.byTransforming(aSource).withStylesheet(stylesheet).build();
  }
}
