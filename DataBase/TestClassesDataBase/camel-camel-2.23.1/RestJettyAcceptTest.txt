public class RestJettyAcceptTest extends BaseJettyTest {
  @Test public void testJettyProducerNoAccept() throws Exception {
    String out=fluentTemplate.withHeader(Exchange.HTTP_METHOD,"post").withBody("{ \"name\": \"Donald Duck\" }").to("http://localhost:" + getPort() + "/users/123/update").request(String.class);
    assertEquals("{ \"status\": \"ok\" }",out);
  }
  @Test public void testJettyProducerAcceptValid() throws Exception {
    String out=fluentTemplate.withHeader(Exchange.CONTENT_TYPE,"application/json").withHeader("Accept","application/json").withHeader(Exchange.HTTP_METHOD,"post").withBody("{ \"name\": \"Donald Duck\" }").to("http://localhost:" + getPort() + "/users/123/update").request(String.class);
    assertEquals("{ \"status\": \"ok\" }",out);
  }
  @Test public void testJettyProducerAcceptInvalid() throws Exception {
    try {
      fluentTemplate.withHeader(Exchange.CONTENT_TYPE,"application/json").withHeader("Accept","application/xml").withHeader(Exchange.HTTP_METHOD,"post").withBody("{ \"name\": \"Donald Duck\" }").to("http://localhost:" + getPort() + "/users/123/update").request(String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      HttpOperationFailedException cause=assertIsInstanceOf(HttpOperationFailedException.class,e.getCause());
      assertEquals(406,cause.getStatusCode());
      assertEquals("",cause.getResponseBody());
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("jetty").host("localhost").port(getPort()).clientRequestValidation(true);
        rest("/users/").post("{id}/update").consumes("application/json").produces("application/json").route().setBody(constant("{ \"status\": \"ok\" }"));
      }
    }
;
  }
}
