public class OnCompletionIssueTest extends ContextTestSupport {
  @Test public void testOnCompletionIssue() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedMessageCount(1);
    MockEndpoint complete=getMockEndpoint("mock:complete");
    complete.expectedBodiesReceivedInAnyOrder("finish","stop","ile","markRollback");
    MockEndpoint failed=getMockEndpoint("mock:failed");
    failed.expectedBodiesReceivedInAnyOrder("faulted","npe","rollback");
    template.sendBody("direct:input","finish");
    template.sendBody("direct:input","stop");
    template.sendBody("direct:input","fault");
    template.sendBody("direct:input","ile");
    template.sendBody("direct:input","markRollback");
    try {
      template.sendBody("direct:input","npe");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Darn NPE",e.getCause().getMessage());
    }
    try {
      template.sendBody("direct:input","rollback");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(RollbackExchangeException.class,e.getCause());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onCompletion().onFailureOnly().parallelProcessing().log("failing ${body}").to("mock:failed");
        onCompletion().onCompleteOnly().parallelProcessing().log("completing ${body}").to("mock:complete");
        from("direct:input").onException(IllegalArgumentException.class).handled(true).end().choice().when(simple("${body} == 'stop'")).log("stopping").stop().when(simple("${body} == 'fault'")).log("faulting").setFaultBody(constant("faulted")).when(simple("${body} == 'ile'")).log("excepting").throwException(new IllegalArgumentException("Exception requested")).when(simple("${body} == 'npe'")).log("excepting").throwException(new NullPointerException("Darn NPE")).when(simple("${body} == 'rollback'")).log("rollback").rollback().when(simple("${body} == 'markRollback'")).log("markRollback").markRollbackOnly().end().log("finishing").to("mock:end");
      }
    }
;
  }
}
