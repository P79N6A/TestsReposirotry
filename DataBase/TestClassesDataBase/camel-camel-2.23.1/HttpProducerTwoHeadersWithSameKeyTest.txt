/** 
 */
public class HttpProducerTwoHeadersWithSameKeyTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/myapp",new HttpRequestHandler(){
      @Override public void handle(      HttpRequest request,      HttpResponse response,      HttpContext context) throws HttpException, IOException {
        Header[] from=request.getHeaders("from");
        assertEquals("me",from[0].getValue());
        Header[] to=request.getHeaders("to");
        assertEquals("[foo, bar]",to[0].getValue());
        response.setHeader("bar","yes");
        response.addHeader("foo","123");
        response.addHeader("foo","456");
        response.setEntity(new StringEntity("OK","ASCII"));
        response.setStatusCode(HttpStatus.SC_OK);
      }
    }
).registerHandler("/myapp",new HttpRequestHandler(){
      @Override public void handle(      HttpRequest request,      HttpResponse response,      HttpContext context) throws HttpException, IOException {
        Header[] from=request.getHeaders("from");
        assertEquals("me",from[0].getValue());
        Header[] to=request.getHeaders("to");
        assertEquals("[foo, bar]",to[0].getValue());
        response.setHeader("bar","yes");
        response.addHeader("foo","123");
        response.addHeader("foo","456");
        response.setEntity(new StringEntity("OK","ASCII"));
        response.setStatusCode(HttpStatus.SC_OK);
      }
    }
).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void testTwoHeadersWithSameKeyHeader() throws Exception {
    Exchange out=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/myapp",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(null);
        exchange.getIn().setHeader("from","me");
        List<String> list=new ArrayList<>();
        list.add("foo");
        list.add("bar");
        exchange.getIn().setHeader("to",list);
      }
    }
);
    assertNotNull(out);
    assertFalse("Should not fail",out.isFailed());
    assertEquals("OK",out.getOut().getBody(String.class));
    assertEquals("yes",out.getOut().getHeader("bar"));
    List<?> foo=out.getOut().getHeader("foo",List.class);
    assertNotNull(foo);
    assertEquals(2,foo.size());
    assertEquals("123",foo.get(0));
    assertEquals("456",foo.get(1));
  }
}
