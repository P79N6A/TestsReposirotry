@Deprecated public class SearchByExchangeDirectTest extends CamelTwitterTestSupport {
  @Produce(uri="direct:start") protected ProducerTemplate template;
  @Produce(uri="direct:header") protected ProducerTemplate templateHeader;
  @Produce(uri="direct:double") protected ProducerTemplate templateDouble;
  @Test public void testSearchTimelineWithStaticQuery() throws Exception {
    template.sendBody(null);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.assertIsSatisfied();
    List<Exchange> tweets=mock.getExchanges();
    for (    Exchange e : tweets) {
      log.info("Tweet: " + e.getIn().getBody(String.class));
    }
  }
  @Test public void testSearchTimelineWithDynamicQuery() throws Exception {
    templateHeader.sendBodyAndHeader(null,TwitterConstants.TWITTER_KEYWORDS,"java");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.assertIsSatisfied();
    List<Exchange> tweets=mock.getExchanges();
    for (    Exchange e : tweets) {
      log.info("Tweet: " + e.getIn().getBody(String.class));
    }
  }
  @Test public void testSearchTimelineWithDynamicQuerySinceId() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put(TwitterConstants.TWITTER_KEYWORDS,"java");
    headers.put(TwitterConstants.TWITTER_SINCEID,new Long(258347905419730944L));
    templateHeader.sendBodyAndHeaders(null,headers);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.assertIsSatisfied();
    List<Exchange> tweets=mock.getExchanges();
    for (    Exchange e : tweets) {
      log.info("Tweet: " + e.getIn().getBody(String.class));
    }
  }
  @Test public void testSearchTimelineWithDynamicQuerySinceIdAndMaxId() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put(TwitterConstants.TWITTER_KEYWORDS,"java");
    headers.put(TwitterConstants.TWITTER_SINCEID,new Long(258347905419730944L));
    headers.put(TwitterConstants.TWITTER_MAXID,new Long(258348815243960320L));
    templateHeader.sendBodyAndHeaders(null,headers);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(0);
  }
  @Test public void testDoubleSearchKeepingOld() throws Exception {
    templateDouble.sendBodyAndHeader(null,TwitterConstants.TWITTER_KEYWORDS,"java");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.assertIsSatisfied();
    List<Exchange> tweets=mock.getExchanges();
    for (    Exchange e : tweets) {
      log.info("Tweet: " + e.getIn().getBody(String.class));
    }
    int total=mock.getReceivedCounter();
    templateDouble.sendBodyAndHeader(null,TwitterConstants.TWITTER_KEYWORDS,"java");
    assertTrue(mock.getReceivedCounter() >= total);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").toF("twitter://search?%s&keywords=java",getUriTokens()).split().body().to("mock:result");
        from("direct:header").toF("twitter://search?%s",getUriTokens()).split().body().to("mock:result");
        from("direct:double").toF("twitter://search?filterOld=false&%s",getUriTokens()).split().body().to("mock:result");
      }
    }
;
  }
}
