/** 
 * @version 
 */
public class SedaDiscardIfNoConsumerTest extends ContextTestSupport {
  @Test public void testDiscard() throws Exception {
    SedaEndpoint bar=getMandatoryEndpoint("seda:bar",SedaEndpoint.class);
    assertEquals(0,bar.getCurrentQueueSize());
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(0,bar.getCurrentQueueSize());
  }
  @Test public void testDiscardUoW() throws Exception {
    SedaEndpoint bar=getMandatoryEndpoint("seda:bar",SedaEndpoint.class);
    assertEquals(0,bar.getCurrentQueueSize());
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    final MyCompletion myCompletion=new MyCompletion();
    template.send("direct:start",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
        exchange.addOnCompletion(myCompletion);
      }
    }
);
    assertMockEndpointsSatisfied();
    assertEquals(0,bar.getCurrentQueueSize());
    assertEquals(true,myCompletion.isCalled());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("seda:bar?discardIfNoConsumers=true").to("mock:result");
      }
    }
;
  }
private static final class MyCompletion extends SynchronizationAdapter {
    private boolean called;
    @Override public void onDone(    Exchange exchange){
      called=true;
    }
    public boolean isCalled(){
      return called;
    }
  }
}
