public class SftpSimpleProduceThroughProxyTest extends SftpServerTestSupport {
  private final int proxyPort=AvailablePortFinder.getNextAvailable(25000);
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testSftpSimpleProduceThroughProxy() throws Exception {
    if (!canTest()) {
      return;
    }
    HttpProxyServer proxyServer=new DefaultHttpProxyServer(proxyPort);
    proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler(){
      @Override public boolean authenticate(      String userName,      String password){
        return "user".equals(userName) && "password".equals(password);
      }
    }
);
    proxyServer.start();
    template.sendBodyAndHeader("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "?username=admin&password=admin&proxy=#proxy","Hello World",Exchange.FILE_NAME,"hello.txt");
    File file=new File(FTP_ROOT_DIR + "/hello.txt");
    assertTrue("File should exist: " + file,file.exists());
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,file));
    proxyServer.stop();
  }
  @Test public void testSftpSimpleSubPathProduceThroughProxy() throws Exception {
    if (!canTest()) {
      return;
    }
    HttpProxyServer proxyServer=new DefaultHttpProxyServer(proxyPort);
    proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler(){
      @Override public boolean authenticate(      String userName,      String password){
        return "user".equals(userName) && "password".equals(password);
      }
    }
);
    proxyServer.start();
    template.sendBodyAndHeader("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "/mysub?username=admin&password=admin&proxy=#proxy","Bye World",Exchange.FILE_NAME,"bye.txt");
    File file=new File(FTP_ROOT_DIR + "/mysub/bye.txt");
    assertTrue("File should exist: " + file,file.exists());
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,file));
    proxyServer.stop();
  }
  @Test public void testSftpSimpleTwoSubPathProduceThroughProxy() throws Exception {
    if (!canTest()) {
      return;
    }
    HttpProxyServer proxyServer=new DefaultHttpProxyServer(proxyPort);
    proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler(){
      @Override public boolean authenticate(      String userName,      String password){
        return "user".equals(userName) && "password".equals(password);
      }
    }
);
    proxyServer.start();
    template.sendBodyAndHeader("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "/mysub/myother?username=admin&password=admin&proxy=#proxy","Farewell World",Exchange.FILE_NAME,"farewell.txt");
    File file=new File(FTP_ROOT_DIR + "/mysub/myother/farewell.txt");
    assertTrue("File should exist: " + file,file.exists());
    assertEquals("Farewell World",context.getTypeConverter().convertTo(String.class,file));
    proxyServer.stop();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    final ProxyHTTP proxyHTTP=new ProxyHTTP("localhost",proxyPort);
    proxyHTTP.setUserPasswd("user","password");
    jndi.bind("proxy",proxyHTTP);
    return jndi;
  }
}
