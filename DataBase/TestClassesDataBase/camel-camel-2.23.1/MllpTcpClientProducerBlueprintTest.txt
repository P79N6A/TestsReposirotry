public class MllpTcpClientProducerBlueprintTest extends CamelBlueprintTestSupport {
  static final String SOURCE_URI="direct-vm://source";
  static final String MOCK_ACKNOWLEDGED_URI="mock://acknowledged";
  static final String MOCK_TIMEOUT_URI="mock://timeoutError-ex";
  static final String MOCK_AE_EX_URI="mock://ae-ack";
  static final String MOCK_AR_EX_URI="mock://ar-ack";
  static final String MOCK_FRAME_EX_URI="mock://frameError-ex";
  @Rule public MllpServerResource mllpServer=new MllpServerResource("0.0.0.0",AvailablePortFinder.getNextAvailable());
  @EndpointInject(uri=MOCK_ACKNOWLEDGED_URI) MockEndpoint acknowledged;
  @EndpointInject(uri=MOCK_TIMEOUT_URI) MockEndpoint timeout;
  @EndpointInject(uri=MOCK_AE_EX_URI) MockEndpoint ae;
  @EndpointInject(uri=MOCK_AR_EX_URI) MockEndpoint ar;
  @EndpointInject(uri=MOCK_FRAME_EX_URI) MockEndpoint frame;
  @Override protected void addServicesOnStartup(  Map<String,KeyValueHolder<Object,Dictionary>> services){
    ComponentResolver testResolver=new DefaultComponentResolver();
    services.put(ComponentResolver.class.getName(),asService(testResolver,"component","mllp"));
  }
  @Override protected String setConfigAdminInitialConfiguration(  Properties props){
    props.setProperty("sourceUri",SOURCE_URI);
    props.setProperty("acknowledgedUri",MOCK_ACKNOWLEDGED_URI);
    props.setProperty("timeoutUri",MOCK_TIMEOUT_URI);
    props.setProperty("errorAcknowledgementUri",MOCK_AE_EX_URI);
    props.setProperty("rejectAcknowledgementUri",MOCK_AR_EX_URI);
    props.setProperty("mllp.port",Integer.toString(mllpServer.getListenPort()));
    return "MllpTcpClientProducer";
  }
  @Override protected String getBlueprintDescriptor(){
    return "OSGI-INF/blueprint/mllp-tcp-client-producer-test.xml";
  }
  @Test() public void testSendMultipleMessages() throws Exception {
    int messageCount=500;
    acknowledged.expectedMessageCount(messageCount);
    timeout.expectedMessageCount(0);
    frame.expectedMessageCount(0);
    ae.expectedMessageCount(0);
    ar.expectedMessageCount(0);
    startCamelContext();
    for (int i=0; i < messageCount; ++i) {
      log.debug("Triggering message {}",i);
      Object response=template.requestBodyAndHeader(SOURCE_URI,Hl7TestMessageGenerator.generateMessage(i),"CamelMllpMessageControlId",String.format("%05d",i));
      log.debug("response {}\n{}",i,response);
    }
    assertMockEndpointsSatisfied(15,TimeUnit.SECONDS);
  }
}
