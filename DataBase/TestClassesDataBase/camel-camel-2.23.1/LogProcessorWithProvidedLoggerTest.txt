/** 
 * @version
 */
public class LogProcessorWithProvidedLoggerTest extends ContextTestSupport {
  private static StringWriter sw;
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    sw=new StringWriter();
    ConsumingAppender.newAppender("org.apache.camel.customlogger","customlogger",Level.TRACE,event -> sw.append(event.getLoggerName() + " " + event.getLevel().toString()+ " "+ event.getMessage().getFormattedMessage()));
  }
  @Test public void testLogProcessorWithRegistryLogger() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    template.sendBody("direct:foo","Bye World");
    assertMockEndpointsSatisfied();
    assertThat(sw.toString(),equalTo("org.apache.camel.customlogger INFO Got Bye World"));
  }
  @Test public void testLogProcessorWithProvidedLogger() throws Exception {
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    template.sendBody("direct:bar","Bye World");
    assertMockEndpointsSatisfied();
    assertThat(sw.toString(),equalTo("org.apache.camel.customlogger INFO Also got Bye World"));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    SimpleRegistry registry=new SimpleRegistry();
    registry.put("mylogger1",LoggerFactory.getLogger("org.apache.camel.customlogger"));
    CamelContext context=new DefaultCamelContext(registry);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").log(LoggingLevel.INFO,"Got ${body}").to("mock:foo");
        from("direct:bar").routeId("bar").log(LoggingLevel.INFO,LoggerFactory.getLogger("org.apache.camel.customlogger"),"Also got ${body}").to("mock:bar");
      }
    }
;
  }
}
