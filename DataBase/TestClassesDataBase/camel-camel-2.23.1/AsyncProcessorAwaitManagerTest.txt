/** 
 * @version 
 */
public class AsyncProcessorAwaitManagerTest extends ContextTestSupport {
  @Test public void testAsyncAwait() throws Exception {
    context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
    assertEquals(0,context.getAsyncProcessorAwaitManager().size());
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertEquals(0,context.getAsyncProcessorAwaitManager().size());
    assertEquals(1,context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
    assertEquals(0,context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").routeId("myRoute").to("mock:before").to("async:bye:camel").id("myAsync").to("mock:after").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            int size=context.getAsyncProcessorAwaitManager().size();
            log.info("async inflight: {}",size);
            assertEquals(1,size);
            Collection<AsyncProcessorAwaitManager.AwaitThread> threads=context.getAsyncProcessorAwaitManager().browse();
            AsyncProcessorAwaitManager.AwaitThread thread=threads.iterator().next();
            long wait=thread.getWaitDuration();
            log.info("Thread {} has waited for {} msec.",thread.getBlockedThread().getName(),wait);
            assertEquals("myRoute",thread.getRouteId());
            assertEquals("process1",thread.getNodeId());
          }
        }
).to("mock:result");
      }
    }
;
  }
}
