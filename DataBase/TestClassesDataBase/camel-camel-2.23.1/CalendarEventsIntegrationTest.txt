/** 
 * Test class for  {@link com.google.api.services.calendar.Calendar$Events} APIs.
 */
public class CalendarEventsIntegrationTest extends AbstractGoogleCalendarTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(CalendarEventsIntegrationTest.class);
  private static final String PATH_PREFIX=GoogleCalendarApiCollection.getCollection().getApiName(CalendarEventsApiMethod.class).getName();
  @Test public void testInsert() throws Exception {
    Event event=new Event();
    event.setSummary("Feed the Camel");
    event.setLocation("Somewhere");
    ArrayList<EventAttendee> attendees=new ArrayList<>();
    attendees.add(new EventAttendee().setEmail("camel-google-calendar.janstey@gmail.com"));
    event.setAttendees(attendees);
    Date startDate=new Date();
    Date endDate=new Date(startDate.getTime() + 3600000);
    DateTime start=new DateTime(startDate,TimeZone.getTimeZone("UTC"));
    event.setStart(new EventDateTime().setDateTime(start));
    DateTime end=new DateTime(endDate,TimeZone.getTimeZone("UTC"));
    event.setEnd(new EventDateTime().setDateTime(end));
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleCalendar.calendarId",getCalendar().getId());
    headers.put("CamelGoogleCalendar.content",event);
    final com.google.api.services.calendar.model.Event result=requestBodyAndHeaders("direct://INSERT",null,headers);
    assertEquals("Feed the Camel",result.getSummary());
    LOG.debug("insert: " + result);
  }
  @Test public void testManipulatingAnEvent() throws Exception {
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleCalendar.calendarId",getCalendar().getId());
    headers.put("CamelGoogleCalendar.text","Feed the Camel");
    com.google.api.services.calendar.model.Event result=requestBodyAndHeaders("direct://QUICKADD",null,headers);
    assertNotNull("quickAdd result",result);
    com.google.api.services.calendar.model.Events events=requestBody("direct://LIST",getCalendar().getId());
    Event item=events.getItems().get(0);
    String eventId=item.getId();
    assertEquals("Feed the Camel",item.getSummary());
    headers=new HashMap<>();
    headers.put("CamelGoogleCalendar.calendarId",getCalendar().getId());
    headers.put("CamelGoogleCalendar.eventId",eventId);
    result=requestBodyAndHeaders("direct://GET",null,headers);
    assertEquals("Feed the Camel",result.getSummary());
    result.setSummary("Feed the Camel later");
    headers.put("CamelGoogleCalendar.content",result);
    Event newResult=requestBodyAndHeaders("direct://UPDATE",null,headers);
    assertEquals("Feed the Camel later",newResult.getSummary());
    headers=new HashMap<>();
    headers.put("CamelGoogleCalendar.calendarId",getCalendar().getId());
    headers.put("CamelGoogleCalendar.eventId",eventId);
    result=requestBodyAndHeaders("direct://DELETE",null,headers);
    events=requestBody("direct://LIST",getCalendar().getId());
    assertEquals(0,events.getItems().size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct://CALENDARIMPORT").to("google-calendar://" + PATH_PREFIX + "/calendarImport");
        from("direct://DELETE").to("google-calendar://" + PATH_PREFIX + "/delete");
        from("direct://GET").to("google-calendar://" + PATH_PREFIX + "/get");
        from("direct://INSERT").to("google-calendar://" + PATH_PREFIX + "/insert");
        from("direct://INSTANCES").to("google-calendar://" + PATH_PREFIX + "/instances");
        from("direct://LIST").to("google-calendar://" + PATH_PREFIX + "/list?inBody=calendarId");
        from("direct://MOVE").to("google-calendar://" + PATH_PREFIX + "/move");
        from("direct://PATCH").to("google-calendar://" + PATH_PREFIX + "/patch");
        from("direct://QUICKADD").to("google-calendar://" + PATH_PREFIX + "/quickAdd");
        from("direct://UPDATE").to("google-calendar://" + PATH_PREFIX + "/update");
        from("direct://WATCH").to("google-calendar://" + PATH_PREFIX + "/watch");
      }
    }
;
  }
}
