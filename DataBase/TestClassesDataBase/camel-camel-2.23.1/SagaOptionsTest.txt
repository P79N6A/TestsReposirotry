public class SagaOptionsTest extends ContextTestSupport {
  @Test public void testHeaderForwardedToComplete() throws Exception {
    MockEndpoint complete=getMockEndpoint("mock:complete");
    complete.expectedMessageCount(1);
    complete.expectedHeaderReceived("id","myheader");
    complete.expectedHeaderReceived("name","Nicola");
    complete.expectedMessagesMatches(ex -> ex.getIn().getHeader(Exchange.SAGA_LONG_RUNNING_ACTION) != null);
    template.sendBodyAndHeader("direct:workflow","Hello","myname","Nicola");
    complete.assertIsSatisfied();
  }
  @Test public void testHeaderForwardedToCompensate() throws Exception {
    MockEndpoint compensate=getMockEndpoint("mock:compensate");
    compensate.expectedMessageCount(1);
    compensate.expectedHeaderReceived("id","myheader");
    compensate.expectedHeaderReceived("name","Nicola");
    compensate.expectedMessagesMatches(ex -> ex.getIn().getHeader(Exchange.SAGA_LONG_RUNNING_ACTION) != null);
    try {
      template.sendBodyAndHeader("direct:workflow","compensate","myname","Nicola");
      fail("Should throw an exception");
    }
 catch (    Exception ex) {
    }
    compensate.assertIsSatisfied();
  }
  @Test public void testRouteDoesNotHangOnOptionError() throws Exception {
    try {
      template.sendBody("direct:wrong-expression","Hello");
      fail("Should throw an exception");
    }
 catch (    RuntimeCamelException ex) {
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addService(new InMemorySagaService());
        from("direct:workflow").saga().option("id",constant("myheader")).option("name",header("myname")).completion("mock:complete").compensation("mock:compensate").choice().when(body().isEqualTo("compensate")).process(ex -> {
          throw new RuntimeException("forced compensate");
        }
).end().setHeader("myname",constant("TryToOverride")).setHeader("name",constant("TryToOverride")).to("mock:endpoint");
        from("direct:wrong-expression").saga().option("id",simple("${10 / 0}")).to("log:info");
      }
    }
;
  }
}
