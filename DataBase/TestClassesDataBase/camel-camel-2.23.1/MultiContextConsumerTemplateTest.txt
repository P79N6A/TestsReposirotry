@RunWith(Arquillian.class) public class MultiContextConsumerTemplateTest {
  @Inject private CamelContext defaultCamelContext;
  @Inject private ConsumerTemplate defaultConsumer;
  @Inject private ProducerTemplate defaultProducer;
  @Inject @ContextName("first") private CamelContext firstCamelContext;
  @Inject @ContextName("first") private ConsumerTemplate firstConsumer;
  @Inject @ContextName("first") private ProducerTemplate firstProducer;
  @Inject @ContextName("second") private CamelContext secondCamelContext;
  @Inject @ContextName("second") private ConsumerTemplate secondConsumer;
  @Inject @ContextName("second") private ProducerTemplate secondProducer;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class,FirstCamelContextBean.class,SecondCamelContextBean.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void configureCamelContexts() throws Exception {
    secondCamelContext.startAllRoutes();
  }
  @Test @InSequence(2) public void receiveBodyFromDefaultCamelContext(){
    defaultProducer.sendBody("seda:foo","foo");
    String body=defaultConsumer.receiveBody("seda:foo",TimeUnit.SECONDS.toMillis(1L),String.class);
    assertThat("Body is incorrect!",body,is(equalTo("foo")));
  }
  @Test @InSequence(3) public void receiveBodyFromFirstCamelContext(){
    firstProducer.sendBody("seda:bar","bar");
    String body=firstConsumer.receiveBody("seda:bar",TimeUnit.SECONDS.toMillis(1L),String.class);
    assertThat("Body is incorrect!",body,is(equalTo("bar")));
  }
  @Test @InSequence(4) public void receiveBodyFromSecondCamelContext(){
    secondProducer.sendBody("seda:baz","baz");
    String body=secondConsumer.receiveBody("seda:baz",TimeUnit.SECONDS.toMillis(1L),String.class);
    assertThat("Body is incorrect!",body,is(equalTo("baz")));
  }
}
