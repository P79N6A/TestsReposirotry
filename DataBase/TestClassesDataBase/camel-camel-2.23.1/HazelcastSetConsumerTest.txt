public class HazelcastSetConsumerTest extends HazelcastCamelTestSupport {
  @Mock private ISet<String> set;
  @Captor private ArgumentCaptor<ItemListener<String>> argument;
  @Override protected void trainHazelcastInstance(  HazelcastInstance hazelcastInstance){
    when(hazelcastInstance.<String>getSet("foo")).thenReturn(set);
    when(set.addItemListener(any(),eq(true))).thenReturn("foo");
  }
  @Override @SuppressWarnings("unchecked") protected void verifyHazelcastInstance(  HazelcastInstance hazelcastInstance){
    verify(hazelcastInstance).getSet("foo");
    verify(set).addItemListener(any(ItemListener.class),eq(true));
  }
  @Test public void add() throws InterruptedException {
    MockEndpoint out=getMockEndpoint("mock:added");
    out.expectedMessageCount(1);
    verify(set).addItemListener(argument.capture(),eq(true));
    final ItemEvent<String> event=new ItemEvent<>("mm",ItemEventType.ADDED,"foo",null);
    argument.getValue().itemAdded(event);
    assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS);
    this.checkHeaders(out.getExchanges().get(0).getIn().getHeaders(),HazelcastConstants.ADDED);
  }
  @Test public void remove() throws InterruptedException {
    MockEndpoint out=getMockEndpoint("mock:removed");
    out.expectedMessageCount(1);
    verify(set).addItemListener(argument.capture(),eq(true));
    final ItemEvent<String> event=new ItemEvent<>("mm",ItemEventType.REMOVED,"foo",null);
    argument.getValue().itemRemoved(event);
    assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS);
    this.checkHeaders(out.getExchanges().get(0).getIn().getHeaders(),HazelcastConstants.REMOVED);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(String.format("hazelcast-%sfoo",HazelcastConstants.SET_PREFIX)).log("object...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.ADDED)).log("...added").to("mock:added").when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.REMOVED)).log("...removed").to("mock:removed").otherwise().log("fail!");
      }
    }
;
  }
  private void checkHeaders(  Map<String,Object> headers,  String action){
    assertEquals(action,headers.get(HazelcastConstants.LISTENER_ACTION));
    assertEquals(HazelcastConstants.CACHE_LISTENER,headers.get(HazelcastConstants.LISTENER_TYPE));
    assertEquals(null,headers.get(HazelcastConstants.OBJECT_ID));
    assertNotNull(headers.get(HazelcastConstants.LISTENER_TIME));
  }
}
