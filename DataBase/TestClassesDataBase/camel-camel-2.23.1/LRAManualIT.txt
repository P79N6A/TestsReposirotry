public class LRAManualIT extends AbstractLRATestSupport {
  @Test public void testCompletion() throws InterruptedException {
    MockEndpoint completeEndpoint=getMockEndpoint("mock:complete");
    completeEndpoint.expectedMessageCount(1);
    completeEndpoint.expectedHeaderReceived("id","1");
    sendBody("direct:saga","hello",Collections.singletonMap("myid","1"));
    completeEndpoint.assertIsSatisfied();
  }
  @Test public void testFailure() throws InterruptedException {
    MockEndpoint compensateEndpoint=getMockEndpoint("mock:compensate");
    compensateEndpoint.expectedMessageCount(1);
    sendBody("direct:saga","fail");
    compensateEndpoint.assertIsSatisfied();
  }
  @Test @Ignore("https://issues.jboss.org/browse/JBTM-2979") public void testTimeout() throws InterruptedException {
    MockEndpoint compensateEndpoint=getMockEndpoint("mock:compensate");
    compensateEndpoint.expectedMessageCount(1);
    sendBody("direct:saga","timeout");
    compensateEndpoint.assertIsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:saga").saga().completionMode(SagaCompletionMode.MANUAL).timeout(1,TimeUnit.SECONDS).option("id",header("myid")).completion("direct:complete").compensation("direct:compensate").to("mock:endpoint").choice().when(body().isEqualTo("fail")).to("saga:compensate").when(body().isNotEqualTo("timeout")).to("saga:complete").end();
        from("direct:complete").log("YES!").to("mock:complete");
        from("direct:compensate").log("NO :(").to("mock:compensate");
      }
    }
;
  }
}
