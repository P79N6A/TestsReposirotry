/** 
 * Tests a conversation having multiple updates.
 */
public class TelegramConsumerMultipleTest extends TelegramTestSupport {
  @EndpointInject(uri="mock:telegram") private MockEndpoint endpoint;
  @Before public void mockAPIs(){
    TelegramService api=mockTelegramService();
    UpdateResult res1=getJSONResource("messages/updates-single.json",UpdateResult.class);
    res1.getUpdates().get(0).getMessage().setText("message1");
    UpdateResult res2=getJSONResource("messages/updates-multiple.json",UpdateResult.class);
    res2.getUpdates().get(0).getMessage().setText("message2");
    res2.getUpdates().get(1).getMessage().setText("message3");
    UpdateResult defaultRes=getJSONResource("messages/updates-empty.json",UpdateResult.class);
    when(api.getUpdates(any(),any(),any(),any())).thenReturn(res1).thenReturn(res2).thenAnswer((i) -> defaultRes);
  }
  @Test public void testReceptionOfThreeMessagesFromTwoUpdates() throws Exception {
    endpoint.expectedMinimumMessageCount(3);
    endpoint.expectedBodiesReceived("message1","message2","message3");
    endpoint.assertIsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("telegram:bots/mock-token").convertBodyTo(String.class).to("mock:telegram");
      }
    }
;
  }
}
