public class AtomixMultiMapProducerTest extends AtomixClientTestSupport {
  private static final String MAP_NAME=UUID.randomUUID().toString();
  private DistributedMultiMap<Object,Object> map;
  @EndpointInject(uri="direct:start") private FluentProducerTemplate fluent;
  @Override protected Map<String,Component> createComponents(){
    AtomixMultiMapComponent component=new AtomixMultiMapComponent();
    component.setNodes(Collections.singletonList(getReplicaAddress()));
    return Collections.singletonMap("atomix-multimap",component);
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    map=getClient().getMultiMap(MAP_NAME).join();
  }
  @Override @After public void tearDown() throws Exception {
    map.close();
    super.tearDown();
  }
  @Test public void testPut() throws Exception {
    final String key=context().getUuidGenerator().generateUuid();
    final String val1=context().getUuidGenerator().generateUuid();
    final String val2=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withBody(val1).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Boolean.class));
    assertEquals(Arrays.asList(val1),map.get(key).join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withBody(val2).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Boolean.class));
    assertEquals(Arrays.asList(val1,val2),map.get(key).join());
  }
  @Test public void testGet() throws Exception {
    final String key=context().getUuidGenerator().generateUuid();
    final String val=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.GET).withHeader(AtomixClientConstants.RESOURCE_KEY,key).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Collection.class).isEmpty());
    assertFalse(map.containsKey(key).join());
    map.put(key,val).join();
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.GET).withHeader(AtomixClientConstants.RESOURCE_KEY,key).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(Arrays.asList(val),result.getBody(Collection.class));
    assertTrue(map.containsKey(key).join());
  }
  @Test public void testSizeClearIsEmpty() throws Exception {
    final String key1=context().getUuidGenerator().generateUuid();
    final String key2=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.SIZE).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(0,result.getBody(Integer.class).intValue());
    assertEquals(map.size().join(),result.getBody(Integer.class));
    map.put(key1,context().getUuidGenerator().generateUuid()).join();
    map.put(key1,context().getUuidGenerator().generateUuid()).join();
    map.put(key2,context().getUuidGenerator().generateUuid()).join();
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.SIZE).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(map.size().join(),result.getBody(Integer.class));
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.SIZE).withHeader(AtomixClientConstants.RESOURCE_KEY,key1).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(map.size(key1).join(),result.getBody(Integer.class));
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.IS_EMPTY).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(result.getBody(Boolean.class));
    assertFalse(map.isEmpty().join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.CLEAR).request(Message.class);
    assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(0,map.size().join().intValue());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.IS_EMPTY).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Boolean.class));
    assertTrue(map.isEmpty().join());
  }
  @Test public void testContainsKey() throws Exception {
    final String key=context().getUuidGenerator().generateUuid();
    final String val=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.CONTAINS_KEY).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withBody(val).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(result.getBody(Boolean.class));
    assertFalse(map.containsKey(key).join());
    map.put(key,val).join();
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.CONTAINS_KEY).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withBody(val).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Boolean.class));
    assertTrue(map.containsKey(key).join());
  }
  @Test public void testRemove() throws Exception {
    final String key=context().getUuidGenerator().generateUuid();
    final String val1=context().getUuidGenerator().generateUuid();
    final String val2=context().getUuidGenerator().generateUuid();
    final String val3=context().getUuidGenerator().generateUuid();
    map.put(key,val1).join();
    map.put(key,val2).join();
    map.put(key,val3).join();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withHeader(AtomixClientConstants.RESOURCE_VALUE,val1).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(Arrays.asList(val2,val3),map.get(key).join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.REMOVE_VALUE).withHeader(AtomixClientConstants.RESOURCE_VALUE,val2).request(Message.class);
    assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(Arrays.asList(val3),map.get(key).join());
    assertTrue(map.containsKey(key).join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_KEY,key).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(map.containsKey(key).join());
  }
  @Ignore @Test public void test(){
    Assert.assertFalse(map.containsEntry("abc","abc").join());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").toF("atomix-multimap:%s",MAP_NAME);
      }
    }
;
  }
}
