public class BeanOverloadedCovariantMethodTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testHelloCovariantOverload() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MySuperBean.class,"hello").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello Claus from super class");
    template.sendBody("direct:start","Claus");
    assertMockEndpointsSatisfied();
  }
  @Test public void testHelloCovariantOverloadNoNameOrParameters() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MySuperBean.class).to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello null from super class");
    template.sendBody("direct:start",null);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHelloCovariantOverloadNoParameters() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MySuperBean.class,"hello").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello null from super class");
    template.sendBody("direct:start",null);
    assertMockEndpointsSatisfied();
  }
  @Test public void testHelloCovariantOverloadFromParameters() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MySuperBean.class,"hello(String)").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello null from super class");
    template.sendBody("direct:start",null);
    assertMockEndpointsSatisfied();
  }
public static class MyBean {
    public Object hello(    String name){
      return "Hello " + name + " from base class";
    }
  }
public static class MySuperBean extends MyBean {
    public String hello(    String name){
      return "Hello " + name + " from super class";
    }
  }
}
