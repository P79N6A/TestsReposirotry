/** 
 * @version 
 */
public class MulticastStopOnExceptionTest extends ContextTestSupport {
  @Test public void testMulticastStopOnExceptionOk() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:baz").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello");
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMulticastStopOnExceptionStop() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:bar").expectedMessageCount(0);
    getMockEndpoint("mock:baz").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Kaboom");
      fail("Should thrown an exception");
    }
 catch (    CamelExecutionException e) {
      CamelExchangeException cause=assertIsInstanceOf(CamelExchangeException.class,e.getCause());
      assertTrue(cause.getMessage().startsWith("Sequential processing failed for number 1."));
      assertEquals("Forced",cause.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast().stopOnException().to("direct:foo","direct:bar","direct:baz").end().to("mock:result");
        from("direct:foo").to("mock:foo");
        from("direct:bar").process(new MyProcessor()).to("mock:bar");
        from("direct:baz").to("mock:baz");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Kaboom".equals(body)) {
        throw new IllegalArgumentException("Forced");
      }
    }
  }
}
