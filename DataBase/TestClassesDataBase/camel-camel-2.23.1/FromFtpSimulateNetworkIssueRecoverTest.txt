/** 
 * Simulate network issues by using a custom poll strategy to force exceptions occurring during poll.
 * @version 
 */
public class FromFtpSimulateNetworkIssueRecoverTest extends FtpServerTestSupport {
  private static int counter;
  private static int rollback;
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/recover?password=admin&pollStrategy=#myPoll";
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myPoll",new MyPollStrategy());
    return jndi;
  }
  @Test public void testFtpRecover() throws Exception {
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedMinimumMessageCount(3);
    template.sendBody(getFtpUrl(),"Hello World");
    resultEndpoint.assertIsSatisfied();
    Thread.sleep(2000);
    assertTrue("Should have tried at least 3 times was " + counter,counter >= 3);
    assertEquals(2,rollback);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).to("mock:result");
      }
    }
;
  }
public class MyPollStrategy extends RemoteFilePollingConsumerPollStrategy {
    @Override public void commit(    Consumer consumer,    Endpoint endpoint,    int polledMessages){
      counter++;
      if (counter < 3) {
        throw new IllegalArgumentException("Forced by unit test");
      }
    }
    @Override public boolean rollback(    Consumer consumer,    Endpoint endpoint,    int retryCounter,    Exception e) throws Exception {
      rollback++;
      return super.rollback(consumer,endpoint,retryCounter,e);
    }
  }
}
