/** 
 * A unit test to ensure getting a meaningful error message when neither of ConnectionResource nor ConnectionFactory is configured.
 */
public class NoConnectionFactoryTest {
  private static final Logger LOG=LoggerFactory.getLogger(NoConnectionFactoryTest.class);
  @Test public void testConsumerInOnly() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(createConsumerInOnlyRouteBuilder());
    try {
      context.start();
    }
 catch (    Throwable t) {
      Assert.assertEquals(IllegalArgumentException.class,t.getClass());
      LOG.info("Expected exception was thrown",t);
      return;
    }
    Assert.fail("No exception was thrown");
  }
  @Test public void testConsumerInOut() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(createConsumerInOutRouteBuilder());
    try {
      context.start();
    }
 catch (    Throwable t) {
      Assert.assertEquals(IllegalArgumentException.class,t.getClass());
      LOG.info("Expected exception was thrown",t);
      return;
    }
    Assert.fail("No exception was thrown");
  }
  @Test public void testProducerInOnly() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(createProducerInOnlyRouteBuilder());
    try {
      context.start();
    }
 catch (    Throwable t) {
      Assert.assertEquals(IllegalArgumentException.class,t.getClass());
      LOG.info("Expected exception was thrown",t);
      return;
    }
    Assert.fail("No exception was thrown");
  }
  @Test public void testProducerInOut() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(createProducerInOutRouteBuilder());
    try {
      context.start();
    }
 catch (    Throwable t) {
      Assert.assertEquals(IllegalArgumentException.class,t.getClass());
      LOG.info("Expected exception was thrown",t);
      return;
    }
    Assert.fail("No exception was thrown");
  }
  protected RouteBuilder createConsumerInOnlyRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("sjms:queue:test-in?exchangePattern=InOnly").to("mock:result");
      }
    }
;
  }
  protected RouteBuilder createConsumerInOutRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("sjms:queue:test-in?exchangePattern=InOut").to("mock:result");
      }
    }
;
  }
  protected RouteBuilder createProducerInOnlyRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:inonly").to("sjms:queue:test-out?exchangePattern=InOnly").to("mock:result");
      }
    }
;
  }
  protected RouteBuilder createProducerInOutRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:inout").to("sjms:queue:test-out?exchangePattern=InOut").to("mock:result");
      }
    }
;
  }
}
