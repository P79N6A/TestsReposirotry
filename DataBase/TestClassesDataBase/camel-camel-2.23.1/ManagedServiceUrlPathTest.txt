/** 
 * @version 
 */
public class ManagedServiceUrlPathTest extends ManagementTestSupport {
  private static final String JMXSERVICEURL="service:jmx:rmi:///jndi/rmi://localhost:2113/foo/bar";
  private JMXConnector clientConnector;
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getManagementStrategy().getManagementAgent().setServiceUrlPath("/foo/bar");
    context.getManagementStrategy().getManagementAgent().setRegistryPort(2113);
    context.getManagementStrategy().getManagementAgent().setCreateConnector(true);
    return context;
  }
  @Override protected boolean canRunOnThisPlatform(){
    return false;
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    try {
      if (clientConnector != null) {
        clientConnector.close();
      }
    }
 catch (    Throwable e) {
    }
  }
  @Test public void testConnectToJmx() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    clientConnector=JMXConnectorFactory.connect(new JMXServiceURL(JMXSERVICEURL),null);
    MBeanServerConnection mbeanServer=clientConnector.getMBeanServerConnection();
    ObjectName name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://start\"");
    String uri=(String)mbeanServer.getAttribute(name,"EndpointUri");
    assertEquals("direct://start",uri);
    name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"log://foo\"");
    uri=(String)mbeanServer.getAttribute(name,"EndpointUri");
    assertEquals("log://foo",uri);
    name=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://result\"");
    uri=(String)mbeanServer.getAttribute(name,"EndpointUri");
    assertEquals("mock://result",uri);
    String id=(String)mbeanServer.getAttribute(name,"CamelId");
    assertEquals("camel-1",id);
    Boolean singleton=(Boolean)mbeanServer.getAttribute(name,"Singleton");
    assertEquals(Boolean.TRUE,singleton);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
      }
    }
;
  }
}
