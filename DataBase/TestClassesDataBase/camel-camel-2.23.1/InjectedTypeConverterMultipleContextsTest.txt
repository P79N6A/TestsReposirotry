@RunWith(Arquillian.class) public class InjectedTypeConverterMultipleContextsTest {
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(FirstCamelContextConvertingRoute.class).addClass(SecondCamelContextConvertingRoute.class).addClass(InjectedTypeConverter.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Produces @ContextName("first") @ApplicationScoped public CamelContext camelContextFoo(){
    return new DefaultCamelContext();
  }
  @Produces @ContextName("second") @ApplicationScoped public CamelContext camelContextBar(){
    return new DefaultCamelContext();
  }
  @Test public void sendMessageToInboundFirst(  @ContextName("first") @Uri("direct:inbound") ProducerTemplate inbound,  @ContextName("first") @Uri("mock:outbound") MockEndpoint outbound) throws InterruptedException {
    sendMessageToInbound(inbound,outbound,"first");
  }
  @Test public void sendMessageToInboundSecond(  @ContextName("second") @Uri("direct:inbound") ProducerTemplate inbound,  @ContextName("second") @Uri("mock:outbound") MockEndpoint outbound) throws InterruptedException {
    sendMessageToInbound(inbound,outbound,"second");
  }
  private void sendMessageToInbound(  ProducerTemplate inbound,  MockEndpoint outbound,  String contextName) throws InterruptedException {
    outbound.expectedMessageCount(1);
    outbound.message(0).exchange().matches(fromCamelContext(contextName));
    TypeConverterInput input=new TypeConverterInput();
    input.setProperty("test");
    inbound.sendBody(input);
    assertIsSatisfied(2L,TimeUnit.SECONDS,outbound);
    assertThat(outbound.getExchanges().get(0).getIn().getBody(TypeConverterOutput.class).getProperty(),is(equalTo("test")));
  }
@Converter public static final class InjectedTypeConverter {
    @Converter public TypeConverterOutput convert(    TypeConverterInput input) throws Exception {
      TypeConverterOutput output=new TypeConverterOutput();
      output.setProperty(input.getProperty());
      return output;
    }
  }
}
