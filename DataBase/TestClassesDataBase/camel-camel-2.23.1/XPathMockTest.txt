/** 
 * @version 
 */
public class XPathMockTest extends ContextTestSupport {
  @Test public void testXPathMock() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).body().matches(xpath("/foo/text() = 'Hello World'").booleanResult());
    template.sendBody("direct:start","<foo>Hello World</foo>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testXPathMock2() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).predicate().xpath("/foo/text() = 'Hello World'");
    template.sendBody("direct:start","<foo>Hello World</foo>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testXPathMock2Fail() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).predicate().xpath("/foo/text() = 'Bye World'");
    template.sendBody("direct:start","<foo>Hello World</foo>");
    mock.assertIsNotSatisfied();
  }
  @Test public void testXPathMock3() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).predicate().xpath("/foo/text() = 'Hello World'");
    template.sendBody("direct:start","<foo>Hello World</foo>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testXPathMockMatches() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessagesMatches(xpath("/foo/text() = 'Hello World'"));
    template.sendBody("direct:start","<foo>Hello World</foo>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testXPathMockMatchesTwo() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessagesMatches(xpath("/foo/text() = 'Hello World'"),xpath("/foo/text() = 'Bye World'"));
    template.sendBody("direct:start","<foo>Hello World</foo>");
    template.sendBody("direct:start","<foo>Bye World</foo>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNonXPathMockMatches() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessagesMatches(not(body().contains("Bye")),body().contains("World"));
    template.sendBody("direct:start","<foo>Hello World</foo>");
    template.sendBody("direct:start","<foo>Bye World</foo>");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
      }
    }
;
  }
}
