/** 
 * Unit test setting null body
 */
public class JmsMessageBodySetNullTest extends CamelTestSupport {
  @Test public void testSetNullBodyUsingProcessor() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jms:queue:foo").to("mock:foo").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody(null);
          }
        }
).to("mock:bar");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:bar").message(0).body().isNull();
    template.sendBody("jms:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSetNullBodyUsingProcessorPreserveHeaders() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jms:queue:foo").to("mock:foo").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody(null);
          }
        }
).to("mock:bar");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedHeaderReceived("code",123);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:bar").message(0).body().isNull();
    getMockEndpoint("mock:bar").expectedHeaderReceived("code",123);
    template.sendBodyAndHeader("jms:queue:foo","Hello World","code",123);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSetNullBodyUsingSetBody() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jms:queue:foo").to("mock:foo").setBody(constant(null)).to("mock:bar");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:bar").message(0).body().isNull();
    template.sendBody("jms:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSetNullBodyUsingSetBodyPreserveHeaders() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("jms:queue:foo").to("mock:foo").setBody(constant(null)).to("mock:bar");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedHeaderReceived("code",123);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:bar").message(0).body().isNull();
    getMockEndpoint("mock:bar").expectedHeaderReceived("code",123);
    template.sendBodyAndHeader("jms:queue:foo","Hello World","code",123);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("jms",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
