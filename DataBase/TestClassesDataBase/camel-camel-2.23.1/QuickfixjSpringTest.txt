public class QuickfixjSpringTest extends CamelSpringTestSupport {
  @Override @Before public void setUp() throws Exception {
    if (isJava16()) {
      return;
    }
    super.setUp();
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/quickfixj/QuickfixjSpringTest-context.xml");
  }
  @Test public void configureInSpring() throws Exception {
    if (isJava16()) {
      return;
    }
    SessionID sessionID=new SessionID("FIX.4.2:INITIATOR->ACCEPTOR");
    QuickfixjConfiguration configuration=context.getRegistry().lookupByNameAndType("quickfixjConfiguration",QuickfixjConfiguration.class);
    SessionSettings springSessionSettings=configuration.createSessionSettings();
    Properties sessionProperties=springSessionSettings.getSessionProperties(sessionID,true);
    assertThat(sessionProperties.get("ConnectionType").toString(),CoreMatchers.is("initiator"));
    assertThat(sessionProperties.get("SocketConnectProtocol").toString(),CoreMatchers.is("VM_PIPE"));
    QuickfixjComponent component=context.getComponent("quickfix",QuickfixjComponent.class);
    assertThat(component.isLazyCreateEngines(),is(false));
    QuickfixjEngine engine=component.getEngines().values().iterator().next();
    assertThat(engine.isInitialized(),is(true));
    QuickfixjComponent lazyComponent=context.getComponent("lazyQuickfix",QuickfixjComponent.class);
    assertThat(lazyComponent.isLazyCreateEngines(),is(true));
    QuickfixjEngine lazyEngine=lazyComponent.getEngines().values().iterator().next();
    assertThat(lazyEngine.isInitialized(),is(false));
    assertThat(engine.getMessageFactory(),is(instanceOf(CustomMessageFactory.class)));
  }
  /** 
 * Customer message factory and message class for test purposes
 */
public static class CustomMessageFactory extends DefaultMessageFactory {
    @Override public Message create(    String beginString,    String msgType){
      if (beginString.equals(FixVersions.BEGINSTRING_FIX42) && msgType.equals(MsgType.ORDER_SINGLE)) {
        return new CustomNewOrderSingle();
      }
      return super.create(beginString,msgType);
    }
  }
public static class CustomNewOrderSingle extends NewOrderSingle {
    private static final long serialVersionUID=1L;
  }
}
