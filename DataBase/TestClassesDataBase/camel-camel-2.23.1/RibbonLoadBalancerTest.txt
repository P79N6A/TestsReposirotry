public class RibbonLoadBalancerTest {
  private static final int PORT1=AvailablePortFinder.getNextAvailable();
  private static final int PORT2=AvailablePortFinder.getNextAvailable();
  @Test public void testLoadBalancer() throws Exception {
    new ApplicationContextRunner().withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","camel.cloud.consul.service-discovery.enabled=false","debug=false","camel.cloud.service-discovery.services[myService]=localhost:" + PORT1 + ",localhost:"+ PORT2,"camel.cloud.ribbon.load-balancer.enabled=true").run(context -> {
      final CamelContext camelContext=context.getBean(CamelContext.class);
      final ProducerTemplate template=camelContext.createProducerTemplate();
      DefaultServiceCallProcessor processor=findServiceCallProcessor(camelContext);
      assertThat(processor.getLoadBalancer()).isNotNull();
      assertThat(processor.getLoadBalancer()).isInstanceOf(RibbonServiceLoadBalancer.class);
      RibbonServiceLoadBalancer loadBalancer=(RibbonServiceLoadBalancer)processor.getLoadBalancer();
      assertThat(loadBalancer.getServiceDiscovery()).isInstanceOf(CamelCloudServiceDiscovery.class);
      assertThat(loadBalancer.getServiceFilter()).isInstanceOf(CamelCloudServiceFilter.class);
      assertThat(template.requestBody("direct:start",null,String.class)).isEqualTo("" + PORT2);
      assertThat(template.requestBody("direct:start",null,String.class)).isEqualTo("" + PORT1);
    }
);
  }
@EnableAutoConfiguration @Configuration public static class TestConfiguration {
    @Bean public RoutesBuilder routeBuilder(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").routeId("scall").serviceCall().name("myService").uri("jetty:http://myService").end();
          fromF("jetty:http://localhost:%d",PORT1).routeId("" + PORT1).transform().constant("" + PORT1);
          fromF("jetty:http://localhost:%d",PORT2).routeId("" + PORT2).transform().constant("" + PORT2);
        }
      }
;
    }
  }
  protected DefaultServiceCallProcessor findServiceCallProcessor(  CamelContext context){
    Route route=context.getRoute("scall");
    Assert.assertNotNull("ServiceCall Route should be present",route);
    return findServiceCallProcessor(route.navigate()).orElseThrow(() -> new IllegalStateException("Unable to find a ServiceCallProcessor"));
  }
  protected Optional<DefaultServiceCallProcessor> findServiceCallProcessor(  Navigate<Processor> navigate){
    for (    Processor processor : navigate.next()) {
      if (processor instanceof DefaultServiceCallProcessor) {
        return Optional.ofNullable((DefaultServiceCallProcessor)processor);
      }
      if (processor instanceof Navigate) {
        return findServiceCallProcessor((Navigate<Processor>)processor);
      }
    }
    return Optional.empty();
  }
}
