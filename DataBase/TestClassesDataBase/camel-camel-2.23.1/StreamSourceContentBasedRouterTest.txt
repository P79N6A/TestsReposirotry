/** 
 * Test for handling a StreamSource in a content-based router with XPath predicates
 * @version 
 */
public class StreamSourceContentBasedRouterTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  @Test public void testSendStreamSource() throws Exception {
    x.expectedMessageCount(1);
    y.expectedMessageCount(1);
    sendBody("direct:start",new StreamSource(new StringReader("<message>xx</message>")));
    sendBody("direct:start",new StreamSource(new StringReader("<message>yy</message>")));
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendStringSource() throws Exception {
    x.expectedMessageCount(1);
    y.expectedMessageCount(1);
    sendBody("direct:start",new StringSource("<message>xx</message>"));
    sendBody("direct:start",new StringSource("<message>yy</message>"));
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").streamCaching().choice().when().xpath("/message/text() = 'xx'").to("mock:x").when().xpath("/message/text() = 'yy'").to("mock:y");
      }
    }
;
  }
}
