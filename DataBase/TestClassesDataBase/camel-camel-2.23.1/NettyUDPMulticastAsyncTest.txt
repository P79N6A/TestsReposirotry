/** 
 * To run this test manually through Maven first remove the  {@link Ignore}annotation below, then make sure you've got a network interface with the name <code>en0</code> as given by the route below. If this is not the case run your OS specific command to find out which network interfaces you've got supporting IPv4 (e.g. on OS-X that would be the  {@code ifconfig -a} command.Next you need to enable UDP multicast on your OS for the given multicast address of this test ( {@code 224.1.2.3}). For this purpose e.g. on OS-X follow the steps being described <a href= "http://blogs.agilefaqs.com/2009/11/08/enabling-multicast-on-your-macos-unix/" >here</a>. Now running the test manually should succeed (<b>but only</b> when using Java7+): <pre> mvn test -Djava.net.preferIPv4Stack=true -Dtest=NettyUDPMulticastAsyncTest </pre> Please note that using the JUnit  {@link BeforeClass} annotation together withthe corresponding  {@link System#setProperty(String,String) Java API} to setthe  {@code java.net.preferIPv4Stack} system property would not work here asat that moment it would be too <b>late</b> to set this system property. On the other hand setting such a system property through the surefire-plugin would cause side effect by the other tests of this component.
 */
@Ignore("See the Javadoc") public class NettyUDPMulticastAsyncTest extends BaseNettyTest {
  private void sendFile(  String uri) throws Exception {
    template.send(uri,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        byte[] buffer=exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class,new File("src/test/resources/test.txt"));
        exchange.setProperty(Exchange.CHARSET_NAME,"ASCII");
        exchange.getIn().setBody(buffer);
      }
    }
);
  }
  @Test public void testUDPInOnlyMulticastWithNettyConsumer() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().startsWith("Song Of A Dream".getBytes());
    sendFile("netty4:udp://224.1.2.3:{{port}}?sync=false");
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4:udp://224.1.2.3:{{port}}?sync=false&networkInterface=en0").to("mock:result").to("log:Message");
      }
    }
;
  }
}
