public class TransformerListCommandTest {
  private static final Logger LOG=LoggerFactory.getLogger(TransformerListCommandTest.class);
  @Test public void testTransformerList() throws Exception {
    String out=doTest(false);
    assertTrue(out.contains("xml:foo"));
    assertTrue(out.contains("json:bar"));
    assertTrue(out.contains("java:" + this.getClass().getName()));
    assertTrue(out.contains("xml:test"));
    assertTrue(out.contains("custom"));
    assertTrue(out.contains("Started"));
    assertFalse(out.contains("ProcessorTransformer["));
    assertFalse(out.contains("DataFormatTransformer["));
    assertFalse(out.contains("MyTransformer["));
  }
  @Test public void testTransformerListVerbose() throws Exception {
    String out=doTest(true);
    assertTrue(out.contains("xml:foo"));
    assertTrue(out.contains("json:bar"));
    assertTrue(out.contains("java:" + this.getClass().getName()));
    assertTrue(out.contains("xml:test"));
    assertTrue(out.contains("custom"));
    assertTrue(out.contains("Started"));
    assertTrue(out.contains("ProcessorTransformer["));
    assertTrue(out.contains("DataFormatTransformer["));
    assertTrue(out.contains("MyTransformer["));
  }
  private String doTest(  boolean verbose) throws Exception {
    CamelContext context=new DefaultCamelContext();
    EndpointTransformerDefinition etd=new EndpointTransformerDefinition();
    etd.setFromType("xml:foo");
    etd.setToType("json:bar");
    etd.setUri("direct:transformer");
    context.getTransformers().add(etd);
    DataFormatTransformerDefinition dftd=new DataFormatTransformerDefinition();
    dftd.setFromType(this.getClass());
    dftd.setToType("xml:test");
    dftd.setDataFormatType(new StringDataFormat());
    context.getTransformers().add(dftd);
    CustomTransformerDefinition ctd=new CustomTransformerDefinition();
    ctd.setScheme("custom");
    ctd.setClassName(MyTransformer.class.getName());
    context.getTransformers().add(ctd);
    context.setNameStrategy(new ExplicitCamelContextNameStrategy("foobar"));
    context.start();
    CamelController controller=new DummyCamelController(context);
    OutputStream os=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(os);
    TransformerListCommand command=new TransformerListCommand(null,false,verbose,false);
    command.execute(controller,ps,null);
    String out=os.toString();
    assertNotNull(out);
    LOG.info("\n\n{}\n",out);
    context.stop();
    return out;
  }
public static class MyTransformer extends Transformer {
    @Override public void transform(    Message message,    DataType from,    DataType to) throws Exception {
      return;
    }
  }
}
