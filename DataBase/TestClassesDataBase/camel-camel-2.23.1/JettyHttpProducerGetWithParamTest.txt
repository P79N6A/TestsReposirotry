/** 
 * Unit test to verify that we can have URI options for external system (endpoint is lenient)
 */
public class JettyHttpProducerGetWithParamTest extends BaseJettyTest {
  private String serverUri="jetty://http://localhost:" + getPort() + "/myservice";
  private MyParamsProcessor processor=new MyParamsProcessor();
  @Test public void testHttpGetWithParamsViaURI() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    mock.expectedHeaderReceived("one","eins");
    mock.expectedHeaderReceived("two","zwei");
    Thread.sleep(1000);
    template.requestBody(serverUri + "?one=uno&two=dos","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testHttpGetWithParamsViaHeader() throws Exception {
    if (isPlatform("windows")) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    mock.expectedHeaderReceived("one","eins");
    mock.expectedHeaderReceived("two","zwei");
    Thread.sleep(1000);
    template.requestBodyAndHeader(serverUri,"Hello World",Exchange.HTTP_QUERY,"one=uno&two=dos");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(serverUri).process(processor).to("mock:result");
      }
    }
;
  }
private static class MyParamsProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      HttpMessage message=(HttpMessage)exchange.getIn();
      assertNotNull(message.getRequest());
      assertEquals("uno",message.getRequest().getParameter("one"));
      assertEquals("dos",message.getRequest().getParameter("two"));
      exchange.getOut().setBody("Bye World");
      exchange.getOut().setHeader("one","eins");
      exchange.getOut().setHeader("two","zwei");
    }
  }
}
