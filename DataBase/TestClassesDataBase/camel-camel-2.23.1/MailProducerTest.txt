public class MailProducerTest extends CamelTestSupport {
  @Test public void testProduer() throws Exception {
    Mailbox.clearAll();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Message ","To","someone@localhost");
    assertMockEndpointsSatisfied();
    Exchange exchange=getMockEndpoint("mock:result").getExchanges().get(0);
    assertNotNull("The message id should not be null",exchange.getIn().getHeader(MailConstants.MAIL_MESSAGE_ID));
    Mailbox box=Mailbox.get("someone@localhost");
    assertEquals(1,box.size());
  }
  @Test public void testProducerBodyIsMimeMessage() throws Exception {
    Mailbox.clearAll();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    Address from=new InternetAddress("fromCamelTest@localhost");
    Address to=new InternetAddress("recipient2@localhost");
    Session session=Session.getDefaultInstance(System.getProperties());
    MimeMessage mimeMessage=new MimeMessage(session);
    mimeMessage.setFrom(from);
    mimeMessage.addRecipient(RecipientType.TO,to);
    mimeMessage.setSubject("This is the subject.");
    mimeMessage.setText("This is the message");
    template.sendBodyAndHeader("direct:start",mimeMessage,"To","someone@localhost");
    assertMockEndpointsSatisfied();
    Exchange exchange=getMockEndpoint("mock:result").getExchanges().get(0);
    assertNotNull("The message id should not be null",exchange.getIn().getHeader(MailConstants.MAIL_MESSAGE_ID));
    Mailbox box=Mailbox.get("someone@localhost");
    assertEquals(0,box.size());
    Mailbox box2=Mailbox.get("recipient2@localhost");
    assertEquals(1,box2.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("smtp://camel@localhost","mock:result");
      }
    }
;
  }
}
