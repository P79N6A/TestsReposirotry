public class SendExchangePatternOptionTest extends ContextTestSupport {
  @Test public void testExchangePatternOptionInOnly() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly);
    getMockEndpoint("mock:stub").expectedMessageCount(1);
    getMockEndpoint("mock:stub").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testExchangePatternOptionInOut() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOut);
    getMockEndpoint("mock:stub").expectedMessageCount(1);
    getMockEndpoint("mock:stub").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly);
    template.requestBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("stub:foo?exchangePattern=InOnly").to("mock:result");
        from("stub:foo").to("mock:stub");
      }
    }
;
  }
}
