/** 
 * Unit test for the idempotentRepositoryRef option.
 */
public class FileConsumerIdempotentRefTest extends ContextTestSupport {
  private static volatile boolean invoked;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myRepo",new MyIdempotentRepository());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/idempotent");
    super.setUp();
    template.sendBodyAndHeader("file://target/idempotent/","Hello World",Exchange.FILE_NAME,"report.txt");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/idempotent/?idempotent=true&idempotentRepository=#myRepo&move=done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
  @Test public void testIdempotentRef() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    mock.reset();
    mock.expectedMessageCount(0);
    File file=new File("target/idempotent/done/report.txt");
    File renamed=new File("target/idempotent/report.txt");
    file.renameTo(renamed);
    Thread.sleep(100);
    assertMockEndpointsSatisfied();
    assertTrue("MyIdempotentRepository should have been invoked",invoked);
  }
public class MyIdempotentRepository implements IdempotentRepository<String> {
    public boolean add(    String messageId){
      boolean result=invoked;
      invoked=true;
      assertEquals("report.txt",messageId);
      return !result;
    }
    public boolean contains(    String key){
      return invoked;
    }
    public boolean remove(    String key){
      return true;
    }
    public boolean confirm(    String key){
      return true;
    }
    @Override public void clear(){
      return;
    }
    public void start() throws Exception {
    }
    public void stop() throws Exception {
    }
  }
}
