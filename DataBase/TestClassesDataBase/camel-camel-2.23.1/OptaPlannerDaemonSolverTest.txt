/** 
 * OptaPlanner unit test with Camel
 */
public class OptaPlannerDaemonSolverTest extends CamelTestSupport {
  @Test public void testAsynchronousProblemSolving() throws Exception {
    MockEndpoint mockEndpoint=getMockEndpoint("mock:result");
    mockEndpoint.setExpectedCount(1);
    CloudBalancingGenerator generator=new CloudBalancingGenerator(true);
    final CloudBalance planningProblem=generator.createCloudBalance(4,12);
    assertNull(planningProblem.getScore());
    assertNull(planningProblem.getProcessList().get(0).getComputer());
    template.requestBody("direct:in",planningProblem);
    mockEndpoint.assertIsSatisfied();
    mockEndpoint.reset();
    mockEndpoint.setExpectedCount(1);
    CloudComputer firstComputer=planningProblem.getComputerList().get(0);
    assertNotNull(firstComputer);
    template.requestBody("direct:in",new RemoveComputerChange(firstComputer));
    mockEndpoint.assertIsSatisfied();
    CloudBalance bestSolution=(CloudBalance)template.requestBody("direct:in","foo");
    assertEquals(3,bestSolution.getComputerList().size());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").to("optaplanner:org/apache/camel/component/optaplanner/daemonSolverConfig.xml?async=true");
        from("optaplanner:org/apache/camel/component/optaplanner/daemonSolverConfig.xml").to("log:com.mycompany.order?showAll=true&multiline=true").to("mock:result");
      }
    }
;
  }
private static class RemoveComputerChange implements ProblemFactChange<Object> {
    private final CloudComputer removingComputer;
    RemoveComputerChange(    CloudComputer removingComputer){
      this.removingComputer=removingComputer;
    }
    @Override public void doChange(    ScoreDirector<Object> scoreDirector){
      CloudBalance cloudBalance=(CloudBalance)scoreDirector.getWorkingSolution();
      for (      CloudProcess process : cloudBalance.getProcessList()) {
        if (Objects.equals(process.getComputer(),removingComputer)) {
          scoreDirector.beforeVariableChanged(process,"computer");
          process.setComputer(null);
          scoreDirector.afterVariableChanged(process,"computer");
        }
      }
      cloudBalance.setComputerList(new ArrayList<>(cloudBalance.getComputerList()));
      for (Iterator<CloudComputer> it=cloudBalance.getComputerList().iterator(); it.hasNext(); ) {
        CloudComputer workingComputer=it.next();
        if (Objects.equals(workingComputer,removingComputer)) {
          scoreDirector.beforeProblemFactRemoved(workingComputer);
          it.remove();
          scoreDirector.beforeProblemFactRemoved(workingComputer);
          scoreDirector.triggerVariableListeners();
          break;
        }
      }
    }
  }
}
