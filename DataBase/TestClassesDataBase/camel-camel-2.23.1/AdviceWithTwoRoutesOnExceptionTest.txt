/** 
 * @version 
 */
public class AdviceWithTwoRoutesOnExceptionTest extends ContextTestSupport {
  @Test public void testAdviceWithA() throws Exception {
    RouteDefinition route=context.getRouteDefinition("a");
    route.adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced"));
      }
    }
);
    getMockEndpoint("mock:a").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:error").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class);
    template.sendBody("direct:a","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAdviceWithB() throws Exception {
    RouteDefinition route=context.getRouteDefinition("b");
    route.adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced"));
      }
    }
);
    getMockEndpoint("mock:b").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:error").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class);
    template.sendBody("direct:b","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAdviceWithAB() throws Exception {
    RouteDefinition route=context.getRouteDefinition("a");
    route.adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced"));
      }
    }
);
    route=context.getRouteDefinition("b");
    route.adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced"));
      }
    }
);
    getMockEndpoint("mock:a").expectedMessageCount(0);
    getMockEndpoint("mock:b").expectedMessageCount(0);
    getMockEndpoint("mock:error").expectedMessageCount(2);
    getMockEndpoint("mock:error").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class);
    getMockEndpoint("mock:error").message(1).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class);
    template.sendBody("direct:a","Hello World");
    template.sendBody("direct:b","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").routeId("a").onException(Exception.class).handled(true).to("mock:error").end().to("log:a").to("mock:a");
        from("direct:b").routeId("b").onException(Exception.class).handled(true).to("mock:error").end().to("log:b").to("mock:b");
      }
    }
;
  }
}
