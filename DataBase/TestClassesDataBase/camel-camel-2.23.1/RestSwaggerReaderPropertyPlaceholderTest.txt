@Ignore("Does not run well on CI due test uses JMX mbeans") public class RestSwaggerReaderPropertyPlaceholderTest extends CamelTestSupport {
  @Override protected boolean useJmx(){
    return true;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("dummy-rest",new DummyRestConsumerFactory());
    return jndi;
  }
  @Override protected Properties useOverridePropertiesWithPropertiesComponent(){
    Properties prop=new Properties();
    prop.put("foo","hello");
    prop.put("bar","bye");
    return prop;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        rest("/{{foo}}").consumes("application/json").produces("application/json").get("/hi/{name}").description("Saying hi").param().name("name").type(RestParamType.path).dataType("string").description("Who is it").endParam().to("log:hi").get("/{{bar}}/{name}").description("Saying bye").param().name("name").type(RestParamType.path).dataType("string").description("Who is it").endParam().responseMessage().code(200).message("A reply message").endResponseMessage().to("log:bye").post("/{{bar}}").description("To update the greeting message").consumes("application/xml").produces("application/xml").param().name("greeting").type(RestParamType.body).dataType("string").description("Message to use as greeting").endParam().to("log:bye");
      }
    }
;
  }
  @Test public void testReaderRead() throws Exception {
    BeanConfig config=new BeanConfig();
    config.setHost("localhost:8080");
    config.setSchemes(new String[]{"http"});
    config.setBasePath("/api");
    RestSwaggerReader reader=new RestSwaggerReader();
    RestSwaggerSupport support=new RestSwaggerSupport();
    List<RestDefinition> rests=support.getRestDefinitions(context.getName());
    Swagger swagger=reader.read(rests,null,config,context.getName(),new DefaultClassResolver());
    assertNotNull(swagger);
    ObjectMapper mapper=new ObjectMapper();
    mapper.enable(SerializationFeature.INDENT_OUTPUT);
    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    String json=mapper.writeValueAsString(swagger);
    log.info(json);
    assertTrue(json.contains("\"host\" : \"localhost:8080\""));
    assertTrue(json.contains("\"basePath\" : \"/api\""));
    assertTrue(json.contains("\"/hello/bye\""));
    assertTrue(json.contains("\"summary\" : \"To update the greeting message\""));
    assertTrue(json.contains("\"/hello/bye/{name}\""));
    assertTrue(json.contains("\"/hello/hi/{name}\""));
    assertFalse(json.contains("{foo}"));
    assertFalse(json.contains("{bar}"));
    context.stop();
  }
}
