public class MongoDbConversionsTest extends AbstractMongoDbTest {
  @Test public void testInsertMap() throws InterruptedException {
    assertEquals(0,testCollection.count());
    Map<String,Object> m1=new HashMap<>();
    Map<String,String> m1Nested=new HashMap<>();
    m1Nested.put("nested1","nestedValue1");
    m1Nested.put("nested2","nestedValue2");
    m1.put("field1","value1");
    m1.put("field2","value2");
    m1.put("nestedField",m1Nested);
    m1.put("_id","testInsertMap");
    template.requestBody("direct:insertMap",m1);
    BasicDBObject b=testCollection.find(new BasicDBObject("_id","testInsertMap")).first();
    assertNotNull("No record with 'testInsertMap' _id",b);
  }
  @Test public void testInsertPojo(){
    assertEquals(0,testCollection.count());
    template.requestBody("direct:insertPojo",new MyPojoTest());
    DBObject b=testCollection.find(new BasicDBObject("_id","testInsertPojo")).first();
    assertNotNull("No record with 'testInsertPojo' _id",b);
  }
  @Test public void testInsertJsonString(){
    assertEquals(0,testCollection.count());
    template.requestBody("direct:insertJsonString","{\"fruits\": [\"apple\", \"banana\", \"papaya\"], \"veggie\": \"broccoli\", \"_id\": \"testInsertJsonString\"}");
    DBObject b=testCollection.find(new BasicDBObject("_id","testInsertJsonString")).first();
    assertNotNull("No record with 'testInsertJsonString' _id",b);
  }
  @Test public void testInsertJsonInputStream() throws Exception {
    assertEquals(0,testCollection.count());
    template.requestBody("direct:insertJsonString",IOConverter.toInputStream("{\"fruits\": [\"apple\", \"banana\"], \"veggie\": \"broccoli\", \"_id\": \"testInsertJsonString\"}\n",null));
    DBObject b=testCollection.find(new BasicDBObject("_id","testInsertJsonString")).first();
    assertNotNull("No record with 'testInsertJsonString' _id",b);
  }
  @Test public void testInsertBsonInputStream(){
    assertEquals(0,testCollection.count());
    DefaultDBEncoder encoder=new DefaultDBEncoder();
    BSONObject bsonObject=new BasicDBObject();
    bsonObject.put("_id","testInsertBsonString");
    template.requestBody("direct:insertJsonString",new ByteArrayInputStream(encoder.encode(bsonObject)));
    DBObject b=testCollection.find(new BasicDBObject("_id","testInsertBsonString")).first();
    assertNotNull("No record with 'testInsertBsonString' _id",b);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:insertMap").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert");
        from("direct:insertPojo").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert");
        from("direct:insertJsonString").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert");
        from("direct:insertJsonStringWriteResultInString").to("mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert").convertBodyTo(String.class);
      }
    }
;
  }
@SuppressWarnings("unused") private class MyPojoTest {
    public int number=123;
    public String text="hello";
    public String[] array={"daVinci","copernico","einstein"};
    public String _id="testInsertPojo";
  }
}
