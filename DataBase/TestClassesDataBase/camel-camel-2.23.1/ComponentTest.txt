public class ComponentTest extends CamelTestSupport {
  private SimpleRegistry simpleReg;
  @Test public void execute() throws Exception {
    String message="Testmessage";
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(message);
    sendBody("direct:start",message.getBytes("UTF-8"));
    assertMockEndpointsSatisfied();
  }
  @Test public void signedWithOutdatedCert() throws Exception {
    String message="Testmessage";
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    MockEndpoint mockException=getMockEndpoint("mock:exception");
    mockException.expectedMessageCount(1);
    sendBody("direct:outdated",message.getBytes("UTF-8"));
    assertMockEndpointsSatisfied();
  }
  @Test public void decryptAndVerify() throws Exception {
    InputStream input=this.getClass().getClassLoader().getResourceAsStream("signed_enveloped_other_CMS_vendor.binary");
    assertNotNull(input);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Testmessage");
    sendBody("direct:decryptAndVerify",input);
    assertMockEndpointsSatisfied();
    input.close();
  }
  @Test public void orignatorUnprotectedAttributes() throws Exception {
    String message="Testmessage";
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(message);
    sendBody("direct:encryptDecryptOriginatorAttributes",message.getBytes("UTF-8"));
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    simpleReg=new SimpleRegistry();
    CamelContext context=new DefaultCamelContext(simpleReg);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        context.setStreamCaching(true);
        KeyStoreParameters keystore=KeystoreUtil.getKeyStoreParameters("system.jks");
        DefaultKeyTransRecipientInfo recipient=new DefaultKeyTransRecipientInfo();
        recipient.setCertificateAlias("rsa");
        recipient.setKeyStoreParameters(keystore);
        DefaultSignerInfo signerInfo=new DefaultSignerInfo();
        signerInfo.setIncludeCertificates(true);
        signerInfo.setSignatureAlgorithm("SHA256withRSA");
        signerInfo.setPrivateKeyAlias("rsa");
        signerInfo.setKeyStoreParameters(keystore);
        DefaultSignerInfo signerInfo2=new DefaultSignerInfo();
        signerInfo2.setSignatureAlgorithm("SHA256withDSA");
        signerInfo2.setPrivateKeyAlias("dsa");
        signerInfo2.setKeyStoreParameters(keystore);
        simpleReg.put("keyStoreParameters",keystore);
        simpleReg.put("signer1",signerInfo);
        simpleReg.put("signer2",signerInfo2);
        simpleReg.put("recipient1",recipient);
        onException(CryptoCmsVerifierCertificateNotValidException.class).handled(false).to("mock:exception");
        from("direct:start").to("crypto-cms:sign://testsign?signer=#signer1&signer=#signer2&includeContent=true").to("crypto-cms:encrypt://testencrpyt?toBase64=true&recipient=#recipient1&contentEncryptionAlgorithm=DESede/CBC/PKCS5Padding&secretKeyLength=128").to("crypto-cms:decrypt://testdecrypt?fromBase64=true&keyStoreParameters=#keyStoreParameters").to("crypto-cms:verify://testverify?keyStoreParameters=#keyStoreParameters").convertBodyTo(String.class).to("log:after").to("mock:result");
        DefaultSignerInfo signerOutdated=new DefaultSignerInfo();
        signerOutdated.setIncludeCertificates(false);
        signerOutdated.setSignatureAlgorithm("SHA1withRSA");
        signerOutdated.setPrivateKeyAlias("outdated");
        signerOutdated.setKeyStoreParameters(keystore);
        simpleReg.put("signerOutdated",signerOutdated);
        from("direct:outdated").to("crypto-cms:sign://outdated?signer=#signerOutdated&includeContent=true").to("crypto-cms:verify://outdated?keyStoreParameters=#keyStoreParameters").to("mock:result");
        from("direct:decryptAndVerify").to("crypto-cms:decrypt://testdecrypt?fromBase64=true&keyStoreParameters=#keyStoreParameters").to("crypto-cms:verify://testverify?keyStoreParameters=#keyStoreParameters").to("mock:result");
        TestOriginatorInformationProvider originatorInformationProvider=new TestOriginatorInformationProvider();
        TestAttributesGeneratorProvider attributesGeneratorProvider=new TestAttributesGeneratorProvider();
        simpleReg.put("originatorInformationProvider1",originatorInformationProvider);
        simpleReg.put("attributesGeneratorProvider1",attributesGeneratorProvider);
        from("direct:encryptDecryptOriginatorAttributes").to("crypto-cms:encrypt://testencrpyt?toBase64=true&recipient=#recipient1&contentEncryptionAlgorithm=DESede/CBC/PKCS5Padding&secretKeyLength=128&" + "originatorInformationProvider=#originatorInformationProvider1&unprotectedAttributesGeneratorProvider=#attributesGeneratorProvider1").to("crypto-cms:decrypt://testdecrypt?fromBase64=true&keyStoreParameters=#keyStoreParameters").to("mock:result");
      }
    }
;
  }
  @Test(expected=IllegalStateException.class) public void wrongOperation() throws Exception {
    CryptoCmsComponent c=new CryptoCmsComponent(new DefaultCamelContext());
    c.createEndpoint("uri","wrongoperation",null);
  }
}
