public class BeanCachedProcessorTest extends ContextTestSupport {
  private Context context;
  private JndiRegistry registry;
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:noCache").to("bean:something?cache=false");
        from("direct:cached").to("bean:something?cache=true");
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("something",new MyBean());
    this.context=registry.getContext();
    this.registry=registry;
    return registry;
  }
  @Test public void testFreshBeanInContext() throws Exception {
    MyBean originalInstance=registry.lookup("something",MyBean.class);
    template.sendBody("direct:noCache",null);
    context.unbind("something");
    context.bind("something",new MyBean());
    assertNotSame(registry.lookup("something"),originalInstance);
    template.sendBody("direct:noCache",null);
  }
  @Test public void testBeanWithCached() throws Exception {
    MyBean originalInstance=registry.lookup("something",MyBean.class);
    template.sendBody("direct:cached",null);
    context.unbind("something");
    context.bind("something",new MyBean());
    assertNotSame(registry.lookup("something"),originalInstance);
    try {
      template.sendBody("direct:cached",null);
      fail("The IllegalStateException is expected");
    }
 catch (    CamelExecutionException ex) {
      assertTrue("IllegalStateException is expected!",ex.getCause() instanceof IllegalStateException);
      assertEquals("This bean is not supported to be invoked again!",ex.getCause().getMessage());
    }
  }
public static class MyBean implements Processor {
    private boolean invoked;
    public void process(    Exchange exchange) throws Exception {
      if (invoked) {
        throw new IllegalStateException("This bean is not supported to be invoked again!");
      }
 else {
        invoked=true;
      }
    }
  }
}
