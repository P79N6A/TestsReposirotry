public class ManagedRouteDirectWhileIssueLeakTest extends ManagementTestSupport {
  @Test public void testInflightLeak() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    getMockEndpoint("mock:result").expectedBodiesReceived("AAAA");
    template.sendBodyAndHeader("direct:start","","counter",4);
    assertMockEndpointsSatisfied();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    Long inflight=(Long)mbeanServer.getAttribute(on,"ExchangesInflight");
    assertEquals(0,inflight.longValue());
    Long ts=(Long)mbeanServer.getAttribute(on,"OldestInflightDuration");
    assertNull(ts);
    String id=(String)mbeanServer.getAttribute(on,"OldestInflightExchangeId");
    assertNull(id);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").choice().when(simple("${header.counter} > 0")).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            body="A" + body;
            exchange.getIn().setBody(body);
            int counter=exchange.getIn().getHeader("counter",int.class);
            counter=counter - 1;
            exchange.getIn().setHeader("counter",counter);
          }
        }
).to("direct:start").otherwise().to("mock:result").end();
      }
    }
;
  }
}
