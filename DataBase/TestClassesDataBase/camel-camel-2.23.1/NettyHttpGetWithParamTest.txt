public class NettyHttpGetWithParamTest extends BaseNettyTest {
  private String serverUri="netty4-http:http://localhost:" + getPort() + "/myservice";
  private MyParamsProcessor processor=new MyParamsProcessor();
  @Test public void testHttpGetWithParamsViaURI() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    mock.expectedHeaderReceived("one","eins");
    mock.expectedHeaderReceived("two","zwei");
    template.requestBody(serverUri + "?one=uno&two=dos",(Object)null);
    assertMockEndpointsSatisfied();
  }
  @Test @Ignore("HTTP_QUERY not supported") public void testHttpGetWithParamsViaHeader() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    mock.expectedHeaderReceived("one","eins");
    mock.expectedHeaderReceived("two","zwei");
    template.requestBodyAndHeader(serverUri,null,Exchange.HTTP_QUERY,"one=uno&two=dos");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(serverUri).process(processor).to("mock:result");
      }
    }
;
  }
private static class MyParamsProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      NettyHttpMessage message=exchange.getIn(NettyHttpMessage.class);
      assertNotNull(message.getHttpRequest());
      String uri=message.getHttpRequest().uri();
      assertTrue(uri.endsWith("one=uno&two=dos"));
      exchange.getOut().setBody("Bye World");
      exchange.getOut().setHeader("one","eins");
      exchange.getOut().setHeader("two","zwei");
    }
  }
}
