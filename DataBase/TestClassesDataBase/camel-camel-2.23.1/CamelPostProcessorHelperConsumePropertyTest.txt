/** 
 * @version 
 */
public class CamelPostProcessorHelperConsumePropertyTest extends ContextTestSupport {
  @Test public void testConsumePropertyExplicit() throws Exception {
    CamelPostProcessorHelper helper=new CamelPostProcessorHelper(context);
    MyConsumeBean my=new MyConsumeBean();
    my.setFoo("seda:foo");
    Method method=my.getClass().getMethod("consumeSomething",String.class);
    helper.consumerInjection(method,my,"foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumePropertyImplicit() throws Exception {
    CamelPostProcessorHelper helper=new CamelPostProcessorHelper(context);
    MyConsumeBean my=new MyConsumeBean();
    my.setFoo("seda:foo");
    Method method=my.getClass().getMethod("foo",String.class);
    helper.consumerInjection(method,my,"foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumePropertyOnImplicit() throws Exception {
    CamelPostProcessorHelper helper=new CamelPostProcessorHelper(context);
    MyConsumeBean my=new MyConsumeBean();
    my.setFoo("seda:foo");
    Method method=my.getClass().getMethod("onFoo",String.class);
    helper.consumerInjection(method,my,"foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumePropertyEndpointImplicit() throws Exception {
    CamelPostProcessorHelper helper=new CamelPostProcessorHelper(context);
    MyConsumeBean my=new MyConsumeBean();
    my.setBarEndpoint("seda:bar");
    Method method=my.getClass().getMethod("bar",String.class);
    helper.consumerInjection(method,my,"bar");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("seda:bar","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumePropertyOnEndpointImplicit() throws Exception {
    CamelPostProcessorHelper helper=new CamelPostProcessorHelper(context);
    MyConsumeBean my=new MyConsumeBean();
    my.setBarEndpoint("seda:bar");
    Method method=my.getClass().getMethod("onBar",String.class);
    helper.consumerInjection(method,my,"bar");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("seda:bar","Hello World");
    assertMockEndpointsSatisfied();
  }
public class MyConsumeBean {
    private String foo;
    private String barEndpoint;
    public String getFoo(){
      return foo;
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
    public String getBarEndpoint(){
      return barEndpoint;
    }
    public void setBarEndpoint(    String barEndpoint){
      this.barEndpoint=barEndpoint;
    }
    @Consume(property="foo") public void consumeSomething(    String body){
      assertEquals("Hello World",body);
      template.sendBody("mock:result",body);
    }
    @Consume() public void foo(    String body){
      assertEquals("Hello World",body);
      template.sendBody("mock:result",body);
    }
    @Consume() public void onFoo(    String body){
      assertEquals("Hello World",body);
      template.sendBody("mock:result",body);
    }
    @Consume() public void bar(    String body){
      assertEquals("Hello World",body);
      template.sendBody("mock:result",body);
    }
    @Consume() public void onBar(    String body){
      assertEquals("Hello World",body);
      template.sendBody("mock:result",body);
    }
  }
}
