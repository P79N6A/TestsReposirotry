public class CachedOutputStreamTest extends ContextTestSupport {
  private static final String TEST_STRING="This is a test string and it has enough" + " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ";
  private Exchange exchange;
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setStreamCaching(true);
    context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir");
    context.getStreamCachingStrategy().setSpoolThreshold(16);
    return context;
  }
  @Before public void setUp() throws Exception {
    super.setUp();
    deleteDirectory("target/cachedir");
    createDirectory("target/cachedir");
    exchange=new DefaultExchange(context);
    UnitOfWork uow=new DefaultUnitOfWork(exchange);
    exchange.setUnitOfWork(uow);
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  private static String toString(  InputStream input) throws IOException {
    BufferedReader reader=IOHelper.buffered(new InputStreamReader(input));
    CollectionStringBuffer builder=new CollectionStringBuffer();
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        return builder.toString();
      }
      builder.append(line);
    }
  }
  @Test public void testCachedStreamAccessStreamWhenExchangeOnCompletion() throws Exception {
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange,false);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    assertTrue("The file name should start with cos",files[0].startsWith("cos"));
    InputStream is=cos.getWrappedInputStream();
    exchange.getUnitOfWork().done(exchange);
    String temp=toString(is);
    assertEquals("Get a wrong stream content",temp,TEST_STRING);
    IOHelper.close(is);
    files=file.list();
    assertEquals("we should have a temp file",0,files.length);
    IOHelper.close(cos);
  }
  @Test public void testCacheStreamToFileAndCloseStream() throws Exception {
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    assertTrue("The file name should start with cos",files[0].startsWith("cos"));
    StreamCache cache=cos.newStreamCache();
    assertTrue("Should get the FileInputStreamCache",cache instanceof FileInputStreamCache);
    String temp=toString((InputStream)cache);
    ((InputStream)cache).close();
    files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    exchange.getUnitOfWork().done(exchange);
    try {
      cache.reset();
      fail("we expect the exception here");
    }
 catch (    Exception exception) {
    }
    files=file.list();
    assertEquals("we should have no temp file",0,files.length);
    IOHelper.close(cos);
  }
  @Test public void testCacheStreamToFileAndCloseStreamEncrypted() throws Exception {
    context.getStreamCachingStrategy().setSpoolChiper("RC4");
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    cos.flush();
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    assertTrue("The content is written",new File(file,files[0]).length() > 10);
    java.io.FileInputStream tmpin=new java.io.FileInputStream(new File(file,files[0]));
    String temp=toString(tmpin);
    assertTrue("The content is not encrypted",temp.length() > 0 && temp.indexOf("aaa") < 0);
    tmpin.close();
    StreamCache cache=cos.newStreamCache();
    assertTrue("Should get the FileInputStreamCache",cache instanceof FileInputStreamCache);
    temp=toString((InputStream)cache);
    ((InputStream)cache).close();
    assertEquals("we should have a temp file",1,files.length);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    exchange.getUnitOfWork().done(exchange);
    try {
      cache.reset();
      fail("we expect the exception here");
    }
 catch (    Exception exception) {
    }
    files=file.list();
    assertEquals("we should have no temp file",0,files.length);
    IOHelper.close(cos);
  }
  @Test public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    assertTrue("The file name should start with cos",files[0].startsWith("cos"));
    StreamCache cache=cos.newStreamCache();
    assertTrue("Should get the FileInputStreamCache",cache instanceof FileInputStreamCache);
    String temp=toString((InputStream)cache);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    cache.reset();
    temp=toString((InputStream)cache);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    ((InputStream)cache).close();
    files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    exchange.getUnitOfWork().done(exchange);
    files=file.list();
    assertEquals("we should have no temp file",0,files.length);
    IOHelper.close(cos);
  }
  @Test public void testCacheStreamToMemory() throws Exception {
    context.getStreamCachingStrategy().setSpoolThreshold(1024);
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have no temp file",0,files.length);
    StreamCache cache=cos.newStreamCache();
    assertTrue("Should get the InputStreamCache",cache instanceof InputStreamCache);
    String temp=IOConverter.toString((InputStream)cache,null);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    IOHelper.close(cos);
  }
  @Test public void testCacheStreamToMemoryAsDiskIsDisabled() throws Exception {
    context.getStreamCachingStrategy().setSpoolThreshold(-1);
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have no temp file",0,files.length);
    StreamCache cache=cos.newStreamCache();
    assertTrue("Should get the InputStreamCache",cache instanceof InputStreamCache);
    String temp=IOConverter.toString((InputStream)cache,null);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    exchange.getUnitOfWork().done(exchange);
    IOHelper.close(cos);
  }
  @Test public void testCachedOutputStreamCustomBufferSize() throws Exception {
    context.getStreamCachingStrategy().setBufferSize(8192);
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange);
    cos.write(TEST_STRING.getBytes("UTF-8"));
    assertEquals("we should have a custom buffer size",cos.getStrategyBufferSize(),8192);
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    assertTrue("The file name should start with cos",files[0].startsWith("cos"));
    StreamCache cache=cos.newStreamCache();
    assertTrue("Should get the FileInputStreamCache",cache instanceof FileInputStreamCache);
    String temp=toString((InputStream)cache);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    cache.reset();
    temp=toString((InputStream)cache);
    assertEquals("Cached a wrong file",temp,TEST_STRING);
    ((InputStream)cache).close();
    files=file.list();
    assertEquals("we should have a temp file",1,files.length);
    exchange.getUnitOfWork().done(exchange);
    files=file.list();
    assertEquals("we should have no temp file",0,files.length);
    IOHelper.close(cos);
  }
  @Test public void testCachedOutputStreamEmptyInput() throws Exception {
    context.start();
    CachedOutputStream cos=new CachedOutputStream(exchange,false);
    cos.write("".getBytes("UTF-8"));
    InputStream is=cos.getWrappedInputStream();
    assertNotNull(is);
    ByteArrayOutputStream bos=new ByteArrayOutputStream(16);
    IOHelper.copy(is,bos);
    assertNotNull(bos);
    byte[] data=bos.toByteArray();
    assertEquals(0,data.length);
    IOHelper.close(bos);
    IOHelper.close(cos);
  }
}
