public class BeanComponentMissingParenthesisTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyContactBean());
    return jndi;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testCorrect() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean?method=concat(${body}, ${header.foo})").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello=Camel");
    template.sendBodyAndHeader("direct:start","Hello","foo","Camel");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMissing() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean?method=concat(${body}, ${header.foo}").to("mock:result");
      }
    }
);
    context.start();
    try {
      template.sendBodyAndHeader("direct:start","Hello","foo","Camel");
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Method should end with parenthesis, was concat(${body}, ${header.foo}",iae.getMessage());
    }
  }
  @Test public void testInvalidName() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean?method=--concat(${body}, ${header.foo})").to("mock:result");
      }
    }
);
    context.start();
    try {
      template.sendBodyAndHeader("direct:start","Hello","foo","Camel");
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(MethodNotFoundException.class,e.getCause());
    }
  }
  public String doSomething(  String body,  String header){
    return body + "=" + header;
  }
}
