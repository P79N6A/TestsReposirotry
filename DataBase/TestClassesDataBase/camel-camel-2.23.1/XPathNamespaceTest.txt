/** 
 * XPath with namespace test
 */
public class XPathNamespaceTest extends ContextTestSupport {
  @Test public void testXPathWithNamespace() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:55");
    mock.expectedBodiesReceived("<number xmlns=\"http://acme.com/cheese\">55</number>");
    template.sendBody("direct:in","<number xmlns=\"http://acme.com/cheese\">55</number>");
    mock.assertIsSatisfied();
  }
  @Test public void testXPathWithNamespaceOther() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:other");
    mock.expectedBodiesReceived("<number xmlns=\"http://acme.com/cheese\">99</number>");
    template.sendBody("direct:in","<number xmlns=\"http://acme.com/cheese\">99</number>");
    mock.assertIsSatisfied();
  }
  @Test public void testXPathWithNamespaceDifferentNamespace() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:other");
    mock.expectedBodiesReceived("<number xmlns=\"http://acme.com/cake\">55</number>");
    template.sendBody("direct:in","<number xmlns=\"http://acme.com/cake\">55</number>");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        Namespaces ns=new Namespaces("c","http://acme.com/cheese");
        from("direct:in").choice().when(ns.xpath("/c:number = 55",Integer.class)).to("mock:55").otherwise().to("mock:other").end();
      }
    }
;
  }
}
