@ContextConfiguration public class BindySimpleKeyValuePairUnicodeNextLineTest extends AbstractJUnit4SpringContextTests {
  private static final String URI_MOCK_RESULT="mock:result";
  private static final String URI_DIRECT_START="direct:start";
  @Produce(uri=URI_DIRECT_START) private ProducerTemplate template;
  @EndpointInject(uri=URI_MOCK_RESULT) private MockEndpoint result;
  @Test public void testUnmarshallMessage() throws Exception {
    String sent="8=FIX.4.1 37=1 38=1 40=\u0085butter";
    result.expectedMessageCount(1);
    template.sendBody(sent);
    result.assertIsSatisfied();
    UnicodeFixOrder unicodeFixOrder=result.getReceivedExchanges().get(0).getIn().getBody(UnicodeFixOrder.class);
    assertTrue(unicodeFixOrder.getId().equals("1"));
    assertTrue(unicodeFixOrder.getProduct().equals("butter"));
    assertTrue(unicodeFixOrder.getQuantity().equals("1"));
  }
public static class ContextConfig extends RouteBuilder {
    BindyKeyValuePairDataFormat kvpBindyDataFormat=new BindyKeyValuePairDataFormat(UnicodeFixOrder.class);
    public void configure(){
      from(URI_DIRECT_START).unmarshal(kvpBindyDataFormat).to(URI_MOCK_RESULT);
    }
  }
@Message(keyValuePairSeparator="=",pairSeparator=" ",type="FIX",version="4.1") public static class UnicodeFixOrder {
    @KeyValuePairField(tag=37) private String id;
    @KeyValuePairField(tag=40) private String product;
    @KeyValuePairField(tag=38) private String quantity;
    public String getId(){
      return id;
    }
    public String getProduct(){
      return product;
    }
    public String getQuantity(){
      return quantity;
    }
    public void setQuantity(    String quantity){
      this.quantity=quantity;
    }
  }
}
