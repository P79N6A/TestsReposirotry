/** 
 */
public class SplitterOnPrepareTest extends ContextTestSupport {
  @Test public void testSplitterOnPrepare() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(2);
    getMockEndpoint("mock:a").allMessages().body(String.class).isEqualTo("1 Tony the Tiger");
    List<Animal> animals=new ArrayList<>();
    animals.add(new Animal(1,"Tiger"));
    animals.add(new Animal(1,"Tiger"));
    template.sendBody("direct:start",animals);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body()).onPrepare(new FixNamePrepare()).to("direct:a");
        from("direct:a").process(new ProcessorA()).to("mock:a");
      }
    }
;
  }
public static class ProcessorA implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Animal body=exchange.getIn().getBody(Animal.class);
      assertEquals(1,body.getId());
      assertEquals("Tony the Tiger",body.getName());
    }
  }
public static final class FixNamePrepare implements Processor {
    public void process(    Exchange exchange) throws Exception {
      Animal body=exchange.getIn().getBody(Animal.class);
      assertEquals(1,body.getId());
      assertEquals("Tiger",body.getName());
      body.setName("Tony the Tiger");
    }
  }
}
