/** 
 * Unit test for Camel attachments and Mail attachments.
 */
public class MailAttachmentRedeliveryTest extends CamelTestSupport {
  private final List<String> names=new ArrayList<>();
  @Test public void testSendAndReceiveMailWithAttachmentsRedelivery() throws Exception {
    Mailbox.clearAll();
    Endpoint endpoint=context.getEndpoint("smtp://james@mymailserver.com?password=secret");
    Exchange exchange=endpoint.createExchange();
    Message in=exchange.getIn();
    in.setBody("Hello World");
    in.addAttachment("logo.jpeg",new DataHandler(new FileDataSource("src/test/data/logo.jpeg")));
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.assertIsSatisfied();
    Exchange out=mock.assertExchangeReceived(0);
    assertEquals("Hello World",out.getIn().getBody(String.class));
    Map<String,DataHandler> attachments=out.getIn().getAttachments();
    assertNotNull("Should have attachments",attachments);
    assertEquals(1,attachments.size());
    DataHandler handler=out.getIn().getAttachment("logo.jpeg");
    assertNotNull("The logo should be there",handler);
    boolean match1="image/jpeg; name=logo.jpeg".equals(handler.getContentType());
    boolean match2="application/octet-stream; name=logo.jpeg".equals(handler.getContentType());
    assertTrue("Should match 1 or 2",match1 || match2);
    assertEquals("Handler name should be the file name","logo.jpeg",handler.getName());
    producer.stop();
    assertEquals(3,names.size());
    assertEquals("logo.jpeg",names.get(0));
    assertEquals("logo.jpeg",names.get(1));
    assertEquals("logo.jpeg",names.get(2));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        onException(IllegalArgumentException.class).maximumRedeliveries(3).redeliveryDelay(0);
        from("pop3://james@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100").process(new Processor(){
          private int counter;
          @Override public void process(          Exchange exchange) throws Exception {
            Map<String,DataHandler> map=exchange.getIn().getAttachments();
            assertNotNull(map);
            assertEquals(1,map.size());
            names.add(map.keySet().iterator().next());
            if (counter++ < 2) {
              throw new IllegalArgumentException("Forced");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
}
