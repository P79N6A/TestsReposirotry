public class DynamicTableIdTest extends BigQueryTestSupport {
  private static final String TABLE_ID_1="dynamic_table_1";
  private static final String TABLE_ID_2="dynamic_table_2";
  @EndpointInject(uri="direct:in") private Endpoint directIn;
  @EndpointInject(uri="google-bigquery:{{project.id}}:{{bigquery.datasetId}}") private Endpoint bigqueryEndpoint;
  @EndpointInject(uri="mock:sendResult") private MockEndpoint sendResult;
  @Produce(uri="direct:in") private ProducerTemplate producer;
  @Before public void init() throws Exception {
    createBqTable(TABLE_ID_1);
    createBqTable(TABLE_ID_2);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(directIn).routeId("DynamicTable").to(bigqueryEndpoint).to(sendResult);
      }
    }
;
  }
  @Test public void dynamicTable() throws Exception {
    Exchange exchange1=new DefaultExchange(context);
    String uuidCol11=UUID.randomUUID().toString();
    String uuidCol21=UUID.randomUUID().toString();
    exchange1.getIn().setHeader(GoogleBigQueryConstants.TABLE_ID,TABLE_ID_1);
    Map<String,String> object1=new HashMap<>();
    object1.put("col1",uuidCol11);
    object1.put("col2",uuidCol21);
    exchange1.getIn().setBody(object1);
    Exchange exchange2=new DefaultExchange(context);
    String uuidCol12=UUID.randomUUID().toString();
    String uuidCol22=UUID.randomUUID().toString();
    exchange2.getIn().setHeader(GoogleBigQueryConstants.TABLE_ID,TABLE_ID_2);
    Map<String,String> object2=new HashMap<>();
    object2.put("col1",uuidCol12);
    object2.put("col2",uuidCol22);
    exchange2.getIn().setBody(object2);
    sendResult.expectedMessageCount(2);
    producer.send(exchange1);
    producer.send(exchange2);
    sendResult.assertIsSatisfied(4000);
    assertRowExist(TABLE_ID_1,object1);
    assertRowExist(TABLE_ID_2,object2);
  }
}
