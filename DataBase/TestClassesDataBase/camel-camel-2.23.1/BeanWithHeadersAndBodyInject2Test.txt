/** 
 * @version 
 */
public class BeanWithHeadersAndBodyInject2Test extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanWithHeadersAndBodyInject2Test.class);
  private MyBean myBean=new MyBean();
  private Map<String,User> users=new HashMap<>();
  @Test public void testCannotBindToParameter() throws Exception {
    users.put("charles",new User("Charles","43"));
    users.put("claus",new User("Claus","33"));
    Exchange out=template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty("p1","abc");
        exchange.setProperty("p2",123);
        Message in=exchange.getIn();
        in.setHeader("users",users);
        in.setBody("TheBody");
      }
    }
);
    assertTrue("Should fail",out.isFailed());
    assertIsInstanceOf(RuntimeCamelException.class,out.getException());
    assertIsInstanceOf(NoTypeConversionAvailableException.class,out.getException().getCause());
  }
  @Test public void testBindToParameter() throws Exception {
    final List<String> list=new ArrayList<>();
    list.add("Charles");
    list.add("Claus");
    Exchange out=template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("TheBody");
        exchange.getIn().setHeader("users",list);
      }
    }
);
    assertFalse("Should not fail",out.isFailed());
    assertSame(list,myBean.users);
    assertEquals("TheBody",myBean.body);
  }
  @Test public void testBindToParameterIsNullValue() throws Exception {
    Exchange out=template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("TheBody");
        exchange.getIn().setHeader("users",null);
      }
    }
);
    assertFalse("Should not fail",out.isFailed());
    assertEquals("TheBody",myBean.body);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").to("bean:myBean?method=myMethod");
      }
    }
;
  }
public static class MyBean {
    public Object body;
    public List<User> users;
    public void myMethod(    @Header(value="users") List<User> users,    Object body){
      LOG.info("myMethod() method called on " + this);
      LOG.info(" users " + users);
      this.body=body;
      this.users=users;
    }
  }
public static class User {
    public String name;
    public String age;
    public User(    String name,    String age){
      this.name=name;
      this.age=age;
    }
  }
}
