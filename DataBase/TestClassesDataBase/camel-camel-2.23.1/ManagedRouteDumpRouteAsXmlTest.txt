/** 
 * @version 
 */
public class ManagedRouteDumpRouteAsXmlTest extends ManagementTestSupport {
  @Test public void testDumpAsXml() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=getRouteObjectName(mbeanServer);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
    assertEquals("myRoute",routeId);
    String xml=(String)mbeanServer.invoke(on,"dumpRouteAsXml",null,null);
    assertNotNull(xml);
    log.info(xml);
    assertTrue(xml.contains("route"));
    assertTrue(xml.contains("myRoute"));
    assertTrue(xml.contains("mock:result"));
  }
  @Test public void testCreateRouteStaticEndpointJson() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=getRouteObjectName(mbeanServer);
    String json=(String)mbeanServer.invoke(on,"createRouteStaticEndpointJson",null,null);
    assertNotNull(json);
    assertTrue(json.contains("\"myRoute\""));
    assertTrue(json.contains("{ \"uri\": \"direct://start\" }"));
    assertTrue(json.contains("{ \"uri\": \"mock://result\" }"));
  }
  static ObjectName getRouteObjectName(  MBeanServer mbeanServer) throws Exception {
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    return set.iterator().next();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("myRoute").log("Got ${body}").to("mock:result");
      }
    }
;
  }
}
