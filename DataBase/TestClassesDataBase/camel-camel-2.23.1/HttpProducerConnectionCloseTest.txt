/** 
 * Unit test that show custom header filter useful to send Connection Close header
 * @version 
 */
public class HttpProducerConnectionCloseTest extends BaseHttpTest {
  @EndpointInject(uri="mock:result") protected MockEndpoint mockResultEndpoint;
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/myget",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void noDataDefaultIsGet() throws Exception {
    HttpComponent component=context.getComponent("http4",HttpComponent.class);
    component.setConnectionTimeToLive(1000L);
    HttpEndpoint endpoiont=(HttpEndpoint)component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/myget?headerFilterStrategy=#myFilter");
    HttpProducer producer=new HttpProducer(endpoiont);
    Exchange exchange=producer.createExchange();
    exchange.getIn().setBody(null);
    exchange.getIn().setHeader("connection",HTTP.CONN_CLOSE);
    producer.start();
    producer.process(exchange);
    producer.stop();
    assertEquals(HTTP.CONN_CLOSE,exchange.getOut().getHeader("connection"));
    assertExchange(exchange);
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=new JndiRegistry(createJndiContext());
    ConnectionCloseHeaderFilter connectionCloseFilterStrategy=new ConnectionCloseHeaderFilter();
    jndi.bind("myFilter",connectionCloseFilterStrategy);
    return jndi;
  }
class ConnectionCloseHeaderFilter extends HttpHeaderFilterStrategy {
    @Override protected void initialize(){
      super.initialize();
      getOutFilter().remove("connection");
    }
  }
}
