/** 
 */
public class PojoProduceInterceptEndpointTest extends Assert {
  @Test public void testPojoProduceInterceptAlreadyStarted() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("direct:start").to("language:simple:${body}${body}");
        from("direct:start").to("mock:result");
      }
    }
);
    context.start();
    MyBean bean=context.getInjector().newInstance(MyBean.class);
    MockEndpoint mock=context.getEndpoint("mock:result",MockEndpoint.class);
    mock.expectedBodiesReceived("WorldWorld");
    Object reply=bean.doSomething("World");
    assertEquals("WorldWorld",reply);
    mock.assertIsSatisfied();
    context.stop();
  }
  @Test public void testPojoProduceInterceptNotStarted() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("direct:start").to("language:simple:${body}${body}");
        from("direct:start").to("mock:result");
      }
    }
);
    MyBean bean=context.getInjector().newInstance(MyBean.class);
    context.start();
    MockEndpoint mock=context.getEndpoint("mock:result",MockEndpoint.class);
    mock.expectedBodiesReceived("WorldWorld");
    Object reply=bean.doSomething("World");
    assertEquals("WorldWorld",reply);
    mock.assertIsSatisfied();
    context.stop();
  }
public static class MyBean {
    @Produce(uri="direct:start") Producer producer;
    public Object doSomething(    String body) throws Exception {
      Exchange exchange=producer.getEndpoint().createExchange();
      exchange.getIn().setBody(body);
      producer.process(exchange);
      return exchange.hasOut() ? exchange.getOut().getBody() : exchange.getIn().getBody();
    }
  }
}
