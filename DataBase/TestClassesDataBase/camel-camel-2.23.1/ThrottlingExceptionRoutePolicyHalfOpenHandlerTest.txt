public class ThrottlingExceptionRoutePolicyHalfOpenHandlerTest extends ContextTestSupport {
  private static Logger log=LoggerFactory.getLogger(ThrottlingExceptionRoutePolicyHalfOpenHandlerTest.class);
  private String url="direct:start?block=false";
  private MockEndpoint result;
  @Before public void setUp() throws Exception {
    super.setUp();
    this.setUseRouteBuilder(true);
    result=getMockEndpoint("mock:result");
    context.getShutdownStrategy().setTimeout(1);
  }
  @Test public void testHalfOpenCircuit() throws Exception {
    result.expectedMessageCount(2);
    List<String> bodies=Arrays.asList("Message One","Message Two");
    result.expectedBodiesReceivedInAnyOrder(bodies);
    result.whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        String msg=exchange.getIn().getBody(String.class);
        exchange.setException(new ThrottlingException(msg));
      }
    }
);
    sendMessage("Message One");
    sendMessage("Message Two");
    final ServiceSupport consumer=(ServiceSupport)context.getRoute("foo").getConsumer();
    await().atMost(2,TimeUnit.SECONDS).until(consumer::isSuspended);
    log.debug("sending message three");
    sendMessage("Message Three");
    assertMockEndpointsSatisfied();
    result.reset();
    result.expectedMessageCount(1);
    bodies=Arrays.asList("Message Four");
    result.expectedBodiesReceivedInAnyOrder(bodies);
    await().atMost(2,TimeUnit.SECONDS).until(consumer::isStarted);
    log.debug("sending message four");
    sendMessage("Message Four");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        int threshold=2;
        long failureWindow=30;
        long halfOpenAfter=250;
        ThrottlingExceptionRoutePolicy policy=new ThrottlingExceptionRoutePolicy(threshold,failureWindow,halfOpenAfter,null);
        policy.setHalfOpenHandler(new AlwaysCloseHandler());
        from(url).routeId("foo").routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result");
      }
    }
;
  }
public class AlwaysCloseHandler implements ThrottlingExceptionHalfOpenHandler {
    @Override public boolean isReadyToBeClosed(){
      return true;
    }
  }
  protected void sendMessage(  String bodyText){
    try {
      template.sendBody(url,bodyText);
    }
 catch (    Exception e) {
      log.debug("Error sending:" + e.getCause().getMessage());
    }
  }
}
