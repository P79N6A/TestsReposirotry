@RunWith(MockitoJUnitRunner.class) public class WebsocketConsumerTest {
  private static final String CONNECTION_KEY="random-connection-key";
  private static final String MESSAGE="message";
  private static final InetSocketAddress ADDRESS=InetSocketAddress.createUnresolved("127.0.0.1",12345);
  @Mock private WebsocketEndpoint endpoint;
  @Mock private ExceptionHandler exceptionHandler;
  @Mock private Processor processor;
  @Mock private Exchange exchange;
  @Mock private Message outMessage;
  private Exception exception=new Exception("BAD NEWS EVERYONE!");
  private WebsocketConsumer websocketConsumer;
  @Before public void setUp() throws Exception {
    websocketConsumer=new WebsocketConsumer(endpoint,processor);
    websocketConsumer.setExceptionHandler(exceptionHandler);
  }
  @Test public void testSendExchange() throws Exception {
    when(endpoint.createExchange()).thenReturn(exchange);
    when(exchange.getIn()).thenReturn(outMessage);
    websocketConsumer.sendMessage(CONNECTION_KEY,MESSAGE,ADDRESS);
    InOrder inOrder=inOrder(endpoint,exceptionHandler,processor,exchange,outMessage);
    inOrder.verify(endpoint,times(1)).createExchange();
    inOrder.verify(exchange,times(1)).getIn();
    inOrder.verify(outMessage,times(1)).setHeader(WebsocketConstants.CONNECTION_KEY,CONNECTION_KEY);
    inOrder.verify(exchange,times(1)).getIn();
    inOrder.verify(outMessage,times(1)).setBody(MESSAGE);
    inOrder.verify(processor,times(1)).process(exchange);
    inOrder.verify(exchange,times(1)).getException();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testSendExchangeWithException() throws Exception {
    when(endpoint.createExchange()).thenReturn(exchange);
    when(exchange.getIn()).thenReturn(outMessage);
    doThrow(exception).when(processor).process(exchange);
    when(exchange.getException()).thenReturn(exception);
    websocketConsumer.sendMessage(CONNECTION_KEY,MESSAGE,ADDRESS);
    InOrder inOrder=inOrder(endpoint,exceptionHandler,processor,exchange,outMessage);
    inOrder.verify(endpoint,times(1)).createExchange();
    inOrder.verify(exchange,times(1)).getIn();
    inOrder.verify(outMessage,times(1)).setHeader(WebsocketConstants.CONNECTION_KEY,CONNECTION_KEY);
    inOrder.verify(exchange,times(1)).getIn();
    inOrder.verify(outMessage,times(1)).setBody(MESSAGE);
    inOrder.verify(processor,times(1)).process(exchange);
    inOrder.verify(exchange,times(2)).getException();
    inOrder.verify(exceptionHandler,times(1)).handleException(any(),eq(exchange),eq(exception));
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testSendExchangeWithExchangeExceptionIsNull() throws Exception {
    when(endpoint.createExchange()).thenReturn(exchange);
    when(exchange.getIn()).thenReturn(outMessage);
    doThrow(exception).when(processor).process(exchange);
    when(exchange.getException()).thenReturn(null);
    websocketConsumer.sendMessage(CONNECTION_KEY,MESSAGE,ADDRESS);
    InOrder inOrder=inOrder(endpoint,exceptionHandler,processor,exchange,outMessage);
    inOrder.verify(endpoint,times(1)).createExchange();
    inOrder.verify(exchange,times(1)).getIn();
    inOrder.verify(outMessage,times(1)).setHeader(WebsocketConstants.CONNECTION_KEY,CONNECTION_KEY);
    inOrder.verify(exchange,times(1)).getIn();
    inOrder.verify(outMessage,times(1)).setBody(MESSAGE);
    inOrder.verify(processor,times(1)).process(exchange);
    inOrder.verify(exchange,times(1)).getException();
    inOrder.verifyNoMoreInteractions();
  }
}
