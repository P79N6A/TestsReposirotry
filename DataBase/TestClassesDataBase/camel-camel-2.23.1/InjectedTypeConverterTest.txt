@RunWith(Arquillian.class) public class InjectedTypeConverterTest {
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(InjectedTypeConverterRoute.class).addClass(InjectedTypeConverter.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Produces @ApplicationScoped @Named("properties") private static PropertiesComponent configuration(){
    Properties properties=new Properties();
    properties.put("property1","value 1");
    properties.put("property2","value 2");
    PropertiesComponent component=new PropertiesComponent();
    component.setInitialProperties(properties);
    return component;
  }
  @Test public void sendMessageToInbound(  @Uri("direct:inbound") ProducerTemplate inbound,  @Uri("mock:outbound") MockEndpoint outbound) throws InterruptedException {
    outbound.expectedMessageCount(1);
    TypeConverterInput input=new TypeConverterInput();
    input.setProperty("property value is [{{property1}}]");
    inbound.sendBody(input);
    assertIsSatisfied(2L,TimeUnit.SECONDS,outbound);
    assertThat(outbound.getExchanges().get(0).getIn().getBody(TypeConverterOutput.class).getProperty(),is(equalTo("property value is [value 1]")));
  }
  @Test public void convertWithTypeConverter(  TypeConverter converter) throws NoTypeConversionAvailableException {
    TypeConverterInput input=new TypeConverterInput();
    input.setProperty("property value is [{{property2}}]");
    TypeConverterOutput output=converter.mandatoryConvertTo(TypeConverterOutput.class,input);
    assertThat(output.getProperty(),is(equalTo("property value is [value 2]")));
  }
}
