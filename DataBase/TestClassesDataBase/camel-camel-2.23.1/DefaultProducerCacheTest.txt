/** 
 * @version 
 */
public class DefaultProducerCacheTest extends ContextTestSupport {
  private final AtomicInteger stopCounter=new AtomicInteger();
  private final AtomicInteger shutdownCounter=new AtomicInteger();
  @Test public void testCacheProducerAcquireAndRelease() throws Exception {
    ProducerCache cache=new ProducerCache(this,context);
    cache.start();
    assertEquals("Size should be 0",0,cache.size());
    for (int i=0; i < 1003; i++) {
      Endpoint e=context.getEndpoint("direct:queue:" + i);
      Producer p=cache.acquireProducer(e);
      cache.releaseProducer(e,p);
    }
    cache.cleanUp();
    assertEquals("Size should be 1000",1000,cache.size());
    cache.stop();
  }
  @Test public void testCacheStopExpired() throws Exception {
    ProducerCache cache=new ProducerCache(this,context,5);
    cache.start();
    assertEquals("Size should be 0",0,cache.size());
    for (int i=0; i < 8; i++) {
      Endpoint e=new MyEndpoint(true,i);
      Producer p=cache.acquireProducer(e);
      cache.releaseProducer(e,p);
    }
    cache.cleanUp();
    assertEquals("Size should be 5",5,cache.size());
    Thread.sleep(1000);
    assertEquals(3,stopCounter.get());
    cache.stop();
    assertEquals(8,stopCounter.get());
  }
  @Test public void testReleaseProducerInvokesStopAndShutdownByNonSingletonProducers() throws Exception {
    ProducerCache cache=new ProducerCache(this,context,1);
    cache.start();
    assertEquals("Size should be 0",0,cache.size());
    for (int i=0; i < 3; i++) {
      Endpoint e=new MyEndpoint(false,i);
      Producer p=cache.acquireProducer(e);
      cache.releaseProducer(e,p);
    }
    assertEquals("Size should be 0",0,cache.size());
    assertEquals(3,stopCounter.get());
    assertEquals(3,shutdownCounter.get());
    cache.stop();
    assertEquals(3,stopCounter.get());
    assertEquals(3,shutdownCounter.get());
  }
  @Test public void testExtendedStatistics() throws Exception {
    ProducerCache cache=new ProducerCache(this,context,5);
    cache.setExtendedStatistics(true);
    cache.start();
    assertEquals("Size should be 0",0,cache.size());
    Endpoint e=new MyEndpoint(true,1);
    Producer p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    e=new MyEndpoint(true,1);
    p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    e=new MyEndpoint(true,2);
    p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    e=new MyEndpoint(true,2);
    p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    e=new MyEndpoint(true,2);
    p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    e=new MyEndpoint(true,3);
    p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    e=new MyEndpoint(true,4);
    p=cache.acquireProducer(e);
    cache.releaseProducer(e,p);
    assertEquals("Size should be 4",4,cache.size());
    EndpointUtilizationStatistics stats=cache.getEndpointUtilizationStatistics();
    assertEquals(4,stats.size());
    Map<String,Long> recent=stats.getStatistics();
    assertEquals(2,recent.get("my://1").longValue());
    assertEquals(3,recent.get("my://2").longValue());
    assertEquals(1,recent.get("my://3").longValue());
    assertEquals(1,recent.get("my://4").longValue());
    assertNull(recent.get("my://5"));
    cache.stop();
  }
private final class MyEndpoint extends DefaultEndpoint {
    private final boolean isSingleton;
    private final int number;
    private MyEndpoint(    boolean isSingleton,    int number){
      this.isSingleton=isSingleton;
      this.number=number;
    }
    @Override public Producer createProducer() throws Exception {
      return new MyProducer(this);
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    @Override public boolean isSingleton(){
      return isSingleton;
    }
    @Override public String getEndpointUri(){
      return "my://" + number;
    }
  }
private final class MyProducer extends DefaultProducer {
    MyProducer(    Endpoint endpoint){
      super(endpoint);
    }
    @Override public void process(    Exchange exchange) throws Exception {
    }
    @Override protected void doStop() throws Exception {
      stopCounter.incrementAndGet();
    }
    @Override protected void doShutdown() throws Exception {
      shutdownCounter.incrementAndGet();
    }
  }
}
