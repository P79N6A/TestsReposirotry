public class HttpProxyRouteTest extends BaseJettyTest {
  private int size=10;
  @Test public void testHttpProxy() throws Exception {
    log.info("Sending " + size + " messages to a http endpoint which is proxied/bridged");
    StopWatch watch=new StopWatch();
    for (int i=0; i < size; i++) {
      String out=template.requestBody("http://localhost:{{port}}?foo=" + i,null,String.class);
      assertEquals("Bye " + i,out);
    }
    log.info("Time taken: " + TimeUtils.printDuration(watch.taken()));
  }
  @Test public void testHttpProxyWithDifferentPath() throws Exception {
    String out=template.requestBody("http://localhost:{{port}}/proxy",null,String.class);
    assertEquals("/otherEndpoint",out);
    out=template.requestBody("http://localhost:{{port}}/proxy/path",null,String.class);
    assertEquals("/otherEndpoint/path",out);
  }
  @Test public void testHttpProxyHostHeader() throws Exception {
    String out=template.requestBody("http://localhost:{{port}}/proxyServer",null,String.class);
    assertEquals("Get a wrong host header","localhost:" + getPort2(),out);
  }
  @Test public void testHttpProxyFormHeader() throws Exception {
    String out=template.requestBodyAndHeader("http://localhost:{{port}}/form","username=abc&pass=password",Exchange.CONTENT_TYPE,"application/x-www-form-urlencoded",String.class);
    assertEquals("Get a wrong response message","username=abc&pass=password",out);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("jetty://http://localhost:{{port}}").to("http://localhost:{{port}}/bye?throwExceptionOnFailure=false&bridgeEndpoint=true");
        from("jetty://http://localhost:{{port}}/proxy?matchOnUriPrefix=true").to("http://localhost:{{port}}/otherEndpoint?throwExceptionOnFailure=false&bridgeEndpoint=true");
        from("jetty://http://localhost:{{port}}/bye").transform(header("foo").prepend("Bye "));
        from("jetty://http://localhost:{{port}}/otherEndpoint?matchOnUriPrefix=true").transform(header(Exchange.HTTP_URI));
        from("jetty://http://localhost:{{port}}/proxyServer").to("http://localhost:{{port2}}/host?bridgeEndpoint=true");
        from("jetty://http://localhost:{{port2}}/host").transform(header("host"));
        from("jetty://http://localhost:{{port}}/form?bridgeEndpoint=true").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            Message in=exchange.getIn();
            String request=in.getBody(String.class);
            exchange.getOut().setBody(request);
          }
        }
);
      }
    }
;
  }
}
