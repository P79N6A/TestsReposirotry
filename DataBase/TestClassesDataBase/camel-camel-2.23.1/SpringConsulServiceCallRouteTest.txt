public abstract class SpringConsulServiceCallRouteTest extends ContainerAwareSpringTestSupport {
  private AgentClient client;
  private List<Registration> registrations;
  @Override public void doPreSetup() throws Exception {
    super.doPreSetup();
    this.client=Consul.builder().withUrl(consulUrl()).build().agentClient();
    this.registrations=Arrays.asList(ImmutableRegistration.builder().id("service-1-1").name("http-service-1").address("127.0.0.1").port(9011).build(),ImmutableRegistration.builder().id("service-1-2").name("http-service-1").address("127.0.0.1").port(9012).build(),ImmutableRegistration.builder().id("service-1-3").name("http-service-1").address("127.0.0.1").port(9013).build(),ImmutableRegistration.builder().id("service-2-1").name("http-service-2").address("127.0.0.1").port(9021).build(),ImmutableRegistration.builder().id("service-2-2").name("http-service-2").address("127.0.0.1").port(9022).build(),ImmutableRegistration.builder().id("service-2-3").name("http-service-2").address("127.0.0.1").port(9023).build());
    this.registrations.forEach(client::register);
  }
  @Override public void doPostTearDown() throws Exception {
    super.doPostTearDown();
    if (client != null) {
      registrations.forEach(r -> client.deregister(r.getId()));
    }
  }
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:result-1").expectedMessageCount(2);
    getMockEndpoint("mock:result-1").expectedBodiesReceivedInAnyOrder("service-1 9012","service-1 9013");
    getMockEndpoint("mock:result-2").expectedMessageCount(2);
    getMockEndpoint("mock:result-2").expectedBodiesReceivedInAnyOrder("service-2 9021","service-2 9023");
    template.sendBody("direct:start","service-1");
    template.sendBody("direct:start","service-1");
    template.sendBody("direct:start","service-2");
    template.sendBody("direct:start","service-2");
    assertMockEndpointsSatisfied();
  }
  protected List<DefaultServiceCallProcessor> findServiceCallProcessors(){
    Route route=context().getRoute("scall");
    Assert.assertNotNull("ServiceCall Route should be present",route);
    return findServiceCallProcessors(new ArrayList<>(),route.navigate());
  }
  protected List<DefaultServiceCallProcessor> findServiceCallProcessors(  List<DefaultServiceCallProcessor> processors,  Navigate<Processor> navigate){
    for (    Processor processor : navigate.next()) {
      if (processor instanceof DefaultServiceCallProcessor) {
        processors.add((DefaultServiceCallProcessor)processor);
      }
      if (processor instanceof ChoiceProcessor) {
        for (        FilterProcessor filter : ((ChoiceProcessor)processor).getFilters()) {
          findServiceCallProcessors(processors,filter);
        }
      }
 else       if (processor instanceof Navigate) {
        return findServiceCallProcessors(processors,(Navigate<Processor>)processor);
      }
    }
    return processors;
  }
  @Override protected GenericContainer<?> createContainer(){
    return ConsulTestSupport.consulContainer();
  }
  protected String consulUrl(){
    return String.format("http://%s:%d",getContainerHost(ConsulTestSupport.CONTAINER_NAME),getContainerPort(ConsulTestSupport.CONTAINER_NAME,Consul.DEFAULT_HTTP_PORT));
  }
}
