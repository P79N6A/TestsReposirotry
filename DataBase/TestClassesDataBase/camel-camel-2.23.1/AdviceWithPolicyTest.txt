/** 
 * @version 
 */
public class AdviceWithPolicyTest extends ContextTestSupport {
  @Test public void testAdviceWithPolicy() throws Exception {
    RouteDefinition route=context.getRouteDefinitions().get(0);
    route.adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveById("b").after().to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").policy(new MyPolicy()).to("mock:a").id("a").to("mock:b").id("b");
      }
    }
;
  }
private static final class MyPolicy implements Policy {
    @Override public void beforeWrap(    RouteContext routeContext,    ProcessorDefinition<?> definition){
    }
    @Override public Processor wrap(    RouteContext routeContext,    Processor processor){
      return processor;
    }
  }
}
