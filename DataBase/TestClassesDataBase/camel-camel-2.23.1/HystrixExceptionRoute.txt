class HystrixExceptionRoute extends RouteBuilder {
  volatile boolean throwException=true;
  @Override public void configure() throws Exception {
    from("direct:start").hystrix().hystrixConfiguration().executionTimeoutInMilliseconds(100).circuitBreakerRequestVolumeThreshold(REQUEST_VOLUME_THRESHOLD).metricsRollingStatisticalWindowInMilliseconds(1000).circuitBreakerSleepWindowInMilliseconds(2000).end().log("Hystrix processing start: ${threadName}").process(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        if (throwException) {
          LOG.info("Will throw exception");
          throw new IOException("Route has failed");
        }
 else {
          LOG.info("Will NOT throw exception");
        }
      }
    }
).log("Hystrix processing end: ${threadName}").end().log(HYSTRIX_RESPONSE_SHORT_CIRCUITED + " = ${exchangeProperty." + HYSTRIX_RESPONSE_SHORT_CIRCUITED+ "}").to("mock:result");
  }
}
