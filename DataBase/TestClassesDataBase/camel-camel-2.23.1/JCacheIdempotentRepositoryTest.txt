public class JCacheIdempotentRepositoryTest extends CamelTestSupport {
  private static final Logger LOGGER=LoggerFactory.getLogger(JCacheIdempotentRepositoryTest.class);
  private JCacheManager<Object,Boolean> cacheManager;
  private Cache<Object,Boolean> cache;
  private JCacheIdempotentRepository repository;
  @Before public void setUp() throws Exception {
    cacheManager=JCacheHelper.createManager(new JCacheConfiguration("idempotent-repository"));
    cache=cacheManager.getCache();
    repository=new JCacheIdempotentRepository();
    repository.setCache(cache);
    repository.start();
  }
  @After public void tearDown() throws Exception {
    repository.stop();
    cacheManager.close();
  }
  @Test public void addsNewKeysToCache() throws Exception {
    assertTrue(repository.add("One"));
    assertTrue(repository.add("Two"));
    assertTrue(cache.containsKey("One"));
    assertTrue(cache.containsKey("Two"));
  }
  @Test public void skipsAddingSecondTimeTheSameKey() throws Exception {
    assertTrue(repository.add("One"));
    assertFalse(repository.add("One"));
  }
  @Test public void containsPreviouslyAddedKey() throws Exception {
    assertFalse(repository.contains("One"));
    repository.add("One");
    assertTrue(repository.contains("One"));
  }
  @Test public void removesAnExistingKey() throws Exception {
    cache.clear();
    repository.add("One");
    assertTrue(repository.remove("One"));
    assertFalse(repository.contains("One"));
  }
  @Test public void doesNotRemoveMissingKey() throws Exception {
    assertFalse(repository.remove("One"));
  }
  @Test public void clearCache() throws Exception {
    assertTrue(repository.add("One"));
    assertTrue(repository.add("Two"));
    assertTrue(cache.containsKey("One"));
    assertTrue(cache.containsKey("Two"));
    repository.clear();
    assertFalse(cache.containsKey("One"));
    assertFalse(cache.containsKey("Two"));
  }
}
