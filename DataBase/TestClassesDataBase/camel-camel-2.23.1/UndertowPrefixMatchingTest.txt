public class UndertowPrefixMatchingTest extends BaseUndertowTest {
  @Test public void passOnExactPath() throws Exception {
    template.requestBody("http://localhost:{{port}}/myapp/suffix","Hello Camel!");
    getMockEndpoint("mock:myapp").expectedHeaderReceived(Exchange.HTTP_RESPONSE_CODE,200);
  }
  @Test public void failsOnPrefixPath() throws Exception {
    try {
      template.requestBody("http://localhost:{{port}}/myapp","Hello Camel!");
      fail("Should fail, something is wrong");
    }
 catch (    CamelExecutionException ex) {
      HttpOperationFailedException cause=assertIsInstanceOf(HttpOperationFailedException.class,ex.getCause());
      assertEquals(404,cause.getStatusCode());
    }
  }
  @Test public void passOnPrefixPath() throws Exception {
    template.requestBody("http://localhost:{{port}}/bar/somethingNotImportant","Hello Camel!");
    getMockEndpoint("mock:myapp").expectedHeaderReceived(Exchange.HTTP_RESPONSE_CODE,200);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("undertow:http://localhost:{{port}}/myapp/suffix").transform(bodyAs(String.class).append(" Must match exact path")).to("mock:myapp");
        from("undertow:http://localhost:{{port}}/bar?matchOnUriPrefix=true").transform(bodyAs(String.class).append(" Matching prefix")).to("mock:bar");
      }
    }
;
  }
}
