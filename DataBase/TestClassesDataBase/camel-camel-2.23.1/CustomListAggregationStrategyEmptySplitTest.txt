/** 
 */
public class CustomListAggregationStrategyEmptySplitTest extends ContextTestSupport {
  @SuppressWarnings("unchecked") @Test public void testCustomAggregationStrategy() throws Exception {
    getMockEndpoint("mock:line").expectedBodiesReceived();
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    result.message(0).body().isInstanceOf(List.class);
    List<String> body=new ArrayList<>();
    template.sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
    List<Integer> numbers=result.getExchanges().get(0).getIn().getBody(List.class);
    assertNotNull(numbers);
    assertEquals(0,numbers.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body(),new MyListOfNumbersStrategy()).to("mock:line").end().to("mock:result");
      }
    }
;
  }
  /** 
 * Our strategy is irrelevant as getValue will not be called on an empty list, however this strategy will group a list of integers.
 */
public final class MyListOfNumbersStrategy extends AbstractListAggregationStrategy<Integer> {
    @Override public Integer getValue(    Exchange exchange){
      String s=exchange.getIn().getBody(String.class);
      return Integer.valueOf(s);
    }
  }
}
