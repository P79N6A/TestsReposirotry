/** 
 * @version 
 */
public class AggregateCompletionOnlyOneTest extends ContextTestSupport {
  private MyRepo repo=new MyRepo();
  @Test public void testOnlyOne() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("A","B","C","END");
    template.sendBodyAndHeader("direct:start","A","id","foo");
    template.sendBodyAndHeader("direct:start","B","id","foo");
    template.sendBodyAndHeader("direct:start","C","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    assertMockEndpointsSatisfied();
    assertEquals(4,repo.getGet());
    assertEquals(0,repo.getAdd());
    assertEquals(0,repo.getRemove());
    assertEquals(4,repo.getConfirm());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new BodyInAggregatingStrategy()).aggregationRepository(repo).completionSize(1).to("mock:aggregated");
      }
    }
;
  }
private class MyRepo implements AggregationRepository {
    private int add;
    private int get;
    private int remove;
    private int confirm;
    @Override public Exchange add(    CamelContext camelContext,    String key,    Exchange exchange){
      add++;
      return null;
    }
    @Override public Exchange get(    CamelContext camelContext,    String key){
      get++;
      return null;
    }
    @Override public void remove(    CamelContext camelContext,    String key,    Exchange exchange){
      remove++;
    }
    @Override public void confirm(    CamelContext camelContext,    String exchangeId){
      confirm++;
    }
    @Override public Set<String> getKeys(){
      return null;
    }
    public int getAdd(){
      return add;
    }
    public int getGet(){
      return get;
    }
    public int getRemove(){
      return remove;
    }
    public int getConfirm(){
      return confirm;
    }
  }
}
