/** 
 * @version 
 */
public class GenericFileConverterTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/gf");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testToFile() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/gf?initialDelay=0&delay=10").convertBodyTo(File.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(File.class);
    template.sendBodyAndHeader("file://target/gf","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testToString() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/gf?initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(String.class);
    mock.message(0).body().isEqualTo("Hello World");
    template.sendBodyAndHeader("file://target/gf","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testToBytes() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/gf?initialDelay=0&delay=10").convertBodyTo(byte[].class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(byte[].class);
    mock.message(0).body(String.class).isEqualTo("Hello World");
    template.sendBodyAndHeader("file://target/gf","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testToSerializable() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/gf?initialDelay=0&delay=10").convertBodyTo(Serializable.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Serializable.class);
    mock.message(0).body(String.class).isEqualTo("Hello World");
    template.sendBodyAndHeader("file://target/gf","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testToInputStream() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/gf?initialDelay=0&delay=10").convertBodyTo(InputStream.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(InputStream.class);
    mock.message(0).body(String.class).isEqualTo("Hello World");
    template.sendBodyAndHeader("file://target/gf","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testToFileInputStream() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/gf?initialDelay=0&delay=10").convertBodyTo(InputStream.class).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            Object body=exchange.getIn().getBody();
            assertIsInstanceOf(BufferedInputStream.class,body);
          }
        }
).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(BufferedInputStream.class);
    mock.message(0).body(String.class).isEqualTo("Hello World");
    template.sendBodyAndHeader("file://target/gf","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
}
