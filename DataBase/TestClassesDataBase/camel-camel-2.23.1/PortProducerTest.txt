@RunWith(MockitoJUnitRunner.class) public class PortProducerTest extends NeutronProducerTestSupport {
  private Port dummyPort;
  @Mock private Port testOSport;
  @Mock private PortService portService;
  @Captor private ArgumentCaptor<Port> portCaptor;
  @Captor private ArgumentCaptor<String> portIdCaptor;
  @Before public void setUp(){
    when(networkingService.port()).thenReturn(portService);
    producer=new PortProducer(endpoint,client);
    when(portService.create(any())).thenReturn(testOSport);
    when(portService.get(anyString())).thenReturn(testOSport);
    List<Port> getAllList=new ArrayList<>();
    getAllList.add(testOSport);
    getAllList.add(testOSport);
    doReturn(getAllList).when(portService).list();
    dummyPort=createPort();
    when(testOSport.getName()).thenReturn(dummyPort.getName());
    when(testOSport.getNetworkId()).thenReturn(dummyPort.getNetworkId());
    when(testOSport.getMacAddress()).thenReturn(dummyPort.getMacAddress());
    when(testOSport.getDeviceId()).thenReturn(dummyPort.getDeviceId());
    when(testOSport.getId()).thenReturn(UUID.randomUUID().toString());
  }
  @Test public void createTest() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(OpenstackConstants.NAME,dummyPort.getName());
    msg.setHeader(NeutronConstants.TENANT_ID,dummyPort.getTenantId());
    msg.setHeader(NeutronConstants.NETWORK_ID,dummyPort.getNetworkId());
    msg.setHeader(NeutronConstants.MAC_ADDRESS,dummyPort.getMacAddress());
    msg.setHeader(NeutronConstants.DEVICE_ID,dummyPort.getDeviceId());
    producer.process(exchange);
    verify(portService).create(portCaptor.capture());
    assertEqualsPort(dummyPort,portCaptor.getValue());
    assertNotNull(msg.getBody(Port.class).getId());
  }
  @Test public void getTest() throws Exception {
    final String portID="myNetID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.GET);
    msg.setHeader(OpenstackConstants.ID,portID);
    producer.process(exchange);
    verify(portService).get(portIdCaptor.capture());
    assertEquals(portID,portIdCaptor.getValue());
    assertEqualsPort(testOSport,msg.getBody(Port.class));
  }
  @Test public void getAllTest() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.GET_ALL);
    producer.process(exchange);
    final List<Port> result=msg.getBody(List.class);
    assertTrue(result.size() == 2);
    assertEquals(testOSport,result.get(0));
  }
  @Test public void updateTest() throws Exception {
    final String portID="myID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.UPDATE);
    final String newDevId="dev";
    when(testOSport.getDeviceId()).thenReturn(newDevId);
    when(testOSport.getId()).thenReturn(portID);
    when(portService.update(any())).thenReturn(testOSport);
    msg.setBody(testOSport);
    producer.process(exchange);
    verify(portService).update(portCaptor.capture());
    assertEqualsPort(testOSport,portCaptor.getValue());
    assertNotNull(portCaptor.getValue().getId());
  }
  @Test public void deleteTest() throws Exception {
    when(portService.delete(anyString())).thenReturn(ActionResponse.actionSuccess());
    final String portID="myNetID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.DELETE);
    msg.setHeader(OpenstackConstants.ID,portID);
    producer.process(exchange);
    verify(portService).delete(portIdCaptor.capture());
    assertEquals(portID,portIdCaptor.getValue());
    assertFalse(msg.isFault());
    final String failureMessage="fail";
    when(portService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failureMessage,404));
    producer.process(exchange);
    assertTrue(msg.isFault());
    assertTrue(msg.getBody(String.class).contains(failureMessage));
  }
  private Port createPort(){
    return Builders.port().name("name").tenantId("tenantID").networkId("netId").deviceId("devID").macAddress("mac").build();
  }
  private void assertEqualsPort(  Port old,  Port newPort){
    assertEquals(old.getName(),newPort.getName());
    assertEquals(old.getTenantId(),newPort.getTenantId());
    assertEquals(old.getNetworkId(),newPort.getNetworkId());
    assertEquals(old.getDeviceId(),newPort.getDeviceId());
    assertEquals(old.getMacAddress(),newPort.getMacAddress());
  }
}
