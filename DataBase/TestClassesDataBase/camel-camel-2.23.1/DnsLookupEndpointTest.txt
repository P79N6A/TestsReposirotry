/** 
 * A set of test cases to make DNS lookups.
 */
public class DnsLookupEndpointTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") protected ProducerTemplate template;
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("dns:lookup").to("mock:result");
      }
    }
;
  }
  @Test public void testDNSWithNoHeaders() throws Exception {
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBody("hello");
      fail("Should have thrown exception");
    }
 catch (    Throwable t) {
      assertTrue(t.getCause() instanceof IllegalArgumentException);
    }
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testDNSWithEmptyNameHeader() throws Exception {
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBodyAndHeader("hello","dns.name","");
      fail("Should have thrown exception");
    }
 catch (    Throwable t) {
      assertTrue(t.toString(),t.getCause() instanceof IllegalArgumentException);
    }
    resultEndpoint.assertIsSatisfied();
  }
  @Test @Ignore("Testing behind nat produces timeouts") public void testDNSWithNameHeader() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      public boolean matches(      Exchange exchange){
        Record[] record=(Record[])exchange.getIn().getBody();
        return record[0].getName().toString().equals("www.example.com.");
      }
    }
);
    Map<String,Object> headers=new HashMap<>();
    headers.put("dns.name","www.example.com");
    template.sendBodyAndHeaders("hello",headers);
    resultEndpoint.assertIsSatisfied();
  }
  @Test @Ignore("Testing behind nat produces timeouts") public void testDNSWithNameHeaderAndType() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      public boolean matches(      Exchange exchange){
        Record[] record=(Record[])exchange.getIn().getBody();
        return record[0].getName().toString().equals("www.example.com.");
      }
    }
);
    Map<String,Object> headers=new HashMap<>();
    headers.put("dns.name","www.example.com");
    headers.put("dns.type","A");
    template.sendBodyAndHeaders("hello",headers);
    resultEndpoint.assertIsSatisfied();
  }
}
