/** 
 * Custom Logger test.
 */
public class LogCustomLoggerTest extends ContextTestSupport {
  private static StringWriter sw1;
  private static StringWriter sw2;
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    sw1=new StringWriter();
    sw2=new StringWriter();
    ConsumingAppender.newAppender(LogCustomLoggerTest.class.getCanonicalName(),"LogCustomLoggerTest",Level.TRACE,event -> sw1.append(event.getLoggerName()));
    ConsumingAppender.newAppender("provided.logger1.name","logger1",Level.TRACE,event -> sw1.append(event.getLoggerName()));
    ConsumingAppender.newAppender("provided.logger2.name","logger2",Level.TRACE,event -> sw1.append(event.getLoggerName()));
    ConsumingAppender.newAppender("irrelevant.logger.name","irrelevant",Level.TRACE,event -> sw1.append(event.getLoggerName()));
    ConsumingAppender.newAppender(LogComponent.class.getCanonicalName(),"LogComponent",Level.TRACE,event -> sw2.append(event.getLoggerName()));
  }
  @Test public void testFallbackLogger() throws Exception {
    String endpointUri="log:" + LogCustomLoggerTest.class.getCanonicalName();
    template.requestBody(endpointUri,"hello");
    assertThat(sw1.toString(),equalTo(LogCustomLoggerTest.class.getCanonicalName()));
  }
  @Test public void testEndpointURIParametrizedLogger() throws Exception {
    getRegistry().put("logger1",LoggerFactory.getLogger("provided.logger1.name"));
    getRegistry().put("logger2",LoggerFactory.getLogger("provided.logger2.name"));
    template.requestBody("log:irrelevant.logger.name?logger=#logger2","hello");
    assertThat(sw1.toString(),equalTo("provided.logger2.name"));
  }
  @Test public void testEndpointURIParametrizedNotResolvableLogger(){
    getRegistry().put("logger1",LoggerFactory.getLogger("provided.logger1.name"));
    try {
      template.requestBody("log:irrelevant.logger.name?logger=#logger2","hello");
    }
 catch (    ResolveEndpointFailedException e) {
    }
  }
  @Test public void testDefaultRegistryLogger() throws Exception {
    getRegistry().put("logger",LoggerFactory.getLogger("provided.logger1.name"));
    template.requestBody("log:irrelevant.logger.name","hello");
    assertThat(sw1.toString(),equalTo("provided.logger1.name"));
  }
  @Test public void testTwoRegistryLoggers() throws Exception {
    getRegistry().put("logger1",LoggerFactory.getLogger("provided.logger1.name"));
    getRegistry().put("logger2",LoggerFactory.getLogger("provided.logger2.name"));
    template.requestBody("log:irrelevant.logger.name","hello");
    assertThat(sw1.toString(),equalTo("irrelevant.logger.name"));
    assertThat(sw2.toString(),equalTo(LogComponent.class.getName()));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    return new DefaultCamelContext(new SimpleRegistry());
  }
  private SimpleRegistry getRegistry(){
    SimpleRegistry registry=null;
    if (context.getRegistry() instanceof PropertyPlaceholderDelegateRegistry) {
      registry=(SimpleRegistry)((PropertyPlaceholderDelegateRegistry)context.getRegistry()).getRegistry();
    }
 else {
      fail("Could not determine Registry type");
    }
    return registry;
  }
}
