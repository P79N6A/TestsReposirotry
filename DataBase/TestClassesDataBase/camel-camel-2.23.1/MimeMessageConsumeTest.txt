/** 
 * @version 
 */
public class MimeMessageConsumeTest extends CamelTestSupport {
  private String body="hello world!";
  @Test public void testSendAndReceiveMails() throws Exception {
    Mailbox.clearAll();
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedMinimumMessageCount(1);
    Properties properties=new Properties();
    properties.put("mail.smtp.host","localhost");
    Session session=Session.getInstance(properties,null);
    MimeMessage message=new MimeMessage(session);
    populateMimeMessageBody(message);
    message.setRecipients(Message.RecipientType.TO,"james3@localhost");
    Transport.send(message);
    resultEndpoint.assertIsSatisfied();
    Exchange exchange=resultEndpoint.getReceivedExchanges().get(0);
    String text=exchange.getIn().getBody(String.class);
    assertEquals("mail body",body,text);
    assertNotNull("attachments got lost",exchange.getIn().getAttachments());
    for (    String s : exchange.getIn().getAttachmentNames()) {
      DataHandler dh=exchange.getIn().getAttachment(s);
      Object content=dh.getContent();
      assertNotNull("Content should not be empty",content);
      assertEquals("log4j2.properties",dh.getName());
    }
  }
  /** 
 * Lets encode a multipart mime message
 */
  protected void populateMimeMessageBody(  MimeMessage message) throws MessagingException {
    MimeBodyPart plainPart=new MimeBodyPart();
    plainPart.setText(body);
    MimeBodyPart htmlPart=new MimeBodyPart();
    htmlPart.setText("<html><body>" + body + "</body></html>");
    Multipart alt=new MimeMultipart("alternative");
    alt.addBodyPart(plainPart);
    alt.addBodyPart(htmlPart);
    Multipart mixed=new MimeMultipart("mixed");
    MimeBodyPart wrap=new MimeBodyPart();
    wrap.setContent(alt);
    mixed.addBodyPart(wrap);
    mixed.addBodyPart(plainPart);
    mixed.addBodyPart(htmlPart);
    DataSource ds;
    try {
      File f=new File(getClass().getResource("/log4j2.properties").toURI());
      ds=new FileDataSource(f);
    }
 catch (    URISyntaxException ex) {
      ds=new URLDataSource(getClass().getResource("/log4j2.properties"));
    }
    DataHandler dh=new DataHandler(ds);
    BodyPart attachmentBodyPart;
    attachmentBodyPart=new MimeBodyPart();
    attachmentBodyPart.setDataHandler(dh);
    attachmentBodyPart.setFileName(dh.getName());
    attachmentBodyPart.setDisposition(Part.ATTACHMENT);
    mixed.addBodyPart(plainPart);
    mixed.addBodyPart(htmlPart);
    mixed.addBodyPart(attachmentBodyPart);
    message.setContent(mixed);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("pop3://james3@localhost?consumer.initialDelay=100&consumer.delay=100").removeHeader("to").to("smtp://james4@localhost");
        from("pop3://james4@localhost?consumer.initialDelay=200&consumer.delay=100").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
