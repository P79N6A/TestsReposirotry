public class TransactionGatewayIntegrationTest extends AbstractBraintreeTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(TransactionGatewayIntegrationTest.class);
  private static final String PATH_PREFIX=BraintreeApiCollection.getCollection().getApiName(TransactionGatewayApiMethod.class).getName();
  private BraintreeGateway gateway;
  private final List<String> transactionIds;
  public TransactionGatewayIntegrationTest(){
    this.gateway=null;
    this.transactionIds=new LinkedList<>();
  }
  @Override protected void doPostSetup() throws Exception {
    this.gateway=getGateway();
  }
  @Override @After public void tearDown() throws Exception {
    if (this.gateway != null) {
      for (      String token : this.transactionIds) {
      }
    }
    this.transactionIds.clear();
  }
  @Test public void testSale() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> result=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(),Result.class);
    assertNotNull("sale result",result);
    assertTrue(result.isSuccess());
    LOG.info("Transaction done - id={}",result.getTarget().getId());
    this.transactionIds.add(result.getTarget().getId());
  }
  @Test public void testCloneTransaction() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    LOG.info("Transaction done - id={}",createResult.getTarget().getId());
    this.transactionIds.add(createResult.getTarget().getId());
    final Result<Transaction> cloneResult=requestBodyAndHeaders("direct://CLONETRANSACTION",null,new BraintreeHeaderBuilder().add("id",createResult.getTarget().getId()).add("cloneRequest",new TransactionCloneRequest().amount(new BigDecimal("99.00")).options().submitForSettlement(true).done()).build(),Result.class);
    assertNotNull("clone result",cloneResult);
    assertTrue(cloneResult.isSuccess());
    LOG.info("Clone Transaction done - clonedId={}, id={}",createResult.getTarget().getId(),cloneResult.getTarget().getId());
    this.transactionIds.add(cloneResult.getTarget().getId());
  }
  @Test public void testFind() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    LOG.info("Transaction done - id={}",createResult.getTarget().getId());
    this.transactionIds.add(createResult.getTarget().getId());
    final Transaction result=requestBody("direct://FIND",createResult.getTarget().getId());
    assertNotNull("find result",result);
    LOG.info("Transaction found - id={}",result.getId());
  }
  @Test public void testSubmitForSettlementWithId() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    LOG.info("Transaction done - id={}",createResult.getTarget().getId());
    this.transactionIds.add(createResult.getTarget().getId());
    final Result<Transaction> result=requestBody("direct://SUBMITFORSETTLEMENT_WITH_ID",createResult.getTarget().getId(),Result.class);
    assertNotNull("Submit For Settlement result",result);
    LOG.debug("Transaction submitted for settlement - id={}",result.getTarget().getId());
  }
  @Test public void testSubmitForSettlementWithIdAndAmount() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    LOG.info("Transaction done - id={}",createResult.getTarget().getId());
    this.transactionIds.add(createResult.getTarget().getId());
    final Result<Transaction> result=requestBodyAndHeaders("direct://SUBMITFORSETTLEMENT_WITH_ID_ADN_AMOUNT",null,new BraintreeHeaderBuilder().add("id",createResult.getTarget().getId()).add("amount",new BigDecimal("100.00")).build(),Result.class);
    assertNotNull("Submit For Settlement result",result);
    LOG.debug("Transaction submitted for settlement - id={}",result.getTarget().getId());
  }
  @Test public void testSubmitForSettlementWithRequest() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    LOG.info("Transaction done - id={}",createResult.getTarget().getId());
    this.transactionIds.add(createResult.getTarget().getId());
    final Result<Transaction> result=requestBodyAndHeaders("direct://SUBMITFORSETTLEMENT_WITH_REQUEST",null,new BraintreeHeaderBuilder().add("id",createResult.getTarget().getId()).add("request",new TransactionRequest().amount(new BigDecimal("100.00"))).build(),Result.class);
    assertNotNull("Submit For Settlement result",result);
    LOG.debug("Transaction submitted for settlement - id={}",result.getTarget().getId());
  }
  @Test public void testRefund() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    String createId=createResult.getTarget().getId();
    final Result<Transaction> settleResult=this.gateway.testing().settle(createId);
    assertNotNull("settle result",settleResult);
    assertTrue(settleResult.isSuccess());
    final Result<Transaction> result=requestBody("direct://REFUND_WITH_ID",createId,Result.class);
    assertNotNull("Request Refund result",result);
    assertTrue(result.isSuccess());
    LOG.info(String.format("Refund id(%s) created for transaction id(%s)",result.getTarget().getId(),createId));
  }
  @Test public void testRefundWithAmount() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    String createId=createResult.getTarget().getId();
    final Result<Transaction> settleResult=this.gateway.testing().settle(createId);
    assertNotNull("settle result",settleResult);
    assertTrue(settleResult.isSuccess());
    final Result<Transaction> result=requestBodyAndHeaders("direct://REFUND",null,new BraintreeHeaderBuilder().add("id",createId).add("amount",new BigDecimal("99.00")).build(),Result.class);
    assertNotNull("Request Refund result",result);
    assertTrue(result.isSuccess());
    LOG.info(String.format("Refund id(%s) created for transaction id(%s)",result.getTarget().getId(),createId));
  }
  @Test public void testRefundWithRequest() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    final Result<Transaction> createResult=requestBody("direct://SALE",new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(),Result.class);
    assertNotNull("sale result",createResult);
    assertTrue(createResult.isSuccess());
    String createId=createResult.getTarget().getId();
    final Result<Transaction> settleResult=this.gateway.testing().settle(createId);
    assertNotNull("settle result",settleResult);
    assertTrue(settleResult.isSuccess());
    final Result<Transaction> result=requestBodyAndHeaders("direct://REFUND",null,new BraintreeHeaderBuilder().add("id",createId).add("refundRequest",new TransactionRefundRequest().amount(new BigDecimal("100.00"))).build(),Result.class);
    assertNotNull("Request Refund result",result);
    assertTrue(result.isSuccess());
    LOG.info(String.format("Refund id(%s) created for transaction id(%s)",result.getTarget().getId(),createId));
  }
  @Ignore @Test public void testCancelRelease() throws Exception {
    final com.braintreegateway.Result result=requestBody("direct://CANCELRELEASE",null);
    assertNotNull("cancelRelease result",result);
    LOG.debug("cancelRelease: " + result);
  }
  @Ignore @Test public void testCredit() throws Exception {
    final com.braintreegateway.Result result=requestBody("direct://CREDIT",null);
    assertNotNull("credit result",result);
    LOG.debug("credit: " + result);
  }
  @Ignore @Test public void testHoldInEscrow() throws Exception {
    final com.braintreegateway.Result result=requestBody("direct://HOLDINESCROW",null);
    assertNotNull("holdInEscrow result",result);
    LOG.debug("holdInEscrow: " + result);
  }
  @Ignore @Test public void testReleaseFromEscrow() throws Exception {
    final com.braintreegateway.Result result=requestBody("direct://RELEASEFROMESCROW",null);
    assertNotNull("releaseFromEscrow result",result);
    LOG.debug("releaseFromEscrow: " + result);
  }
  @Ignore @Test public void testSearch() throws Exception {
    final com.braintreegateway.ResourceCollection result=requestBody("direct://SEARCH",null);
    assertNotNull("search result",result);
    LOG.debug("search: " + result);
  }
  @Ignore @Test public void testSubmitForPartialSettlement() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBraintree.id",null);
    headers.put("CamelBraintree.amount",null);
    final com.braintreegateway.Result result=requestBodyAndHeaders("direct://SUBMITFORPARTIALSETTLEMENT",null,headers);
    assertNotNull("submitForPartialSettlement result",result);
    LOG.debug("submitForPartialSettlement: " + result);
  }
  @Ignore @Test public void testVoidTransaction() throws Exception {
    final com.braintreegateway.Result result=requestBody("direct://VOIDTRANSACTION",null);
    assertNotNull("voidTransaction result",result);
    LOG.debug("voidTransaction: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://CANCELRELEASE").to("braintree://" + PATH_PREFIX + "/cancelRelease?inBody=id");
        from("direct://CLONETRANSACTION").to("braintree://" + PATH_PREFIX + "/cloneTransaction");
        from("direct://CREDIT").to("braintree://" + PATH_PREFIX + "/credit?inBody=request");
        from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=id");
        from("direct://HOLDINESCROW").to("braintree://" + PATH_PREFIX + "/holdInEscrow?inBody=id");
        from("direct://REFUND").to("braintree://" + PATH_PREFIX + "/refund");
        from("direct://REFUND_WITH_ID").to("braintree://" + PATH_PREFIX + "/refund?inBody=id");
        from("direct://RELEASEFROMESCROW").to("braintree://" + PATH_PREFIX + "/releaseFromEscrow?inBody=id");
        from("direct://SALE").to("braintree://" + PATH_PREFIX + "/sale?inBody=request");
        from("direct://SEARCH").to("braintree://" + PATH_PREFIX + "/search?inBody=query");
        from("direct://SUBMITFORPARTIALSETTLEMENT").to("braintree://" + PATH_PREFIX + "/submitForPartialSettlement");
        from("direct://SUBMITFORSETTLEMENT_WITH_ID").to("braintree://" + PATH_PREFIX + "/submitForSettlement?inBody=id");
        from("direct://SUBMITFORSETTLEMENT_WITH_ID_ADN_AMOUNT").to("braintree://" + PATH_PREFIX + "/submitForSettlement");
        from("direct://SUBMITFORSETTLEMENT_WITH_REQUEST").to("braintree://" + PATH_PREFIX + "/submitForSettlement");
        from("direct://VOIDTRANSACTION").to("braintree://" + PATH_PREFIX + "/voidTransaction?inBody=id");
      }
    }
;
  }
}
