public class HawtDBAggregateSerializedHeadersTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/data");
    super.setUp();
  }
  @Test public void testHawtDBAggregate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("ABCDE");
    HeaderDto headerDto=new HeaderDto("org","company",123);
    template.sendBodyAndHeader("direct:start","A","id",headerDto);
    template.sendBodyAndHeader("direct:start","B","id",headerDto);
    template.sendBodyAndHeader("direct:start","C","id",headerDto);
    template.sendBodyAndHeader("direct:start","D","id",headerDto);
    template.sendBodyAndHeader("direct:start","E","id",headerDto);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
    assertEquals("direct://start",mock.getReceivedExchanges().get(0).getFromEndpoint().getEndpointUri());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        HawtDBAggregationRepository repo=new HawtDBAggregationRepository("repo1","target/data/hawtdb.dat");
        repo.setAllowSerializedHeaders(true);
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).to("mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
