public class FhirXmlDataFormatSpringTest extends CamelSpringTestSupport {
  private static final String PATIENT="<Patient xmlns=\"http://hl7.org/fhir\">" + "<name><family value=\"Holmes\"/><given value=\"Sherlock\"/></name>" + "<address><line value=\"221b Baker St, Marylebone, London NW1 6XE, UK\"/></address>"+ "</Patient>";
  private MockEndpoint mockEndpoint;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    mockEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
  }
  @Test public void unmarshal() throws Exception {
    mockEndpoint.expectedMessageCount(1);
    template.sendBody("direct:unmarshal",PATIENT);
    mockEndpoint.assertIsSatisfied();
    Exchange exchange=mockEndpoint.getExchanges().get(0);
    Patient patient=(Patient)exchange.getIn().getBody();
    assertTrue("Patients should be equal!",patient.equalsDeep(getPatient()));
  }
  @Test public void marshal() throws Exception {
    mockEndpoint.expectedMessageCount(1);
    Patient patient=getPatient();
    template.sendBody("direct:marshal",patient);
    mockEndpoint.assertIsSatisfied();
    Exchange exchange=mockEndpoint.getExchanges().get(0);
    InputStream inputStream=exchange.getIn().getBody(InputStream.class);
    final IBaseResource iBaseResource=FhirContext.forDstu3().newXmlParser().parseResource(new InputStreamReader(inputStream));
    assertTrue("Patients should be equal!",patient.equalsDeep((Base)iBaseResource));
  }
  private Patient getPatient(){
    Patient patient=new Patient();
    patient.addName(new HumanName().addGiven("Sherlock").setFamily("Holmes")).addAddress(new Address().addLine("221b Baker St, Marylebone, London NW1 6XE, UK"));
    return patient;
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/fhir/xml/FhirXmlDataFormatSpringTest.xml");
  }
}
