@RunWith(SpringRunner.class) @DirtiesContext @SpringBootApplication @SpringBootTest(classes={ReactiveStreamsAutoConfigurationTest.TestConfiguration.class},properties={"camel.component.reactive-streams.internal-engine-configuration.thread-pool-name=rs-test"}) public class ReactiveStreamsAutoConfigurationTest {
  @Autowired private CamelContext context;
  @Autowired private CamelReactiveStreamsService reactiveStreamsService;
  @Test public void testConfiguration() throws InterruptedException {
    CamelReactiveStreamsService service=CamelReactiveStreams.get(context);
    assertTrue(service instanceof DefaultCamelReactiveStreamsService);
    assertEquals(service,reactiveStreamsService);
    ReactiveStreamsComponent component=context.getComponent(ReactiveStreamsConstants.SCHEME,ReactiveStreamsComponent.class);
    assertEquals("rs-test",component.getInternalEngineConfiguration().getThreadPoolName());
  }
  @Test public void testService() throws InterruptedException {
    CamelReactiveStreamsService service=CamelReactiveStreams.get(context);
    CountDownLatch latch=new CountDownLatch(1);
    String[] res=new String[1];
    Throwable[] error=new Throwable[1];
    Publisher<String> string=service.fromStream("stream",String.class);
    string.subscribe(new Subscriber<String>(){
      @Override public void onSubscribe(      Subscription subscription){
        subscription.request(100);
      }
      @Override public void onNext(      String s){
        res[0]=s;
        latch.countDown();
      }
      @Override public void onError(      Throwable throwable){
        error[0]=throwable;
      }
      @Override public void onComplete(){
      }
    }
);
    context.createFluentProducerTemplate().to("direct:endpoint").withBody("Hello").send();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertEquals("Hello",res[0]);
    Thread.sleep(100);
    assertNull(error[0]);
  }
@Component static class Routes extends RouteBuilder {
    @Override public void configure() throws Exception {
      from("direct:endpoint").to("reactive-streams:stream");
    }
  }
@Configuration public static class TestConfiguration {
  }
}
