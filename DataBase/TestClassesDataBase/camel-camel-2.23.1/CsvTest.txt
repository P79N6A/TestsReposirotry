/** 
 */
public class CsvTest extends CamelTestSupport {
  private static final String FIXED_DATA="James,Strachan,22" + LS + "Claus,Ibsen,21"+ LS;
  private boolean verbose;
  @Test public void testUnmarshal() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:beanio-unmarshal");
    mock.expectedMessageCount(2);
    template.sendBody("direct:unmarshal",FIXED_DATA);
    mock.assertIsSatisfied();
    List<Exchange> exchanges=mock.getExchanges();
    if (verbose) {
      for (      Exchange exchange : exchanges) {
        Object body=exchange.getIn().getBody();
        log.info("received message {} of class {}",body,body.getClass().getName());
      }
    }
    List<Map> results=new ArrayList<>();
    for (    Exchange exchange : exchanges) {
      Map body=exchange.getIn().getBody(Map.class);
      if (body != null) {
        results.add(body);
      }
    }
    assertRecord(results,0,"James","Strachan",22);
    assertRecord(results,1,"Claus","Ibsen",21);
  }
  protected static void assertRecord(  List<Map> results,  int index,  String expectedFirstName,  String expectedLastName,  int expectedAge){
    assertTrue("Not enough Map messages received: " + results.size(),results.size() > index);
    Map map=results.get(index);
    assertNotNull("No map result found for index " + index,map);
    String text="bodyAsMap(" + index + ") ";
    assertEquals(text + "firstName",expectedFirstName,map.get("firstName"));
    assertEquals(text + "lastName",expectedLastName,map.get("lastName"));
    assertEquals(text + "age",expectedAge,map.get("age"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        DataFormat format=new BeanIODataFormat("org/apache/camel/dataformat/beanio/csv/mappings.xml","stream1");
        from("direct:unmarshal").unmarshal(format).split(body()).to("mock:beanio-unmarshal");
        from("direct:marshal").marshal(format).to("mock:beanio-marshal");
      }
    }
;
  }
}
