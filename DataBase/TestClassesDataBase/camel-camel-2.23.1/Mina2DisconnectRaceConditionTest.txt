public class Mina2DisconnectRaceConditionTest extends BaseMina2Test {
  /** 
 * This is a test for issue CAMEL-10024 - the closing must complete before we return from the producer
 * @throws Exception
 */
  @Test public void testCloseSessionWhenCompleteManyTimes() throws Exception {
    final String endpointUri=String.format("mina2:tcp://localhost:%1$s?sync=true&textline=true&disconnect=true&minaLogger=true",getPort());
    Mina2Producer producer=(Mina2Producer)context.getEndpoint(endpointUri).createProducer();
    Field field=producer.getClass().getDeclaredField("session");
    field.setAccessible(true);
    for (int i=0; i < 100; i++) {
      Exchange e=new DefaultExchange(context,ExchangePattern.InOut);
      e.getIn().setBody("Chad");
      producer.process(e);
      final IoSession ioSession=(IoSession)field.get(producer);
      assertTrue(ioSession.getCloseFuture().isDone());
      Object out=e.getOut().getBody();
      assertEquals("Bye Chad",out);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(String.format("mina2:tcp://localhost:%1$s?sync=true&textline=true",getPort())).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            exchange.getOut().setBody("Bye " + body);
          }
        }
);
      }
    }
;
  }
}
