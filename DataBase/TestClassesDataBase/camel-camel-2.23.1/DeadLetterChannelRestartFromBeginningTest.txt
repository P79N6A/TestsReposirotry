/** 
 */
public class DeadLetterChannelRestartFromBeginningTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("retryBean",new RetryBean());
    return jndi;
  }
  @Test public void testRestartFromBeginning() throws Exception {
    getMockEndpoint("mock:start").expectedBodiesReceived("Camel","Camel","Camel","Camel","Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello Camel");
    template.sendBody("seda:start","Camel");
    setAssertPeriod(500);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("bean:retryBean").useOriginalMessage());
        from("seda:start","seda:retry").to("log:start","mock:start").transform(body().prepend("Hello ")).process(new Processor(){
          private int counter;
          @Override public void process(          Exchange exchange) throws Exception {
            if (counter++ <= 3) {
              throw new IllegalArgumentException("Damn");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
  /** 
 * Bean used as dead letter queue, that decides what to do with the message
 */
public static class RetryBean {
    @RecipientList public String handleError(    Exchange exchange){
      int attempts=exchange.getProperty("attempts",0,int.class);
      attempts++;
      exchange.setProperty("attempts",attempts);
      if (attempts <= 4) {
        return "seda:retry";
      }
 else {
        return "log:giveup";
      }
    }
  }
}
