/** 
 * @version 
 */
public class ShutdownNotDeferTest extends ContextTestSupport {
  private static final AtomicBoolean CONSUMER_SUSPENDED=new AtomicBoolean();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/deferred");
    super.setUp();
  }
  @Test public void testShutdownNotDeferred() throws Exception {
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMinimumMessageCount(1);
    template.sendBody("seda:foo","A");
    template.sendBody("seda:foo","B");
    template.sendBody("seda:foo","C");
    template.sendBody("seda:foo","D");
    template.sendBody("seda:foo","E");
    assertMockEndpointsSatisfied();
    context.stop();
    assertTrue("Should have been suspended",CONSUMER_SUSPENDED.get());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo").startupOrder(1).to("file://target/deferred");
        MyDeferFileEndpoint defer=new MyDeferFileEndpoint("file://target/deferred?initialDelay=0&delay=10",getContext().getComponent("file"));
        defer.setFile(new File("target/deferred"));
        from(defer).startupOrder(2).shutdownRoute(Default).to("mock:bar");
      }
    }
;
  }
private static final class MyDeferFileEndpoint extends FileEndpoint {
    private MyDeferFileEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    @Override protected FileConsumer newFileConsumer(    Processor processor,    GenericFileOperations<File> operations){
      return new FileConsumer(this,processor,operations,createGenericFileStrategy()){
        @Override protected void doSuspend() throws Exception {
          CONSUMER_SUSPENDED.set(true);
          super.doSuspend();
        }
      }
;
    }
  }
}
