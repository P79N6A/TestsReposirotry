/** 
 * Consumer test for events on Docker Platform
 */
@RunWith(MockitoJUnitRunner.class) public class DockerEventsConsumerTest extends CamelTestSupport {
  private String host="localhost";
  private Integer port=2375;
  private DockerConfiguration dockerConfiguration;
  @Mock private EventsCmd eventsCmd;
  @Mock private DockerClient dockerClient;
  public void setupMocks(){
    Mockito.when(dockerClient.eventsCmd()).thenReturn(eventsCmd);
    Mockito.when(eventsCmd.withSince(anyString())).thenReturn(eventsCmd);
  }
  @Test public void testEvent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("docker://events?host=" + host + "&port="+ port).log("${body}").to("mock:result");
      }
    }
;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    dockerConfiguration=new DockerConfiguration();
    dockerConfiguration.setParameters(DockerTestUtils.getDefaultParameters(host,port,dockerConfiguration));
    DockerComponent dockerComponent=new DockerComponent(dockerConfiguration);
    dockerComponent.setClient(DockerTestUtils.getClientProfile(host,port,dockerConfiguration),dockerClient);
    camelContext.addComponent("docker",dockerComponent);
    setupMocks();
    return camelContext;
  }
}
