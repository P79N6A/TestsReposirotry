/** 
 * @version
 */
public class MDCOnCompletionOnCompletionTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(MDCOnCompletionOnCompletionTest.class);
  @Test public void testMDC() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setUseMDCLogging(true);
        from("timer:foo?period=5000").routeId("route-a").setBody().constant("Hello World").onCompletion().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.addOnCompletion(new MyOnCompletion());
          }
        }
).end().to("log:foo").to("direct:b");
        from("direct:b").routeId("route-b").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            assertEquals("route-b",MDC.get("camel.routeId"));
            assertEquals(exchange.getExchangeId(),MDC.get("camel.exchangeId"));
            assertEquals(exchange.getIn().getMessageId(),MDC.get("camel.messageId"));
            MDC.put("custom.id","1");
            LOG.info("From processor in route-b");
          }
        }
).to("log:bar").to("mock:result");
      }
    }
;
  }
private class MyOnCompletion extends SynchronizationAdapter {
    @Override public void onDone(    Exchange exchange){
      assertEquals("route-a",MDC.get("camel.routeId"));
      assertEquals(exchange.getExchangeId(),MDC.get("camel.exchangeId"));
      assertEquals(exchange.getIn().getMessageId(),MDC.get("camel.messageId"));
      assertEquals("1",MDC.get("custom.id"));
      LOG.info("From onCompletion after route-a");
    }
  }
}
