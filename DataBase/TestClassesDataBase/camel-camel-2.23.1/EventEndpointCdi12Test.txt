@RunWith(Arquillian.class) public class EventEndpointCdi12Test {
  @Inject @Uri("mock:consumeObject") private MockEndpoint consumeObject;
  @Inject @Uri("mock:consumeString") private MockEndpoint consumeString;
  @Inject @Uri("mock:consumeStringPayload") private MockEndpoint consumeStringPayload;
  @Inject @Uri("mock:consumeIntegerPayload") private MockEndpoint consumeIntegerPayload;
  @Inject @Uri("mock:consumeFooQualifier") private MockEndpoint consumeFooQualifier;
  @Inject @Uri("mock:consumeBarQualifier") private MockEndpoint consumeBarQualifier;
  @Inject @Uri("direct:produceObject") private ProducerTemplate produceObject;
  @Inject @Uri("direct:produceString") private ProducerTemplate produceString;
  @Inject @Uri("direct:produceStringPayload") private ProducerTemplate produceStringPayload;
  @Inject @Uri("direct:produceIntegerPayload") private ProducerTemplate produceIntegerPayload;
  @Inject @Uri("direct:produceFooQualifier") private ProducerTemplate produceFooQualifier;
  @Inject @Uri("direct:produceBarQualifier") private ProducerTemplate produceBarQualifier;
  @Inject private Event<Object> objectEvent;
  @Inject private Event<EventPayload<String>> stringPayloadEvent;
  @Inject private Event<EventPayload<Integer>> integerPayloadEvent;
  @Inject private EventObserver observer;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(EventConsumingRoute.class,EventProducingRoute.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Before public void resetCollectedEventsAndMockEndpoints(){
    observer.reset();
    consumeObject.reset();
    consumeString.reset();
    consumeStringPayload.reset();
    consumeIntegerPayload.reset();
    consumeFooQualifier.reset();
    consumeBarQualifier.reset();
  }
  @Test public void sendEventsToConsumers() throws InterruptedException {
    consumeObject.expectedMessageCount(8);
    consumeObject.expectedBodiesReceived(1234,new EventPayload<>("foo"),new EventPayload<>("bar"),"test",new EventPayload<>(1),new EventPayload<>(2),123L,987L);
    consumeString.expectedMessageCount(1);
    consumeString.expectedBodiesReceived("test");
    consumeStringPayload.expectedMessageCount(2);
    consumeStringPayload.expectedBodiesReceived(new EventPayload<>("foo"),new EventPayload<>("bar"));
    consumeIntegerPayload.expectedMessageCount(2);
    consumeIntegerPayload.expectedBodiesReceived(new EventPayload<>(1),new EventPayload<>(2));
    consumeFooQualifier.expectedMessageCount(1);
    consumeFooQualifier.expectedBodiesReceived(123L);
    consumeBarQualifier.expectedMessageCount(1);
    consumeBarQualifier.expectedBodiesReceived(987L);
    objectEvent.select(Integer.class).fire(1234);
    objectEvent.select(new TypeLiteral<EventPayload<String>>(){
    }
).fire(new EventPayload<>("foo"));
    stringPayloadEvent.select(new BarQualifier.Literal()).fire(new EventPayload<>("bar"));
    objectEvent.select(String.class).fire("test");
    integerPayloadEvent.fire(new EventPayload<>(1));
    integerPayloadEvent.fire(new EventPayload<>(2));
    objectEvent.select(Long.class,new FooQualifier.Literal()).fire(123L);
    objectEvent.select(Long.class,new BarQualifier.Literal()).fire(987L);
    assertIsSatisfied(2L,TimeUnit.SECONDS,consumeObject,consumeString,consumeStringPayload,consumeIntegerPayload,consumeFooQualifier,consumeBarQualifier);
  }
  @Test public void sendMessagesToProducers(){
    produceObject.sendBody("string");
    EventPayload foo=new EventPayload<>("foo");
    produceStringPayload.sendBody(foo);
    produceObject.sendBody(1234);
    produceString.sendBody("test");
    EventPayload<Integer> bar=new EventPayload<>(2);
    produceIntegerPayload.sendBody(bar);
    EventPayload<Integer> baz=new EventPayload<>(12);
    produceIntegerPayload.sendBody(baz);
    produceFooQualifier.sendBody(456L);
    produceBarQualifier.sendBody(495L);
    produceObject.sendBody(777L);
    assertThat(observer.getObjectEvents(),contains("string",foo,1234,"test",bar,baz,456L,495L,777L));
    assertThat(observer.getStringEvents(),contains("string","test"));
    assertThat(observer.getStringPayloadEvents(),contains(foo));
    assertThat(observer.getIntegerPayloadEvents(),contains(bar,baz));
    assertThat(observer.getDefaultQualifierEvents(),contains("string",foo,1234,"test",bar,baz,777L));
    assertThat(observer.getFooQualifierEvents(),contains(456L));
    assertThat(observer.getBarQualifierEvents(),contains(495L));
  }
@ApplicationScoped static class EventObserver {
    private final List<Object> objectEvents=new ArrayList<>();
    private final List<Object> defaultQualifierEvents=new ArrayList<>();
    private final List<String> stringEvents=new ArrayList<>();
    private final List<EventPayload<String>> stringPayloadEvents=new ArrayList<>();
    private final List<EventPayload<Integer>> integerPayloadEvents=new ArrayList<>();
    private final List<Long> fooQualifierEvents=new ArrayList<>();
    private final List<Long> barQualifierEvents=new ArrayList<>();
    void collectObjectEvents(    @Observes Object event){
      objectEvents.add(event);
    }
    void collectStringEvents(    @Observes String event){
      stringEvents.add(event);
    }
    void collectStringPayloadEvents(    @Observes EventPayload<String> event){
      stringPayloadEvents.add(event);
    }
    void collectIntegerPayloadEvents(    @Observes EventPayload<Integer> event){
      integerPayloadEvents.add(event);
    }
    void collectDefaultQualifierEvents(    @Observes @Default Object event){
      defaultQualifierEvents.add(event);
    }
    void collectFooQualifierEvents(    @Observes @FooQualifier Long event){
      fooQualifierEvents.add(event);
    }
    void collectBarQualifierEvents(    @Observes @BarQualifier Long event){
      barQualifierEvents.add(event);
    }
    List<Object> getObjectEvents(){
      return objectEvents;
    }
    List<String> getStringEvents(){
      return stringEvents;
    }
    List<EventPayload<String>> getStringPayloadEvents(){
      return stringPayloadEvents;
    }
    List<EventPayload<Integer>> getIntegerPayloadEvents(){
      return integerPayloadEvents;
    }
    List<Object> getDefaultQualifierEvents(){
      return defaultQualifierEvents;
    }
    List<Long> getFooQualifierEvents(){
      return fooQualifierEvents;
    }
    List<Long> getBarQualifierEvents(){
      return barQualifierEvents;
    }
    void reset(){
      objectEvents.clear();
      stringEvents.clear();
      stringPayloadEvents.clear();
      integerPayloadEvents.clear();
      defaultQualifierEvents.clear();
      fooQualifierEvents.clear();
      barQualifierEvents.clear();
    }
  }
}
