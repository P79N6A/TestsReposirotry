public class ApnsServiceFactoryTest {
  @Test public void testApnsServiceFactoryWithFixedCertificates() throws Exception {
    ApnsServiceFactory apnsServiceFactory=createApnsServiceFactoryWithFixedCertificates();
    ApnsService apnsService=apnsServiceFactory.getApnsService();
    doBasicAsserts(apnsService);
  }
  @Test(expected=IllegalArgumentException.class) public void testApnsServiceFactoryAsPool0() throws Exception {
    ApnsServiceFactory apnsServiceFactory=createApnsServiceFactoryWithFixedCertificatesAsPool(0);
    ApnsService apnsService=apnsServiceFactory.getApnsService();
    doBasicAsserts(apnsService);
  }
  @Test public void testApnsServiceFactoryAsPool1() throws Exception {
    ApnsServiceFactory apnsServiceFactory=createApnsServiceFactoryWithFixedCertificatesAsPool(1);
    ApnsService apnsService=apnsServiceFactory.getApnsService();
    doBasicAsserts(apnsService);
  }
  private void doBasicAsserts(  Object apnsService){
    Assert.assertNotNull(apnsService);
    Assert.assertTrue(apnsService instanceof ApnsService);
  }
  public static ApnsServiceFactory createApnsServiceFactoryWithFixedCertificates() throws Exception {
    ApnsServiceFactory apnsServiceFactory=new ApnsServiceFactory();
    apnsServiceFactory.setFeedbackHost(TestConstants.TEST_HOST);
    apnsServiceFactory.setFeedbackPort(TestConstants.TEST_FEEDBACK_PORT);
    apnsServiceFactory.setGatewayHost(TestConstants.TEST_HOST);
    apnsServiceFactory.setGatewayPort(TestConstants.TEST_GATEWAY_PORT);
    apnsServiceFactory.setSslContextParameters(ApnsUtils.clientContext());
    return apnsServiceFactory;
  }
  private ApnsServiceFactory createApnsServiceFactoryWithFixedCertificatesAsPool(  int poolSize) throws Exception {
    ApnsServiceFactory apnsServiceFactory=createApnsServiceFactoryWithFixedCertificates();
    apnsServiceFactory.setConnectionStrategy(ConnectionStrategy.POOL);
    apnsServiceFactory.setPoolSize(poolSize);
    return apnsServiceFactory;
  }
}
