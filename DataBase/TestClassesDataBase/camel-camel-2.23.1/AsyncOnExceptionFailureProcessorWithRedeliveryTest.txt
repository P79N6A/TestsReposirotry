/** 
 * @version 
 */
public class AsyncOnExceptionFailureProcessorWithRedeliveryTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.requestBody("direct:start","Hello Camel",String.class);
      fail("Should throw exception");
    }
 catch (    CamelExecutionException e) {
      CamelExchangeException cause=assertIsInstanceOf(CamelExchangeException.class,e.getCause());
      assertTrue(cause.getMessage().startsWith("Simulated error at attempt 1."));
    }
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        errorHandler(defaultErrorHandler().maximumRedeliveries(5));
        onException(IllegalArgumentException.class).handled(true).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:camel?failFirstAttempts=2").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("mock:error");
        from("direct:start").throwException(new IllegalArgumentException("Damn")).to("mock:result");
      }
    }
;
  }
}
