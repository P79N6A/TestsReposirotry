static class RequestDecompressingInterceptor implements HttpRequestInterceptor {
  public void process(  HttpRequest request,  HttpContext context) throws HttpException, IOException {
    Header contentEncoding=request.getFirstHeader("Content-Encoding");
    if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase("gzip")) {
      HttpEntity entity=((HttpEntityEnclosingRequest)request).getEntity();
      ((HttpEntityEnclosingRequest)request).setEntity(new GzipDecompressingEntity(entity));
    }
  }
static class GzipDecompressingEntity extends HttpEntityWrapper {
    GzipDecompressingEntity(    final HttpEntity entity){
      super(entity);
    }
    @Override public InputStream getContent() throws IOException, IllegalStateException {
      InputStream wrappedin=wrappedEntity.getContent();
      return new GZIPInputStream(wrappedin);
    }
    @Override public long getContentLength(){
      return -1;
    }
    @Override public boolean isStreaming(){
      return false;
    }
  }
}
