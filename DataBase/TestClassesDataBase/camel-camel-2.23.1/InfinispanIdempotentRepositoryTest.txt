public class InfinispanIdempotentRepositoryTest {
  public static final GlobalConfiguration GLOBAL_CONFIGURATION=new GlobalConfigurationBuilder().build();
  protected BasicCacheContainer basicCacheContainer;
  protected InfinispanIdempotentRepository idempotentRepository;
  protected String cacheName="default";
  @Before public void setUp() throws Exception {
    GlobalConfiguration global=new GlobalConfigurationBuilder().globalJmxStatistics().allowDuplicateDomains(true).build();
    Configuration conf=new ConfigurationBuilder().build();
    basicCacheContainer=new DefaultCacheManager(global,conf);
    basicCacheContainer.start();
    idempotentRepository=InfinispanIdempotentRepository.infinispanIdempotentRepository(basicCacheContainer,cacheName);
  }
  @After public void tearDown() throws Exception {
    basicCacheContainer.stop();
  }
  @Test public void addsNewKeysToCache() throws Exception {
    assertTrue(idempotentRepository.add("One"));
    assertTrue(idempotentRepository.add("Two"));
    assertTrue(getCache().containsKey("One"));
    assertTrue(getCache().containsKey("Two"));
  }
  @Test public void skipsAddingSecondTimeTheSameKey() throws Exception {
    assertTrue(idempotentRepository.add("One"));
    assertFalse(idempotentRepository.add("One"));
  }
  @Test public void containsPreviouslyAddedKey() throws Exception {
    assertFalse(idempotentRepository.contains("One"));
    idempotentRepository.add("One");
    assertTrue(idempotentRepository.contains("One"));
  }
  @Test public void removesAnExistingKey() throws Exception {
    idempotentRepository.add("One");
    assertTrue(idempotentRepository.remove("One"));
    assertFalse(idempotentRepository.contains("One"));
  }
  @Test public void doesntRemoveMissingKey() throws Exception {
    assertFalse(idempotentRepository.remove("One"));
  }
  @Test public void clearCache() throws Exception {
    assertTrue(idempotentRepository.add("One"));
    assertTrue(idempotentRepository.add("Two"));
    assertTrue(getCache().containsKey("One"));
    assertTrue(getCache().containsKey("Two"));
    idempotentRepository.clear();
    assertFalse(getCache().containsKey("One"));
    assertFalse(getCache().containsKey("Two"));
  }
  private BasicCache<Object,Object> getCache(){
    return basicCacheContainer.getCache(cacheName);
  }
}
