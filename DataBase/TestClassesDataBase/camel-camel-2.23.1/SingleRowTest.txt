public class SingleRowTest extends BigQueryTestSupport {
  private static final String TABLE_ID="singlerow";
  @EndpointInject(uri="direct:in") private Endpoint directIn;
  @EndpointInject(uri="google-bigquery:{{project.id}}:{{bigquery.datasetId}}:" + TABLE_ID) private Endpoint bigqueryEndpoint;
  @EndpointInject(uri="mock:sendResult") private MockEndpoint sendResult;
  @Produce(uri="direct:in") private ProducerTemplate producer;
  @Before public void init() throws Exception {
    createBqTable(TABLE_ID);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(directIn).routeId("SingleRow").to(bigqueryEndpoint).to(sendResult);
      }
    }
;
  }
  @Test public void singleMessage() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    String uuidCol1=UUID.randomUUID().toString();
    String uuidCol2=UUID.randomUUID().toString();
    Map<String,String> object=new HashMap<>();
    object.put("col1",uuidCol1);
    object.put("col2",uuidCol2);
    exchange.getIn().setBody(object);
    sendResult.expectedMessageCount(1);
    producer.send(exchange);
    sendResult.assertIsSatisfied(4000);
    assertRowExist(TABLE_ID,object);
  }
}
