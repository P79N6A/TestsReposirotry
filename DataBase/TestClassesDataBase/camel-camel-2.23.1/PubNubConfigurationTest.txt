public class PubNubConfigurationTest extends CamelTestSupport {
  @Test(expected=IllegalArgumentException.class) public void createEndpointWithIllegalArguments() throws Exception {
    PubNubComponent component=new PubNubComponent(context);
    component.createEndpoint("pubnub");
  }
  @Test public void createEndpointWithMinimalConfiguration() throws Exception {
    PubNubComponent component=new PubNubComponent(context);
    PubNubEndpoint endpoint=(PubNubEndpoint)component.createEndpoint("pubnub:xxx?subscribeKey=mysubkey");
    assertEquals("xxx",endpoint.getConfiguration().getChannel());
    assertEquals("mysubkey",endpoint.getConfiguration().getSubscribeKey());
    assertTrue(endpoint.getConfiguration().isSecure());
  }
  @Test public void createEndpointWithMaximalConfiguration() throws Exception {
    PubNubComponent component=new PubNubComponent(context);
    PubNubEndpoint endpoint=(PubNubEndpoint)component.createEndpoint("pubnub:xxx?subscribeKey=mysubkey&publishKey=mypubkey&secretKey=secrets&uuid=myuuid&operation=PUBLISH&secure=false&authKey=authKey");
    assertEquals("xxx",endpoint.getConfiguration().getChannel());
    assertEquals("mysubkey",endpoint.getConfiguration().getSubscribeKey());
    assertEquals("mypubkey",endpoint.getConfiguration().getPublishKey());
    assertEquals("secrets",endpoint.getConfiguration().getSecretKey());
    assertEquals("myuuid",endpoint.getConfiguration().getUuid());
    assertEquals("PUBLISH",endpoint.getConfiguration().getOperation());
    assertEquals("authKey",endpoint.getConfiguration().getAuthKey());
    assertFalse(endpoint.getConfiguration().isSecure());
  }
}
