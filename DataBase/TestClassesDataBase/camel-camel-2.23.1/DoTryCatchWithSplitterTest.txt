/** 
 */
public class DoTryCatchWithSplitterTest extends ContextTestSupport {
  @Test public void testTryCatchWithSplitter() throws Exception {
    getMockEndpoint("mock:line").expectedBodiesReceived("Tiger","Camel");
    getMockEndpoint("mock:iae").expectedBodiesReceived("Tiger,Camel,Donkey");
    template.sendBody("direct:start","Tiger,Camel,Donkey");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").doTry().split(body().tokenize(",")).to("direct:line").endDoTry().doCatch(IllegalArgumentException.class).to("mock:iae").end();
        from("direct:line").choice().when(body().contains("Donkey")).throwException(new IllegalArgumentException("Donkey not allowed")).otherwise().to("mock:line");
      }
    }
;
  }
}
