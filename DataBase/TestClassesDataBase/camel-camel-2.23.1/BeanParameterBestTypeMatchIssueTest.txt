public class BeanParameterBestTypeMatchIssueTest extends ContextTestSupport {
  @Test public void testNoParam() throws InterruptedException {
    getMockEndpoint("mock:end").expectedBodiesReceived("A");
    template.sendBodyAndHeader("direct:noParam","body","key","value");
    assertMockEndpointsSatisfied();
  }
  @Test public void test1Param() throws InterruptedException {
    getMockEndpoint("mock:end").expectedBodiesReceived("B");
    template.sendBodyAndHeader("direct:1Param","body","key","value");
    assertMockEndpointsSatisfied();
  }
  @Test public void test2ParamString() throws InterruptedException {
    getMockEndpoint("mock:end").expectedBodiesReceived("C");
    template.sendBodyAndHeader("direct:2Param","body","key","value");
    assertMockEndpointsSatisfied();
  }
  @Test public void test2ParamClassB() throws InterruptedException {
    getMockEndpoint("mock:end").expectedBodiesReceived("D");
    template.sendBodyAndHeader("direct:2Param","body","key",new ClassB());
    assertMockEndpointsSatisfied();
  }
  @Test public void test2ParamBoolBody() throws InterruptedException {
    getMockEndpoint("mock:end").expectedBodiesReceived("E");
    template.sendBodyAndHeader("direct:2Param",true,"key","value");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:noParam").bean(ClassA.class,"foo()").to("mock:end");
        from("direct:1Param").bean(ClassA.class,"foo(${body})").to("mock:end");
        from("direct:2Param").bean(ClassA.class,"foo(${body}, ${header.key})").to("mock:end");
      }
    }
;
  }
}
