public static class MyInterceptStrategy implements InterceptStrategy {
  private static final Logger LOGGER=LoggerFactory.getLogger(MyInterceptStrategy.class);
  private static int doneCount;
  public Processor wrapProcessorInInterceptors(  final CamelContext context,  final ProcessorDefinition<?> definition,  final Processor target,  final Processor nextTarget) throws Exception {
    if (definition instanceof SplitDefinition) {
      final DelegateAsyncProcessor delegateAsyncProcessor=new DelegateAsyncProcessor(){
        @Override public boolean process(        final Exchange exchange,        final AsyncCallback callback){
          LOGGER.info("I'm doing someting");
          return super.process(exchange,new AsyncCallback(){
            public void done(            final boolean doneSync){
              LOGGER.info("I'm done");
              doneCount++;
              callback.done(doneSync);
            }
          }
);
        }
      }
;
      delegateAsyncProcessor.setProcessor(target);
      return delegateAsyncProcessor;
    }
    return new DelegateAsyncProcessor(target);
  }
  public void reset(){
    doneCount=0;
  }
}
