/** 
 * @version 
 */
public class PropertiesComponentGetOrElseTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testPropertiesComponentFoundKey() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:{{cool.end:mock:wrong}}");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testPropertiesComponentUseDefaultValue() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("properties:{{unknown:mock:result}}");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testPropertiesComponentSimpleLanguage() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").transform().simple("Hi ${body} do you think ${properties:cool.name} rocks?");
      }
    }
);
    context.start();
    String reply=template.requestBody("direct:start","Claus",String.class);
    assertEquals("Hi Claus do you think Camel rocks?",reply);
  }
  @Test public void testPropertiesComponentSimpleLanguageUsingDefaultValue() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").transform().simple("Hi ${body} do you think ${properties:unknown:Beer} rocks?");
      }
    }
);
    context.start();
    String reply=template.requestBody("direct:start","Claus",String.class);
    assertEquals("Hi Claus do you think Beer rocks?",reply);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("properties",new PropertiesComponent("classpath:org/apache/camel/component/properties/myproperties.properties"));
    return context;
  }
}
