public class JohnzonAttributeOrderTest extends CamelTestSupport {
  final String expectedJson="{\"bool\":true,\"bg\":123.123,\"doubleNumber\":123.123,\"intNumber\":123,\"floatNumber\":123.0,\"longNumber\":123}";
  @Test public void testMarshalAndUnmarshalMap() throws Exception {
    NumberPojo nc=new NumberPojo();
    nc.setBg(new BigDecimal("123.123"));
    nc.setDoubleNumber(123.123);
    nc.setBool(true);
    nc.setFloatNumber(123);
    nc.setLongNumber(123L);
    nc.setIntNumber(123);
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(NumberPojo.class);
    mock.message(0).body().isEqualTo(nc);
    Object marshalled=template.requestBody("direct:in",nc);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals(expectedJson,marshalledAsString);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        final Comparator<String> attributeOrder=new Comparator<String>(){
          @Override public int compare(          final String o1,          final String o2){
            return expectedJson.indexOf(o1) - expectedJson.indexOf(o2);
          }
        }
;
        JohnzonDataFormat format=new JohnzonDataFormat(NumberPojo.class);
        format.setAttributeOrder(attributeOrder);
        from("direct:in").marshal(format);
        from("direct:back").unmarshal(format).to("mock:reverse");
      }
    }
;
  }
}
