/** 
 * Validates Exec Create Request headers are parsed properly
 */
public class ExecCreateCmdHeaderTest extends BaseDockerHeaderTest<ExecCreateCmd> {
  @Mock private ExecCreateCmd mockObject;
  @Test public void execCreateHeaderTest(){
    String containerId="9c09acd48a25";
    boolean tty=true;
    boolean stdErr=false;
    boolean stdOut=true;
    boolean stdIn=true;
    Map<String,Object> headers=getDefaultParameters();
    headers.put(DockerConstants.DOCKER_CONTAINER_ID,containerId);
    headers.put(DockerConstants.DOCKER_TTY,tty);
    headers.put(DockerConstants.DOCKER_ATTACH_STD_ERR,stdErr);
    headers.put(DockerConstants.DOCKER_ATTACH_STD_OUT,stdOut);
    headers.put(DockerConstants.DOCKER_ATTACH_STD_IN,stdIn);
    headers.put(DockerConstants.DOCKER_CMD,"date;whoami");
    template.sendBodyAndHeaders("direct:in","",headers);
    Mockito.verify(dockerClient,Mockito.times(1)).execCreateCmd(eq(containerId));
    Mockito.verify(mockObject,Mockito.times(1)).withTty(eq(tty));
    Mockito.verify(mockObject,Mockito.times(1)).withAttachStderr(eq(stdErr));
    Mockito.verify(mockObject,Mockito.times(1)).withAttachStdout(eq(stdOut));
    Mockito.verify(mockObject,Mockito.times(1)).withAttachStdin(eq(stdIn));
    Mockito.verify(mockObject,Mockito.times(1)).withCmd(new String[]{"date","whoami"});
  }
  @Override protected void setupMocks(){
    Mockito.when(dockerClient.execCreateCmd(anyString())).thenReturn(mockObject);
  }
  @Override protected DockerOperation getOperation(){
    return DockerOperation.EXEC_CREATE;
  }
}
