@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes={GaugeRouteTest.TestConfig.class},loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpoints public class GaugeRouteTest {
  private static SortedMap<String,Gauge> mockGauges=new TreeMap<>();
  @EndpointInject(uri="mock:out") private MockEndpoint endpoint;
  @Produce(uri="direct:in-1") private ProducerTemplate producer1;
  @Produce(uri="direct:in-2") private ProducerTemplate producer2;
  private MetricRegistry mockRegistry;
@Configuration public static class TestConfig extends SingleRouteCamelConfiguration {
    @Bean @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:in-1").to("metrics:gauge:A?subject=#mySubject").to("mock:out");
          from("direct:in-2").setHeader(HEADER_METRIC_NAME,constant("B")).setHeader(HEADER_GAUGE_SUBJECT,constant("my overriding subject")).to("metrics:gauge:A?subject=#mySubject").to("mock:out");
        }
      }
;
    }
    @Bean(name=METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry(){
      MetricRegistry registry=Mockito.mock(MetricRegistry.class);
      when(registry.getGauges()).thenReturn(mockGauges);
      when(registry.register(anyString(),any())).then(new Answer<CamelMetricsGauge>(){
        @Override public CamelMetricsGauge answer(        InvocationOnMock invocation) throws Throwable {
          mockGauges.put(invocation.getArgument(0),invocation.getArgument(1));
          return invocation.getArgument(1);
        }
      }
);
      return registry;
    }
    @Bean(name="mySubject") public String getSubject(){
      return "my subject";
    }
  }
  @Before public void setup(){
    mockRegistry=endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME,MetricRegistry.class);
  }
  @After public void tearDown(){
    endpoint.reset();
    mockGauges.clear();
  }
  @Test public void testDefault() throws Exception {
    endpoint.expectedMessageCount(1);
    producer1.sendBody(new Object());
    endpoint.assertIsSatisfied();
    verify(mockRegistry,times(1)).register(eq("A"),argThat(new ArgumentMatcher<CamelMetricsGauge>(){
      @Override public boolean matches(      CamelMetricsGauge argument){
        return "my subject".equals(argument.getValue());
      }
    }
));
  }
  @Test public void testOverride() throws Exception {
    verify(mockRegistry,times(1)).register(eq("A"),argThat(new ArgumentMatcher<CamelMetricsGauge>(){
      @Override public boolean matches(      CamelMetricsGauge argument){
        return "my subject".equals(argument.getValue());
      }
    }
));
    endpoint.expectedMessageCount(1);
    producer2.sendBody(new Object());
    endpoint.assertIsSatisfied();
    verify(mockRegistry,times(1)).register(eq("B"),argThat(new ArgumentMatcher<CamelMetricsGauge>(){
      @Override public boolean matches(      CamelMetricsGauge argument){
        return "my overriding subject".equals(argument.getValue());
      }
    }
));
  }
}
