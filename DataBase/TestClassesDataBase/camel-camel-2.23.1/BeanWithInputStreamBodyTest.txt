public class BeanWithInputStreamBodyTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyCoolBean());
    return jndi;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testBeanWithInputStreamBody() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyCoolBean.class).to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes");
    InputStream bais=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:start",bais);
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanWithInputStreamBodyMethod() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyCoolBean.class,"doSomething").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes");
    InputStream bais=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:start",bais);
    assertMockEndpointsSatisfied();
  }
  @Test public void testToBeanWithInputStreamBody() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes");
    InputStream bais=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:start",bais);
    assertMockEndpointsSatisfied();
  }
  @Test public void testToBeanWithInputStreamBodyMethod() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean?method=doSomething").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes");
    InputStream bais=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:start",bais);
    assertMockEndpointsSatisfied();
  }
  @Test public void testToBeanWithInputStreamBodyMethodOGNL() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("bean:myBean?method=doSomething(${body})").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes");
    InputStream bais=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:start",bais);
    assertMockEndpointsSatisfied();
  }
public static final class MyCoolBean {
    public static String doSomething(    InputStream is) throws IOException {
      int byteCount=0;
      while ((is.read()) != -1) {
        byteCount++;
      }
      return "There is " + byteCount + " bytes";
    }
  }
}
