public class SpringSecurityAuthorizationPolicyTest extends CamelSpringTestSupport {
  @Test public void testAuthorizationPassed() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedBodiesReceived("hello world");
    sendMessageWithAuthentication("jim","jimspassword","ROLE_USER","ROLE_ADMIN");
    end.assertIsSatisfied();
  }
  @Test public void testAuthorizationFailed() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedMessageCount(0);
    try {
      sendMessageWithAuthentication("bob","bobspassword","ROLE_USER");
      fail("we should get the access deny exception here");
    }
 catch (    Exception exception) {
      assertTrue("Expect CamelAuthorizationException here",exception.getCause() instanceof CamelAuthorizationException);
    }
    end.assertIsSatisfied();
  }
  @Test public void testAuthenticationFailed() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedMessageCount(0);
    try {
      sendMessageWithAuthentication("bob","jimspassword");
      fail("we should get the access deny exception here");
    }
 catch (    Exception exception) {
      assertTrue("Expect CamelAuthorizationException here",exception.getCause() instanceof CamelAuthorizationException);
      assertEquals("admin",((CamelAuthorizationException)exception.getCause()).getPolicyId());
    }
    end.assertIsSatisfied();
  }
  @Test public void testGetAuthorizationTokenFromSecurityContextHolder() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:end");
    end.expectedBodiesReceived("hello world");
    Authentication authToken=createAuthenticationToken("jim","jimspassword","ROLE_USER","ROLE_ADMIN");
    SecurityContextHolder.getContext().setAuthentication(authToken);
    template.sendBody("direct:start","hello world");
    end.assertIsSatisfied();
    SecurityContextHolder.getContext().setAuthentication(null);
  }
  private Authentication createAuthenticationToken(  String username,  String password,  String... roles){
    Authentication authToken;
    if (roles != null && roles.length > 0) {
      List<GrantedAuthority> authorities=new ArrayList<>(roles.length);
      for (      String role : roles) {
        authorities.add(new SimpleGrantedAuthority(role));
      }
      authToken=new UsernamePasswordAuthenticationToken(username,password,authorities);
    }
 else {
      authToken=new UsernamePasswordAuthenticationToken(username,password);
    }
    return authToken;
  }
  private void sendMessageWithAuthentication(  String username,  String password,  String... roles){
    Authentication authToken=createAuthenticationToken(username,password,roles);
    Subject subject=new Subject();
    subject.getPrincipals().add(authToken);
    template.sendBodyAndHeader("direct:start","hello world",Exchange.AUTHENTICATION,subject);
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/component/spring/security/SpringSecurityCamelContext.xml");
  }
}
