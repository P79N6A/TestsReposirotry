@Ignore("Run manually, makes connection to external webservice") @ContextConfiguration public class ProducerRemoteRouteTimeOutTest extends AbstractJUnit4SpringContextTests {
  private final String xmlRequestForGoogleStockQuote="<GetQuote xmlns=\"http://www.webserviceX.NET/\"><symbol>GOOG</symbol></GetQuote>";
  @Produce private ProducerTemplate template;
  @Test public void callStockQuoteWebserviceCosmmonsHttpWith3MillSecondsTimeout() throws Exception {
    try {
      template.requestBody("direct:stockQuoteWebserviceCommonsHttpWith3MillSecondsTimeout",xmlRequestForGoogleStockQuote);
      fail("Miss the expected exception in chain");
    }
 catch (    CamelExecutionException cee) {
      assertTrue(hasThrowableInChain(cee,SocketTimeoutException.class));
    }
  }
  @Test public void callStockQuoteWebserviceCommonsHttpWith5000MillSecondsTimeout() throws Exception {
    Object result=template.requestBody("direct:stockQuoteWebserviceCommonsHttpWith5000MillSecondsTimeout",xmlRequestForGoogleStockQuote);
    assertNotNull(result);
    assertTrue(result instanceof String);
    String resultMessage=(String)result;
    assertTrue(resultMessage.contains("Google Inc."));
  }
  @Test public void callStockQuoteWebserviceJDKWith3MillSecondsTimeout() throws Exception {
    try {
      template.requestBody("direct:stockQuoteWebserviceJDKWith3MillSecondsTimeout",xmlRequestForGoogleStockQuote);
      fail("Miss the expected exception in chain");
    }
 catch (    CamelExecutionException cee) {
      assertTrue(hasThrowableInChain(cee,SocketTimeoutException.class));
    }
  }
  @Test public void callStockQuoteWebserviceJDKWith5000MillSecondsTimeout() throws Exception {
    Object result=template.requestBody("direct:stockQuoteWebserviceJDKWith5000MillSecondsTimeout",xmlRequestForGoogleStockQuote);
    assertNotNull(result);
    assertTrue(result instanceof String);
    String resultMessage=(String)result;
    assertTrue(resultMessage.contains("Google Inc."));
  }
  private static boolean hasThrowableInChain(  Throwable throwable,  Class<? extends Throwable> clazz){
    if (throwable == null) {
      return false;
    }
 else     if (clazz.isAssignableFrom(throwable.getClass())) {
      return true;
    }
    return hasThrowableInChain(throwable.getCause(),clazz);
  }
}
