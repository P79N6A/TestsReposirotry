public class FtpConsumerProcessStrategyTest extends FtpServerTestSupport {
  private MyStrategy myStrategy;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    myStrategy=new MyStrategy();
    jndi.bind("myStrategy",myStrategy);
    return jndi;
  }
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "?password=admin&processStrategy=#myStrategy";
  }
  @Test public void testFtpConsume() throws Exception {
    if (!canTest()) {
      return;
    }
    sendFile(getFtpUrl(),"Hello World","hello.txt");
    String out=consumer.receiveBody(getFtpUrl(),5000,String.class);
    assertNotNull(out);
    assertTrue(out.startsWith("Hello World"));
    assertEquals("Begin should have been invoked 1 times",1,myStrategy.getInvoked());
  }
private static class MyStrategy implements GenericFileProcessStrategy {
    private volatile int invoked;
    @Override public void prepareOnStartup(    GenericFileOperations operations,    GenericFileEndpoint endpoint) throws Exception {
    }
    @Override public boolean begin(    GenericFileOperations operations,    GenericFileEndpoint endpoint,    Exchange exchange,    GenericFile file) throws Exception {
      return true;
    }
    @Override public void abort(    GenericFileOperations operations,    GenericFileEndpoint endpoint,    Exchange exchange,    GenericFile file) throws Exception {
    }
    @Override public void commit(    GenericFileOperations operations,    GenericFileEndpoint endpoint,    Exchange exchange,    GenericFile file) throws Exception {
      invoked++;
    }
    @Override public void rollback(    GenericFileOperations operations,    GenericFileEndpoint endpoint,    Exchange exchange,    GenericFile file) throws Exception {
    }
    int getInvoked(){
      return invoked;
    }
  }
}
