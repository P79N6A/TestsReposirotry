public class BeanTracingTest extends CamelAwsXRayTestSupport {
  public BeanTracingTest(){
    super(TestDataBuilder.createTrace().withSegment(TestDataBuilder.createSegment("start").withSubsegment(TestDataBuilder.createSubsegment("bean:TraceBean")).withSubsegment(TestDataBuilder.createSubsegment("seda:otherRoute")).withSubsegment(TestDataBuilder.createSubsegment("mock:end")).withAnnotation("body","HELLO").withMetadata("originBody","Hello")).withSegment(TestDataBuilder.createSegment("otherRoute").withSubsegment(TestDataBuilder.createSubsegment("process:processor"))));
  }
  @Override protected InterceptStrategy getTracingStrategy(){
    return new TraceAnnotatedTracingStrategy();
  }
  @Test public void testRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(2).create();
    MockEndpoint mockEndpoint=context.getEndpoint("mock:end",MockEndpoint.class);
    mockEndpoint.expectedMessageCount(1);
    mockEndpoint.expectedBodiesReceived("HELLO");
    mockEndpoint.expectedHeaderReceived("TEST","done");
    template.requestBody("direct:start","Hello");
    assertThat("Not all exchanges were fully processed",notify.matches(10,TimeUnit.SECONDS),is(equalTo(true)));
    mockEndpoint.assertIsSatisfied();
    verify();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("start").log("start has been called").bean(TraceBean.class).delay(simple("${random(1000,2000)}")).to("seda:otherRoute").to("mock:end");
        from("seda:otherRoute").routeId("otherRoute").log("otherRoute has been called").process(new CustomProcessor()).delay(simple("${random(0,500)}"));
      }
    }
;
  }
@XRayTrace public static class TraceBean {
    @Handler public String convertBodyToUpperCase(    @Body String body){
      String converted=body.toUpperCase();
      AWSXRay.getCurrentSegment().putAnnotation("body",converted);
      AWSXRay.getCurrentSegment().putMetadata("originBody",body);
      return converted;
    }
  }
@XRayTrace(metricName="processor") public static class CustomProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader("TEST","done");
    }
  }
}
