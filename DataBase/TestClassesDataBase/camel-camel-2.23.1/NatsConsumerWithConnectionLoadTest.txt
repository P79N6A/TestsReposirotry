public class NatsConsumerWithConnectionLoadTest extends NatsTestSupport {
  @EndpointInject(uri="mock:result") protected MockEndpoint mockResultEndpoint;
  @EndpointInject(uri="mock:result1") protected MockEndpoint mockResultEndpoint1;
  private Connection connection;
  @Test public void testLoadConsumer() throws InterruptedException, IOException, TimeoutException {
    mockResultEndpoint.setExpectedMessageCount(100);
    mockResultEndpoint1.setExpectedMessageCount(0);
    Options options=new Options.Builder().server("nats://" + getNatsUrl()).build();
    Connection connection=Nats.connect(options);
    for (int i=0; i < 100; i++) {
      connection.publish("test",("test" + i).getBytes());
    }
    mockResultEndpoint.assertIsSatisfied();
    mockResultEndpoint1.assertIsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    Builder options=new Options.Builder();
    options.server("nats://" + getNatsUrl());
    connection=Nats.connect(options.build());
    registry.bind("connection",connection);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("nats://thisismytest?topic=test&connection=#connection").to(mockResultEndpoint);
        from("nats://thisismytest?topic=test1&connection=#connection").to(mockResultEndpoint1);
      }
    }
;
  }
}
