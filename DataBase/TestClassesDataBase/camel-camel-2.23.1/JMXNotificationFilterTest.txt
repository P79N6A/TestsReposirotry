/** 
 * Tests that the NotificationFilter is applied if configured
 */
public class JMXNotificationFilterTest extends SimpleBeanFixture {
  /** 
 * we'll track the rejected messages so we know what got filtered
 */
  private LinkedHashSet<Notification> mRejected=new LinkedHashSet<>();
  @Test public void testNotificationFilter() throws Exception {
    ISimpleMXBean bean=getSimpleMXBean();
    assertEquals("no notifications should have been filtered at this point",0,mRejected.size());
    getMockFixture().getMockEndpoint().setExpectedMessageCount(5);
    for (int i=0; i < 10; i++) {
      bean.touch();
    }
    getMockFixture().waitForMessages();
    assertEquals("5 notifications should have been filtered",5,mRejected.size());
    for (    Notification rejected : mRejected) {
      assertEquals(1,rejected.getSequenceNumber() % 2);
    }
    for (    Exchange received : getMockFixture().getMockEndpoint().getReceivedExchanges()) {
      Notification n=(Notification)received.getIn().getBody();
      assertEquals(0,n.getSequenceNumber() % 2);
    }
  }
  @Override protected JMXUriBuilder buildFromURI(){
    return super.buildFromURI().withNotificationFilter("#myFilter").withFormat("raw");
  }
  @Override protected void initRegistry(){
    super.initRegistry();
    getRegistry().put("myFilter",new NotificationFilter(){
      private static final long serialVersionUID=1L;
      public boolean isNotificationEnabled(      Notification aNotification){
        boolean enabled=aNotification.getSequenceNumber() % 2 == 0;
        if (!enabled) {
          mRejected.add(aNotification);
        }
        return enabled;
      }
    }
);
  }
}
