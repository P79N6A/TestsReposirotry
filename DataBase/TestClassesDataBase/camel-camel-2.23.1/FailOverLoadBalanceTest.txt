public class FailOverLoadBalanceTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
public static class MyException extends Exception {
    private static final long serialVersionUID=1L;
  }
public static class MyAnotherException extends Exception {
    private static final long serialVersionUID=1L;
  }
public static class MyExceptionProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      throw new MyException();
    }
  }
public static class MyAnotherExceptionProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      throw new MyAnotherException();
    }
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:exception").loadBalance().failover().to("direct:x","direct:y","direct:z");
        from("direct:customerException").loadBalance().failover(MyException.class).to("direct:x","direct:y","direct:z");
        from("direct:x").process(new MyExceptionProcessor()).to("mock:x");
        from("direct:y").process(new MyAnotherExceptionProcessor()).to("mock:y");
        from("direct:z").to("mock:z");
      }
    }
;
  }
  @Test public void testThrowable() throws Exception {
    String body="<one/>";
    expectsMessageCount(0,x,y);
    z.expectedBodiesReceived(body);
    sendMessage("direct:exception","bar",body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testMyException() throws Exception {
    String body="<two/>";
    expectsMessageCount(0,x,y,z);
    try {
      sendMessage("direct:customerException","bar",body);
      fail("There should get the MyAnotherException");
    }
 catch (    RuntimeCamelException ex) {
      assertTrue("The cause should be MyAnotherException",ex.getCause() instanceof MyAnotherException);
    }
    assertMockEndpointsSatisfied();
  }
  protected void sendMessage(  final String endpoint,  final Object headerValue,  final Object body) throws Exception {
    template.sendBodyAndHeader(endpoint,body,"foo",headerValue);
  }
}
