public class ValidatorRouteTest extends CamelTestSupport {
  @EndpointInject(uri="mock:valid") protected MockEndpoint validEndpoint;
  @EndpointInject(uri="mock:finally") protected MockEndpoint finallyEndpoint;
  @EndpointInject(uri="mock:invalid") protected MockEndpoint invalidEndpoint;
  @Test public void testValidMessage() throws Exception {
    validEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBody("direct:start","{ \"name\": \"Joe Doe\", \"id\": 1, \"price\": 12.5 }");
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
  }
  @Test public void testValidMessageInHeader() throws Exception {
    validEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:startHeaders",null,"headerToValidate","{ \"name\": \"Joe Doe\", \"id\": 1, \"price\": 12.5 }");
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
  }
  @Test public void testInvalidMessage() throws Exception {
    invalidEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBody("direct:start","{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }");
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
  }
  @Test public void testInvalidMessageInHeader() throws Exception {
    invalidEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:startHeaders",null,"headerToValidate","{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }");
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
  }
  @Test public void testNullHeaderNoFail() throws Exception {
    validEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:startNullHeaderNoFail",null,"headerToValidate",null);
    MockEndpoint.assertIsSatisfied(validEndpoint);
  }
  @Test public void testNullHeader() throws Exception {
    validEndpoint.setExpectedMessageCount(0);
    Exchange in=resolveMandatoryEndpoint("direct:startNoHeaderException").createExchange(ExchangePattern.InOut);
    in.getIn().setBody(null);
    in.getIn().setHeader("headerToValidate",null);
    Exchange out=template.send("direct:startNoHeaderException",in);
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
    Exception exception=out.getException();
    assertTrue("Should be failed",out.isFailed());
    assertTrue("Exception should be correct type",exception instanceof NoJsonHeaderValidationException);
    assertTrue("Exception should mention missing header",exception.getMessage().contains("headerToValidate"));
  }
  @Test public void testInvalideBytesMessage() throws Exception {
    invalidEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBody("direct:start","{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }".getBytes());
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
  }
  @Test public void testInvalidBytesMessageInHeader() throws Exception {
    invalidEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:startHeaders",null,"headerToValidate","{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }".getBytes());
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end();
        from("direct:startHeaders").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end();
        from("direct:startNoHeaderException").to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate").to("mock:valid");
        from("direct:startNullHeaderNoFail").to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate&failOnNullHeader=false").to("mock:valid");
      }
    }
;
  }
}
