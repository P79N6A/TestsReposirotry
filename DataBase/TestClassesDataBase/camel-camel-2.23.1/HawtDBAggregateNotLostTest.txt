public class HawtDBAggregateNotLostTest extends CamelTestSupport {
  private HawtDBAggregationRepository repo;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/data");
    repo=new HawtDBAggregationRepository("repo1","target/data/hawtdb.dat");
    super.setUp();
  }
  @Test public void testHawtDBAggregateNotLost() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("ABCDE");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
    Thread.sleep(1000);
    String exchangeId=getMockEndpoint("mock:aggregated").getReceivedExchanges().get(0).getExchangeId();
    final HawtDBFile hawtDBFile=repo.getHawtDBFile();
    final HawtDBCamelCodec codec=new HawtDBCamelCodec();
    final Buffer confirmKeyBuffer=codec.marshallKey(exchangeId);
    Buffer bf=hawtDBFile.execute(new Work<Buffer>(){
      public Buffer execute(      Transaction tx){
        Index<Buffer,Buffer> index=hawtDBFile.getRepositoryIndex(tx,"repo1-completed",false);
        return index.get(confirmKeyBuffer);
      }
    }
);
    assertNotNull(bf);
    Exchange completed=codec.unmarshallExchange(context,bf);
    assertNotNull(completed);
    assertEquals(exchangeId,completed.getExchangeId());
    assertEquals("ABCDE",completed.getIn().getBody());
    assertEquals(123,completed.getIn().getHeader("id"));
    assertEquals("size",completed.getProperty(Exchange.AGGREGATED_COMPLETED_BY));
    assertEquals(5,completed.getProperty(Exchange.AGGREGATED_SIZE));
    assertEquals("123",completed.getProperty(Exchange.AGGREGATED_CORRELATION_KEY));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end();
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
