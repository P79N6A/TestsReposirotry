/** 
 * Stores values from the first invocation to compare them with the second invocation later.
 */
private static class MdcCheckerProcessor implements Processor {
  private String routeId="route-async";
  private String exchangeId;
  private String messageId;
  private String breadcrumbId;
  private String contextId;
  private Long threadId;
  @Override public void process(  Exchange exchange) throws Exception {
    if (threadId != null) {
      assertNotEquals(threadId,Long.valueOf(Thread.currentThread().getId()));
    }
 else {
      threadId=Long.valueOf(Thread.currentThread().getId());
    }
    if (routeId != null) {
      assertEquals(routeId,MDC.get("camel.routeId"));
    }
    if (exchangeId != null) {
      assertEquals(exchangeId,MDC.get("camel.exchangeId"));
    }
 else {
      exchangeId=MDC.get("camel.exchangeId");
      assertTrue(exchangeId != null && exchangeId.length() > 0);
    }
    if (messageId != null) {
      assertEquals(messageId,MDC.get("camel.messageId"));
    }
 else {
      messageId=MDC.get("camel.messageId");
      assertTrue(messageId != null && messageId.length() > 0);
    }
    if (breadcrumbId != null) {
      assertEquals(breadcrumbId,MDC.get("camel.breadcrumbId"));
    }
 else {
      breadcrumbId=MDC.get("camel.breadcrumbId");
      assertTrue(breadcrumbId != null && breadcrumbId.length() > 0);
    }
    if (contextId != null) {
      assertEquals(contextId,MDC.get("camel.contextId"));
    }
 else {
      contextId=MDC.get("camel.contextId");
      assertTrue(contextId != null && contextId.length() > 0);
    }
  }
}
