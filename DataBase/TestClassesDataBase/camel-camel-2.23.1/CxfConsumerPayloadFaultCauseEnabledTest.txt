/** 
 * Unit test to verify CxfConsumer to generate SOAP fault in PAYLOAD mode with the exception cause returned
 * @version 
 */
public class CxfConsumerPayloadFaultCauseEnabledTest extends CamelTestSupport {
  protected static final QName SERVICE_QNAME=new QName("http://camel.apache.org/wsdl-first","PersonService");
  protected final String serviceAddress="http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/PersonService";
  protected AbstractXmlApplicationContext applicationContext;
  @Before public void setUp() throws Exception {
    CXFTestSupport.getPort1();
    applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfConsumerFaultCauseEnabledBeans.xml");
    super.setUp();
    assertNotNull("Should have created a valid spring context",applicationContext);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("cxf:bean:consumerEndpoint").process(new Processor(){
          public void process(          final Exchange exchange) throws Exception {
            Throwable cause=new IllegalArgumentException("Homer");
            Fault fault=new Fault("Someone messed up the service.",(ResourceBundle)null,cause);
            exchange.setException(fault);
          }
        }
);
      }
    }
;
  }
  @Test public void testInvokingFromCxfClient() throws Exception {
    this.getCamelContextService();
    URL wsdlURL=getClass().getClassLoader().getResource("person.wsdl");
    PersonService ss=new PersonService(wsdlURL,SERVICE_QNAME);
    Person client=ss.getSoap();
    Client c=ClientProxy.getClient(client);
    c.getInInterceptors().add(new LoggingInInterceptor());
    c.getOutInterceptors().add(new LoggingOutInterceptor());
    ((BindingProvider)client).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,serviceAddress);
    Holder<String> personId=new Holder<>();
    personId.value="";
    Holder<String> ssn=new Holder<>();
    Holder<String> name=new Holder<>();
    try {
      client.getPerson(personId,ssn,name);
      fail("SOAPFault expected!");
    }
 catch (    Exception e) {
      assertTrue(e instanceof SOAPFaultException);
      SOAPFault fault=((SOAPFaultException)e).getFault();
      assertEquals("Someone messed up the service. Caused by: Homer",fault.getFaultString());
    }
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    return SpringCamelContext.springCamelContext(applicationContext);
  }
}
