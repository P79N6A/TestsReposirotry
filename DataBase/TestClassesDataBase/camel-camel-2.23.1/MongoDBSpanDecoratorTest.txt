public class MongoDBSpanDecoratorTest {
  private static final String MONGODB_STATEMENT="mongodb:myDb?database=flights&collection=tickets&operation=findOneByQuery";
  @Test public void testGetOperationName(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn(MONGODB_STATEMENT);
    SpanDecorator decorator=new MongoDBSpanDecorator();
    assertEquals("findOneByQuery",decorator.getOperationName(null,endpoint));
  }
  @Test public void testToQueryParameters(){
    Map<String,String> params=AbstractSpanDecorator.toQueryParameters(MONGODB_STATEMENT);
    assertEquals(3,params.size());
    assertEquals("flights",params.get("database"));
    assertEquals("tickets",params.get("collection"));
    assertEquals("findOneByQuery",params.get("operation"));
  }
  @Test public void testPre(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn(MONGODB_STATEMENT);
    SpanDecorator decorator=new MongoDBSpanDecorator();
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.pre(span,null,endpoint);
    assertEquals("mongodb",span.tags().get(Tags.DB_TYPE.getKey()));
    assertEquals("flights",span.tags().get(Tags.DB_INSTANCE.getKey()));
    assertTrue(span.tags().containsKey(Tags.DB_STATEMENT.getKey()));
  }
}
