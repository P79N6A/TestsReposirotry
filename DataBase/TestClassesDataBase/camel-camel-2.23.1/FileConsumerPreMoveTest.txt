/** 
 * @version 
 */
public class FileConsumerPreMoveTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/premove");
    super.setUp();
  }
  @Test public void testPreMove() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("file://target/premove","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testPreMoveSameFileTwice() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file://target/premove","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    mock.reset();
    mock.expectedBodiesReceived("Hello Again World");
    template.sendBodyAndHeader("file://target/premove","Hello Again World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/premove?preMove=work/work-${file:name}&initialDelay=0&delay=10").process(new MyPreMoveCheckerProcessor()).to("mock:result");
      }
    }
;
  }
public static class MyPreMoveCheckerProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      File pre=new File("target/premove/work/work-hello.txt");
      assertTrue("Pre move file should exist",pre.exists());
    }
  }
}
