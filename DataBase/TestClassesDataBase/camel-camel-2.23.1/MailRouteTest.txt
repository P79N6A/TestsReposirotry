/** 
 * @version 
 */
public class MailRouteTest extends CamelTestSupport {
  @Test public void testSendAndReceiveMails() throws Exception {
    Mailbox.clearAll();
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedBodiesReceived("hello world!");
    Map<String,Object> headers=new HashMap<>();
    headers.put("reply-to","route-test-reply@localhost");
    template.sendBodyAndHeaders("smtp://route-test-james@localhost","hello world!",headers);
    assertMailboxReceivedMessages("route-test-james@localhost");
    resultEndpoint.assertIsSatisfied();
    Exchange exchange=resultEndpoint.getReceivedExchanges().get(0);
    String replyTo=(String)exchange.getIn().getHeader("reply-to");
    assertEquals("route-test-reply@localhost",replyTo);
    assertMailboxReceivedMessages("route-test-copy@localhost");
  }
  @Test public void testMailSubjectWithUnicode() throws Exception {
    Mailbox.clearAll();
    final String body="Hello Camel Riders!";
    final String subject="My Camel \u2122";
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("subject","=?US-ASCII?Q?My_Camel_=3F?=");
    mock.expectedBodiesReceived(body);
    template.send("direct:a",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(body);
        exchange.getIn().setHeader("subject",subject);
        exchange.setProperty(Exchange.CHARSET_NAME,"US-ASCII");
      }
    }
);
    mock.assertIsSatisfied();
    assertFalse("Should not have attachements",mock.getExchanges().get(0).getIn().hasAttachments());
  }
  protected void assertMailboxReceivedMessages(  String name) throws IOException, MessagingException {
    Mailbox mailbox=Mailbox.get(name);
    assertEquals(name + " should have received 1 mail",1,mailbox.size());
    Message message=mailbox.get(0);
    assertNotNull(name + " should have received at least one mail!",message);
    assertEquals("hello world!",message.getContent());
    assertEquals("camel@localhost",message.getFrom()[0].toString());
    boolean found=false;
    for (    Address adr : message.getRecipients(RecipientType.TO)) {
      if (name.equals(adr.toString())) {
        found=true;
      }
    }
    assertTrue("Should have found the recpient to in the mail: " + name,found);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("pop3://route-test-james@localhost?consumer.initialDelay=100&consumer.delay=100").to("direct:a");
        from("direct:a").setHeader("to",constant("route-test-result@localhost; route-test-copy@localhost")).to("smtp://localhost");
        from("pop3://route-test-result@localhost?consumer.initialDelay=100&consumer.delay=100").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
