public class ThriftMarshalAndUnmarshalJsonTest extends CamelTestSupport {
  private static final String WORK_JSON_TEST="{\"1\":{\"i32\":1},\"2\":{\"i32\":100},\"3\":{\"i32\":3},\"4\":{\"str\":\"This is a test thrift data\"}}";
  private static final String WORK_TEST_COMMENT="This is a test thrift data";
  private static final int WORK_TEST_NUM1=1;
  private static final int WORK_TEST_NUM2=100;
  private static final Operation WORK_TEST_OPERATION=Operation.MULTIPLY;
  @Test public void testMarshalAndUnmarshal() throws Exception {
    marshalAndUnmarshal("direct:in","direct:back");
  }
  @Test public void testMarshalAndUnmarshalWithDSL() throws Exception {
    marshalAndUnmarshal("direct:marshal","direct:unmarshalA");
  }
  @Test public void testMarshalSimpleJson() throws Exception {
    Gson gson=new Gson();
    Work input=new Work();
    MockEndpoint mock=getMockEndpoint("mock:reverse-sjson");
    mock.expectedMessageCount(1);
    input.num1=WORK_TEST_NUM1;
    input.num2=WORK_TEST_NUM2;
    input.op=WORK_TEST_OPERATION;
    input.comment=WORK_TEST_COMMENT;
    template.requestBody("direct:marshal-sjson",input);
    mock.assertIsSatisfied();
    String body=mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
    Work output=gson.fromJson(body,Work.class);
    assertEquals(WORK_TEST_NUM1,output.getNum1());
    assertEquals(WORK_TEST_NUM2,output.getNum2());
    assertEquals(WORK_TEST_COMMENT,output.getComment());
  }
  private void marshalAndUnmarshal(  String inURI,  String outURI) throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Work.class);
    Object marshalled=template.requestBody(inURI,WORK_JSON_TEST);
    template.sendBody(outURI,marshalled);
    mock.assertIsSatisfied();
    Work output=mock.getReceivedExchanges().get(0).getIn().getBody(Work.class);
    assertEquals(WORK_TEST_NUM1,output.getNum1());
    assertEquals(WORK_TEST_NUM2,output.getNum2());
    assertEquals(WORK_TEST_OPERATION,output.getOp());
    assertEquals(WORK_TEST_COMMENT,output.getComment());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        ThriftDataFormat format=new ThriftDataFormat(new Work(),ThriftDataFormat.CONTENT_TYPE_FORMAT_JSON);
        from("direct:in").unmarshal(format).to("mock:reverse");
        from("direct:back").marshal(format);
        from("direct:marshal").unmarshal().thrift("org.apache.camel.dataformat.thrift.generated.Work","json").to("mock:reverse");
        from("direct:unmarshalA").marshal().thrift();
        from("direct:marshal-sjson").marshal().thrift("org.apache.camel.dataformat.thrift.generated.Work","sjson").convertBodyTo(String.class).to("mock:reverse-sjson");
      }
    }
;
  }
}
