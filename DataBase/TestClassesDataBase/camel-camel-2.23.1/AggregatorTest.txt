/** 
 * @version 
 */
public class AggregatorTest extends ContextTestSupport {
  protected int messageCount=100;
  @Test public void testSendingLotsOfMessagesGetAggregatedToTheLatestMessage() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedBodiesReceived("message:" + messageCount);
    for (int i=1; i <= messageCount; i++) {
      String body="message:" + i;
      template.sendBodyAndHeader("direct:start",body,"cheese",123);
    }
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testOneMessage() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("cheese",123);
    headers.put("bar","viper bar");
    template.sendBodyAndHeaders("direct:predicate","test",headers);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testBatchTimeoutExpiry() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","message:1","cheese",123);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testAggregatorNotAtStart() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.message(0).header("visited").isNotNull();
    template.sendBodyAndHeader("seda:header","message:1","cheese",123);
    resultEndpoint.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").aggregate(header("cheese"),new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result");
        from("seda:header").setHeader("visited",constant(true)).aggregate(header("cheese"),new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result");
        from("direct:predicate").aggregate(header("cheese"),new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).completionPredicate(header("cheese").isEqualTo(123)).to("mock:result");
      }
    }
;
  }
}
