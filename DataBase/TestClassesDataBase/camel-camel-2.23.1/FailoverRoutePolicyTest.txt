public class FailoverRoutePolicyTest extends ZooKeeperTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FailoverRoutePolicyTest.class);
  protected CamelContext createCamelContext() throws Exception {
    disableJMX();
    client.createPersistent("/someapp","App node to contain policy election nodes...");
    client.createPersistent("/someapp/somepolicy","Node used by route policy to control active routes...");
    return super.createCamelContext();
  }
  @Test public void masterSlaveScenarioContolledByPolicy() throws Exception {
    ZookeeperPolicyEnforcedContext tetrisisMasterOfBlocks=createEnforcedContext("master");
    ZookeeperPolicyEnforcedContext slave=createEnforcedContext("slave");
    tetrisisMasterOfBlocks.sendMessageToEnforcedRoute("LIIIIIIIIIINNNNNNNNNEEEEEEE PEEEEEEICCCE",1);
    slave.sendMessageToEnforcedRoute("But lord there is no place for a square!??!",0);
    tetrisisMasterOfBlocks.shutdown();
    slave.sendMessageToEnforcedRoute("What a cruel and angry god...",1);
  }
private static class ZookeeperPolicyEnforcedContext {
    private CamelContext controlledContext;
    private ProducerTemplate template;
    private MockEndpoint mock;
    private String routename;
    ZookeeperPolicyEnforcedContext(    String name) throws Exception {
      controlledContext=new DefaultCamelContext();
      routename=name;
      template=controlledContext.createProducerTemplate();
      mock=controlledContext.getEndpoint("mock:controlled",MockEndpoint.class);
      controlledContext.addRoutes(new FailoverRoute(name));
      controlledContext.start();
    }
    public void sendMessageToEnforcedRoute(    String message,    int expected) throws InterruptedException {
      mock.expectedMessageCount(expected);
      try {
        template.sendBody("vm:" + routename,ExchangePattern.InOut,message);
      }
 catch (      Exception e) {
        if (expected > 0) {
          LOG.error(e.getMessage(),e);
          fail("Expected messages...");
        }
      }
      mock.await(2,TimeUnit.SECONDS);
      mock.assertIsSatisfied(1000);
    }
    public void shutdown() throws Exception {
      LoggerFactory.getLogger(getClass()).debug("stopping");
      controlledContext.stop();
      LoggerFactory.getLogger(getClass()).debug("stopped");
    }
  }
  private ZookeeperPolicyEnforcedContext createEnforcedContext(  String name) throws Exception, InterruptedException {
    ZookeeperPolicyEnforcedContext context=new ZookeeperPolicyEnforcedContext(name);
    delay(1000);
    return context;
  }
public static class FailoverRoute extends RouteBuilder {
    private String routename;
    public FailoverRoute(    String routename){
      this.routename=routename;
    }
    public void configure() throws Exception {
      ZooKeeperRoutePolicy policy=new ZooKeeperRoutePolicy("zookeeper:localhost:" + getServerPort() + "/someapp/somepolicy",1);
      from("vm:" + routename).routePolicy(policy).id(routename).to("mock:controlled");
    }
  }
}
