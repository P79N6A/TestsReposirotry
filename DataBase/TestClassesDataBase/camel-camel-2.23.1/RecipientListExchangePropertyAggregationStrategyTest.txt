/** 
 * @version 
 */
public class RecipientListExchangePropertyAggregationStrategyTest extends ContextTestSupport {
  private final MyAggregationStrategy strategy=new MyAggregationStrategy();
  @Test public void testRecipientExchangeProperty() throws Exception {
    getMockEndpoint("mock:a").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://a");
    getMockEndpoint("mock:a").expectedPropertyReceived(Exchange.TO_ENDPOINT,"mock://a");
    getMockEndpoint("mock:b").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://b");
    getMockEndpoint("mock:b").expectedPropertyReceived(Exchange.TO_ENDPOINT,"mock://b");
    getMockEndpoint("mock:c").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://c");
    getMockEndpoint("mock:c").expectedPropertyReceived(Exchange.TO_ENDPOINT,"mock://c");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello c");
    mock.expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://c");
    String out=template.requestBodyAndHeader("direct:start","Hello World","slip","direct:a,direct:b,direct:c",String.class);
    assertEquals("Hello c",out);
    assertMockEndpointsSatisfied();
    assertEquals(3,strategy.getUris().size());
    assertEquals("direct://a",strategy.getUris().get(0));
    assertEquals("direct://b",strategy.getUris().get(1));
    assertEquals("direct://c",strategy.getUris().get(2));
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").recipientList(header("slip")).aggregationStrategy(strategy).to("mock:result");
        from("direct:a").to("mock:a").transform(constant("Hello a"));
        from("direct:b").to("mock:b").transform(constant("Hello b"));
        from("direct:c").to("mock:c").transform(constant("Hello c"));
      }
    }
;
  }
private static class MyAggregationStrategy implements AggregationStrategy {
    private List<String> uris=new ArrayList<>();
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      uris.add(newExchange.getProperty(Exchange.RECIPIENT_LIST_ENDPOINT,String.class));
      return newExchange;
    }
    public List<String> getUris(){
      return uris;
    }
  }
}
