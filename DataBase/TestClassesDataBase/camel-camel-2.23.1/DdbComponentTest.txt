public class DdbComponentTest extends CamelTestSupport {
  private AmazonDDBClientMock amazonDDBClient;
  @Test public void whenTableExistsThenDoesntCreateItOnStart() throws Exception {
    assertNull(amazonDDBClient.createTableRequest);
  }
  @Test public void whenTableIsMissingThenCreateItOnStart() throws Exception {
    DefaultProducerTemplate.newInstance(context,"aws-ddb://creatibleTable?amazonDDBClient=#amazonDDBClient");
    assertEquals("creatibleTable",amazonDDBClient.createTableRequest.getTableName());
  }
  @Test(expected=IllegalArgumentException.class) public void createEndpointWithOnlySecretKeyConfiguration() throws Exception {
    DdbComponent component=new DdbComponent(context);
    component.createEndpoint("aws-ddb://activeTable?secretKey=xxx");
  }
  @Test public void createEndpointWithoutSecretKeyAndAccessKeyConfiguration() throws Exception {
    DdbComponent component=new DdbComponent(context);
    component.createEndpoint("aws-ddb://activeTable?amazonDDBClient=#amazonDDBClient");
  }
  @Test public void createEndpointWithOnlyAccessKeyAndSecretKey() throws Exception {
    DdbComponent component=new DdbComponent(context);
    component.createEndpoint("aws-ddb://activeTable?accessKey=xxx&secretKey=yyy");
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    amazonDDBClient=new AmazonDDBClientMock();
    registry.bind("amazonDDBClient",amazonDDBClient);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("aws-ddb://activeTable?amazonDDBClient=#amazonDDBClient");
      }
    }
;
  }
}
