/** 
 * @version 
 */
public class SplitParallelTimeoutTest extends ContextTestSupport {
  private volatile Exchange receivedExchange;
  private volatile int receivedIndex;
  private volatile int receivedTotal;
  private volatile long receivedTimeout;
  @Test public void testSplitParallelTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).body().not(body().contains("A"));
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
    assertNotNull(receivedExchange);
    assertEquals(0,receivedIndex);
    assertEquals(3,receivedTotal);
    assertEquals(100,receivedTimeout);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(","),new MyAggregationStrategy()).parallelProcessing().timeout(100).choice().when(body().isEqualTo("A")).to("direct:a").when(body().isEqualTo("B")).to("direct:b").when(body().isEqualTo("C")).to("direct:c").end().end().to("mock:result");
        from("direct:a").delay(200).setBody(constant("A"));
        from("direct:b").setBody(constant("B"));
        from("direct:c").delay(10).setBody(constant("C"));
      }
    }
;
  }
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
    public void timeout(    Exchange oldExchange,    int index,    int total,    long timeout){
      receivedExchange=oldExchange;
      receivedIndex=index;
      receivedTotal=total;
      receivedTimeout=timeout;
    }
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));
      return oldExchange;
    }
  }
}
