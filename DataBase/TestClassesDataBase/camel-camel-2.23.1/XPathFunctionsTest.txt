/** 
 * XPath with and without header test.
 */
public class XPathFunctionsTest extends ContextTestSupport {
  @Test public void testChoiceWithHeaderAndPropertiesSelectCamel() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:camel");
    mock.expectedBodiesReceived("<name>King</name>");
    mock.expectedHeaderReceived("type","Camel");
    template.sendBodyAndHeader("direct:in","<name>King</name>","type","Camel");
    mock.assertIsSatisfied();
  }
  @Test public void testChoiceWithNoHeaderAndPropertiesSelectDonkey() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:donkey");
    mock.expectedBodiesReceived("<name>Donkey Kong</name>");
    template.sendBody("direct:in","<name>Donkey Kong</name>");
    mock.assertIsSatisfied();
  }
  @Test public void testChoiceWithNoHeaderAndPropertiesSelectOther() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:other");
    mock.expectedBodiesReceived("<name>Other</name>");
    template.sendBody("direct:in","<name>Other</name>");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        PropertiesComponent properties=new PropertiesComponent();
        properties.setLocation("classpath:org/apache/camel/builder/xml/myprop.properties");
        context.addComponent("properties",properties);
        from("direct:in").choice().when().xpath("$type = function:properties('foo')").to("mock:camel").when().xpath("//name = function:simple('Donkey ${properties:bar}')").to("mock:donkey").otherwise().to("mock:other").end();
      }
    }
;
  }
}
