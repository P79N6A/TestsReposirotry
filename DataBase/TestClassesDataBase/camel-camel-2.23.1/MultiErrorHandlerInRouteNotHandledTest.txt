/** 
 * Unit test with multi route specific error handlers
 */
public class MultiErrorHandlerInRouteNotHandledTest extends ContextTestSupport {
  private MyProcessor outer=new MyProcessor();
  private MyProcessor inner=new MyProcessor();
  @Test public void testNoErrors() throws Exception {
    outer.setName("Claus");
    inner.setName("James");
    getMockEndpoint("mock:inner").expectedMessageCount(0);
    getMockEndpoint("mock:outer").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:end");
    mock.expectedHeaderReceived("name","James");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOuterError() throws Exception {
    outer.setName("Error");
    inner.setName("James");
    getMockEndpoint("mock:inner").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:outer");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInnerError() throws Exception {
    outer.setName("Claus");
    inner.setName("Error");
    getMockEndpoint("mock:outer").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:inner");
    mock.expectedHeaderReceived("name","Claus");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").errorHandler(deadLetterChannel("mock:outer").maximumRedeliveries(1).redeliveryDelay(0)).process(outer).to("direct:outer");
        from("direct:outer").errorHandler(deadLetterChannel("mock:inner").maximumRedeliveries(2).redeliveryDelay(0)).process(inner).to("mock:end");
      }
    }
;
  }
private static class MyProcessor implements Processor {
    private String name;
    public void process(    Exchange exchange) throws Exception {
      if (name.equals("Error")) {
        throw new IllegalArgumentException("Forced exception by unit test");
      }
      exchange.getIn().setHeader("name",name);
    }
    public void setName(    String name){
      this.name=name;
    }
  }
}
