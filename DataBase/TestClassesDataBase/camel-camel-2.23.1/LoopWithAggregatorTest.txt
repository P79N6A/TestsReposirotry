public class LoopWithAggregatorTest extends ContextTestSupport {
  @Test public void testLoopCopy() throws Exception {
    getMockEndpoint("mock:loop").expectedBodiesReceived("AB","AB","AB");
    getMockEndpoint("mock:result").expectedBodiesReceived("AB");
    template.requestBody("direct:start","A");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").loop(3).copy().enrich("direct:getTimeStamp",new ExampleAggregationStrategy()).inOnly("mock:loop").end().to("mock:result");
        from("direct:getTimeStamp").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody("B");
          }
        }
);
      }
    }
;
  }
public static class ExampleAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange original,    Exchange resource){
      String originalBody=original.getIn().getBody(String.class);
      if (original.getOut().getBody() != null) {
        originalBody=original.getOut().getBody(String.class);
      }
      String resourceResponse=resource.getIn().getBody(String.class);
      String mergeResult=originalBody + resourceResponse;
      if (original.getPattern().isOutCapable()) {
        original.getOut().setBody(mergeResult);
      }
 else {
        original.getIn().setBody(mergeResult);
      }
      return original;
    }
  }
}
