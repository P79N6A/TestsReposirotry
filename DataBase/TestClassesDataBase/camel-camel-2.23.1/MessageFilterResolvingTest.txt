/** 
 * Check if the MessageFilter is used and resolved from endpoint uri or global context configuration.
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={"classpath:org/apache/camel/component/spring/ws/MessageFilter-context.xml"}) public class MessageFilterResolvingTest extends AbstractSmockClientTest {
  @Autowired private ProducerTemplate template;
  private String body="<customerCountRequest xmlns='http://springframework.org/spring-ws'>" + "<customerName>John Doe</customerName>" + "</customerCountRequest>";
  @Test public void globalTestHeaderAttribute(){
    expect(soapHeader(new QName("http://newHeaderSupport/","testHeaderValue1"))).andExpect(soapHeader(new QName("http://virtualCheck/","globalFilter")));
    template.sendBodyAndHeader("direct:sendWithGlobalFilter",body,"headerKey",new QName("http://newHeaderSupport/","testHeaderValue1"));
  }
  @Test public void localTestHeaderAttribute(){
    expect(soapHeader(new QName("http://newHeaderSupport/","testHeaderValue1"))).andExpect(soapHeader(new QName("http://virtualCheck/","localFilter")));
    template.sendBodyAndHeader("direct:sendWithLocalFilter",body,"headerKey",new QName("http://newHeaderSupport/","testHeaderValue1"));
  }
  @Test public void emptyTestHeaderAttribute(){
    expect(doesntContains(soapHeader(new QName("http://newHeaderSupport/","testHeaderValue1"))));
    template.sendBodyAndHeader("direct:sendWithoutFilter",body,"headerKey",new QName("http://newHeaderSupport/","testHeaderValue1"));
  }
  private RequestMatcher doesntContains(  final RequestMatcher soapHeader){
    return new RequestMatcher(){
      public void match(      URI uri,      WebServiceMessage request) throws IOException, AssertionError {
        try {
          soapHeader.match(uri,request);
        }
 catch (        AssertionError e) {
          return;
        }
        throw new AssertionError("Should failed!");
      }
    }
;
  }
  @Autowired public void setApplicationContext(  ApplicationContext applicationContext){
    createServer(applicationContext);
  }
  @After public void verify(){
    super.verify();
  }
}
