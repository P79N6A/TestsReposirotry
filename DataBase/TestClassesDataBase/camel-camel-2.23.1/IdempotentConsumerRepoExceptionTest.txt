/** 
 * @version 
 */
public class IdempotentConsumerRepoExceptionTest extends ContextTestSupport {
  private IdempotentRepository myRepo=new MyRepo();
  @Test public void testRepoException() throws Exception {
    getMockEndpoint("mock:dead").expectedBodiesReceived("nineninenine");
    getMockEndpoint("mock:result").expectedBodiesReceived("one","two","three");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","two","messageId","2");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","nineninenine","messageId","999");
    template.sendBodyAndHeader("direct:start","two","messageId","2");
    template.sendBodyAndHeader("direct:start","three","messageId","3");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").idempotentConsumer(header("messageId"),myRepo).to("mock:result");
      }
    }
;
  }
private class MyRepo extends MemoryIdempotentRepository {
    @Override public boolean add(    String key){
      if ("999".equals(key)) {
        throw new IllegalArgumentException("Forced");
      }
      return super.add(key);
    }
  }
}
