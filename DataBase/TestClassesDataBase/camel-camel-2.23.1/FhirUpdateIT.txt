/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirUpdate} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirUpdateIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirUpdateIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirUpdateApiMethod.class).getName();
  @Test public void testResource() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",this.patient);
    headers.put("CamelFhir.id",this.patient.getIdElement());
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Test public void testResourceNoId() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",this.patient);
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Test public void testResourceStringId() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",this.patient);
    headers.put("CamelFhir.stringId",this.patient.getIdElement().getIdPart());
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE_WITH_STRING_ID",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Test public void testResourceAsString() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceAsString",this.fhirContext.newJsonParser().encodeResourceToString(this.patient));
    headers.put("CamelFhir.id",this.patient.getIdElement());
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE_AS_STRING",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Test public void testResourceAsStringWithStringId() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceAsString",this.fhirContext.newJsonParser().encodeResourceToString(this.patient));
    headers.put("CamelFhir.stringId",this.patient.getIdElement().getIdPart());
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE_AS_STRING_WITH_STRING_ID",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Test public void testResourceBySearchUrl() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    String url="Patient?" + Patient.SP_IDENTIFIER + '='+ URLEncoder.encode(this.patient.getId(),"UTF-8");
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",this.patient);
    headers.put("CamelFhir.url",url);
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE_BY_SEARCH_URL",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Test public void testResourceBySearchUrlAndResourceAsString() throws Exception {
    Date date=new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29");
    assertNotEquals(date,patient.getBirthDate());
    this.patient.setBirthDate(date);
    String url="Patient?" + Patient.SP_IDENTIFIER + '='+ URLEncoder.encode(this.patient.getId(),"UTF-8");
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceAsString",this.fhirContext.newJsonParser().encodeResourceToString(this.patient));
    headers.put("CamelFhir.url",url);
    headers.put("CamelFhir.preferReturn",PreferReturnEnum.REPRESENTATION);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING",null,headers);
    assertNotNull("resource result",result);
    LOG.debug("resource: " + result);
    assertEquals("Birth date not updated!",date,((Patient)result.getResource()).getBirthDate());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource");
        from("direct://RESOURCE_WITH_STRING_ID").to("fhir://" + PATH_PREFIX + "/resource");
        from("direct://RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resource");
        from("direct://RESOURCE_AS_STRING_WITH_STRING_ID").to("fhir://" + PATH_PREFIX + "/resource");
        from("direct://RESOURCE_BY_SEARCH_URL").to("fhir://" + PATH_PREFIX + "/resourceBySearchUrl");
        from("direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resourceBySearchUrl");
      }
    }
;
  }
}
