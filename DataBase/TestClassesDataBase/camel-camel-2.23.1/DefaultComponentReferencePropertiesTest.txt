/** 
 * Unit test for reference properties
 */
public class DefaultComponentReferencePropertiesTest extends ContextTestSupport {
public final class MyEndpoint extends DefaultEndpoint {
    private Expression expression;
    private String stringExpression;
    private String name;
    private Expression special;
    private MyEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    public boolean isSingleton(){
      return true;
    }
    public Producer createProducer() throws Exception {
      return null;
    }
    public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    public void setExpression(    List<?> expressions){
    }
    public void setExpression(    Expression expression){
      this.expression=expression;
    }
    public void setExpression(    String expression){
      stringExpression=expression;
    }
    public void setName(    String name){
      this.name=name;
    }
    public void setSpecial(    Expression special){
      this.special=special;
    }
  }
public final class MyComponent extends DefaultComponent {
    private MyComponent(    CamelContext context){
      super(context);
    }
    protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      MyEndpoint result=new MyEndpoint(uri,this);
      setProperties(result,parameters);
      return result;
    }
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myExpression",ExpressionBuilder.bodyExpression());
    return jndi;
  }
  @Test public void testEmptyPath() throws Exception {
    DefaultComponent component=new DefaultComponent(context){
      @Override protected Endpoint createEndpoint(      String uri,      String remaining,      Map<String,Object> parameters) throws Exception {
        assertEquals("foo://?name=Christian",uri);
        assertEquals("",remaining);
        assertEquals(1,parameters.size());
        assertEquals("Christian",parameters.get("name"));
        return null;
      }
    }
;
    component.createEndpoint("foo://?name=Christian");
  }
  @Test public void testOnlyStringSetter() throws Exception {
    MyComponent component=new MyComponent(context);
    MyEndpoint endpoint=(MyEndpoint)component.createEndpoint("foo://?name=Claus");
    assertNotNull(endpoint);
    assertEquals("Claus",endpoint.name);
    assertNull(endpoint.expression);
    assertNull(endpoint.stringExpression);
  }
  @Test public void testCallStringSetter() throws Exception {
    MyComponent component=new MyComponent(context);
    MyEndpoint endpoint=(MyEndpoint)component.createEndpoint("foo://?expression=hello");
    assertNotNull(endpoint);
    assertEquals("hello",endpoint.stringExpression);
    assertNull(endpoint.expression);
    assertNull(endpoint.name);
  }
  @Test public void testNoBeanInRegistryThenCallStringSetter() throws Exception {
    MyComponent component=new MyComponent(context);
    MyEndpoint endpoint=(MyEndpoint)component.createEndpoint("foo://?expression=#hello");
    assertNotNull(endpoint);
    assertEquals("#hello",endpoint.stringExpression);
    assertNull(endpoint.expression);
    assertNull(endpoint.name);
  }
  @Test public void testCallExpressionSetter() throws Exception {
    MyComponent component=new MyComponent(context);
    MyEndpoint endpoint=(MyEndpoint)component.createEndpoint("foo://?expression=#myExpression");
    assertNotNull(endpoint);
    assertNull(endpoint.stringExpression);
    assertNotNull(endpoint.expression);
    assertNull(endpoint.name);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("Hello World");
    assertEquals("Hello World",endpoint.expression.evaluate(exchange,String.class));
  }
  @Test public void testCallSingleExpressionSetter() throws Exception {
    MyComponent component=new MyComponent(context);
    MyEndpoint endpoint=(MyEndpoint)component.createEndpoint("foo://?special=#myExpression");
    assertNotNull(endpoint);
    assertNull(endpoint.stringExpression);
    assertNull(endpoint.expression);
    assertNull(endpoint.name);
    assertNotNull(endpoint.special);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("Hello World");
    assertEquals("Hello World",endpoint.special.evaluate(exchange,String.class));
  }
  @Test public void testTypoInParameter() throws Exception {
    MyComponent component=new MyComponent(context);
    try {
      component.createEndpoint("foo://?xxxexpression=#hello");
      fail("Should have throw a ResolveEndpointFailedException");
    }
 catch (    ResolveEndpointFailedException e) {
    }
  }
  @Test public void testTypoInParameterValue() throws Exception {
    MyComponent component=new MyComponent(context);
    try {
      component.createEndpoint("foo://?special=#dummy");
      fail("Should have throw a IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
