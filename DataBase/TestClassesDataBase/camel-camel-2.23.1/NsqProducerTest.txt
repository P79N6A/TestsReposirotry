public class NsqProducerTest extends NsqTestSupport {
  private static final int NUMBER_OF_MESSAGES=10000;
  private static final String TEST_MESSAGE="Hello NSQProducer!";
  @Test public void testProducer() throws Exception {
    CountDownLatch lock=new CountDownLatch(1);
    template.sendBody("direct:send",TEST_MESSAGE);
    AtomicInteger counter=new AtomicInteger(0);
    NSQLookup lookup=new DefaultNSQLookup();
    lookup.addLookupAddress("localhost",4161);
    NSQConsumer consumer=new NSQConsumer(lookup,"test","testconsumer",(message) -> {
      counter.incrementAndGet();
      message.finished();
      lock.countDown();
      assertTrue(new String(message.getMessage()).equals(TEST_MESSAGE));
    }
);
    consumer.start();
    lock.await(30,TimeUnit.SECONDS);
    assertTrue(counter.get() == Long.valueOf(1));
    consumer.shutdown();
  }
  @Test public void testLoadProducer() throws Exception {
    CountDownLatch lock=new CountDownLatch(NUMBER_OF_MESSAGES);
    for (int i=0; i < NUMBER_OF_MESSAGES; i++) {
      template.sendBody("direct:send","test" + i);
    }
    AtomicInteger counter=new AtomicInteger(0);
    NSQLookup lookup=new DefaultNSQLookup();
    lookup.addLookupAddress("localhost",4161);
    NSQConsumer consumer=new NSQConsumer(lookup,"test","testconsumer",(message) -> {
      counter.incrementAndGet();
      message.finished();
      lock.countDown();
      assertTrue(message.getAttempts() == 1);
    }
);
    consumer.start();
    lock.await(30,TimeUnit.SECONDS);
    assertTrue(counter.get() == Long.valueOf(NUMBER_OF_MESSAGES));
    consumer.shutdown();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:send").to("nsq://" + getNsqProducerUrl() + "?topic=test");
      }
    }
;
  }
}
