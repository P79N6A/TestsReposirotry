public class RestUndertowHttpOptionsTest extends BaseUndertowTest {
  @Test public void testUndertowServerOptions() throws Exception {
    Exchange exchange=template.request("undertow:http://localhost:" + getPort() + "/users/v1/customers",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(Exchange.HTTP_METHOD,"OPTIONS");
      }
    }
);
    assertEquals(200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("GET,OPTIONS",exchange.getOut().getHeader("ALLOW"));
    assertEquals("",exchange.getOut().getBody(String.class));
    exchange=fluentTemplate.to("undertow:http://localhost:" + getPort() + "/users/v1/123").withHeader(Exchange.HTTP_METHOD,"OPTIONS").send();
    assertEquals(200,exchange.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("PUT,OPTIONS",exchange.getIn().getHeader("ALLOW"));
    assertEquals("",exchange.getIn().getBody(String.class));
  }
  @Test public void testMultipleHttpOptions(){
    Exchange exchange=template.request("undertow:http://localhost:" + getPort() + "/users/v1/options",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(Exchange.HTTP_METHOD,"OPTIONS");
      }
    }
);
    assertEquals(200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("GET,POST,OPTIONS",exchange.getOut().getHeader("ALLOW"));
    assertEquals("",exchange.getOut().getBody(String.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("undertow").host("localhost").port(getPort());
        rest("/users/").get("v1/customers").to("mock:customers").put("v1/{id}").to("mock:id").get("v1/options").to("mock:options").post("v1/options").to("mock:options");
      }
    }
;
  }
}
