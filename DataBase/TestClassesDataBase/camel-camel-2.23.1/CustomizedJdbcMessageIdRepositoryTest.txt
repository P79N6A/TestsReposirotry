public class CustomizedJdbcMessageIdRepositoryTest extends CamelSpringTestSupport {
  protected static final String SELECT_ALL_STRING="SELECT messageId FROM CUSTOMIZED_MESSAGE_REPOSITORY WHERE processorName = ?";
  protected static final String PROCESSOR_NAME="myProcessorName";
  protected JdbcTemplate jdbcTemplate;
  protected DataSource dataSource;
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @EndpointInject(uri="mock:error") protected MockEndpoint errorEndpoint;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    dataSource=context.getRegistry().lookupByNameAndType("dataSource",DataSource.class);
    jdbcTemplate=new JdbcTemplate(dataSource);
    jdbcTemplate.afterPropertiesSet();
  }
  @Test public void testDuplicateMessagesAreFilteredOut() throws Exception {
    resultEndpoint.expectedBodiesReceived("one","two","three");
    errorEndpoint.expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","two","messageId","2");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","two","messageId","2");
    template.sendBodyAndHeader("direct:start","one","messageId","1");
    template.sendBodyAndHeader("direct:start","three","messageId","3");
    assertMockEndpointsSatisfied();
    List<String> receivedMessageIds=jdbcTemplate.queryForList(SELECT_ALL_STRING,String.class,PROCESSOR_NAME);
    assertEquals(3,receivedMessageIds.size());
    assertTrue(receivedMessageIds.contains("1"));
    assertTrue(receivedMessageIds.contains("2"));
    assertTrue(receivedMessageIds.contains("3"));
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/processor/idempotent/jdbc/customized-spring.xml");
  }
}
