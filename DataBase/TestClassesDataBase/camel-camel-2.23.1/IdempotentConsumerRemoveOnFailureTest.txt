/** 
 * @version
 */
public class IdempotentConsumerRemoveOnFailureTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Test public void testFailedExchangesNotRemoved() throws Exception {
    resultEndpoint.expectedBodiesReceived("one","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").idempotentConsumer(header("messageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).removeOnFailure(false).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("messageId",String.class);
            if (id.equals("2")) {
              throw new IllegalArgumentException("Damn I cannot handle id 2");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
  protected void sendMessage(  final Object messageId,  final Object body){
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("messageId",messageId);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start");
    resultEndpoint=getMockEndpoint("mock:result");
  }
}
