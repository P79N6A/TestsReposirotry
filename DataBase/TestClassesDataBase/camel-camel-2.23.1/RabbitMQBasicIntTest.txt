public class RabbitMQBasicIntTest extends AbstractRabbitMQIntTest {
  @EndpointInject(uri="rabbitmq:localhost:5672/foo?username=cameltest&password=cameltest") private Endpoint foo;
  @EndpointInject(uri="rabbitmq:localhost:5672/bar?username=cameltest&password=cameltest") private Endpoint bar;
  @EndpointInject(uri="mock:result") private MockEndpoint mock;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(foo).log("FOO received: ${body}").to(bar);
        from(bar).log("BAR received: ${body}").to(mock).transform().simple("Bye ${body}");
      }
    }
;
  }
  @Test public void sentBasicInOnly() throws Exception {
    mock.expectedBodiesReceived("World");
    log.info("Sending to FOO");
    template.sendBody(foo,"World");
    log.info("Sending to FOO done");
    mock.assertIsSatisfied();
  }
  @Test public void sentBasicInOut() throws Exception {
    mock.expectedBodiesReceived("World");
    log.info("Sending to FOO");
    String out=template.requestBody(foo,"World",String.class);
    assertEquals("Bye World",out);
    log.info("Sending to FOO done");
    mock.assertIsSatisfied();
  }
  @Test public void sentBasicInOutTwo() throws Exception {
    mock.expectedBodiesReceived("World","Camel");
    log.info("Sending to FOO");
    String out=template.requestBody(foo,"World",String.class);
    assertEquals("Bye World",out);
    out=template.requestBody(foo,"Camel",String.class);
    assertEquals("Bye Camel",out);
    log.info("Sending to FOO done");
    mock.assertIsSatisfied();
  }
}
