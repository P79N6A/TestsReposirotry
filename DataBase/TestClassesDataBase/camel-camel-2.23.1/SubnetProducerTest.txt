@RunWith(MockitoJUnitRunner.class) public class SubnetProducerTest extends NeutronProducerTestSupport {
  private Subnet dummySubnet;
  @Mock private Subnet testOSsubnet;
  @Mock private SubnetService subnetService;
  @Captor private ArgumentCaptor<Subnet> subnetCaptor;
  @Captor private ArgumentCaptor<String> subnetIdCaptor;
  @Before public void setUp(){
    when(networkingService.subnet()).thenReturn(subnetService);
    producer=new SubnetProducer(endpoint,client);
    when(subnetService.create(any())).thenReturn(testOSsubnet);
    when(subnetService.get(anyString())).thenReturn(testOSsubnet);
    List<Subnet> getAllList=new ArrayList<>();
    getAllList.add(testOSsubnet);
    getAllList.add(testOSsubnet);
    doReturn(getAllList).when(subnetService).list();
    dummySubnet=createSubnet();
    when(testOSsubnet.getName()).thenReturn(dummySubnet.getName());
    when(testOSsubnet.getNetworkId()).thenReturn(dummySubnet.getNetworkId());
    when(testOSsubnet.getId()).thenReturn(UUID.randomUUID().toString());
  }
  @Test public void createTest() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(OpenstackConstants.NAME,dummySubnet.getName());
    msg.setHeader(NeutronConstants.NETWORK_ID,dummySubnet.getNetworkId());
    msg.setHeader(NeutronConstants.IP_VERSION,IPVersionType.V4);
    producer.process(exchange);
    verify(subnetService).create(subnetCaptor.capture());
    assertEqualsSubnet(dummySubnet,subnetCaptor.getValue());
    assertNotNull(msg.getBody(Subnet.class).getId());
  }
  @Test public void getTest() throws Exception {
    final String subnetID="myNetID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.GET);
    msg.setHeader(NeutronConstants.SUBNET_ID,subnetID);
    producer.process(exchange);
    verify(subnetService).get(subnetIdCaptor.capture());
    assertEquals(subnetID,subnetIdCaptor.getValue());
    assertEqualsSubnet(testOSsubnet,msg.getBody(Subnet.class));
  }
  @Test public void getAllTest() throws Exception {
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.GET_ALL);
    producer.process(exchange);
    final List<Subnet> result=msg.getBody(List.class);
    assertTrue(result.size() == 2);
    assertEquals(testOSsubnet,result.get(0));
  }
  @Test public void deleteTest() throws Exception {
    when(subnetService.delete(anyString())).thenReturn(ActionResponse.actionSuccess());
    final String subnetID="myNetID";
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.DELETE);
    msg.setHeader(OpenstackConstants.ID,subnetID);
    producer.process(exchange);
    verify(subnetService).delete(subnetIdCaptor.capture());
    assertEquals(subnetID,subnetIdCaptor.getValue());
    assertFalse(msg.isFault());
    final String failureMessage="fail";
    when(subnetService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failureMessage,404));
    producer.process(exchange);
    assertTrue(msg.isFault());
    assertTrue(msg.getBody(String.class).contains(failureMessage));
  }
  private Subnet createSubnet(){
    return Builders.subnet().name("name").networkId("netId").build();
  }
  private void assertEqualsSubnet(  Subnet old,  Subnet newSubnet){
    assertEquals(old.getName(),newSubnet.getName());
    assertEquals(old.getNetworkId(),newSubnet.getNetworkId());
  }
}
