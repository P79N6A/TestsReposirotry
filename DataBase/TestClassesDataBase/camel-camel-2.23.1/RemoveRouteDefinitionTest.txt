/** 
 * @version 
 */
public class RemoveRouteDefinitionTest extends ManagementTestSupport {
  @SuppressWarnings("deprecation") @Test public void testShutdownRoute() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    RouteDefinition definition=context.getRouteDefinition("route1");
    List<RouteDefinition> routeDefinitions=new ArrayList<>();
    routeDefinitions.add(definition);
    context.shutdownRoute("route1");
    set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(0,set.size());
  }
  @Test public void testStopAndRemoveRoute() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    RouteDefinition definition=context.getRouteDefinition("route1");
    List<RouteDefinition> routeDefinitions=new ArrayList<>();
    routeDefinitions.add(definition);
    context.stopRoute("route1");
    context.removeRoute("route1");
    set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(0,set.size());
  }
  @Test public void testStopRoute() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    RouteDefinition definition=context.getRouteDefinition("route1");
    List<RouteDefinition> routeDefinitions=new ArrayList<>();
    routeDefinitions.add(definition);
    context.stopRoute("route1");
    set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("route1").to("log:foo").to("mock:result");
      }
    }
;
  }
}
