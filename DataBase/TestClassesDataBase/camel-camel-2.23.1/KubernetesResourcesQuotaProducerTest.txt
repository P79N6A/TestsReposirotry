public class KubernetesResourcesQuotaProducerTest extends KubernetesTestSupport {
  @Rule public KubernetesServer server=new KubernetesServer();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("kubernetesClient",server.getClient());
    return registry;
  }
  @Test public void listTest() throws Exception {
    server.expect().withPath("/api/v1/resourcequotas").andReturn(200,new ResourceQuotaListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    List<ResourceQuota> result=template.requestBody("direct:list","",List.class);
    assertEquals(3,result.size());
  }
  @Test public void deleteResourceQuota() throws Exception {
    ResourceQuota rq1=new ResourceQuotaBuilder().withNewMetadata().withName("rq1").withNamespace("test").and().build();
    server.expect().withPath("/api/v1/namespaces/test/resourcequotas/rq1").andReturn(200,rq1).once();
    Exchange ex=template.request("direct:delete",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_RESOURCES_QUOTA_NAME,"rq1");
      }
    }
);
    boolean rqDeleted=ex.getOut().getBody(Boolean.class);
    assertTrue(rqDeleted);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:list").to("kubernetes-resources-quota:///?kubernetesClient=#kubernetesClient&operation=listResourcesQuota");
        from("direct:delete").to("kubernetes-resources-quota:///?kubernetesClient=#kubernetesClient&operation=deleteResourceQuota");
      }
    }
;
  }
}
