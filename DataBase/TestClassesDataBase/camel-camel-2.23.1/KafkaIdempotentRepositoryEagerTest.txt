/** 
 * Test for eager idempotentRepository usage.
 */
public class KafkaIdempotentRepositoryEagerTest extends CamelTestSupport {
  @Rule public EmbeddedZookeeper zookeeper=new EmbeddedZookeeper();
  @Rule public EmbeddedKafkaBroker kafkaBroker=new EmbeddedKafkaBroker(0,zookeeper.getConnection());
  private KafkaIdempotentRepository kafkaIdempotentRepository;
  @EndpointInject(uri="mock:out") private MockEndpoint mockOut;
  @EndpointInject(uri="mock:before") private MockEndpoint mockBefore;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_IDEM",kafkaBroker.getBrokerList());
    jndi.bind("kafkaIdempotentRepository",kafkaIdempotentRepository);
    return jndi;
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").to("mock:before").idempotentConsumer(header("id")).messageIdRepositoryRef("kafkaIdempotentRepository").to("mock:out").end();
      }
    }
;
  }
  @Test public void testRemovesDuplicates() throws InterruptedException {
    for (int i=0; i < 10; i++) {
      template.sendBodyAndHeader("direct:in","Test message","id",i % 5);
    }
    assertEquals(5,kafkaIdempotentRepository.getDuplicateCount());
    assertEquals(5,mockOut.getReceivedCounter());
    assertEquals(10,mockBefore.getReceivedCounter());
  }
  @Test public void testRollsBackOnException() throws InterruptedException {
    mockOut.whenAnyExchangeReceived(exchange -> {
      int id=exchange.getIn().getHeader("id",Integer.class);
      if (id == 0) {
        throw new IllegalArgumentException("Boom!");
      }
    }
);
    for (int i=0; i < 10; i++) {
      try {
        template.sendBodyAndHeader("direct:in","Test message","id",i % 5);
      }
 catch (      CamelExecutionException cex) {
      }
    }
    assertEquals(4,kafkaIdempotentRepository.getDuplicateCount());
    assertEquals(6,mockOut.getReceivedCounter());
    assertEquals(10,mockBefore.getReceivedCounter());
  }
}
