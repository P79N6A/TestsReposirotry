public class ServiceNowTest extends ServiceNowTestSupport {
  @Test public void testExceptions() throws Exception {
    try {
      template().sendBodyAndHeaders("direct:servicenow",null,kvBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_RETRIEVE).put(ServiceNowParams.SYSPARM_QUERY,"number=" + UUID.randomUUID().toString()).put(ServiceNowParams.PARAM_TABLE_NAME,"incident").build());
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof ServiceNowException);
      ServiceNowException sne=(ServiceNowException)e.getCause();
      assertEquals("failure",sne.getStatus());
      assertTrue(sne.getMessage().contains("No Record found"));
      assertTrue(sne.getDetail().contains("Records matching query not found"));
    }
    try {
      template().sendBodyAndHeaders("direct:servicenow",null,kvBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_RETRIEVE).put(ServiceNowParams.SYSPARM_QUERY,"number=" + UUID.randomUUID().toString()).put(ServiceNowParams.PARAM_TABLE_NAME,"notExistingTable").build());
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof ServiceNowException);
      ServiceNowException sne=(ServiceNowException)e.getCause();
      assertEquals("failure",sne.getStatus());
      assertTrue(sne.getMessage().contains("Invalid table notExistingTable"));
      assertNull(sne.getDetail());
    }
  }
  @Test public void testBodyMismatch() throws Exception {
    try {
      template().sendBodyAndHeaders("direct:servicenow","NotAnIncidentObject",kvBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowParams.PARAM_TABLE_NAME,"incident").build());
      fail("Should fail as body is not compatible with model defined in route for table incident");
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
    }
  }
  @Test public void testRequestResponseModels() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:servicenow");
    mock.reset();
    mock.expectedMessageCount(1);
    Incident incident=new Incident();
    incident.setDescription("my incident");
    incident.setShortDescription("An incident");
    incident.setSeverity(1);
    incident.setImpact(1);
    template().sendBodyAndHeaders("direct:servicenow",incident,kvBuilder().put(ServiceNowConstants.RESOURCE,ServiceNowConstants.RESOURCE_TABLE).put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowConstants.REQUEST_MODEL,Incident.class).put(ServiceNowConstants.RESPONSE_MODEL,JsonNode.class).put(ServiceNowParams.PARAM_TABLE_NAME,"incident").build());
    mock.assertIsSatisfied();
    Object body=mock.getExchanges().get(0).getIn().getBody();
    assertNotNull(body);
    assertTrue(body instanceof JsonNode);
  }
  @Test public void testRequestResponseAsString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:servicenow");
    mock.reset();
    mock.expectedMessageCount(1);
    Incident incident=new Incident();
    incident.setDescription("my incident");
    incident.setShortDescription("An incident");
    incident.setSeverity(1);
    incident.setImpact(1);
    template().sendBodyAndHeaders("direct:servicenow",incident,kvBuilder().put(ServiceNowConstants.RESOURCE,ServiceNowConstants.RESOURCE_TABLE).put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowConstants.REQUEST_MODEL,Incident.class).put(ServiceNowConstants.RESPONSE_MODEL,String.class).put(ServiceNowParams.PARAM_TABLE_NAME,"incident").build());
    mock.assertIsSatisfied();
    Object body=mock.getExchanges().get(0).getIn().getBody();
    assertNotNull(body);
    assertTrue(body instanceof String);
  }
  @Test public void testVersionedApiRequest() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:servicenow");
    mock.reset();
    mock.expectedMessageCount(1);
    Incident incident=new Incident();
    incident.setDescription("my incident");
    incident.setShortDescription("An incident");
    incident.setSeverity(1);
    incident.setImpact(1);
    template().sendBodyAndHeaders("direct:servicenow",incident,kvBuilder().put(ServiceNowConstants.RESOURCE,ServiceNowConstants.RESOURCE_TABLE).put(ServiceNowConstants.API_VERSION,"v1").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowConstants.REQUEST_MODEL,Incident.class).put(ServiceNowConstants.RESPONSE_MODEL,JsonNode.class).put(ServiceNowParams.PARAM_TABLE_NAME,"incident").build());
    mock.assertIsSatisfied();
    Object body=mock.getExchanges().get(0).getIn().getBody();
    assertNotNull(body);
    assertTrue(body instanceof JsonNode);
  }
  @Test public void testDateTimeWithDefaults() throws Exception {
    final ServiceNowConfiguration configuration=new ServiceNowConfiguration();
    ObjectMapper mapper=configuration.getOrCreateMapper();
    DateTimeBean bean=new DateTimeBean();
    String serialized=mapper.writeValueAsString(bean);
    LOGGER.debug(serialized);
    DateTimeBean deserialized=mapper.readValue(serialized,DateTimeBean.class);
    Assert.assertEquals(bean.dateTime,deserialized.dateTime);
    Assert.assertEquals(bean.date,deserialized.date);
    Assert.assertEquals(bean.time,deserialized.time);
  }
  @Test public void testDateTimeWithCustomFormats() throws Exception {
    final ServiceNowConfiguration configuration=new ServiceNowConfiguration();
    configuration.setDateFormat("yyyyMMdd");
    configuration.setTimeFormat("HHmmss");
    ObjectMapper mapper=configuration.getOrCreateMapper();
    DateTimeBean bean=new DateTimeBean();
    String serialized=mapper.writeValueAsString(bean);
    LOGGER.debug(serialized);
    DateTimeBean deserialized=mapper.readValue(serialized,DateTimeBean.class);
    Assert.assertEquals(bean.dateTime,deserialized.dateTime);
    Assert.assertEquals(bean.date,deserialized.date);
    Assert.assertEquals(bean.time,deserialized.time);
  }
public static class DateTimeBean {
    LocalDateTime dateTime;
    LocalDate date;
    LocalTime time;
    public DateTimeBean(){
      dateTime=LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS);
      date=dateTime.toLocalDate();
      time=dateTime.toLocalTime();
    }
    public LocalDateTime getDateTime(){
      return dateTime;
    }
    public void setDateTime(    LocalDateTime dateTime){
      this.dateTime=dateTime;
    }
    public LocalDate getDate(){
      return date;
    }
    public void setDate(    LocalDate date){
      this.date=date;
    }
    public LocalTime getTime(){
      return time;
    }
    public void setTime(    LocalTime time){
      this.time=time;
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:servicenow").to("servicenow:{{env:SERVICENOW_INSTANCE}}").to("log:org.apache.camel.component.servicenow?level=INFO&showAll=true").to("mock:servicenow");
      }
    }
;
  }
}
