/** 
 * Test the behavior of the timed notifier.
 */
public class TimedLeaderNotifierTest {
  private CamelContext context;
  private TimedLeaderNotifier notifier;
  private volatile Optional<String> currentLeader;
  private volatile Set<String> currentMembers;
  @Before public void init() throws Exception {
    this.context=new DefaultCamelContext();
    this.context.start();
    this.notifier=new TimedLeaderNotifier(context,e -> {
      if (e instanceof KubernetesClusterEvent.KubernetesClusterLeaderChangedEvent) {
        currentLeader=((KubernetesClusterEvent.KubernetesClusterLeaderChangedEvent)e).getData();
      }
 else       if (e instanceof KubernetesClusterEvent.KubernetesClusterMemberListChangedEvent) {
        currentMembers=((KubernetesClusterEvent.KubernetesClusterMemberListChangedEvent)e).getData();
      }
    }
);
    this.notifier.start();
  }
  @After public void destroy() throws Exception {
    this.notifier.stop();
    this.context.stop();
  }
  @Test public void testMultipleCalls() throws Exception {
    Set<String> members=new TreeSet<>(Arrays.asList("one","two","three"));
    notifier.refreshLeadership(Optional.of("one"),System.currentTimeMillis(),50L,members);
    notifier.refreshLeadership(Optional.of("two"),System.currentTimeMillis(),50L,members);
    notifier.refreshLeadership(Optional.of("three"),System.currentTimeMillis(),5000L,members);
    Thread.sleep(80);
    assertEquals(Optional.of("three"),currentLeader);
    assertEquals(members,currentMembers);
  }
  @Test public void testExpiration() throws Exception {
    Set<String> members=new TreeSet<>(Arrays.asList("one","two","three"));
    notifier.refreshLeadership(Optional.of("one"),System.currentTimeMillis(),50L,members);
    notifier.refreshLeadership(Optional.of("two"),System.currentTimeMillis(),50L,members);
    Thread.sleep(160);
    assertEquals(Optional.empty(),currentLeader);
    assertEquals(members,currentMembers);
    notifier.refreshLeadership(Optional.of("three"),System.currentTimeMillis(),5000L,members);
    Thread.sleep(80);
    assertEquals(Optional.of("three"),currentLeader);
    assertEquals(members,currentMembers);
  }
  @Test public void testMemberChanging() throws Exception {
    Set<String> members1=Collections.singleton("one");
    Set<String> members2=new TreeSet<>(Arrays.asList("one","two"));
    notifier.refreshLeadership(Optional.of("one"),System.currentTimeMillis(),50L,members1);
    notifier.refreshLeadership(Optional.of("two"),System.currentTimeMillis(),5000L,members2);
    Thread.sleep(80);
    assertEquals(Optional.of("two"),currentLeader);
    assertEquals(members2,currentMembers);
  }
  @Test public void testOldData() throws Exception {
    Set<String> members=new TreeSet<>(Arrays.asList("one","two","three"));
    notifier.refreshLeadership(Optional.of("one"),System.currentTimeMillis(),1000L,members);
    Thread.sleep(80);
    notifier.refreshLeadership(Optional.of("two"),System.currentTimeMillis() - 1000,900L,members);
    Thread.sleep(80);
    assertEquals(Optional.empty(),currentLeader);
  }
  @Test public void testNewLeaderEmpty() throws Exception {
    Set<String> members=new TreeSet<>(Arrays.asList("one","two","three"));
    notifier.refreshLeadership(Optional.of("one"),System.currentTimeMillis(),1000L,members);
    Thread.sleep(80);
    notifier.refreshLeadership(Optional.empty(),null,null,members);
    Thread.sleep(80);
    assertEquals(Optional.empty(),currentLeader);
  }
}
