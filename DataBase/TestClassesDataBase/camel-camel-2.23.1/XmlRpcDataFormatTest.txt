public class XmlRpcDataFormatTest extends CamelTestSupport {
  @Test public void testRequestMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:request");
    mock.expectedMessageCount(1);
    XmlRpcRequest result=template.requestBody("direct:request",new XmlRpcRequestImpl("greet",new Object[]{"you",2}),XmlRpcRequest.class);
    assertNotNull(result);
    assertEquals("Get a wrong request operation name","greet",result.getMethodName());
    assertEquals("Get a wrong request parameter size",2,result.getParameterCount());
    assertEquals("Get a wrong request parameter",2,result.getParameter(1));
    assertMockEndpointsSatisfied();
  }
  @Test public void testRequestMessageFromList() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:request");
    mock.expectedMessageCount(1);
    Object[] body=new Object[]{"you",2};
    XmlRpcRequest result=template.requestBodyAndHeader("direct:request",body,XmlRpcConstants.METHOD_NAME,"greet",XmlRpcRequest.class);
    assertNotNull(result);
    assertEquals("Get a wrong request operation name","greet",result.getMethodName());
    assertEquals("Get a wrong request parameter size",2,result.getParameterCount());
    assertEquals("Get a wrong request parameter",2,result.getParameter(1));
    assertMockEndpointsSatisfied();
  }
  @Test public void testResponseMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:response");
    mock.expectedBodiesReceived("GreetMe from XmlRPC");
    template.sendBody("direct:response","GreetMe from XmlRPC");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        XmlRpcDataFormat request=new XmlRpcDataFormat();
        request.setRequest(true);
        XmlRpcDataFormat response=new XmlRpcDataFormat();
        response.setRequest(false);
        from("direct:request").marshal(request).to("log:marshalRequestMessage").unmarshal(request).to("log:unmarshaRequestMessage").to("mock:request");
        from("direct:response").marshal(response).to("log:marshalResponseMessage").unmarshal(response).to("log:unmarshalResonseMessage").to("mock:response");
      }
    }
;
  }
}
