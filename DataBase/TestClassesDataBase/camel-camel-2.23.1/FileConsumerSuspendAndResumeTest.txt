/** 
 * @version 
 */
public class FileConsumerSuspendAndResumeTest extends ContextTestSupport {
  private MyPolicy myPolicy=new MyPolicy();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/suspended");
    super.setUp();
  }
  @Test public void testConsumeSuspendAndResumeFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("file://target/suspended","Bye World",Exchange.FILE_NAME,"bye.txt");
    template.sendBodyAndHeader("file://target/suspended","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    String[] files=new File("target/suspended/").list();
    assertNotNull(files);
    assertEquals("The file should exists",1,files.length);
    oneExchangeDone.reset();
    mock.reset();
    mock.expectedMessageCount(1);
    myPolicy.resumeConsumer();
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    files=new File("target/suspended/").list();
    assertNotNull(files);
    assertEquals("The file should exists",0,files.length);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/suspended?maxMessagesPerPoll=1&delete=true&initialDelay=0&delay=10").routePolicy(myPolicy).id("myRoute").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
private static class MyPolicy extends RoutePolicySupport {
    private int counter;
    private Consumer consumer;
    public void onExchangeDone(    Route route,    Exchange exchange){
      this.consumer=route.getConsumer();
      if (counter++ == 0) {
        try {
          super.stopConsumer(consumer);
        }
 catch (        Exception e) {
          handleException(e);
        }
      }
    }
    public void resumeConsumer() throws Exception {
      super.startConsumer(consumer);
    }
  }
}
