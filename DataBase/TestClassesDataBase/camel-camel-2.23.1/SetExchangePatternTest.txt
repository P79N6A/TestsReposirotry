public class SetExchangePatternTest extends ContextTestSupport {
  @Test public void testInOut() throws Exception {
    assertMessageReceivedWithPattern("direct:testInOut",ExchangePattern.InOut);
  }
  @Test public void testInOnly() throws Exception {
    assertMessageReceivedWithPattern("direct:testInOnly",ExchangePattern.InOnly);
  }
  @Test public void testSetToInOnlyThenTo() throws Exception {
    assertMessageReceivedWithPattern("direct:testSetToInOnlyThenTo",ExchangePattern.InOnly);
  }
  @Test public void testSetToInOutThenTo() throws Exception {
    assertMessageReceivedWithPattern("direct:testSetToInOutThenTo",ExchangePattern.InOut);
  }
  @Test public void testToWithInOnlyParam() throws Exception {
    assertMessageReceivedWithPattern("direct:testToWithInOnlyParam",ExchangePattern.InOnly);
  }
  @Test public void testToWithInOutParam() throws Exception {
    assertMessageReceivedWithPattern("direct:testToWithInOutParam",ExchangePattern.InOut);
  }
  @Test public void testToWithRobustInOnlyParam() throws Exception {
    assertMessageReceivedWithPattern("direct:testToWithRobustInOnlyParam",ExchangePattern.RobustInOnly);
  }
  @Test public void testSetExchangePatternInOnly() throws Exception {
    assertMessageReceivedWithPattern("direct:testSetExchangePatternInOnly",ExchangePattern.InOnly);
  }
  @Test public void testPreserveOldMEPInOut() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOut);
    Exchange out=template.send("direct:testInOut",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
        exchange.setPattern(ExchangePattern.InOnly);
      }
    }
);
    assertNotNull(out);
    assertEquals(ExchangePattern.InOnly,out.getPattern());
    assertMockEndpointsSatisfied();
  }
  @Test public void testPreserveOldMEPInOnly() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly);
    Exchange out=template.send("direct:testInOnly",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
        exchange.setPattern(ExchangePattern.InOut);
      }
    }
);
    assertNotNull(out);
    assertEquals(ExchangePattern.InOut,out.getPattern());
    assertMockEndpointsSatisfied();
  }
  protected void assertMessageReceivedWithPattern(  String sendUri,  ExchangePattern expectedPattern) throws InterruptedException {
    ExchangePattern sendPattern;
switch (expectedPattern) {
case InOut:
      sendPattern=ExchangePattern.InOnly;
    break;
case InOnly:
case RobustInOnly:
  sendPattern=ExchangePattern.InOut;
break;
default :
sendPattern=ExchangePattern.InOnly;
}
MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
String expectedBody="InOnlyMessage";
resultEndpoint.expectedBodiesReceived(expectedBody);
resultEndpoint.expectedHeaderReceived("foo","bar");
template.sendBodyAndHeader(sendUri,sendPattern,expectedBody,"foo","bar");
resultEndpoint.assertIsSatisfied();
ExchangePattern actualPattern=resultEndpoint.getExchanges().get(0).getPattern();
assertEquals("received exchange pattern",actualPattern,expectedPattern);
}
protected RouteBuilder createRouteBuilder(){
return new RouteBuilder(){
public void configure(){
from("direct:testInOut").inOut("mock:result");
from("direct:testInOnly").inOnly("mock:result");
from("direct:testSetToInOnlyThenTo").setExchangePattern(ExchangePattern.InOnly).to("mock:result");
from("direct:testSetToInOutThenTo").setExchangePattern(ExchangePattern.InOut).to("mock:result");
from("direct:testToWithInOnlyParam").to(ExchangePattern.InOnly,"mock:result");
from("direct:testToWithInOutParam").to(ExchangePattern.InOut,"mock:result");
from("direct:testToWithRobustInOnlyParam").to(ExchangePattern.RobustInOnly,"mock:result");
from("direct:testSetExchangePatternInOnly").setExchangePattern(ExchangePattern.InOnly).to("mock:result");
}
}
;
}
}
