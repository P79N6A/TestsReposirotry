@RunWith(MockitoJUnitRunner.class) public class GaugeProducerTest {
  private static final String METRICS_NAME="metrics.name";
  private static final String METRICS_NAME_HEADER="metrics.name.header";
  private static final Object VALUE="my subject";
  private static final Object VALUE_HEADER="my subject header";
  @Mock private MetricsEndpoint endpoint;
  @Mock private Exchange exchange;
  @Mock private MetricRegistry registry;
  @Mock private Message in;
  private GaugeProducer producer;
  @Before public void setUp() throws Exception {
    when(endpoint.getRegistry()).thenReturn(registry);
    when(endpoint.getSubject()).thenReturn(VALUE);
    when(endpoint.getMetricsName()).thenReturn(METRICS_NAME);
    when(exchange.getIn()).thenReturn(in);
    producer=new GaugeProducer(endpoint);
  }
  @Test public void testGaugeProducer() throws Exception {
    assertThat(producer.getEndpoint().equals(endpoint),is(true));
  }
  @Test public void testDefault() throws Exception {
    verify(registry,times(1)).register(eq(METRICS_NAME),argThat(new ArgumentMatcher<CamelMetricsGauge>(){
      @Override public boolean matches(      CamelMetricsGauge argument){
        return VALUE.equals(argument.getValue());
      }
    }
));
  }
  @Test public void testProcessWithHeaderValues() throws Exception {
    when(in.getHeader(HEADER_GAUGE_SUBJECT,Object.class)).thenReturn(VALUE_HEADER);
    producer.doProcess(exchange,endpoint,registry,METRICS_NAME_HEADER);
    verify(in,times(1)).getHeader(HEADER_GAUGE_SUBJECT,Object.class);
    verify(registry,times(1)).register(eq(METRICS_NAME),argThat(new ArgumentMatcher<CamelMetricsGauge>(){
      @Override public boolean matches(      CamelMetricsGauge argument){
        return VALUE.equals(argument.getValue());
      }
    }
));
    verify(registry,times(1)).register(eq(METRICS_NAME_HEADER),argThat(new ArgumentMatcher<CamelMetricsGauge>(){
      @Override public boolean matches(      CamelMetricsGauge argument){
        return VALUE_HEADER.equals(argument.getValue());
      }
    }
));
  }
}
