/** 
 * @version 
 */
public class HttpAuthenticationTest extends BaseHttpTest {
  private HttpServer localServer;
  private String user="camel";
  private String password="password";
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search",new AuthenticationValidationHandler("GET",null,null,getExpectedContent(),user,password)).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void basicAuthenticationShouldSuccess() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search?authUsername="+ user+ "&authPassword="+ password,new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchange(exchange);
  }
  @Test public void basicAuthenticationPreemptiveShouldSuccess() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search?authUsername="+ user+ "&authPassword="+ password+ "&authenticationPreemptive=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchange(exchange);
  }
  @Test public void basicAuthenticationShouldFailWithoutCreds() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search?throwExceptionOnFailure=false",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchangeFailed(exchange);
  }
  @Test public void basicAuthenticationShouldFailWithWrongCreds() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search?throwExceptionOnFailure=false&authUsername=camel&authPassword=wrong",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchangeFailed(exchange);
  }
  @Override protected HttpProcessor getBasicHttpProcessor(){
    List<HttpRequestInterceptor> requestInterceptors=new ArrayList<>();
    requestInterceptors.add(new RequestBasicAuth());
    List<HttpResponseInterceptor> responseInterceptors=new ArrayList<>();
    responseInterceptors.add(new ResponseContent());
    responseInterceptors.add(new ResponseBasicUnauthorized());
    ImmutableHttpProcessor httpproc=new ImmutableHttpProcessor(requestInterceptors,responseInterceptors);
    return httpproc;
  }
  protected void assertExchangeFailed(  Exchange exchange){
    assertNotNull(exchange);
    Message out=exchange.getOut();
    assertNotNull(out);
    Map<String,Object> headers=out.getHeaders();
    assertEquals(HttpStatus.SC_UNAUTHORIZED,headers.get(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("0",headers.get("Content-Length"));
    assertNull(headers.get("Content-Type"));
    assertEquals("",out.getBody(String.class));
  }
}
