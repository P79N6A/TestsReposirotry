public class InstallOpenTracingTracerRuleTest extends CamelTestSupport {
  private static MockTracer tracer=new MockTracer(Propagator.TEXT_MAP);
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") protected ProducerTemplate template;
  @Before public void init(){
    tracer.reset();
  }
  public static MockTracer getTracer(){
    return tracer;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("tracer",tracer);
    return registry;
  }
  @Override public boolean isDumpRouteCoverage(){
    return true;
  }
  @Test public void testSendMatchingMessage() throws Exception {
    String expectedBody="<matched/>";
    resultEndpoint.expectedBodiesReceived(expectedBody);
    template.sendBodyAndHeader(expectedBody,"foo","bar");
    resultEndpoint.assertIsSatisfied();
    List<MockSpan> spans=getTracer().finishedSpans();
    assertEquals(3,spans.size());
    assertEquals("mock",spans.get(0).operationName());
    assertEquals("start",spans.get(1).operationName());
    assertEquals("start",spans.get(2).operationName());
    assertEquals(Tags.SPAN_KIND_CLIENT,spans.get(0).tags().get(Tags.SPAN_KIND.getKey()));
    assertEquals(Tags.SPAN_KIND_SERVER,spans.get(1).tags().get(Tags.SPAN_KIND.getKey()));
    assertEquals(Tags.SPAN_KIND_CLIENT,spans.get(2).tags().get(Tags.SPAN_KIND.getKey()));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").filter(header("foo").isEqualTo("bar")).to("mock:result");
      }
    }
;
  }
}
