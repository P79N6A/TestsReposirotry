/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirDelete} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirDeleteIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirDeleteIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirDeleteApiMethod.class).getName();
  @Test public void testDeleteResource() throws Exception {
    assertTrue(patientExists());
    IBaseOperationOutcome result=requestBody("direct://RESOURCE",this.patient);
    LOG.debug("resource: " + result);
    assertNotNull("resource result",result);
    assertFalse(patientExists());
  }
  @Test public void testDeleteResourceById() throws Exception {
    assertTrue(patientExists());
    IBaseOperationOutcome result=requestBody("direct://RESOURCE_BY_ID",this.patient.getIdElement());
    LOG.debug("resourceById: " + result);
    assertNotNull("resourceById result",result);
    assertFalse(patientExists());
  }
  @Test public void testDeleteResourceByStringId() throws Exception {
    assertTrue(patientExists());
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.type","Patient");
    headers.put("CamelFhir.stringId",this.patient.getIdElement().getIdPart());
    IBaseOperationOutcome result=requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID",null,headers);
    LOG.debug("resourceById: " + result);
    assertNotNull("resourceById result",result);
    assertFalse(patientExists());
  }
  @Test public void testDeleteResourceConditionalByUrl() throws Exception {
    assertTrue(patientExists());
    IBaseOperationOutcome result=requestBody("direct://RESOURCE_CONDITIONAL_BY_URL","Patient?given=Vincent&family=Freeman");
    LOG.debug("resourceConditionalByUrl: " + result);
    assertNotNull("resourceConditionalByUrl result",result);
    assertFalse(patientExists());
  }
  @Test public void testDeleteResourceConditionalByUrlCacheControlDirective() throws Exception {
    assertTrue(patientExists());
    Map<String,Object> headers=new HashMap<>();
    headers.put(ExtraParameters.CACHE_CONTROL_DIRECTIVE.getHeaderName(),new CacheControlDirective().setNoCache(true));
    IBaseOperationOutcome result=requestBodyAndHeaders("direct://RESOURCE_CONDITIONAL_BY_URL","Patient?given=Vincent&family=Freeman",headers);
    LOG.debug("resourceConditionalByUrl: " + result);
    assertNotNull("resourceConditionalByUrl result",result);
    assertFalse(patientExists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource");
        from("direct://RESOURCE_BY_ID").to("fhir://" + PATH_PREFIX + "/resourceById?inBody=id");
        from("direct://RESOURCE_BY_STRING_ID").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_CONDITIONAL_BY_URL").to("fhir://" + PATH_PREFIX + "/resourceConditionalByUrl?inBody=url");
      }
    }
;
  }
}
