public class EnricherTest extends ContextTestSupport {
  private static SampleAggregator aggregationStrategy=new SampleAggregator();
  protected MockEndpoint mock;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    mock=getMockEndpoint("mock:mock");
  }
  @Test public void testEnrichInOnly() throws InterruptedException {
    mock.expectedBodiesReceived("test:blah");
    mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://mock");
    template.sendBody("direct:enricher-test-1","test");
    mock.assertIsSatisfied();
  }
  @Test public void testEnrichFaultInOnly() throws InterruptedException {
    mock.expectedMessageCount(0);
    Exchange exchange=template.send("direct:enricher-test-3",new Processor(){
      public void process(      Exchange exchange){
        exchange.getIn().setBody("test");
      }
    }
);
    mock.assertIsSatisfied();
    assertEquals("test",exchange.getIn().getBody());
    assertTrue(exchange.getOut() != null && exchange.getOut().isFault());
    assertEquals("failed",exchange.getOut().getBody());
    assertEquals("direct://enricher-fault-resource",exchange.getProperty(Exchange.TO_ENDPOINT));
    assertNull(exchange.getException());
  }
  @Test public void testEnrichErrorInOnly() throws InterruptedException {
    mock.expectedMessageCount(0);
    Exchange exchange=template.send("direct:enricher-test-4",new Processor(){
      public void process(      Exchange exchange){
        exchange.getIn().setBody("test");
      }
    }
);
    mock.assertIsSatisfied();
    assertEquals("test",exchange.getIn().getBody());
    assertEquals("failed",exchange.getException().getMessage());
    assertFalse(exchange.hasOut());
  }
  @Test public void testEnrichInOut() throws InterruptedException {
    String result=(String)template.sendBody("direct:enricher-test-5",ExchangePattern.InOut,"test");
    assertEquals("test:blah",result);
  }
  @Test public void testEnrichInOutPlusHeader() throws InterruptedException {
    Exchange exchange=template.send("direct:enricher-test-5",ExchangePattern.InOut,new Processor(){
      public void process(      Exchange exchange){
        exchange.getIn().setHeader("foo","bar");
        exchange.getIn().setBody("test");
      }
    }
);
    assertEquals("bar",exchange.getIn().getHeader("foo"));
    assertEquals("test:blah",exchange.getIn().getBody());
    assertTrue(exchange.hasOut());
    assertNull(exchange.getException());
  }
  @Test public void testEnrichFaultInOut() throws InterruptedException {
    Exchange exchange=template.send("direct:enricher-test-7",ExchangePattern.InOut,new Processor(){
      public void process(      Exchange exchange){
        exchange.getIn().setBody("test");
      }
    }
);
    assertEquals("test",exchange.getIn().getBody());
    assertTrue(exchange.getOut() != null && exchange.getOut().isFault());
    assertEquals("failed",exchange.getOut().getBody());
    assertNull(exchange.getException());
  }
  @Test public void testEnrichErrorInOut() throws InterruptedException {
    Exchange exchange=template.send("direct:enricher-test-8",ExchangePattern.InOut,new Processor(){
      public void process(      Exchange exchange){
        exchange.getIn().setBody("test");
      }
    }
);
    assertEquals("test",exchange.getIn().getBody());
    assertEquals("failed",exchange.getException().getMessage());
    assertFalse(exchange.hasOut());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:enricher-test-1").enrich("direct:enricher-constant-resource",aggregationStrategy).to("mock:mock");
        from("direct:enricher-test-3").enrich("direct:enricher-fault-resource",aggregationStrategy).to("mock:mock");
        from("direct:enricher-test-4").errorHandler(noErrorHandler()).enrich("direct:enricher-error-resource",aggregationStrategy).to("mock:mock");
        from("direct:enricher-test-5").enrich("direct:enricher-constant-resource",aggregationStrategy);
        from("direct:enricher-test-7").enrich("direct:enricher-fault-resource",aggregationStrategy);
        from("direct:enricher-test-8").errorHandler(noErrorHandler()).enrich("direct:enricher-error-resource",aggregationStrategy);
        from("direct:enricher-constant-resource").transform().constant("blah");
        from("direct:enricher-fault-resource").errorHandler(noErrorHandler()).process(new FailureProcessor(false));
        from("direct:enricher-error-resource").errorHandler(noErrorHandler()).process(new FailureProcessor(true));
      }
    }
;
  }
}
