/** 
 * @version
 */
public class HttpNoConnectionTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void httpConnectionOk() throws Exception {
    Exchange exchange=template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search",new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertExchange(exchange);
  }
  @Test public void httpConnectionNotOk() throws Exception {
    String url="http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search";
    localServer.stop();
    localServer.awaitTermination(1000,TimeUnit.MILLISECONDS);
    Exchange reply=template.request(url,null);
    Exception e=reply.getException();
    assertNotNull("Should have thrown an exception",e);
    ConnectException cause=assertIsInstanceOf(ConnectException.class,e);
    assertTrue(cause.getMessage().contains("failed"));
  }
}
