public class SecurityConstraintMappingTest extends Assert {
  @Test public void testDefault(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    assertNotNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
  }
  @Test public void testFoo(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addInclusion("/foo");
    assertNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
    assertNull(matcher.restricted("/foobar"));
    assertNull(matcher.restricted("/foo/bar"));
  }
  @Test public void testFooWildcard(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addInclusion("/foo*");
    assertNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
    assertNotNull(matcher.restricted("/foobar"));
    assertNotNull(matcher.restricted("/foo/bar"));
  }
  @Test public void testFooBar(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addInclusion("/foo");
    matcher.addInclusion("/bar");
    assertNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
    assertNull(matcher.restricted("/foobar"));
    assertNull(matcher.restricted("/foo/bar"));
    assertNotNull(matcher.restricted("/bar"));
    assertNull(matcher.restricted("/barbar"));
    assertNull(matcher.restricted("/bar/bar"));
  }
  @Test public void testFooBarWildcard(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addInclusion("/foo*");
    matcher.addInclusion("/bar*");
    assertNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
    assertNotNull(matcher.restricted("/foobar"));
    assertNotNull(matcher.restricted("/foo/bar"));
    assertNotNull(matcher.restricted("/bar"));
    assertNotNull(matcher.restricted("/barbar"));
    assertNotNull(matcher.restricted("/bar/bar"));
  }
  @Test public void testFooExclusion(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addInclusion("/foo/*");
    matcher.addExclusion("/foo/public/*");
    assertNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
    assertNotNull(matcher.restricted("/foo/bar"));
    assertNull(matcher.restricted("/foo/public"));
    assertNull(matcher.restricted("/foo/public/open"));
  }
  @Test public void testDefaultExclusion(){
    SecurityConstraintMapping matcher=new SecurityConstraintMapping();
    matcher.addExclusion("/public/*");
    matcher.addExclusion("/index");
    matcher.addExclusion("/index.html");
    assertNotNull(matcher.restricted("/"));
    assertNotNull(matcher.restricted("/foo"));
    assertNotNull(matcher.restricted("/foo/bar"));
    assertNull(matcher.restricted("/public"));
    assertNull(matcher.restricted("/public/open"));
    assertNull(matcher.restricted("/index"));
    assertNull(matcher.restricted("/index.html"));
  }
}
