public class DirectProducerBlockingTest extends ContextTestSupport {
  @Test public void testProducerBlocksForSuspendedConsumer() throws Exception {
    DirectEndpoint endpoint=getMandatoryEndpoint("direct:suspended",DirectEndpoint.class);
    endpoint.getConsumer().suspend();
    StopWatch watch=new StopWatch();
    try {
      template.sendBody("direct:suspended?block=true&timeout=500","hello world");
      fail("Expected CamelExecutionException");
    }
 catch (    CamelExecutionException e) {
      DirectConsumerNotAvailableException cause=assertIsInstanceOf(DirectConsumerNotAvailableException.class,e.getCause());
      assertIsInstanceOf(CamelExchangeException.class,cause);
      assertTrue(watch.taken() > 490);
    }
  }
  @Test public void testProducerBlocksWithNoConsumers() throws Exception {
    DirectEndpoint endpoint=getMandatoryEndpoint("direct:suspended",DirectEndpoint.class);
    endpoint.getConsumer().suspend();
    StopWatch watch=new StopWatch();
    try {
      template.sendBody("direct:start?block=true&timeout=500","hello world");
      fail("Expected CamelExecutionException");
    }
 catch (    CamelExecutionException e) {
      DirectConsumerNotAvailableException cause=assertIsInstanceOf(DirectConsumerNotAvailableException.class,e.getCause());
      assertIsInstanceOf(CamelExchangeException.class,cause);
      assertTrue(watch.taken() > 490);
    }
  }
  @Test public void testProducerBlocksResumeTest() throws Exception {
    context.suspendRoute("foo");
    ExecutorService executor=Executors.newSingleThreadExecutor();
    executor.submit(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(200);
          log.info("Resuming consumer");
          context.resumeRoute("foo");
        }
 catch (        Exception e) {
        }
      }
    }
);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:suspended?block=true&timeout=1000","hello world");
    assertMockEndpointsSatisfied();
    executor.shutdownNow();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:suspended").routeId("foo").to("mock:result");
      }
    }
;
  }
}
