/** 
 * Wire tap unit test
 * @version 
 */
public class WireTapBeanAsProcessorTest extends ContextTestSupport {
  private MyBean myBean=new MyBean();
  private MockEndpoint result;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("tap",myBean);
    return jndi;
  }
  @Test public void testBeanAsProcessor() throws Exception {
    assertNull(myBean.getTapped());
    result.expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
    await().atMost(2,TimeUnit.SECONDS).untilAsserted(() -> {
      assertEquals("World",myBean.getTapped());
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    result=getMockEndpoint("mock:result");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").to("log:foo").wireTap("bean:tap").transform(body().prepend("Bye ")).to("mock:result");
      }
    }
;
  }
public static class MyBean implements Processor {
    private String tapped;
    @Override public void process(    Exchange exchange) throws Exception {
      tapped=exchange.getIn().getBody(String.class);
    }
    public String getTapped(){
      return tapped;
    }
  }
}
