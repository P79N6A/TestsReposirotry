@RunWith(MockitoJUnitRunner.class) public class KinesisFirehoseProducerTest {
  private static final String STREAM_NAME="streams";
  private static final String RECORD_ID="sample_record_id";
  private static final String SAMPLE_RECORD_BODY="SAMPLE";
  private static final ByteBuffer SAMPLE_BUFFER=ByteBuffer.wrap(SAMPLE_RECORD_BODY.getBytes());
  @Mock private AmazonKinesisFirehose kinesisFirehoseClient;
  @Mock private KinesisFirehoseEndpoint kinesisFirehoseEndpoint;
  @Mock private KinesisFirehoseConfiguration kinesisFirehoseConfiguration;
  @Mock private Message inMessage;
  @Mock private Message outMessage;
  @Mock private PutRecordResult putRecordResult;
  @Mock(answer=Answers.RETURNS_DEEP_STUBS) private Exchange exchange;
  private KinesisFirehoseProducer kinesisFirehoseProducer;
  @Before public void setup() throws Exception {
    when(kinesisFirehoseEndpoint.getClient()).thenReturn(kinesisFirehoseClient);
    when(kinesisFirehoseEndpoint.getConfiguration()).thenReturn(kinesisFirehoseConfiguration);
    when(kinesisFirehoseEndpoint.getConfiguration().getStreamName()).thenReturn(STREAM_NAME);
    when(exchange.getOut()).thenReturn(outMessage);
    when(exchange.getIn()).thenReturn(inMessage);
    when(exchange.getPattern()).thenReturn(ExchangePattern.InOut);
    when(inMessage.getBody(ByteBuffer.class)).thenReturn(SAMPLE_BUFFER);
    when(putRecordResult.getRecordId()).thenReturn(RECORD_ID);
    when(kinesisFirehoseClient.putRecord(any(PutRecordRequest.class))).thenReturn(putRecordResult);
    kinesisFirehoseProducer=new KinesisFirehoseProducer(kinesisFirehoseEndpoint);
  }
  @Test public void shouldPutRecordIntoStreamWhenProcessingExchange() throws Exception {
    kinesisFirehoseProducer.process(exchange);
    verify(outMessage).setHeader(KinesisFirehoseConstants.RECORD_ID,RECORD_ID);
  }
}
