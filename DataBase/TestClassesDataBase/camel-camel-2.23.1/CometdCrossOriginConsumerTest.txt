/** 
 * Unit testing for using a CometdProducer and a CometdConsumer
 */
@RunWith(MockitoJUnitRunner.class) public class CometdCrossOriginConsumerTest extends CamelTestSupport {
  private static final String FILTER_PATH="testFilterPath";
  private static final String ALLOWED_ORIGINS="testAllowedOrigins";
  @Mock Connector connector;
  @Mock CometdEndpoint endpoint;
  @Test public void testFilterArgumentsSetOnEndpoint() throws Exception {
    CometdComponent component=context.getComponent("cometd",CometdComponent.class);
    int port=AvailablePortFinder.getNextAvailable(23500);
    Endpoint result=component.createEndpoint(String.format("cometd://127.0.0.1:%s?crossOriginFilterOn=true&allowedOrigins=%s&filterPath=%s",port,ALLOWED_ORIGINS,FILTER_PATH));
    assertTrue(result instanceof CometdEndpoint);
    CometdEndpoint cometdEndpoint=(CometdEndpoint)result;
    assertTrue(cometdEndpoint.isCrossOriginFilterOn());
    assertEquals(ALLOWED_ORIGINS,cometdEndpoint.getAllowedOrigins());
    assertEquals(FILTER_PATH,cometdEndpoint.getFilterPath());
  }
  @Test public void testCrossOriginFilterAddedWhenOn() throws Exception {
    CometdComponent component=context.getComponent("cometd",CometdComponent.class);
    Server server=new Server();
    when(endpoint.isCrossOriginFilterOn()).thenReturn(true);
    when(endpoint.getFilterPath()).thenReturn(FILTER_PATH);
    when(endpoint.getAllowedOrigins()).thenReturn(ALLOWED_ORIGINS);
    component.createServletForConnector(server,connector,endpoint);
    ServletContextHandler handler=(ServletContextHandler)server.getHandler();
    assertEquals(1,handler.getServletHandler().getFilters().length);
    FilterHolder filterHolder=handler.getServletHandler().getFilters()[0];
    Filter filter=filterHolder.getFilter();
    assertTrue(filter instanceof CrossOriginFilter);
  }
  @Test public void testCrossOriginFilterNotAddedWhenOff() throws Exception {
    CometdComponent component=context.getComponent("cometd",CometdComponent.class);
    Server server=new Server();
    when(endpoint.isCrossOriginFilterOn()).thenReturn(false);
    component.createServletForConnector(server,connector,endpoint);
    ServletContextHandler handler=(ServletContextHandler)server.getHandler();
    assertEquals(0,handler.getServletHandler().getFilters().length);
  }
}
