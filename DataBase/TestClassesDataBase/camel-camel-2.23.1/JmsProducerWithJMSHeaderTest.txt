/** 
 * @version 
 */
public class JmsProducerWithJMSHeaderTest extends CamelTestSupport {
  @Test public void testInOnlyJMSPrioritory() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSPriority").isEqualTo(2);
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSPriority","2");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSPrioritoryZero() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSPriority").isEqualTo(0);
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSPriority","0");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSPrioritoryNine() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSPriority").isEqualTo(9);
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSPriority","9");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSPrioritoryTheDeliveryModeIsDefault() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSPriority").isEqualTo(2);
    mock.message(0).header("JMSDeliveryMode").isEqualTo(2);
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSPriority","2");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSDeliveryMode() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSDeliveryMode").isEqualTo(1);
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSDeliveryMode","1");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSDeliveryModeAsString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSDeliveryMode").isEqualTo(1);
    template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true","Hello World","JMSDeliveryMode","NON_PERSISTENT");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSExpiration() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    long ttl=System.currentTimeMillis() + 5000;
    template.sendBodyAndHeader("activemq:queue:bar?preserveMessageQos=true","Hello World","JMSExpiration",ttl);
    Thread.sleep(2000);
    Exchange bar=consumer.receive("activemq:queue:bar",10000);
    assertNotNull("Should be a message on queue",bar);
    template.send("activemq:queue:foo",bar);
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSExpirationNoMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    long ttl=System.currentTimeMillis() + 2000;
    template.sendBodyAndHeader("activemq:queue:bar?preserveMessageQos=true","Hello World","JMSExpiration",ttl);
    Thread.sleep(5000);
    Exchange bar=consumer.receiveNoWait("activemq:queue:bar");
    assertNull("Should NOT be a message on queue",bar);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyMultipleJMSHeaders() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSPriority").isEqualTo(3);
    mock.message(0).header("JMSDeliveryMode").isEqualTo(2);
    Map<String,Object> headers=new HashMap<>();
    headers.put("JMSPriority",3);
    headers.put("JMSDeliveryMode",2);
    template.sendBodyAndHeaders("activemq:queue:foo?preserveMessageQos=true","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyMultipleJMSHeadersAndExpiration() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSPriority").isEqualTo(3);
    mock.message(0).header("JMSDeliveryMode").isEqualTo(2);
    long ttl=System.currentTimeMillis() + 2000;
    Map<String,Object> headers=new HashMap<>();
    headers.put("JMSPriority",3);
    headers.put("JMSDeliveryMode",2);
    headers.put("JMSExpiration",ttl);
    template.sendBodyAndHeaders("activemq:queue:bar?preserveMessageQos=true","Hello World",headers);
    Thread.sleep(50);
    Exchange bar=consumer.receive("activemq:queue:bar",5000);
    assertNotNull("Should be a message on queue",bar);
    template.send("activemq:queue:foo?preserveMessageQos=true",bar);
    Thread.sleep(1000);
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyMultipleJMSHeadersAndExpirationNoMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    long ttl=System.currentTimeMillis() + 2000;
    Map<String,Object> headers=new HashMap<>();
    headers.put("JMSPriority",3);
    headers.put("JMSDeliveryMode",2);
    headers.put("JMSExpiration",ttl);
    template.sendBodyAndHeaders("activemq:queue:bar?preserveMessageQos=true","Hello World",headers);
    Thread.sleep(5000);
    Exchange bar=consumer.receiveNoWait("activemq:queue:bar");
    assertNull("Should NOT be a message on queue",bar);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSXGroupID() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header(JMS_X_GROUP_ID).isEqualTo("atom");
    template.sendBodyAndHeader("activemq:queue:foo","Hello World",JMS_X_GROUP_ID,"atom");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyJMSDestination() throws Exception {
    Destination queue=new ActiveMQQueue("foo");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSDestination").isNotNull();
    template.sendBodyAndHeader("activemq:queue:bar","Hello World",JmsConstants.JMS_DESTINATION,queue);
    assertMockEndpointsSatisfied();
    assertEquals("queue://foo",mock.getReceivedExchanges().get(0).getIn().getHeader("JMSDestination",Destination.class).toString());
  }
  @Test public void testInOnlyJMSDestinationName() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).header("JMSDestination").isNotNull();
    template.sendBodyAndHeader("activemq:queue:bar","Hello World",JmsConstants.JMS_DESTINATION_NAME,"foo");
    assertMockEndpointsSatisfied();
    assertEquals("queue://foo",mock.getReceivedExchanges().get(0).getIn().getHeader("JMSDestination",Destination.class).toString());
  }
  @Test public void testInOutJMSDestination() throws Exception {
    Destination queue=new ActiveMQQueue("reply");
    String reply=(String)template.requestBodyAndHeader("activemq:queue:bar","Hello World",JmsConstants.JMS_DESTINATION,queue);
    assertEquals("Bye World",reply);
  }
  @Test public void testInOutJMSDestinationName() throws Exception {
    String reply=(String)template.requestBodyAndHeader("activemq:queue:bar","Hello World",JmsConstants.JMS_DESTINATION_NAME,"reply");
    assertEquals("Bye World",reply);
  }
  @Test public void testInOnlyRouteJMSDestinationName() throws Exception {
    context.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        from("activemq:queue:a").to("activemq:queue:b");
        from("activemq:queue:b").to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.message(0).header("JMSDestination").isNotNull();
    template.sendBodyAndHeader("activemq:queue:bar","Hello World",JmsConstants.JMS_DESTINATION_NAME,"a");
    assertMockEndpointsSatisfied();
    assertEquals("queue://b",mock.getReceivedExchanges().get(0).getIn().getHeader("JMSDestination",Destination.class).toString());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").to("mock:result");
        from("activemq:queue:reply").transform(constant("Bye World"));
      }
    }
;
  }
}
