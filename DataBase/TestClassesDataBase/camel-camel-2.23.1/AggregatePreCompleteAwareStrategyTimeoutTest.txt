/** 
 * @version 
 */
public class AggregatePreCompleteAwareStrategyTimeoutTest extends ContextTestSupport {
  @Test public void testAggregatePreCompleteTimeout() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C","X+D+E","X+F");
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","X","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    template.sendBodyAndHeader("direct:start","X","id",123);
    template.sendBodyAndHeader("direct:start","F","id",123);
    assertMockEndpointsSatisfied();
  }
  @Test public void testAggregatePreCompleteTimeoutOnlyOneInLastGroup() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C","X+D+E","X");
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","X","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    template.sendBodyAndHeader("direct:start","X","id",123);
    assertMockEndpointsSatisfied();
  }
  @Test public void testAggregatePreCompleteTimeoutOnlyOneInFirstGroup() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("X");
    template.sendBodyAndHeader("direct:start","X","id",123);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new BodyInPreCompleteAggregatingStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:aggregated");
      }
    }
;
  }
}
