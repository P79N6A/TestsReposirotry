public class ThrottlerTest extends ContextTestSupport {
  private static final int INTERVAL=500;
  private static final int TOLERANCE=50;
  private static final int MESSAGE_COUNT=9;
  protected boolean canTest(){
    return !isPlatform("windows");
  }
  @Test public void testSendLotsOfMessagesButOnly3GetThroughWithin2Seconds() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(3);
    resultEndpoint.setResultWaitTime(2000);
    for (int i=0; i < MESSAGE_COUNT; i++) {
      template.sendBody("seda:a","<message>" + i + "</message>");
    }
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testSendLotsOfMessagesWithRejectExecution() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(2);
    MockEndpoint errorEndpoint=resolveMandatoryEndpoint("mock:error",MockEndpoint.class);
    errorEndpoint.expectedMessageCount(4);
    for (int i=0; i < 6; i++) {
      template.sendBody("direct:start","<message>" + i + "</message>");
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    long elapsed=sendMessagesAndAwaitDelivery(MESSAGE_COUNT,"direct:a",MESSAGE_COUNT,resultEndpoint);
    assertThrottlerTiming(elapsed,5,INTERVAL,MESSAGE_COUNT);
  }
  @Test public void testConfigurationWithConstantExpression() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    long elapsed=sendMessagesAndAwaitDelivery(MESSAGE_COUNT,"direct:expressionConstant",MESSAGE_COUNT,resultEndpoint);
    assertThrottlerTiming(elapsed,5,INTERVAL,MESSAGE_COUNT);
  }
  @Test public void testConfigurationWithHeaderExpression() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(MESSAGE_COUNT);
    ExecutorService executor=Executors.newFixedThreadPool(MESSAGE_COUNT);
    try {
      sendMessagesWithHeaderExpression(executor,resultEndpoint,5,INTERVAL,MESSAGE_COUNT);
    }
  finally {
      executor.shutdownNow();
    }
  }
  @Test public void testConfigurationWithChangingHeaderExpression() throws Exception {
    if (!canTest()) {
      return;
    }
    ExecutorService executor=Executors.newFixedThreadPool(5);
    try {
      MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
      sendMessagesWithHeaderExpression(executor,resultEndpoint,5,INTERVAL,MESSAGE_COUNT);
      Thread.sleep(INTERVAL + TOLERANCE);
      resultEndpoint.reset();
      sendMessagesWithHeaderExpression(executor,resultEndpoint,10,INTERVAL,MESSAGE_COUNT);
      Thread.sleep(INTERVAL + TOLERANCE);
      resultEndpoint.reset();
      sendMessagesWithHeaderExpression(executor,resultEndpoint,5,INTERVAL,MESSAGE_COUNT);
      Thread.sleep(INTERVAL + TOLERANCE);
      resultEndpoint.reset();
      sendMessagesWithHeaderExpression(executor,resultEndpoint,10,INTERVAL,MESSAGE_COUNT);
    }
  finally {
      executor.shutdownNow();
    }
  }
  private void assertThrottlerTiming(  final long elapsedTimeMs,  final int throttle,  final int intervalMs,  final int messageCount){
    long minimum=calculateMinimum(intervalMs,throttle,messageCount) - 50;
    long maximum=calculateMaximum(intervalMs,throttle,messageCount) + 50;
    maximum+=500;
    log.info("Sent {} exchanges in {}ms, with throttle rate of {} per {}ms. Calculated min {}ms and max {}ms",messageCount,elapsedTimeMs,throttle,intervalMs,minimum,maximum);
    assertTrue("Should take at least " + minimum + "ms, was: "+ elapsedTimeMs,elapsedTimeMs >= minimum);
    assertTrue("Should take at most " + maximum + "ms, was: "+ elapsedTimeMs,elapsedTimeMs <= maximum + TOLERANCE);
  }
  private long sendMessagesAndAwaitDelivery(  final int messageCount,  final String endpointUri,  final int threadPoolSize,  final MockEndpoint receivingEndpoint) throws InterruptedException {
    ExecutorService executor=Executors.newFixedThreadPool(threadPoolSize);
    try {
      if (receivingEndpoint != null) {
        receivingEndpoint.expectedMessageCount(messageCount);
      }
      long start=System.nanoTime();
      for (int i=0; i < messageCount; i++) {
        executor.execute(new Runnable(){
          public void run(){
            template.sendBody(endpointUri,"<message>payload</message>");
          }
        }
);
      }
      if (receivingEndpoint != null) {
        receivingEndpoint.assertIsSatisfied();
      }
      return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
    }
  finally {
      executor.shutdownNow();
    }
  }
  private void sendMessagesWithHeaderExpression(  final ExecutorService executor,  final MockEndpoint resultEndpoint,  final int throttle,  final int intervalMs,  final int messageCount) throws InterruptedException {
    resultEndpoint.expectedMessageCount(messageCount);
    long start=System.nanoTime();
    for (int i=0; i < messageCount; i++) {
      executor.execute(new Runnable(){
        public void run(){
          template.sendBodyAndHeader("direct:expressionHeader","<message>payload</message>","throttleValue",throttle);
        }
      }
);
    }
    resultEndpoint.assertIsSatisfied();
    long elapsed=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
    assertThrottlerTiming(elapsed,throttle,intervalMs,messageCount);
  }
  private long calculateMinimum(  final long periodMs,  final long throttleRate,  final long messageCount){
    if (messageCount % throttleRate > 0) {
      return (long)Math.floor((double)messageCount / (double)throttleRate) * periodMs;
    }
 else {
      return (long)(Math.floor((double)messageCount / (double)throttleRate) * periodMs) - periodMs;
    }
  }
  private long calculateMaximum(  final long periodMs,  final long throttleRate,  final long messageCount){
    return ((long)Math.ceil((double)messageCount / (double)throttleRate)) * periodMs;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        onException(ThrottlerRejectedExecutionException.class).handled(true).to("mock:error");
        from("seda:a").throttle(3).timePeriodMillis(1000).to("log:result","mock:result");
        from("direct:a").throttle(5).timePeriodMillis(INTERVAL).to("log:result","mock:result");
        from("direct:expressionConstant").throttle(constant(5)).timePeriodMillis(INTERVAL).to("log:result","mock:result");
        from("direct:expressionHeader").throttle(header("throttleValue")).timePeriodMillis(INTERVAL).to("log:result","mock:result");
        from("direct:start").throttle(2).timePeriodMillis(1000).rejectExecution(true).to("log:result","mock:result");
        from("direct:highThrottleRate").throttle(10000).timePeriodMillis(INTERVAL).to("mock:result");
      }
    }
;
  }
}
