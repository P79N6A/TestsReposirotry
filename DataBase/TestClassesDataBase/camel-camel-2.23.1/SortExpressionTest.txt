public class SortExpressionTest extends ContextTestSupport {
  @Test public void testSortBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hadrian,William,Claus");
    assertMockEndpointsSatisfied();
    List<?> list=mock.getExchanges().get(0).getIn().getBody(List.class);
    assertEquals("Claus",list.get(0));
    assertEquals("Hadrian",list.get(1));
    assertEquals("William",list.get(2));
  }
  @Test public void testSortReverse() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:reverse","Hadrian,William,Claus");
    assertMockEndpointsSatisfied();
    List<?> list=mock.getExchanges().get(0).getIn().getBody(List.class);
    assertEquals("William",list.get(0));
    assertEquals("Hadrian",list.get(1));
    assertEquals("Claus",list.get(2));
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").sort(body().tokenize(",")).to("mock:result");
        from("direct:reverse").sort(body().tokenize(","),new MyReverseComparator()).to("mock:result");
      }
    }
;
  }
public static class MyReverseComparator implements Comparator<Object> {
    public MyReverseComparator(){
    }
    public int compare(    Object o1,    Object o2){
      return ObjectHelper.compare(o1,o2) * -1;
    }
  }
}
