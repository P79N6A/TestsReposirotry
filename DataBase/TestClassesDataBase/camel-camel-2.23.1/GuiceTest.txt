/** 
 * @version
 */
public class GuiceTest extends TestSupport {
  /** 
 * Asserts that the CamelContext is available in the given Injector, that its been started, then close the injector
 * @param injector
 */
  public static void assertCamelContextRunningThenCloseInjector(  Injector injector) throws Exception {
    CamelContext camelContext=injector.getInstance(CamelContext.class);
    org.hamcrest.MatcherAssert.assertThat(camelContext,org.hamcrest.Matchers.is(GuiceCamelContext.class));
    GuiceCamelContext guiceContext=(GuiceCamelContext)camelContext;
    assertTrue("is started!",guiceContext.isStarted());
    Thread.sleep(1000);
    Injectors.close(injector);
  }
public static class Cheese {
    private final CamelContext camelContext;
    @Inject public Cheese(    CamelContext camelContext){
      this.camelContext=camelContext;
    }
    public CamelContext getCamelContext(){
      return camelContext;
    }
  }
  @Test public void testGuice() throws Exception {
    Injector injector=Guice.createInjector(new CamelModuleWithMatchingRoutes());
    Cheese cheese=injector.getInstance(Cheese.class);
    assertNotNull("Should have cheese",cheese);
    assertNotNull("Should have camelContext",cheese.getCamelContext());
    log.info("Got " + cheese);
    assertCamelContextRunningThenCloseInjector(injector);
  }
}
