public class ResequencerBatchOrderTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(ResequencerBatchOrderTest.class);
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").resequence(body()).batch().size(2).timeout(50).to("mock:result");
      }
    }
;
  }
  @Test public void testResequencerBatch() throws Exception {
    for (int i=0; i < 100; i++) {
      testIteration(i);
    }
  }
  private void testIteration(  int i) throws Exception {
    MockEndpoint me=context.getEndpoint("mock:result",MockEndpoint.class);
    me.reset();
    me.expectedMessageCount(4);
    LOG.info("Run #{}",i);
    template.sendBody("direct:start","4");
    template.sendBody("direct:start","1");
    template.sendBody("direct:start","3");
    template.sendBody("direct:start","2");
    assertMockEndpointsSatisfied();
    String a=me.getExchanges().get(0).getIn().getBody(String.class);
    String b=me.getExchanges().get(1).getIn().getBody(String.class);
    String c=me.getExchanges().get(2).getIn().getBody(String.class);
    String d=me.getExchanges().get(3).getIn().getBody(String.class);
    String line=a + b + c+ d;
    LOG.info("Order: {}",line);
    assertTrue("Line was " + line,"1423".equals(line) || "1234".equals(line));
  }
}
