public class ExchangeRequestTest extends CamelTestSupport {
  @Test public void testStreamRequest() throws Exception {
    CamelReactiveStreamsService camel=CamelReactiveStreams.get(context);
    Publisher<Exchange> string=camel.toStream("data",new DefaultExchange(context));
    Exchange res=Flowable.fromPublisher(string).blockingFirst();
    assertNotNull(res);
    String content=res.getIn().getBody(String.class);
    assertNotNull(content);
    assertEquals("123",content);
  }
  @Test public void testInteraction() throws Exception {
    CamelReactiveStreamsService camel=CamelReactiveStreams.get(context);
    Integer res=Flowable.fromPublisher(camel.toStream("plusOne",1L,Integer.class)).blockingFirst();
    assertNotNull(res);
    assertEquals(2,res.intValue());
  }
  @Test public void testMultipleInteractions() throws Exception {
    CamelReactiveStreamsService camel=CamelReactiveStreams.get(context);
    Integer sum=Flowable.just(1,2,3).flatMap(e -> camel.toStream("plusOne",e,Integer.class)).reduce((i,j) -> i + j).blockingGet();
    assertNotNull(sum);
    assertEquals(9,sum.intValue());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:data").setBody().constant("123");
        from("reactive-streams:plusOne").setBody().body(Integer.class,b -> b + 1).log("Hello ${body}");
      }
    }
;
  }
}
