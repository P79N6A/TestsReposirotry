public class LogEipMaskTest {
  protected JndiRegistry registry;
  protected CamelContext createCamelContext() throws Exception {
    registry=new JndiRegistry(JndiTest.createInitialContext());
    CamelContext context=new DefaultCamelContext(registry);
    context.addRoutes(createRouteBuilder());
    return context;
  }
  @Test public void testLogEipMask() throws Exception {
    CamelContext context=createCamelContext();
    MockEndpoint mock=context.getEndpoint("mock:foo",MockEndpoint.class);
    mock.expectedMessageCount(1);
    context.setLogMask(true);
    context.start();
    context.createProducerTemplate().sendBody("direct:foo","mask password=\"my passw0rd!\"");
    context.createProducerTemplate().sendBody("direct:noMask","no-mask password=\"my passw0rd!\"");
    mock.assertIsSatisfied();
    context.stop();
  }
  @Test public void testCustomFormatter() throws Exception {
    CamelContext context=createCamelContext();
    MockMaskingFormatter customFormatter=new MockMaskingFormatter();
    registry.bind(Constants.CUSTOM_LOG_MASK_REF,customFormatter);
    context.setLogMask(true);
    context.start();
    context.createProducerTemplate().sendBody("direct:foo","mock password=\"my passw0rd!\"");
    Assert.assertEquals("Got mock password=\"my passw0rd!\"",customFormatter.received);
    context.stop();
  }
public static class MockMaskingFormatter implements MaskingFormatter {
    private String received;
    @Override public String format(    String source){
      received=source;
      return source;
    }
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo");
        from("direct:noMask").routeId("noMask").logMask("false").log("Got ${body}").to("mock:noMask");
      }
    }
;
  }
}
