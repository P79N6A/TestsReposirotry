public class BeanInfoSingleMethodServiceTest extends ContextTestSupport {
  private SingleMethodService myService=new SingleMethodServiceImpl();
  @Test public void testBeanInfoSingleMethodRoute() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("You said Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBeanInfoSingleMethod() throws Exception {
    BeanInfo beaninfo=new BeanInfo(context,SingleMethodService.class);
    assertEquals(1,beaninfo.getMethods().size());
    assertEquals("doSomething",beaninfo.getMethods().get(0).getMethod().getName());
  }
  @Test public void testBeanInfoSingleMethodImpl() throws Exception {
    BeanInfo beaninfo=new BeanInfo(context,SingleMethodServiceImpl.class);
    assertEquals(2,beaninfo.getMethods().size());
    assertEquals("doSomething",beaninfo.getMethods().get(0).getMethod().getName());
    assertEquals("hello",beaninfo.getMethods().get(1).getMethod().getName());
    Method method=beaninfo.getMethods().get(0).getMethod();
    Object out=method.invoke(myService,"Bye World");
    assertEquals("You said Bye World",out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(myService,"doSomething").to("mock:result");
      }
    }
;
  }
}
