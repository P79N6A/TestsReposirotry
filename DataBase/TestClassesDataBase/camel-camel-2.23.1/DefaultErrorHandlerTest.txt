/** 
 * Default error handler test
 * @version 
 */
public class DefaultErrorHandlerTest extends ContextTestSupport {
  @Test public void testRoute(){
    Route route=context.getRoutes().get(0);
    EventDrivenConsumerRoute consumerRoute=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
    Processor processor=unwrap(consumerRoute.getProcessor());
    Pipeline pipeline=assertIsInstanceOf(Pipeline.class,processor);
    for (    Processor child : pipeline.getProcessors()) {
      Channel channel=assertIsInstanceOf(Channel.class,child);
      assertNotNull("There should be an error handler",channel.getErrorHandler());
      assertIsInstanceOf(DefaultErrorHandler.class,channel.getErrorHandler());
    }
  }
  @Test public void testOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testWithError() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Kabom");
      fail("Should have thrown a RuntimeCamelException");
    }
 catch (    RuntimeCamelException e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("Kabom".equals(body)) {
              throw new IllegalArgumentException("Boom");
            }
            exchange.getIn().setBody("Bye World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
