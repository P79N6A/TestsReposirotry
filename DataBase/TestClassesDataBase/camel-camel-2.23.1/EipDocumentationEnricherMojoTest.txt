@RunWith(MockitoJUnitRunner.class) public class EipDocumentationEnricherMojoTest {
  private EipDocumentationEnricherMojo eipDocumentationEnricherMojo=new EipDocumentationEnricherMojo();
  @Mock private File mockCamelCore;
  @Mock private File mockInputSchema;
  @Before public void setUp() throws Exception {
    eipDocumentationEnricherMojo.camelCoreDir=mockCamelCore;
    eipDocumentationEnricherMojo.inputCamelSchemaFile=mockInputSchema;
    eipDocumentationEnricherMojo.pathToModelDir="sub/path";
  }
  @Test public void testExecuteCamelCoreIsNull() throws Exception {
    eipDocumentationEnricherMojo.camelCoreDir=null;
    when(mockInputSchema.exists()).thenReturn(true);
    when(mockInputSchema.isFile()).thenReturn(true);
    try {
      eipDocumentationEnricherMojo.execute();
      fail("Expected MojoExecutionException");
    }
 catch (    MojoExecutionException e) {
    }
  }
  @Test public void testExecuteCamelCoreIsNotADirectory() throws Exception {
    when(mockCamelCore.exists()).thenReturn(true);
    when(mockInputSchema.exists()).thenReturn(true);
    when(mockInputSchema.isFile()).thenReturn(true);
    try {
      eipDocumentationEnricherMojo.execute();
      fail("Expected MojoExecutionException");
    }
 catch (    MojoExecutionException e) {
    }
  }
  @Test public void testExecuteInputCamelSchemaIsNotAFile() throws Exception {
    when(mockInputSchema.exists()).thenReturn(true);
    when(mockInputSchema.isFile()).thenReturn(false);
    try {
      eipDocumentationEnricherMojo.execute();
      fail("Expected MojoExecutionException");
    }
 catch (    MojoExecutionException e) {
    }
  }
  @Test public void testExecutePathToModelDirIsNull() throws Exception {
    eipDocumentationEnricherMojo.pathToModelDir=null;
    try {
      eipDocumentationEnricherMojo.execute();
      fail("Expected MojoExecutionException");
    }
 catch (    MojoExecutionException e) {
    }
  }
}
