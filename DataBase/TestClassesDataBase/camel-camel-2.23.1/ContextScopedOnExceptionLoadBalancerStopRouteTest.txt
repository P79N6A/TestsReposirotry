public class ContextScopedOnExceptionLoadBalancerStopRouteTest extends ContextTestSupport {
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:start").expectedBodiesReceived("World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:exception").expectedMessageCount(0);
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testError() throws Exception {
    getMockEndpoint("mock:error").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:start").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:exception").expectedBodiesReceived("Kaboom");
    template.sendBody("direct:start","Kaboom");
    assertMockEndpointsSatisfied();
  }
  @Test public void testErrorOk() throws Exception {
    getMockEndpoint("mock:error").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:start").expectedBodiesReceived("Kaboom","World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:exception").expectedBodiesReceived("Kaboom");
    template.sendBody("direct:start","Kaboom");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testErrorOkError() throws Exception {
    getMockEndpoint("mock:error").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:start").expectedBodiesReceived("Kaboom","World","Kaboom");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:exception").expectedBodiesReceived("Kaboom","Kaboom");
    template.sendBody("direct:start","Kaboom");
    template.sendBody("direct:start","World");
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> assertEquals(ServiceStatus.Stopped,context.getRouteStatus("errorRoute")));
    template.sendBody("direct:start","Kaboom");
    assertMockEndpointsSatisfied();
    SedaEndpoint seda=getMandatoryEndpoint("seda:error",SedaEndpoint.class);
    SedaEndpoint seda2=getMandatoryEndpoint("seda:error2",SedaEndpoint.class);
    int size=seda.getQueue().size();
    int size2=seda2.getQueue().size();
    assertTrue("There should be 1 exchange on the seda or seda2 queue",size == 1 || size2 == 1);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).loadBalance().roundRobin().to("seda:error","seda:error2").end().to("mock:exception");
        from("direct:start").to("mock:start").choice().when(body().contains("Kaboom")).throwException(new IllegalArgumentException("Forced")).otherwise().transform(body().prepend("Bye ")).to("mock:result");
        from("seda:error").routeId("errorRoute").to("controlbus:route?action=stop&routeId=errorRoute&async=true").to("mock:error");
      }
    }
;
  }
}
