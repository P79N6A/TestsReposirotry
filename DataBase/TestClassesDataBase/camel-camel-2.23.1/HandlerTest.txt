public class HandlerTest extends BaseJettyTest {
  private StatisticsHandler statisticsHandler1=new StatisticsHandler();
  private StatisticsHandler statisticsHandler2=new StatisticsHandler();
  private StatisticsHandler statisticsHandler3=new StatisticsHandler();
  private String htmlResponse="<html><body>Book 123 is Camel in Action</body></html>";
  private int port1;
  private int port2;
  @Test public void testWithOneHandler() throws Exception {
    assertEquals(0,statisticsHandler1.getRequests());
    assertEquals(0,statisticsHandler2.getRequests());
    assertEquals(0,statisticsHandler3.getRequests());
    InputStream html=(InputStream)template.requestBody("http://localhost:" + port1,"");
    BufferedReader br=IOHelper.buffered(new InputStreamReader(html));
    assertEquals(htmlResponse,br.readLine());
    assertEquals(1,statisticsHandler1.getRequests());
    assertEquals(0,statisticsHandler2.getRequests());
    assertEquals(0,statisticsHandler3.getRequests());
  }
  @Test public void testWithTwoHandlers() throws Exception {
    assertEquals(0,statisticsHandler1.getRequests());
    assertEquals(0,statisticsHandler2.getRequests());
    assertEquals(0,statisticsHandler3.getRequests());
    InputStream html=(InputStream)template.requestBody("http://localhost:" + port2,"");
    BufferedReader br=IOHelper.buffered(new InputStreamReader(html));
    assertEquals(htmlResponse,br.readLine());
    assertEquals(0,statisticsHandler1.getRequests());
    assertEquals(1,statisticsHandler2.getRequests());
    assertEquals(1,statisticsHandler3.getRequests());
  }
  @Test public void testWithTwoHandlersTwoEndpointsOnSamePort() throws Exception {
    assertEquals(0,statisticsHandler1.getRequests());
    assertEquals(0,statisticsHandler2.getRequests());
    assertEquals(0,statisticsHandler3.getRequests());
    InputStream html1=(InputStream)template.requestBody("http://localhost:" + port2,"");
    BufferedReader br1=IOHelper.buffered(new InputStreamReader(html1));
    assertEquals(htmlResponse,br1.readLine());
    InputStream html2=(InputStream)template.requestBody("http://localhost:" + port2 + "/endpoint2","");
    BufferedReader br2=IOHelper.buffered(new InputStreamReader(html2));
    assertEquals(htmlResponse,br2.readLine());
    assertEquals(0,statisticsHandler1.getRequests());
    assertEquals(2,statisticsHandler2.getRequests());
    assertEquals(2,statisticsHandler3.getRequests());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("statisticsHandler1",statisticsHandler1);
    jndi.bind("statisticsHandler2",statisticsHandler2);
    jndi.bind("statisticsHandler3",statisticsHandler3);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        port1=getPort();
        port2=getNextPort();
        from("jetty:http://localhost:" + port1 + "/?handlers=#statisticsHandler1").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody(htmlResponse);
          }
        }
);
        from("jetty:http://localhost:" + port2 + "/?handlers=#statisticsHandler2,#statisticsHandler3").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody(htmlResponse);
          }
        }
);
        from("jetty:http://localhost:" + port2 + "/endpoint2?handlers=#statisticsHandler2,#statisticsHandler3").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody(htmlResponse);
          }
        }
);
      }
    }
;
  }
}
