public class FileSplitInSplitTest extends ContextTestSupport {
  private final int size=3;
  private final String comma=",";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/split");
    super.setUp();
  }
  @Test public void testConcurrentAppend() throws Exception {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < size; i++) {
      sb.append("Block1 Line " + i + LS);
    }
    sb.append(comma);
    for (int i=10; i < size + 10; i++) {
      sb.append("Block2 Line " + i + LS);
    }
    template.sendBodyAndHeader("file:target/split",sb.toString(),Exchange.FILE_NAME,"input.txt");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    String txt=context.getTypeConverter().convertTo(String.class,new File("target/split/outbox/result0.txt"));
    assertNotNull(txt);
    String[] lines=txt.split(LS);
    assertEquals("Should be " + (size + 1) + " lines",size + 1,lines.length);
    txt=context.getTypeConverter().convertTo(String.class,new File("target/split/outbox/result1.txt"));
    assertNotNull(txt);
    lines=txt.split(LS);
    assertEquals("Should be " + (size + 1) + " lines",size + 1,lines.length);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        Tracer tracer=new Tracer();
        getContext().addInterceptStrategy(tracer);
        from("file:target/split?initialDelay=0&delay=10").routeId("foo").noAutoStartup().split(body().tokenize(comma)).parallelProcessing().streaming().setProperty("split",new SimpleExpression("${property.CamelSplitIndex}")).split(body().tokenize(LS)).parallelProcessing().streaming().setBody(body().append(":Status=OK").append(LS)).to("file:target/split/outbox?fileExist=Append&fileName=result${property.split}.txt").end().setBody(new SimpleExpression("${property.split} complete")).to("file:target/split/outbox?fileExist=Append&fileName=result${property.split}.txt").end().to("mock:result");
      }
    }
;
  }
}
