/** 
 * Allows for use of the Java DSL to create a black box CamelContext and then test its use from another context
 */
public class JavaDslBlackBoxTest extends CamelTestSupport {
  @EndpointInject(uri="mock:results") private MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") private ProducerTemplate template;
  @Test public void testUsingContextComponent() throws Exception {
    resultEndpoint.expectedHeaderReceived("received","true");
    resultEndpoint.expectedMessageCount(2);
    template.sendBody("<purchaseOrder>one</purchaseOrder>");
    template.sendBody("<purchaseOrder>two</purchaseOrder>");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    DefaultCamelContext blackBox=new DefaultCamelContext(registry);
    blackBox.setName("blackBox");
    blackBox.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:purchaseOrder").setHeader("received").constant("true").to("direct:invoice");
      }
    }
);
    blackBox.start();
    registry.bind("accounts",blackBox);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("accounts:purchaseOrder");
        from("accounts:invoice").to("mock:results");
      }
    }
;
  }
}
