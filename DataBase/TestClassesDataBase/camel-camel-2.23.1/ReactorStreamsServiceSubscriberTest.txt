public class ReactorStreamsServiceSubscriberTest extends ReactorStreamsServiceTestSupport {
  @Test public void testSubscriber() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:sub1").to("mock:sub1");
        from("reactive-streams:sub2").to("mock:sub2");
        from("timer:tick?period=50").setBody().simple("random(500)").to("mock:sub3").to("reactive-streams:pub");
      }
    }
);
    Subscriber<Integer> sub1=crs.streamSubscriber("sub1",Integer.class);
    Subscriber<Integer> sub2=crs.streamSubscriber("sub2",Integer.class);
    Publisher<Integer> pub=crs.fromStream("pub",Integer.class);
    pub.subscribe(sub1);
    pub.subscribe(sub2);
    context.start();
    int count=2;
    MockEndpoint e1=getMockEndpoint("mock:sub1");
    e1.expectedMinimumMessageCount(count);
    e1.assertIsSatisfied();
    MockEndpoint e2=getMockEndpoint("mock:sub2");
    e2.expectedMinimumMessageCount(count);
    e2.assertIsSatisfied();
    MockEndpoint e3=getMockEndpoint("mock:sub3");
    e3.expectedMinimumMessageCount(count);
    e3.assertIsSatisfied();
    for (int i=0; i < count; i++) {
      Exchange ex1=e1.getExchanges().get(i);
      Exchange ex2=e2.getExchanges().get(i);
      Exchange ex3=e3.getExchanges().get(i);
      assertEquals(ex1.getIn().getBody(),ex2.getIn().getBody());
      assertEquals(ex1.getIn().getBody(),ex3.getIn().getBody());
    }
  }
  @Test public void testSingleConsumer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:singleConsumer").process().message(m -> m.setHeader("thread",Thread.currentThread().getId())).to("mock:singleBucket");
      }
    }
);
    context.start();
    Flux.range(0,1000).subscribe(crs.streamSubscriber("singleConsumer",Number.class));
    MockEndpoint endpoint=getMockEndpoint("mock:singleBucket");
    endpoint.expectedMessageCount(1000);
    endpoint.assertIsSatisfied();
    Assert.assertEquals(1,endpoint.getExchanges().stream().map(x -> x.getIn().getHeader("thread",String.class)).distinct().count());
    AtomicLong num=new AtomicLong(0);
    endpoint.getExchanges().stream().map(x -> x.getIn().getBody(Long.class)).forEach(n -> Assert.assertEquals(num.getAndIncrement(),n.longValue()));
  }
  @Test public void testMultipleConsumers() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:multipleConsumers?concurrentConsumers=3").process().message(m -> m.setHeader("thread",Thread.currentThread().getId())).to("mock:multipleBucket");
      }
    }
);
    context.start();
    Flux.range(0,1000).subscribe(crs.streamSubscriber("multipleConsumers",Number.class));
    MockEndpoint endpoint=getMockEndpoint("mock:multipleBucket");
    endpoint.expectedMessageCount(1000);
    endpoint.assertIsSatisfied();
    Assert.assertEquals(3,endpoint.getExchanges().stream().map(x -> x.getIn().getHeader("thread",String.class)).distinct().count());
  }
}
