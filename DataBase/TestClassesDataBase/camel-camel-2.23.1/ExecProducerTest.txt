/** 
 * Test the functionality of  {@link ExecProducer}
 */
@ContextConfiguration(locations={"exec-mock-executor-context.xml"}) public class ExecProducerTest extends AbstractJUnit4SpringContextTests {
  @Produce(uri="direct:input") private ProducerTemplate producerTemplate;
  @Autowired private ExecCommandExecutorMock execCommandExecutorMock;
  @Test @DirtiesContext public void testWithContextConfiguration(){
    producerTemplate.sendBody("direct:input","test");
    assertEquals("mockedByCommandExecutorMock.exe",execCommandExecutorMock.lastCommandResult.getCommand().getExecutable());
  }
  @Test @DirtiesContext public void testOverrideExecutable(){
    final String command="java";
    producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("noinput");
        exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE,command);
      }
    }
);
    assertEquals(command,execCommandExecutorMock.lastCommandResult.getCommand().getExecutable());
  }
  /** 
 * Tests that the args are set literally.
 */
  @Test @DirtiesContext public void testOverrideArgs(){
    final String[] args={"-version","classpath:c:/program files/test/"};
    producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("noinput");
        exchange.getIn().setHeader(EXEC_COMMAND_ARGS,Arrays.asList(args));
      }
    }
);
    List<String> commandArgs=execCommandExecutorMock.lastCommandResult.getCommand().getArgs();
    assertEquals(args[0],commandArgs.get(0));
    assertEquals(args[1],commandArgs.get(1));
  }
  @Test @DirtiesContext public void testOverrideTimeout(){
    producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("noinput");
        exchange.getIn().setHeader(EXEC_COMMAND_TIMEOUT,"1000");
      }
    }
);
    assertEquals(1000,execCommandExecutorMock.lastCommandResult.getCommand().getTimeout());
  }
  @Test @DirtiesContext public void testInputLines() throws IOException {
    final String input="line1" + LINE_SEPARATOR + "line2";
    producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(input);
      }
    }
);
    assertEquals(input,IOUtils.toString(execCommandExecutorMock.lastCommandResult.getCommand().getInput()));
  }
  @Test @DirtiesContext public void testInputLinesNotConvertibleToInputStream() throws IOException {
    final Integer notConvertibleToInputStreamBody=new Integer(1);
    Exchange e=producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(notConvertibleToInputStreamBody);
      }
    }
);
    ExecResult result=e.getIn().getBody(ExecResult.class);
    assertNotNull(result);
    assertNull(result.getCommand().getInput());
  }
  @Test @DirtiesContext public void testNullInBody() throws IOException {
    Exchange e=producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(null);
      }
    }
);
    ExecResult result=e.getIn().getBody(ExecResult.class);
    assertNotNull(result);
    assertNull(result.getCommand().getInput());
  }
  @Test @DirtiesContext public void testOverrideWorkingDir(){
    final String workingDir="c:/program files/test";
    producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("");
        exchange.getIn().setHeader(EXEC_COMMAND_WORKING_DIR,workingDir);
      }
    }
);
    assertEquals(workingDir,execCommandExecutorMock.lastCommandResult.getCommand().getWorkingDir());
  }
  @Test @DirtiesContext public void testInInOnlyExchange() throws Exception {
    Exchange exchange=producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOnly);
        exchange.getIn().setBody("inonly");
      }
    }
);
    ExecResult result=exchange.getIn().getBody(ExecResult.class);
    assertNotNull(result);
  }
  @Test @DirtiesContext public void testOutCapableExchange() throws Exception {
    Exchange exchange=producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        exchange.getIn().setBody("inout");
      }
    }
);
    ExecResult result=exchange.getOut().getBody(ExecResult.class);
    assertNotNull(result);
  }
}
