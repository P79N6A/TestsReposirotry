/** 
 * @version 
 */
public class JettyFailoverRoundRobinTest extends CamelTestSupport {
  private static int port1=AvailablePortFinder.getNextAvailable(23021);
  private static int port2=AvailablePortFinder.getNextAvailable(23022);
  private static int port3=AvailablePortFinder.getNextAvailable(23023);
  private static int port4=AvailablePortFinder.getNextAvailable(23024);
  private String bad="jetty:http://localhost:" + port1 + "/bad";
  private String bad2="jetty:http://localhost:" + port2 + "/bad2";
  private String good="jetty:http://localhost:" + port3 + "/good";
  private String good2="jetty:http://localhost:" + port4 + "/good2";
  @Test public void testJettyFailoverRoundRobin() throws Exception {
    getMockEndpoint("mock:bad").expectedMessageCount(1);
    getMockEndpoint("mock:bad2").expectedMessageCount(1);
    getMockEndpoint("mock:good").expectedMessageCount(1);
    getMockEndpoint("mock:good2").expectedMessageCount(0);
    String reply=template.requestBody("direct:start",null,String.class);
    assertEquals("Good",reply);
    assertMockEndpointsSatisfied();
    resetMocks();
    getMockEndpoint("mock:bad").expectedMessageCount(0);
    getMockEndpoint("mock:bad2").expectedMessageCount(0);
    getMockEndpoint("mock:good").expectedMessageCount(0);
    getMockEndpoint("mock:good2").expectedMessageCount(1);
    reply=template.requestBody("direct:start",null,String.class);
    assertEquals("Also good",reply);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").loadBalance().failover(-1,false,true).to(bad,bad2,good,good2);
        from(bad).to("mock:bad").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE,500);
            exchange.getIn().setBody("Something bad happened");
          }
        }
);
        from(bad2).to("mock:bad2").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE,404);
            exchange.getIn().setBody("Not found");
          }
        }
);
        from(good).to("mock:good").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody("Good");
          }
        }
);
        from(good2).to("mock:good2").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody("Also good");
          }
        }
);
      }
    }
;
  }
}
