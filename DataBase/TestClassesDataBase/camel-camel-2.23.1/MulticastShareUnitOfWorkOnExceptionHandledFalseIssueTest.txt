public class MulticastShareUnitOfWorkOnExceptionHandledFalseIssueTest extends ContextTestSupport {
  @Test public void testMulticast() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should throw exception");
    }
 catch (    Exception e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause().getCause());
      assertEquals("Forced",cause.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(false).to("mock:a");
        from("direct:start").multicast().shareUnitOfWork().stopOnException().to("direct:b").end().to("mock:result");
        from("direct:b").to("mock:b").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
