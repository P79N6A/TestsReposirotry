@RunWith(MockitoJUnitRunner.class) public class RedisIdempotentRepositoryTest {
  private static final String REPOSITORY="testRepository";
  private static final String KEY="KEY";
  @Mock private RedisTemplate<String,String> redisTemplate;
  @Mock private RedisConnectionFactory redisConnectionFactory;
  @Mock private RedisConnection redisConnection;
  @Mock private SetOperations<String,String> setOperations;
  private RedisIdempotentRepository idempotentRepository;
  @Before public void setUp() throws Exception {
    when(redisTemplate.opsForSet()).thenReturn(setOperations);
    when(redisTemplate.getConnectionFactory()).thenReturn(redisConnectionFactory);
    when(redisTemplate.getConnectionFactory().getConnection()).thenReturn(redisConnection);
    idempotentRepository=RedisIdempotentRepository.redisIdempotentRepository(redisTemplate,REPOSITORY);
  }
  @Test public void shouldAddKey(){
    idempotentRepository.add(KEY);
    verify(setOperations).add(REPOSITORY,KEY);
  }
  @Test public void shoulCheckForMembers(){
    idempotentRepository.contains(KEY);
    verify(setOperations).isMember(REPOSITORY,KEY);
  }
  @Test public void shouldRemoveKey(){
    idempotentRepository.remove(KEY);
    verify(setOperations).remove(REPOSITORY,KEY);
  }
  @Test public void shouldClearRepository(){
    idempotentRepository.clear();
    verify(redisConnection).flushDb();
  }
  @Test public void shouldReturnProcessorName(){
    String processorName=idempotentRepository.getProcessorName();
    assertEquals(REPOSITORY,processorName);
  }
}
