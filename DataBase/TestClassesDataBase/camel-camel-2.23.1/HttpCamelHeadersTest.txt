/** 
 * @version
 */
public class HttpCamelHeadersTest extends BaseHttpTest {
  protected HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    Map<String,String> expectedHeaders=new HashMap<>();
    expectedHeaders.put("TestHeader","test");
    expectedHeaders.put("Accept-Language","pl");
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/",new MyHeaderValidationHandler("GET","HTTP/1.0",getExpectedContent(),expectedHeaders)).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void httpHeadersShouldPresent() throws Exception {
    assertExchange(doExchange());
  }
  @Override protected void assertHeaders(  Map<String,Object> headers){
    super.assertHeaders(headers);
    assertEquals("test",headers.get("TestHeader"));
    assertEquals("pl",headers.get("Accept-Language"));
  }
  private Exchange doExchange(){
    return template.request("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/"+ setupEndpointParams(),new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader("TestHeader","test");
        exchange.getIn().setHeader("Accept-Language","pl");
        exchange.getIn().setHeader(Exchange.HTTP_PROTOCOL_VERSION,"HTTP/1.0");
      }
    }
);
  }
  protected String setupEndpointParams(){
    return "";
  }
private class MyHeaderValidationHandler extends HeaderValidationHandler {
    private String expectProtocolVersion;
    MyHeaderValidationHandler(    String expectedMethod,    String protocolVersion,    String responseContent,    Map<String,String> expectedHeaders){
      super(expectedMethod,null,null,responseContent,expectedHeaders);
      expectProtocolVersion=protocolVersion;
    }
    public void handle(    final HttpRequest request,    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      if (!expectProtocolVersion.equals(request.getProtocolVersion().toString())) {
        response.setStatusCode(HttpStatus.SC_HTTP_VERSION_NOT_SUPPORTED);
        return;
      }
      super.handle(request,response,context);
    }
  }
}
