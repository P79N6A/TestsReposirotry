public class ConsulHealthTest extends ConsulTestSupport {
  private AgentClient client;
  private List<Registration> registrations;
  private String service;
  @Override public void doPreSetup() throws Exception {
    super.doPreSetup();
    Random random=new Random();
    this.service=UUID.randomUUID().toString();
    this.client=getConsul().agentClient();
    this.registrations=Arrays.asList(ImmutableRegistration.builder().id(UUID.randomUUID().toString()).name(this.service).address("127.0.0.1").port(random.nextInt(10000)).build(),ImmutableRegistration.builder().id(UUID.randomUUID().toString()).name(this.service).address("127.0.0.1").port(random.nextInt(10000)).build());
    this.registrations.forEach(client::register);
  }
  @Override public void doPostTearDown() throws Exception {
    super.doPostTearDown();
    registrations.forEach(r -> client.deregister(r.getId()));
  }
  @Test public void testServiceInstance() throws Exception {
    List<ServiceHealth> ref=getConsul().healthClient().getAllServiceInstances(this.service).getResponse();
    List<ServiceHealth> res=fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION,ConsulHealthActions.SERVICE_INSTANCES).withHeader(ConsulConstants.CONSUL_SERVICE,this.service).to("direct:consul").request(List.class);
    Assert.assertEquals(2,ref.size());
    Assert.assertEquals(2,res.size());
    Assert.assertEquals(ref,res);
    assertTrue(registrations.stream().anyMatch(r -> r.getPort().isPresent() && r.getPort().get() == res.get(0).getService().getPort() && r.getId().equalsIgnoreCase(res.get(0).getService().getId())));
    assertTrue(registrations.stream().anyMatch(r -> r.getPort().isPresent() && r.getPort().get() == res.get(1).getService().getPort() && r.getId().equalsIgnoreCase(res.get(1).getService().getId())));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:consul").to("consul:health");
      }
    }
;
  }
}
