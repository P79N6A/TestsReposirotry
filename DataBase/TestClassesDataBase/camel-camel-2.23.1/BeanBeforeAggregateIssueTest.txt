/** 
 * @version 
 */
public class BeanBeforeAggregateIssueTest extends ContextTestSupport {
  private MyAggRepo myRepo=new MyAggRepo();
  @Test public void testBeanBeforeAggregation() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(3).create();
    getMockEndpoint("mock:result").expectedBodiesReceived("A+B");
    template.sendBody("seda:start","A");
    template.sendBody("seda:start","B");
    assertMockEndpointsSatisfied();
    notify.matches(5,TimeUnit.SECONDS);
    assertTrue("Should have confirmed",myRepo.isConfirm());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start").bean(TestBean.class).aggregate(constant("true"),new BodyInAggregatingStrategy()).aggregationRepository(myRepo).completionSize(2).to("mock:result");
      }
    }
;
  }
public static final class TestBean {
    public String doNothing(    String foo){
      return foo;
    }
  }
private static final class MyAggRepo extends MemoryAggregationRepository {
    private volatile boolean confirm;
    @Override public void confirm(    CamelContext camelContext,    String exchangeId){
      super.confirm(camelContext,exchangeId);
      confirm=true;
    }
    public boolean isConfirm(){
      return confirm;
    }
  }
}
