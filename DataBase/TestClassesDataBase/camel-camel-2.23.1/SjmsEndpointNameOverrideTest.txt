public class SjmsEndpointNameOverrideTest extends CamelTestSupport {
  private static final String BEAN_NAME="not-sjms";
  @Override protected boolean useJmx(){
    return true;
  }
  @Test public void testDefaults() throws Exception {
    Endpoint endpoint=context.getEndpoint(BEAN_NAME + ":test");
    assertNotNull(endpoint);
    assertTrue(endpoint instanceof SjmsEndpoint);
    SjmsEndpoint sjms=(SjmsEndpoint)endpoint;
    assertEquals(sjms.getEndpointUri(),BEAN_NAME + "://test");
    assertEquals(sjms.createExchange().getPattern(),ExchangePattern.InOnly);
  }
  @Test public void testQueueEndpoint() throws Exception {
    Endpoint sjms=context.getEndpoint(BEAN_NAME + ":queue:test");
    assertNotNull(sjms);
    assertTrue(sjms instanceof SjmsEndpoint);
    assertEquals(sjms.getEndpointUri(),BEAN_NAME + "://queue:test");
  }
  @Test public void testTopicEndpoint() throws Exception {
    Endpoint sjms=context.getEndpoint(BEAN_NAME + ":topic:test");
    assertNotNull(sjms);
    assertTrue(sjms instanceof SjmsEndpoint);
    assertEquals(sjms.getEndpointUri(),BEAN_NAME + "://topic:test");
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false");
    SjmsComponent component=new SjmsComponent();
    component.setConnectionCount(1);
    component.setConnectionFactory(connectionFactory);
    camelContext.addComponent(BEAN_NAME,component);
    return camelContext;
  }
}
