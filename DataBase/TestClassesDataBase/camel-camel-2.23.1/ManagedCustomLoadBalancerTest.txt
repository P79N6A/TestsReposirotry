/** 
 * @version 
 */
public class ManagedCustomLoadBalancerTest extends ManagementTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBalancer",new MyLoadBalancer());
    return jndi;
  }
  @Test public void testManageCustomLoadBalancer() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"");
    String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
    assertEquals("route1",routeId);
    String camelId=(String)mbeanServer.getAttribute(on,"CamelId");
    assertEquals("camel-1",camelId);
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals(ServiceStatus.Started.name(),state);
    Integer size=(Integer)mbeanServer.getAttribute(on,"Size");
    assertEquals(2,size.intValue());
    String ref=(String)mbeanServer.getAttribute(on,"Ref");
    assertEquals("myBalancer",ref);
    String name=(String)mbeanServer.getAttribute(on,"LoadBalancerClassName");
    assertEquals(MyLoadBalancer.class.getName(),name);
    TabularData data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{false},new String[]{"boolean"});
    assertNotNull(data);
    assertEquals(2,data.size());
    data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{true},new String[]{"boolean"});
    assertNotNull(data);
    assertEquals(5,data.size());
    String json=(String)mbeanServer.invoke(on,"informationJson",null,null);
    assertNotNull(json);
    assertTrue(json.contains("\"description\": \"Balances message processing among a number of nodes"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").loadBalance().custom("myBalancer").id("mysend").to("mock:foo","mock:bar");
      }
    }
;
  }
public static class MyLoadBalancer extends LoadBalancerSupport {
    public boolean process(    Exchange exchange,    AsyncCallback callback){
      String body=exchange.getIn().getBody(String.class);
      try {
        if ("x".equals(body)) {
          getProcessors().get(0).process(exchange);
        }
 else         if ("y".equals(body)) {
          getProcessors().get(1).process(exchange);
        }
 else {
          getProcessors().get(2).process(exchange);
        }
      }
 catch (      Throwable e) {
        exchange.setException(e);
      }
      callback.done(true);
      return true;
    }
  }
}
