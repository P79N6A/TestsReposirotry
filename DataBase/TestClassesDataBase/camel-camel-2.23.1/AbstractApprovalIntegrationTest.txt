public abstract class AbstractApprovalIntegrationTest extends AbstractSalesforceTestBase {
  protected static final Object NOT_USED=null;
  protected List<String> accountIds=Collections.emptyList();
  protected String userId;
  private final int accountCount;
  AbstractApprovalIntegrationTest(  final int accountCount){
    this.accountCount=accountCount;
  }
  @Before public void createAccounts(){
    final List<Account> accountsToCreate=IntStream.range(0,accountCount + 1).mapToObj(idx -> {
      final String name="test-account-" + idx;
      final Account account=new Account();
      account.setName(name);
      return account;
    }
).collect(Collectors.toList());
    accountIds=accountsToCreate.stream().map(account -> template.requestBody("salesforce:createSObject?sObjectName=Account",account,CreateSObjectResult.class)).map(CreateSObjectResult::getId).collect(Collectors.toList());
  }
  @After public void deleteAccounts(){
    accountIds.forEach(id -> template.sendBody("salesforce:deleteSObject?sObjectName=Account",id));
  }
  @Before public void setupUserId() throws IOException {
    final SalesforceLoginConfig loginConfig=LoginConfigHelper.getLoginConfig();
    final String userName=loginConfig.getUserName();
    final String wildcardUsername=userName.replace('+','%');
    final QueryRecordsReport results=template.requestBody("salesforce:query?sObjectClass=" + QueryRecordsReport.class.getName() + "&sObjectQuery=SELECT Id FROM User WHERE Username LIKE '"+ wildcardUsername+ "'",NOT_USED,QueryRecordsReport.class);
    userId=results.getRecords().get(0).getId();
  }
}
