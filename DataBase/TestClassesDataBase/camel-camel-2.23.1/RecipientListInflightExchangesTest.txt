public class RecipientListInflightExchangesTest extends RestletTestSupport {
  @Test public void testRecipientListWithBean() throws Exception {
    assertEquals(0,context.getInflightRepository().size());
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("RS-response","RS-response");
    String out=template.requestBody("direct:start","theBody",String.class);
    assertEquals("RS-response",out);
    out=template.requestBody("direct:start","theBody",String.class);
    assertEquals("RS-response",out);
    assertMockEndpointsSatisfied();
    assertEquals(0,context.getInflightRepository().size());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        context.setStreamCaching(true);
        errorHandler(noErrorHandler());
        from("direct:start").routeId("test1").process(new MyInflightCheckBean()).recipientList().simple("restlet:http://localhost:" + portNum + "/users/123/basic?synchronous=true").to("mock:result");
        from("restlet:http://localhost:" + portNum + "/users/{id}/basic").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("RS-response");
          }
        }
);
      }
    }
;
  }
public class MyInflightCheckBean implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      assertEquals("Should not be more than 1 exchanges inflight",1,exchange.getContext().getInflightRepository().size());
    }
  }
}
