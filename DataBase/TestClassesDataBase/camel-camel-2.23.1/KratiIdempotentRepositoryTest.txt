public class KratiIdempotentRepositoryTest extends CamelTestSupport {
  private String path="target/test/idempotent";
  private DataSet<byte[]> dataSet=KratiHelper.createDataSet(path,2,new ChannelSegmentFactory());
  private Serializer<String> serializer=new KratiDefaultSerializer<>();
  private KratiIdempotentRepository repository;
  private String key01="123";
  private String key02="456";
  @Before public void setUp() throws Exception {
    repository=new KratiIdempotentRepository("target/test/idempotent");
    repository.setDataSet(dataSet);
    dataSet.clear();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    dataSet.clear();
  }
  @Test public void testAdd() throws Exception {
    assertTrue(dataSet.add(serializer.serialize(key01)));
    assertTrue(repository.contains(key01));
    assertTrue(dataSet.add(serializer.serialize(key02)));
    assertTrue(repository.contains(key02));
  }
  @Test public void testContains() throws Exception {
    assertFalse(repository.contains(key01));
    assertTrue(repository.add(key01));
    assertTrue(repository.contains(key01));
  }
  @Test public void testRemove() throws Exception {
    assertTrue(repository.add(key01));
    assertTrue(repository.remove(key01));
    assertFalse(repository.remove(key02));
  }
  @Test public void testClear() throws Exception {
    assertTrue(repository.add(key01));
    assertTrue(repository.add(key02));
    repository.clear();
    assertFalse(repository.contains(key01));
    assertFalse(repository.contains(key02));
  }
  @Test public void testRepositoryInRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:out");
    mock.expectedBodiesReceived("a","b");
    assertEquals("Should be started",true,repository.getStatus().isStarted());
    template.sendBodyAndHeader("direct://in","a","messageId",key01);
    template.sendBodyAndHeader("direct://in","b","messageId",key02);
    template.sendBodyAndHeader("direct://in","c","messageId",key01);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct://in").idempotentConsumer(header("messageId"),repository).to("mock://out");
      }
    }
;
  }
}
