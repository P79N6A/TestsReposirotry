public class AbstractSpanDecoratorTest {
  private static final String TEST_URI="test:/uri";
  @Test public void testGetOperationName(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI);
    SpanDecorator decorator=new AbstractSpanDecorator(){
      @Override public String getComponent(){
        return null;
      }
    }
;
    assertEquals("test",decorator.getOperationName(null,endpoint));
  }
  @Test public void testPre(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI);
    SpanDecorator decorator=new AbstractSpanDecorator(){
      @Override public String getComponent(){
        return null;
      }
    }
;
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.pre(span,null,endpoint);
    assertEquals("camel-test",span.tags().get(Tags.COMPONENT.getKey()));
  }
  @Test public void testPostExchangeFailed(){
    Exchange exchange=Mockito.mock(Exchange.class);
    Mockito.when(exchange.isFailed()).thenReturn(true);
    Exception e=new Exception("Test Message");
    Mockito.when(exchange.getException()).thenReturn(e);
    SpanDecorator decorator=new AbstractSpanDecorator(){
      @Override public String getComponent(){
        return null;
      }
    }
;
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.post(span,exchange,null);
    assertEquals(true,span.tags().get(Tags.ERROR.getKey()));
    assertEquals(1,span.logEntries().size());
    assertEquals("error",span.logEntries().get(0).fields().get("event"));
    assertEquals("Exception",span.logEntries().get(0).fields().get("error.kind"));
    assertEquals(e.getMessage(),span.logEntries().get(0).fields().get("message"));
  }
  @Test public void testStripSchemeNoOptions(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("direct:hello");
    assertEquals("hello",AbstractSpanDecorator.stripSchemeAndOptions(endpoint));
  }
  @Test public void testStripSchemeNoOptionsWithSlashes(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("direct://hello");
    assertEquals("hello",AbstractSpanDecorator.stripSchemeAndOptions(endpoint));
  }
  @Test public void testStripSchemeAndOptions(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("direct:hello?world=true");
    assertEquals("hello",AbstractSpanDecorator.stripSchemeAndOptions(endpoint));
  }
}
