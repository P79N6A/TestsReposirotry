/** 
 * Unit test to test what happens if remote server closes session but doesn't reply
 */
public class Mina2NoResponseFromServerTest extends BaseMina2Test {
  @Test public void testNoResponse() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.requestBody(String.format("mina2:tcp://localhost:%1$s?sync=true&codec=#myCodec",getPort()),"Hello World");
      fail("Should throw a CamelExchangeException");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(CamelExchangeException.class,e.getCause());
    }
    mock.assertIsSatisfied();
  }
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myCodec",new MyCodec());
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(String.format("mina2:tcp://localhost:%1$s?sync=true&codec=#myCodec",getPort())).transform(constant("Bye World")).to("mock:result");
      }
    }
;
  }
private static class MyCodec implements ProtocolCodecFactory {
    public ProtocolEncoder getEncoder(    IoSession session) throws Exception {
      return new ProtocolEncoder(){
        public void encode(        IoSession ioSession,        Object message,        ProtocolEncoderOutput out) throws Exception {
          ioSession.closeNow();
        }
        public void dispose(        IoSession ioSession) throws Exception {
        }
      }
;
    }
    public ProtocolDecoder getDecoder(    IoSession session) throws Exception {
      return new ProtocolDecoder(){
        public void decode(        IoSession ioSession,        IoBuffer in,        ProtocolDecoderOutput out) throws Exception {
          ioSession.closeNow();
        }
        public void finishDecode(        IoSession ioSession,        ProtocolDecoderOutput protocolDecoderOutput) throws Exception {
        }
        public void dispose(        IoSession ioSession) throws Exception {
        }
      }
;
    }
  }
}
