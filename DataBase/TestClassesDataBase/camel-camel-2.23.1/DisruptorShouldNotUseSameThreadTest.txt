/** 
 * Unit test to verify continuing using NOT same thread on the consumer side.
 */
public class DisruptorShouldNotUseSameThreadTest extends CamelTestSupport {
  private static long id;
  @Test public void testNotUseSameThread() throws Exception {
    final MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        final ThreadLocal<String> local=new ThreadLocal<>();
        from("direct:start").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            local.set("Hello");
            id=Thread.currentThread().getId();
          }
        }
).to("disruptor:foo");
        from("disruptor:foo").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            assertEquals(null,local.get());
            assertNotSame("Thread ids should not be same",id,Thread.currentThread().getId());
          }
        }
).to("mock:result");
      }
    }
;
  }
}
