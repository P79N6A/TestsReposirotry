public class ClosePullRequestProducerTest extends GitHubComponentTestBase {
  public static final String PULL_REQUEST_PRODUCER_ENDPOINT="direct:validPullRequest";
  protected static final Logger LOG=LoggerFactory.getLogger(ClosePullRequestProducerTest.class);
  private long latestPullRequestId;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from(PULL_REQUEST_PRODUCER_ENDPOINT).process(new ClosePullRequestProducerProcessor()).to("github://closePullRequest?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo");
      }
    }
;
  }
  @Test public void testPullRequestCommentProducer() throws Exception {
    PullRequest pullRequest=pullRequestService.addPullRequest("testPullRequestCommentProducer");
    latestPullRequestId=pullRequest.getId();
    Endpoint closePullRequestEndpoint=getMandatoryEndpoint(PULL_REQUEST_PRODUCER_ENDPOINT);
    Exchange exchange=closePullRequestEndpoint.createExchange();
    template.send(closePullRequestEndpoint,exchange);
    Thread.sleep(1 * 1000);
    List<PullRequest> closedPullRequests=pullRequestService.getPullRequests(null,"closed");
    assertNotNull(closedPullRequests);
    boolean found=false;
    for (    PullRequest pr : closedPullRequests) {
      if (pr.getId() == latestPullRequestId) {
        found=true;
        break;
      }
    }
    assertTrue("Didn't find pull request " + latestPullRequestId,found);
  }
public class ClosePullRequestProducerProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Map<String,Object> headers=in.getHeaders();
      headers.put(GitHubConstants.GITHUB_PULLREQUEST,latestPullRequestId);
    }
  }
}
