/** 
 * Test class for  {@link com.google.api.services.drive.Drive$Children} APIs.
 */
public class DriveChildrenIntegrationTest extends AbstractGoogleDriveTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(DriveChildrenIntegrationTest.class);
  private static final String PATH_PREFIX=GoogleDriveApiCollection.getCollection().getApiName(DriveChildrenApiMethod.class).getName();
  private static final String ROOT_FOLDER="root";
  @Test public void testUploadFileToFolder() throws Exception {
    File folder=uploadTestFolder();
    File file=uploadTestFile();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.folderId",folder.getId());
    com.google.api.services.drive.model.ChildReference child=new com.google.api.services.drive.model.ChildReference();
    child.setId(file.getId());
    headers.put("CamelGoogleDrive.content",child);
    requestBodyAndHeaders("direct://INSERT",null,headers);
    final com.google.api.services.drive.model.ChildList result=requestBody("direct://LIST",folder.getId());
    assertNotNull("insert result",result);
    LOG.debug("insert: " + result);
    headers.put("CamelGoogleDrive.childId",child.getId());
    com.google.api.services.drive.model.ChildReference childReference=requestBodyAndHeaders("direct://GET",null,headers);
    assertNotNull("inserted child",childReference);
    requestBodyAndHeaders("direct://DELETE",null,headers);
    try {
      childReference=requestBodyAndHeaders("direct://GET",null,headers);
      fail("can't fetch a child that already get deleted");
    }
 catch (    Exception ex) {
      assertTrue(ex.getCause().getCause() instanceof com.google.api.client.googleapis.json.GoogleJsonResponseException);
    }
  }
  @Test public void testUploadFileToRootFolder() throws Exception {
    File file=uploadTestFile();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleDrive.folderId",ROOT_FOLDER);
    com.google.api.services.drive.model.ChildReference child=new com.google.api.services.drive.model.ChildReference();
    child.setId(file.getId());
    headers.put("CamelGoogleDrive.content",child);
    requestBodyAndHeaders("direct://INSERT",null,headers);
    headers.put("CamelGoogleDrive.childId",child.getId());
    com.google.api.services.drive.model.ChildReference childReference=requestBodyAndHeaders("direct://GET-BODY",child.getId(),headers);
    assertNotNull("inserted child",childReference);
    requestBodyAndHeaders("direct://DELETE",null,headers);
    try {
      childReference=requestBodyAndHeaders("direct://GET-BODY",child.getId(),headers,com.google.api.services.drive.model.ChildReference.class);
      fail("can't fetch a child that already get deleted");
    }
 catch (    Exception ex) {
      assertTrue(ex.getCause().getCause() instanceof com.google.api.client.googleapis.json.GoogleJsonResponseException);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://DELETE").to("google-drive://" + PATH_PREFIX + "/delete");
        from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get");
        from("direct://GET-BODY").to("google-drive://" + PATH_PREFIX + "/get?inBody=childId");
        from("direct://INSERT").to("google-drive://" + PATH_PREFIX + "/insert");
        from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list?inBody=folderId");
      }
    }
;
  }
}
