@RunWith(MockitoJUnitRunner.class) public class ContainerProducerTest extends SwiftProducerTestSupport {
  private static final String CONTAINER_NAME="containerName";
  @Mock private SwiftContainer mockOsContainer;
  @Mock private ObjectStorageContainerService containerService;
  @Captor private ArgumentCaptor<String> nameCaptor;
  @Captor private ArgumentCaptor<Map<String,String>> dataCaptor;
  @Captor private ArgumentCaptor<String> containerNameCaptor;
  @Captor private ArgumentCaptor<CreateUpdateContainerOptions> optionsCaptor;
  @Captor private ArgumentCaptor<ContainerListOptions> containerListOptionsCaptor;
  @Before public void setUp(){
    when(objectStorageService.containers()).thenReturn(containerService);
    producer=new ContainerProducer(endpoint,client);
  }
  @Test public void createTestWithoutOptions() throws Exception {
    when(containerService.create(anyString(),isNull())).thenReturn(ActionResponse.actionSuccess());
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    producer.process(exchange);
    verify(containerService).create(containerNameCaptor.capture(),optionsCaptor.capture());
    assertEquals(CONTAINER_NAME,containerNameCaptor.getValue());
    assertNull(optionsCaptor.getValue());
    assertFalse(msg.isFault());
  }
  @Test public void createTestWithOptions() throws Exception {
    when(containerService.create(anyString(),any())).thenReturn(ActionResponse.actionSuccess());
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.CREATE);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    final CreateUpdateContainerOptions options=CreateUpdateContainerOptions.create().accessAnybodyRead();
    msg.setBody(options);
    producer.process(exchange);
    verify(containerService).create(containerNameCaptor.capture(),optionsCaptor.capture());
    assertEquals(CONTAINER_NAME,containerNameCaptor.getValue());
    assertEquals(options,optionsCaptor.getValue());
    assertFalse(msg.isFault());
  }
  @Test public void getTest() throws Exception {
    List<SwiftContainer> list=new ArrayList<>();
    list.add(mockOsContainer);
    doReturn(list).when(containerService).list(any());
    when(endpoint.getOperation()).thenReturn(OpenstackConstants.GET);
    msg.setHeader(SwiftConstants.LIMIT,10);
    msg.setHeader(SwiftConstants.DELIMITER,'x');
    producer.process(exchange);
    verify(containerService).list(containerListOptionsCaptor.capture());
    Map<String,String> options=containerListOptionsCaptor.getValue().getOptions();
    assertEquals(String.valueOf(10),options.get(SwiftConstants.LIMIT));
    assertEquals("x",options.get(SwiftConstants.DELIMITER));
    assertEquals(list,msg.getBody(List.class));
  }
  @Test public void getAllFromContainerTest() throws Exception {
    List<SwiftContainer> list=new ArrayList<>();
    list.add(mockOsContainer);
    doReturn(list).when(containerService).list();
    when(endpoint.getOperation()).thenReturn(OpenstackConstants.GET_ALL);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    producer.process(exchange);
    assertEquals(mockOsContainer,msg.getBody(List.class).get(0));
  }
  @Test public void deleteObjectTest() throws Exception {
    when(containerService.delete(anyString())).thenReturn(ActionResponse.actionSuccess());
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.DELETE);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    producer.process(exchange);
    verify(containerService).delete(containerNameCaptor.capture());
    assertEquals(CONTAINER_NAME,containerNameCaptor.getValue());
    assertFalse(msg.isFault());
  }
  @Test public void deleteObjectFailTest() throws Exception {
    final String failMessage="fail";
    when(containerService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failMessage,401));
    msg.setHeader(OpenstackConstants.OPERATION,OpenstackConstants.DELETE);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    producer.process(exchange);
    assertTrue(msg.isFault());
    assertTrue(msg.getBody(String.class).contains(failMessage));
  }
  @Test public void createUpdateMetadataTest() throws Exception {
    final Map<String,String> md=new HashMap<>();
    md.put("key","val");
    msg.setHeader(OpenstackConstants.OPERATION,SwiftConstants.CREATE_UPDATE_METADATA);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    msg.setBody(md);
    producer.process(exchange);
    verify(containerService).updateMetadata(nameCaptor.capture(),dataCaptor.capture());
    assertEquals(CONTAINER_NAME,nameCaptor.getValue());
    assertEquals(md,dataCaptor.getValue());
  }
  @Test public void getMetadataTest() throws Exception {
    final Map<String,String> md=new HashMap<>();
    md.put("key","val");
    when(containerService.getMetadata(CONTAINER_NAME)).thenReturn(md);
    msg.setHeader(OpenstackConstants.OPERATION,SwiftConstants.GET_METADATA);
    msg.setHeader(SwiftConstants.CONTAINER_NAME,CONTAINER_NAME);
    producer.process(exchange);
    assertEquals(md,msg.getBody(Map.class));
  }
}
