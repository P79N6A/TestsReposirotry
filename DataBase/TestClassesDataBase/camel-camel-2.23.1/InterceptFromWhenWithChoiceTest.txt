/** 
 * @version 
 */
public class InterceptFromWhenWithChoiceTest extends ContextTestSupport {
  @Test public void testInterceptorHelloWorld() throws Exception {
    getMockEndpoint("mock:goofy").expectedMessageCount(0);
    getMockEndpoint("mock:hello").expectedMessageCount(0);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:end").expectedMessageCount(1);
    sendBody("direct:start","Hello World!");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptorHelloGoofy() throws Exception {
    getMockEndpoint("mock:goofy").expectedMessageCount(0);
    getMockEndpoint("mock:hello").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    getMockEndpoint("mock:end").expectedMessageCount(0);
    sendBody("direct:start","Hello Goofy");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptorByeGoofy() throws Exception {
    getMockEndpoint("mock:goofy").expectedMessageCount(1);
    getMockEndpoint("mock:hello").expectedMessageCount(0);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    getMockEndpoint("mock:end").expectedMessageCount(0);
    sendBody("direct:start","Bye Goofy");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptFrom().when(simple("${body} contains 'Goofy'")).choice().when(body().contains("Hello")).to("mock:hello").otherwise().to("log:foo").to("mock:goofy").end().stop();
        from("direct:start").to("mock:foo").to("mock:end");
      }
    }
;
  }
}
