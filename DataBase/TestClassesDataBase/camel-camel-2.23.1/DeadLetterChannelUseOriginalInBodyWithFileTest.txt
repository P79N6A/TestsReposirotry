/** 
 * @version 
 */
public class DeadLetterChannelUseOriginalInBodyWithFileTest extends ContextTestSupport {
  @Test public void testOriginalInBodyIsFile() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:dead");
    dead.expectedMessageCount(1);
    dead.message(0).body().isInstanceOf(GenericFile.class);
    dead.message(0).body(String.class).isEqualTo("Hello");
    template.sendBodyAndHeader("file://target/originalexchange","Hello",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/originalexchange");
    super.setUp();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").disableRedelivery().logStackTrace(false).useOriginalMessage());
        from("file://target/originalexchange?initialDelay=0&delay=10&noop=true").transform(body().append(" World")).process(new MyThrowProcessor());
      }
    }
;
  }
public static class MyThrowProcessor implements Processor {
    public MyThrowProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      assertEquals("Hello World",exchange.getIn().getBody(String.class));
      throw new IllegalArgumentException("Forced");
    }
  }
}
