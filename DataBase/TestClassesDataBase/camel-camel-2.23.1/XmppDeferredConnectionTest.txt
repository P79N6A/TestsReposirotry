/** 
 * Test to verify that the XMPP producer and consumer will create deferred / lazy connections to the XMPP server when the server is not available upon route initialization. Also verify that these endpoints will then deliver messages as expected.
 */
public class XmppDeferredConnectionTest extends CamelTestSupport {
  private EmbeddedXmppTestServer embeddedXmppTestServer;
  /** 
 * Ensures that the XMPP server instance is created and 'stopped' before the camel  routes are initialized
 */
  @Override public void doPreSetup() throws Exception {
    embeddedXmppTestServer=new EmbeddedXmppTestServer();
    embeddedXmppTestServer.stopXmppEndpoint();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    embeddedXmppTestServer.bindSSLContextTo(registry);
    return registry;
  }
  @Test public void testXmppChatWithDelayedConnection() throws Exception {
    MockEndpoint consumerEndpoint=context.getEndpoint("mock:out",MockEndpoint.class);
    MockEndpoint simpleEndpoint=context.getEndpoint("mock:simple",MockEndpoint.class);
    consumerEndpoint.setExpectedMessageCount(1);
    consumerEndpoint.expectedBodiesReceived("Hello again!");
    simpleEndpoint.setExpectedMessageCount(1);
    MockEndpoint errorEndpoint=context.getEndpoint("mock:error",MockEndpoint.class);
    errorEndpoint.setExpectedMessageCount(1);
    template.sendBody("direct:start","Hello!");
    consumerEndpoint.assertIsNotSatisfied();
    errorEndpoint.assertIsSatisfied();
    template.sendBody("direct:simple","Hello simple!");
    simpleEndpoint.assertIsSatisfied();
    embeddedXmppTestServer.startXmppEndpoint();
    Thread.sleep(2000);
    template.sendBody("direct:start","Hello again!");
    consumerEndpoint.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        onException(RuntimeException.class).handled(true).to("mock:error");
        from("direct:start").to(getProducerUri());
        from(getConsumerUri()).id("test-consumer").to("mock:out");
        from("direct:simple").to("mock:simple");
      }
    }
;
  }
  protected String getProducerUri(){
    return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_producer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test@conference.apache.camel&user=camel_producer&password=secret&serviceName=apache.camel"+ "&testConnectionOnStartup=false";
  }
  protected String getConsumerUri(){
    return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_consumer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test@conference.apache.camel&user=camel_consumer&password=secret&serviceName=apache.camel"+ "&testConnectionOnStartup=false&connectionPollDelay=1";
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    embeddedXmppTestServer.stop();
  }
}
