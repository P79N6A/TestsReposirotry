/** 
 * Test XQuery DSL with the ability to apply XPath on a header
 */
public class XQueryHeaderNameTest extends CamelTestSupport {
  @Test public void testChoiceWithHeaderNamePremium() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:premium");
    mock.expectedBodiesReceived("<response>OK</response>");
    mock.expectedHeaderReceived("invoiceDetails","<invoice orderType='premium'><person><name>Alan</name></person></invoice>");
    template.sendBodyAndHeader("direct:in","<response>OK</response>","invoiceDetails","<invoice orderType='premium'><person><name>Alan</name></person></invoice>");
    mock.assertIsSatisfied();
  }
  @Test public void testChoiceWithHeaderNameStandard() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:standard");
    mock.expectedBodiesReceived("<response>OK</response>");
    mock.expectedHeaderReceived("invoiceDetails","<invoice orderType='standard'><person><name>Alan</name></person></invoice>");
    template.sendBodyAndHeader("direct:in","<response>OK</response>","invoiceDetails","<invoice orderType='standard'><person><name>Alan</name></person></invoice>");
    mock.assertIsSatisfied();
  }
  @Test public void testChoiceWithHeaderNameUnknown() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:unknown");
    mock.expectedBodiesReceived("<response>OK</response>");
    mock.expectedHeaderReceived("invoiceDetails","<invoice />");
    template.sendBodyAndHeader("direct:in","<response>OK</response>","invoiceDetails","<invoice />");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:in").choice().when().xquery("/invoice/@orderType = 'premium'","invoiceDetails").to("mock:premium").when().xquery("/invoice/@orderType = 'standard'","invoiceDetails").to("mock:standard").otherwise().to("mock:unknown").end();
      }
    }
;
  }
}
