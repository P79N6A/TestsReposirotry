/** 
 */
public class FromTextToBytesMessageTest extends CamelTestSupport {
  @Test public void testTextToBytes() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedMessageCount(1);
    template.sendBody("activemq:queue:foo","3");
    assertMockEndpointsSatisfied();
    javax.jms.Message msg=mock.getReceivedExchanges().get(0).getIn(JmsMessage.class).getJmsMessage();
    assertNotNull(msg);
    assertIsInstanceOf(javax.jms.BytesMessage.class,msg);
  }
  @Test public void testTextToBytesHeader() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedMessageCount(1);
    template.sendBody("activemq:queue:header","3");
    assertMockEndpointsSatisfied();
    javax.jms.Message msg=mock.getReceivedExchanges().get(0).getIn(JmsMessage.class).getJmsMessage();
    assertNotNull(msg);
    assertIsInstanceOf(javax.jms.BytesMessage.class,msg);
  }
  @Test public void testTextToText() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:bar");
    mock.expectedMessageCount(1);
    template.sendBody("activemq:queue:text","Hello");
    assertMockEndpointsSatisfied();
    javax.jms.Message msg=mock.getReceivedExchanges().get(0).getIn(JmsMessage.class).getJmsMessage();
    assertNotNull(msg);
    assertIsInstanceOf(javax.jms.TextMessage.class,msg);
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo?jmsMessageType=Text").to("activemq:queue:bar?jmsMessageType=Bytes");
        from("activemq:queue:header?jmsMessageType=Text").setHeader("myHeader",constant("123")).to("activemq:queue:bar?jmsMessageType=Bytes");
        from("activemq:queue:text?jmsMessageType=Text").to("activemq:queue:bar?jmsMessageType=Text");
        from("activemq:queue:bar").to("mock:bar");
      }
    }
;
  }
}
