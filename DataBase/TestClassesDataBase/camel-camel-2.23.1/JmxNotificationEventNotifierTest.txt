/** 
 * @version 
 */
public class JmxNotificationEventNotifierTest extends ContextTestSupport {
  private JmxNotificationEventNotifier notifier;
  @Override protected boolean useJmx(){
    return true;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    notifier=new JmxNotificationEventNotifier();
    notifier.setSource("MyCamel");
    notifier.setIgnoreCamelContextEvents(true);
    notifier.setIgnoreRouteEvents(true);
    notifier.setIgnoreServiceEvents(true);
    CamelContext context=new DefaultCamelContext(createRegistry());
    context.getManagementStrategy().addEventNotifier(notifier);
    return context;
  }
  @Test public void testExchangeDone() throws Exception {
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=eventnotifiers,name=JmxEventNotifier");
    MyNotificationListener listener=new MyNotificationListener();
    context.getManagementStrategy().getManagementAgent().getMBeanServer().addNotificationListener(on,listener,new NotificationFilter(){
      private static final long serialVersionUID=1L;
      public boolean isNotificationEnabled(      Notification notification){
        return notification.getSource().equals("MyCamel");
      }
    }
,null);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals("Get a wrong number of events",8,listener.getEventCounter());
    context.stop();
  }
  @Test public void testExchangeFailed() throws Exception {
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=eventnotifiers,name=JmxEventNotifier");
    MyNotificationListener listener=new MyNotificationListener();
    context.getManagementStrategy().getManagementAgent().getMBeanServer().addNotificationListener(on,listener,new NotificationFilter(){
      private static final long serialVersionUID=1L;
      public boolean isNotificationEnabled(      Notification notification){
        return true;
      }
    }
,null);
    try {
      template.sendBody("direct:fail","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
    }
    assertEquals("Get a wrong number of events",4,listener.getEventCounter());
    context.stop();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
        from("direct:fail").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
private class MyNotificationListener implements NotificationListener {
    private int eventCounter;
    public void handleNotification(    Notification notification,    Object handback){
      log.debug("Get the notification : " + notification);
      eventCounter++;
    }
    public int getEventCounter(){
      return eventCounter;
    }
  }
}
