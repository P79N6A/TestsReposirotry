public class FhirDataformatDefaultConfigSpringTest extends CamelSpringTestSupport {
  @Override @Before public void setUp() throws Exception {
    super.setUp();
  }
  @Test public void defaultFhirJsonConfigTest(){
    FhirDataFormat fhirJson=getDataformat("fhirJson");
    assertDefaultConfig(fhirJson);
  }
  @Test public void defaultFhirXmlConfigTest(){
    FhirDataFormat fhirXml=getDataformat("fhirXml");
    assertDefaultConfig(fhirXml);
  }
  private void assertDefaultConfig(  FhirDataFormat fhirJson){
    assertEquals(FhirVersionEnum.DSTU3,fhirJson.getFhirContext().getVersion().getVersion());
    assertNull(fhirJson.getDontEncodeElements());
    assertNull(fhirJson.getDontStripVersionsFromReferencesAtPaths());
    assertNull(fhirJson.getEncodeElements());
    assertNull(fhirJson.getEncodeElementsAppliesToResourceTypes());
    assertNull(fhirJson.getForceResourceId());
    assertNull(fhirJson.getParserErrorHandler());
    assertNull(fhirJson.getParserOptions());
    assertNull(fhirJson.getPreferTypes());
    assertNull(fhirJson.getServerBaseUrl());
    assertNull(fhirJson.getOverrideResourceIdWithBundleEntryFullUrl());
    assertNull(fhirJson.getStripVersionsFromReferences());
    assertFalse(fhirJson.isPrettyPrint());
    assertFalse(fhirJson.isEncodeElementsAppliesToChildResourcesOnly());
    assertFalse(fhirJson.isOmitResourceId());
    assertFalse(fhirJson.isSummaryMode());
    assertFalse(fhirJson.isSuppressNarratives());
  }
  private FhirDataFormat getDataformat(  String name){
    CamelContext camelContext=context();
    return (FhirDataFormat)((FhirDataformat)camelContext.getDataFormats().get(name)).getDataFormat();
  }
  @Override protected AbstractApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/fhir/FhirDataFormatDefaultConfigSpringTest.xml");
  }
}
