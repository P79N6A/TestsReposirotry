public class DefaultErrorHandlerExchangeFormatterRefTest extends ContextTestSupport {
  private static int invoked;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myExchangeFormatter",new MyExchangeFormatter());
    return jndi;
  }
  @Test public void testRetryUntil() throws Exception {
    try {
      template.requestBody("direct:start","Hello World");
      fail("Expected the exception");
    }
 catch (    Exception ex) {
    }
    assertEquals(1,invoked);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().exchangeFormatterRef("myExchangeFormatter"));
        from("direct:start").process(new MyProcessor());
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      throw new MyFunctionalException("Sorry you cannot do this");
    }
  }
public static class MyExchangeFormatter implements ExchangeFormatter {
    @Override public String format(    Exchange exchange){
      invoked++;
      return "Exchange";
    }
  }
}
