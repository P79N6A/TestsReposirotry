private static final class MyCorrelationManager implements NettyCamelStateCorrelationManager {
  private volatile NettyCamelState stateA;
  private volatile NettyCamelState stateB;
  private volatile NettyCamelState stateC;
  private volatile Channel channel;
  @Override public void putState(  Channel channel,  NettyCamelState state){
    if (this.channel != null && this.channel != channel) {
      throw new IllegalStateException("Should use same channel as producer pool is disabled");
    }
    this.channel=channel;
    String body=state.getExchange().getMessage().getBody(String.class);
    if ("A".equals(body)) {
      stateA=state;
    }
 else     if ("B".equals(body)) {
      stateB=state;
    }
 else     if ("C".equals(body)) {
      stateC=state;
    }
  }
  @Override public void removeState(  ChannelHandlerContext ctx,  Channel channel){
  }
  @Override public NettyCamelState getState(  ChannelHandlerContext ctx,  Channel channel,  Object msg){
    String body=msg.toString();
    if (body.endsWith("A")) {
      stateA.getExchange().getMessage().setHeader("manager",this);
      return stateA;
    }
 else     if (body.endsWith("B")) {
      stateB.getExchange().getMessage().setHeader("manager",this);
      return stateB;
    }
 else     if (body.endsWith("C")) {
      stateC.getExchange().getMessage().setHeader("manager",this);
      return stateC;
    }
    return null;
  }
  @Override public NettyCamelState getState(  ChannelHandlerContext ctx,  Channel channel,  Throwable cause){
    return null;
  }
}
