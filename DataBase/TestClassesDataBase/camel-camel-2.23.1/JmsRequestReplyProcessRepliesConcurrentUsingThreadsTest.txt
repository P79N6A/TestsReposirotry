/** 
 * @version 
 */
public class JmsRequestReplyProcessRepliesConcurrentUsingThreadsTest extends CamelTestSupport {
  protected String componentName="activemq";
  @Test public void testRequestReplyWithConcurrent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("Bye A","Bye B","Bye C","Bye D","Bye E");
    log.info("Sending messages ...");
    template.sendBody("seda:start","A");
    template.sendBody("seda:start","B");
    template.sendBody("seda:start","C");
    template.sendBody("seda:start","D");
    template.sendBody("seda:start","E");
    log.info("... done sending messages");
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").log("request - ${body}").transform(body().prepend("Bye "));
        from("seda:start").setExchangePattern(ExchangePattern.InOut).to("activemq:queue:foo").log("reply   - ${body}").threads(5).log("delay   - ${body}").delay(2000).log("done    - ${body}").to("mock:result");
      }
    }
;
  }
}
