public final class TestUtil {
  public static final SourceExtractor<Object> NOOP_SOURCE_EXTRACTOR=new SourceExtractor<Object>(){
    public Object extractData(    Source source) throws IOException, TransformerException {
      return null;
    }
  }
;
  private TestUtil(){
  }
  /** 
 * Compare the to string ignoring new lines symbol. Handy if you need to compare some text coming from 2 different OS.
 */
  public static void assertEqualsIgnoreNewLinesSymbol(  String expected,  String actual){
    Assert.assertEquals(StringUtils.deleteAny(expected,"\n\r"),StringUtils.deleteAny(actual,"\n\r"));
  }
  /** 
 * Retrieve a WS-Addressing properties from the soapMessage
 * @param messageContext
 * @return
 */
  public static MessageAddressingProperties getWSAProperties(  SoapMessage soapMessage){
    AddressingVersion[] versions=new AddressingVersion[]{new Addressing200408(),new Addressing10()};
    for (    AddressingVersion version : versions) {
      if (supports(version,soapMessage)) {
        MessageAddressingProperties requestMap=version.getMessageAddressingProperties(soapMessage);
        return requestMap;
      }
    }
    return null;
  }
  private static boolean supports(  AddressingVersion version,  SoapMessage request){
    SoapHeader header=request.getSoapHeader();
    if (header != null) {
      for (Iterator<SoapHeaderElement> iterator=header.examineAllHeaderElements(); iterator.hasNext(); ) {
        SoapHeaderElement headerElement=iterator.next();
        if (version.understands(headerElement)) {
          return true;
        }
      }
    }
    return false;
  }
}
