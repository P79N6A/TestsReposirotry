/** 
 * @version 
 */
public class ChoiceCompoundPredicateTest extends ContextTestSupport {
  @Test public void testGuest() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:guest");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUser() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:user");
    mock.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","username","goofy");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAdmin() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:admin");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("username","donald");
    headers.put("admin","true");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Test public void testGod() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:god");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("username","pluto");
    headers.put("admin","true");
    headers.put("type","god");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Test public void testRiderGod() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:god");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("username","Camel");
    headers.put("admin","true");
    template.sendBodyAndHeaders("direct:start","Hello Camel Rider",headers);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        Predicate user=header("username").isNotNull();
        Predicate admin=and(user,header("admin").isEqualTo("true"));
        Predicate god=and(admin,or(body().contains("Camel Rider"),header("type").isEqualTo("god")));
        from("direct:start").choice().when(god).to("mock:god").when(admin).to("mock:admin").when(user).to("mock:user").otherwise().to("mock:guest").end();
      }
    }
;
  }
}
