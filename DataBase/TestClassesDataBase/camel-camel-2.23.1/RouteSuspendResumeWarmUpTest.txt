/** 
 * @version 
 */
public class RouteSuspendResumeWarmUpTest extends ContextTestSupport {
  private MyService service=new MyService();
  @Test public void testRouteSuspendResumeWarmUpTest() throws Exception {
    assertEquals("start",service.getState());
    context.suspendRoute("foo");
    assertEquals("start",service.getState());
    context.resumeRoute("foo");
    assertEquals("start",service.getState());
    context.stop();
    assertEquals("stop",service.getState());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").process(service).to("mock:result");
      }
    }
;
  }
private static class MyService extends ServiceSupport implements Processor {
    private volatile String state;
    public void process(    Exchange exchange) throws Exception {
    }
    protected void doStart() throws Exception {
      state="start";
    }
    protected void doStop() throws Exception {
      state="stop";
    }
    public String getState(){
      return state;
    }
  }
}
