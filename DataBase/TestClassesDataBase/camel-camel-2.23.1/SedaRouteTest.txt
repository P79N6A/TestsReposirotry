/** 
 * @version 
 */
public class SedaRouteTest extends TestSupport {
  @Override @Before public void setUp() throws Exception {
    System.setProperty("CamelSedaPollTimeout","10");
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    System.clearProperty("CamelSedaPollTimeout");
    super.tearDown();
  }
  @Test public void testSedaQueue() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("seda:test.a").to("seda:test.b");
        from("seda:test.b").process(new Processor(){
          public void process(          Exchange e){
            log.debug("Received exchange: " + e.getIn());
            latch.countDown();
          }
        }
);
      }
    }
);
    context.start();
    Endpoint endpoint=context.getEndpoint("seda:test.a");
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setHeader("cheese",123);
    Producer producer=endpoint.createProducer();
    producer.process(exchange);
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    context.stop();
  }
  @Test public void testThatShowsEndpointResolutionIsNotConsistent() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("seda:test.a").to("seda:test.b");
        from("seda:test.b").process(new Processor(){
          public void process(          Exchange e){
            log.debug("Received exchange: " + e.getIn());
            latch.countDown();
          }
        }
);
      }
    }
);
    context.start();
    Endpoint endpoint=context.getEndpoint("seda:test.a");
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setHeader("cheese",123);
    Producer producer=endpoint.createProducer();
    producer.process(exchange);
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    context.stop();
  }
}
