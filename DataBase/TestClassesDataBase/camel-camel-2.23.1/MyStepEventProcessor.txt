private class MyStepEventProcessor extends DelegateAsyncProcessor {
  private final StepEventListener listener;
  private final String id;
  public MyStepEventProcessor(  String id,  Processor processor,  StepEventListener listener){
    super(processor);
    this.id=id;
    this.listener=listener;
  }
  @Override public boolean process(  final Exchange exchange,  final AsyncCallback callback){
    final StopWatch watch=new StopWatch();
    if (listener != null) {
      listener.beforeStep(new BeforeStepEvent(exchange,id));
    }
    return super.process(exchange,doneSync -> {
      if (listener != null) {
        listener.afterStep(new AfterStepEvent(exchange,id,watch.taken()));
      }
      callback.done(doneSync);
    }
);
  }
}
