public class MicrometerRoutePolicySubRouteTest extends AbstractMicrometerRoutePolicyTest {
  @Test public void testMetricsRoutePolicy() throws Exception {
    int count=10;
    getMockEndpoint("mock:foo").expectedMessageCount(count);
    getMockEndpoint("mock:bar").expectedMessageCount(count);
    for (int i=0; i < count; i++) {
      template.sendBody("direct:foo","Hello World");
    }
    assertMockEndpointsSatisfied();
    List<Meter> meters=meterRegistry.getMeters();
    assertEquals(2,meters.size());
    meters.forEach(meter -> assertTrue(meter instanceof Timer));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:foo").routeId("foo").to("direct:bar").to("mock:foo");
        from("direct:bar").routeId("bar").to("mock:bar");
      }
    }
;
  }
}
