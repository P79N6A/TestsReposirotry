/** 
 * Testing the Hystrix multi configuration
 */
@RunWith(SpringRunner.class) @SpringBootApplication @DirtiesContext @ContextConfiguration(classes=HystrixMultiConfiguration.class) @SpringBootTest(properties={"debug=false","camel.hystrix.enabled=true","camel.hystrix.group-key=global-group","camel.hystrix.configurations.conf-1.group-key=conf-1-group","camel.hystrix.configurations.conf-2.group-key=conf-2-group"}) public class HystrixMultiConfigurationTest {
  @Autowired private ApplicationContext context;
  @Autowired private CamelContext camelContext;
  @Test public void testBeans() throws Exception {
    Map<String,HystrixConfigurationDefinition> beans=context.getBeansOfType(HystrixConfigurationDefinition.class);
    Assert.assertEquals(4,beans.size());
    Assert.assertEquals("global-group",beans.get(HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID).getGroupKey());
    Assert.assertEquals("bean-group",beans.get("bean-conf").getGroupKey());
    Assert.assertEquals("conf-1-group",beans.get("conf-1").getGroupKey());
    Assert.assertEquals("conf-2-group",beans.get("conf-2").getGroupKey());
  }
  @Test public void testConfigurations() throws Exception {
    HystrixProcessor processor1=findHystrixProcessor(camelContext.getRoute("hystrix-route-1").navigate());
    HystrixProcessor processor2=findHystrixProcessor(camelContext.getRoute("hystrix-route-2").navigate());
    Assert.assertEquals("conf-1-group",processor1.getHystrixGroupKey());
    Assert.assertEquals("conf-2-group",processor2.getHystrixGroupKey());
  }
  private HystrixProcessor findHystrixProcessor(  Navigate<Processor> navigate) throws Exception {
    for (    Processor processor : navigate.next()) {
      if (processor instanceof HystrixProcessor) {
        return (HystrixProcessor)processor;
      }
      if (processor instanceof Navigate) {
        return findHystrixProcessor((Navigate<Processor>)processor);
      }
    }
    throw new IllegalStateException("Unable to find an HystrixProcessor instance");
  }
}
