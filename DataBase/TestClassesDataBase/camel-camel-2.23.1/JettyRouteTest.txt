/** 
 * Unit test for wiki demonstration.
 */
public class JettyRouteTest extends BaseJettyTest {
  @Test public void testSendToJetty() throws Exception {
    Object response=template.requestBody("http://localhost:{{port}}/myapp/myservice","bookid=123");
    String body=context.getTypeConverter().convertTo(String.class,response);
    assertEquals("<html><body>Book 123 is Camel in Action</body></html>",body);
  }
  @Test public void testHttpProxyHostHeader() throws Exception {
    String out=template.requestBody("http://localhost:{{port}}/proxyServer",null,String.class);
    assertEquals("Get a wrong host header","localhost:" + getPort2(),out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("jetty:http://localhost:{{port}}/myapp/myservice").process(new MyBookService());
        from("jetty://http://localhost:{{port}}/proxyServer").to("http://localhost:{{port2}}/host?bridgeEndpoint=true");
        from("jetty://http://localhost:{{port2}}/host").transform(header("host"));
      }
    }
;
  }
public class MyBookService implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      HttpServletRequest req=exchange.getIn().getBody(HttpServletRequest.class);
      assertNotNull(req);
      assertEquals("bookid=123",body);
      exchange.getOut().setBody("<html><body>Book 123 is Camel in Action</body></html>");
    }
  }
}
