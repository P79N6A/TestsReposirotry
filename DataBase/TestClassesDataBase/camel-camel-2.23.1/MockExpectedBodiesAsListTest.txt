/** 
 * @version 
 */
public class MockExpectedBodiesAsListTest extends ContextTestSupport {
  @Test public void testUsingVarargs() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Hello World","Bye World");
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUsingListString() throws Exception {
    List<String> data=new ArrayList<>();
    data.add("Hello World");
    data.add("Bye World");
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(data);
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testUsingList() throws Exception {
    List<Object> data=new ArrayList<>();
    data.add("Hello World");
    data.add(123);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived(data);
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start",123);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
      }
    }
;
  }
}
