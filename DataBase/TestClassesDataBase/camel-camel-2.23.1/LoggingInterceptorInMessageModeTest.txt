/** 
 * @version 
 */
@ContextConfiguration public class LoggingInterceptorInMessageModeTest extends AbstractJUnit4SpringContextTests {
  protected static int port1=CXFTestSupport.getPort1();
  protected static int port2=CXFTestSupport.getPort2();
  protected static final String ROUTER_ADDRESS="http://localhost:" + port1 + "/LoggingInterceptorInMessageModeTest/router";
  protected static final String SERVICE_ADDRESS="http://localhost:" + port2 + "/LoggingInterceptorInMessageModeTest/helloworld";
  static Server server;
  @Autowired protected CamelContext context;
  @BeforeClass public static void startService(){
    ServerFactoryBean svrBean=new ServerFactoryBean();
    svrBean.setAddress(SERVICE_ADDRESS);
    svrBean.setServiceClass(HelloService.class);
    svrBean.setServiceBean(new HelloServiceImpl());
    server=svrBean.create();
  }
  @AfterClass public static void stopService(){
    server.stop();
    server.destroy();
  }
  @Test public void testInvokingServiceFromCXFClient() throws Exception {
    LoggingOutInterceptor logInterceptor=null;
    for (    Interceptor<?> interceptor : context.getEndpoint("cxf:bean:serviceEndpoint",CxfSpringEndpoint.class).getOutInterceptors()) {
      if (interceptor instanceof LoggingOutInterceptor) {
        logInterceptor=LoggingOutInterceptor.class.cast(interceptor);
        break;
      }
    }
    assertNotNull(logInterceptor);
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(ROUTER_ADDRESS);
    clientBean.setServiceClass(HelloService.class);
    HelloService client=(HelloService)proxyFactory.create();
    String result=client.echo("hello world");
    assertEquals("we should get the right answer from router",result,"echo hello world");
  }
@SuppressWarnings("unused") private static final class StringPrintWriter extends PrintWriter {
    private StringPrintWriter(){
      super(new StringWriter());
    }
    private StringPrintWriter(    int initialSize){
      super(new StringWriter(initialSize));
    }
    private String getString(){
      flush();
      return ((StringWriter)out).toString();
    }
  }
}
