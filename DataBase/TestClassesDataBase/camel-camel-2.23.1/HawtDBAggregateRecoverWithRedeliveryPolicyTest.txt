public class HawtDBAggregateRecoverWithRedeliveryPolicyTest extends CamelTestSupport {
  private static AtomicInteger counter=new AtomicInteger(0);
  private HawtDBAggregationRepository repo;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/data");
    repo=new HawtDBAggregationRepository("repo1","target/data/hawtdb.dat");
    repo.setUseRecovery(true);
    repo.setRecoveryInterval(500,TimeUnit.MILLISECONDS);
    super.setUp();
  }
  @Test public void testHawtDBAggregateRecover() throws Exception {
    getMockEndpoint("mock:aggregated").setResultWaitTime(20000);
    getMockEndpoint("mock:result").setResultWaitTime(20000);
    getMockEndpoint("mock:aggregated").expectedMessageCount(4);
    getMockEndpoint("mock:result").expectedBodiesReceived("ABCDE");
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
    getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull();
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            int count=counter.incrementAndGet();
            if (count <= 3) {
              throw new IllegalArgumentException("Damn");
            }
          }
        }
).to("mock:result").end();
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
