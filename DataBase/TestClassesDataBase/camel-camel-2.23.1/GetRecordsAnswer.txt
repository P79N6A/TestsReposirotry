private class GetRecordsAnswer implements Answer<GetRecordsResult> {
  private final Map<String,String> shardIterators;
  private final Map<String,Collection<Record>> answers;
  private final Pattern shardIteratorPattern=Pattern.compile("shard_iterator_d_0*(\\d+)");
  GetRecordsAnswer(  Map<String,String> shardIterators,  Map<String,Collection<Record>> answers){
    this.shardIterators=shardIterators;
    this.answers=answers;
  }
  @Override public GetRecordsResult answer(  InvocationOnMock invocation) throws Throwable {
    final String shardIterator=((GetRecordsRequest)invocation.getArguments()[0]).getShardIterator();
    String nextShardIterator=shardIterators.get(shardIterator);
    Matcher m=shardIteratorPattern.matcher(shardIterator);
    Collection<Record> ans=answers.get(shardIterator);
    if (nextShardIterator == null && m.matches()) {
      Integer num=Integer.parseInt(m.group(1));
      nextShardIterator="shard_iterator_d_" + pad(Integer.toString(num + 1),3);
    }
    if (null == ans) {
      ans=createRecords();
    }
    return new GetRecordsResult().withRecords(ans).withNextShardIterator(nextShardIterator);
  }
}
