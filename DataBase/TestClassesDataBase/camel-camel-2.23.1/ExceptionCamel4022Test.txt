/** 
 * @version 
 */
public class ExceptionCamel4022Test extends ContextTestSupport {
  @Test public void testExceptionWithFatalException() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:intermediate").expectedMessageCount(0);
    getMockEndpoint("mock:onexception").expectedMessageCount(0);
    getMockEndpoint("mock:dlc").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","<body/>");
      fail("Should throw an exception");
    }
 catch (    Exception e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Damn Again",cause.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
public static class MyExceptionThrower implements Processor {
    private String msg;
    public MyExceptionThrower(    String msg){
      this.msg=msg;
    }
    @Override public void process(    Exchange exchange) throws Exception {
      throw new IllegalArgumentException(msg);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:dlc").redeliveryDelay(0).maximumRedeliveries(3));
        onException(Exception.class).logStackTrace(false).process(new MyExceptionThrower("Damn Again")).to("mock:onexception");
        from("direct:start").to("mock:a").to("direct:intermediate").to("mock:result2");
        from("direct:intermediate").to("mock:b").setBody(constant("<some-value/>")).process(new MyExceptionThrower("Damn")).to("mock:intermediate");
      }
    }
;
  }
}
