public class RibbonServiceCallUpdateRouteTest extends CamelTestSupport {
  private final StaticServiceDiscovery servers=new StaticServiceDiscovery();
  @Override @Before public void setUp() throws Exception {
    servers.addServer("myService@localhost:9090");
    servers.addServer("myService@localhost:9091");
    super.setUp();
  }
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:9090").expectedMessageCount(1);
    getMockEndpoint("mock:9091").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(2);
    String out=template.requestBody("direct:start",null,String.class);
    String out2=template.requestBody("direct:start",null,String.class);
    assertEquals("9091",out);
    assertEquals("9090",out2);
    assertMockEndpointsSatisfied();
    context.stopRoute("9090");
    servers.removeServer(s -> ObjectHelper.equal("localhost",s.getHost()) && 9090 == s.getPort());
    String out3=template.requestBody("direct:start",null,String.class);
    assertEquals("9091",out3);
    log.debug("Sleeping to all the server list updated to run");
    Thread.sleep(1000);
    log.debug("Calling the service now");
    String out4=template.requestBody("direct:start",null,String.class);
    assertEquals("9091",out4);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        RibbonConfiguration configuration=new RibbonConfiguration();
        configuration.addProperty("ServerListRefreshInterval","250");
        RibbonServiceLoadBalancer loadBalancer=new RibbonServiceLoadBalancer(configuration);
        from("direct:start").serviceCall().name("myService").component("jetty").loadBalancer(loadBalancer).serviceDiscovery(servers).end().to("mock:result");
        from("jetty:http://localhost:9090").routeId("9090").to("mock:9090").transform().constant("9090");
        from("jetty:http://localhost:9091").routeId("9091").to("mock:9091").transform().constant("9091");
      }
    }
;
  }
}
