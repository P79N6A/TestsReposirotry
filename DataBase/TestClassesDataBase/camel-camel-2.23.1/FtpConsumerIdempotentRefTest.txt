/** 
 * Unit test for the idempotentRepository # option.
 */
public class FtpConsumerIdempotentRefTest extends FtpServerTestSupport {
  private static boolean invoked;
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/idempotent?password=admin&binary=false&idempotent=true&idempotentRepository=#myRepo&delete=true";
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myRepo",new MyIdempotentRepository());
    return jndi;
  }
  @Test public void testIdempotent() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedMessageCount(1);
    sendFile(getFtpUrl(),"Hello World","report.txt");
    assertMockEndpointsSatisfied();
    Thread.sleep(100);
    mock.reset();
    mock.expectedMessageCount(0);
    sendFile(getFtpUrl(),"Hello World","report.txt");
    Thread.sleep(2000);
    assertMockEndpointsSatisfied();
    assertTrue("MyIdempotentRepository should have been invoked",invoked);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).to("mock:result");
      }
    }
;
  }
public class MyIdempotentRepository implements IdempotentRepository<String> {
    public boolean add(    String messageId){
      boolean result=invoked;
      invoked=true;
      assertEquals("report.txt",messageId);
      return !result;
    }
    public boolean contains(    String key){
      return invoked;
    }
    public boolean remove(    String key){
      return true;
    }
    public boolean confirm(    String key){
      return true;
    }
    public void clear(){
      return;
    }
    public void start() throws Exception {
    }
    public void stop() throws Exception {
    }
  }
}
