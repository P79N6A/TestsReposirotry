/** 
 * @version 
 */
public class SplitWithCustomAggregationStrategyTest extends ContextTestSupport {
  @Test public void testSplitWithCustomAggregatorStrategy() throws Exception {
    int files=10;
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(files);
    mock.expectsNoDuplicates(body());
    for (int i=0; i < files; i++) {
      template.sendBody("direct:start","");
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setBody().simple("<search><key>foo-${id}</key><key>bar-${id}</key><key>baz-${id}</key></search>").to("direct:splitInOut").to("mock:result");
        from("direct:splitInOut").setHeader("com.example.id").simple("${id}").split(xpath("/search/key"),new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            if (oldExchange == null) {
              return newExchange;
            }
            String oldBody=oldExchange.getIn().getBody(String.class);
            String newBody=newExchange.getIn().getBody(String.class);
            oldExchange.getIn().setBody(oldBody + newBody);
            return oldExchange;
          }
        }
).parallelProcessing().streaming().to("direct:processLine").end().transform().simple("<results>${in.body}</results>");
        from("direct:processLine").to("log:line").transform().simple("<index>${in.header.CamelSplitIndex}</index>${in.body}");
      }
    }
;
  }
}
