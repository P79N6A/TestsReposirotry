/** 
 * Integration test to check that RabbitMQ Endpoint is able handle heavy load using multiple producers and consumers
 */
public class RabbitMQLoadIntTest extends AbstractRabbitMQIntTest {
  public static final String ROUTING_KEY="rk4";
  private static final int PRODUCER_COUNT=10;
  private static final int CONSUMER_COUNT=10;
  private static final int MESSAGE_COUNT=100;
  @Produce(uri="direct:rabbitMQ") protected ProducerTemplate directProducer;
  @EndpointInject(uri="rabbitmq:localhost:5672/ex4?username=cameltest&password=cameltest" + "&queue=q4&routingKey=" + ROUTING_KEY + "&threadPoolSize="+ (CONSUMER_COUNT + 5)+ "&concurrentConsumers="+ CONSUMER_COUNT) private Endpoint rabbitMQEndpoint;
  @EndpointInject(uri="mock:producing") private MockEndpoint producingMockEndpoint;
  @EndpointInject(uri="mock:consuming") private MockEndpoint consumingMockEndpoint;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:rabbitMQ").id("producingRoute").log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint);
        from(rabbitMQEndpoint).id("consumingRoute").log("Receiving message").to(consumingMockEndpoint);
      }
    }
;
  }
  @Test public void testSendEndReceive() throws Exception {
    ExecutorService executorService=Executors.newFixedThreadPool(PRODUCER_COUNT);
    List<Future<?>> futures=new ArrayList<>(PRODUCER_COUNT);
    for (int i=0; i < PRODUCER_COUNT; i++) {
      futures.add(executorService.submit(new Runnable(){
        @Override public void run(){
          for (int i=0; i < MESSAGE_COUNT; i++) {
            directProducer.sendBodyAndHeader("Message #" + i,RabbitMQConstants.ROUTING_KEY,ROUTING_KEY);
          }
        }
      }
));
    }
    for (    Future<?> future : futures) {
      future.get(5,TimeUnit.SECONDS);
    }
    producingMockEndpoint.expectedMessageCount(PRODUCER_COUNT * MESSAGE_COUNT);
    consumingMockEndpoint.expectedMessageCount(PRODUCER_COUNT * MESSAGE_COUNT);
    assertMockEndpointsSatisfied(5,TimeUnit.SECONDS);
  }
}
