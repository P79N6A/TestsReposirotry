public class CamelComponentVerifierExtensionTest extends BaseHttpTest {
  private static final String AUTH_USERNAME="camel";
  private static final String AUTH_PASSWORD="password";
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getHttpProcessor()).registerHandler("/basic",new BasicValidationHandler("GET",null,null,getExpectedContent())).registerHandler("/auth",new AuthenticationValidationHandler("GET",null,null,getExpectedContent(),AUTH_USERNAME,AUTH_PASSWORD)).registerHandler("/redirect",redirectTo(HttpStatus.SC_MOVED_PERMANENTLY,"/redirected")).registerHandler("/redirected",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  private HttpProcessor getHttpProcessor(){
    return new ImmutableHttpProcessor(Arrays.asList(new RequestBasicAuth()),Arrays.asList(new ResponseContent(),new ResponseBasicUnauthorized()));
  }
  protected String getLocalServerUri(  String contextPath){
    return new StringBuilder().append("http://").append(localServer.getInetAddress().getHostName()).append(":").append(localServer.getLocalPort()).append(contextPath != null ? contextPath.startsWith("/") ? contextPath : "/" + contextPath : "").toString();
  }
  private HttpRequestHandler redirectTo(  int code,  String path){
    return new HttpRequestHandler(){
      @Override public void handle(      HttpRequest request,      HttpResponse response,      HttpContext context) throws HttpException, IOException {
        response.setHeader("location",getLocalServerUri(path));
        response.setStatusCode(code);
      }
    }
;
  }
  @Test public void testParameters() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/basic"));
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testMissingMandatoryParameters() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER,error.getCode());
    Assert.assertTrue(error.getParameterKeys().contains("httpUri"));
  }
  @Test public void testConnectivity() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/basic"));
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testConnectivityWithWrongUri() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri","http://www.not-existing-uri.unknown");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION,error.getCode());
    Assert.assertTrue(error.getParameterKeys().contains("httpUri"));
  }
  @Test public void testConnectivityWithAuthentication() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/auth"));
    parameters.put("authUsername",AUTH_USERNAME);
    parameters.put("authPassword",AUTH_PASSWORD);
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testConnectivityWithWrongAuthenticationData() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/auth"));
    parameters.put("authUsername","unknown");
    parameters.put("authPassword",AUTH_PASSWORD);
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.AUTHENTICATION,error.getCode());
    Assert.assertEquals(401,error.getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE));
    Assert.assertTrue(error.getParameterKeys().contains("authUsername"));
    Assert.assertTrue(error.getParameterKeys().contains("authPassword"));
  }
  @Test public void testConnectivityWithRedirect() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/redirect"));
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testConnectivityWithRedirectDisabled() throws Exception {
    Component component=context().getComponent("http4");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/redirect"));
    parameters.put("httpClient.redirectsEnabled","false");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.GENERIC,error.getCode());
    Assert.assertEquals(getLocalServerUri("/redirected"),error.getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_REDIRECT));
    Assert.assertTrue(error.getParameterKeys().contains("httpUri"));
  }
}
