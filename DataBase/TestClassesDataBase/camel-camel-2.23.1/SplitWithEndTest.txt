/** 
 * @version 
 */
public class SplitWithEndTest extends ContextTestSupport {
  @Test public void testRouteIsCorrectAtRuntime() throws Exception {
    Navigate<Processor> nav=context.getRoutes().get(0).navigate();
    List<Processor> node=nav.next();
    assertEquals(4,node.size());
    assertIsInstanceOf(SendProcessor.class,unwrapChannel(node.get(0)).getNextProcessor());
    assertIsInstanceOf(Splitter.class,unwrapChannel(node.get(1)).getNextProcessor());
    assertIsInstanceOf(TransformProcessor.class,unwrapChannel(node.get(2)).getNextProcessor());
    assertIsInstanceOf(SendProcessor.class,unwrapChannel(node.get(3)).getNextProcessor());
  }
  @Test public void testSplit() throws Exception {
    getMockEndpoint("mock:start").expectedBodiesReceived("Hello,World,Moon");
    getMockEndpoint("mock:last").expectedBodiesReceived("last hi Hello@hi World@hi Moon");
    template.sendBody("direct:start","Hello,World,Moon");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        MySplitBean bean=new MySplitBean();
        from("direct:start").to("mock:start").split(body().tokenize(","),new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            if (oldExchange == null) {
              return newExchange;
            }
            String body=oldExchange.getIn().getBody(String.class);
            String newBody=newExchange.getIn().getBody(String.class);
            newExchange.getIn().setBody(body + "@" + newBody);
            return newExchange;
          }
        }
).bean(bean,"hi").to("mock:split").to("log:foo").end().transform(body().prepend("last ")).to("mock:last");
      }
    }
;
  }
public class MySplitBean {
    public String hi(    String s){
      return "hi " + s;
    }
  }
}
