final class CamelCdiDeployment implements TestRule {
  private final CamelCdiContext context;
  private final Weld weld;
  CamelCdiDeployment(  TestClass test,  CamelCdiContext context){
    this.context=context;
    weld=new Weld().containerId("camel-context-cdi").property(ConfigurationKey.RELAXED_CONSTRUCTION.get(),true).property(Weld.SHUTDOWN_HOOK_SYSTEM_PROPERTY,false).enableDiscovery().beanClasses(test.getJavaClass().getDeclaredClasses()).addBeanClass(test.getJavaClass()).addExtension(new CdiCamelExtension());
    if (test.getJavaClass().isAnnotationPresent(Beans.class)) {
      Beans beans=test.getJavaClass().getAnnotation(Beans.class);
      weld.addExtension(new CamelCdiTestExtension(beans));
      for (      Class<?> alternative : beans.alternatives()) {
        weld.addBeanClass(alternative).addAlternative(alternative);
      }
      for (      Class<?> clazz : beans.classes()) {
        weld.addBeanClass(clazz);
      }
      weld.addPackages(false,beans.packages());
    }
  }
  @Override public Statement apply(  final Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        WeldContainer container=weld.initialize();
        context.setBeanManager(container.getBeanManager());
        try {
          base.evaluate();
        }
  finally {
          container.shutdown();
          context.unsetBeanManager();
        }
      }
    }
;
  }
}
