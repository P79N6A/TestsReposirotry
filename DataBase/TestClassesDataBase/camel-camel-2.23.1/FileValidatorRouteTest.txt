public class FileValidatorRouteTest extends CamelTestSupport {
  protected MockEndpoint validEndpoint;
  protected MockEndpoint finallyEndpoint;
  protected MockEndpoint invalidEndpoint;
  @Test public void testValidMessage() throws Exception {
    validEndpoint.expectedMessageCount(1);
    invalidEndpoint.expectedMessageCount(0);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/validator","{ \"name\": \"Joe Doe\", \"id\": 1, \"price\": 12.5 }",Exchange.FILE_NAME,"valid.json");
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
    assertTrue("Should be able to delete the file",FileUtil.deleteFile(new File("target/validator/valid.json")));
  }
  @Test public void testInvalidMessage() throws Exception {
    validEndpoint.expectedMessageCount(0);
    invalidEndpoint.expectedMessageCount(1);
    finallyEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/validator","{ \"name\": \"Joe Doe\", \"id\": \"AA1\", \"price\": 12.5 }",Exchange.FILE_NAME,"invalid.json");
    MockEndpoint.assertIsSatisfied(validEndpoint,invalidEndpoint,finallyEndpoint);
    assertTrue("Should be able to delete the file",FileUtil.deleteFile(new File("target/validator/invalid.json")));
  }
  @Before public void setUp() throws Exception {
    deleteDirectory("target/validator");
    super.setUp();
    validEndpoint=resolveMandatoryEndpoint("mock:valid",MockEndpoint.class);
    invalidEndpoint=resolveMandatoryEndpoint("mock:invalid",MockEndpoint.class);
    finallyEndpoint=resolveMandatoryEndpoint("mock:finally",MockEndpoint.class);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/validator?noop=true").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end();
      }
    }
;
  }
}
