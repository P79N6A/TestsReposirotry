/** 
 * @version 
 */
public class DebugExceptionEventBreakpointTest extends ContextTestSupport {
  private List<String> logs=new ArrayList<>();
  private Condition exceptionCondition;
  private Breakpoint breakpoint;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    breakpoint=new BreakpointSupport(){
      public void onEvent(      Exchange exchange,      EventObject event,      ProcessorDefinition<?> definition){
        AbstractExchangeEvent aee=(AbstractExchangeEvent)event;
        Exception e=aee.getExchange().getException();
        logs.add("Breakpoint at " + definition + " caused by: "+ e.getClass().getSimpleName()+ "["+ e.getMessage()+ "]");
      }
    }
;
    exceptionCondition=new ConditionSupport(){
      public boolean matchEvent(      Exchange exchange,      EventObject event){
        return event instanceof ExchangeFailedEvent;
      }
    }
;
  }
  @Test public void testDebug() throws Exception {
    context.getDebugger().addBreakpoint(breakpoint,exceptionCondition);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    try {
      template.sendBody("direct:start","Hello Camel");
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
    assertEquals(1,logs.size());
    assertEquals("Breakpoint at ThrowException[java.lang.IllegalArgumentException] caused by: IllegalArgumentException[Damn]",logs.get(0));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setDebugger(new DefaultDebugger());
        from("direct:start").to("log:foo").choice().when(body().contains("Camel")).throwException(new IllegalArgumentException("Damn")).end().to("mock:result");
      }
    }
;
  }
}
