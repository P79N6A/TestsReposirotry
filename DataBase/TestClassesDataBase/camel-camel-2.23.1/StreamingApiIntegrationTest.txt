public class StreamingApiIntegrationTest extends AbstractSalesforceTestBase {
  @Test public void testSubscribeAndReceive() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:CamelTestTopic");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived("CamelSalesforceTopicName","CamelTestTopic");
    mock.expectedHeaderReceived("CamelSalesforceChannel","/topic/CamelTestTopic");
    MockEndpoint rawPayloadMock=getMockEndpoint("mock:RawPayloadCamelTestTopic");
    rawPayloadMock.expectedMessageCount(1);
    rawPayloadMock.expectedHeaderReceived("CamelSalesforceTopicName","CamelTestTopic");
    rawPayloadMock.expectedHeaderReceived("CamelSalesforceChannel","/topic/CamelTestTopic");
    Merchandise__c merchandise=new Merchandise__c();
    merchandise.setName("TestNotification");
    merchandise.setDescription__c("Merchandise for testing Streaming API updated on " + ZonedDateTime.now().toString());
    merchandise.setPrice__c(9.99);
    merchandise.setTotal_Inventory__c(1000.0);
    CreateSObjectResult result=template().requestBody("direct:upsertSObject",merchandise,CreateSObjectResult.class);
    assertTrue("Merchandise test record not created",result == null || result.getSuccess());
    try {
      mock.assertIsSatisfied();
      final Message in=mock.getExchanges().get(0).getIn();
      merchandise=in.getMandatoryBody(Merchandise__c.class);
      assertNotNull("Missing event body",merchandise);
      log.info("Merchandise notification: {}",merchandise);
      assertNotNull("Missing field Id",merchandise.getId());
      assertNotNull("Missing field Name",merchandise.getName());
      assertNotNull("Missing header CamelSalesforceClientId",in.getHeader("CamelSalesforceClientId"));
      assertNotNull("Missing header CamelSalesforceEventType",in.getHeader("CamelSalesforceEventType"));
      assertNotNull("Missing header CamelSalesforceCreatedDate",in.getHeader("CamelSalesforceCreatedDate"));
      rawPayloadMock.assertIsSatisfied();
      final Message inRaw=rawPayloadMock.getExchanges().get(0).getIn();
      assertTrue("Expected String message body for Raw Payload",inRaw.getBody() instanceof String);
    }
  finally {
      assertNull(template().requestBody("direct:deleteSObjectWithId",merchandise));
      QueryRecordsPushTopic records=template().requestBody("direct:query",null,QueryRecordsPushTopic.class);
      assertEquals("Test topic not found",1,records.getTotalSize());
      assertNull(template().requestBody("direct:deleteSObject",records.getRecords().get(0)));
    }
  }
  @Override protected RouteBuilder doCreateRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("salesforce:CamelTestTopic?notifyForFields=ALL&" + "notifyForOperationCreate=true&notifyForOperationDelete=true&notifyForOperationUpdate=true&" + "sObjectName=Merchandise__c&"+ "updateTopic=true&sObjectQuery=SELECT Id, Name FROM Merchandise__c").to("mock:CamelTestTopic");
        from("salesforce:CamelTestTopic?rawPayload=true&notifyForFields=ALL&" + "notifyForOperationCreate=true&notifyForOperationDelete=true&notifyForOperationUpdate=true&" + "updateTopic=true&sObjectQuery=SELECT Id, Name FROM Merchandise__c").to("mock:RawPayloadCamelTestTopic");
        from("direct:upsertSObject").to("salesforce:upsertSObject?SObjectIdName=Name");
        from("direct:query").to("salesforce:query?sObjectQuery=SELECT Id FROM PushTopic WHERE Name = 'CamelTestTopic'&" + "sObjectClass=" + QueryRecordsPushTopic.class.getName());
        from("direct:deleteSObjectWithId").to("salesforce:deleteSObjectWithId?sObjectIdName=Name");
        from("direct:deleteSObject").to("salesforce:deleteSObject");
      }
    }
;
  }
}
