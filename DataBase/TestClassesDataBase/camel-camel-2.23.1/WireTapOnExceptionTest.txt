/** 
 */
public class WireTapOnExceptionTest extends ContextTestSupport {
  @Test public void testWireTapOnException() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        MyProducerFailEndpoint my=new MyProducerFailEndpoint("myEndpoint://foo",getContext());
        context.addEndpoint("myEndpoint://foo",my);
        onException(IllegalArgumentException.class).to("mock:error");
        from("direct:start").wireTap("myEndpoint:foo").to("mock:result");
      }
    }
;
  }
public static final class MyProducerFailEndpoint extends DefaultEndpoint {
    private MyProducerFailEndpoint(    String endpointUri,    CamelContext camelContext){
      super(endpointUri,(Component)null);
      setCamelContext(camelContext);
    }
    @Override public Producer createProducer() throws Exception {
      return new DefaultProducer(this){
        @Override public void process(        Exchange exchange) throws Exception {
          throw new IllegalArgumentException("Forced");
        }
      }
;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    @Override public boolean isSingleton(){
      return true;
    }
  }
}
