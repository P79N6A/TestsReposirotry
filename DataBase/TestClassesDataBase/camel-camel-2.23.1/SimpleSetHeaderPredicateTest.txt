public class SimpleSetHeaderPredicateTest extends ContextTestSupport {
  @Test public void testSetHeaderPredicateFalse() throws Exception {
    getMockEndpoint("mock:result").expectedHeaderReceived("bar",false);
    template.sendBodyAndHeader("direct:start","Hello World","foo","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSetHeaderPredicateTrue() throws Exception {
    getMockEndpoint("mock:result").expectedHeaderReceived("bar",true);
    template.sendBodyAndHeader("direct:start","Hello World","foo","Camel");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOther() throws Exception {
    getMockEndpoint("mock:other").expectedHeaderReceived("param1","hello");
    getMockEndpoint("mock:other").expectedHeaderReceived("param2",true);
    template.sendBody("direct:other","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setHeader("bar").simple("${header.foo} == 'Camel'",boolean.class).to("mock:result");
        from("direct:other").setHeader("param1",constant("hello")).log("param1 = ${header.param1}").setHeader("param2").simple("${header.param1} == 'hello'",Boolean.class).log("param2 = ${header.param2}").to("mock:other");
      }
    }
;
  }
}
