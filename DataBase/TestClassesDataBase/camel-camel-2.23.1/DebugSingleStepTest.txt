/** 
 * @version 
 */
public class DebugSingleStepTest extends ContextTestSupport {
  private List<String> logs=new ArrayList<>();
  private Breakpoint breakpoint;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    breakpoint=new BreakpointSupport(){
      public void beforeProcess(      Exchange exchange,      Processor processor,      ProcessorDefinition<?> definition){
        String body=exchange.getIn().getBody(String.class);
        logs.add("Single stepping at " + definition.getLabel() + " with body: "+ body);
      }
    }
;
  }
  @Test public void testDebug() throws Exception {
    context.getDebugger().addSingleStepBreakpoint(breakpoint);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World","Hello Camel");
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Hello Camel");
    assertMockEndpointsSatisfied();
    assertEquals(6,logs.size());
    assertEquals("Single stepping at log:foo with body: Hello World",logs.get(0));
    assertEquals("Single stepping at log:bar with body: Hello World",logs.get(1));
    assertEquals("Single stepping at mock:result with body: Hello World",logs.get(2));
    assertEquals("Single stepping at log:foo with body: Hello Camel",logs.get(3));
    assertEquals("Single stepping at log:bar with body: Hello Camel",logs.get(4));
    assertEquals("Single stepping at mock:result with body: Hello Camel",logs.get(5));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setDebugger(new DefaultDebugger());
        from("direct:start").to("log:foo").to("log:bar").to("mock:result");
      }
    }
;
  }
}
