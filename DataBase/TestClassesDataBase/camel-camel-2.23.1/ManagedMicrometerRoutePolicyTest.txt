public class ManagedMicrometerRoutePolicyTest extends AbstractMicrometerRoutePolicyTest {
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testMetricsRoutePolicy() throws Exception {
    int count=10;
    getMockEndpoint("mock:result").expectedMessageCount(count);
    for (int i=0; i < count; i++) {
      if (i % 2 == 0) {
        template.sendBody("seda:foo","Hello " + i);
      }
 else {
        template.sendBody("seda:bar","Hello " + i);
      }
    }
    assertMockEndpointsSatisfied();
    List<Meter> meters=meterRegistry.getMeters();
    assertEquals(3,meters.size());
    String name=String.format("org.apache.camel:context=%s,type=services,name=MicrometerRoutePolicyService",context.getManagementName());
    ObjectName on=ObjectName.getInstance(name);
    String json=(String)getMBeanServer().invoke(on,"dumpStatisticsAsJson",null,null);
    assertNotNull(json);
    log.info(json);
    assertFalse(json.contains("\"name\" : \"test\""));
    assertTrue(json.contains("\"routeId\" : \"bar\""));
    assertTrue(json.contains("\"routeId\" : \"foo\""));
    Set<ObjectName> set=getMBeanServer().queryNames(new ObjectName("org.apache.camel.micrometer:name=CamelRoutePolicy.*"),null);
    assertEquals(2,set.size());
    String camelContextName=context().getName();
    Long testCount=(Long)getMBeanServer().getAttribute(new ObjectName("org.apache.camel.micrometer:name=test.camelContext." + camelContextName),"Count");
    assertEquals(count / 2,testCount.longValue());
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from("seda:foo").routeId("foo").to("micrometer:counter:test").to("mock:result");
        from("seda:bar").routeId("bar").to("mock:result");
      }
    }
;
  }
}
