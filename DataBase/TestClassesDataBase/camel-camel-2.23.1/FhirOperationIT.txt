/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirOperation} APIs.
 */
public class FhirOperationIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirOperationIntegrationTest.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirOperationApiMethod.class).getName();
  @Test public void testOnInstance() throws Exception {
    final Map<String,Object> headers=new HashMap<String,Object>();
    headers.put("CamelFhir.id",this.patient.getIdElement());
    headers.put("CamelFhir.name","everything");
    headers.put("CamelFhir.parameters",null);
    headers.put("CamelFhir.outputParameterType",Parameters.class);
    headers.put("CamelFhir.useHttpGet",Boolean.FALSE);
    headers.put("CamelFhir.returnType",null);
    headers.put("CamelFhir.extraParameters",null);
    final Parameters result=requestBodyAndHeaders("direct://ON_INSTANCE",null,headers);
    LOG.debug("onInstance: " + result);
    assertNotNull("onInstance result",result);
    Bundle bundle=(Bundle)result.getParameter().get(0).getResource();
    assertNotNull("onInstance result",bundle);
    IdType id=bundle.getEntry().get(0).getResource().getIdElement().toUnqualifiedVersionless();
    assertEquals(patient.getIdElement().toUnqualifiedVersionless(),id);
  }
  @Test public void testOnInstanceVersion() throws Exception {
    final Map<String,Object> headers=new HashMap<String,Object>();
    headers.put("CamelFhir.id",this.patient.getIdElement());
    headers.put("CamelFhir.name","everything");
    headers.put("CamelFhir.parameters",null);
    headers.put("CamelFhir.outputParameterType",Parameters.class);
    headers.put("CamelFhir.useHttpGet",Boolean.FALSE);
    headers.put("CamelFhir.returnType",null);
    headers.put("CamelFhir.extraParameters",null);
    final Parameters result=requestBodyAndHeaders("direct://ON_INSTANCE_VERSION",null,headers);
    LOG.debug("onInstance: " + result);
    assertNotNull("onInstance result",result);
    Bundle bundle=(Bundle)result.getParameter().get(0).getResource();
    assertNotNull("onInstance result",bundle);
    IdType id=bundle.getEntry().get(0).getResource().getIdElement().toUnqualifiedVersionless();
    assertEquals(patient.getIdElement().toUnqualifiedVersionless(),id);
  }
  @Test public void testOnServer() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.name","get-resource-counts");
    headers.put("CamelFhir.parameters",null);
    headers.put("CamelFhir.outputParameterType",Parameters.class);
    headers.put("CamelFhir.useHttpGet",Boolean.TRUE);
    headers.put("CamelFhir.returnType",null);
    headers.put("CamelFhir.extraParameters",null);
    final Parameters result=requestBodyAndHeaders("direct://ON_SERVER",null,headers);
    assertNotNull("onServer result",result);
    LOG.debug("onServer: " + result);
    int resourceCount=Integer.valueOf(((IntegerType)result.getParameter().get(0).getValue()).asStringValue());
    assertTrue(resourceCount > 0);
  }
  @Test public void testOnType() throws Exception {
    final Map<String,Object> headers=new HashMap<String,Object>();
    headers.put("CamelFhir.resourceType",Patient.class);
    headers.put("CamelFhir.name","everything");
    headers.put("CamelFhir.parameters",null);
    headers.put("CamelFhir.outputParameterType",Parameters.class);
    headers.put("CamelFhir.useHttpGet",Boolean.FALSE);
    headers.put("CamelFhir.returnType",null);
    headers.put("CamelFhir.extraParameters",null);
    final org.hl7.fhir.instance.model.api.IBaseResource result=requestBodyAndHeaders("direct://ON_TYPE",null,headers);
    assertNotNull("onType result",result);
    LOG.debug("onType: " + result);
  }
  @Ignore("Not implemented yet in HAPI FHIR server side, see" + " https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoMessageHeaderDstu3.java#L33") @Test public void testProcessMessage() throws Exception {
    final Map<String,Object> headers=new HashMap<String,Object>();
    headers.put("CamelFhir.respondToUri",null);
    headers.put("CamelFhir.msgBundle",null);
    headers.put("CamelFhir.asynchronous",Boolean.FALSE);
    headers.put("CamelFhir.responseClass",null);
    headers.put("CamelFhir.extraParameters",null);
    final org.hl7.fhir.instance.model.api.IBaseBundle result=requestBodyAndHeaders("direct://PROCESS_MESSAGE",null,headers);
    assertNotNull("processMessage result",result);
    LOG.debug("processMessage: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ON_INSTANCE").to("fhir://" + PATH_PREFIX + "/onInstance");
        from("direct://ON_INSTANCE_VERSION").to("fhir://" + PATH_PREFIX + "/onInstanceVersion");
        from("direct://ON_SERVER").to("fhir://" + PATH_PREFIX + "/onServer");
        from("direct://ON_TYPE").to("fhir://" + PATH_PREFIX + "/onType");
        from("direct://PROCESS_MESSAGE").to("fhir://" + PATH_PREFIX + "/processMessage");
      }
    }
;
  }
}
