public class KubernetesPodsProducerTest extends KubernetesTestSupport {
  @Rule public KubernetesServer server=new KubernetesServer();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("kubernetesClient",server.getClient());
    return registry;
  }
  @Test public void listTest() throws Exception {
    server.expect().withPath("/api/v1/pods").andReturn(200,new PodListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    List<Pod> result=template.requestBody("direct:list","",List.class);
    assertEquals(3,result.size());
  }
  @Test public void listByLabelsTest() throws Exception {
    server.expect().withPath("/api/v1/pods?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200,new PodListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    Exchange ex=template.request("direct:listByLabels",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Map<String,String> labels=new HashMap<>();
        labels.put("key1","value1");
        labels.put("key2","value2");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PODS_LABELS,labels);
      }
    }
);
    List<Pod> result=ex.getOut().getBody(List.class);
    assertEquals(3,result.size());
  }
  @Test public void getPodTest() throws Exception {
    Pod pod1=new PodBuilder().withNewMetadata().withName("pod1").withNamespace("test").and().build();
    Pod pod2=new PodBuilder().withNewMetadata().withName("pod2").withNamespace("ns1").and().build();
    server.expect().withPath("/api/v1/namespaces/test/pods/pod1").andReturn(200,pod1).once();
    server.expect().withPath("/api/v1/namespaces/ns1/pods/pod2").andReturn(200,pod2).once();
    Exchange ex=template.request("direct:getPod",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_NAME,"pod1");
      }
    }
);
    Pod result=ex.getOut().getBody(Pod.class);
    assertEquals("pod1",result.getMetadata().getName());
  }
  @Test public void deletePod() throws Exception {
    Pod pod1=new PodBuilder().withNewMetadata().withName("pod1").withNamespace("test").and().build();
    server.expect().withPath("/api/v1/namespaces/test/pods/pod1").andReturn(200,pod1).once();
    Exchange ex=template.request("direct:deletePod",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_NAME,"pod1");
      }
    }
);
    boolean podDeleted=ex.getOut().getBody(Boolean.class);
    assertTrue(podDeleted);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:list").to("kubernetes-pods:///?kubernetesClient=#kubernetesClient&operation=listPods");
        from("direct:listByLabels").to("kubernetes-pods:///?kubernetesClient=#kubernetesClient&operation=listPodsByLabels");
        from("direct:getPod").to("kubernetes-pods:///?kubernetesClient=#kubernetesClient&operation=getPod");
        from("direct:deletePod").to("kubernetes-pods:///?kubernetesClient=#kubernetesClient&operation=deletePod");
      }
    }
;
  }
}
