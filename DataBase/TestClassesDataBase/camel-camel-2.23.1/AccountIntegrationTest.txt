/** 
 * Test class for  {@link com.twilio.rest.api.v2010.Account} APIs.
 */
public class AccountIntegrationTest extends AbstractTwilioTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(AccountIntegrationTest.class);
  private static final String PATH_PREFIX=TwilioApiCollection.getCollection().getApiName(AccountApiMethod.class).getName();
  @Test public void testFetcher() throws Exception {
    final Account result=requestBody("direct://FETCHER",null);
    assertNotNull("fetcher result not null",result);
    assertNotNull("fetcher result sid not null",result.getSid());
    LOG.debug("fetcher: " + result);
  }
  @Test public void testFetcherWithPathSid() throws Exception {
    final Account result=requestBodyAndHeaders("direct://FETCHER",null,headers("CamelTwilioPathSid",((TwilioComponent)context().getComponent("twilio")).getAccountSid()));
    assertNotNull("fetcher result not null",result);
    assertNotNull("fetcher result sid not null",result.getSid());
    LOG.debug("fetcher: " + result);
  }
  @Test public void testReader() throws Exception {
    final ResourceSet<Account> result=requestBody("direct://READER",null);
    assertNotNull("reader result not null",result);
    result.forEach(account -> {
      assertNotNull("reader result account not null",account);
      LOG.debug("reader: " + account);
    }
);
  }
  @Test public void testReaderWithStatusActive() throws Exception {
    final ResourceSet<Account> result=requestBodyAndHeaders("direct://READER",null,headers("CamelTwilioStatus","active"));
    assertNotNull("reader result not null",result);
    result.forEach(account -> {
      assertEquals("reader result account active",Account.Status.ACTIVE,account.getStatus());
      LOG.debug("reader: " + account);
    }
);
  }
  private static Map<String,Object> headers(  String name,  Object value){
    Map<String,Object> headers=new HashMap<>();
    headers.put(name,value);
    return headers;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://FETCHER").to("twilio://" + PATH_PREFIX + "/fetch");
        from("direct://READER").to("twilio://" + PATH_PREFIX + "/read");
      }
    }
;
  }
}
