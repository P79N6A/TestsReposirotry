public class NettyCustomCodecTest extends BaseNettyTest {
  private String uri="netty4:tcp://localhost:{{port}}?disconnect=true&sync=false" + "&allowDefaultCodec=false&decoders=#myCustomDecoder,#myCustomDecoder2&encoder=#myCustomEncoder";
  private byte[] data=new byte[]{65,66,67,68,69,70,71,72,73,0,0};
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myCustomDecoder",MyCustomCodec.createMyCustomDecoder());
    jndi.bind("myCustomDecoder2",MyCustomCodec.createMyCustomDecoder2());
    jndi.bind("myCustomEncoder",MyCustomCodec.createMyCustomEncoder());
    return jndi;
  }
  @Test public void testCustomCodec() throws Exception {
    getMockEndpoint("mock:input").expectedMessageCount(1);
    template.sendBody(uri,data);
    assertMockEndpointsSatisfied();
    byte[] mockData=getMockEndpoint("mock:input").getReceivedExchanges().get(0).getIn().getBody(byte[].class);
    ObjectHelper.equalByteArray(data,mockData);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(uri).to("log:input").to("mock:input");
      }
    }
;
  }
}
