public class TikaParseTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Test public void testDocumentParse() throws Exception {
    File document=new File("src/test/resources/test.doc");
    template.sendBody("direct:start",document);
    resultEndpoint.setExpectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        Object body=exchange.getIn().getBody(String.class);
        Map<String,Object> headerMap=exchange.getIn().getHeaders();
        assertThat(body,instanceOf(String.class));
        Charset detectedCharset=null;
        try {
          InputStream bodyIs=new ByteArrayInputStream(((String)body).getBytes());
          UniversalEncodingDetector encodingDetector=new UniversalEncodingDetector();
          detectedCharset=encodingDetector.detect(bodyIs,new Metadata());
        }
 catch (        IOException e1) {
          fail();
        }
        assertThat(detectedCharset.name(),startsWith(Charset.defaultCharset().name()));
        assertThat((String)body,containsString("test"));
        assertThat(headerMap.get(Exchange.CONTENT_TYPE),equalTo("application/msword"));
        return true;
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testDocumentParseWithEncoding() throws Exception {
    File document=new File("src/test/resources/testOpenOffice2.odt");
    template.sendBody("direct:start4",document);
    resultEndpoint.setExpectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        Object body=exchange.getIn().getBody(String.class);
        Map<String,Object> headerMap=exchange.getIn().getHeaders();
        assertThat(body,instanceOf(String.class));
        Charset detectedCharset=null;
        try {
          InputStream bodyIs=new ByteArrayInputStream(((String)body).getBytes(StandardCharsets.UTF_16));
          UniversalEncodingDetector encodingDetector=new UniversalEncodingDetector();
          detectedCharset=encodingDetector.detect(bodyIs,new Metadata());
        }
 catch (        IOException e1) {
          fail();
        }
        assertThat(detectedCharset.name(),startsWith(StandardCharsets.UTF_16.name()));
        assertThat(headerMap.get(Exchange.CONTENT_TYPE),equalTo("application/vnd.oasis.opendocument.text"));
        return true;
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testImageParse() throws Exception {
    File document=new File("src/test/resources/testGIF.gif");
    template.sendBody("direct:start",document);
    resultEndpoint.setExpectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        Object body=exchange.getIn().getBody(String.class);
        Map<String,Object> headerMap=exchange.getIn().getHeaders();
        assertThat(body,instanceOf(String.class));
        assertThat((String)body,containsString("<body/>"));
        assertThat(headerMap.get(Exchange.CONTENT_TYPE),equalTo("image/gif"));
        return true;
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testEmptyConfigDocumentParse() throws Exception {
    File document=new File("src/test/resources/test.doc");
    template.sendBody("direct:start3",document);
    resultEndpoint.setExpectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        Object body=exchange.getIn().getBody(String.class);
        Map<String,Object> headerMap=exchange.getIn().getHeaders();
        assertThat(body,instanceOf(String.class));
        assertThat((String)body,containsString("<body/>"));
        assertThat(headerMap.get(Exchange.CONTENT_TYPE),equalTo("application/msword"));
        return true;
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testRegistryConfigDocumentParse() throws Exception {
    File document=new File("src/test/resources/test.doc");
    template.sendBody("direct:start3",document);
    resultEndpoint.setExpectedMessageCount(1);
    resultEndpoint.expectedMessagesMatches(new Predicate(){
      @Override public boolean matches(      Exchange exchange){
        Object body=exchange.getIn().getBody(String.class);
        Map<String,Object> headerMap=exchange.getIn().getHeaders();
        assertThat(body,instanceOf(String.class));
        assertThat((String)body,containsString("<body/>"));
        assertThat(headerMap.get(Exchange.CONTENT_TYPE),equalTo("application/msword"));
        return true;
      }
    }
);
    resultEndpoint.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("tika:parse").to("mock:result");
        from("direct:start2").to("tika:parse?tikaConfigUri=src/test/resources/tika-empty.xml").to("mock:result");
        from("direct:start3").to("tika:parse?tikaConfig=#testConfig").to("mock:result");
        from("direct:start4").to("tika:parse?tikaParseOutputEncoding=" + StandardCharsets.UTF_16.name()).to("mock:result");
      }
    }
;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry reg=super.createRegistry();
    reg.bind("testConfig",new TikaEmptyConfig());
    return reg;
  }
}
