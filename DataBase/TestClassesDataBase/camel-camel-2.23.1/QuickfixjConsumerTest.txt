public class QuickfixjConsumerTest {
  private Exchange mockExchange;
  private Processor mockProcessor;
  private QuickfixjEndpoint mockEndpoint;
  private Message inboundFixMessage;
  @Before public void setUp(){
    mockExchange=Mockito.mock(Exchange.class);
    org.apache.camel.Message mockCamelMessage=Mockito.mock(org.apache.camel.Message.class);
    Mockito.when(mockExchange.getIn()).thenReturn(mockCamelMessage);
    inboundFixMessage=new Message();
    inboundFixMessage.getHeader().setString(BeginString.FIELD,FixVersions.BEGINSTRING_FIX44);
    inboundFixMessage.getHeader().setString(SenderCompID.FIELD,"SENDER");
    inboundFixMessage.getHeader().setString(TargetCompID.FIELD,"TARGET");
    Mockito.when(mockCamelMessage.getBody(quickfix.Message.class)).thenReturn(inboundFixMessage);
    mockProcessor=Mockito.mock(Processor.class);
    mockEndpoint=Mockito.mock(QuickfixjEndpoint.class);
    Mockito.when(mockEndpoint.createExchange(ExchangePattern.InOnly)).thenReturn(mockExchange);
  }
  @Test public void processExchangeOnlyWhenStarted() throws Exception {
    QuickfixjConsumer consumer=new QuickfixjConsumer(mockEndpoint,mockProcessor);
    Assert.assertThat("Consumer should not be automatically started",consumer.isStarted(),CoreMatchers.is(false));
    consumer.onExchange(mockExchange);
    Mockito.verifyZeroInteractions(mockProcessor);
    consumer.start();
    Mockito.verify(mockEndpoint).ensureInitialized();
    Assert.assertThat(consumer.isStarted(),CoreMatchers.is(true));
    consumer.onExchange(mockExchange);
    Mockito.verify(mockProcessor).process(isA(Exchange.class));
  }
  @Test public void setExceptionOnExchange() throws Exception {
    QuickfixjConsumer consumer=new QuickfixjConsumer(mockEndpoint,mockProcessor);
    consumer.start();
    Throwable exception=new Exception("Throwable for test");
    Mockito.doThrow(exception).when(mockProcessor).process(mockExchange);
    consumer.onExchange(mockExchange);
    Mockito.verify(mockExchange).setException(exception);
  }
  @Test public void setExceptionOnInOutExchange() throws Exception {
    org.apache.camel.Message mockCamelOutMessage=Mockito.mock(org.apache.camel.Message.class);
    org.apache.camel.Message mockCamelInMessage=Mockito.mock(org.apache.camel.Message.class);
    SessionID mockSessionId=Mockito.mock(SessionID.class);
    QuickfixjConsumer consumer=Mockito.spy(new QuickfixjConsumer(mockEndpoint,mockProcessor));
    Mockito.doReturn(null).when(consumer).getSession(mockSessionId);
    Mockito.when(mockExchange.getPattern()).thenReturn(ExchangePattern.InOut);
    Mockito.when(mockExchange.hasOut()).thenReturn(true);
    Mockito.when(mockExchange.getOut()).thenReturn(mockCamelOutMessage);
    Message outboundFixMessage=new Message();
    Mockito.when(mockCamelOutMessage.getBody(Message.class)).thenReturn(outboundFixMessage);
    Mockito.when(mockExchange.getIn()).thenReturn(mockCamelInMessage);
    Mockito.when(mockCamelInMessage.getHeader("SessionID",SessionID.class)).thenReturn(mockSessionId);
    consumer.start();
    consumer.onExchange(mockExchange);
    Mockito.verify(mockExchange).setException(isA(IllegalStateException.class));
  }
  @Test public void processInOutExchange() throws Exception {
    org.apache.camel.Message mockCamelOutMessage=Mockito.mock(org.apache.camel.Message.class);
    org.apache.camel.Message mockCamelInMessage=Mockito.mock(org.apache.camel.Message.class);
    SessionID mockSessionId=Mockito.mock(SessionID.class);
    Session mockSession=Mockito.mock(Session.class);
    QuickfixjConsumer consumer=Mockito.spy(new QuickfixjConsumer(mockEndpoint,mockProcessor));
    Mockito.doReturn(mockSession).when(consumer).getSession(mockSessionId);
    Mockito.doReturn(true).when(mockSession).send(isA(Message.class));
    Mockito.when(mockExchange.getPattern()).thenReturn(ExchangePattern.InOut);
    Mockito.when(mockExchange.hasOut()).thenReturn(true);
    Mockito.when(mockExchange.getOut()).thenReturn(mockCamelOutMessage);
    Message outboundFixMessage=new Message();
    Mockito.when(mockCamelOutMessage.getBody(Message.class)).thenReturn(outboundFixMessage);
    Mockito.when(mockExchange.getIn()).thenReturn(mockCamelInMessage);
    Mockito.when(mockCamelInMessage.getHeader("SessionID",SessionID.class)).thenReturn(mockSessionId);
    consumer.start();
    consumer.onExchange(mockExchange);
    Mockito.verify(mockExchange,Mockito.never()).setException(isA(Exception.class));
    Mockito.verify(mockSession).send(outboundFixMessage);
  }
}
