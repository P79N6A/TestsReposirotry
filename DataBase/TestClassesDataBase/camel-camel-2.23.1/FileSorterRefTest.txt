/** 
 * Unit test for  the file sorter ref option
 */
public class FileSorterRefTest extends ContextTestSupport {
  private String fileUrl="file://target/filesorter/?initialDelay=0&delay=10&sorter=#mySorter";
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("mySorter",new MyFileSorter<>());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filesorter");
    super.setUp();
    template.sendBodyAndHeader("file:target/filesorter/","Hello Paris",Exchange.FILE_NAME,"paris.txt");
    template.sendBodyAndHeader("file:target/filesorter/","Hello London",Exchange.FILE_NAME,"london.txt");
    template.sendBodyAndHeader("file:target/filesorter/","Hello Copenhagen",Exchange.FILE_NAME,"copenhagen.txt");
  }
  @Test public void testSortFiles() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Copenhagen","Hello London","Hello Paris");
    assertMockEndpointsSatisfied();
  }
public class MyFileSorter<T> implements Comparator<GenericFile<T>> {
    public int compare(    GenericFile<T> o1,    GenericFile<T> o2){
      return o1.getFileName().compareToIgnoreCase(o2.getFileName());
    }
  }
}
