public class ProducerCacheHitsTest extends CamelTestSupport {
  private static final String SMALL_MESSAGE="message";
  private static final DecimalFormat FORMAT=new DecimalFormat("#.##");
  @Test public void testRepeatProcessing() throws Exception {
    MockEndpoint data=getMandatoryEndpoint("mock:results",MockEndpoint.class);
    data.expectedMessageCount(4 * 7);
    for (int iter=10; iter <= 10000; iter*=10) {
      for (int t=2; t <= 128; t*=2) {
        runTest("test-perf:endpoint",SMALL_MESSAGE,iter,t);
      }
    }
    data.assertIsSatisfied();
    for (    Exchange ex : data.getExchanges()) {
      TestResult r=ex.getIn().getBody(TestResult.class);
      log.info(r.toString());
    }
  }
  protected Object runTest(  String uri,  String body,  int iterations,  int threads){
    Map<String,Object> headers=new HashMap<>();
    headers.put(PerformanceTestComponent.HEADER_ITERATIONS,iterations);
    headers.put(PerformanceTestComponent.HEADER_THREADS,threads);
    StopWatch watch=new StopWatch();
    Object result=template.requestBodyAndHeaders(uri,body,headers);
    template.sendBody("mock:results",new TestResult(uri,iterations,threads,watch.stop()));
    return result;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("test-perf:endpoint").to("echo:echo");
      }
    }
;
  }
public final class TestResult {
    public String uri;
    public int iterations;
    public int threads;
    public long time;
    public TestResult(    String uri,    int iterations,    int threads,    long time){
      this.uri=uri;
      this.iterations=iterations;
      this.threads=threads;
      this.time=time;
    }
    public String toString(){
      StringBuilder sb=new StringBuilder();
      sb.append("[");
      sb.append(FORMAT.format(1000.0 * iterations / time));
      sb.append(" /s], ");
      sb.append(uri);
      sb.append(", ");
      sb.append(iterations);
      sb.append(", ");
      sb.append(threads);
      sb.append(", ");
      sb.append(time);
      return sb.toString();
    }
  }
}
