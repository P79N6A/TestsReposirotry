public class AtomixValueConsumerTest extends AtomixClientTestSupport {
  private static final String VALUE_NAME=UUID.randomUUID().toString();
  private DistributedValue<Object> value;
  @Override protected Map<String,Component> createComponents(){
    AtomixValueComponent component=new AtomixValueComponent();
    component.setNodes(Collections.singletonList(getReplicaAddress()));
    return Collections.singletonMap("atomix-value",component);
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    value=getClient().getValue(VALUE_NAME).join();
  }
  @Override @After public void tearDown() throws Exception {
    value.close();
    super.tearDown();
  }
  @Test public void testEvents() throws Exception {
    String val1=context().getUuidGenerator().generateUuid();
    String val2=context().getUuidGenerator().generateUuid();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.message(0).body().isEqualTo(val1);
    mock.message(0).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedValue.Events.CHANGE);
    mock.message(1).body().isEqualTo(val2);
    mock.message(1).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedValue.Events.CHANGE);
    value.set(val1).join();
    value.compareAndSet(val1,val2).join();
    mock.assertIsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        fromF("atomix-value:%s",VALUE_NAME).to("mock:result");
      }
    }
;
  }
}
