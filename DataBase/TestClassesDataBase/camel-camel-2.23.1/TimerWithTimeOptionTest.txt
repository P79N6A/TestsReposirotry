/** 
 * @version 
 */
public class TimerWithTimeOptionTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testFiredInFutureWithTPattern() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?delay=0&period=10&time=%s",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureWithTPatternNoPeriod() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?period=0&time=%s",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureWithTPatternFixedRate() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?delay=0&period=10&fixedRate=true&time=%s",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureWithoutTPattern() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?delay=0&period=10&time=%s",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureWithoutTPatternNoPeriod() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?delay=0&period=0&time=%s",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureCustomPattern() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?delay=0&period=10&time=%s&pattern=dd-MM-yyyy HH:mm:ss.SSS",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureCustomPatternNoPeriod() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        Date future=new Date(new Date().getTime() + 10);
        SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss.SSS");
        String time=sdf.format(future);
        fromF("timer://foo?delay=0&period=0&time=%s&pattern=dd-MM-yyyy HH:mm:ss.SSS",time).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testFiredInFutureIllegalTime() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        fromF("timer://foo?time=%s","20090101").to("mock:result");
      }
    }
);
    try {
      context.start();
      fail("Should throw an exception");
    }
 catch (    FailedToCreateRouteException e) {
      assertIsInstanceOf(ParseException.class,e.getCause().getCause());
    }
  }
}
