public abstract class ConsulServiceRegistrationTestBase extends ConsulTestSupport {
  protected static final String SERVICE_ID=UUID.randomUUID().toString();
  protected static final String SERVICE_NAME="my-service";
  protected static final String SERVICE_HOST="localhost";
  protected static final int SERVICE_PORT=SocketUtils.findAvailableTcpPort();
  protected Map<String,String> getMetadata(){
    return Collections.emptyMap();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=super.createCamelContext();
    ConsulServiceRegistry registry=new ConsulServiceRegistry();
    registry.setId(context.getUuidGenerator().generateUuid());
    registry.setCamelContext(context());
    registry.setUrl(consulUrl());
    registry.setServiceHost(SERVICE_HOST);
    registry.setOverrideServiceHost(true);
    context.addService(registry,true,false);
    return context;
  }
  @Test public void testRegistrationFromRoute() throws Exception {
    final CatalogClient catalog=getConsul().catalogClient();
    final HealthClient health=getConsul().healthClient();
    assertTrue(catalog.getService(SERVICE_NAME).getResponse().isEmpty());
    context().startRoute(SERVICE_ID);
    List<CatalogService> services=catalog.getService(SERVICE_NAME).getResponse();
    assertEquals(1,services.size());
    assertEquals(SERVICE_PORT,services.get(0).getServicePort());
    assertEquals("localhost",services.get(0).getServiceAddress());
    assertTrue(services.get(0).getServiceTags().contains(ServiceDefinition.SERVICE_META_PROTOCOL + "=http"));
    assertTrue(services.get(0).getServiceTags().contains(ServiceDefinition.SERVICE_META_PATH + "=/service/endpoint"));
    getMetadata().forEach((k,v) -> {
      assertTrue(services.get(0).getServiceTags().contains(k + "=" + v));
    }
);
    List<ServiceHealth> checks=health.getHealthyServiceInstances(SERVICE_NAME).getResponse();
    assertEquals(1,checks.size());
    assertEquals(SERVICE_PORT,checks.get(0).getService().getPort());
    assertEquals("localhost",checks.get(0).getService().getAddress());
    context().stopRoute(SERVICE_ID);
    assertTrue(catalog.getService(SERVICE_NAME).getResponse().isEmpty());
  }
}
