public class FailOverAllFailedExceptionTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").loadBalance().failover(2,false,true).to("direct:x","direct:y","direct:z");
        from("direct:x").to("mock:x").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new SocketException("Forced");
          }
        }
);
        from("direct:y").to("mock:y").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new IllegalArgumentException("Illegal");
          }
        }
);
        from("direct:z").to("mock:z").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new SocketException("Not Again");
          }
        }
);
      }
    }
;
  }
  @Test public void testAllFailed() throws Exception {
    x.expectedMessageCount(1);
    y.expectedMessageCount(1);
    z.expectedMessageCount(1);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Not Again",e.getCause().getMessage());
      assertIsInstanceOf(SocketException.class,e.getCause());
    }
    assertMockEndpointsSatisfied();
  }
}
