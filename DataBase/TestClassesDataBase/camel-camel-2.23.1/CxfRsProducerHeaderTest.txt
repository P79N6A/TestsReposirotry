/** 
 * Unit test that verify header propagation functionality for CxfRsProducer that uses WebClient API.
 * @version 
 */
@ContextConfiguration public class CxfRsProducerHeaderTest extends AbstractJUnit4SpringContextTests {
  static int port2=CXFTestSupport.getPort2();
  static int port3=CXFTestSupport.getPort("CxfRsProducerHeaderTest.1");
  private static final Object RESPONSE="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<Customer><id>123</id><name>John</name></Customer>";
  @Autowired protected CamelContext camelContext;
  @Test public void testInvokeThatDoesNotInvolveHeaders() throws Exception {
    Exchange exchange=camelContext.createProducerTemplate().send("direct://http",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
        inMessage.setBody(null);
      }
    }
);
    Response response=(Response)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals(200,response.getStatus());
    assertEquals(RESPONSE,CxfUtils.getStringFromInputStream(exchange.getOut().getBody(InputStream.class)));
  }
  @Test public void testHeaderFilteringAndPropagation() throws Exception {
    Exchange exchange=camelContext.createProducerTemplate().send("direct://http2",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/CxfRsProducerHeaderTest/customerservice/customers/123");
        inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE,"application/json");
        inMessage.setHeader("my-user-defined-header","my-value");
        inMessage.setBody(null);
      }
    }
);
    Response response=(Response)exchange.getOut().getBody();
    assertEquals(200,response.getStatus());
    Message outMessage=exchange.getOut();
    assertEquals("text/xml",outMessage.getHeader(Exchange.CONTENT_TYPE));
    assertEquals("my-value",outMessage.getHeader("echo-my-user-defined-header"));
    assertEquals("application/json",outMessage.getHeader("echo-accept"));
    assertNull(outMessage.getHeader("failed-header-using-http-api"));
    assertEquals(Integer.valueOf(200),outMessage.getHeader(Exchange.HTTP_RESPONSE_CODE,Integer.class));
  }
public static class HttpProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Message out=exchange.getOut();
      if (in.getHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API) != null) {
        out.setHeader("failed-header-using-http-api",CxfConstants.CAMEL_CXF_RS_USING_HTTP_API);
      }
      out.setHeader("echo-accept",in.getHeader("Accept"));
      out.setHeader("echo-my-user-defined-header",in.getHeader("my-user-defined-header"));
      exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE,200);
      exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"text/xml");
    }
  }
}
