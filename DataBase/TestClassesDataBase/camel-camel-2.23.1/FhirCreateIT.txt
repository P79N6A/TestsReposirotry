/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirCreate} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirCreateIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirCreateIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirCreateApiMethod.class).getName();
  @Test public void testCreateResource() throws Exception {
    Patient patient=new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman"));
    MethodOutcome result=requestBody("direct://RESOURCE",patient);
    LOG.debug("resource: " + result);
    assertNotNull("resource result",result);
    assertTrue(result.getCreated());
  }
  @Test public void testCreateStringResource() throws Exception {
    Patient patient=new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman"));
    String patientString=this.fhirContext.newXmlParser().encodeResourceToString(patient);
    MethodOutcome result=requestBody("direct://RESOURCE_STRING",patientString);
    LOG.debug("resource: " + result);
    assertNotNull("resource result",result);
    assertTrue(result.getCreated());
  }
  @Test public void testCreateStringResourceEncodeXml() throws Exception {
    Patient patient=new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman"));
    String patientString=this.fhirContext.newXmlParser().encodeResourceToString(patient);
    Map<String,Object> headers=new HashMap<>();
    headers.put(ExtraParameters.ENCODE_XML.getHeaderName(),Boolean.TRUE);
    MethodOutcome result=requestBodyAndHeaders("direct://RESOURCE_STRING",patientString,headers);
    LOG.debug("resource: " + result);
    assertNotNull("resource result",result);
    assertTrue(result.getCreated());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource");
        from("direct://RESOURCE_STRING").to("fhir://" + PATH_PREFIX + "/resource?inBody=resourceAsString&log=true");
      }
    }
;
  }
}
