/** 
 * Unit test for login failure due bad password and no re connect attempts allowed
 */
public class FtpConsumerThrowExceptionOnLoginFailedTest extends FtpServerTestSupport {
  private CountDownLatch latch=new CountDownLatch(1);
  private String getFtpUrl(){
    return "ftp://dummy@localhost:" + getPort() + "/badlogin?password=cantremember"+ "&throwExceptionOnConnectFailed=true&maximumReconnectAttempts=0&pollStrategy=#myPoll&autoCreate=false";
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myPoll",new MyPoll());
    return jndi;
  }
  @Test public void testBadLogin() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertMockEndpointsSatisfied();
    Thread.sleep(1000);
    Consumer consumer=context.getRoute("foo").getConsumer();
    assertTrue("Consumer should be stopped",((ServiceSupport)consumer).isStopped());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(getFtpUrl()).routeId("foo").to("mock:result");
      }
    }
;
  }
private class MyPoll implements PollingConsumerPollStrategy {
    public boolean begin(    Consumer consumer,    Endpoint endpoint){
      return true;
    }
    public void commit(    Consumer consumer,    Endpoint endpoint,    int polledMessages){
    }
    public boolean rollback(    Consumer consumer,    Endpoint endpoint,    int retryCounter,    Exception cause) throws Exception {
      GenericFileOperationFailedException e=assertIsInstanceOf(GenericFileOperationFailedException.class,cause);
      assertEquals(530,e.getCode());
      consumer.stop();
      latch.countDown();
      return false;
    }
  }
}
