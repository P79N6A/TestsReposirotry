/** 
 * Unit test inspired by user forum.
 */
public class OnExceptionRouteWithDefaultErrorHandlerTest extends ContextTestSupport {
  private MyOwnHandlerBean myOwnHandlerBean;
  private MyServiceBean myServiceBean;
  @Test public void testNoError() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","<order><type>myType</type><user>James</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFunctionalError() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    template.sendBody("direct:start","<order><type>myType</type><user>Func</user></order>");
    assertMockEndpointsSatisfied();
    assertEquals("<order><type>myType</type><user>Func</user></order>",myOwnHandlerBean.getPayload());
  }
  @Test public void testTechnicalError() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    template.sendBody("direct:start","<order><type>myType</type><user>Tech</user></order>");
    assertMockEndpointsSatisfied();
    assertNull(myOwnHandlerBean.getPayload());
  }
  @Test public void testErrorWhileHandlingException() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBody("direct:start","<order><type>myType</type><user>FuncError</user></order>");
      fail("Should throw a RuntimeCamelException");
    }
 catch (    RuntimeCamelException e) {
      assertEquals("Damn something did not work",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    assertNull(myOwnHandlerBean.getPayload());
  }
  @Override @Before public void setUp() throws Exception {
    myOwnHandlerBean=new MyOwnHandlerBean();
    myServiceBean=new MyServiceBean();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myOwnHandler",myOwnHandlerBean);
    jndi.bind("myServiceBean",myServiceBean);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(5));
        onException(MyTechnicalException.class).maximumRedeliveries(0).handled(true);
        onException(MyFunctionalException.class).maximumRedeliveries(0).handled(true).to("bean:myOwnHandler");
        from("direct:start").choice().when().xpath("//type = 'myType'").to("bean:myServiceBean").end().to("mock:result");
      }
    }
;
  }
}
