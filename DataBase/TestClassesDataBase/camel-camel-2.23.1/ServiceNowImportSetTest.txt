/** 
 * To set-up ServiceNow for this tests: 1. Create a new web service named u_test_imp_incident targeting incident table 2. Create a mapping (automatic)
 */
@Ignore public class ServiceNowImportSetTest extends ServiceNowTestSupport {
  @Test public void testIncidentImport() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:servicenow");
    mock.reset();
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(ServiceNowConstants.RESPONSE_TYPE,ArrayList.class);
    IncidentImportRequest incident=new IncidentImportRequest();
    incident.description=UUID.randomUUID().toString();
    incident.correlationId=UUID.randomUUID().toString();
    template().sendBodyAndHeaders("direct:servicenow",incident,kvBuilder().put(ServiceNowConstants.RESOURCE,ServiceNowConstants.RESOURCE_IMPORT).put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowConstants.REQUEST_MODEL,IncidentImportRequest.class).put(ServiceNowConstants.RESPONSE_MODEL,ImportSetResult.class).put(ServiceNowParams.PARAM_TABLE_NAME,"u_test_imp_incident").build());
    mock.assertIsSatisfied();
    Message in=mock.getExchanges().get(0).getIn();
    Map<String,String> meta=in.getHeader(ServiceNowConstants.RESPONSE_META,Map.class);
    assertNotNull(meta);
    assertEquals("u_test_imp_incident",meta.get("staging_table"));
    List<ImportSetResult> responses=in.getBody(List.class);
    assertNotNull(responses);
    assertEquals(1,responses.size());
    assertEquals("inserted",responses.get(0).getStatus());
    assertEquals("test_imp_incident",responses.get(0).getTransformMap());
    assertEquals("incident",responses.get(0).getTable());
  }
  @Test public void testIncidentImportWithRetrieve() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:servicenow");
    mock.reset();
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(ServiceNowConstants.RESPONSE_TYPE,Incident.class);
    IncidentImportRequest incident=new IncidentImportRequest();
    incident.description=UUID.randomUUID().toString();
    template().sendBodyAndHeaders("direct:servicenow",incident,kvBuilder().put(ServiceNowConstants.RESOURCE,ServiceNowConstants.RESOURCE_IMPORT).put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowConstants.REQUEST_MODEL,IncidentImportRequest.class).put(ServiceNowConstants.RESPONSE_MODEL,Incident.class).put(ServiceNowConstants.RETRIEVE_TARGET_RECORD,true).put(ServiceNowParams.PARAM_TABLE_NAME,"u_test_imp_incident").build());
    mock.assertIsSatisfied();
    Incident response=mock.getExchanges().get(0).getIn().getBody(Incident.class);
    assertNotNull(response);
    assertEquals(incident.description,response.getDescription());
    assertNotNull(response.getNumber());
    assertNotNull(response.getId());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:servicenow").to("servicenow:{{env:SERVICENOW_INSTANCE}}").to("log:org.apache.camel.component.servicenow?level=INFO&showAll=true").to("mock:servicenow");
      }
    }
;
  }
@JsonIgnoreProperties(ignoreUnknown=true) @JsonInclude(JsonInclude.Include.NON_NULL) private static final class IncidentImportRequest {
    @JsonProperty("description") public String description;
    @JsonProperty("correlation_id") public String correlationId;
  }
}
