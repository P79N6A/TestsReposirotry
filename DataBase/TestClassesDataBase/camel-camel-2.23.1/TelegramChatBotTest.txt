/** 
 * Tests a chain made of a consumer and a producer to create a direct chat-bot.
 */
public class TelegramChatBotTest extends TelegramTestSupport {
  @Before public void mockAPIs(){
    TelegramService service=mockTelegramService();
    UpdateResult request=getJSONResource("messages/updates-single.json",UpdateResult.class);
    request.getUpdates().get(0).getMessage().setText("Hello World!");
    request.getUpdates().get(0).getMessage().getChat().setId("my-chat-id");
    UpdateResult request2=getJSONResource("messages/updates-single.json",UpdateResult.class);
    request2.getUpdates().get(0).getMessage().setText("intercept");
    request2.getUpdates().get(0).getMessage().getChat().setId("my-chat-id");
    UpdateResult defaultRes=getJSONResource("messages/updates-empty.json",UpdateResult.class);
    when(service.getUpdates(any(),any(),any(),any())).thenReturn(request).thenReturn(request2).thenAnswer((i) -> defaultRes);
  }
  @Test public void testChatBotResult() throws Exception {
    TelegramService service=currentMockService();
    ArgumentCaptor<OutgoingTextMessage> captor=ArgumentCaptor.forClass(OutgoingTextMessage.class);
    verify(service,new Timeout(5000,times(2))).sendMessage(eq("mock-token"),captor.capture());
    List<OutgoingTextMessage> msgs=captor.getAllValues();
    assertCollectionSize(msgs,2);
    assertTrue(msgs.stream().anyMatch(m -> "echo from the bot: Hello World!".equals(m.getText())));
    assertTrue(msgs.stream().anyMatch(m -> "echo from the bot: taken".equals(m.getText())));
    assertTrue(msgs.stream().noneMatch(m -> m.getParseMode() != null));
  }
  /** 
 * This method simulates the first step of the chat-bot logic.
 * @param exchange the current exchange originating from the telegram bot
 */
  public void chatBotProcess1(  Exchange exchange){
    if (exchange.getIn().getBody(String.class).equals("intercept")) {
      exchange.getIn().setBody("taken");
    }
  }
  /** 
 * This method simulates the second step of the chat-bot logic.
 * @param message the message coming from the telegram bot
 * @return the reply, if any
 */
  public String chatBotProcess2(  String message){
    return "echo from the bot: " + message;
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("telegram:bots/mock-token").bean(TelegramChatBotTest.this,"chatBotProcess1").bean(TelegramChatBotTest.this,"chatBotProcess2").to("telegram:bots/mock-token");
      }
    }
;
  }
}
