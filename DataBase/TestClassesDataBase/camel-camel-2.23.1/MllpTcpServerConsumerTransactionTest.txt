public class MllpTcpServerConsumerTransactionTest extends CamelTestSupport {
  @Rule public EmbeddedActiveMQBroker broker=new EmbeddedActiveMQBroker();
  @Rule public MllpClientResource mllpClient=new MllpClientResource();
  @EndpointInject(uri="mock://result") MockEndpoint result;
  @EndpointInject(uri="mock://on-complete-only") MockEndpoint complete;
  @EndpointInject(uri="mock://on-failure-only") MockEndpoint failure;
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=(DefaultCamelContext)super.createCamelContext();
    context.setUseMDCLogging(true);
    context.setName(this.getClass().getSimpleName());
    return context;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    SjmsComponent target=new SjmsComponent();
    target.setConnectionFactory(new ActiveMQConnectionFactory(broker.getVmURL()));
    registry.bind("target",target);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder(){
    mllpClient.setMllpHost("localhost");
    mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());
    return new RouteBuilder(){
      int connectTimeout=500;
      int responseTimeout=5000;
      @Override public void configure() throws Exception {
        String routeId="mllp-test-receiver-route";
        onCompletion().onCompleteOnly().log(LoggingLevel.INFO,routeId,"Test route complete").to(complete);
        onCompletion().onFailureOnly().log(LoggingLevel.INFO,routeId,"Test route failed").to(failure);
        fromF("mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d",mllpClient.getMllpHost(),mllpClient.getMllpPort(),connectTimeout,responseTimeout).routeId(routeId).log(LoggingLevel.INFO,routeId,"Test route received message").to("target://test-queue?transacted=true");
        from("target://test-queue").routeId("jms-consumer").log(LoggingLevel.INFO,routeId,"Test JMS Consumer received message").to(result);
      }
    }
;
  }
  @Test public void testReceiveSingleMessage() throws Exception {
    result.expectedMessageCount(1);
    complete.expectedMessageCount(1);
    failure.expectedMessageCount(0);
    mllpClient.connect();
    mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(),10000);
    assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
  }
  @Test public void testAcknowledgementWriteFailure() throws Exception {
    result.expectedMessageCount(0);
    result.setAssertPeriod(1000);
    complete.expectedMessageCount(0);
    failure.expectedMessageCount(1);
    mllpClient.connect();
    mllpClient.setDisconnectMethod(MllpClientResource.DisconnectMethod.RESET);
    mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage(),true);
    assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
  }
}
