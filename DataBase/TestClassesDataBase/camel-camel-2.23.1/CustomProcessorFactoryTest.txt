/** 
 * @version 
 */
public class CustomProcessorFactoryTest extends ContextTestSupport {
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setProcessorFactory(new MyFactory());
    return context;
  }
  @Test public void testAlterDefinitionUsingProcessorFactory() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("body was altered");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAlterDefinitionUsingProcessorFactoryWithChild() throws Exception {
    getMockEndpoint("mock:split").expectedBodiesReceived("body was altered","body was altered");
    getMockEndpoint("mock:extra").expectedBodiesReceived("body was altered","body was altered");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello,World");
    template.sendBody("direct:foo","Hello,World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setBody().constant("body not altered").to("mock:foo");
        from("direct:foo").split(body()).setBody().constant("body not altered").to("mock:split").end().to("mock:result");
      }
    }
;
  }
public static class MyFactory implements ProcessorFactory {
    public Processor createChildProcessor(    RouteContext routeContext,    ProcessorDefinition<?> definition,    boolean mandatory) throws Exception {
      return null;
    }
    public Processor createProcessor(    RouteContext routeContext,    ProcessorDefinition<?> definition) throws Exception {
      if (definition instanceof SplitDefinition) {
        SplitDefinition split=(SplitDefinition)definition;
        split.addOutput(new ToDefinition("mock:extra"));
      }
      if (definition instanceof SetBodyDefinition) {
        SetBodyDefinition set=(SetBodyDefinition)definition;
        set.setExpression(new ConstantExpression("body was altered"));
      }
      return null;
    }
  }
}
