/** 
 * The new Async API version of doing async routing based on the old AsyncProcessor API In the old SedaAsyncProcessorTest a seda endpoint was needed to really turn it into async. This is not needed by the new API so we send it using direct instead.
 * @version 
 */
public class SedaAsyncProducerTest extends ContextTestSupport {
  private String route="";
  @Test public void testAsyncProducer() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    Future<String> future=template.asyncRequestBody("direct:start","Hello World",String.class);
    route=route + "send";
    assertMockEndpointsSatisfied();
    assertEquals("Send should occur before processor","sendprocess",route);
    String response=future.get();
    assertEquals("Bye World",response);
  }
  @Test public void testAsyncProducerWait() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("Hello World");
    exchange.setPattern(ExchangePattern.InOut);
    exchange.setProperty(Exchange.ASYNC_WAIT,WaitForTaskToComplete.IfReplyExpected);
    template.send("direct:start",exchange);
    route=route + "send";
    assertMockEndpointsSatisfied();
    assertEquals("Send should occur before processor","processsend",route);
    String response=exchange.getOut().getBody(String.class);
    assertEquals("Bye World",response);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(noErrorHandler());
        from("direct:start").delay(100).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            route=route + "process";
            exchange.getOut().setBody("Bye World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
