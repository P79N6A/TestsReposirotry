/** 
 */
public class ElSqlConsumerDeleteTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  private JdbcTemplate jdbcTemplate;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    jdbcTemplate=new JdbcTemplate(db);
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testConsume() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    assertMockEndpointsSatisfied();
    List<Exchange> exchanges=mock.getReceivedExchanges();
    assertEquals(3,exchanges.size());
    assertEquals(1,exchanges.get(0).getIn().getBody(Map.class).get("ID"));
    assertEquals("Camel",exchanges.get(0).getIn().getBody(Map.class).get("PROJECT"));
    assertEquals(2,exchanges.get(1).getIn().getBody(Map.class).get("ID"));
    assertEquals("AMQ",exchanges.get(1).getIn().getBody(Map.class).get("PROJECT"));
    assertEquals(3,exchanges.get(2).getIn().getBody(Map.class).get("ID"));
    assertEquals("Linux",exchanges.get(2).getIn().getBody(Map.class).get("PROJECT"));
    for (int i=0; i < 5; i++) {
      Thread.sleep(1000);
      int rows=jdbcTemplate.queryForObject("select count(*) from projects",Integer.class);
      if (rows == 0) {
        break;
      }
    }
    assertEquals("Should have deleted all 3 rows",new Integer(0),jdbcTemplate.queryForObject("select count(*) from projects",Integer.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("elsql",ElsqlComponent.class).setDataSource(db);
        getContext().getComponent("elsql",ElsqlComponent.class).setResourceUri("elsql/projects.elsql,elsql/delete.elsql");
        from("elsql:allProjects?consumer.onConsume=deleteProject").to("mock:result");
      }
    }
;
  }
}
