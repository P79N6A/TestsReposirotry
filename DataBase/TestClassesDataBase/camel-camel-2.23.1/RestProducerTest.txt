public class RestProducerTest {
  private CamelContext camelContext=new DefaultCamelContext();
  @Test public void shouldCreateDefinedQueryParameters() throws UnsupportedEncodingException, URISyntaxException {
    assertEquals("param=value",RestProducer.createQueryParameters("param=value",null));
  }
  @Test public void shouldCreateOptionalPlaceholderQueryParametersForPresentValues() throws UnsupportedEncodingException, URISyntaxException {
    final DefaultMessage message=new DefaultMessage(camelContext);
    message.setHeader("paramPlaceholderName","paramValue");
    assertEquals("param=paramValue",RestProducer.createQueryParameters("param={paramPlaceholderName?}",message));
  }
  @Test public void shouldCreatePlaceholderQueryParameters() throws UnsupportedEncodingException, URISyntaxException {
    final DefaultMessage message=new DefaultMessage(camelContext);
    message.setHeader("paramPlaceholderName","paramValue");
    assertEquals("param=paramValue",RestProducer.createQueryParameters("param={paramPlaceholderName}",message));
  }
  @Test public void shouldCreateQueryNoParameters() throws UnsupportedEncodingException, URISyntaxException {
    assertNull(RestProducer.createQueryParameters(null,null));
  }
  @Test public void shouldNotCreateOptionalPlaceholderQueryParametersForMissingValues() throws UnsupportedEncodingException, URISyntaxException {
    final DefaultMessage message=new DefaultMessage(camelContext);
    assertEquals("",RestProducer.createQueryParameters("param={paramPlaceholderName?}",message));
  }
  @Test public void shouldSupportAllCombinations() throws UnsupportedEncodingException, URISyntaxException {
    final DefaultMessage message=new DefaultMessage(camelContext);
    message.setHeader("requiredParamPlaceholder","header_required_value");
    message.setHeader("optionalPresentParamPlaceholder","header_optional_present_value");
    assertEquals("given=value&required=header_required_value&optional_present=header_optional_present_value",RestProducer.createQueryParameters("given=value&required={requiredParamPlaceholder}&optional={optionalParamPlaceholder?}&optional_present={optionalPresentParamPlaceholder?}",message));
  }
}
