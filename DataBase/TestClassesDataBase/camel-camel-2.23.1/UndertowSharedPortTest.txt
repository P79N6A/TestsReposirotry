public class UndertowSharedPortTest extends BaseUndertowTest {
  private static final Logger LOG=LoggerFactory.getLogger(UndertowSharedPortTest.class);
  @Test public void testFirstPath() throws Exception {
    testPath("first");
  }
  @Test public void testSecondPath() throws Exception {
    testPath("second");
  }
  private void testPath(  String pathSuffix) throws InterruptedException {
    MockEndpoint mockEndpoint=getMockEndpoint("mock:" + pathSuffix);
    mockEndpoint.expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    LOG.debug("Number of exchanges in mock:myapp " + mockEndpoint.getExchanges().size());
    String response=template.requestBody("undertow:http://localhost:{{port}}/" + pathSuffix,"Hello Camel!",String.class);
    assertNotNull(response);
    assertEquals("Bye Camel! " + pathSuffix,response);
    mockEndpoint.assertIsSatisfied();
    for (    Exchange exchange : mockEndpoint.getExchanges()) {
      assertEquals("Bye Camel! " + pathSuffix,exchange.getIn().getBody(String.class));
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("undertow:http://localhost:{{port}}/first").transform().constant("Bye Camel! first").to("mock:first");
        from("undertow:http://localhost:{{port}}/second").transform().constant("Bye Camel! second").to("mock:second");
      }
    }
;
  }
}
