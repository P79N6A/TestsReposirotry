public class DomFinderTest {
  private DomFinder domFinder;
  @Test public void testFindElementsAndTypes() throws Exception {
    Document document=XmlHelper.buildNamespaceAwareDocument(ResourceUtils.getResourceAsFile("xmls/3_elements.xml"));
    XPath xPath=XmlHelper.buildXPath(new CamelSpringNamespace());
    domFinder=new DomFinder(document,xPath);
    NodeList elements=domFinder.findElementsAndTypes();
    assertEquals(3,elements.getLength());
  }
  @Test public void testFindAttributesElements() throws Exception {
    Document document=XmlHelper.buildNamespaceAwareDocument(ResourceUtils.getResourceAsFile("xmls/complex_type.xml"));
    XPath xPath=XmlHelper.buildXPath(new CamelSpringNamespace());
    domFinder=new DomFinder(document,xPath);
    NodeList attributesList=domFinder.findAttributesElements("interceptSendToEndpointDefinition");
    assertEquals(2,attributesList.getLength());
    assertEquals("uri",((Element)attributesList.item(0)).getAttribute(Constants.NAME_ATTRIBUTE_NAME));
    assertEquals("skipSendToOriginalEndpoint",((Element)attributesList.item(1)).getAttribute(Constants.NAME_ATTRIBUTE_NAME));
  }
  @Test public void testFindBaseType() throws Exception {
    Document document=XmlHelper.buildNamespaceAwareDocument(ResourceUtils.getResourceAsFile("xmls/complex_type_w_parent.xml"));
    XPath xPath=XmlHelper.buildXPath(new CamelSpringNamespace());
    domFinder=new DomFinder(document,xPath);
    String baseTypeName=domFinder.findBaseType("keyManagersParametersFactoryBean");
    assertEquals("tns:abstractKeyManagersParametersFactoryBean",baseTypeName);
  }
}
