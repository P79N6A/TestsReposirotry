/** 
 * Tests that key ordering for the Maps (rows) is preserved.
 */
public class JdbcRouteKeyOrderingTest extends JdbcRouteTest {
  @SuppressWarnings("unchecked") @Test @Override public void testJdbcRoutes() throws Exception {
    Endpoint endpoint=context.getEndpoint("direct:hello");
    for (int i=0; i < 10; i++) {
      Exchange exchange=endpoint.createExchange();
      exchange.getIn().setBody("select * from customer order by ID");
      Exchange out=template.send(endpoint,exchange);
      assertNotNull(out);
      assertNotNull(out.getOut());
      List<Map<String,Object>> rowList=out.getOut().getBody(List.class);
      assertNotNull("out body could not be converted to a List - was: " + out.getOut().getBody(),rowList);
      assertEquals(3,rowList.size());
      Map<String,Object> row=rowList.get(0);
      assertTrue("ordering not preserved " + row.keySet(),isOrdered(row.keySet()));
      row=rowList.get(1);
      assertTrue("ordering not preserved " + row.keySet(),isOrdered(row.keySet()));
    }
  }
  /** 
 * @param keySet (should have 2 items "ID" & "NAME")
 * @return true if "ID" comes before "NAME", false otherwise
 */
  private static boolean isOrdered(  Set<String> keySet){
    final String msg="isOrdered() relies on \"ID\" & \"NAME\" being the only two fields";
    assertTrue(msg,keySet.contains("ID"));
    assertTrue(msg,keySet.contains("NAME"));
    assertEquals(msg,2,keySet.size());
    final Iterator<String> iter=keySet.iterator();
    return "ID".equals(iter.next()) && "NAME".equals(iter.next());
  }
}
