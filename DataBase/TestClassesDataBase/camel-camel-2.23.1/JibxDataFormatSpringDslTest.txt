public class JibxDataFormatSpringDslTest extends CamelTestSupport {
  @Test public void testMarshall() throws InterruptedException, ParserConfigurationException, IOException, SAXException {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    PurchaseOrder purchaseOrder=new PurchaseOrder();
    String name="foo";
    purchaseOrder.setName(name);
    double price=49;
    purchaseOrder.setPrice(price);
    double amount=3;
    purchaseOrder.setAmount(amount);
    template.sendBody("direct:marshall",purchaseOrder);
    assertMockEndpointsSatisfied();
    String body=mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Element root=builder.parse(new InputSource(new StringReader(body))).getDocumentElement();
    assertEquals(name,root.getAttribute("name"));
    assertEquals(price + "",root.getAttribute("price"));
    assertEquals(amount + "",root.getAttribute("amount"));
  }
  @Test public void testUnmarshall() throws InterruptedException, ParserConfigurationException, IOException, SAXException {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    String name="foo";
    double price=1;
    double amount=2;
    String purchaseOrderXml=String.format("<order name='%s' price='%s' amount='%s' />",name,price + "",amount + "");
    template.sendBody("direct:unmarshall",purchaseOrderXml);
    assertMockEndpointsSatisfied();
    PurchaseOrder body=mock.getReceivedExchanges().get(0).getIn().getBody(PurchaseOrder.class);
    assertEquals(name,body.getName());
    assertEquals(price,body.getPrice(),1);
    assertEquals(amount,body.getAmount(),1);
  }
  protected CamelContext createCamelContext() throws Exception {
    setUseRouteBuilder(false);
    final AbstractXmlApplicationContext applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/dataformat/jibx/SpringJibxConfigurationTest.xml");
    setCamelContextService(new Service(){
      public void start() throws Exception {
        applicationContext.start();
      }
      public void stop() throws Exception {
        applicationContext.stop();
      }
    }
);
    return SpringCamelContext.springCamelContext(applicationContext);
  }
}
