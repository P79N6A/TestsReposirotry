public class DynamicRouterOnExceptionTest extends ContextTestSupport {
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:end").expectedMessageCount(1);
    MockEndpoint route=getMockEndpoint("mock:route");
    route.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testException() throws Exception {
    getMockEndpoint("mock:end").expectedMessageCount(1);
    MockEndpoint route=getMockEndpoint("mock:route");
    route.whenExchangeReceived(1,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.setException(new IllegalArgumentException("Forced"));
      }
    }
);
    route.whenExchangeReceived(2,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Bye World");
      }
    }
);
    route.expectedMessageCount(2);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testExceptionTwo() throws Exception {
    getMockEndpoint("mock:end").expectedMessageCount(2);
    MockEndpoint route=getMockEndpoint("mock:route");
    route.whenExchangeReceived(1,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.setException(new IllegalArgumentException("Forced"));
      }
    }
);
    route.whenExchangeReceived(2,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Bye World");
      }
    }
);
    route.whenExchangeReceived(3,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.setException(new IllegalArgumentException("Forced"));
      }
    }
);
    route.whenExchangeReceived(4,new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Bye World");
      }
    }
);
    route.expectedMessageCount(4);
    template.sendBody("direct:start","Hello World");
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).redeliveryDelay(0).maximumRedeliveries(5);
        from("direct:start").dynamicRouter(method(DynamicRouterOnExceptionTest.class,"whereTo")).to("mock:end");
      }
    }
;
  }
  public static String whereTo(  Exchange exchange){
    Boolean invoked=exchange.getProperty("invoked",Boolean.class);
    if (invoked == null) {
      exchange.setProperty("invoked",true);
      return "mock:route";
    }
 else {
      return null;
    }
  }
}
