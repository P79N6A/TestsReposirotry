@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class XmlToJsonTest {
  private static final String ABC_ORDER_PATH="org/apache/camel/component/dozer/abc-order.xml";
  private static final String XYZ_ORDER_PATH="org/apache/camel/component/dozer/xyz-order.json";
  @EndpointInject(uri="mock:result") private MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") private ProducerTemplate startEndpoint;
  @Autowired private CamelContext camelContext;
  @After public void tearDown(){
    resultEndpoint.reset();
  }
  @Test public void testXmlToJson() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    startEndpoint.sendBody(getResourceAsString(ABC_ORDER_PATH));
    resultEndpoint.assertIsSatisfied();
    String result=resultEndpoint.getExchanges().get(0).getIn().getBody(String.class);
    Assert.assertEquals(getResourceAsString(XYZ_ORDER_PATH),result);
  }
  @Test public void testMultipleSends() throws Exception {
    resultEndpoint.expectedMessageCount(2);
    startEndpoint.sendBody(getResourceAsString(ABC_ORDER_PATH));
    startEndpoint.sendBody(getResourceAsString(ABC_ORDER_PATH));
    resultEndpoint.assertIsSatisfied();
    String result1=resultEndpoint.getExchanges().get(0).getIn().getBody(String.class);
    String result2=resultEndpoint.getExchanges().get(1).getIn().getBody(String.class);
    Assert.assertEquals(getResourceAsString(XYZ_ORDER_PATH),result1);
    Assert.assertEquals(getResourceAsString(XYZ_ORDER_PATH),result2);
  }
  private String getResourceAsString(  String resourcePath){
    InputStream is=getClass().getClassLoader().getResourceAsStream(resourcePath);
    return camelContext.getTypeConverter().convertTo(String.class,is);
  }
}
