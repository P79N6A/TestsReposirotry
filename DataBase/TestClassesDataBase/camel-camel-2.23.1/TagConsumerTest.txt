public class TagConsumerTest extends GitHubComponentTestBase {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from("github://tag?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo").process(new RepositoryTagProcessor()).to(mockResultEndpoint);
      }
    }
;
  }
  @Test public void tagConsumerTest() throws Exception {
    RepositoryTag tag1=repositoryService.addTag("TAG1");
    RepositoryTag tag2=repositoryService.addTag("TAG2");
    RepositoryTag tag3=repositoryService.addTag("TAG3");
    mockResultEndpoint.expectedBodiesReceivedInAnyOrder(tag1,tag2,tag3);
    Thread.sleep(1 * 1000);
    mockResultEndpoint.assertIsSatisfied();
  }
public class RepositoryTagProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      RepositoryTag tag=(RepositoryTag)in.getBody();
      log.debug("Got TAG  [" + tag.getName() + "]");
    }
  }
}
