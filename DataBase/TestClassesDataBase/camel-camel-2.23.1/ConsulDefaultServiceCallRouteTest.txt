public class ConsulDefaultServiceCallRouteTest extends ConsulTestSupport {
  private static final String SERVICE_NAME="http-service";
  private static final int SERVICE_COUNT=5;
  private static final int SERVICE_PORT_BASE=8080;
  private AgentClient client;
  private List<Registration> registrations;
  private List<String> expectedBodies;
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    client=getConsul().agentClient();
    registrations=new ArrayList<>(SERVICE_COUNT);
    expectedBodies=new ArrayList<>(SERVICE_COUNT);
    for (int i=0; i < SERVICE_COUNT; i++) {
      Registration r=ImmutableRegistration.builder().id("service-" + i).name(SERVICE_NAME).address("127.0.0.1").port(SERVICE_PORT_BASE + i).build();
      client.register(r);
      registrations.add(r);
      expectedBodies.add("ping on " + r.getPort().get());
    }
  }
  @Override public void doPostTearDown() throws Exception {
    super.doPostTearDown();
    registrations.forEach(r -> client.deregister(r.getId()));
  }
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(SERVICE_COUNT);
    getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder(expectedBodies);
    registrations.forEach(r -> template.sendBody("direct:start","ping"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").serviceCall().name(SERVICE_NAME).component("jetty").defaultLoadBalancer().consulServiceDiscovery().url(consulUrl()).endParent().to("log:org.apache.camel.component.consul.cloud?level=INFO&showAll=true&multiline=true").to("mock:result");
        registrations.forEach(r -> fromF("jetty:http://%s:%d",r.getAddress().get(),r.getPort().get()).transform().simple("${in.body} on " + r.getPort().get()));
      }
    }
;
  }
}
