/** 
 * To test CAMEL-4118 support for completing all aggregation groups with a signal message
 */
public class AggregateForceCompletionHeaderTest extends ContextTestSupport {
  @Test public void testForceCompletionTrueExclusive() throws Exception {
    getMockEndpoint("mock:aggregated").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","test1","id","1");
    template.sendBodyAndHeader("direct:start","test2","id","2");
    template.sendBodyAndHeader("direct:start","test3","id","1");
    template.sendBodyAndHeader("direct:start","test4","id","2");
    assertMockEndpointsSatisfied();
    getMockEndpoint("mock:aggregated").expectedMessageCount(2);
    getMockEndpoint("mock:aggregated").expectedBodiesReceivedInAnyOrder("test1test3","test2test4");
    getMockEndpoint("mock:aggregated").expectedPropertyReceived(Exchange.AGGREGATED_COMPLETED_BY,"force");
    getMockEndpoint("mock:aggregated").allMessages().header(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS).isNull();
    template.sendBodyAndHeader("direct:start","test5",Exchange.AGGREGATION_COMPLETE_ALL_GROUPS,true);
    assertMockEndpointsSatisfied();
  }
  @Test public void testForceCompletionTrueInclusive() throws Exception {
    getMockEndpoint("mock:aggregated").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","test1","id","1");
    template.sendBodyAndHeader("direct:start","test2","id","2");
    template.sendBodyAndHeader("direct:start","test3","id","1");
    template.sendBodyAndHeader("direct:start","test4","id","2");
    assertMockEndpointsSatisfied();
    getMockEndpoint("mock:aggregated").expectedMessageCount(3);
    getMockEndpoint("mock:aggregated").expectedBodiesReceivedInAnyOrder("test1test3","test2test4","test5");
    getMockEndpoint("mock:aggregated").expectedPropertyReceived(Exchange.AGGREGATED_COMPLETED_BY,"force");
    getMockEndpoint("mock:aggregated").allMessages().header(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE).isNull();
    Map<String,Object> headers=new HashMap<>();
    headers.put("id","3");
    headers.put(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE,true);
    template.sendBodyAndHeaders("direct:start","test5",headers);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(10).to("mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
