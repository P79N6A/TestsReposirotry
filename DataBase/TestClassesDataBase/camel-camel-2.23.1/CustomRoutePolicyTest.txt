/** 
 * @version 
 */
public class CustomRoutePolicyTest extends ContextTestSupport {
  private final MyCustomRoutePolicy policy=new MyCustomRoutePolicy();
private static class MyCustomRoutePolicy extends RoutePolicySupport {
    private volatile AtomicBoolean stopped=new AtomicBoolean();
    @Override public void onExchangeDone(    Route route,    Exchange exchange){
      String body=exchange.getIn().getBody(String.class);
      if ("stop".equals(body)) {
        try {
          stopped.set(true);
          stopConsumer(route.getConsumer());
        }
 catch (        Exception e) {
          handleException(e);
        }
      }
    }
    public boolean isStopped(){
      return stopped.get();
    }
  }
  @Test public void testCustomPolicy() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedBodiesReceived("stop");
    template.sendBody("direct:foo","stop");
    assertMockEndpointsSatisfied();
    assertTrue("Should be stopped",policy.isStopped());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").routePolicy(policy).to("mock:result");
      }
    }
;
  }
}
