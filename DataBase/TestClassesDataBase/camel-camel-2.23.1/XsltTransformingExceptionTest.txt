/** 
 */
public class XsltTransformingExceptionTest extends ContextTestSupport {
  private static final String GOOD_XML_STRING="<name>Camel</name>";
  private static final String BAD_XML_STRING="<staff><programmer></programmer></staff>";
  @Test public void testXsltException() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBody("direct:start",BAD_XML_STRING);
      fail("Except a camel Execution exception here");
    }
 catch (    CamelExecutionException ex) {
      assertTrue(ex.getCause() instanceof javax.xml.transform.TransformerException);
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testXsltWithoutException() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    try {
      template.sendBody("direct:start",GOOD_XML_STRING);
      fail("Except a camel Execution exception here");
    }
 catch (    CamelExecutionException ex) {
      assertTrue(ex.getCause() instanceof javax.xml.transform.TransformerException);
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("xslt:org/apache/camel/component/xslt/transformCallEcho.xsl").to("mock:result");
      }
    }
;
  }
}
