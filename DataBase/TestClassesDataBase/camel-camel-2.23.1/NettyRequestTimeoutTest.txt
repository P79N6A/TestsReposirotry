/** 
 * @version 
 */
public class NettyRequestTimeoutTest extends BaseNettyTest {
  @Test public void testRequestTimeoutOK() throws Exception {
    String out=template.requestBody("netty4:tcp://localhost:{{port}}?textline=true&sync=true&requestTimeout=500","Hello Camel",String.class);
    assertEquals("Bye World",out);
  }
  @Test public void testRequestTimeout() throws Exception {
    try {
      template.requestBody("netty4:tcp://localhost:{{port}}?textline=true&sync=true&requestTimeout=100","Hello Camel",String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ReadTimeoutException cause=assertIsInstanceOf(ReadTimeoutException.class,e.getCause());
      assertNotNull(cause);
    }
  }
  @Test public void testRequestTimeoutViaHeader() throws Exception {
    try {
      template.requestBodyAndHeader("netty4:tcp://localhost:{{port}}?textline=true&sync=true","Hello Camel",NettyConstants.NETTY_REQUEST_TIMEOUT,100,String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ReadTimeoutException cause=assertIsInstanceOf(ReadTimeoutException.class,e.getCause());
      assertNotNull(cause);
    }
  }
  @Test public void testRequestTimeoutAndOk() throws Exception {
    try {
      template.requestBody("netty4:tcp://localhost:{{port}}?textline=true&sync=true&requestTimeout=100","Hello Camel",String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ReadTimeoutException cause=assertIsInstanceOf(ReadTimeoutException.class,e.getCause());
      assertNotNull(cause);
    }
    String out=template.requestBody("netty4:tcp://localhost:{{port}}?textline=true&sync=true&requestTimeout=100","Hello World",String.class);
    assertEquals("Bye World",out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if (body.contains("Camel")) {
              Thread.sleep(200);
            }
          }
        }
).transform().constant("Bye World");
      }
    }
;
  }
}
