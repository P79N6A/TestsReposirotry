private final class MyIdempotentRepo implements ExchangeIdempotentRepository<String> {
  private IdempotentRepository<String> delegate;
  private Set<String> exchanges=new LinkedHashSet<>();
  private MyIdempotentRepo(){
    delegate=MemoryIdempotentRepository.memoryIdempotentRepository(200);
  }
  @Override public boolean add(  Exchange exchange,  String key){
    exchanges.add(exchange.getExchangeId());
    return delegate.add(key);
  }
  @Override public boolean contains(  Exchange exchange,  String key){
    exchanges.add(exchange.getExchangeId());
    return delegate.contains(key);
  }
  @Override public boolean remove(  Exchange exchange,  String key){
    exchanges.add(exchange.getExchangeId());
    return delegate.remove(key);
  }
  @Override public boolean confirm(  Exchange exchange,  String key){
    exchanges.add(exchange.getExchangeId());
    return delegate.confirm(key);
  }
  @Override public void clear(){
    delegate.clear();
  }
  @Override public boolean add(  String key){
    throw new UnsupportedOperationException("Should not be called");
  }
  @Override public boolean contains(  String key){
    throw new UnsupportedOperationException("Should not be called");
  }
  @Override public boolean remove(  String key){
    throw new UnsupportedOperationException("Should not be called");
  }
  @Override public boolean confirm(  String key){
    throw new UnsupportedOperationException("Should not be called");
  }
  public Set<String> getExchange(){
    return exchanges;
  }
  @Override public void start() throws Exception {
  }
  @Override public void stop() throws Exception {
  }
}
