/** 
 * Unit test for exercising MTOM feature of a CxfConsumer in PAYLOAD mode
 * @version 
 */
@ContextConfiguration public class CxfMtomConsumerPayloadModeTest extends AbstractJUnit4SpringContextTests {
  static int port=CXFTestSupport.getPort1();
  @Autowired protected CamelContext context;
  @Test public void testConsumer() throws Exception {
    if (MtomTestHelper.isAwtHeadless(logger,null)) {
      return;
    }
    context.createProducerTemplate().send("cxf:bean:consumerEndpoint",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        assertEquals("Get a wrong Content-Type header","application/xop+xml",exchange.getIn().getHeader("Content-Type"));
        List<Source> elements=new ArrayList<>();
        elements.add(new DOMSource(StaxUtils.read(new StringReader(getRequestMessage())).getDocumentElement()));
        CxfPayload<SoapHeader> body=new CxfPayload<>(new ArrayList<SoapHeader>(),elements,null);
        exchange.getIn().setBody(body);
        exchange.getIn().addAttachment(MtomTestHelper.REQ_PHOTO_CID,new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA,"application/octet-stream")));
        exchange.getIn().addAttachment(MtomTestHelper.REQ_IMAGE_CID,new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg,"image/jpeg")));
      }
    }
);
  }
public static class MyProcessor implements Processor {
    @SuppressWarnings("unchecked") public void process(    Exchange exchange) throws Exception {
      CxfPayload<SoapHeader> in=exchange.getIn().getBody(CxfPayload.class);
      assertEquals(1,in.getBody().size());
      Map<String,String> ns=new HashMap<>();
      ns.put("ns",MtomTestHelper.SERVICE_TYPES_NS);
      ns.put("xop",MtomTestHelper.XOP_NS);
      XPathUtils xu=new XPathUtils(ns);
      Element body=new XmlConverter().toDOMElement(in.getBody().get(0));
      Element ele=(Element)xu.getValue("//ns:Detail/ns:photo/xop:Include",body,XPathConstants.NODE);
      String photoId=ele.getAttribute("href").substring(4);
      assertEquals(MtomTestHelper.REQ_PHOTO_CID,photoId);
      ele=(Element)xu.getValue("//ns:Detail/ns:image/xop:Include",body,XPathConstants.NODE);
      String imageId=ele.getAttribute("href").substring(4);
      assertEquals(MtomTestHelper.REQ_IMAGE_CID,imageId);
      DataHandler dr=exchange.getIn().getAttachment(photoId);
      assertEquals("application/octet-stream",dr.getContentType());
      MtomTestHelper.assertEquals(MtomTestHelper.REQ_PHOTO_DATA,IOUtils.readBytesFromStream(dr.getInputStream()));
      dr=exchange.getIn().getAttachment(imageId);
      assertEquals("image/jpeg",dr.getContentType());
      MtomTestHelper.assertEquals(MtomTestHelper.requestJpeg,IOUtils.readBytesFromStream(dr.getInputStream()));
      List<Source> elements=new ArrayList<>();
      elements.add(new DOMSource(StaxUtils.read(new StringReader(MtomTestHelper.RESP_MESSAGE)).getDocumentElement()));
      CxfPayload<SoapHeader> sbody=new CxfPayload<>(new ArrayList<SoapHeader>(),elements,null);
      exchange.getOut().setBody(sbody);
      exchange.getOut().addAttachment(MtomTestHelper.RESP_PHOTO_CID,new DataHandler(new ByteArrayDataSource(MtomTestHelper.RESP_PHOTO_DATA,"application/octet-stream")));
      exchange.getOut().addAttachment(MtomTestHelper.RESP_IMAGE_CID,new DataHandler(new ByteArrayDataSource(MtomTestHelper.responseJpeg,"image/jpeg")));
    }
  }
  protected String getRequestMessage(){
    return MtomTestHelper.REQ_MESSAGE;
  }
}
