public class FileConsumerIdempotentTest extends ContextTestSupport {
  private IdempotentRepository<String> repo;
  protected CamelContext createCamelContext() throws Exception {
    return createSpringCamelContext(this,"org/apache/camel/spring/processor/idempotent/fileConsumerIdempotentTest.xml");
  }
  @SuppressWarnings("unchecked") @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/fileidempotent");
    super.setUp();
    repo=context.getRegistry().lookupByNameAndType("fileStore",IdempotentRepository.class);
  }
  @Test public void testIdempotent() throws Exception {
    template.sendBodyAndHeader("file://target/fileidempotent/","Hello World",Exchange.FILE_NAME,"report.txt");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedMessageCount(0);
    mock.setResultMinimumWaitTime(50);
    File file=new File("target/fileidempotent/done/report.txt");
    File renamed=new File("target/fileidempotent/report.txt");
    file.renameTo(renamed);
    assertMockEndpointsSatisfied();
    String name=FileUtil.normalizePath(new File("target/fileidempotent/report.txt").getAbsolutePath());
    assertTrue("Should contain file: " + name,repo.contains(name));
  }
}
