public class UndertowComponentTest extends BaseUndertowTest {
  private static final Logger LOG=LoggerFactory.getLogger(UndertowComponentTest.class);
  @Test public void testUndertow() throws Exception {
    MockEndpoint mockEndpoint=getMockEndpoint("mock:myapp");
    mockEndpoint.expectedHeaderReceived(Exchange.HTTP_METHOD,"POST");
    LOG.debug("Number of exchanges in mock:myapp " + mockEndpoint.getExchanges().size());
    String response=template.requestBody("undertow:http://localhost:{{port}}/myapp","Hello Camel!",String.class);
    assertNotNull(response);
    assertEquals("Bye Camel!",response);
    mockEndpoint.assertIsSatisfied();
    for (    Exchange exchange : mockEndpoint.getExchanges()) {
      assertEquals("Bye Camel!",exchange.getIn().getBody(String.class));
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("undertow:http://localhost:{{port}}/myapp").transform().constant("Bye Camel!").to("mock:myapp");
      }
    }
;
  }
}
