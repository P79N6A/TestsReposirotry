/** 
 * Unit test for writing done files
 */
public class FilerConsumerDualDoneFileNameTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/done");
    super.setUp();
  }
  @Test public void testTwoDoneFile() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    template.sendBodyAndHeader("file:target/done?doneFileName=${file:name}.ready","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:target/done?doneFileName=${file:name}.ready","Bye World",Exchange.FILE_NAME,"bye.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOneDoneFileMissing() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/done?doneFileName=${file:name}.ready","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:target/done","Bye World",Exchange.FILE_NAME,"bye.txt");
    Thread.sleep(250);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/done?doneFileName=${file:name}.ready&initialDelay=0&delay=10").to("mock:result");
      }
    }
;
  }
}
