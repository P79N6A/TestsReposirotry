/** 
 * Schematron Producer Unit Test.
 */
public class SchematronProducerTest extends CamelTestSupport {
  private static SchematronProducer producer;
  @BeforeClass public static void setUP(){
    SchematronEndpoint endpoint=new SchematronEndpoint();
    TransformerFactory fac=new TransformerFactoryImpl();
    fac.setURIResolver(new ClassPathURIResolver(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR,endpoint.getUriResolver()));
    Templates templates=TemplatesFactory.newInstance().getTemplates(ClassLoader.getSystemResourceAsStream("sch/schematron-1.sch"),fac);
    endpoint.setRules(templates);
    producer=new SchematronProducer(endpoint);
  }
  @Test public void testProcessValidXML() throws Exception {
    Exchange exc=new DefaultExchange(context,ExchangePattern.InOut);
    exc.getIn().setBody(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"));
    producer.process(exc);
    assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.SUCCESS));
  }
  @Test public void testProcessInValidXML() throws Exception {
    Exchange exc=new DefaultExchange(context,ExchangePattern.InOut);
    exc.getIn().setBody(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"));
    producer.process(exc);
    assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.FAILED));
  }
  @Test public void testProcessValidXMLAsSource() throws Exception {
    Exchange exc=new DefaultExchange(context,ExchangePattern.InOut);
    exc.getIn().setBody(new SAXSource(getXMLReader(),new InputSource(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"))));
    producer.process(exc);
    assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.SUCCESS));
  }
  @Test public void testProcessInValidXMLAsSource() throws Exception {
    Exchange exc=new DefaultExchange(context,ExchangePattern.InOut);
    exc.getIn().setBody(new SAXSource(getXMLReader(),new InputSource(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"))));
    producer.process(exc);
    assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.FAILED));
  }
  private static XMLReader getXMLReader() throws ParserConfigurationException, SAXException {
    final SAXParserFactory fac=SAXParserFactory.newInstance();
    fac.setValidating(false);
    final SAXParser parser=fac.newSAXParser();
    XMLReader reader=parser.getXMLReader();
    return reader;
  }
}
