/** 
 * Tests the reception of messages without text having media content.
 */
public class TelegramConsumerMediaVideoTest extends TelegramTestSupport {
  @EndpointInject(uri="mock:telegram") private MockEndpoint endpoint;
  @Before public void mockAPIs(){
    TelegramService api=mockTelegramService();
    UpdateResult res=getJSONResource("messages/updates-media-video.json",UpdateResult.class);
    UpdateResult defaultRes=getJSONResource("messages/updates-empty.json",UpdateResult.class);
    when(api.getUpdates(any(),any(),any(),any())).thenReturn(res).thenAnswer((i) -> defaultRes);
  }
  @Test public void testReceptionOfAMessageWithAVideo() throws Exception {
    endpoint.expectedMinimumMessageCount(1);
    endpoint.assertIsSatisfied();
    Exchange mediaExchange=endpoint.getExchanges().get(0);
    IncomingMessage msg=mediaExchange.getIn().getBody(IncomingMessage.class);
    IncomingVideo video=msg.getVideo();
    assertNotNull(video);
    assertEquals(Integer.valueOf(2),video.getDurationSeconds());
    assertEquals(Integer.valueOf(360),video.getHeight());
    assertEquals(Integer.valueOf(640),video.getWidth());
    assertEquals(Long.valueOf(299284),video.getFileSize());
    assertEquals("BAADBAADAgADyzvwCC7_4AyvdAXXXX",video.getFileId());
    IncomingPhotoSize thumb=video.getThumb();
    assertNotNull(thumb);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("telegram:bots/mock-token").to("mock:telegram");
      }
    }
;
  }
}
