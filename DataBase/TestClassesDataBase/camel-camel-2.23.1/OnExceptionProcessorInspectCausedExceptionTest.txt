/** 
 * Unit test for using a processor to peek the caused exception
 */
public class OnExceptionProcessorInspectCausedExceptionTest extends ContextTestSupport {
  @Test public void testInspectExceptionByProcessor() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:myerror").expectedMessageCount(1);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should throw exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3));
        onException(MyFunctionalException.class).process(new MyFunctionFailureHandler()).stop();
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new MyFunctionalException("Sorry you cannot do this");
          }
        }
);
      }
    }
;
  }
public static class MyFunctionFailureHandler implements Processor {
    public void process(    Exchange exchange) throws Exception {
      Throwable caused=exchange.getProperty(Exchange.EXCEPTION_CAUGHT,Throwable.class);
      assertNotNull(caused);
      exchange.getContext().createProducerTemplate().send("mock:myerror",exchange);
    }
  }
}
