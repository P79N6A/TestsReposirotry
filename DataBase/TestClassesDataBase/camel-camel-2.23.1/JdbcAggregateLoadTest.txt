public class JdbcAggregateLoadTest extends AbstractJdbcAggregationTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(JdbcAggregateLoadTest.class);
  private static final int SIZE=500;
  @Test public void testLoadTestJdbcAggregate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.setResultWaitTime(50 * 1000);
    LOG.info("Staring to send " + SIZE + " messages.");
    for (int i=0; i < SIZE; i++) {
      final int value=1;
      char id='A';
      LOG.debug("Sending {} with id {}",value,id);
      template.sendBodyAndHeader("seda:start?size=" + SIZE,value,"id","" + id);
    }
    LOG.info("Sending all " + SIZE + " message done. Now waiting for aggregation to complete.");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start?size=" + SIZE).to("log:input?groupSize=500").aggregate(header("id"),new MyAggregationStrategy()).aggregationRepository(repo).completionSize(SIZE).to("log:output?showHeaders=true").to("mock:result").end();
      }
    }
;
  }
}
