/** 
 * Unit test for the file filter option
 */
public class FileConsumerFileFilterTest extends ContextTestSupport {
  private String fileUrl="file://target/filefilter/?initialDelay=0&delay=10&filter=#myFilter";
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myFilter",new MyFileFilter<>());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filefilter");
    super.setUp();
  }
  @Test public void testFilterFiles() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    template.sendBodyAndHeader("file:target/filefilter/","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    mock.setResultWaitTime(100);
    mock.assertIsSatisfied();
  }
  @Test public void testFilterFilesWithARegularFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/filefilter/","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    template.sendBodyAndHeader("file:target/filefilter/","Hello World",Exchange.FILE_NAME,"hello.txt");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
public class MyFileFilter<T> implements GenericFileFilter<T> {
    public boolean accept(    GenericFile<T> file){
      if (file.isDirectory()) {
        return true;
      }
      return !file.getFileName().startsWith("skip");
    }
  }
}
