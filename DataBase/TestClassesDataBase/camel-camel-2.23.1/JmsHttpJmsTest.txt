/** 
 * Based on user forum.
 * @version 
 */
public class JmsHttpJmsTest extends CamelTestSupport {
  private int port;
  @Test public void testJmsHttpJms() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Bye World");
    template.sendBody("jms:in","Hello World");
    Endpoint endpoint=context.getEndpoint("jms:out");
    endpoint.createConsumer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        assertEquals("Bye World",exchange.getIn().getBody(String.class));
      }
    }
);
    mock.assertIsSatisfied();
  }
  @Test public void testResultReplyJms() throws Exception {
    Exchange exchange=template.request("jms:reply?replyTo=bar",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
      }
    }
);
    assertEquals("Bye World",exchange.getOut().getBody(String.class));
    assertTrue("Should have headers",exchange.getOut().hasHeaders());
    assertEquals("queue://bar",exchange.getOut().getHeader("JMSReplyTo",String.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    port=AvailablePortFinder.getNextAvailable(8000);
    return new RouteBuilder(){
      public void configure(){
        from("jms:in").to("http://localhost:" + port + "/myservice").convertBodyTo(String.class).to("jms:out","mock:result");
        from("jms:reply").to("http://localhost:" + port + "/myservice");
        from("jetty:http://0.0.0.0:" + port + "/myservice").transform().constant("Bye World");
      }
    }
;
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    JmsComponent amq=jmsComponentAutoAcknowledge(connectionFactory);
    amq.setCamelContext(context);
    answer.bind("jms",amq);
    return answer;
  }
}
