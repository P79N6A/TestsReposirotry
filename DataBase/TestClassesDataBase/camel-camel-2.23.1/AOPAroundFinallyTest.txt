/** 
 * @version 
 */
public class AOPAroundFinallyTest extends ContextTestSupport {
  @Test public void testAOPAroundFinally() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:after").message(0).body().isEqualTo("Bye World");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    String out=template.requestBody("direct:start","Hello World",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testAOPAroundFinallyWithException() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:after").message(0).body().isEqualTo("Kaboom the World");
    try {
      template.requestBody("direct:start","Kaboom",String.class);
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Damn",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @SuppressWarnings("deprecation") @Override public void configure() throws Exception {
        from("direct:start").aop().aroundFinally("mock:before","mock:after").choice().when(body().isEqualTo("Hello World")).transform(constant("Bye World")).otherwise().transform(constant("Kaboom the World")).throwException(new IllegalArgumentException("Damn")).end().to("mock:result");
      }
    }
;
  }
}
