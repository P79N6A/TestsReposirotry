/** 
 * @version 
 */
public class SplitterParallelNoStopOnExceptionTest extends ContextTestSupport {
  private ExecutorService service;
  @Before public void setUp() throws Exception {
    service=Executors.newFixedThreadPool(2);
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    service.shutdownNow();
  }
  @Test public void testSplitParallelNoStopOnExceptionOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceivedInAnyOrder("Hello World","Bye World","Hi World");
    template.sendBody("direct:start","Hello World,Bye World,Hi World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitParallelNoStopOnExceptionStop() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedMinimumMessageCount(0);
    mock.allMessages().body().isNotEqualTo("Kaboom");
    mock.expectedBodiesReceivedInAnyOrder("Hello World","Goodday World","Bye World","Hi World");
    try {
      template.sendBody("direct:start","Hello World,Goodday World,Kaboom,Bye World,Hi World");
      fail("Should thrown an exception");
    }
 catch (    CamelExecutionException e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Forced",cause.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).parallelProcessing().executorService(service).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("Kaboom".equals(body)) {
              throw new IllegalArgumentException("Forced");
            }
          }
        }
).to("mock:split");
      }
    }
;
  }
}
