/** 
 * @version 
 */
public class BeanWithPropertiesAndHeadersAndBodyInjectionTest extends ContextTestSupport {
  protected MyBean myBean=new MyBean();
  @Test public void testSendMessage() throws Exception {
    Exchange out=template.send("direct:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty("p1","abc");
        exchange.setProperty("p2",123);
        Message in=exchange.getIn();
        in.setHeader("h1","xyz");
        in.setHeader("h2",456);
        in.setBody("TheBody");
      }
    }
);
    assertEquals("Should not fail",false,out.isFailed());
    Map<?,?> foo=myBean.foo;
    Map<?,?> bar=myBean.bar;
    assertNotNull("myBean.foo",foo);
    assertNotNull("myBean.bar",bar);
    assertEquals("foo.p1","abc",foo.get("p1"));
    assertEquals("foo.p2",123,foo.get("p2"));
    assertEquals("bar.h1","xyz",bar.get("h1"));
    assertEquals("bar.h2",456,bar.get("h2"));
    assertEquals("body","TheBody",myBean.body);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").bean("myBean");
      }
    }
;
  }
public static class MyBean {
    private Map<?,?> foo;
    private Map<?,?> bar;
    private String body;
    @Override public String toString(){
      return "MyBean[foo: " + foo + " bar: "+ bar+ " body: "+ body+ "]";
    }
    public void myMethod(    @ExchangeProperties Map<?,?> foo,    @Headers Map<?,?> bar,    @Body String body){
      this.foo=foo;
      this.bar=bar;
      this.body=body;
      assertNotNull(toString());
    }
  }
}
