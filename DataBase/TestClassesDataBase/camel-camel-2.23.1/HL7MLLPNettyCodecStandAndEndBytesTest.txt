/** 
 * Unit test for the HL7MLLP Codec using different start and end bytes.
 */
public class HL7MLLPNettyCodecStandAndEndBytesTest extends HL7TestSupport {
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    HL7MLLPNettyDecoderFactory decoder=new HL7MLLPNettyDecoderFactory();
    decoder.setCharset("iso-8859-1");
    decoder.setStartByte('*');
    decoder.setEndByte1('#');
    decoder.setEndByte2('*');
    decoder.setConvertLFtoCR(false);
    jndi.bind("hl7decoder",decoder);
    HL7MLLPNettyEncoderFactory encoder=new HL7MLLPNettyEncoderFactory();
    encoder.setCharset("iso-8859-1");
    encoder.setStartByte('*');
    encoder.setEndByte1('#');
    encoder.setEndByte2('*');
    encoder.setConvertLFtoCR(false);
    jndi.bind("hl7encoder",encoder);
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Message input=exchange.getIn().getBody(Message.class);
            assertEquals("2.4",input.getVersion());
            QRD qrd=(QRD)input.get("QRD");
            assertEquals("0101701234",qrd.getWhoSubjectFilter(0).getIDNumber().getValue());
            Message response=createHL7AsMessage();
            exchange.getOut().setBody(response);
          }
        }
).to("mock:result");
      }
    }
;
  }
  @Test public void testSendHL7Message() throws Exception {
    String line1="MSH|^~\\&|MYSENDER|MYRECEIVER|MYAPPLICATION||200612211200||QRY^A19|1234|P|2.4";
    String line2="QRD|200612211200|R|I|GetPatient|||1^RD|0101701234|DEM||";
    StringBuilder in=new StringBuilder();
    in.append(line1);
    in.append("\r");
    in.append(line2);
    String out=template.requestBody("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder",in.toString(),String.class);
    String[] lines=out.split("\r");
    assertEquals("MSH|^~\\&|MYSENDER||||200701011539||ADR^A19||||123",lines[0]);
    assertEquals("MSA|AA|123",lines[1]);
  }
  private static Message createHL7AsMessage() throws Exception {
    ADR_A19 adr=new ADR_A19();
    MSH mshSegment=adr.getMSH();
    mshSegment.getFieldSeparator().setValue("|");
    mshSegment.getEncodingCharacters().setValue("^~\\&");
    mshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue("200701011539");
    mshSegment.getSendingApplication().getNamespaceID().setValue("MYSENDER");
    mshSegment.getSequenceNumber().setValue("123");
    mshSegment.getMessageType().getMessageType().setValue("ADR");
    mshSegment.getMessageType().getTriggerEvent().setValue("A19");
    MSA msa=adr.getMSA();
    msa.getAcknowledgementCode().setValue("AA");
    msa.getMessageControlID().setValue("123");
    QRD qrd=adr.getQRD();
    qrd.getQueryDateTime().getTimeOfAnEvent().setValue("20080805120000");
    return adr;
  }
}
