/** 
 * @version 
 */
public class ValidateSimpleTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start",Endpoint.class);
    resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
  }
  @Test public void testSendMatchingMessage() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    template.sendBody(startEndpoint,"Hello Camel");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendNotMatchingMessage() throws Exception {
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBody(startEndpoint,"Bye World");
      fail("CamelExecutionException expected");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(PredicateValidationException.class,e.getCause());
      String s="Validation failed for Predicate[Simple: ${body} contains 'Camel'].";
      assertTrue(e.getCause().getMessage().startsWith(s));
    }
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").validate().simple("${body} contains 'Camel'").to("mock:result");
      }
    }
;
  }
}
