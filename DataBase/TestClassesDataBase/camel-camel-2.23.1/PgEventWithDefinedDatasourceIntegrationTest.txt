public class PgEventWithDefinedDatasourceIntegrationTest extends AbstractPgEventIntegrationTest {
  @EndpointInject(uri="pgevent:///{{database}}/testchannel?datasource=#pgDataSource") private Endpoint subscribeEndpoint;
  @EndpointInject(uri="pgevent:///{{database}}/testchannel?datasource=#pgDataSource") private Endpoint notifyEndpoint;
  @EndpointInject(uri="timer://test?repeatCount=1&period=1") private Endpoint timerEndpoint;
  @EndpointInject(uri="mock:result") private MockEndpoint mockEndpoint;
  @Override protected JndiRegistry createRegistry() throws Exception {
    Properties properties=new Properties();
    properties.load(getClass().getResourceAsStream("/test-options.properties"));
    PGDataSource dataSource=new PGDataSource();
    dataSource.setHost(properties.getProperty("host"));
    dataSource.setPort(Integer.parseInt(properties.getProperty("port")));
    dataSource.setDatabase(properties.getProperty("database"));
    dataSource.setUser(properties.getProperty("userName"));
    dataSource.setPassword(properties.getProperty("password"));
    JndiRegistry registry=super.createRegistry();
    registry.bind("pgDataSource",dataSource);
    return registry;
  }
  @Test public void testPgEventPublishSubscribeWithDefinedDatasource() throws Exception {
    mockEndpoint.expectedBodiesReceived(TEST_MESSAGE_BODY);
    mockEndpoint.assertIsSatisfied(5000);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(timerEndpoint).setBody(constant(TEST_MESSAGE_BODY)).to(notifyEndpoint);
        from(subscribeEndpoint).to(mockEndpoint);
      }
    }
;
  }
}
