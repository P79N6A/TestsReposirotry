/** 
 * @version 
 */
public class MultiThreadedHttpGetTest extends BaseJettyTest {
  @Test public void testHttpGetWithConversion() throws Exception {
    String endpointName="seda:withConversion?concurrentConsumers=5";
    sendMessagesTo(endpointName,5);
  }
  @Test public void testHttpGetWithoutConversion() throws Exception {
    HttpConnectionManager httpConnectionManager=new MultiThreadedHttpConnectionManager();
    httpConnectionManager.getParams().setDefaultMaxConnectionsPerHost(5);
    context.getComponent("http",HttpComponent.class).setHttpConnectionManager(httpConnectionManager);
    String endpointName="seda:withoutConversion?concurrentConsumers=5";
    sendMessagesTo(endpointName,5);
  }
  @Test public void testHttpGetWithExplicitStreamClose() throws Exception {
    MockEndpoint mockEndpoint=resolveMandatoryEndpoint("mock:results",MockEndpoint.class);
    for (int i=0; i < 5; i++) {
      mockEndpoint.expectedMessageCount(1);
      template.sendBody("seda:withoutConversion?concurrentConsumers=5",null);
      mockEndpoint.assertIsSatisfied();
      Object response=mockEndpoint.getReceivedExchanges().get(0).getIn().getBody();
      InputStream responseStream=assertIsInstanceOf(InputStream.class,response);
      responseStream.close();
      mockEndpoint.reset();
    }
  }
  protected void sendMessagesTo(  String endpointName,  int count) throws InterruptedException {
    MockEndpoint mockEndpoint=resolveMandatoryEndpoint("mock:results",MockEndpoint.class);
    mockEndpoint.expectedMessageCount(count);
    for (int i=0; i < count; i++) {
      template.sendBody(endpointName,null);
    }
    mockEndpoint.assertIsSatisfied();
    List<Exchange> list=mockEndpoint.getReceivedExchanges();
    for (    Exchange exchange : list) {
      String body=exchange.getIn().getBody(String.class);
      log.debug("Body: " + body);
      assertNotNull("Should have a body!",body);
      assertTrue("body should contain: <html",body.contains("<html"));
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("seda:withConversion?concurrentConsumers=5").to("http://localhost:{{port}}/search").convertBodyTo(String.class).to("mock:results");
        from("seda:withoutConversion?concurrentConsumers=5").to("http://localhost:{{port}}/search").to("mock:results");
        from("jetty:http://localhost:{{port}}/search").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("<html>Bye World</html>");
          }
        }
);
      }
    }
;
  }
}
