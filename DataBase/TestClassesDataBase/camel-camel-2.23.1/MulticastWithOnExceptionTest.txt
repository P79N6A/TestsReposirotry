/** 
 * @version 
 */
public class MulticastWithOnExceptionTest extends ContextTestSupport {
  @Test public void testMulticastOk() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:baz").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:handled").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello");
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMulticastFail() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:baz").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:bar").expectedMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    String out=template.requestBody("direct:start","Kaboom",String.class);
    assertEquals("Damn Forced",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}"));
        from("direct:start").multicast().to("direct:foo","direct:bar","direct:baz").end().to("mock:result");
        from("direct:foo").to("mock:foo");
        from("direct:bar").process(new MyProcessor()).to("mock:bar");
        from("direct:baz").to("mock:baz");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Kaboom".equals(body)) {
        throw new IllegalArgumentException("Forced");
      }
    }
  }
}
