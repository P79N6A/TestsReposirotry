/** 
 * Tests for exception cases in the XML JSON data format
 */
public class XmlJsonExceptionsTest extends AbstractJsonTestSupport {
  @Test public void testMalformedXML() throws Exception {
    String in="<noRoot>abc</noRoot><noRoot>abc</noRoot>";
    MockEndpoint mockJSON=getMockEndpoint("mock:json");
    mockJSON.expectedMessageCount(0);
    MockEndpoint mockException=getMockEndpoint("mock:exception");
    mockException.expectedMessageCount(1);
    try {
      template.requestBody("direct:marshal",in);
      fail("Exception expected");
    }
 catch (    CamelExecutionException e) {
      assertEquals("JSONException expected",JSONException.class,e.getCause().getClass());
    }
    List<Exchange> exchs=mockException.getExchanges();
    assertEquals("Only one exchange was expected in mock:exception",1,exchs.size());
    Exception e=(Exception)exchs.get(0).getProperty(Exchange.EXCEPTION_CAUGHT);
    assertNotNull("Exception expected",e);
    assertEquals("JSONException expected",JSONException.class,e.getClass());
    assertMockEndpointsSatisfied();
  }
  @Test public void testMalformedJson() throws Exception {
    String in="{ \"a\": 123, \"b\": true, \"c\": true2 }";
    MockEndpoint mockXML=getMockEndpoint("mock:xml");
    mockXML.expectedMessageCount(0);
    MockEndpoint mockException=getMockEndpoint("mock:exception");
    mockException.expectedMessageCount(1);
    try {
      template.requestBody("direct:unmarshal",in);
      fail("Exception expected");
    }
 catch (    CamelExecutionException e) {
      assertEquals("JSONException expected",JSONException.class,e.getCause().getClass());
    }
    List<Exchange> exchs=mockException.getExchanges();
    assertEquals("Only one exchange was expected in mock:exception",1,exchs.size());
    Exception e=(Exception)exchs.get(0).getProperty(Exchange.EXCEPTION_CAUGHT);
    assertNotNull("Exception expected",e);
    assertEquals("JSONException expected",JSONException.class,e.getClass());
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendJsonToXML() throws Exception {
    String in="{ \"a\": 123, \"b\": true, \"c\": true2 }";
    MockEndpoint mockJSON=getMockEndpoint("mock:xml");
    mockJSON.expectedMessageCount(0);
    MockEndpoint mockException=getMockEndpoint("mock:exception");
    mockException.expectedMessageCount(1);
    try {
      template.requestBody("direct:unmarshal",in);
      fail("Exception expected");
    }
 catch (    CamelExecutionException e) {
      assertEquals("JSONException expected",JSONException.class,e.getCause().getClass());
    }
    List<Exchange> exchs=mockException.getExchanges();
    assertEquals("Only one exchange was expected in mock:exception",1,exchs.size());
    Exception e=(Exception)exchs.get(0).getProperty(Exchange.EXCEPTION_CAUGHT);
    assertNotNull("Exception expected",e);
    assertEquals("JSONException expected",JSONException.class,e.getClass());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        XmlJsonDataFormat format=new XmlJsonDataFormat();
        onException(Exception.class).handled(false).to("mock:exception");
        from("direct:marshal").marshal(format).to("mock:json");
        from("direct:unmarshal").unmarshal(format).to("mock:xml");
      }
    }
;
  }
}
