/** 
 */
public class SplitterAndExceptionRouteTwistIssueTest extends CamelTestSupport {
  @Produce(uri="direct:error") protected ProducerTemplate templateError;
  @Produce(uri="direct:error2") protected ProducerTemplate templateError2;
  @EndpointInject(uri="mock:mockReject") protected MockEndpoint mockRejectEndpoint;
  @EndpointInject(uri="mock:mock_output") protected MockEndpoint mockOutput;
  @Test public void testErrorHandlingJaxb() throws Exception {
    String correctExample="abcdef";
    String errorExample="myerror\u0010";
    mockRejectEndpoint.expectedMessageCount(1);
    mockOutput.expectedMessageCount(4);
    templateError.sendBody(correctExample);
    templateError.sendBody(errorExample);
    templateError.sendBody(correctExample);
    templateError.sendBody(correctExample);
    templateError.sendBody(correctExample);
    mockRejectEndpoint.assertIsSatisfied();
    mockOutput.assertIsSatisfied();
  }
  @Test public void testErrorHandlingPlumber() throws Exception {
    String correctExample="abcdef";
    String errorExample="myerror\u0010";
    mockRejectEndpoint.expectedMessageCount(1);
    mockOutput.expectedMessageCount(4);
    templateError2.sendBody(correctExample);
    templateError2.sendBody(errorExample);
    templateError2.sendBody(correctExample);
    templateError2.sendBody(correctExample);
    templateError2.sendBody(correctExample);
    mockRejectEndpoint.assertIsSatisfied();
    mockOutput.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel(mockRejectEndpoint).useOriginalMessage().maximumRedeliveries(0).retryAttemptedLogLevel(LoggingLevel.WARN).logExhausted(true).logStackTrace(true).logRetryStackTrace(true));
        from("direct:error").handleFault().convertBodyTo(String.class,"UTF-8").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String text=(String)exchange.getIn().getBody();
            Twits twits=new Twits();
            Twit twit1=new Twit();
            twit1.setText(text);
            twits.getTwits().add(twit1);
            exchange.getIn().setBody(twits);
          }
        }
).split().xpath("//twits/twit").streaming().to(mockOutput);
        from("direct:error2").handleFault().convertBodyTo(String.class,"UTF-8").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String text=(String)exchange.getIn().getBody();
            StringBuilder twits=new StringBuilder();
            twits.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
            twits.append("<twits>");
            twits.append("<twit>");
            twits.append(text);
            twits.append("</twit>");
            twits.append("</twits>");
            exchange.getIn().setBody(twits.toString());
          }
        }
).split().xpath("//twits/twit").streaming().to(mockOutput);
      }
    }
;
  }
}
