@ContextConfiguration public class BindySimpleKeyValuePairWithoutSectionMarshallDslTest extends AbstractJUnit4SpringContextTests {
  private static final String URI_MOCK_RESULT="mock:result";
  private static final String URI_MOCK_ERROR="mock:error";
  private static final String URI_DIRECT_START="direct:start";
  private List<Map<String,Object>> models=new ArrayList<>();
  @Produce(uri=URI_DIRECT_START) private ProducerTemplate template;
  @EndpointInject(uri=URI_MOCK_RESULT) private MockEndpoint result;
  @EndpointInject(uri=URI_MOCK_ERROR) private MockEndpoint error;
  @Test public void testMarshallWithoutSection() throws Exception {
    template.sendBody(generateModel());
    result.expectedMessageCount(0);
    error.expectedMessageCount(1);
    result.assertIsSatisfied();
    error.assertIsSatisfied();
    Exchange exch=error.getReceivedExchanges().get(0);
    Exception cause=exch.getProperty(Exchange.EXCEPTION_CAUGHT,IllegalArgumentException.class);
    assertNotNull(cause);
    assertEquals("@Section and/or @KeyValuePairDataField have not been defined",cause.getMessage());
  }
  public List<Map<String,Object>> generateModel(){
    Map<String,Object> modelObjects=new HashMap<>();
    Order order=new Order();
    order.setAccount("BE.CHM.001");
    order.setClOrdId("CHM0001-01");
    order.setIDSource("4");
    order.setSecurityId("BE0001245678");
    order.setSide("1");
    order.setText("this is a camel - bindy test");
    modelObjects.put(order.getClass().getName(),order);
    models.add(modelObjects);
    return models;
  }
public static class ContextConfig extends RouteBuilder {
    BindyKeyValuePairDataFormat orderBindyDataFormat=new BindyKeyValuePairDataFormat(org.apache.camel.dataformat.bindy.model.fix.withoutsection.Order.class);
    public void configure(){
      Tracer tracer=new Tracer();
      tracer.setLogLevel(LoggingLevel.ERROR);
      tracer.setLogName("org.apache.camel.bindy");
      tracer.setLogStackTrace(true);
      tracer.setTraceExceptions(true);
      getContext().addInterceptStrategy(tracer);
      errorHandler(deadLetterChannel(URI_MOCK_ERROR));
      onException(IllegalArgumentException.class).maximumRedeliveries(0).handled(true);
      from(URI_DIRECT_START).marshal(orderBindyDataFormat).to(URI_MOCK_RESULT);
    }
  }
}
