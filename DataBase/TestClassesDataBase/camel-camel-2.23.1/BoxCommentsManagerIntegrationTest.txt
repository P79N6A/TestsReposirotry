/** 
 * Test class for {@link BoxCommentsManager} APIs.
 */
public class BoxCommentsManagerIntegrationTest extends AbstractBoxTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BoxCommentsManagerIntegrationTest.class);
  private static final String PATH_PREFIX=BoxApiCollection.getCollection().getApiName(BoxCommentsManagerApiMethod.class).getName();
  private static final String CAMEL_TEST_FILE="/CamelTestFile.txt";
  private static final String CAMEL_TEST_FILE_NAME="CamelTestFile.txt";
  private static final String CAMEL_TEST_FILE_COMMENT="CamelTestFile comment.";
  private static final String CAMEL_TEST_FILE_CHANGED_COMMENT="CamelTestFile changed comment.";
  private static final String CAMEL_TEST_FILE_REPLY_COMMENT="CamelTestFile changed comment.";
  @Test public void testAddFileComment() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.fileId",testFile.getID());
    headers.put("CamelBox.message",CAMEL_TEST_FILE_COMMENT);
    final com.box.sdk.BoxFile result=requestBodyAndHeaders("direct://ADDFILECOMMENT",null,headers);
    assertNotNull("addFileComment result",result);
    assertNotNull("addFileComment comments",result.getComments());
    assertTrue("changeCommentMessage comments size",result.getComments().size() > 0);
    assertEquals("changeCommentMessage comment message",CAMEL_TEST_FILE_COMMENT,result.getComments().get(0).getMessage());
    LOG.debug("addFileComment: " + result);
  }
  @Test public void testChangeCommentMessage() throws Exception {
    BoxComment.Info commentInfo=testFile.addComment(CAMEL_TEST_FILE_COMMENT);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.commentId",commentInfo.getID());
    headers.put("CamelBox.message",CAMEL_TEST_FILE_CHANGED_COMMENT);
    final com.box.sdk.BoxComment result=requestBodyAndHeaders("direct://CHANGECOMMENTMESSAGE",null,headers);
    assertNotNull("changeCommentMessage result",result);
    assertNotNull("changeCommentMessage message",result.getInfo().getMessage());
    assertEquals("changeCommentMessage message",CAMEL_TEST_FILE_CHANGED_COMMENT,result.getInfo().getMessage());
    LOG.debug("changeCommentMessage: " + result);
  }
  @Test public void testDeleteComment() throws Exception {
    BoxComment.Info commentInfo=testFile.addComment(CAMEL_TEST_FILE_COMMENT);
    requestBody("direct://DELETECOMMENT",commentInfo.getID());
    List<BoxComment.Info> comments=testFile.getComments();
    assertNotNull("deleteComment comments",comments);
    assertEquals("deleteComment comments empty",0,comments.size());
  }
  @Test public void testGetCommentInfo() throws Exception {
    BoxComment.Info commentInfo=testFile.addComment(CAMEL_TEST_FILE_COMMENT);
    final com.box.sdk.BoxComment.Info result=requestBody("direct://GETCOMMENTINFO",commentInfo.getID());
    assertNotNull("getCommentInfo result",result);
    assertEquals("getCommentInfo message",CAMEL_TEST_FILE_COMMENT,result.getMessage());
    LOG.debug("getCommentInfo: " + result);
  }
  @Test public void testGetFileComments() throws Exception {
    testFile.addComment(CAMEL_TEST_FILE_COMMENT);
    @SuppressWarnings("rawtypes") final java.util.List result=requestBody("direct://GETFILECOMMENTS",testFile.getID());
    assertNotNull("getFileComments result",result);
    assertEquals("getFileComments size",1,result.size());
    LOG.debug("getFileComments: " + result);
  }
  @Test public void testReplyToComment() throws Exception {
    BoxComment.Info commentInfo=testFile.addComment(CAMEL_TEST_FILE_COMMENT);
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.commentId",commentInfo.getID());
    headers.put("CamelBox.message",CAMEL_TEST_FILE_REPLY_COMMENT);
    final com.box.sdk.BoxComment result=requestBodyAndHeaders("direct://REPLYTOCOMMENT",null,headers);
    assertNotNull("replyToComment result",result);
    assertEquals("replyToComment result",CAMEL_TEST_FILE_REPLY_COMMENT,result.getInfo().getMessage());
    LOG.debug("replyToComment: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ADDFILECOMMENT").to("box://" + PATH_PREFIX + "/addFileComment");
        from("direct://CHANGECOMMENTMESSAGE").to("box://" + PATH_PREFIX + "/changeCommentMessage");
        from("direct://DELETECOMMENT").to("box://" + PATH_PREFIX + "/deleteComment?inBody=commentId");
        from("direct://GETCOMMENTINFO").to("box://" + PATH_PREFIX + "/getCommentInfo?inBody=commentId");
        from("direct://GETFILECOMMENTS").to("box://" + PATH_PREFIX + "/getFileComments?inBody=fileId");
        from("direct://REPLYTOCOMMENT").to("box://" + PATH_PREFIX + "/replyToComment");
      }
    }
;
  }
  @Before public void setupTest() throws Exception {
    createTestFile();
  }
  @After public void teardownTest(){
    deleteTestFile();
  }
  public BoxAPIConnection getConnection(){
    BoxEndpoint endpoint=(BoxEndpoint)context().getEndpoint("box://" + PATH_PREFIX + "/addFileComment");
    return endpoint.getBoxConnection();
  }
  private void createTestFile() throws FileNotFoundException {
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    InputStream stream=getClass().getResourceAsStream(CAMEL_TEST_FILE);
    testFile=rootFolder.uploadFile(stream,CAMEL_TEST_FILE_NAME).getResource();
  }
}
