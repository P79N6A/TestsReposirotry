/** 
 * @version 
 */
public class AsyncRouteWithErrorTest extends ContextTestSupport {
  private static String route="";
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    route="";
  }
  @Test public void testAsyncRouteWithError() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.requestBody("direct:start","Hello");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Damn forced by unit test",e.getCause().getMessage());
    }
    route+="A";
    assertMockEndpointsSatisfied();
    assertEquals("BA",route);
  }
  @Test public void testAsyncRouteWithTypeConverted() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.requestBody("direct:start","Hello",String.class);
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      assertEquals("Damn forced by unit test",e.getCause().getMessage());
    }
    route+="A";
    assertMockEndpointsSatisfied();
    assertEquals("BA",route);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").transform(body().append(" World")).threads().to("mock:foo").delay(100).process(new MyProcessor()).to("mock:result");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public MyProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      route+="B";
      assertEquals("Hello World",exchange.getIn().getBody());
      throw new IllegalArgumentException("Damn forced by unit test");
    }
  }
}
