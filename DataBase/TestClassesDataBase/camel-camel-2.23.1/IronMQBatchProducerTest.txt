public class IronMQBatchProducerTest extends CamelTestSupport {
  private IronMQEndpoint endpoint;
  @Test public void testProduceBatch() throws Exception {
    String[] messages=new String[]{"{foo:bar}","{foo2:bar2}"};
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start",messages);
    assertMockEndpointsSatisfied();
    assertThat(mock.getReceivedExchanges().size(),equalTo(1));
    Object header=mock.getReceivedExchanges().get(0).getIn().getHeader(IronMQConstants.MESSAGE_ID);
    assertIsInstanceOf(Ids.class,header);
    assertThat(((Ids)header).getSize(),equalTo(2));
  }
  @Test(expected=CamelExecutionException.class) public void testProduceBatchWithIllegalPayload() throws Exception {
    template.sendBody("direct:start",Arrays.asList("foo","bar"));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    IronMQComponent component=new IronMQComponent(context);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("projectId","dummy");
    parameters.put("token","dummy");
    endpoint=(IronMQEndpoint)component.createEndpoint("ironmq","testqueue",parameters);
    endpoint.setClient(new IronMQClientMock("dummy","dummy"));
    context.addComponent("ironmq",component);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").to(endpoint).to("mock:result");
      }
    }
;
  }
}
