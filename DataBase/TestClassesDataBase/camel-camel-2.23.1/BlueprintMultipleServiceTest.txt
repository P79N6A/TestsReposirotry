public class BlueprintMultipleServiceTest extends CamelBlueprintTestSupport {
  @EndpointInject(uri="fakeservice1:mock") private MockEndpoint fakeServiceOneMock;
  @EndpointInject(uri="fakeservice2:mock") private MockEndpoint fakeServiceTwoMock;
  private MockComponent mockComponentOne=new MockComponent();
  private MockComponent mockComponentTwo=new MockComponent();
  @Override protected String getBlueprintDescriptor(){
    return "org/apache/camel/test/blueprint/BlueprintMultipleServiceTest.xml";
  }
  @Override @SuppressWarnings("rawtypes") protected void addServicesOnStartup(  List<KeyValueHolder<String,KeyValueHolder<Object,Dictionary>>> services){
    Dictionary<String,String> dict1=new Hashtable<>();
    dict1.put("component","fakeservice1");
    Dictionary<String,String> dict2=new Hashtable<>();
    dict2.put("component","fakeservice2");
    services.add(asKeyValueService(ComponentResolver.class.getName(),mockComponentOne,dict1));
    services.add(asKeyValueService(ComponentResolver.class.getName(),mockComponentTwo,dict2));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("fakeservice1",mockComponentOne);
    context.addComponent("fakeservice2",mockComponentTwo);
    return context;
  }
  @Test public void testMultipleService() throws Exception {
    template.sendBody("direct:start","Camel");
    fakeServiceOneMock.expectedMessageCount(1);
    fakeServiceTwoMock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
  }
}
