/** 
 * @version
 */
@ContextConfiguration public class FixedLengthAllowLongTest extends AbstractJUnit4SpringContextTests {
  private static final Logger LOG=LoggerFactory.getLogger(FixedLengthAllowLongTest.class);
  @EndpointInject(uri="mock:results") protected MockEndpoint results;
  @EndpointInject(uri="mock:results-df") protected MockEndpoint resultsdf;
  @EndpointInject(uri="mock:results-xml") protected MockEndpoint resultsxml;
  protected String[] expectedFirstName={"JOHN-LONG","JIMMY-LONG","JANE-LONG","FRED-LONG"};
  @Test public void testCamel() throws Exception {
    results.expectedMessageCount(4);
    results.assertIsSatisfied();
    int counter=0;
    List<Exchange> list=results.getReceivedExchanges();
    for (    Exchange exchange : list) {
      Message in=exchange.getIn();
      assertEquals("counter",in.getHeader("camelFlatpackCounter"),counter);
      Map<?,?> body=in.getBody(Map.class);
      assertNotNull("Should have found body as a Map but was: " + ObjectHelper.className(in.getBody()),body);
      assertEquals("FIRSTNAME",expectedFirstName[counter],body.get("FIRSTNAME"));
      LOG.info("Result: " + counter + " = "+ body);
      counter++;
    }
  }
  @Test public void testFlatpackDataFormat() throws Exception {
    resultsdf.expectedMessageCount(1);
    resultsdf.assertIsSatisfied();
    Exchange exchange=resultsdf.getReceivedExchanges().get(0);
    DataSetList data=exchange.getIn().getBody(DataSetList.class);
    int counter=0;
    for (    Map<String,Object> map : data) {
      assertEquals("FIRSTNAME",expectedFirstName[counter],map.get("FIRSTNAME"));
      counter++;
    }
  }
  @Test public void testFlatpackDataFormatXML() throws Exception {
    resultsxml.expectedMessageCount(1);
    resultsxml.assertIsSatisfied();
    Exchange exchange=resultsxml.getReceivedExchanges().get(0);
    DataSetList data=exchange.getIn().getBody(DataSetList.class);
    int counter=0;
    for (    Map<String,Object> map : data) {
      assertEquals("FIRSTNAME",expectedFirstName[counter],map.get("FIRSTNAME"));
      counter++;
    }
  }
}
