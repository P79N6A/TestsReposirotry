/** 
 * Unit test for the filter file option
 */
public class FileConsumerFilterDirectoryTest extends ContextTestSupport {
  private String fileUrl="file://target/filefilter/?initialDelay=0&delay=10&recursive=true&filterDirectory=${header.CamelFileNameOnly.length()} > 4";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filefilter");
    deleteDirectory("target/filefilter/foo");
    deleteDirectory("target/filefilter/barbar");
    super.setUp();
  }
  @Test public void testFilterFiles() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(0);
    template.sendBodyAndHeader("file:target/filefilter/foo","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    mock.setResultWaitTime(100);
    mock.assertIsSatisfied();
  }
  @Test public void testFilterFilesWithARegularFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/filefilter/foo","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    template.sendBodyAndHeader("file:target/filefilter/barbar","Hello World",Exchange.FILE_NAME,"hello.txt");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
