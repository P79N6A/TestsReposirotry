/** 
 */
public class SplitterOnPrepareExceptionTest extends ContextTestSupport {
  @Test public void testSplitterOnPrepare() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(2);
    String body="Hello,Bye,Kaboom,Hi";
    try {
      template.sendBody("direct:start",body);
      fail("Should have thrown exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).onPrepare(new FixNamePrepare()).stopOnException().to("mock:a");
      }
    }
;
  }
public static final class FixNamePrepare implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String name=exchange.getIn().getBody(String.class);
      if ("Kaboom".equals(name)) {
        throw new IllegalArgumentException("Forced error");
      }
    }
  }
}
