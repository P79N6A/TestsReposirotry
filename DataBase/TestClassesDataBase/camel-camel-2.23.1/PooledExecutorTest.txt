public class PooledExecutorTest {
  static final int THREAD_COUNT=2;
  Logger log=LoggerFactory.getLogger(this.getClass());
  TestExecutor instance;
  @Before public void setUp() throws Exception {
    instance=new TestExecutor(THREAD_COUNT);
  }
  @After public void tearDown() throws Exception {
    instance.stop();
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testAddRunnable() throws Exception {
    int runnableCount=3;
    int runCount=5;
    log.info("Starting first set of runnables");
    startRunnables(runnableCount,runCount);
    Thread.sleep(THREAD_COUNT * TestRunnable.SLEEP_MILLIS);
    log.info("Starting second set of runnables");
    startRunnables(runnableCount,runCount);
  }
  void startRunnables(  int runnableCount,  int runCount) throws InterruptedException {
    for (int id=1; id <= runnableCount; ++id) {
      Thread.sleep(TestRunnable.SLEEP_MILLIS / 2);
      try {
        instance.addRunnable(new TestRunnable(id,runCount));
      }
 catch (      RejectedExecutionException rejectedEx) {
        log.warn("Unable to add Runnable {}",id,rejectedEx);
      }
    }
  }
}
