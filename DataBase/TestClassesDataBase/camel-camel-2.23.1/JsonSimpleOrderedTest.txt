public class JsonSimpleOrderedTest extends Assert {
  @Test public void testOrdered() throws Exception {
    InputStream is=new FileInputStream("src/test/resources/bean.json");
    String json=loadText(is);
    JsonObject output=Jsoner.deserialize(json,new JsonObject());
    assertNotNull(output);
    Map map=output.getMap("component");
    assertTrue(map instanceof LinkedHashMap);
    Iterator it=map.keySet().iterator();
    assertEquals("kind",it.next());
    assertEquals("scheme",it.next());
    assertEquals("syntax",it.next());
    assertEquals("title",it.next());
    assertEquals("description",it.next());
    assertEquals("label",it.next());
    assertEquals("deprecated",it.next());
    assertEquals("deprecationNote",it.next());
    assertEquals("async",it.next());
    assertEquals("consumerOnly",it.next());
    assertEquals("producerOnly",it.next());
    assertEquals("lenientProperties",it.next());
    assertEquals("javaType",it.next());
    assertEquals("firstVersion",it.next());
    assertEquals("groupId",it.next());
    assertEquals("artifactId",it.next());
    assertEquals("version",it.next());
    assertFalse(it.hasNext());
  }
  public static String loadText(  InputStream in) throws IOException {
    StringBuilder builder=new StringBuilder();
    InputStreamReader isr=new InputStreamReader(in);
    try {
      BufferedReader reader=new BufferedReader(isr);
      while (true) {
        String line=reader.readLine();
        if (line == null) {
          line=builder.toString();
          return line;
        }
        builder.append(line);
        builder.append("\n");
      }
    }
  finally {
      isr.close();
      in.close();
    }
  }
}
