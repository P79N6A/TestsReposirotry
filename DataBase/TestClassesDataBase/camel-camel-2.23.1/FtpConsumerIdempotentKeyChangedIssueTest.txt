public class FtpConsumerIdempotentKeyChangedIssueTest extends FtpServerTestSupport {
  private Endpoint endpoint;
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/idempotent?password=admin&readLock=changed"+ "&idempotentKey=${file:onlyname}-${file:size}-${date:file:yyyyMMddHHmmss}";
  }
  @Test public void testIdempotent() throws Exception {
    NotifyBuilder oneExchangeDone=new NotifyBuilder(context).whenDone(1).create();
    getMockEndpoint("mock:file").expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader(endpoint,"Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matches(5,TimeUnit.SECONDS);
    resetMocks();
    getMockEndpoint("mock:file").expectedBodiesReceived("Hello World Again");
    template.sendBodyAndHeader(endpoint,"Hello World Again",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        endpoint=endpoint(getFtpUrl());
        from(endpoint).convertBodyTo(String.class).to("log:file").to("mock:file");
      }
    }
;
  }
}
