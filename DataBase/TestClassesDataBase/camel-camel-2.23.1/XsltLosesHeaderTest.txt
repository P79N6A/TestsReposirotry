/** 
 * @version 
 */
public class XsltLosesHeaderTest extends CamelTestSupport {
  protected String xslt="<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>" + "<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">" + "<xsl:template match=\"/cats\">"+ "<b>dummy</b>"+ "</xsl:template>"+ "</xsl:stylesheet>";
  @Test public void testXsltLosesHeader() throws Exception {
    MockEndpoint endpointAfter=getMockEndpoint("mock:After");
    MockEndpoint endpointBefore=getMockEndpoint("mock:Before");
    endpointBefore.expectedBodiesReceived("header:hello");
    endpointAfter.expectedBodiesReceived("header:hello");
    template.send("seda:xslttest",new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody("dummy");
      }
    }
);
    endpointBefore.assertIsSatisfied();
    endpointAfter.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws TransformerConfigurationException {
        from("seda:xslttest").setHeader("testheader",el("hello")).setBody(el("header:${in.headers.testheader}")).to("mock:Before").setBody(el("<cats><cat id=\"1\"/><cat id=\"2\"/></cats>")).process(XsltBuilder.xslt(new StringSource(xslt))).setBody(el("header:${in.headers.testheader}")).to("mock:After");
      }
    }
;
  }
}
