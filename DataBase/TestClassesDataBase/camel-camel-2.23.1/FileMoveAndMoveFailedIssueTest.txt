public class FileMoveAndMoveFailedIssueTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/input");
    super.setUp();
  }
  @Test public void testMove() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedFileExists("target/input/target/input.bak/somedate/hello.txt");
    template.sendBodyAndHeader("file:target/input","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMoveFailed() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedFileExists("target/input/target/input.err/somedate/bomb.txt");
    template.sendBodyAndHeader("file:target/input","Kaboom",Exchange.FILE_NAME,"bomb.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:./target/input?move=${file:parent}.bak/somedate/${file:onlyname}&moveFailed=${file:parent}.err/somedate/${file:onlyname}&initialDelay=0&delay=10").convertBodyTo(String.class).filter(body().contains("Kaboom")).throwException(new IllegalArgumentException("Forced")).end().to("mock:result");
      }
    }
;
  }
}
