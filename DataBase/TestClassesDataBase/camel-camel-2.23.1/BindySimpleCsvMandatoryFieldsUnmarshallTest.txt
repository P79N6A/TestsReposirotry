@ContextConfiguration public class BindySimpleCsvMandatoryFieldsUnmarshallTest extends AbstractJUnit4SpringContextTests {
  @EndpointInject(uri="mock:result1") protected MockEndpoint resultEndpoint1;
  @EndpointInject(uri="mock:result2") protected MockEndpoint resultEndpoint2;
  @EndpointInject(uri="mock:result3") protected MockEndpoint resultEndpoint3;
  @Produce(uri="direct:start1") protected ProducerTemplate template1;
  @Produce(uri="direct:start2") protected ProducerTemplate template2;
  @Produce(uri="direct:start3") protected ProducerTemplate template3;
  String header="order nr,client ref,first name, last name,instrument code,instrument name,order type, instrument type, quantity,currency,date\r\n";
  @DirtiesContext @Test public void testEmptyRecord() throws Exception {
    String record1="";
    resultEndpoint1.expectedMessageCount(0);
    try {
      template1.sendBody(record1);
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      Assert.isInstanceOf(Exception.class,e.getCause());
    }
    resultEndpoint1.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testEmptyFields() throws Exception {
    String record2=",,blabla,,,,,,,,";
    resultEndpoint1.expectedMessageCount(1);
    template1.sendBody(record2);
    resultEndpoint1.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testOneOptionalField() throws Exception {
    String record2=",,blabla,,,,,,,,";
    resultEndpoint1.expectedMessageCount(1);
    template1.sendBody(record2);
    resultEndpoint1.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testSeveralOptionalFields() throws Exception {
    String record3="1,A1,Charles,Moulliard,ISIN,LU123456789,,,,,";
    resultEndpoint1.expectedMessageCount(1);
    template1.sendBody(record3);
    resultEndpoint1.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testTooMuchFields() throws Exception {
    String record6=",,,,,,,,,,,,,,";
    resultEndpoint1.expectedMessageCount(0);
    try {
      template1.sendBody(record6);
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      Assert.isInstanceOf(IllegalArgumentException.class,e.getCause());
    }
    resultEndpoint1.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testEmptyLineWithAllowEmptyStreamEqualsTrue() throws Exception {
    String record6="";
    resultEndpoint3.expectedMessageCount(1);
    template3.sendBody(record6);
    resultEndpoint3.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testNonEmptyLineWithAllowEmptyStreamEqualsTrue() throws Exception {
    String record3="1,A1,Onder,Sezgin,MYC,BB123456789,,,,,";
    resultEndpoint3.expectedMessageCount(1);
    template3.sendBody(record3);
    resultEndpoint3.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testMandatoryFields() throws Exception {
    String record3="1,A1,Charles,Moulliard,ISIN,LU123456789,,,,,";
    resultEndpoint2.expectedMessageCount(1);
    template2.sendBody(header + record3);
    resultEndpoint2.assertIsSatisfied();
  }
  @DirtiesContext @Test public void testMissingMandatoryFields() throws Exception {
    String record4="1,A1,Charles,,ISIN,LU123456789,,,,,";
    resultEndpoint2.expectedMessageCount(1);
    try {
      template2.sendBody(header + record4);
      resultEndpoint2.assertIsSatisfied();
    }
 catch (    CamelExecutionException e) {
    }
  }
public static class ContextConfig extends RouteBuilder {
    BindyCsvDataFormat formatOptional=new BindyCsvDataFormat(org.apache.camel.dataformat.bindy.model.simple.oneclass.Order.class);
    BindyCsvDataFormat formatMandatory=new BindyCsvDataFormat(org.apache.camel.dataformat.bindy.model.simple.oneclassmandatory.Order.class);
    BindyCsvDataFormat formatEmptyStream=new BindyCsvDataFormat(org.apache.camel.dataformat.bindy.model.simple.oneclassemptystream.Order.class);
    public void configure(){
      from("direct:start1").unmarshal(formatOptional).to("mock:result1");
      from("direct:start2").unmarshal(formatMandatory).to("mock:result2");
      from("direct:start3").unmarshal(formatEmptyStream).to("mock:result3");
    }
  }
}
