/** 
 */
@Ignore("Test manually") public class TokenPairIteratorSplitChoicePerformanceTest extends ContextTestSupport {
  private int size=20 * 1000;
  private final AtomicInteger tiny=new AtomicInteger();
  private final AtomicInteger small=new AtomicInteger();
  private final AtomicInteger med=new AtomicInteger();
  private final AtomicInteger large=new AtomicInteger();
  private final StopWatch watch=new StopWatch();
  @Override @Before public void setUp() throws Exception {
    createDataFile(log,size);
    super.setUp();
  }
  @Test public void testDummy(){
  }
  public void xxxtestTokenPairPerformanceRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(size).create();
    boolean matches=notify.matches(5,TimeUnit.MINUTES);
    log.info("Processed file with {} elements in: {}",size,TimeUtils.printDuration(watch.taken()));
    log.info("Processed " + tiny.get() + " tiny messages");
    log.info("Processed " + small.get() + " small messages");
    log.info("Processed " + med.get() + " medium messages");
    log.info("Processed " + large.get() + " large messages");
    assertEquals((size / 10) * 4,tiny.get());
    assertEquals((size / 10) * 2,small.get());
    assertEquals((size / 10) * 3,med.get());
    assertEquals((size / 10) * 1,large.get());
    assertTrue("Should complete route",matches);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/data?initialDelay=0&delay=10&noop=true").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            log.info("Starting to process file");
            watch.restart();
          }
        }
).split().tokenizeXML("order").streaming().choice().when().xpath("/order/amount < 10").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String xml=exchange.getIn().getBody(String.class);
            assertTrue(xml,xml.contains("<amount>3</amount>"));
            int num=tiny.incrementAndGet();
            if (num % 100 == 0) {
              log.info("Processed " + num + " tiny messages");
              log.debug(xml);
            }
          }
        }
).when().xpath("/order/amount < 50").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String xml=exchange.getIn().getBody(String.class);
            assertTrue(xml,xml.contains("<amount>44</amount>"));
            int num=small.incrementAndGet();
            if (num % 100 == 0) {
              log.info("Processed {} small messages: {}",num,xml);
              log.debug(xml);
            }
          }
        }
).when().xpath("/order/amount < 100").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String xml=exchange.getIn().getBody(String.class);
            assertTrue(xml,xml.contains("<amount>88</amount>"));
            int num=med.incrementAndGet();
            if (num % 100 == 0) {
              log.info("Processed " + num + " medium messages");
              log.debug(xml);
            }
          }
        }
).otherwise().process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String xml=exchange.getIn().getBody(String.class);
            assertTrue(xml,xml.contains("<amount>123</amount>"));
            int num=large.incrementAndGet();
            if (num % 100 == 0) {
              log.info("Processed " + num + " large messages");
              log.debug(xml);
            }
          }
        }
).end().end();
      }
    }
;
  }
  public static void createDataFile(  Logger log,  int size) throws Exception {
    deleteDirectory("target/data");
    createDirectory("target/data");
    log.info("Creating data file ...");
    File file=new File("target/data/data.xml");
    FileOutputStream fos=new FileOutputStream(file,true);
    fos.write("<orders>\n".getBytes());
    for (int i=0; i < size; i++) {
      fos.write("<order>\n".getBytes());
      fos.write(("  <id>" + i + "</id>\n").getBytes());
      int num=i % 10;
      if (num >= 0 && num <= 3) {
        fos.write("  <amount>3</amount>\n".getBytes());
        fos.write("  <customerId>333</customerId>\n".getBytes());
      }
 else       if (num >= 4 && num <= 5) {
        fos.write("  <amount>44</amount>\n".getBytes());
        fos.write("  <customerId>444</customerId>\n".getBytes());
      }
 else       if (num >= 6 && num <= 8) {
        fos.write("  <amount>88</amount>\n".getBytes());
        fos.write("  <customerId>888</customerId>\n".getBytes());
      }
 else {
        fos.write("  <amount>123</amount>\n".getBytes());
        fos.write("  <customerId>123123</customerId>\n".getBytes());
      }
      fos.write("  <description>bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla</description>\n".getBytes());
      fos.write("</order>\n".getBytes());
    }
    fos.write("</orders>".getBytes());
    fos.close();
    log.info("Creating data file done.");
  }
}
