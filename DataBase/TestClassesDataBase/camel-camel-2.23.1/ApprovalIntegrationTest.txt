@RunWith(ParallelParameterized.class) public class ApprovalIntegrationTest extends AbstractApprovalIntegrationTest {
  private final String format;
  public ApprovalIntegrationTest(  final String format){
    super(5);
    this.format=format;
  }
  @Test public void shouldSubmitAndFetchApprovals(){
    final ApprovalResult approvalResult=template.requestBody(String.format("salesforce:approval?" + "format=%s" + "&approvalActionType=Submit"+ "&approvalContextId=%s"+ "&approvalNextApproverIds=%s"+ "&approvalComments=Integration test"+ "&approvalProcessDefinitionNameOrId=Test_Account_Process",format,accountIds.get(0),userId),NOT_USED,ApprovalResult.class);
    assertNotNull("Approval should have resulted in value",approvalResult);
    assertEquals("There should be one Account waiting approval",1,approvalResult.size());
    assertEquals("Instance status of the item in approval result should be `Pending`","Pending",approvalResult.iterator().next().getInstanceStatus());
    final Approvals approvals=template.requestBody("salesforce:approvals",NOT_USED,Approvals.class);
    assertNotNull("Approvals should be fetched",approvals);
    final List<Info> accountApprovals=approvals.approvalsFor("Account");
    assertEquals("There should be one Account waiting approval",1,accountApprovals.size());
  }
  @Test public void shouldSubmitBulkApprovals(){
    final List<ApprovalRequest> approvalRequests=accountIds.stream().map(id -> {
      final ApprovalRequest request=new ApprovalRequest();
      request.setContextId(id);
      request.setComments("Approval for " + id);
      request.setActionType(Action.Submit);
      return request;
    }
).collect(Collectors.toList());
    final ApprovalResult approvalResult=template.requestBody(String.format("salesforce:approval?" + "format=%s" + "&approvalActionType=Submit"+ "&approvalNextApproverIds=%s"+ "&approvalProcessDefinitionNameOrId=Test_Account_Process",format,userId),approvalRequests,ApprovalResult.class);
    assertEquals("Should have same number of approval results as requests",approvalRequests.size(),approvalResult.size());
  }
  @Parameters(name="format = {0}") public static Iterable<String> formats(){
    return Arrays.asList("JSON","XML");
  }
}
