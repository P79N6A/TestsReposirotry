private class CustomClient implements IGenericClient {
  @Override public IFetchConformanceUntyped capabilities(){
    return null;
  }
  @Override public ICreate create(){
    return null;
  }
  @Override public IDelete delete(){
    return null;
  }
  @Override public IFetchConformanceUntyped fetchConformance(){
    return null;
  }
  @Override public void forceConformanceCheck() throws FhirClientConnectionException {
  }
  @Override public IHistory history(){
    return null;
  }
  @Override public IGetPage loadPage(){
    return null;
  }
  @Override public IMeta meta(){
    return null;
  }
  @Override public IOperation operation(){
    return null;
  }
  @Override public IPatch patch(){
    return null;
  }
  @Override public IRead read(){
    return null;
  }
  @Override public <T extends IBaseResource>T read(  Class<T> theType,  String theId){
    return null;
  }
  @Override public <T extends IBaseResource>T read(  Class<T> theType,  UriDt theUrl){
    return null;
  }
  @Override public IBaseResource read(  UriDt theUrl){
    return null;
  }
  @Override public <T extends IBaseResource>T fetchResourceFromUrl(  Class<T> theResourceType,  String theUrl){
    return null;
  }
  @Override public EncodingEnum getEncoding(){
    return null;
  }
  @Override public FhirContext getFhirContext(){
    return null;
  }
  @Override public IHttpClient getHttpClient(){
    return null;
  }
  @Override public List<IClientInterceptor> getInterceptors(){
    return null;
  }
  @Override public String getServerBase(){
    return null;
  }
  @Override public void registerInterceptor(  IClientInterceptor theInterceptor){
  }
  @Override public void setEncoding(  EncodingEnum theEncoding){
  }
  @Override public void setPrettyPrint(  Boolean thePrettyPrint){
  }
  @Override public void setSummary(  SummaryEnum theSummary){
  }
  @Override public <T extends IBaseBundle>IUntypedQuery<T> search(){
    return null;
  }
  @Override public void setLogRequestAndResponse(  boolean theLogRequestAndResponse){
  }
  @Override public ITransaction transaction(){
    return null;
  }
  @Override public void unregisterInterceptor(  IClientInterceptor theInterceptor){
  }
  @Override public IUpdate update(){
    return null;
  }
  @Override public MethodOutcome update(  IdDt theId,  IBaseResource theResource){
    return null;
  }
  @Override public MethodOutcome update(  String theId,  IBaseResource theResource){
    return null;
  }
  @Override public IValidate validate(){
    return null;
  }
  @Override public MethodOutcome validate(  IBaseResource theResource){
    return null;
  }
  @Override public <T extends IBaseResource>T vread(  Class<T> theType,  IdDt theId){
    return null;
  }
  @Override public <T extends IBaseResource>T vread(  Class<T> theType,  String theId,  String theVersionId){
    return null;
  }
}
