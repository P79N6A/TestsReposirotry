/** 
 * @version 
 */
public class MulticastParallelNoStopOnExceptionTest extends ContextTestSupport {
  private ExecutorService service;
  @Before public void setUp() throws Exception {
    service=Executors.newFixedThreadPool(2);
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    service.shutdownNow();
  }
  @Test public void testMulticastParallelNoStopOnExceptionOk() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:baz").expectedBodiesReceived("Hello");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello");
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMulticastParalllelNoStopOnExceptionStop() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Kaboom");
    getMockEndpoint("mock:bar").expectedMessageCount(0);
    getMockEndpoint("mock:baz").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Kaboom");
      fail("Should thrown an exception");
    }
 catch (    CamelExecutionException e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Forced",cause.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast().parallelProcessing().executorService(service).to("direct:foo","direct:bar","direct:baz").end().to("mock:result");
        from("direct:foo").delay(1000).to("mock:foo");
        from("direct:bar").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("Kaboom".equals(body)) {
              throw new IllegalArgumentException("Forced");
            }
          }
        }
).to("mock:bar");
        from("direct:baz").delay(1000).to("mock:baz");
      }
    }
;
  }
}
