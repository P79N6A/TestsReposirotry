/** 
 * @version
 */
public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {
  private int services=10;
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.getManagementStrategy().getManagementAgent().setRegisterAlways(true);
    return context;
  }
  @Test public void testRouteAddRemoteRouteWithRecipientList() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    result.assertIsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*");
    Set<ObjectName> names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    ObjectName onP=ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*");
    Set<ObjectName> namesP=mbeanServer.queryNames(onP,null);
    assertEquals(3,namesP.size());
    log.info("Adding 2nd route");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:bar").routeId("bar").recipientList(header("bar"));
      }
    }
);
    MockEndpoint bar=getMockEndpoint("mock:bar");
    bar.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:bar","Hello World","bar","mock:bar");
    bar.assertIsSatisfied();
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(5,namesP.size());
    log.info("Removing 2nd route");
    context.stopRoute("bar");
    boolean removed=context.removeRoute("bar");
    assertTrue(removed);
    names=mbeanServer.queryNames(on,null);
    assertEquals(services,names.size());
    namesP=mbeanServer.queryNames(onP,null);
    assertEquals(4,namesP.size());
    log.info("Shutting down...");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("foo").to("log:foo").to("mock:result");
      }
    }
;
  }
}
