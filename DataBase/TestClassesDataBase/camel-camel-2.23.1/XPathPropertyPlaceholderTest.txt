@DirtiesContext @RunWith(SpringRunner.class) @EnableAutoConfiguration @SpringBootTest(classes=XPathPropertyPlaceholderTest.TestConfig.class,properties={"foo = //greeting/text = 'Hello, world!'","bar = //greeting/text = 'Bye, world!'"}) public class XPathPropertyPlaceholderTest {
  @Autowired private CamelContext context;
  @Autowired private ProducerTemplate template;
  @EndpointInject(uri="mock:output-filter") private MockEndpoint mockOutputFilter;
  @EndpointInject(uri="mock:output-choice") private MockEndpoint mockOutputChoice;
  @EndpointInject(uri="mock:output-choice2") private MockEndpoint mockOutputChoice2;
  @Test public void testFilter() throws Exception {
    mockOutputFilter.expectedMessageCount(1);
    template.sendBody("direct:filter","<greeting><text>Hello, world!</text></greeting>");
    mockOutputFilter.assertIsSatisfied();
  }
  @Test public void testChoice() throws Exception {
    mockOutputChoice.expectedMessageCount(1);
    template.sendBody("direct:choice","<greeting><text>Bye, world!</text></greeting>");
    mockOutputChoice.assertIsSatisfied();
  }
  @Test public void testChoice2() throws Exception {
    mockOutputChoice2.expectedMessageCount(1);
    template.sendBody("direct:choice2","<greeting><text>Bye, world!</text></greeting>");
    mockOutputChoice2.assertIsSatisfied();
  }
@Configuration public static class TestConfig {
    @Bean public RouteBuilder routeBuilder(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:filter").filter().xpath("{{foo}}").log("Passed filter!").to("mock:output-filter");
          from("direct:choice").choice().when(xpath("{{bar}}")).log("Passed choice!").to("mock:output-choice");
          from("direct:choice2").choice().when().xpath("{{bar}}").log("Passed choice2!").to("mock:output-choice2");
        }
      }
;
    }
  }
}
