public class BasicSubscriberTest extends CamelTestSupport {
  @Test public void testWorking() throws Exception {
    int count=2;
    MockEndpoint e1=getMockEndpoint("mock:sub1");
    e1.expectedMinimumMessageCount(count);
    e1.assertIsSatisfied();
    MockEndpoint e2=getMockEndpoint("mock:sub2");
    e2.expectedMinimumMessageCount(count);
    e2.assertIsSatisfied();
    MockEndpoint e3=getMockEndpoint("mock:sub3");
    e3.expectedMinimumMessageCount(count);
    e3.assertIsSatisfied();
    for (int i=0; i < count; i++) {
      Exchange ex1=e1.getExchanges().get(i);
      Exchange ex2=e2.getExchanges().get(i);
      Exchange ex3=e3.getExchanges().get(i);
      assertEquals(ex1.getIn().getBody(),ex2.getIn().getBody());
      assertEquals(ex1.getIn().getBody(),ex3.getIn().getBody());
    }
  }
  @Override protected void doPostSetup() throws Exception {
    Subscriber<Integer> sub=CamelReactiveStreams.get(context()).streamSubscriber("sub",Integer.class);
    Subscriber<Integer> sub2=CamelReactiveStreams.get(context()).streamSubscriber("sub2",Integer.class);
    Publisher<Integer> pub=CamelReactiveStreams.get(context()).fromStream("pub",Integer.class);
    pub.subscribe(sub);
    pub.subscribe(sub2);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:sub").to("mock:sub1");
        from("reactive-streams:sub2").to("mock:sub2");
        from("timer:tick?period=50").setBody().simple("random(500)").wireTap("mock:sub3").to("reactive-streams:pub");
      }
    }
;
  }
}
