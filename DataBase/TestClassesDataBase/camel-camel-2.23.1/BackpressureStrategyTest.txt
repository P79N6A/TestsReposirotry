public class BackpressureStrategyTest extends CamelTestSupport {
  @Test public void testBackpressureBufferStrategy() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers");
      }
    }
.addRoutesToCamelContext(context);
    Flowable<Integer> integers=Flowable.fromPublisher(CamelReactiveStreams.get(context).fromStream("integers",Integer.class));
    ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
    CountDownLatch latch=new CountDownLatch(1);
    Flowable.interval(0,50,TimeUnit.MILLISECONDS).zipWith(integers,(l,i) -> i).timeout(2000,TimeUnit.MILLISECONDS,Flowable.empty()).doOnComplete(latch::countDown).subscribe(queue::add);
    context().start();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertEquals(20,queue.size());
    int num=1;
    for (    int i : queue) {
      assertEquals(num++,i);
    }
  }
  @Test public void testBackpressureDropStrategy() throws Exception {
    ReactiveStreamsComponent comp=(ReactiveStreamsComponent)context().getComponent("reactive-streams");
    comp.setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.OLDEST);
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers");
      }
    }
.addRoutesToCamelContext(context);
    ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
    final CountDownLatch latch=new CountDownLatch(1);
    final CountDownLatch latch2=new CountDownLatch(2);
    TestSubscriber<Integer> subscriber=new TestSubscriber<Integer>(){
      @Override public void onNext(      Integer o){
        queue.add(o);
        latch.countDown();
        latch2.countDown();
      }
    }
;
    subscriber.setInitiallyRequested(1);
    CamelReactiveStreams.get(context).fromStream("integers",Integer.class).subscribe(subscriber);
    context().start();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    Thread.sleep(1000);
    subscriber.request(19);
    assertTrue(latch2.await(1,TimeUnit.SECONDS));
    Thread.sleep(200);
    assertEquals(2,queue.size());
    int sum=queue.stream().reduce((i,j) -> i + j).get();
    assertEquals(3,sum);
    subscriber.cancel();
  }
  @Test public void testBackpressureLatestStrategy() throws Exception {
    ReactiveStreamsComponent comp=(ReactiveStreamsComponent)context().getComponent("reactive-streams");
    comp.setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.LATEST);
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers");
      }
    }
.addRoutesToCamelContext(context);
    ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
    final CountDownLatch latch=new CountDownLatch(1);
    final CountDownLatch latch2=new CountDownLatch(2);
    TestSubscriber<Integer> subscriber=new TestSubscriber<Integer>(){
      @Override public void onNext(      Integer o){
        queue.add(o);
        latch.countDown();
        latch2.countDown();
      }
    }
;
    subscriber.setInitiallyRequested(1);
    CamelReactiveStreams.get(context).fromStream("integers",Integer.class).subscribe(subscriber);
    context().start();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    Thread.sleep(1000);
    subscriber.request(19);
    assertTrue(latch2.await(1,TimeUnit.SECONDS));
    Thread.sleep(200);
    assertEquals(2,queue.size());
    int sum=queue.stream().reduce((i,j) -> i + j).get();
    assertEquals(21,sum);
    subscriber.cancel();
  }
  @Test public void testBackpressureDropStrategyInEndpoint() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers?backpressureStrategy=OLDEST");
      }
    }
.addRoutesToCamelContext(context);
    ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
    final CountDownLatch latch=new CountDownLatch(1);
    final CountDownLatch latch2=new CountDownLatch(2);
    TestSubscriber<Integer> subscriber=new TestSubscriber<Integer>(){
      @Override public void onNext(      Integer o){
        queue.add(o);
        latch.countDown();
        latch2.countDown();
      }
    }
;
    subscriber.setInitiallyRequested(1);
    CamelReactiveStreams.get(context).fromStream("integers",Integer.class).subscribe(subscriber);
    context().start();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    Thread.sleep(1000);
    subscriber.request(19);
    assertTrue(latch2.await(1,TimeUnit.SECONDS));
    Thread.sleep(200);
    assertEquals(2,queue.size());
    int sum=queue.stream().reduce((i,j) -> i + j).get();
    assertEquals(3,sum);
    subscriber.cancel();
  }
}
