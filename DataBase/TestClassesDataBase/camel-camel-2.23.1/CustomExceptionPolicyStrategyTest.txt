/** 
 * Unit test with a user plugged in exception policy to use instead of default.
 */
public class CustomExceptionPolicyStrategyTest extends ContextTestSupport {
  private static final String MESSAGE_INFO="messageInfo";
  private static final String ERROR_QUEUE="mock:error";
public static class MyPolicyException extends Exception {
    private static final long serialVersionUID=1L;
  }
public static class MyPolicy implements ExceptionPolicyStrategy {
    public OnExceptionDefinition getExceptionPolicy(    Map<ExceptionPolicyKey,OnExceptionDefinition> exceptionPolicices,    Exchange exchange,    Throwable exception){
      return exceptionPolicices.get(new ExceptionPolicyKey(null,MyPolicyException.class,null));
    }
  }
  @Test public void testCustomPolicy() throws Exception {
    MockEndpoint mock=getMockEndpoint(ERROR_QUEUE);
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(MESSAGE_INFO,"Damm my policy exception");
    try {
      template.sendBody("direct:a","Hello Camel");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").exceptionPolicyStrategy(new MyPolicy()));
        onException(MyPolicyException.class).maximumRedeliveries(1).redeliveryDelay(0).setHeader(MESSAGE_INFO,constant("Damm my policy exception")).to(ERROR_QUEUE);
        onException(CamelException.class).maximumRedeliveries(3).redeliveryDelay(0).setHeader(MESSAGE_INFO,constant("Damm a Camel exception")).to(ERROR_QUEUE);
        from("direct:a").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String s=exchange.getIn().getBody(String.class);
            if ("Hello Camel".equals(s)) {
              throw new CamelExchangeException("Forced for testing",exchange);
            }
            exchange.getOut().setBody("Hello World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
