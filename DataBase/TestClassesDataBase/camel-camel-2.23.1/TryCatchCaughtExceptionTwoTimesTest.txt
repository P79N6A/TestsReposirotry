/** 
 */
public class TryCatchCaughtExceptionTwoTimesTest extends ContextTestSupport {
  @Test public void testTryCatchCaughtException() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:c").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",this);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").doTry().to("mock:a").to("bean:myBean?method=doSomething").doCatch(Exception.class).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            assertEquals("bean://myBean?method=doSomething",exchange.getProperty(Exchange.FAILURE_ENDPOINT));
            assertEquals("Forced",exchange.getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class).getMessage());
          }
        }
).end().to("mock:b").doTry().to("mock:c").to("bean:myBean?method=doSomethingElse").doCatch(Exception.class).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            assertEquals("bean://myBean?method=doSomethingElse",exchange.getProperty(Exchange.FAILURE_ENDPOINT));
            assertEquals("Forced Again",exchange.getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class).getMessage());
          }
        }
).end().to("mock:result");
      }
    }
;
  }
  public void doSomething(  String body) throws Exception {
    throw new IllegalArgumentException("Forced");
  }
  public void doSomethingElse(  String body) throws Exception {
    throw new IllegalArgumentException("Forced Again");
  }
}
