@Ignore("Requires a running Kubernetes Cluster") public class KubernetesReplicationControllersConsumerTest extends KubernetesTestSupport {
  @EndpointInject(uri="mock:result") protected MockEndpoint mockResultEndpoint;
  @Test public void createAndDeleteReplicationController() throws Exception {
    if (ObjectHelper.isEmpty(authToken)) {
      return;
    }
    mockResultEndpoint.expectedHeaderValuesReceivedInAnyOrder(KubernetesConstants.KUBERNETES_EVENT_ACTION,"ADDED","DELETED","MODIFIED","MODIFIED","MODIFIED");
    Exchange ex=template.request("direct:createReplicationController",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"default");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME,"test");
        Map<String,String> labels=new HashMap<>();
        labels.put("this","rocks");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLERS_LABELS,labels);
        ReplicationControllerSpec rcSpec=new ReplicationControllerSpec();
        rcSpec.setReplicas(2);
        PodTemplateSpecBuilder builder=new PodTemplateSpecBuilder();
        PodTemplateSpec t=builder.withNewMetadata().withName("nginx-template").addToLabels("server","nginx").endMetadata().withNewSpec().addNewContainer().withName("wildfly").withImage("jboss/wildfly").addNewPort().withContainerPort(80).endPort().endContainer().endSpec().build();
        rcSpec.setTemplate(t);
        Map<String,String> selectorMap=new HashMap<>();
        selectorMap.put("server","nginx");
        rcSpec.setSelector(selectorMap);
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_SPEC,rcSpec);
      }
    }
);
    ReplicationController rc=ex.getOut().getBody(ReplicationController.class);
    assertEquals(rc.getMetadata().getName(),"test");
    ex=template.request("direct:deleteReplicationController",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"default");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME,"test");
      }
    }
);
    boolean rcDeleted=ex.getOut().getBody(Boolean.class);
    assertTrue(rcDeleted);
    Thread.sleep(3000);
    mockResultEndpoint.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:list").toF("kubernetes-replication-controllers://%s?oauthToken=%s&operation=listReplicationControllers",host,authToken);
        from("direct:listByLabels").toF("kubernetes-replication-controllers://%s?oauthToken=%s&operation=listReplicationControllersByLabels",host,authToken);
        from("direct:getReplicationController").toF("kubernetes-replication-controllers://%s?oauthToken=%s&operation=getReplicationController",host,authToken);
        from("direct:createReplicationController").toF("kubernetes-replication-controllers://%s?oauthToken=%s&operation=createReplicationController",host,authToken);
        from("direct:deleteReplicationController").toF("kubernetes-replication-controllers://%s?oauthToken=%s&operation=deleteReplicationController",host,authToken);
        fromF("kubernetes-replication-controllers://%s?oauthToken=%s&resourceName=wildfly",host,authToken).process(new KubernertesProcessor()).to(mockResultEndpoint);
      }
    }
;
  }
public class KubernertesProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      log.info("Got event with body: " + in.getBody() + " and action "+ in.getHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION));
    }
  }
}
