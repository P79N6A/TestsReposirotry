@RunWith(FrameworkRunner.class) @CreateLdapServer(transports={@CreateTransport(protocol="LDAP")}) @ApplyLdifFiles("org/apache/camel/component/ldap/LdapRouteTest.ldif") public class LdapRouteTwoTest extends AbstractLdapTestUnit {
  private CamelContext camel;
  private ProducerTemplate template;
  private int port;
  @Before public void setup() throws Exception {
    port=super.getLdapServer().getPort();
    Hashtable<String,String> env=new Hashtable();
    env.put("java.naming.factory.initial","com.sun.jndi.ldap.LdapCtxFactory");
    env.put("java.naming.provider.url",Network.ldapLoopbackUrl(ldapServer.getPort()));
    env.put("java.naming.security.principal","uid=admin,ou=system");
    env.put("java.naming.security.credentials","secret");
    env.put("java.naming.security.authentication","simple");
    SimpleRegistry reg=new SimpleRegistry();
    reg.put("localhost:" + port,env);
    camel=new DefaultCamelContext(reg);
    template=camel.createProducerTemplate();
  }
  @After public void tearDown() throws Exception {
    camel.stop();
  }
  @Test public void testLdapRouteStandardTwo() throws Exception {
    camel.addRoutes(createRouteBuilder("ldap:localhost:" + port + "?base=ou=system"));
    camel.start();
    Endpoint endpoint=camel.getEndpoint("direct:start");
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setBody("(!(ou=test1))");
    Exchange out=template.send(endpoint,exchange);
    Collection<SearchResult> searchResults=defaultLdapModuleOutAssertions(out);
    assertFalse(contains("uid=test1,ou=test,ou=system",searchResults));
    assertTrue(contains("uid=test2,ou=test,ou=system",searchResults));
    assertTrue(contains("uid=testNoOU,ou=test,ou=system",searchResults));
    assertTrue(contains("uid=tcruise,ou=actors,ou=system",searchResults));
    endpoint=camel.getEndpoint("direct:start");
    exchange=endpoint.createExchange();
    exchange.getIn().setBody("(!(ou=test1))");
    out=template.send(endpoint,exchange);
    searchResults=defaultLdapModuleOutAssertions(out);
    assertFalse(contains("uid=test1,ou=test,ou=system",searchResults));
    assertTrue(contains("uid=test2,ou=test,ou=system",searchResults));
    assertTrue(contains("uid=testNoOU,ou=test,ou=system",searchResults));
    assertTrue(contains("uid=tcruise,ou=actors,ou=system",searchResults));
  }
  @SuppressWarnings("unchecked") private Collection<SearchResult> defaultLdapModuleOutAssertions(  Exchange out){
    assertNotNull(out);
    assertNotNull(out.getOut());
    Collection<SearchResult> data=out.getOut().getBody(Collection.class);
    assertNotNull("out body could not be converted to a Collection - was: " + out.getOut().getBody(),data);
    return data;
  }
  protected boolean contains(  String dn,  Collection<SearchResult> results){
    for (    SearchResult result : results) {
      if (result.getNameInNamespace().equals(dn)) {
        return true;
      }
    }
    return false;
  }
  protected RouteBuilder createRouteBuilder(  final String ldapEndpointUrl) throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").to(ldapEndpointUrl);
      }
    }
;
  }
}
