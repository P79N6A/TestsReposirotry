/** 
 * This class tests the unmarshalling of  {@link org.apache.camel.dataformat.univocity.UniVocityTsvDataFormat}.
 */
public final class UniVocityTsvDataFormatUnmarshalTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") MockEndpoint result;
  /** 
 * Tests that we can unmarshal TSV with the default configuration.
 */
  @Test public void shouldUnmarshalWithDefaultConfiguration() throws Exception {
    template.sendBody("direct:default",join("A\tB\tC","1\t2\t3","one\ttwo\tthree"));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    List<?> body=assertIsInstanceOf(List.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(3,body.size());
    assertEquals(Arrays.asList("A","B","C"),body.get(0));
    assertEquals(Arrays.asList("1","2","3"),body.get(1));
    assertEquals(Arrays.asList("one","two","three"),body.get(2));
  }
  /** 
 * Tests that we can unmarshal TSV and produce maps for each row
 */
  @Test public void shouldUnmarshalAsMap() throws Exception {
    template.sendBody("direct:map",join("A\tB\tC","1\t2\t3","one\ttwo\tthree"));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    List<?> body=assertIsInstanceOf(List.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(2,body.size());
    assertEquals(asMap("A","1","B","2","C","3"),body.get(0));
    assertEquals(asMap("A","one","B","two","C","three"),body.get(1));
  }
  /** 
 * Tests that we can unmarshal TSV and produce maps for each row with the given header
 */
  @Test public void shouldUnmarshalAsMapWithHeaders() throws Exception {
    template.sendBody("direct:mapWithHeaders",join("1\t2\t3","one\ttwo\tthree"));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    List<?> body=assertIsInstanceOf(List.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(2,body.size());
    assertEquals(asMap("A","1","B","2","C","3"),body.get(0));
    assertEquals(asMap("A","one","B","two","C","three"),body.get(1));
  }
  /** 
 * Tests that we can unmarshal TSV and produce an Iterator that lazily reads the input
 */
  @Test public void shouldUnmarshalUsingIterator() throws Exception {
    template.sendBody("direct:lazy",join("A\tB\tC","1\t2\t3","one\ttwo\tthree"));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    Iterator<?> body=assertIsInstanceOf(Iterator.class,result.getExchanges().get(0).getIn().getBody());
    assertTrue(body.hasNext());
    assertEquals(Arrays.asList("A","B","C"),body.next());
    try {
      body.remove();
      fail("Should have thrown a UnsupportedOperationException");
    }
 catch (    UnsupportedOperationException e) {
    }
    assertTrue(body.hasNext());
    assertEquals(Arrays.asList("1","2","3"),body.next());
    assertTrue(body.hasNext());
    assertEquals(Arrays.asList("one","two","three"),body.next());
    assertFalse(body.hasNext());
    try {
      body.next();
      fail("Should have thrown a NoSuchElementException");
    }
 catch (    NoSuchElementException e) {
    }
  }
  /** 
 * Tests that we can unmarshal TSV that has lots of configuration options
 */
  @Test public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception {
    template.sendBody("direct:advanced",join("!This is comment","!This is comment too","A\tB","","  \tD  "));
    result.expectedMessageCount(1);
    result.assertIsSatisfied();
    List<?> body=assertIsInstanceOf(List.class,result.getExchanges().get(0).getIn().getBody());
    assertEquals(2,body.size());
    assertEquals(Arrays.asList("A","B"),body.get(0));
    assertEquals(Arrays.asList("N/A","D  "),body.get(1));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    final Map<String,DataFormat> tests=new HashMap<>();
    tests.put("default",new UniVocityTsvDataFormat());
    tests.put("map",new UniVocityTsvDataFormat().setAsMap(true).setHeaderExtractionEnabled(true));
    tests.put("mapWithHeaders",new UniVocityTsvDataFormat().setAsMap(true).setHeaders(new String[]{"A","B","C"}));
    tests.put("lazy",new UniVocityTsvDataFormat().setLazyLoad(true));
    tests.put("advanced",new UniVocityTsvDataFormat().setNullValue("N/A").setIgnoreLeadingWhitespaces(true).setIgnoreTrailingWhitespaces(false).setComment('!').setSkipEmptyLines(true));
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        for (        Map.Entry<String,DataFormat> test : tests.entrySet()) {
          from("direct:" + test.getKey()).unmarshal(test.getValue()).to("mock:result");
        }
      }
    }
;
  }
}
