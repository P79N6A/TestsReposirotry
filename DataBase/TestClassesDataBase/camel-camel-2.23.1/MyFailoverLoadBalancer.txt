/** 
 * A custom failover processor
 */
public static class MyFailoverLoadBalancer implements Processor {
  private final ProducerTemplate template;
  private final List<String> endpoints;
  private int counter=-1;
  public MyFailoverLoadBalancer(  ProducerTemplate template,  String... endpoints){
    this.template=template;
    this.endpoints=new ArrayList<>(Arrays.asList(endpoints));
  }
  public void process(  Exchange exchange) throws Exception {
    boolean done=false;
    while (!done) {
      if (++counter >= endpoints.size()) {
        counter=0;
      }
      String endpoint=endpoints.get(counter);
      try {
        template.send(endpoint,exchange);
      }
 catch (      Exception e) {
        exchange.setException(e);
      }
      done=exchange.getException() == null;
      if (!done) {
        prepareExchangeForFailover(exchange);
      }
    }
  }
  private void prepareExchangeForFailover(  Exchange exchange){
    exchange.setException(null);
    exchange.setProperty(Exchange.ERRORHANDLER_HANDLED,null);
    exchange.setProperty(Exchange.FAILURE_HANDLED,null);
    exchange.setProperty(Exchange.EXCEPTION_CAUGHT,null);
    exchange.getIn().removeHeader(Exchange.REDELIVERED);
    exchange.getIn().removeHeader(Exchange.REDELIVERY_COUNTER);
  }
}
