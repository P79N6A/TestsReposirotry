public class MessageReceiverListenerImplTest {
  private MessageReceiverListenerImpl listener;
  private SmppEndpoint endpoint;
  private Processor processor;
  private ExceptionHandler exceptionHandler;
  @Before public void setUp(){
    endpoint=mock(SmppEndpoint.class);
    processor=mock(Processor.class);
    exceptionHandler=mock(ExceptionHandler.class);
    listener=new MessageReceiverListenerImpl(endpoint,processor,exceptionHandler);
    listener.setMessageIDGenerator(new MessageIDGenerator(){
      public MessageId newMessageId(){
        try {
          return new MessageId("1");
        }
 catch (        PDUStringException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  @Test public void onAcceptAlertNotificationSuccess() throws Exception {
    AlertNotification alertNotification=mock(AlertNotification.class);
    Exchange exchange=mock(Exchange.class);
    when(endpoint.createOnAcceptAlertNotificationExchange(alertNotification)).thenReturn(exchange);
    when(exchange.getException()).thenReturn(null);
    listener.onAcceptAlertNotification(alertNotification);
    verify(endpoint).createOnAcceptAlertNotificationExchange(alertNotification);
    verify(processor).process(exchange);
  }
  @Test public void onAcceptDeliverSmException() throws Exception {
    DeliverSm deliverSm=mock(DeliverSm.class);
    Exchange exchange=mock(Exchange.class);
    when(endpoint.createOnAcceptDeliverSmExchange(deliverSm)).thenReturn(exchange);
    when(exchange.getException()).thenReturn(null);
    listener.onAcceptDeliverSm(deliverSm);
    verify(endpoint).createOnAcceptDeliverSmExchange(deliverSm);
    verify(processor).process(exchange);
  }
  @Test public void onAcceptDataSmSuccess() throws Exception {
    SMPPSession session=mock(SMPPSession.class);
    DataSm dataSm=mock(DataSm.class);
    Exchange exchange=mock(Exchange.class);
    OptionalParameter[] optionalParameters=new OptionalParameter[]{};
    when(endpoint.createOnAcceptDataSm(dataSm,"1")).thenReturn(exchange);
    when(exchange.getException()).thenReturn(null);
    when(dataSm.getOptionalParameters()).thenReturn(optionalParameters);
    DataSmResult result=listener.onAcceptDataSm(dataSm,session);
    verify(endpoint).createOnAcceptDataSm(dataSm,"1");
    verify(processor).process(exchange);
    assertEquals("1",result.getMessageId());
    assertSame(optionalParameters,result.getOptionalParameters());
  }
}
