public class ActivatorTest {
  public static final Logger LOG=LoggerFactory.getLogger(ActivatorTest.class);
  private Bundle mockBundle;
  @Before public void mockBundle() throws ClassNotFoundException {
    mockBundle=Mockito.mock(Bundle.class);
    when(mockBundle.loadClass(anyString())).thenAnswer(new Answer<Object>(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        return ActivatorTest.class.getClassLoader().loadClass(invocation.getArguments()[0].toString());
      }
    }
);
  }
  @Test public void findScriptEngines() throws IOException {
    Enumeration<URL> urls=getClass().getClassLoader().getResources(Activator.META_INF_SERVICES_DIR + "/" + Activator.SCRIPT_ENGINE_SERVICE_FILE);
    assertThat(urls.hasMoreElements(),is(true));
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      LOG.info("Found {}",url);
      System.out.println("Found: " + url);
      Activator.BundleScriptEngineResolver resolver=new Activator.BundleScriptEngineResolver(mockBundle,url);
      ScriptEngineFactory factory=ReflectionTestUtils.invokeMethod(resolver,"getFactory");
      System.out.println("Factory: " + factory);
      assertNotNull(factory);
    }
  }
}
