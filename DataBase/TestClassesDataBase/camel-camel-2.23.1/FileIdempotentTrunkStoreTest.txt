/** 
 * @version 
 */
public class FileIdempotentTrunkStoreTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  private File store=new File("target/idempotentfilestore.dat");
  private IdempotentRepository<String> repo;
  @Test public void testTrunkFileStore() throws Exception {
    resultEndpoint.expectedBodiesReceived("A","B","C","D","E");
    sendMessage("AAAAAAAAAA","A");
    sendMessage("BBBBBBBBBB","B");
    sendMessage("CCCCCCCCCC","C");
    sendMessage("AAAAAAAAAA","A");
    sendMessage("DDDDDDDDDD","D");
    sendMessage("BBBBBBBBBB","B");
    sendMessage("EEEEEEEEEE","E");
    resultEndpoint.assertIsSatisfied();
    resultEndpoint.reset();
    resultEndpoint.expectedBodiesReceived("Z","X");
    sendMessage("ZZZZZZZZZZ","Z");
    sendMessage("XXXXXXXXXX","X");
    resultEndpoint.assertIsSatisfied();
    assertTrue(repo.contains("XXXXXXXXXX"));
    Stream<String> fileContent=Files.lines(store.toPath());
    List<String> fileEntries=fileContent.collect(Collectors.toList());
    fileContent.close();
    Assert.assertThat(fileEntries,IsIterableContainingInOrder.contains("ZZZZZZZZZZ","XXXXXXXXXX"));
  }
  protected void sendMessage(  final Object messageId,  final Object body){
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("messageId",messageId);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    if (store.exists()) {
      store.delete();
    }
    repo=FileIdempotentRepository.fileIdempotentRepository(store,5,50);
    repo.start();
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start");
    resultEndpoint=getMockEndpoint("mock:result");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").idempotentConsumer(header("messageId"),repo).to("mock:result");
      }
    }
;
  }
}
