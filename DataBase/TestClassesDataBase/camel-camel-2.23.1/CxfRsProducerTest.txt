public class CxfRsProducerTest extends CamelSpringTestSupport {
  private static int port1=CXFTestSupport.getPort1();
  private static int port2=CXFTestSupport.getPort("CxfRsProducerTest.jetty");
public static class JettyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      Message inMessage=exchange.getIn();
      exchange.getOut().setBody(inMessage.getHeader(Exchange.HTTP_QUERY,String.class));
    }
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  public int getPort1(){
    return port1;
  }
  public int getPort2(){
    return port2;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducer.xml");
  }
  protected void setupDestinationURL(  Message inMessage){
  }
  @Test public void testGetCustomerWithClientProxyAPI(){
    Exchange exchange=template.send("direct://proxy",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.OPERATION_NAME,"getCustomer");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.FALSE);
        inMessage.setHeader("key","value");
        inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE,"application/json");
        inMessage.setBody("123");
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
    assertEquals("Get a wrong response code",200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("Get a wrong header value","value",exchange.getOut().getHeader("key"));
  }
  @Test public void testGetCustomersWithClientProxyAPI(){
    Exchange exchange=template.send("direct://proxy",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.OPERATION_NAME,"getCustomers");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.FALSE);
        inMessage.setBody(null);
      }
    }
);
    List<Customer> response=CastUtils.cast((List<?>)exchange.getOut().getBody());
    assertNotNull("The response should not be null ",response);
    assertTrue("Dan is missing!",response.contains(new Customer(113,"Dan")));
    assertTrue("John is missing!",response.contains(new Customer(123,"John")));
    assertEquals("Get a wrong response code",200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testGetCustomerWithHttpCentralClientAPI(){
    Exchange exchange=template.send("direct://http",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
        inMessage.setHeader("key","value");
        inMessage.setBody(null);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
    assertEquals("Get a wrong response code",200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertEquals("Get a wrong header value","value",exchange.getOut().getHeader("key"));
  }
  @Test public void testSuppressGetCustomerExceptionWithCxfRsEndpoint(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/?httpClientAPI=true&throwExceptionOnFailure=false&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message message=exchange.getIn();
        message.setHeader(Exchange.HTTP_METHOD,"PUT");
        message.setHeader(Exchange.HTTP_PATH,"/customerservice/customers");
        Customer customer=new Customer();
        customer.setId(222);
        customer.setName("user");
        message.setBody(customer);
      }
    }
);
    assertNull("Don't expect the exception here",exchange.getException());
    Message result=exchange.getOut();
    assertEquals("Get a wrong http status code.",406,result.getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testGetCustomerExceptionWithCxfRsEndpoint(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/?httpClientAPI=true&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message message=exchange.getIn();
        message.setHeader(Exchange.HTTP_METHOD,"PUT");
        message.setHeader(Exchange.HTTP_PATH,"/customerservice/customers");
        Customer customer=new Customer();
        customer.setId(222);
        customer.setName("user");
        message.setBody(customer);
      }
    }
);
    assertNotNull("Expect the exception here",exchange.getException());
    CxfOperationException exception=(CxfOperationException)exchange.getException();
    assertEquals("Get a wrong response body","Cannot find the customer!",exception.getResponseBody());
  }
  @Test public void testGetCustomerWithCxfRsEndpoint(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/?httpClientAPI=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
        inMessage.setBody(null);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
    assertEquals("Get a wrong response code",200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testGetCustomerWithVariableReplacementAndCxfRsEndpoint(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/?httpClientAPI=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/{customerId}");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES,new String[]{"123"});
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
        inMessage.setBody(null);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
    assertEquals("Get a wrong response code",200,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testAddCustomerUniqueResponseCodeWithHttpClientAPI(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "?httpClientAPI=true&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(Exchange.HTTP_METHOD,"POST");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customersUniqueResponseCode");
        Customer customer=new Customer();
        customer.setId(9999);
        customer.setName("HttpClient");
        inMessage.setBody(customer);
      }
    }
);
    Response response=(Response)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertNotNull("The response entity should not be null",response.getEntity());
    assertEquals("Get a wrong response code",201,response.getStatus());
    assertEquals("Get a wrong response code",201,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testAddCustomerUniqueResponseCodeWithProxyAPI(){
    Exchange exchange=template.send("direct://proxy",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.OPERATION_NAME,"addCustomerUniqueResponseCode");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.FALSE);
        Customer customer=new Customer();
        customer.setId(8888);
        customer.setName("ProxyAPI");
        inMessage.setBody(customer);
      }
    }
);
    Response response=(Response)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertNotNull("The response entity should not be null",response.getEntity());
    assertEquals("Get a wrong response code",201,response.getStatus());
    assertEquals("Get a wrong response code",201,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testAddCustomerUniqueResponseCode(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "?httpClientAPI=true&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(Exchange.HTTP_METHOD,"POST");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customersUniqueResponseCode");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
        Customer customer=new Customer();
        customer.setId(8888);
        customer.setName("Willem");
        inMessage.setBody(customer);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertTrue("Get a wrong customer id ",response.getId() != 8888);
    assertEquals("Get a wrong customer name","Willem",response.getName());
    assertEquals("Get a wrong response code",201,exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Test public void testProducerWithQueryParameters(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort2() + "/"+ getClass().getSimpleName()+ "/testQuery?httpClientAPI=true&q1=12&q2=13&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,InputStream.class);
        inMessage.setBody(null);
      }
    }
);
    String response=exchange.getOut().getBody(String.class);
    assertNotNull("The response should not be null ",response);
    assertEquals("The response value is wrong","q1=12&q2=13",response);
  }
  @Test public void testProducerWithQueryParametersHeader(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort2() + "/"+ getClass().getSimpleName()+ "/testQuery?httpClientAPI=true&q1=12&q2=13&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,InputStream.class);
        Map<String,String> queryMap=new LinkedHashMap<>();
        queryMap.put("q1","new");
        queryMap.put("q2","world");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP,queryMap);
        inMessage.setBody(null);
      }
    }
);
    String response=exchange.getOut().getBody(String.class);
    assertNotNull("The response should not be null ",response);
    assertEquals("The response value is wrong","q1=new&q2=world",response);
  }
  @Test public void testRestServerDirectlyGetCustomer(){
    String response=template.requestBodyAndHeader("cxfrs:http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/customerservice/customers/123?synchronous=true",null,Exchange.HTTP_METHOD,"GET",String.class);
    assertNotNull("The response should not be null ",response);
  }
  @Test public void testRestServerDirectlyAddCustomer(){
    Customer input=new Customer();
    input.setName("Donald Duck");
    String response=template.requestBodyAndHeader("cxfrs:http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/customerservice/customers?synchronous=true",input,Exchange.HTTP_METHOD,"POST",String.class);
    assertNotNull(response);
    assertTrue(response.endsWith("<name>Donald Duck</name></Customer>"));
  }
static class TestFeature implements Feature {
    boolean initialized;
    @Override public void initialize(    InterceptorProvider interceptorProvider,    Bus bus){
      initialized=true;
    }
    @Override public void initialize(    Client client,    Bus bus){
    }
    @Override public void initialize(    Server server,    Bus bus){
    }
    @Override public void initialize(    Bus bus){
    }
  }
  @Test public void testProducerWithFeature(){
    TestFeature feature=context().getRegistry().lookupByNameAndType("testFeature",TestFeature.class);
    template.requestBodyAndHeader("cxfrs:http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/customerservice/customers/123?features=#myFeatures&synchronous=true",null,Exchange.HTTP_METHOD,"GET",String.class);
    assertTrue("The feature should be initialized",feature.initialized);
  }
  @Test public void testProducer422Response(){
    Exchange exchange=template.send("cxfrs://http://localhost:" + getPort1() + "/"+ getClass().getSimpleName()+ "/?httpClientAPI=true&synchronous=true",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message message=exchange.getIn();
        message.setHeader(Exchange.HTTP_METHOD,"POST");
        message.setHeader(Exchange.HTTP_PATH,"/customerservice/customers");
        Customer customer=new Customer();
        customer.setId(8888);
        customer.setName("");
        message.setBody(customer);
      }
    }
);
    assertNotNull("Expect the exception here",exchange.getException());
    assertThat("Exception should be a CxfOperationException",exchange.getException(),instanceOf(CxfOperationException.class));
    CxfOperationException cxfOperationException=CxfOperationException.class.cast(exchange.getException());
    assertThat("CXF operation exception has correct response code",cxfOperationException.getStatusCode(),is(422));
  }
}
