/** 
 * Unit test inspired by end user
 */
public class OnExceptionHandleAndTransformWithDefaultErrorHandlerTest extends ContextTestSupport {
  @Test public void testOnExceptionTransformConstant() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(MyFunctionalException.class).handled(true).transform().constant("Sorry");
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new MyFunctionalException("Sorry you cannot do this");
          }
        }
);
      }
    }
);
    Object out=template.requestBody("direct:start","Hello World");
    assertEquals("Sorry",out);
  }
  @Test public void testOnExceptionTransformExceptionMessage() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(MyFunctionalException.class).handled(true).transform(exceptionMessage());
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new MyFunctionalException("Sorry you cannot do this again to me");
          }
        }
);
      }
    }
);
    Object out=template.requestBody("direct:start","Hello World");
    assertEquals("Sorry you cannot do this again to me",out);
  }
  @Test public void testOnExceptionSimpleLangaugeExceptionMessage() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(MyFunctionalException.class).handled(true).transform().simple("Error reported: ${exception.message} - cannot process this message.");
        from("direct:start").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new MyFunctionalException("Out of order");
          }
        }
);
      }
    }
);
    Object out=template.requestBody("direct:start","Hello World");
    assertEquals("Error reported: Out of order - cannot process this message.",out);
  }
}
