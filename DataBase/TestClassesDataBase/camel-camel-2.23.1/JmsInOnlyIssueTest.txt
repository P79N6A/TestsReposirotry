/** 
 * @version 
 */
public class JmsInOnlyIssueTest extends CamelTestSupport {
  @Test public void testInOnlyWithSendBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    template.sendBody("activemq:queue:in","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyWithAsyncSendBody() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    Thread.sleep(1000);
    template.asyncSendBody("activemq:queue:in","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnlyWithSendExchange() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    Exchange out=template.send("activemq:queue:in",ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertFalse("Should not have OUT",out.hasOut());
  }
  @Test public void testInOnlyWithAsyncSendExchange() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    Thread.sleep(1000);
    template.asyncSend("activemq:queue:in",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOnly);
        exchange.getIn().setBody("Hello World");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("activemq:queue:in").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody("Bye World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
