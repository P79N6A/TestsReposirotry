/** 
 * UnitOfWork should complete even if client disconnected during the processing.
 */
public class CxfConsumerClientDisconnectedTest extends CamelTestSupport {
  private static final int PORT=CXFTestSupport.getPort1();
  private static final String CONTEXT="/CxfConsumerClientDisconnectedTest";
  private static final String CXT=PORT + CONTEXT;
  private String cxfRsEndpointUri="cxf://http://localhost:" + CXT + "/rest?synchronous="+ isSynchronous()+ "&serviceClass=org.apache.camel.component.cxf.ServiceProvider&dataFormat=PAYLOAD";
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().setStreamCaching(true);
        getContext().getStreamCachingStrategy().setSpoolThreshold(1L);
        errorHandler(noErrorHandler());
        from(cxfRsEndpointUri).to("mock:result").process(exchange -> {
          Thread.sleep(100);
          exchange.addOnCompletion(new Synchronization(){
            @Override public void onComplete(            Exchange exchange){
              template.sendBody("mock:onComplete","");
            }
            @Override public void onFailure(            Exchange exchange){
            }
          }
);
        }
);
      }
    }
;
  }
  @Test public void testClientDisconnect() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    MockEndpoint onComplete=getMockEndpoint("mock:onComplete");
    onComplete.expectedMessageCount(1);
    TelnetClient telnetClient=new TelnetClient();
    telnetClient.connect("localhost",PORT);
    telnetClient.setTcpNoDelay(true);
    telnetClient.setReceiveBufferSize(1);
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(telnetClient.getOutputStream()));
    writer.write("GET " + CONTEXT + "/rest/customerservice/customers HTTP/1.1\nhost: localhost\n\n");
    writer.flush();
    telnetClient.disconnect();
    mock.assertIsSatisfied();
    onComplete.assertIsSatisfied();
  }
  protected boolean isSynchronous(){
    return false;
  }
}
