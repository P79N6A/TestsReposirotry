public class RssDataFormatTest extends CamelTestSupport {
  private String feedXml;
  private SyndFeed feed;
  @Test public void testMarshalling() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:marshal");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains(feedXml);
    mock.assertIsSatisfied();
  }
  @Test public void testUnmarshalling() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:unmarshal");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(SyndFeed.class);
    mock.message(0).body(SyndFeed.class).equals(feed);
    mock.assertIsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    feed=RssUtils.createFeed("file:src/test/data/rss20.xml");
    feedXml=RssConverter.feedToXml(feed);
    super.setUp();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=1000").marshal().rss().to("mock:marshal");
        from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=1500").marshal().rss().unmarshal().rss().to("mock:unmarshal");
      }
    }
;
  }
}
