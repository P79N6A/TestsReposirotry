public class StickyLoadBalanceTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").loadBalance().sticky(header("foo")).to("mock:x","mock:y","mock:z");
      }
    }
;
  }
  @Test public void testSticky() throws Exception {
    x.expectedBodiesReceived("A","D","F");
    y.expectedBodiesReceived("B","C","G","H");
    z.expectedBodiesReceived("E");
    template.sendBodyAndHeader("direct:start","A","foo",1);
    template.sendBodyAndHeader("direct:start","B","foo",2);
    template.sendBodyAndHeader("direct:start","C","foo",2);
    template.sendBodyAndHeader("direct:start","D","foo",1);
    template.sendBodyAndHeader("direct:start","E","foo",3);
    template.sendBodyAndHeader("direct:start","F","foo",1);
    template.sendBodyAndHeader("direct:start","G","foo",2);
    template.sendBodyAndHeader("direct:start","H","foo",2);
    assertMockEndpointsSatisfied();
  }
}
