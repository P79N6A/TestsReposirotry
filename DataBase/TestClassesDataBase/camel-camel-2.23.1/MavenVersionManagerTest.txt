@Ignore("Cannot run on CI servers so run manually") public class MavenVersionManagerTest extends Assert {
  private static final String COMPONENTS_CATALOG="org/apache/camel/catalog/components.properties";
  @Test public void testLoadVersion() throws Exception {
    MavenVersionManager manager=new MavenVersionManager();
    String current=manager.getLoadedVersion();
    assertNull(current);
    boolean loaded=manager.loadVersion("2.17.1");
    assertTrue(loaded);
    assertEquals("2.17.1",manager.getLoadedVersion());
    InputStream is=manager.getResourceAsStream(COMPONENTS_CATALOG);
    assertNotNull(is);
    String text=CatalogHelper.loadText(is);
    assertFalse(text.contains("servicenow"));
    assertTrue(text.contains("nats"));
  }
  @Test public void testEndpointOptions217() throws Exception {
    CamelCatalog catalog=new DefaultCamelCatalog(false);
    catalog.setVersionManager(new MavenVersionManager());
    catalog.loadVersion("2.17.1");
    assertEquals("2.17.1",catalog.getLoadedVersion());
    String json=catalog.componentJSonSchema("ahc");
    assertNotNull(json);
    assertTrue(json.contains("\"version\": \"2.17.1\""));
    assertFalse(json.contains("connectionClose"));
  }
  @Test public void testEndpointOptions218OrNewer() throws Exception {
    CamelCatalog catalog=new DefaultCamelCatalog(false);
    String json=catalog.componentJSonSchema("ahc");
    assertNotNull(json);
    assertTrue(json.contains("connectionClose"));
  }
  @Test public void testRuntimeProviderLoadVersion() throws Exception {
    CamelCatalog catalog=new DefaultCamelCatalog(false);
    catalog.setVersionManager(new MavenVersionManager());
    catalog.setRuntimeProvider(new SpringBootRuntimeProvider());
    String version="2.18.2";
    boolean loaded=catalog.loadVersion(version);
    assertTrue(loaded);
    loaded=catalog.loadRuntimeProviderVersion(catalog.getRuntimeProvider().getProviderGroupId(),catalog.getRuntimeProvider().getProviderArtifactId(),version);
    assertTrue(loaded);
    assertEquals(version,catalog.getLoadedVersion());
    assertEquals(version,catalog.getRuntimeProviderLoadedVersion());
    List<String> names=catalog.findComponentNames();
    assertTrue(names.contains("file"));
    assertTrue(names.contains("ftp"));
    assertTrue(names.contains("jms"));
    assertFalse(names.contains("ejb"));
    assertFalse(names.contains("paxlogging"));
  }
  @Test public void testRuntimeProviderLoadVersionWithCaching() throws Exception {
    CamelCatalog catalog=new DefaultCamelCatalog(true);
    catalog.setVersionManager(new MavenVersionManager());
    catalog.setRuntimeProvider(new SpringBootRuntimeProvider());
    String version="2.18.2";
    boolean loaded=catalog.loadVersion(version);
    assertTrue(loaded);
    loaded=catalog.loadRuntimeProviderVersion(catalog.getRuntimeProvider().getProviderGroupId(),catalog.getRuntimeProvider().getProviderArtifactId(),version);
    assertTrue(loaded);
    assertEquals(version,catalog.getLoadedVersion());
    assertEquals(version,catalog.getRuntimeProviderLoadedVersion());
    List<String> names=catalog.findComponentNames();
    assertTrue(names.contains("file"));
    assertTrue(names.contains("ftp"));
    assertTrue(names.contains("jms"));
    assertFalse(names.contains("ejb"));
    assertFalse(names.contains("paxlogging"));
  }
  @Test public void testCatalogKarafRuntimeProviderVersionSwitch() throws Exception {
    CamelCatalog catalog=new DefaultCamelCatalog(true);
    MavenVersionManager mvm=new MavenVersionManager();
    mvm.addMavenRepository("asf-ga","https://repo.maven.apache.org/maven2");
    mvm.addMavenRepository("asf-snapshots","https://repository.apache.org/content/groups/snapshots");
    catalog.setVersionManager(mvm);
    catalog.setRuntimeProvider(new KarafRuntimeProvider());
    boolean loaded=catalog.loadVersion("2.18.1");
    assertTrue("Unable to load Camel Catalog 2.18.1",loaded);
    loaded=catalog.loadRuntimeProviderVersion("org.apache.camel","camel-catalog-provider-karaf","2.18.1");
    assertTrue("Unable to load Karaf Provider Camel Catalog 2.18.1",loaded);
    int components=catalog.findComponentNames().size();
    System.out.println("2.18.1 has " + components + " components");
    assertFalse("Should not have ejb component",catalog.findComponentNames().contains("ejb"));
    loaded=catalog.loadVersion("2.19.1");
    assertTrue("Unable to switch to Camel Catalog 2.19.1",loaded);
    loaded=catalog.loadRuntimeProviderVersion("org.apache.camel","camel-catalog-provider-karaf","2.19.1");
    assertTrue("Unable to load Karaf Provider Camel Catalog 2.19.1",loaded);
    int componentsNewer=catalog.findComponentNames().size();
    assertTrue("Both catalog versions shouldn't have the same count of components.",components != componentsNewer);
    System.out.println("2.19.1 has " + componentsNewer + " components");
    assertFalse("Should not have ejb component",catalog.findComponentNames().contains("ejb"));
    loaded=catalog.loadVersion("2.18.1");
    assertTrue("Unable to load Camel Catalog 2.18.1",loaded);
    loaded=catalog.loadRuntimeProviderVersion("org.apache.camel","camel-catalog-provider-karaf","2.18.1");
    assertTrue("Unable to load Karaf Provider Camel Catalog 2.18.1",loaded);
    int components3=catalog.findComponentNames().size();
    assertTrue("Newer load does not match older one",components == components3);
    assertFalse("Should not have ejb component",catalog.findComponentNames().contains("ejb"));
    System.out.println("2.18.1 has " + components3 + " components");
  }
  @Test public void testLoadUnknownVersion() throws Exception {
    MavenVersionManager manager=new MavenVersionManager();
    String current=manager.getLoadedVersion();
    assertNull(current);
    boolean loaded=manager.loadVersion("2.99");
    assertFalse(loaded);
  }
}
