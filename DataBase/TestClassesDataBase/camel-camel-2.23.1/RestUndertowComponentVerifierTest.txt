public class RestUndertowComponentVerifierTest extends BaseUndertowTest {
  @Test public void testParameters() throws Exception {
    RestComponent component=context().getComponent("rest",RestComponent.class);
    ComponentVerifier verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","undertow");
    parameters.put("host","http://localhost:" + getPort());
    parameters.put("path","verify");
    parameters.put("method","GET");
    ComponentVerifier.Result result=verifier.verify(ComponentVerifier.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.OK,result.getStatus());
  }
  @Test public void testMissingRestParameters() throws Exception {
    RestComponent component=context.getComponent("rest",RestComponent.class);
    ComponentVerifier verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","undertow");
    parameters.put("host","http://localhost:" + getPort());
    parameters.put("path","verify");
    parameters.put("tcpNoDelay",true);
    ComponentVerifier.Result result=verifier.verify(ComponentVerifier.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(ComponentVerifier.VerificationError.StandardCode.MISSING_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertEquals(1,result.getErrors().get(0).getParameterKeys().size());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("method"));
  }
  @Test public void testWrongComponentParameters() throws Exception {
    RestComponent component=context.getComponent("rest",RestComponent.class);
    ComponentVerifier verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","undertow");
    parameters.put("host","http://localhost:" + getPort());
    parameters.put("path","verify");
    parameters.put("method","GET");
    parameters.put("nonExistingOption",true);
    ComponentVerifier.Result result=verifier.verify(ComponentVerifier.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(ComponentVerifier.VerificationError.StandardCode.UNKNOWN_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertEquals(1,result.getErrors().get(0).getParameterKeys().size());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("nonExistingOption"));
  }
  @Test public void testConnectivity() throws Exception {
    RestComponent component=context().getComponent("rest",RestComponent.class);
    ComponentVerifier verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","undertow");
    parameters.put("host","http://localhost:" + getPort());
    parameters.put("path","verify");
    parameters.put("method","GET");
    ComponentVerifier.Result result=verifier.verify(ComponentVerifier.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifier.Result.Status.OK,result.getStatus());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("undertow").host("localhost").port(getPort());
        rest("/").get("/verify").route().process(e -> e.getOut().setBody("ok"));
      }
    }
;
  }
}
