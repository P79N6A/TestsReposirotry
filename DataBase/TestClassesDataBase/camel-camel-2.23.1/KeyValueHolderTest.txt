/** 
 * @version 
 */
public class KeyValueHolderTest extends Assert {
  @Test public void testKeyValueHolder(){
    KeyValueHolder<String,Integer> foo=new KeyValueHolder<>("foo",123);
    assertEquals("foo",foo.getKey());
    assertEquals(123,foo.getValue().intValue());
  }
  @Test public void testEqualsAndHashCodeOnEqualObjects(){
    KeyValueHolder<String,Integer> foo1=new KeyValueHolder<>("foo",123);
    KeyValueHolder<String,Integer> foo2=new KeyValueHolder<>("foo",123);
    assertTrue("Should be equals",foo1.equals(foo2));
    assertTrue("Hash code should be equal",foo1.hashCode() == foo2.hashCode());
  }
  @Test public void testEqualsAndHashCodeOnUnequalObjects(){
    KeyValueHolder<String,Integer> foo=new KeyValueHolder<>("foo",123);
    KeyValueHolder<String,Integer> bar=new KeyValueHolder<>("bar",678);
    assertFalse("Should not be equals",foo.equals(bar));
    assertFalse("Hash code should not be equal",foo.hashCode() == bar.hashCode());
  }
  @Test public void testEqualsAndHashCodeOnUnequalObjectsWithSameKeys(){
    KeyValueHolder<String,Integer> foo1=new KeyValueHolder<>("foo",123);
    KeyValueHolder<String,Integer> foo2=new KeyValueHolder<>("foo",678);
    assertFalse("Should not be equals",foo1.equals(foo2));
    assertFalse("Hash code should not be equal",foo1.hashCode() == foo2.hashCode());
  }
  @Test public void testEqualsAndHashCodeOnUnequalObjectsWithSameValues(){
    KeyValueHolder<String,Integer> foo=new KeyValueHolder<>("foo",123);
    KeyValueHolder<String,Integer> bar=new KeyValueHolder<>("bar",123);
    assertFalse("Should not be equals",foo.equals(bar));
    assertFalse("Hash code should not be equal",foo.hashCode() == bar.hashCode());
  }
  @Test public void testToString(){
    KeyValueHolder<String,Integer> foo=new KeyValueHolder<>("foo",123);
    assertEquals("foo -> 123",foo.toString());
  }
}
