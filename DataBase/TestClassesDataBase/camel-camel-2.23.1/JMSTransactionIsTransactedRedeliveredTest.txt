/** 
 */
public class JMSTransactionIsTransactedRedeliveredTest extends CamelSpringTestSupport {
  protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/JMSTransactionIsTransactedRedeliveredTest.xml");
  }
  @Override public boolean isUseAdviceWith(){
    return true;
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testTransactionSuccess() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        onException(AssertionError.class).to("log:error","mock:error");
      }
    }
);
    context.start();
    MockEndpoint error=getMockEndpoint("mock:error");
    error.expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Bye World");
    mock.message(0).header("count").isEqualTo(3);
    template.sendBody("activemq:queue:okay","Hello World");
    mock.assertIsSatisfied();
    error.assertIsSatisfied();
    Thread.sleep(500);
    Set<ObjectName> objectNames=getMBeanServer().queryNames(new ObjectName("org.apache.camel:context=camel-*,type=routes,name=\"myRoute\""),null);
    assertEquals(1,objectNames.size());
    ObjectName name=objectNames.iterator().next();
    Long total=(Long)getMBeanServer().getAttribute(name,"ExchangesTotal");
    assertEquals(3,total.intValue());
    Long completed=(Long)getMBeanServer().getAttribute(name,"ExchangesCompleted");
    assertEquals(1,completed.intValue());
    Long failed=(Long)getMBeanServer().getAttribute(name,"ExchangesFailed");
    assertEquals(2,failed.intValue());
    Long redeliveries=(Long)getMBeanServer().getAttribute(name,"Redeliveries");
    assertEquals(0,redeliveries.intValue());
    Long externalRedeliveries=(Long)getMBeanServer().getAttribute(name,"ExternalRedeliveries");
    assertEquals(2,externalRedeliveries.intValue());
  }
public static class MyProcessor implements Processor {
    private int count;
    public void process(    Exchange exchange) throws Exception {
      ++count;
      if (count == 1) {
        assertFalse("Should not be external redelivered",exchange.isExternalRedelivered());
      }
 else {
        assertTrue("Should be external redelivered",exchange.isExternalRedelivered());
      }
      if (count < 3) {
        throw new IllegalArgumentException("Forced exception");
      }
      exchange.getIn().setBody("Bye World");
      exchange.getIn().setHeader("count",count);
    }
  }
}
