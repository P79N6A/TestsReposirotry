/** 
 */
public class RecipientListDirectNoConsumerIssueTest extends ContextTestSupport {
  @Test public void testDirectNoConsumerOneMessage() throws Exception {
    getMockEndpoint("mock:error").expectedMinimumMessageCount(1);
    getMockEndpoint("mock:foo").expectedMinimumMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","foo","mock:foo;direct:foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDirectNoConsumerTwoMessages() throws Exception {
    getMockEndpoint("mock:error").expectedMinimumMessageCount(1);
    getMockEndpoint("mock:foo").expectedMinimumMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World","foo","mock:foo");
    template.sendBodyAndHeader("direct:start","Bye World","foo","direct:foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDirectNoConsumerOneMessageBar() throws Exception {
    getMockEndpoint("mock:error").expectedMinimumMessageCount(1);
    getMockEndpoint("mock:foo").expectedMinimumMessageCount(1);
    template.sendBodyAndHeader("direct:bar","Hello World","bar","mock:foo;direct:foo");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getComponent("direct",DirectComponent.class).setBlock(false);
        onException(Exception.class).handled(true).to("mock:error");
        from("direct:start").recipientList().header("foo").delimiter(";");
        from("direct:bar").recipientList(";").header("bar");
      }
    }
;
  }
}
