@DirtiesContext public abstract class SpringRibbonServiceCallRouteTest extends CamelSpringTestSupport {
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:9090").expectedMessageCount(1);
    getMockEndpoint("mock:9091").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(2);
    String out=template.requestBody("direct:start",null,String.class);
    String out2=template.requestBody("direct:start",null,String.class);
    assertEquals("9091",out);
    assertEquals("9090",out2);
    assertMockEndpointsSatisfied();
  }
  protected DefaultServiceCallProcessor findServiceCallProcessor(){
    Route route=context().getRoute("scall");
    Assert.assertNotNull("ServiceCall Route should be present",route);
    return findServiceCallProcessor(route.navigate()).orElseThrow(() -> new IllegalStateException("Unable to find a ServiceCallProcessor"));
  }
  protected Optional<DefaultServiceCallProcessor> findServiceCallProcessor(  Navigate<Processor> navigate){
    for (    Processor processor : navigate.next()) {
      if (processor instanceof DefaultServiceCallProcessor) {
        return Optional.ofNullable((DefaultServiceCallProcessor)processor);
      }
      if (processor instanceof Navigate) {
        return findServiceCallProcessor((Navigate<Processor>)processor);
      }
    }
    return Optional.empty();
  }
}
