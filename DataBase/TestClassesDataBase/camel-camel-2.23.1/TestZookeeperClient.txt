public static class TestZookeeperClient implements Watcher {
  public static int x;
  private final Logger log=LoggerFactory.getLogger(getClass());
  private ZooKeeper zk;
  private CountDownLatch connected=new CountDownLatch(1);
  public TestZookeeperClient(  int port,  int timeout) throws Exception {
    zk=new ZooKeeper("localhost:" + port,timeout,this);
    connected.await();
  }
  public ZooKeeper getConnection(){
    return zk;
  }
  public void shutdown() throws Exception {
    zk.close();
  }
  public byte[] waitForNodeChange(  String node) throws Exception {
    Stat stat=new Stat();
    return zk.getData(node,this,stat);
  }
  public void create(  String node,  String data) throws Exception {
    log.debug(String.format("Creating node '%s' with data '%s' ",node,data));
    create(node,data,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
  }
  public void createPersistent(  String node,  String data) throws Exception {
    log.debug(String.format("Creating node '%s' with data '%s' ",node,data));
    create(node,data,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  }
  public void create(  String znode,  String data,  List<ACL> access,  CreateMode mode) throws Exception {
    delay(200);
    String created=zk.create(znode,data != null ? data.getBytes() : null,access,mode);
    if (log.isInfoEnabled()) {
      log.info(String.format("Created znode named '%s'",created));
    }
  }
  public Stat setData(  String node,  String data,  int version) throws Exception {
    log.debug(String.format("TestClient Updating data of node %s to %s",node,data));
    return zk.setData(node,data.getBytes(),version);
  }
  public byte[] getData(  String znode) throws Exception {
    return zk.getData(znode,false,new Stat());
  }
  public void process(  WatchedEvent event){
    if (event.getState() == KeeperState.SyncConnected) {
      log.info("TestClient connected");
      connected.countDown();
    }
 else {
      if (event.getState() == KeeperState.Disconnected) {
        log.info("TestClient connected ?" + zk.getState());
      }
    }
  }
  public void deleteAll(  String node) throws Exception {
    delay(200);
    log.debug("Deleting {} and it's immediate children",node);
    for (    String child : zk.getChildren(node,false)) {
      delete(node + "/" + child);
    }
    delete(node);
  }
  public void delete(  String node) throws Exception {
    delay(200);
    log.debug("Deleting node " + node);
    zk.delete(node,-1);
  }
}
