public class KarafRuntimeProviderTest {
  static CamelCatalog catalog;
  @BeforeClass public static void createCamelCatalog(){
    catalog=new DefaultCamelCatalog();
    catalog.setRuntimeProvider(new KarafRuntimeProvider());
  }
  @Test public void testGetVersion() throws Exception {
    String version=catalog.getCatalogVersion();
    assertNotNull(version);
    String loaded=catalog.getLoadedVersion();
    assertNotNull(loaded);
    assertEquals(version,loaded);
  }
  @Test public void testProviderName() throws Exception {
    assertEquals("karaf",catalog.getRuntimeProvider().getProviderName());
  }
  @Test public void testFindComponentNames() throws Exception {
    List<String> names=catalog.findComponentNames();
    assertNotNull(names);
    assertFalse(names.isEmpty());
    assertTrue(names.contains("ftp"));
    assertTrue(names.contains("paxlogging"));
    assertFalse(names.contains("ejb"));
  }
  @Test public void testFindDataFormatNames() throws Exception {
    List<String> names=catalog.findDataFormatNames();
    assertNotNull(names);
    assertFalse(names.isEmpty());
    assertTrue(names.contains("bindy-csv"));
    assertTrue(names.contains("zip"));
    assertTrue(names.contains("zipfile"));
  }
  @Test public void testFindLanguageNames() throws Exception {
    List<String> names=catalog.findLanguageNames();
    assertNotNull(names);
    assertFalse(names.isEmpty());
    assertTrue(names.contains("simple"));
    assertTrue(names.contains("spel"));
    assertTrue(names.contains("xpath"));
  }
  @Test public void testFindOtherNames() throws Exception {
    List<String> names=catalog.findOtherNames();
    assertNotNull(names);
    assertFalse(names.isEmpty());
    assertTrue(names.contains("blueprint"));
    assertTrue(names.contains("hystrix"));
    assertTrue(names.contains("swagger-java"));
    assertTrue(names.contains("zipkin"));
    assertFalse(names.contains("spring-boot"));
  }
}
