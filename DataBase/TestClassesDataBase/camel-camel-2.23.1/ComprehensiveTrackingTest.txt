public class ComprehensiveTrackingTest extends CamelAwsXRayTestSupport {
  private InvokeChecker invokeChecker=new InvokeChecker();
  public ComprehensiveTrackingTest(){
    super(TestDataBuilder.createTrace().inRandomOrder().withSegment(TestDataBuilder.createSegment("start").withSubsegment(TestDataBuilder.createSubsegment("direct:a").withSubsegment(TestDataBuilder.createSubsegment("a").withSubsegment(TestDataBuilder.createSubsegment("seda:b")).withSubsegment(TestDataBuilder.createSubsegment("seda:c")).withSubsegment(TestDataBuilder.createSubsegment("test"))))).withSegment(TestDataBuilder.createSegment("b")).withSegment(TestDataBuilder.createSegment("c")).withSegment(TestDataBuilder.createSegment("d")));
  }
  @Test public void testRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).from("seda:test").whenDone(1).create();
    template.requestBody("direct:start","Hello");
    assertThat("Not all exchanges were fully processed",notify.matches(10,TimeUnit.SECONDS),is(equalTo(true)));
    verify();
    assertThat(invokeChecker.gotInvoked(),is(equalTo(true)));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("start").wireTap("seda:d").to("direct:a");
        from("direct:a").routeId("a").log("routing at ${routeId}").to("seda:b").delay(2000).bean(SomeBean.class).to("seda:c").log("End of routing");
        from("seda:b").routeId("b").log("routing at ${routeId}").delay(simple("${random(1000,2000)}"));
        from("seda:c").routeId("c").to("log:test").delay(simple("${random(0,100)}"));
        from("seda:d").routeId("d").log("routing at ${routeId}").delay(simple("${random(10,50)}"));
        from("seda:test").routeId("test").log("Async invoked route ${routeId} with body: ${body}").bean(invokeChecker).delay(simple("${random(10,50)}"));
      }
    }
;
  }
public static class InvokeChecker {
    private boolean invoked;
    @Handler public void invoke(){
      this.invoked=true;
    }
    boolean gotInvoked(){
      return this.invoked;
    }
  }
}
