/** 
 * @version 
 */
public class CamelContextAwareTest extends SpringTestSupport {
  protected CamelContextAwareBean bean1;
  @Test public void testInjectionPoints() throws Exception {
    assertNotNull("No CamelContext injected!",bean1.getCamelContext());
    Map<String,String> globalOptions=bean1.getCamelContext().getGlobalOptions();
    assertNotNull("The global options reference should not be null",globalOptions);
    assertEquals("No global options injected",globalOptions.size(),1);
    assertEquals("Should get the value of org.apache.camel.test",globalOptions.get("org.apache.camel.test"),"this is a test first");
  }
  @Test public void testCamelTemplates() throws Exception {
    DefaultProducerTemplate producer1=getMandatoryBean(DefaultProducerTemplate.class,"producer1");
    assertEquals("Inject a wrong camel context",producer1.getCamelContext().getName(),"camel1");
    DefaultProducerTemplate producer2=getMandatoryBean(DefaultProducerTemplate.class,"producer2");
    assertEquals("Inject a wrong camel context",producer2.getCamelContext().getName(),"camel2");
    DefaultConsumerTemplate consumer=getMandatoryBean(DefaultConsumerTemplate.class,"consumer");
    assertEquals("Inject a wrong camel context",consumer.getCamelContext().getName(),"camel2");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    bean1=getMandatoryBean(CamelContextAwareBean.class,"bean1");
  }
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextAwareBean.xml");
  }
}
