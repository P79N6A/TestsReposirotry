public class CustomFiltersTest extends BaseJettyTest {
private static class MyTestFilter implements Filter {
    private String keyWord;
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      ((HttpServletResponse)response).addHeader("MyTestFilter","true");
      ((HttpServletResponse)response).setHeader("KeyWord",keyWord);
      chain.doFilter(request,response);
    }
    @Override public void init(    FilterConfig filterConfig) throws ServletException {
      keyWord=filterConfig.getInitParameter("keyWord");
    }
    @Override public void destroy(){
    }
  }
  private void sendRequestAndVerify(  String url) throws Exception {
    HttpClient httpclient=new HttpClient();
    PostMethod httppost=new PostMethod(url);
    StringRequestEntity reqEntity=new StringRequestEntity("This is a test",null,null);
    httppost.setRequestEntity(reqEntity);
    int status=httpclient.executeMethod(httppost);
    assertEquals("Get a wrong response status",200,status);
    String result=httppost.getResponseBodyAsString();
    assertEquals("Get a wrong result","This is a test response",result);
    assertNotNull("Did not use custom multipart filter",httppost.getResponseHeader("MyTestFilter"));
    assertEquals("Did not set the right KeyWord header","KEY",httppost.getResponseHeader("KeyWord").getValue());
  }
  @Test public void testFilters() throws Exception {
    sendRequestAndVerify("http://localhost:" + getPort() + "/testFilters");
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    List<Filter> filters=new ArrayList<>();
    filters.add(new MyTestFilter());
    jndi.bind("myFilters",filters);
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("jetty://http://localhost:{{port}}/testFilters?filtersRef=myFilters&filterInit.keyWord=KEY").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Message in=exchange.getIn();
            String request=in.getBody(String.class);
            exchange.getOut().setBody(request + " response");
          }
        }
);
      }
    }
;
  }
}
