public class SplunkComponentConfigurationTest extends CamelTestSupport {
  @Test public void createProducerEndpointWithMinimalConfiguration() throws Exception {
    SplunkComponent component=context.getComponent("splunk",SplunkComponent.class);
    SplunkEndpoint endpoint=(SplunkEndpoint)component.createEndpoint("splunk://test?username=test&password=pw");
    assertEquals(Service.DEFAULT_HOST,endpoint.getConfiguration().getHost());
    assertEquals(Service.DEFAULT_PORT,endpoint.getConfiguration().getPort());
    assertEquals("test",endpoint.getConfiguration().getUsername());
    assertEquals("pw",endpoint.getConfiguration().getPassword());
    assertEquals(Service.DEFAULT_SCHEME,endpoint.getConfiguration().getScheme());
    assertEquals(5000,endpoint.getConfiguration().getConnectionTimeout());
    assertFalse(endpoint.getConfiguration().isUseSunHttpsHandler());
    assertFalse(endpoint.getConfiguration().isRaw());
    assertEquals(SSLSecurityProtocol.TLSv1_2,endpoint.getConfiguration().getSslProtocol());
  }
  @Test(expected=IllegalArgumentException.class) public void createProducerWithoutUserAndPassword() throws Exception {
    SplunkComponent component=context.getComponent("splunk",SplunkComponent.class);
    component.createEndpoint("splunk://test");
  }
  @Test public void createProducerEndpointWithMaximalConfiguration() throws Exception {
    SplunkComponent component=context.getComponent("splunk",SplunkComponent.class);
    SplunkEndpoint endpoint=(SplunkEndpoint)component.createEndpoint("splunk://tcp?username=test&password=pw&host=myhost&port=3333&" + "tcpReceiverPort=4444&index=myindex&sourceType=testSource&" + "source=test&eventHost=original-host.com&owner=me&app=fantasticapp&useSunHttpsHandler=true&raw=true&sslProtocol=SSLv3");
    assertEquals("myhost",endpoint.getConfiguration().getHost());
    assertEquals(3333,endpoint.getConfiguration().getPort());
    assertEquals("test",endpoint.getConfiguration().getUsername());
    assertEquals("pw",endpoint.getConfiguration().getPassword());
    assertEquals(4444,endpoint.getConfiguration().getTcpReceiverPort());
    assertEquals("myindex",endpoint.getConfiguration().getIndex());
    assertEquals("testSource",endpoint.getConfiguration().getSourceType());
    assertEquals("test",endpoint.getConfiguration().getSource());
    assertEquals("original-host.com",endpoint.getConfiguration().getEventHost());
    assertEquals("me",endpoint.getConfiguration().getOwner());
    assertEquals("fantasticapp",endpoint.getConfiguration().getApp());
    assertTrue(endpoint.getConfiguration().isUseSunHttpsHandler());
    assertTrue(endpoint.getConfiguration().isRaw());
    assertEquals(SSLSecurityProtocol.SSLv3,endpoint.getConfiguration().getSslProtocol());
  }
  @Test public void createConsumerEndpointWithMinimalConfiguration() throws Exception {
    SplunkComponent component=context.getComponent("splunk",SplunkComponent.class);
    SplunkEndpoint endpoint=(SplunkEndpoint)component.createEndpoint("splunk://realtime?username=test&" + "password=pw&search=Splunk search query goes here");
    assertEquals(Service.DEFAULT_HOST,endpoint.getConfiguration().getHost());
    assertEquals(Service.DEFAULT_PORT,endpoint.getConfiguration().getPort());
    assertEquals("test",endpoint.getConfiguration().getUsername());
    assertEquals("pw",endpoint.getConfiguration().getPassword());
    assertEquals(Service.DEFAULT_SCHEME,endpoint.getConfiguration().getScheme());
    assertEquals(5000,endpoint.getConfiguration().getConnectionTimeout());
    assertEquals("Splunk search query goes here",endpoint.getConfiguration().getSearch());
  }
  @Test public void createConsumerEndpointWithMaximalConfiguration() throws Exception {
    SplunkComponent component=context.getComponent("splunk",SplunkComponent.class);
    SplunkEndpoint endpoint=(SplunkEndpoint)component.createEndpoint("splunk://normal?username=test&password=pw&host=myhost&port=3333&delay=10s&" + "search=Splunk search query goes here&initEarliestTime=-1d" + "&latestTime=now&count=10&"+ "owner=me&app=fantasticapp");
    assertEquals("myhost",endpoint.getConfiguration().getHost());
    assertEquals(3333,endpoint.getConfiguration().getPort());
    assertEquals("test",endpoint.getConfiguration().getUsername());
    assertEquals("pw",endpoint.getConfiguration().getPassword());
    assertEquals("-1d",endpoint.getConfiguration().getInitEarliestTime());
    assertEquals("now",endpoint.getConfiguration().getLatestTime());
    assertEquals(10,endpoint.getConfiguration().getCount());
    assertEquals("me",endpoint.getConfiguration().getOwner());
    assertEquals("fantasticapp",endpoint.getConfiguration().getApp());
    assertEquals(Service.DEFAULT_SCHEME,endpoint.getConfiguration().getScheme());
    assertEquals("Splunk search query goes here",endpoint.getConfiguration().getSearch());
  }
}
