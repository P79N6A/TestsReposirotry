/** 
 * Unit test for Mail header decoding/unfolding support.
 */
public class MailMimeDecodeHeadersTest extends CamelTestSupport {
  private String nonAsciiSubject="\uD83D\uDC2A rocks!";
  private String encodedNonAsciiSubject="=?UTF-8?Q?=F0=9F=90=AA_rocks!?=";
  private String longSubject;
{
    StringBuilder sb=new StringBuilder("Camel rocks!");
    int mimeFoldingLimit=76;
    while (sb.length() <= mimeFoldingLimit) {
      sb.insert(7,"o");
    }
    longSubject=sb.toString();
  }
  private String foldedLongSubject=MimeUtility.fold(9,longSubject);
  @Test public void testLongMailSubject() throws Exception {
    Mailbox.clearAll();
    template.sendBody("direct:longSubject","");
    MockEndpoint mockDecoded=getMockEndpoint("mock:decoded");
    mockDecoded.expectedMessageCount(1);
    mockDecoded.expectedHeaderReceived("subject",longSubject);
    mockDecoded.setResultWaitTime(10000);
    mockDecoded.assertIsSatisfied();
    MockEndpoint mockPlain=getMockEndpoint("mock:plain");
    mockPlain.expectedMessageCount(1);
    mockPlain.expectedHeaderReceived("subject",foldedLongSubject);
    mockPlain.setResultWaitTime(10000);
    mockPlain.assertIsSatisfied();
  }
  @Test public void testNonAsciiMailSubject() throws Exception {
    Mailbox.clearAll();
    template.sendBody("direct:nonAsciiSubject","");
    MockEndpoint mockDecoded=getMockEndpoint("mock:decoded");
    mockDecoded.expectedMessageCount(1);
    mockDecoded.expectedHeaderReceived("subject",nonAsciiSubject);
    mockDecoded.assertIsSatisfied();
    MockEndpoint mockPlain=getMockEndpoint("mock:plain");
    mockPlain.expectedMessageCount(1);
    mockPlain.expectedHeaderReceived("subject",encodedNonAsciiSubject);
    mockPlain.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:longSubject").setHeader("subject",constant(longSubject)).to("smtp://plain@localhost","smtp://decoded@localhost");
        from("direct:nonAsciiSubject").setHeader("subject",constant(nonAsciiSubject)).to("smtp://plain@localhost","smtp://decoded@localhost");
        from("pop3://localhost?username=plain&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:plain");
        from("pop3://localhost?username=decoded&password=secret&consumer.initialDelay=100&consumer.delay=100&mimeDecodeHeaders=true").to("mock:decoded");
      }
    }
;
  }
}
