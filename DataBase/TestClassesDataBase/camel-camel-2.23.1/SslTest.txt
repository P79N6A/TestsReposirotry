public class SslTest extends CamelSpringTestSupport {
  protected static final String GREET_ME_OPERATION="greetMe";
  protected static final String TEST_MESSAGE="Hello World!";
  protected static final String JAXWS_SERVER_ADDRESS="https://localhost:" + CXFTestSupport.getPort1() + "/CxfSslTest/SoapContext/SoapPort";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @AfterClass public static void cleanUp(){
  }
  @BeforeClass public static void startService(){
  }
  @Test public void testInvokingTrustRoute() throws Exception {
    Exchange reply=sendJaxWsMessage("direct:trust");
    assertFalse("We expect no exception here",reply.isFailed());
  }
  @Test public void testInvokingNoTrustRoute() throws Exception {
    Exchange reply=sendJaxWsMessage("direct:noTrust");
    assertTrue("We expect the exception here",reply.isFailed());
    Throwable e=reply.getException().getCause();
    assertThat(e.getClass().getCanonicalName(),is("javax.net.ssl.SSLHandshakeException"));
  }
  @Test public void testInvokingWrongTrustRoute() throws Exception {
    Exchange reply=sendJaxWsMessage("direct:wrongTrust");
    assertTrue("We expect the exception here",reply.isFailed());
    Throwable e=reply.getException().getCause();
    assertThat(e.getClass().getCanonicalName(),is("javax.net.ssl.SSLHandshakeException"));
  }
  protected Exchange sendJaxWsMessage(  String endpointUri) throws InterruptedException {
    Exchange exchange=template.send(endpointUri,new Processor(){
      public void process(      final Exchange exchange){
        final List<String> params=new ArrayList<>();
        params.add(TEST_MESSAGE);
        exchange.getIn().setBody(params);
        exchange.getIn().setHeader(CxfConstants.OPERATION_NAME,GREET_ME_OPERATION);
      }
    }
);
    return exchange;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfSslContext.xml");
  }
}
