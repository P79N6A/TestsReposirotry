public class DefaultDnsRecordEncoderTest {
  @Test public void testEncodeName() throws Exception {
    testEncodeName(new byte[]{5,'n','e','t','t','y',2,'i','o',0},"netty.io.");
  }
  @Test public void testEncodeNameWithoutTerminator() throws Exception {
    testEncodeName(new byte[]{5,'n','e','t','t','y',2,'i','o',0},"netty.io");
  }
  @Test public void testEncodeNameWithExtraTerminator() throws Exception {
    testEncodeName(new byte[]{5,'n','e','t','t','y',2,'i','o',0},"netty.io..");
  }
  @Test public void testEncodeEmptyName() throws Exception {
    testEncodeName(new byte[]{0},StringUtil.EMPTY_STRING);
  }
  @Test public void testEncodeRootName() throws Exception {
    testEncodeName(new byte[]{0},".");
  }
  private static void testEncodeName(  byte[] expected,  String name) throws Exception {
    DefaultDnsRecordEncoder encoder=new DefaultDnsRecordEncoder();
    ByteBuf out=Unpooled.buffer();
    ByteBuf expectedBuf=Unpooled.wrappedBuffer(expected);
    try {
      encoder.encodeName(name,out);
      assertEquals(expectedBuf,out);
    }
  finally {
      out.release();
      expectedBuf.release();
    }
  }
  @Test public void testOptEcsRecordIpv4() throws Exception {
    testOptEcsRecordIp(SocketUtils.addressByName("1.2.3.4"));
    testOptEcsRecordIp(SocketUtils.addressByName("1.2.3.255"));
  }
  @Test public void testOptEcsRecordIpv6() throws Exception {
    testOptEcsRecordIp(SocketUtils.addressByName("::0"));
    testOptEcsRecordIp(SocketUtils.addressByName("::FF"));
  }
  private static void testOptEcsRecordIp(  InetAddress address) throws Exception {
    int addressBits=address.getAddress().length * Byte.SIZE;
    for (int i=0; i <= addressBits; ++i) {
      testIp(address,i);
    }
  }
  private static void testIp(  InetAddress address,  int prefix) throws Exception {
    int lowOrderBitsToPreserve=prefix % Byte.SIZE;
    ByteBuf addressPart=Unpooled.wrappedBuffer(address.getAddress(),0,DefaultDnsRecordEncoder.calculateEcsAddressLength(prefix,lowOrderBitsToPreserve));
    if (lowOrderBitsToPreserve > 0) {
      int idx=addressPart.writerIndex() - 1;
      byte lastByte=addressPart.getByte(idx);
      int paddingMask=~((1 << (8 - lowOrderBitsToPreserve)) - 1);
      addressPart.setByte(idx,lastByte & paddingMask);
    }
    int payloadSize=nextInt(Short.MAX_VALUE);
    int extendedRcode=nextInt(Byte.MAX_VALUE * 2);
    int version=nextInt(Byte.MAX_VALUE * 2);
    DefaultDnsRecordEncoder encoder=new DefaultDnsRecordEncoder();
    ByteBuf out=Unpooled.buffer();
    try {
      DnsOptEcsRecord record=new DefaultDnsOptEcsRecord(payloadSize,extendedRcode,version,prefix,address.getAddress());
      encoder.encodeRecord(record,out);
      assertEquals(0,out.readByte());
      assertEquals(DnsRecordType.OPT.intValue(),out.readUnsignedShort());
      assertEquals(payloadSize,out.readUnsignedShort());
      assertEquals(record.timeToLive(),out.getUnsignedInt(out.readerIndex()));
      assertEquals(extendedRcode,out.readUnsignedByte());
      assertEquals(version,out.readUnsignedByte());
      assertEquals(extendedRcode,record.extendedRcode());
      assertEquals(version,record.version());
      assertEquals(0,record.flags());
      assertEquals(0,out.readShort());
      int payloadLength=out.readUnsignedShort();
      assertEquals(payloadLength,out.readableBytes());
      assertEquals(8,out.readShort());
      int rdataLength=out.readUnsignedShort();
      assertEquals(rdataLength,out.readableBytes());
      assertEquals((short)InternetProtocolFamily.of(address).addressNumber(),out.readShort());
      assertEquals(prefix,out.readUnsignedByte());
      assertEquals(0,out.readUnsignedByte());
      assertEquals(addressPart,out);
    }
  finally {
      addressPart.release();
      out.release();
    }
  }
  private static int nextInt(  int max){
    return PlatformDependent.threadLocalRandom().nextInt(max);
  }
}
