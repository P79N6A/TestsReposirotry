public class EpollDomainSocketFdTest extends AbstractSocketTest {
  @Override protected SocketAddress newSocketAddress(){
    return EpollSocketTestPermutation.newSocketAddress();
  }
  @Override protected List<TestsuitePermutation.BootstrapComboFactory<ServerBootstrap,Bootstrap>> newFactories(){
    return EpollSocketTestPermutation.INSTANCE.domainSocket();
  }
  @Test(timeout=30000) public void testSendRecvFd() throws Throwable {
    run();
  }
  public void testSendRecvFd(  ServerBootstrap sb,  Bootstrap cb) throws Throwable {
    final BlockingQueue<Object> queue=new LinkedBlockingQueue<Object>(1);
    sb.childHandler(new ChannelInboundHandlerAdapter(){
      @Override public void channelActive(      ChannelHandlerContext ctx) throws Exception {
        final EpollDomainSocketChannel ch=new EpollDomainSocketChannel();
        ctx.writeAndFlush(ch.fd()).addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          ChannelFuture future) throws Exception {
            if (!future.isSuccess()) {
              Throwable cause=future.cause();
              queue.offer(cause);
            }
          }
        }
);
      }
    }
);
    cb.handler(new ChannelInboundHandlerAdapter(){
      @Override public void channelRead(      ChannelHandlerContext ctx,      Object msg) throws Exception {
        FileDescriptor fd=(FileDescriptor)msg;
        queue.offer(fd);
      }
      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause) throws Exception {
        queue.add(cause);
        ctx.close();
      }
    }
);
    cb.option(EpollChannelOption.DOMAIN_SOCKET_READ_MODE,DomainSocketReadMode.FILE_DESCRIPTORS);
    Channel sc=sb.bind().sync().channel();
    Channel cc=cb.connect(sc.localAddress()).sync().channel();
    Object received=queue.take();
    cc.close().sync();
    sc.close().sync();
    if (received instanceof FileDescriptor) {
      FileDescriptor fd=(FileDescriptor)received;
      Assert.assertTrue(fd.isOpen());
      fd.close();
      Assert.assertFalse(fd.isOpen());
      Assert.assertNull(queue.poll());
    }
 else {
      throw (Throwable)received;
    }
  }
}
