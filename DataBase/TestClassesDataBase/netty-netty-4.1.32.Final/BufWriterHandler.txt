private static class BufWriterHandler extends SimpleChannelInboundHandler<Object> {
  private final Random random=new Random();
  private final CountDownLatch latch=new CountDownLatch(1);
  private ByteBuf buf;
  private final Promise<Channel> channelFuture=new DefaultPromise<Channel>(executor);
  @Override public void handlerAdded(  ChannelHandlerContext ctx) throws Exception {
    channelFuture.setSuccess(ctx.channel());
  }
  @Override public void channelActive(  final ChannelHandlerContext ctx) throws Exception {
    byte[] data=new byte[1024];
    random.nextBytes(data);
    buf=ctx.alloc().buffer();
    buf.writeBytes(data).retain();
    ctx.channel().writeAndFlush(buf).addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        latch.countDown();
      }
    }
);
  }
  @Override public void channelRead0(  ChannelHandlerContext ctx,  Object msg) throws Exception {
  }
  public void check() throws InterruptedException {
    latch.await();
    assertEquals(1,buf.refCnt());
  }
  void release(){
    buf.release();
  }
}
