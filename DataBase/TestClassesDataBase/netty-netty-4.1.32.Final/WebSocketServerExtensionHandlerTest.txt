public class WebSocketServerExtensionHandlerTest {
  WebSocketServerExtensionHandshaker mainHandshakerMock=mock(WebSocketServerExtensionHandshaker.class,"mainHandshaker");
  WebSocketServerExtensionHandshaker fallbackHandshakerMock=mock(WebSocketServerExtensionHandshaker.class,"fallbackHandshaker");
  WebSocketServerExtension mainExtensionMock=mock(WebSocketServerExtension.class,"mainExtension");
  WebSocketServerExtension fallbackExtensionMock=mock(WebSocketServerExtension.class,"fallbackExtension");
  @Test public void testMainSuccess(){
    when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main"))).thenReturn(mainExtensionMock);
    when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("fallback"))).thenReturn(null);
    when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("fallback"))).thenReturn(fallbackExtensionMock);
    when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main"))).thenReturn(null);
    when(mainExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
    when(mainExtensionMock.newReponseData()).thenReturn(new WebSocketExtensionData("main",Collections.<String,String>emptyMap()));
    when(mainExtensionMock.newExtensionEncoder()).thenReturn(new DummyEncoder());
    when(mainExtensionMock.newExtensionDecoder()).thenReturn(new DummyDecoder());
    when(fallbackExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(mainHandshakerMock,fallbackHandshakerMock));
    HttpRequest req=newUpgradeRequest("main, fallback");
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> resExts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    assertEquals(1,resExts.size());
    assertEquals("main",resExts.get(0).name());
    assertTrue(resExts.get(0).parameters().isEmpty());
    assertNotNull(ch.pipeline().get(DummyDecoder.class));
    assertNotNull(ch.pipeline().get(DummyEncoder.class));
    verify(mainHandshakerMock,atLeastOnce()).handshakeExtension(webSocketExtensionDataMatcher("main"));
    verify(mainHandshakerMock,atLeastOnce()).handshakeExtension(webSocketExtensionDataMatcher("fallback"));
    verify(fallbackHandshakerMock,atLeastOnce()).handshakeExtension(webSocketExtensionDataMatcher("fallback"));
    verify(mainExtensionMock,atLeastOnce()).rsv();
    verify(mainExtensionMock).newReponseData();
    verify(mainExtensionMock).newExtensionEncoder();
    verify(mainExtensionMock).newExtensionDecoder();
    verify(fallbackExtensionMock,atLeastOnce()).rsv();
  }
  @Test public void testCompatibleExtensionTogetherSuccess(){
    when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main"))).thenReturn(mainExtensionMock);
    when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("fallback"))).thenReturn(null);
    when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("fallback"))).thenReturn(fallbackExtensionMock);
    when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main"))).thenReturn(null);
    when(mainExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
    when(mainExtensionMock.newReponseData()).thenReturn(new WebSocketExtensionData("main",Collections.<String,String>emptyMap()));
    when(mainExtensionMock.newExtensionEncoder()).thenReturn(new DummyEncoder());
    when(mainExtensionMock.newExtensionDecoder()).thenReturn(new DummyDecoder());
    when(fallbackExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV2);
    when(fallbackExtensionMock.newReponseData()).thenReturn(new WebSocketExtensionData("fallback",Collections.<String,String>emptyMap()));
    when(fallbackExtensionMock.newExtensionEncoder()).thenReturn(new Dummy2Encoder());
    when(fallbackExtensionMock.newExtensionDecoder()).thenReturn(new Dummy2Decoder());
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(mainHandshakerMock,fallbackHandshakerMock));
    HttpRequest req=newUpgradeRequest("main, fallback");
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> resExts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    assertEquals(2,resExts.size());
    assertEquals("main",resExts.get(0).name());
    assertEquals("fallback",resExts.get(1).name());
    assertNotNull(ch.pipeline().get(DummyDecoder.class));
    assertNotNull(ch.pipeline().get(DummyEncoder.class));
    assertNotNull(ch.pipeline().get(Dummy2Decoder.class));
    assertNotNull(ch.pipeline().get(Dummy2Encoder.class));
    verify(mainHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("main"));
    verify(mainHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("fallback"));
    verify(fallbackHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("fallback"));
    verify(mainExtensionMock,times(2)).rsv();
    verify(mainExtensionMock).newReponseData();
    verify(mainExtensionMock).newExtensionEncoder();
    verify(mainExtensionMock).newExtensionDecoder();
    verify(fallbackExtensionMock,times(2)).rsv();
    verify(fallbackExtensionMock).newReponseData();
    verify(fallbackExtensionMock).newExtensionEncoder();
    verify(fallbackExtensionMock).newExtensionDecoder();
  }
  @Test public void testNoneExtensionMatchingSuccess(){
    when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("unknown"))).thenReturn(null);
    when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("unknown2"))).thenReturn(null);
    when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("unknown"))).thenReturn(null);
    when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("unknown2"))).thenReturn(null);
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(mainHandshakerMock,fallbackHandshakerMock));
    HttpRequest req=newUpgradeRequest("unknown, unknown2");
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    assertFalse(res2.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    verify(mainHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("unknown"));
    verify(mainHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("unknown2"));
    verify(fallbackHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("unknown"));
    verify(fallbackHandshakerMock).handshakeExtension(webSocketExtensionDataMatcher("unknown2"));
  }
}
