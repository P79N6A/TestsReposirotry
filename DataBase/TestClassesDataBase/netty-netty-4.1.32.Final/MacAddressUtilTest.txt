public class MacAddressUtilTest {
  @Test public void testCompareAddresses(){
    assertEquals(0,MacAddressUtil.compareAddresses(EMPTY_BYTES,new byte[]{(byte)0x52,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd}));
    assertEquals(-1,MacAddressUtil.compareAddresses(EMPTY_BYTES,new byte[]{(byte)0x50,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd}));
    assertEquals(-1,MacAddressUtil.compareAddresses(new byte[]{(byte)0x52,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd},new byte[]{(byte)0x50,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd}));
    assertEquals(1,MacAddressUtil.compareAddresses(new byte[]{(byte)0x52,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd},EMPTY_BYTES));
    assertEquals(1,MacAddressUtil.compareAddresses(new byte[]{(byte)0x50,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd},new byte[]{(byte)0x52,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd}));
    assertEquals(0,MacAddressUtil.compareAddresses(new byte[]{(byte)0x50,(byte)0x54,(byte)0x00,(byte)0xf9,(byte)0x32,(byte)0xbd},new byte[]{(byte)0x50,(byte)0x55,(byte)0x01,(byte)0xfa,(byte)0x33,(byte)0xbe}));
  }
  @Test public void testParseMacEUI48(){
    assertArrayEquals(new byte[]{0,(byte)0xaa,0x11,(byte)0xbb,0x22,(byte)0xcc},parseMAC("00-AA-11-BB-22-CC"));
    assertArrayEquals(new byte[]{0,(byte)0xaa,0x11,(byte)0xbb,0x22,(byte)0xcc},parseMAC("00:AA:11:BB:22:CC"));
  }
  @Test public void testParseMacMAC48ToEUI64(){
    assertArrayEquals(new byte[]{0,(byte)0xaa,0x11,(byte)0xff,(byte)0xff,(byte)0xbb,0x22,(byte)0xcc},parseMAC("00-AA-11-FF-FF-BB-22-CC"));
    assertArrayEquals(new byte[]{0,(byte)0xaa,0x11,(byte)0xff,(byte)0xff,(byte)0xbb,0x22,(byte)0xcc},parseMAC("00:AA:11:FF:FF:BB:22:CC"));
  }
  @Test public void testParseMacEUI48ToEUI64(){
    assertArrayEquals(new byte[]{0,(byte)0xaa,0x11,(byte)0xff,(byte)0xfe,(byte)0xbb,0x22,(byte)0xcc},parseMAC("00-AA-11-FF-FE-BB-22-CC"));
    assertArrayEquals(new byte[]{0,(byte)0xaa,0x11,(byte)0xff,(byte)0xfe,(byte)0xbb,0x22,(byte)0xcc},parseMAC("00:AA:11:FF:FE:BB:22:CC"));
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalid7HexGroupsA(){
    parseMAC("00-AA-11-BB-22-CC-FF");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalid7HexGroupsB(){
    parseMAC("00:AA:11:BB:22:CC:FF");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI48MixedSeparatorA(){
    parseMAC("00-AA:11-BB-22-CC");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI48MixedSeparatorB(){
    parseMAC("00:AA-11:BB:22:CC");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI64MixedSeparatorA(){
    parseMAC("00-AA-11-FF-FE-BB-22:CC");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI64MixedSeparatorB(){
    parseMAC("00:AA:11:FF:FE:BB:22-CC");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI48TrailingSeparatorA(){
    parseMAC("00-AA-11-BB-22-CC-");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI48TrailingSeparatorB(){
    parseMAC("00:AA:11:BB:22:CC:");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI64TrailingSeparatorA(){
    parseMAC("00-AA-11-FF-FE-BB-22-CC-");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseMacInvalidEUI64TrailingSeparatorB(){
    parseMAC("00:AA:11:FF:FE:BB:22:CC:");
  }
}
