public class JdkZlibTest extends ZlibTest {
  @Override protected ZlibEncoder createEncoder(  ZlibWrapper wrapper){
    return new JdkZlibEncoder(wrapper);
  }
  @Override protected ZlibDecoder createDecoder(  ZlibWrapper wrapper){
    return new JdkZlibDecoder(wrapper);
  }
  @Test(expected=DecompressionException.class) @Override public void testZLIB_OR_NONE3() throws Exception {
    super.testZLIB_OR_NONE3();
  }
  @Test public void testConcatenatedStreamsReadFirstOnly() throws IOException {
    EmbeddedChannel chDecoderGZip=new EmbeddedChannel(createDecoder(ZlibWrapper.GZIP));
    try {
      byte[] bytes=IOUtils.toByteArray(getClass().getResourceAsStream("/multiple.gz"));
      assertTrue(chDecoderGZip.writeInbound(Unpooled.copiedBuffer(bytes)));
      Queue<Object> messages=chDecoderGZip.inboundMessages();
      assertEquals(1,messages.size());
      ByteBuf msg=(ByteBuf)messages.poll();
      assertEquals("a",msg.toString(CharsetUtil.UTF_8));
      ReferenceCountUtil.release(msg);
    }
  finally {
      assertFalse(chDecoderGZip.finish());
      chDecoderGZip.close();
    }
  }
  @Test public void testConcatenatedStreamsReadFully() throws IOException {
    EmbeddedChannel chDecoderGZip=new EmbeddedChannel(new JdkZlibDecoder(true));
    try {
      byte[] bytes=IOUtils.toByteArray(getClass().getResourceAsStream("/multiple.gz"));
      assertTrue(chDecoderGZip.writeInbound(Unpooled.copiedBuffer(bytes)));
      Queue<Object> messages=chDecoderGZip.inboundMessages();
      assertEquals(2,messages.size());
      for (      String s : Arrays.asList("a","b")) {
        ByteBuf msg=(ByteBuf)messages.poll();
        assertEquals(s,msg.toString(CharsetUtil.UTF_8));
        ReferenceCountUtil.release(msg);
      }
    }
  finally {
      assertFalse(chDecoderGZip.finish());
      chDecoderGZip.close();
    }
  }
}
