private static final class CheckEventExecutorHandler extends ChannelHandlerAdapter {
  final EventExecutor executor;
  final Promise<Void> addedPromise;
  final Promise<Void> removedPromise;
  CheckEventExecutorHandler(  EventExecutor executor){
    this.executor=executor;
    addedPromise=executor.newPromise();
    removedPromise=executor.newPromise();
  }
  @Override public void handlerAdded(  ChannelHandlerContext ctx) throws Exception {
    assertExecutor(ctx,addedPromise);
  }
  @Override public void handlerRemoved(  ChannelHandlerContext ctx) throws Exception {
    assertExecutor(ctx,removedPromise);
  }
  private void assertExecutor(  ChannelHandlerContext ctx,  Promise<Void> promise){
    final boolean same;
    try {
      same=executor == ctx.executor();
    }
 catch (    Throwable cause) {
      promise.setFailure(cause);
      return;
    }
    if (same) {
      promise.setSuccess(null);
    }
 else {
      promise.setFailure(new AssertionError("EventExecutor not the same"));
    }
  }
}
