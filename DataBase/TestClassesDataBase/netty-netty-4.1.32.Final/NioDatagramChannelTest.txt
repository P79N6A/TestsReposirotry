public class NioDatagramChannelTest extends AbstractNioChannelTest<NioDatagramChannel> {
  /** 
 * Test try to reproduce issue #1335
 */
  @Test public void testBindMultiple() throws Exception {
    DefaultChannelGroup channelGroup=new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);
    NioEventLoopGroup group=new NioEventLoopGroup();
    try {
      for (int i=0; i < 100; i++) {
        Bootstrap udpBootstrap=new Bootstrap();
        udpBootstrap.group(group).channel(NioDatagramChannel.class).option(ChannelOption.SO_BROADCAST,true).handler(new ChannelInboundHandlerAdapter(){
          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){
            ReferenceCountUtil.release(msg);
          }
        }
);
        DatagramChannel datagramChannel=(DatagramChannel)udpBootstrap.bind(new InetSocketAddress(0)).syncUninterruptibly().channel();
        channelGroup.add(datagramChannel);
      }
      Assert.assertEquals(100,channelGroup.size());
    }
  finally {
      channelGroup.close().sync();
      group.shutdownGracefully().sync();
    }
  }
  @Override protected NioDatagramChannel newNioChannel(){
    return new NioDatagramChannel();
  }
  @Override protected NetworkChannel jdkChannel(  NioDatagramChannel channel){
    return channel.javaChannel();
  }
  @Override protected SocketOption<?> newInvalidOption(){
    return StandardSocketOptions.TCP_NODELAY;
  }
}
