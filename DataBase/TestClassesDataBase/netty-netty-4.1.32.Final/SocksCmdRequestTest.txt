public class SocksCmdRequestTest {
  @Test public void testConstructorParamsAreNotNull(){
    try {
      new SocksCmdRequest(null,SocksAddressType.UNKNOWN,"",1);
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
    try {
      new SocksCmdRequest(SocksCmdType.UNKNOWN,null,"",1);
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
    try {
      new SocksCmdRequest(SocksCmdType.UNKNOWN,SocksAddressType.UNKNOWN,null,1);
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
  }
  @Test public void testIPv4CorrectAddress(){
    try {
      new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.IPv4,"54.54.1111.253",1);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
  @Test public void testIPv6CorrectAddress(){
    try {
      new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.IPv6,"xxx:xxx:xxx",1);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
  @Test public void testIDNNotExceeds255CharsLimit(){
    try {
      new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.DOMAIN,"παράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμή" + "παράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμή" + "παράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμή"+ "παράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμήπαράδειγμα.δοκιμή",1);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
  @Test public void testHostNotEncodedForUnknown(){
    String asciiHost="xn--e1aybc.xn--p1ai";
    short port=10000;
    SocksCmdRequest rq=new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.UNKNOWN,asciiHost,port);
    assertEquals(asciiHost,rq.host());
    ByteBuf buffer=Unpooled.buffer(16);
    rq.encodeAsByteBuf(buffer);
    buffer.resetReaderIndex();
    assertEquals(SocksProtocolVersion.SOCKS5.byteValue(),buffer.readByte());
    assertEquals(SocksCmdType.BIND.byteValue(),buffer.readByte());
    assertEquals((byte)0x00,buffer.readByte());
    assertEquals(SocksAddressType.UNKNOWN.byteValue(),buffer.readByte());
    assertFalse(buffer.isReadable());
    buffer.release();
  }
  @Test public void testIDNEncodeToAsciiForDomain(){
    String host="тест.рф";
    CharBuffer asciiHost=CharBuffer.wrap(IDN.toASCII(host));
    short port=10000;
    SocksCmdRequest rq=new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.DOMAIN,host,port);
    assertEquals(host,rq.host());
    ByteBuf buffer=Unpooled.buffer(24);
    rq.encodeAsByteBuf(buffer);
    buffer.resetReaderIndex();
    assertEquals(SocksProtocolVersion.SOCKS5.byteValue(),buffer.readByte());
    assertEquals(SocksCmdType.BIND.byteValue(),buffer.readByte());
    assertEquals((byte)0x00,buffer.readByte());
    assertEquals(SocksAddressType.DOMAIN.byteValue(),buffer.readByte());
    assertEquals((byte)asciiHost.length(),buffer.readUnsignedByte());
    assertEquals(asciiHost,CharBuffer.wrap(buffer.readCharSequence(asciiHost.length(),CharsetUtil.US_ASCII)));
    assertEquals(port,buffer.readUnsignedShort());
    buffer.release();
  }
  @Test public void testValidPortRange(){
    try {
      new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.DOMAIN,"παράδειγμα.δοκιμήπαράδει",0);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
    try {
      new SocksCmdRequest(SocksCmdType.BIND,SocksAddressType.DOMAIN,"παράδειγμα.δοκιμήπαράδει",65536);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
}
