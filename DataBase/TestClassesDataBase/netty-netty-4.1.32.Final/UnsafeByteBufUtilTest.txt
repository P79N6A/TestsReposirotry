public class UnsafeByteBufUtilTest {
  @Before public void checkHasUnsafe(){
    Assume.assumeTrue("sun.misc.Unsafe not found, skip tests",PlatformDependent.hasUnsafe());
  }
  @Test public void testSetBytesOnReadOnlyByteBuffer() throws Exception {
    byte[] testData={0,1,2,3,4,5,6,7,8,9};
    int length=testData.length;
    ByteBuffer readOnlyBuffer=ByteBuffer.wrap(testData).asReadOnlyBuffer();
    UnpooledByteBufAllocator alloc=new UnpooledByteBufAllocator(true);
    UnpooledDirectByteBuf targetBuffer=new UnpooledDirectByteBuf(alloc,length,length);
    try {
      UnsafeByteBufUtil.setBytes(targetBuffer,directBufferAddress(targetBuffer.nioBuffer()),0,readOnlyBuffer);
      byte[] check=new byte[length];
      targetBuffer.getBytes(0,check,0,length);
      assertArrayEquals("The byte array's copy does not equal the original",testData,check);
    }
  finally {
      targetBuffer.release();
    }
  }
  @Test public void testSetBytesOnReadOnlyByteBufferWithPooledAlloc() throws Exception {
    byte[] testData={0,1,2,3,4,5,6,7,8,9};
    int length=testData.length;
    ByteBuffer readOnlyBuffer=ByteBuffer.wrap(testData).asReadOnlyBuffer();
    int pageSize=4096;
    ByteBufAllocator alloc=new PooledByteBufAllocator(true,1,1,pageSize,0);
    UnpooledDirectByteBuf targetBuffer=new UnpooledDirectByteBuf(alloc,length,length);
    ByteBuf b1=alloc.heapBuffer(16);
    ByteBuf b2=alloc.heapBuffer(16);
    try {
      assertEquals(pageSize,b1.array().length);
      assertArrayEquals(b1.array(),b2.array());
      assertNotEquals(b1.arrayOffset(),b2.arrayOffset());
      UnsafeByteBufUtil.setBytes(targetBuffer,directBufferAddress(targetBuffer.nioBuffer()),0,readOnlyBuffer);
      byte[] check=new byte[length];
      targetBuffer.getBytes(0,check,0,length);
      assertArrayEquals("The byte array's copy does not equal the original",testData,check);
    }
  finally {
      targetBuffer.release();
      b1.release();
      b2.release();
    }
  }
}
