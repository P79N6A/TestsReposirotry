private static class StartTlsClientHandler extends SimpleChannelInboundHandler<String> {
  private final SslHandler sslHandler;
  private final boolean autoRead;
  private Future<Channel> handshakeFuture;
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  StartTlsClientHandler(  SSLEngine engine,  boolean autoRead){
    engine.setUseClientMode(true);
    sslHandler=new SslHandler(engine);
    this.autoRead=autoRead;
  }
  @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {
    if (!autoRead) {
      ctx.read();
    }
    ctx.writeAndFlush("StartTlsRequest\n");
  }
  @Override public void channelRead0(  ChannelHandlerContext ctx,  String msg) throws Exception {
    if ("StartTlsResponse".equals(msg)) {
      ctx.pipeline().addAfter("logger","ssl",sslHandler);
      handshakeFuture=sslHandler.handshakeFuture();
      ctx.writeAndFlush("EncryptedRequest\n");
      return;
    }
    assertEquals("EncryptedResponse",msg);
    assertNotNull(handshakeFuture);
    assertTrue(handshakeFuture.isSuccess());
    ctx.close();
  }
  @Override public void channelReadComplete(  ChannelHandlerContext ctx) throws Exception {
    if (!autoRead) {
      ctx.read();
    }
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    if (logger.isWarnEnabled()) {
      logger.warn("Unexpected exception from the client side",cause);
    }
    exception.compareAndSet(null,cause);
    ctx.close();
  }
}
