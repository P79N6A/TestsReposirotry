@RunWith(Parameterized.class) public class JdkConscryptSslEngineInteropTest extends SSLEngineTest {
  @Parameterized.Parameters(name="{index}: bufferType = {0}, combo = {1}") public static Collection<Object[]> data(){
    List<Object[]> params=new ArrayList<Object[]>();
    for (    BufferType type : BufferType.values()) {
      params.add(new Object[]{type,ProtocolCipherCombo.tlsv12()});
    }
    return params;
  }
  public JdkConscryptSslEngineInteropTest(  BufferType type,  ProtocolCipherCombo combo){
    super(type,combo);
  }
  @BeforeClass public static void checkConscrypt(){
    assumeTrue(Conscrypt.isAvailable());
  }
  @Override protected SslProvider sslClientProvider(){
    return SslProvider.JDK;
  }
  @Override protected SslProvider sslServerProvider(){
    return SslProvider.JDK;
  }
  @Override protected Provider serverSslContextProvider(){
    return Java8SslTestUtils.conscryptProvider();
  }
  @Override @Test @Ignore("TODO: Make this work with Conscrypt") public void testMutualAuthValidClientCertChainTooLongFailOptionalClientAuth() throws Exception {
    super.testMutualAuthValidClientCertChainTooLongFailOptionalClientAuth();
  }
  @Override @Test @Ignore("TODO: Make this work with Conscrypt") public void testMutualAuthValidClientCertChainTooLongFailRequireClientAuth() throws Exception {
    super.testMutualAuthValidClientCertChainTooLongFailRequireClientAuth();
  }
  @Override protected boolean mySetupMutualAuthServerIsValidClientException(  Throwable cause){
    return super.mySetupMutualAuthServerIsValidClientException(cause) || causedBySSLException(cause);
  }
}
