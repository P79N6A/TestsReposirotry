public class WebSocketServerHandshaker13Test {
  @Test public void testPerformOpeningHandshake(){
    testPerformOpeningHandshake0(true);
  }
  @Test public void testPerformOpeningHandshakeSubProtocolNotSupported(){
    testPerformOpeningHandshake0(false);
  }
  private static void testPerformOpeningHandshake0(  boolean subProtocol){
    EmbeddedChannel ch=new EmbeddedChannel(new HttpObjectAggregator(42),new HttpRequestDecoder(),new HttpResponseEncoder());
    FullHttpRequest req=new DefaultFullHttpRequest(HTTP_1_1,HttpMethod.GET,"/chat");
    req.headers().set(HttpHeaderNames.HOST,"server.example.com");
    req.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET);
    req.headers().set(HttpHeaderNames.CONNECTION,"Upgrade");
    req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_KEY,"dGhlIHNhbXBsZSBub25jZQ==");
    req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,"http://example.com");
    req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,"chat, superchat");
    req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_VERSION,"13");
    if (subProtocol) {
      new WebSocketServerHandshaker13("ws://example.com/chat","chat",false,Integer.MAX_VALUE,false).handshake(ch,req);
    }
 else {
      new WebSocketServerHandshaker13("ws://example.com/chat",null,false,Integer.MAX_VALUE,false).handshake(ch,req);
    }
    ByteBuf resBuf=ch.readOutbound();
    EmbeddedChannel ch2=new EmbeddedChannel(new HttpResponseDecoder());
    ch2.writeInbound(resBuf);
    HttpResponse res=ch2.readInbound();
    Assert.assertEquals("s3pPLMBiTxaQ9kYGzzhZRbK+xOo=",res.headers().get(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT));
    if (subProtocol) {
      Assert.assertEquals("chat",res.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL));
    }
 else {
      Assert.assertNull(res.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL));
    }
    ReferenceCountUtil.release(res);
    req.release();
  }
}
