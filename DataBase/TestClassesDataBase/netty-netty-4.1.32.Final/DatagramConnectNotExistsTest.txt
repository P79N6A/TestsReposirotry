public class DatagramConnectNotExistsTest extends AbstractClientSocketTest {
  @Override protected List<TestsuitePermutation.BootstrapFactory<Bootstrap>> newFactories(){
    return SocketTestPermutation.INSTANCE.datagramSocket();
  }
  @Test(timeout=10000) public void testConnectNotExists() throws Throwable {
    run();
  }
  public void testConnectNotExists(  Bootstrap cb) throws Throwable {
    final Promise<Throwable> promise=ImmediateEventExecutor.INSTANCE.newPromise();
    cb.handler(new ChannelInboundHandlerAdapter(){
      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause){
        promise.trySuccess(cause);
      }
    }
);
    ChannelFuture future=cb.connect(NetUtil.LOCALHOST,SocketTestPermutation.BAD_PORT);
    try {
      Channel datagramChannel=future.syncUninterruptibly().channel();
      Assert.assertTrue(datagramChannel.isActive());
      datagramChannel.writeAndFlush(Unpooled.copiedBuffer("test",CharsetUtil.US_ASCII)).syncUninterruptibly();
      if (!(datagramChannel instanceof OioDatagramChannel)) {
        Assert.assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException);
      }
    }
  finally {
      future.channel().close();
    }
  }
}
