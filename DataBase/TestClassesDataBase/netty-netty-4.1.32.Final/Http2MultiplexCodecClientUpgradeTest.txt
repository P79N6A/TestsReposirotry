public class Http2MultiplexCodecClientUpgradeTest {
@ChannelHandler.Sharable private final class NoopHandler extends ChannelInboundHandlerAdapter {
    @Override public void channelActive(    ChannelHandlerContext ctx){
      ctx.channel().close();
    }
  }
private final class UpgradeHandler extends ChannelInboundHandlerAdapter {
    Http2Stream.State stateOnActive;
    int streamId;
    @Override public void channelActive(    ChannelHandlerContext ctx) throws Exception {
      Http2StreamChannel ch=(Http2StreamChannel)ctx.channel();
      stateOnActive=ch.stream().state();
      streamId=ch.stream().id();
      super.channelActive(ctx);
    }
  }
  private Http2MultiplexCodec newCodec(  ChannelHandler upgradeHandler){
    Http2MultiplexCodecBuilder builder=Http2MultiplexCodecBuilder.forClient(new NoopHandler());
    builder.withUpgradeStreamHandler(upgradeHandler);
    return builder.build();
  }
  @Test public void upgradeHandlerGetsActivated() throws Exception {
    UpgradeHandler upgradeHandler=new UpgradeHandler();
    Http2MultiplexCodec codec=newCodec(upgradeHandler);
    EmbeddedChannel ch=new EmbeddedChannel(codec);
    codec.onHttpClientUpgrade();
    assertFalse(upgradeHandler.stateOnActive.localSideOpen());
    assertTrue(upgradeHandler.stateOnActive.remoteSideOpen());
    assertEquals(1,upgradeHandler.streamId);
    assertTrue(ch.finishAndReleaseAll());
  }
  @Test(expected=Http2Exception.class) public void clientUpgradeWithoutUpgradeHandlerThrowsHttp2Exception() throws Http2Exception {
    Http2MultiplexCodec codec=Http2MultiplexCodecBuilder.forClient(new NoopHandler()).build();
    EmbeddedChannel ch=new EmbeddedChannel(codec);
    try {
      codec.onHttpClientUpgrade();
    }
  finally {
      assertTrue(ch.finishAndReleaseAll());
    }
  }
}
