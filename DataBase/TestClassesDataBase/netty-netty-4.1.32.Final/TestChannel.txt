private static class TestChannel extends AbstractChannel {
  private static final ChannelMetadata TEST_METADATA=new ChannelMetadata(false);
private class TestUnsafe extends AbstractUnsafe {
    @Override public void connect(    SocketAddress remoteAddress,    SocketAddress localAddress,    ChannelPromise promise){
    }
  }
  public TestChannel(){
    super(null);
  }
  @Override public ChannelConfig config(){
    return new DefaultChannelConfig(this);
  }
  @Override public boolean isOpen(){
    return true;
  }
  @Override public boolean isActive(){
    return true;
  }
  @Override public ChannelMetadata metadata(){
    return TEST_METADATA;
  }
  @Override protected AbstractUnsafe newUnsafe(){
    return new TestUnsafe();
  }
  @Override protected boolean isCompatible(  EventLoop loop){
    return true;
  }
  @Override protected SocketAddress localAddress0(){
    return null;
  }
  @Override protected SocketAddress remoteAddress0(){
    return null;
  }
  @Override protected void doBind(  SocketAddress localAddress) throws Exception {
  }
  @Override protected void doDisconnect() throws Exception {
  }
  @Override protected void doClose() throws Exception {
  }
  @Override protected void doBeginRead() throws Exception {
  }
  @Override protected void doWrite(  ChannelOutboundBuffer in) throws Exception {
  }
}
