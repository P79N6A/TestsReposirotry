/** 
 * {@link AbstractMemoryHttpData} test cases. 
 */
public class AbstractMemoryHttpDataTest {
  /** 
 * Provide content into HTTP data with input stream.
 * @throws Exception In case of any exception.
 */
  @Test public void testSetContentFromStream() throws Exception {
    Random random=new SecureRandom();
    for (int i=0; i < 20; i++) {
      int size=random.nextInt(Short.MAX_VALUE);
      byte[] bytes=new byte[size];
      random.nextBytes(bytes);
      TestHttpData data=new TestHttpData("name",UTF_8,0);
      data.setContent(new ByteArrayInputStream(bytes));
      ByteBuf buffer=data.getByteBuf();
      assertEquals(0,buffer.readerIndex());
      assertEquals(bytes.length,buffer.writerIndex());
      assertArrayEquals(bytes,Arrays.copyOf(buffer.array(),bytes.length));
    }
  }
  /** 
 * Memory-based HTTP data implementation for test purposes. 
 */
private static final class TestHttpData extends AbstractMemoryHttpData {
    /** 
 * Constructs HTTP data for tests.
 * @param name    Name of parsed data block.
 * @param charset Used charset for data decoding.
 * @param size    Expected data block size.
 */
    private TestHttpData(    String name,    Charset charset,    long size){
      super(name,charset,size);
    }
    @Override public InterfaceHttpData.HttpDataType getHttpDataType(){
      throw reject();
    }
    @Override public HttpData copy(){
      throw reject();
    }
    @Override public HttpData duplicate(){
      throw reject();
    }
    @Override public HttpData retainedDuplicate(){
      throw reject();
    }
    @Override public HttpData replace(    ByteBuf content){
      return null;
    }
    @Override public int compareTo(    InterfaceHttpData o){
      throw reject();
    }
    @Override public int hashCode(){
      return super.hashCode();
    }
    @Override public boolean equals(    Object obj){
      return super.equals(obj);
    }
    private static UnsupportedOperationException reject(){
      throw new UnsupportedOperationException("Should never be called.");
    }
  }
}
