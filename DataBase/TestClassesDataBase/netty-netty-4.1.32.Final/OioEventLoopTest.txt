public class OioEventLoopTest {
  @Test public void testTooManyServerChannels() throws Exception {
    EventLoopGroup g=new OioEventLoopGroup(1);
    ServerBootstrap b=new ServerBootstrap();
    b.channel(OioServerSocketChannel.class);
    b.group(g);
    b.childHandler(new ChannelInboundHandlerAdapter());
    ChannelFuture f1=b.bind(0);
    f1.sync();
    ChannelFuture f2=b.bind(0);
    f2.await();
    assertThat(f2.cause(),is(instanceOf(ChannelException.class)));
    assertThat(f2.cause().getMessage().toLowerCase(),containsString("too many channels"));
    final CountDownLatch notified=new CountDownLatch(1);
    f2.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        notified.countDown();
      }
    }
);
    notified.await();
    g.shutdownGracefully();
  }
  @Test public void testTooManyClientChannels() throws Exception {
    EventLoopGroup g=new OioEventLoopGroup(1);
    ServerBootstrap sb=new ServerBootstrap();
    sb.channel(OioServerSocketChannel.class);
    sb.group(g);
    sb.childHandler(new ChannelInboundHandlerAdapter());
    ChannelFuture f1=sb.bind(0);
    f1.sync();
    Bootstrap cb=new Bootstrap();
    cb.channel(OioSocketChannel.class);
    cb.group(g);
    cb.handler(new ChannelInboundHandlerAdapter());
    ChannelFuture f2=cb.connect(NetUtil.LOCALHOST,((InetSocketAddress)f1.channel().localAddress()).getPort());
    f2.await();
    assertThat(f2.cause(),is(instanceOf(ChannelException.class)));
    assertThat(f2.cause().getMessage().toLowerCase(),containsString("too many channels"));
    final CountDownLatch notified=new CountDownLatch(1);
    f2.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        notified.countDown();
      }
    }
);
    notified.await();
    g.shutdownGracefully();
  }
  @Test public void testTooManyAcceptedChannels() throws Exception {
    EventLoopGroup g=new OioEventLoopGroup(1);
    ServerBootstrap sb=new ServerBootstrap();
    sb.channel(OioServerSocketChannel.class);
    sb.group(g);
    sb.childHandler(new ChannelInboundHandlerAdapter());
    ChannelFuture f1=sb.bind(0);
    f1.sync();
    Socket s=new Socket(NetUtil.LOCALHOST,((InetSocketAddress)f1.channel().localAddress()).getPort());
    assertThat(s.getInputStream().read(),is(-1));
    s.close();
    g.shutdownGracefully();
  }
}
