private static class SpdyEchoTestClientHandler extends SimpleChannelInboundHandler<ByteBuf> {
  private final boolean autoRead;
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  final ByteBuf frames;
  volatile int counter;
  SpdyEchoTestClientHandler(  ByteBuf frames,  boolean autoRead){
    this.frames=frames;
    this.autoRead=autoRead;
  }
  @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {
    if (!autoRead) {
      ctx.read();
    }
  }
  @Override public void channelRead0(  ChannelHandlerContext ctx,  ByteBuf in) throws Exception {
    byte[] actual=new byte[in.readableBytes()];
    in.readBytes(actual);
    int lastIdx=counter;
    for (int i=0; i < actual.length; i++) {
      assertEquals(frames.getByte(ignoredBytes + i + lastIdx),actual[i]);
    }
    counter+=actual.length;
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    if (exception.compareAndSet(null,cause)) {
      ctx.close();
    }
  }
  @Override public void channelReadComplete(  ChannelHandlerContext ctx) throws Exception {
    if (!autoRead) {
      ctx.read();
    }
  }
}
