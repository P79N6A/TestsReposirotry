public class HttpHeadersTest {
  @Test public void testRemoveTransferEncodingIgnoreCase(){
    HttpMessage message=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
    message.headers().set(HttpHeaderNames.TRANSFER_ENCODING,"Chunked");
    assertFalse(message.headers().isEmpty());
    HttpUtil.setTransferEncodingChunked(message,false);
    assertTrue(message.headers().isEmpty());
  }
  @Test public void testGetOperations(){
    HttpHeaders headers=new DefaultHttpHeaders();
    headers.add(of("Foo"),of("1"));
    headers.add(of("Foo"),of("2"));
    assertEquals("1",headers.get(of("Foo")));
    List<String> values=headers.getAll(of("Foo"));
    assertEquals(2,values.size());
    assertEquals("1",values.get(0));
    assertEquals("2",values.get(1));
  }
  @Test public void testEqualsIgnoreCase(){
    assertThat(AsciiString.contentEqualsIgnoreCase(null,null),is(true));
    assertThat(AsciiString.contentEqualsIgnoreCase(null,"foo"),is(false));
    assertThat(AsciiString.contentEqualsIgnoreCase("bar",null),is(false));
    assertThat(AsciiString.contentEqualsIgnoreCase("FoO","fOo"),is(true));
  }
  @Test(expected=NullPointerException.class) public void testSetNullHeaderValueValidate(){
    HttpHeaders headers=new DefaultHttpHeaders(true);
    headers.set(of("test"),(CharSequence)null);
  }
  @Test(expected=NullPointerException.class) public void testSetNullHeaderValueNotValidate(){
    HttpHeaders headers=new DefaultHttpHeaders(false);
    headers.set(of("test"),(CharSequence)null);
  }
  @Test(expected=IllegalArgumentException.class) public void testAddSelf(){
    HttpHeaders headers=new DefaultHttpHeaders(false);
    headers.add(headers);
  }
  @Test public void testSetSelfIsNoOp(){
    HttpHeaders headers=new DefaultHttpHeaders(false);
    headers.add("name","value");
    headers.set(headers);
    assertEquals(1,headers.size());
  }
}
