public class SocketDataReadInitialStateTest extends AbstractSocketTest {
  @Test(timeout=10000) public void testAutoReadOffNoDataReadUntilReadCalled() throws Throwable {
    run();
  }
  public void testAutoReadOffNoDataReadUntilReadCalled(  ServerBootstrap sb,  Bootstrap cb) throws Throwable {
    Channel serverChannel=null;
    Channel clientChannel=null;
    final int sleepMs=100;
    try {
      sb.option(AUTO_READ,false);
      sb.childOption(AUTO_READ,false);
      cb.option(AUTO_READ,false);
      final CountDownLatch serverReadyLatch=new CountDownLatch(1);
      final CountDownLatch acceptorReadLatch=new CountDownLatch(1);
      final CountDownLatch serverReadLatch=new CountDownLatch(1);
      final CountDownLatch clientReadLatch=new CountDownLatch(1);
      final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<Channel>();
      sb.handler(new ChannelInitializer<Channel>(){
        @Override protected void initChannel(        Channel ch){
          ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
            @Override public void channelRead(            ChannelHandlerContext ctx,            Object msg){
              acceptorReadLatch.countDown();
              ctx.fireChannelRead(msg);
            }
          }
);
        }
      }
);
      sb.childHandler(new ChannelInitializer<Channel>(){
        @Override protected void initChannel(        Channel ch){
          serverConnectedChannelRef.set(ch);
          ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){
            @Override protected void channelRead0(            ChannelHandlerContext ctx,            ByteBuf msg){
              ctx.writeAndFlush(msg.retainedDuplicate());
              serverReadLatch.countDown();
            }
          }
);
          serverReadyLatch.countDown();
        }
      }
);
      cb.handler(new ChannelInitializer<Channel>(){
        @Override protected void initChannel(        Channel ch){
          ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){
            @Override protected void channelRead0(            ChannelHandlerContext ctx,            Object msg){
              clientReadLatch.countDown();
            }
          }
);
        }
      }
);
      serverChannel=sb.bind().sync().channel();
      clientChannel=cb.connect(serverChannel.localAddress()).sync().channel();
      clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();
      Thread.sleep(sleepMs);
      assertEquals(1,acceptorReadLatch.getCount());
      serverChannel.read();
      serverReadyLatch.await();
      Channel serverConnectedChannel=serverConnectedChannelRef.get();
      assertNotNull(serverConnectedChannel);
      Thread.sleep(sleepMs);
      assertEquals(1,serverReadLatch.getCount());
      serverConnectedChannel.read();
      serverReadLatch.await();
      Thread.sleep(sleepMs);
      assertEquals(1,clientReadLatch.getCount());
      clientChannel.read();
      clientReadLatch.await();
    }
  finally {
      if (serverChannel != null) {
        serverChannel.close().sync();
      }
      if (clientChannel != null) {
        clientChannel.close().sync();
      }
    }
  }
  @Test(timeout=10000) public void testAutoReadOnDataReadImmediately() throws Throwable {
    run();
  }
  public void testAutoReadOnDataReadImmediately(  ServerBootstrap sb,  Bootstrap cb) throws Throwable {
    Channel serverChannel=null;
    Channel clientChannel=null;
    try {
      sb.option(AUTO_READ,true);
      sb.childOption(AUTO_READ,true);
      cb.option(AUTO_READ,true);
      final CountDownLatch serverReadLatch=new CountDownLatch(1);
      final CountDownLatch clientReadLatch=new CountDownLatch(1);
      sb.childHandler(new ChannelInitializer<Channel>(){
        @Override protected void initChannel(        Channel ch){
          ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){
            @Override protected void channelRead0(            ChannelHandlerContext ctx,            ByteBuf msg){
              ctx.writeAndFlush(msg.retainedDuplicate());
              serverReadLatch.countDown();
            }
          }
);
        }
      }
);
      cb.handler(new ChannelInitializer<Channel>(){
        @Override protected void initChannel(        Channel ch){
          ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){
            @Override protected void channelRead0(            ChannelHandlerContext ctx,            Object msg){
              clientReadLatch.countDown();
            }
          }
);
        }
      }
);
      serverChannel=sb.bind().sync().channel();
      clientChannel=cb.connect(serverChannel.localAddress()).sync().channel();
      clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();
      serverReadLatch.await();
      clientReadLatch.await();
    }
  finally {
      if (serverChannel != null) {
        serverChannel.close().sync();
      }
      if (clientChannel != null) {
        clientChannel.close().sync();
      }
    }
  }
}
