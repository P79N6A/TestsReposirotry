public class EpollSocketStringEchoBusyWaitTest extends SocketStringEchoTest {
  private static EventLoopGroup EPOLL_LOOP;
  @BeforeClass public static void setup() throws Exception {
    EPOLL_LOOP=new EpollEventLoopGroup(2,new DefaultThreadFactory("testsuite-epoll-busy-wait",true),new SelectStrategyFactory(){
      @Override public SelectStrategy newSelectStrategy(){
        return new SelectStrategy(){
          @Override public int calculateStrategy(          IntSupplier selectSupplier,          boolean hasTasks){
            return SelectStrategy.BUSY_WAIT;
          }
        }
;
      }
    }
);
  }
  @AfterClass public static void teardown() throws Exception {
    if (EPOLL_LOOP != null) {
      EPOLL_LOOP.shutdownGracefully();
    }
  }
  @Override protected List<TestsuitePermutation.BootstrapComboFactory<ServerBootstrap,Bootstrap>> newFactories(){
    List<BootstrapComboFactory<ServerBootstrap,Bootstrap>> list=new ArrayList<BootstrapComboFactory<ServerBootstrap,Bootstrap>>();
    final BootstrapFactory<ServerBootstrap> sbf=serverSocket();
    final BootstrapFactory<Bootstrap> cbf=clientSocket();
    list.add(new BootstrapComboFactory<ServerBootstrap,Bootstrap>(){
      @Override public ServerBootstrap newServerInstance(){
        return sbf.newInstance();
      }
      @Override public Bootstrap newClientInstance(){
        return cbf.newInstance();
      }
    }
);
    return list;
  }
  private static BootstrapFactory<ServerBootstrap> serverSocket(){
    return new BootstrapFactory<ServerBootstrap>(){
      @Override public ServerBootstrap newInstance(){
        return new ServerBootstrap().group(EPOLL_LOOP,EPOLL_LOOP).channel(EpollServerSocketChannel.class);
      }
    }
;
  }
  private static BootstrapFactory<Bootstrap> clientSocket(){
    return new BootstrapFactory<Bootstrap>(){
      @Override public Bootstrap newInstance(){
        return new Bootstrap().group(EPOLL_LOOP).channel(EpollSocketChannel.class);
      }
    }
;
  }
}
