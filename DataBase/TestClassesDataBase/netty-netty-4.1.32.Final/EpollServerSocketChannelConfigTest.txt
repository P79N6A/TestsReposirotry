public class EpollServerSocketChannelConfigTest {
  private static EventLoopGroup group;
  private static EpollServerSocketChannel ch;
  @BeforeClass public static void before(){
    group=new EpollEventLoopGroup(1);
    ServerBootstrap bootstrap=new ServerBootstrap();
    ch=(EpollServerSocketChannel)bootstrap.group(group).channel(EpollServerSocketChannel.class).childHandler(new ChannelInboundHandlerAdapter()).bind(new InetSocketAddress(0)).syncUninterruptibly().channel();
  }
  @AfterClass public static void after(){
    try {
      ch.close().syncUninterruptibly();
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testTcpDeferAccept(){
    ch.config().setTcpDeferAccept(0);
    assertEquals(0,ch.config().getTcpDeferAccept());
    ch.config().setTcpDeferAccept(10);
    assertTrue(10 <= ch.config().getTcpDeferAccept());
  }
  @Test public void testReusePort(){
    ch.config().setReusePort(false);
    assertFalse(ch.config().isReusePort());
    ch.config().setReusePort(true);
    assertTrue(ch.config().isReusePort());
  }
  @Test public void testFreeBind(){
    ch.config().setFreeBind(false);
    assertFalse(ch.config().isFreeBind());
    ch.config().setFreeBind(true);
    assertTrue(ch.config().isFreeBind());
  }
  @Test public void getGetOptions(){
    Map<ChannelOption<?>,Object> map=ch.config().getOptions();
    assertFalse(map.isEmpty());
  }
}
