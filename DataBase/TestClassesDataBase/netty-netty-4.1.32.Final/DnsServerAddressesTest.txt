public class DnsServerAddressesTest {
  private static final InetSocketAddress ADDR1=new InetSocketAddress(NetUtil.LOCALHOST,1);
  private static final InetSocketAddress ADDR2=new InetSocketAddress(NetUtil.LOCALHOST,2);
  private static final InetSocketAddress ADDR3=new InetSocketAddress(NetUtil.LOCALHOST,3);
  @Test public void testDefaultAddresses(){
    assertThat(defaultAddressList().size(),is(greaterThan(0)));
  }
  @Test public void testSequential(){
    DnsServerAddresses seq=DnsServerAddresses.sequential(ADDR1,ADDR2,ADDR3);
    assertThat(seq.stream(),is(not(sameInstance(seq.stream()))));
    for (int j=0; j < 2; j++) {
      DnsServerAddressStream i=seq.stream();
      assertNext(i,ADDR1);
      assertNext(i,ADDR2);
      assertNext(i,ADDR3);
      assertNext(i,ADDR1);
      assertNext(i,ADDR2);
      assertNext(i,ADDR3);
    }
  }
  @Test public void testRotational(){
    DnsServerAddresses seq=DnsServerAddresses.rotational(ADDR1,ADDR2,ADDR3);
    DnsServerAddressStream i=seq.stream();
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
    i=seq.stream();
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
    assertNext(i,ADDR1);
    i=seq.stream();
    assertNext(i,ADDR3);
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    i=seq.stream();
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
    assertNext(i,ADDR1);
    assertNext(i,ADDR2);
    assertNext(i,ADDR3);
  }
  @Test public void testShuffled(){
    DnsServerAddresses seq=DnsServerAddresses.shuffled(ADDR1,ADDR2,ADDR3);
    Set<InetSocketAddress> set=Collections.newSetFromMap(new IdentityHashMap<InetSocketAddress,Boolean>());
    DnsServerAddressStream i=seq.stream();
    for (int j=0; j < 1048576; j++) {
      set.add(i.next());
    }
    assertThat(set.size(),is(3));
    assertThat(seq.stream(),is(not(sameInstance(seq.stream()))));
  }
  @Test public void testSingleton(){
    DnsServerAddresses seq=DnsServerAddresses.singleton(ADDR1);
    assertThat(seq.stream(),is(sameInstance(seq.stream())));
    DnsServerAddressStream i=seq.stream();
    assertNext(i,ADDR1);
    assertNext(i,ADDR1);
    assertNext(i,ADDR1);
  }
  private static void assertNext(  DnsServerAddressStream i,  InetSocketAddress addr){
    assertThat(i.next(),is(sameInstance(addr)));
  }
}
