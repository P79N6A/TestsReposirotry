private final class Socks5TerminalHandler extends TerminalHandler {
  private boolean authenticated;
  @Override protected boolean handleProxyProtocol(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    if (!authenticated) {
      authenticated=authenticate(ctx,msg);
      return false;
    }
    Socks5CommandRequest req=(Socks5CommandRequest)msg;
    assertThat(req.type(),is(Socks5CommandType.CONNECT));
    ctx.pipeline().addBefore(ctx.name(),"lineDecoder",new LineBasedFrameDecoder(64,false,true));
    Socks5CommandResponse res;
    boolean sendGreeting=false;
    if (!req.dstAddr().equals(destination.getHostString()) || req.dstPort() != destination.getPort()) {
      res=new DefaultSocks5CommandResponse(Socks5CommandStatus.FORBIDDEN,Socks5AddressType.IPv4);
    }
 else {
      res=new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.IPv4);
      sendGreeting=true;
    }
    ctx.write(res);
    ctx.pipeline().remove(ENCODER);
    ctx.pipeline().remove(DECODER);
    if (sendGreeting) {
      ctx.write(Unpooled.copiedBuffer("0\n",CharsetUtil.US_ASCII));
    }
    return true;
  }
}
