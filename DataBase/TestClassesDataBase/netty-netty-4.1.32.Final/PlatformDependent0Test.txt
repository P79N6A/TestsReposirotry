public class PlatformDependent0Test {
  @BeforeClass public static void assumeUnsafe(){
    assumeTrue(PlatformDependent0.hasUnsafe());
    assumeTrue(PlatformDependent0.hasDirectBufferNoCleanerConstructor());
  }
  @Test public void testNewDirectBufferNegativeMemoryAddress(){
    testNewDirectBufferMemoryAddress(-1);
  }
  @Test public void testNewDirectBufferNonNegativeMemoryAddress(){
    testNewDirectBufferMemoryAddress(10);
  }
  @Test public void testNewDirectBufferZeroMemoryAddress(){
    PlatformDependent0.newDirectBuffer(0,10);
  }
  private static void testNewDirectBufferMemoryAddress(  long address){
    assumeTrue(PlatformDependent0.hasDirectBufferNoCleanerConstructor());
    int capacity=10;
    ByteBuffer buffer=PlatformDependent0.newDirectBuffer(address,capacity);
    assertEquals(address,PlatformDependent0.directBufferAddress(buffer));
    assertEquals(capacity,buffer.capacity());
  }
  @Test public void testMajorVersionFromJavaSpecificationVersion(){
    final SecurityManager current=System.getSecurityManager();
    try {
      System.setSecurityManager(new SecurityManager(){
        @Override public void checkPropertyAccess(        String key){
          if (key.equals("java.specification.version")) {
            throw new SecurityException(key);
          }
        }
        @Override public void checkPermission(        Permission perm){
        }
      }
);
      assertEquals(6,PlatformDependent0.majorVersionFromJavaSpecificationVersion());
    }
  finally {
      System.setSecurityManager(current);
    }
  }
  @Test public void testMajorVersion(){
    assertEquals(6,PlatformDependent0.majorVersion("1.6"));
    assertEquals(7,PlatformDependent0.majorVersion("1.7"));
    assertEquals(8,PlatformDependent0.majorVersion("1.8"));
    assertEquals(8,PlatformDependent0.majorVersion("8"));
    assertEquals(9,PlatformDependent0.majorVersion("1.9"));
    assertEquals(9,PlatformDependent0.majorVersion("9"));
  }
}
