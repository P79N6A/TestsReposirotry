public class SnappyFrameDecoderTest {
  private EmbeddedChannel channel;
  @Before public void initChannel(){
    channel=new EmbeddedChannel(new SnappyFrameDecoder());
  }
  @Test(expected=DecompressionException.class) public void testReservedUnskippableChunkTypeCausesError() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{0x03,0x01,0x00,0x00,0x00});
    channel.writeInbound(in);
  }
  @Test(expected=DecompressionException.class) public void testInvalidStreamIdentifierLength() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{-0x80,0x05,0x00,0x00,'n','e','t','t','y'});
    channel.writeInbound(in);
  }
  @Test(expected=DecompressionException.class) public void testInvalidStreamIdentifierValue() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{(byte)0xff,0x06,0x00,0x00,'s','n','e','t','t','y'});
    channel.writeInbound(in);
  }
  @Test(expected=DecompressionException.class) public void testReservedSkippableBeforeStreamIdentifier() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{-0x7f,0x06,0x00,0x00,'s','n','e','t','t','y'});
    channel.writeInbound(in);
  }
  @Test(expected=DecompressionException.class) public void testUncompressedDataBeforeStreamIdentifier() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{0x01,0x05,0x00,0x00,'n','e','t','t','y'});
    channel.writeInbound(in);
  }
  @Test(expected=DecompressionException.class) public void testCompressedDataBeforeStreamIdentifier() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{0x00,0x05,0x00,0x00,'n','e','t','t','y'});
    channel.writeInbound(in);
  }
  @Test public void testReservedSkippableSkipsInput() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{(byte)0xff,0x06,0x00,0x00,0x73,0x4e,0x61,0x50,0x70,0x59,-0x7f,0x05,0x00,0x00,'n','e','t','t','y'});
    channel.writeInbound(in);
    assertNull(channel.readInbound());
    assertFalse(in.isReadable());
  }
  @Test public void testUncompressedDataAppendsToOut() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{(byte)0xff,0x06,0x00,0x00,0x73,0x4e,0x61,0x50,0x70,0x59,0x01,0x09,0x00,0x00,0x00,0x00,0x00,0x00,'n','e','t','t','y'});
    channel.writeInbound(in);
    ByteBuf expected=Unpooled.wrappedBuffer(new byte[]{'n','e','t','t','y'});
    ByteBuf actual=channel.readInbound();
    assertEquals(expected,actual);
    expected.release();
    actual.release();
  }
  @Test public void testCompressedDataDecodesAndAppendsToOut() throws Exception {
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{(byte)0xff,0x06,0x00,0x00,0x73,0x4e,0x61,0x50,0x70,0x59,0x00,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x04 << 2,0x6e,0x65,0x74,0x74,0x79});
    channel.writeInbound(in);
    ByteBuf expected=Unpooled.wrappedBuffer(new byte[]{'n','e','t','t','y'});
    ByteBuf actual=channel.readInbound();
    assertEquals(expected,actual);
    expected.release();
    actual.release();
  }
  @Test(expected=DecompressionException.class) public void testInvalidChecksumThrowsException() throws Exception {
    EmbeddedChannel channel=new EmbeddedChannel(new SnappyFrameDecoder(true));
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{(byte)0xff,0x06,0x00,0x00,0x73,0x4e,0x61,0x50,0x70,0x59,0x01,0x09,0x00,0x00,0x00,0x00,0x00,0x00,'n','e','t','t','y'});
    channel.writeInbound(in);
  }
  @Test public void testInvalidChecksumDoesNotThrowException() throws Exception {
    EmbeddedChannel channel=new EmbeddedChannel(new SnappyFrameDecoder(true));
    ByteBuf in=Unpooled.wrappedBuffer(new byte[]{(byte)0xff,0x06,0x00,0x00,0x73,0x4e,0x61,0x50,0x70,0x59,0x01,0x09,0x00,0x00,0x6f,-0x68,-0x7e,-0x5e,'n','e','t','t','y'});
    channel.writeInbound(in);
  }
}
