@SuppressWarnings("DynamicRegexReplaceableByCompiledPattern") public class DefaultChannelIdTest {
  @Test public void testShortText(){
    String text=DefaultChannelId.newInstance().asShortText();
    assertTrue(text.matches("^[0-9a-f]{8}$"));
  }
  @Test public void testLongText(){
    String text=DefaultChannelId.newInstance().asLongText();
    assertTrue(text.matches("^[0-9a-f]{16}-[0-9a-f]{8}-[0-9a-f]{8}-[0-9a-f]{16}-[0-9a-f]{8}$"));
  }
  @Test public void testIdempotentMachineId(){
    String a=DefaultChannelId.newInstance().asLongText().substring(0,16);
    String b=DefaultChannelId.newInstance().asLongText().substring(0,16);
    assertThat(a,is(b));
  }
  @Test public void testIdempotentProcessId(){
    String a=DefaultChannelId.newInstance().asLongText().substring(17,21);
    String b=DefaultChannelId.newInstance().asLongText().substring(17,21);
    assertThat(a,is(b));
  }
  @Test public void testSerialization() throws Exception {
    ChannelId a=DefaultChannelId.newInstance();
    ChannelId b;
    ByteBuf buf=Unpooled.buffer();
    ObjectOutputStream out=new ObjectOutputStream(new ByteBufOutputStream(buf));
    try {
      out.writeObject(a);
      out.flush();
    }
  finally {
      out.close();
    }
    ObjectInputStream in=new ObjectInputStream(new ByteBufInputStream(buf,true));
    try {
      b=(ChannelId)in.readObject();
    }
  finally {
      in.close();
    }
    assertThat(a,is(b));
    assertThat(a,is(not(sameInstance(b))));
    assertThat(a.asLongText(),is(b.asLongText()));
  }
}
