/** 
 * This class removes the bits that would transform the frames to bytes and so make it easier to test the actual special handling of the codec.
 */
private final class TestableHttp2MultiplexCodec extends Http2MultiplexCodec {
  public TestableHttp2MultiplexCodec(  Http2ConnectionEncoder encoder,  Http2ConnectionDecoder decoder,  Http2Settings initialSettings,  ChannelHandler inboundStreamHandler){
    super(encoder,decoder,initialSettings,inboundStreamHandler,null);
  }
  void onHttp2Frame(  Http2Frame frame){
    onHttp2Frame(ctx,frame);
  }
  void onChannelReadComplete(){
    onChannelReadComplete(ctx);
  }
  void onHttp2StreamStateChanged(  Http2FrameStream stream){
    onHttp2StreamStateChanged(ctx,stream);
  }
  void onHttp2FrameStreamException(  Http2FrameStreamException cause){
    onHttp2FrameStreamException(ctx,cause);
  }
  void onHttp2StreamWritabilityChanged(  Http2FrameStream stream,  boolean writable){
    onHttp2StreamWritabilityChanged(ctx,stream,writable);
  }
  @Override boolean onBytesConsumed(  ChannelHandlerContext ctx,  Http2FrameStream stream,  int bytes){
    writer.write(new DefaultHttp2WindowUpdateFrame(bytes).stream(stream),ctx.newPromise());
    return true;
  }
  @Override public void write(  ChannelHandlerContext ctx,  Object msg,  ChannelPromise promise){
    writer.write(msg,promise);
  }
  @Override void flush0(  ChannelHandlerContext ctx){
  }
  @Override Stream newStream(){
    return new Stream();
  }
final class Stream extends Http2MultiplexCodecStream {
    Http2Stream.State state=Http2Stream.State.IDLE;
    int id=-1;
    @Override public int id(){
      return id;
    }
    @Override public Http2Stream.State state(){
      return state;
    }
  }
}
