public class CharSequenceValueConverterTest {
  private final CharSequenceValueConverter converter=CharSequenceValueConverter.INSTANCE;
  @Test public void testBoolean(){
    assertTrue(converter.convertToBoolean(converter.convertBoolean(true)));
    assertFalse(converter.convertToBoolean(converter.convertBoolean(false)));
  }
  @Test public void testByteFromAsciiString(){
    assertEquals(127,converter.convertToByte(AsciiString.of("127")));
  }
  @Test(expected=NumberFormatException.class) public void testByteFromEmptyAsciiString(){
    converter.convertToByte(AsciiString.EMPTY_STRING);
  }
  @Test public void testByte(){
    assertEquals(Byte.MAX_VALUE,converter.convertToByte(converter.convertByte(Byte.MAX_VALUE)));
  }
  @Test public void testChar(){
    assertEquals(Character.MAX_VALUE,converter.convertToChar(converter.convertChar(Character.MAX_VALUE)));
  }
  @Test public void testDouble(){
    assertEquals(Double.MAX_VALUE,converter.convertToDouble(converter.convertDouble(Double.MAX_VALUE)),0);
  }
  @Test public void testFloat(){
    assertEquals(Float.MAX_VALUE,converter.convertToFloat(converter.convertFloat(Float.MAX_VALUE)),0);
  }
  @Test public void testInt(){
    assertEquals(Integer.MAX_VALUE,converter.convertToInt(converter.convertInt(Integer.MAX_VALUE)));
  }
  @Test public void testShort(){
    assertEquals(Short.MAX_VALUE,converter.convertToShort(converter.convertShort(Short.MAX_VALUE)));
  }
  @Test public void testLong(){
    assertEquals(Long.MAX_VALUE,converter.convertToLong(converter.convertLong(Long.MAX_VALUE)));
  }
  @Test public void testTimeMillis(){
    long millis=(System.currentTimeMillis() / 1000) * 1000;
    assertEquals(millis,converter.convertToTimeMillis(converter.convertTimeMillis(millis)));
  }
}
