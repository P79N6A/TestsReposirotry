public class SimpleUserEventChannelHandlerTest {
  private FooEventCatcher fooEventCatcher;
  private AllEventCatcher allEventCatcher;
  private EmbeddedChannel channel;
  @Before public void setUp(){
    fooEventCatcher=new FooEventCatcher();
    allEventCatcher=new AllEventCatcher();
    channel=new EmbeddedChannel(fooEventCatcher,allEventCatcher);
  }
  @Test public void testTypeMatch(){
    FooEvent fooEvent=new FooEvent();
    channel.pipeline().fireUserEventTriggered(fooEvent);
    assertEquals(1,fooEventCatcher.caughtEvents.size());
    assertEquals(0,allEventCatcher.caughtEvents.size());
    assertEquals(0,fooEvent.refCnt());
    assertFalse(channel.finish());
  }
  @Test public void testTypeMismatch(){
    BarEvent barEvent=new BarEvent();
    channel.pipeline().fireUserEventTriggered(barEvent);
    assertEquals(0,fooEventCatcher.caughtEvents.size());
    assertEquals(1,allEventCatcher.caughtEvents.size());
    assertTrue(barEvent.release());
    assertFalse(channel.finish());
  }
static final class FooEvent extends DefaultByteBufHolder {
    FooEvent(){
      super(Unpooled.buffer());
    }
  }
static final class BarEvent extends DefaultByteBufHolder {
    BarEvent(){
      super(Unpooled.buffer());
    }
  }
static final class FooEventCatcher extends SimpleUserEventChannelHandler<FooEvent> {
    public List<FooEvent> caughtEvents;
    FooEventCatcher(){
      caughtEvents=new ArrayList<FooEvent>();
    }
    @Override protected void eventReceived(    ChannelHandlerContext ctx,    FooEvent evt){
      caughtEvents.add(evt);
    }
  }
static final class AllEventCatcher extends ChannelInboundHandlerAdapter {
    public List<Object> caughtEvents;
    AllEventCatcher(){
      caughtEvents=new ArrayList<Object>();
    }
    @Override public void userEventTriggered(    ChannelHandlerContext ctx,    Object evt){
      caughtEvents.add(evt);
    }
  }
}
