private static final class TestAddressResolverGroup extends AddressResolverGroup<SocketAddress> {
  private final boolean success;
  TestAddressResolverGroup(  boolean success){
    this.success=success;
  }
  @Override protected AddressResolver<SocketAddress> newResolver(  EventExecutor executor) throws Exception {
    return new AbstractAddressResolver<SocketAddress>(executor){
      @Override protected boolean doIsResolved(      SocketAddress address){
        return false;
      }
      @Override protected void doResolve(      final SocketAddress unresolvedAddress,      final Promise<SocketAddress> promise){
        executor().execute(new Runnable(){
          @Override public void run(){
            if (success) {
              promise.setSuccess(unresolvedAddress);
            }
 else {
              promise.setFailure(new UnknownHostException(unresolvedAddress.toString()));
            }
          }
        }
);
      }
      @Override protected void doResolveAll(      final SocketAddress unresolvedAddress,      final Promise<List<SocketAddress>> promise) throws Exception {
        executor().execute(new Runnable(){
          @Override public void run(){
            if (success) {
              promise.setSuccess(Collections.singletonList(unresolvedAddress));
            }
 else {
              promise.setFailure(new UnknownHostException(unresolvedAddress.toString()));
            }
          }
        }
);
      }
    }
;
  }
}
