public class DatagramPacketEncoderTest {
  private EmbeddedChannel channel;
  @Before public void setUp(){
    channel=new EmbeddedChannel(new DatagramPacketEncoder<String>(new StringEncoder(CharsetUtil.UTF_8)));
  }
  @After public void tearDown(){
    assertFalse(channel.finish());
  }
  @Test public void testEncode(){
    InetSocketAddress recipient=SocketUtils.socketAddress("127.0.0.1",10000);
    InetSocketAddress sender=SocketUtils.socketAddress("127.0.0.1",20000);
    assertTrue(channel.writeOutbound(new DefaultAddressedEnvelope<String,InetSocketAddress>("netty",recipient,sender)));
    DatagramPacket packet=channel.readOutbound();
    try {
      assertEquals("netty",packet.content().toString(CharsetUtil.UTF_8));
      assertEquals(recipient,packet.recipient());
      assertEquals(sender,packet.sender());
    }
  finally {
      packet.release();
    }
  }
  @Test public void testUnmatchedMessageType(){
    InetSocketAddress recipient=SocketUtils.socketAddress("127.0.0.1",10000);
    InetSocketAddress sender=SocketUtils.socketAddress("127.0.0.1",20000);
    DefaultAddressedEnvelope<Long,InetSocketAddress> envelope=new DefaultAddressedEnvelope<Long,InetSocketAddress>(1L,recipient,sender);
    assertTrue(channel.writeOutbound(envelope));
    DefaultAddressedEnvelope<Long,InetSocketAddress> output=channel.readOutbound();
    try {
      assertSame(envelope,output);
    }
  finally {
      output.release();
    }
  }
  @Test public void testUnmatchedType(){
    String netty="netty";
    assertTrue(channel.writeOutbound(netty));
    assertSame(netty,channel.readOutbound());
  }
  @Test public void testIsNotSharable(){
    testSharable(false);
  }
  @Test public void testIsSharable(){
    testSharable(true);
  }
  private static void testSharable(  boolean sharable){
    MessageToMessageEncoder<AddressedEnvelope<ByteBuf,InetSocketAddress>> wrapped=new TestMessageToMessageEncoder(sharable);
    DatagramPacketEncoder<AddressedEnvelope<ByteBuf,InetSocketAddress>> encoder=new DatagramPacketEncoder<AddressedEnvelope<ByteBuf,InetSocketAddress>>(wrapped);
    assertEquals(wrapped.isSharable(),encoder.isSharable());
  }
private static final class TestMessageToMessageEncoder extends MessageToMessageEncoder<AddressedEnvelope<ByteBuf,InetSocketAddress>> {
    private final boolean sharable;
    TestMessageToMessageEncoder(    boolean sharable){
      this.sharable=sharable;
    }
    @Override protected void encode(    ChannelHandlerContext ctx,    AddressedEnvelope<ByteBuf,InetSocketAddress> msg,    List<Object> out){
    }
    @Override public boolean isSharable(){
      return sharable;
    }
  }
}
