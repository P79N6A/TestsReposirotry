private static final class FakeFlowControlled implements Http2RemoteFlowController.FlowControlled {
  private int currentPadding;
  private int currentPayloadSize;
  private int originalPayloadSize;
  private int originalPadding;
  private boolean writeCalled;
  private final boolean mergeable;
  private boolean merged;
  private Throwable t;
  private FakeFlowControlled(  int size){
    this(size,false);
  }
  private FakeFlowControlled(  int size,  boolean mergeable){
    this(size,0,mergeable);
  }
  private FakeFlowControlled(  int payloadSize,  int padding,  boolean mergeable){
    currentPayloadSize=originalPayloadSize=payloadSize;
    currentPadding=originalPadding=padding;
    this.mergeable=mergeable;
  }
  @Override public int size(){
    return currentPayloadSize + currentPadding;
  }
  private int originalSize(){
    return originalPayloadSize + originalPadding;
  }
  @Override public void error(  ChannelHandlerContext ctx,  Throwable t){
    this.t=t;
  }
  @Override public void writeComplete(){
  }
  @Override public void write(  ChannelHandlerContext ctx,  int allowedBytes){
    if (allowedBytes <= 0 && size() != 0) {
      return;
    }
    writeCalled=true;
    int written=Math.min(size(),allowedBytes);
    if (written > currentPayloadSize) {
      written-=currentPayloadSize;
      currentPayloadSize=0;
      currentPadding-=written;
    }
 else {
      currentPayloadSize-=written;
    }
  }
  @Override public boolean merge(  ChannelHandlerContext ctx,  Http2RemoteFlowController.FlowControlled next){
    if (mergeable && next instanceof FakeFlowControlled) {
      FakeFlowControlled ffcNext=(FakeFlowControlled)next;
      originalPayloadSize+=ffcNext.originalPayloadSize;
      currentPayloadSize+=ffcNext.originalPayloadSize;
      currentPadding=originalPadding=Math.max(originalPadding,ffcNext.originalPadding);
      ffcNext.merged=true;
      return true;
    }
    return false;
  }
  public int written(){
    return originalSize() - size();
  }
  public void assertNotWritten(){
    assertFalse(writeCalled);
  }
  public void assertPartiallyWritten(  int expectedWritten){
    assertPartiallyWritten(expectedWritten,0);
  }
  public void assertPartiallyWritten(  int expectedWritten,  int delta){
    assertTrue(writeCalled);
    assertEquals(expectedWritten,written(),delta);
  }
  public void assertFullyWritten(){
    assertTrue(writeCalled);
    assertEquals(0,currentPayloadSize);
    assertEquals(0,currentPadding);
  }
  public boolean assertMerged(){
    return merged;
  }
  public void assertError(  Http2Error error){
    assertNotNull(t);
    if (error != null) {
      assertSame(error,((Http2Exception)t).error());
    }
  }
}
