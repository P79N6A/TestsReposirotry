public class SelectedSelectionKeySetTest {
  @Mock private SelectionKey mockKey;
  @Mock private SelectionKey mockKey2;
  @Mock private SelectionKey mockKey3;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
  }
  @Test public void addElements(){
    SelectedSelectionKeySet set=new SelectedSelectionKeySet();
    final int expectedSize=1000000;
    for (int i=0; i < expectedSize; ++i) {
      assertTrue(set.add(mockKey));
    }
    assertEquals(expectedSize,set.size());
    assertFalse(set.isEmpty());
  }
  @Test public void resetSet(){
    SelectedSelectionKeySet set=new SelectedSelectionKeySet();
    assertTrue(set.add(mockKey));
    assertTrue(set.add(mockKey2));
    set.reset(1);
    assertSame(mockKey,set.keys[0]);
    assertNull(set.keys[1]);
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
  }
  @Test public void iterator(){
    SelectedSelectionKeySet set=new SelectedSelectionKeySet();
    assertTrue(set.add(mockKey));
    assertTrue(set.add(mockKey2));
    Iterator<SelectionKey> keys=set.iterator();
    assertTrue(keys.hasNext());
    assertSame(mockKey,keys.next());
    assertTrue(keys.hasNext());
    assertSame(mockKey2,keys.next());
    assertFalse(keys.hasNext());
    try {
      keys.next();
      fail();
    }
 catch (    NoSuchElementException expected) {
    }
    try {
      keys.remove();
      fail();
    }
 catch (    UnsupportedOperationException expected) {
    }
  }
  @Test public void contains(){
    SelectedSelectionKeySet set=new SelectedSelectionKeySet();
    assertTrue(set.add(mockKey));
    assertTrue(set.add(mockKey2));
    assertFalse(set.contains(mockKey));
    assertFalse(set.contains(mockKey2));
    assertFalse(set.contains(mockKey3));
  }
  @Test public void remove(){
    SelectedSelectionKeySet set=new SelectedSelectionKeySet();
    assertTrue(set.add(mockKey));
    assertFalse(set.remove(mockKey));
    assertFalse(set.remove(mockKey2));
  }
}
