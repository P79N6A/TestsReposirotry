public class DefaultDnsCacheTest {
  @Test public void testExpire() throws Throwable {
    InetAddress addr1=InetAddress.getByAddress(new byte[]{10,0,0,1});
    InetAddress addr2=InetAddress.getByAddress(new byte[]{10,0,0,2});
    EventLoopGroup group=new DefaultEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache();
      cache.cache("netty.io",null,addr1,1,loop);
      cache.cache("netty.io",null,addr2,10000,loop);
      Throwable error=loop.schedule(new Callable<Throwable>(){
        @Override public Throwable call(){
          try {
            assertNull(cache.get("netty.io",null));
            return null;
          }
 catch (          Throwable cause) {
            return cause;
          }
        }
      }
,1,TimeUnit.SECONDS).get();
      if (error != null) {
        throw error;
      }
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testExpireWithDifferentTTLs(){
    testExpireWithTTL0(1);
    testExpireWithTTL0(1000);
    testExpireWithTTL0(1000000);
  }
  private static void testExpireWithTTL0(  int days){
    EventLoopGroup group=new NioEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache();
      assertNotNull(cache.cache("netty.io",null,NetUtil.LOCALHOST,days,loop));
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testExpireWithToBigMinTTL(){
    EventLoopGroup group=new NioEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache(Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE);
      assertNotNull(cache.cache("netty.io",null,NetUtil.LOCALHOST,100,loop));
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testAddMultipleAddressesForSameHostname() throws Exception {
    InetAddress addr1=InetAddress.getByAddress(new byte[]{10,0,0,1});
    InetAddress addr2=InetAddress.getByAddress(new byte[]{10,0,0,2});
    EventLoopGroup group=new DefaultEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache();
      cache.cache("netty.io",null,addr1,1,loop);
      cache.cache("netty.io",null,addr2,10000,loop);
      List<? extends DnsCacheEntry> entries=cache.get("netty.io",null);
      assertEquals(2,entries.size());
      assertEntry(entries.get(0),addr1);
      assertEntry(entries.get(1),addr2);
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testAddSameAddressForSameHostname() throws Exception {
    InetAddress addr1=InetAddress.getByAddress(new byte[]{10,0,0,1});
    EventLoopGroup group=new DefaultEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache();
      cache.cache("netty.io",null,addr1,1,loop);
      cache.cache("netty.io",null,addr1,10000,loop);
      List<? extends DnsCacheEntry> entries=cache.get("netty.io",null);
      assertEquals(1,entries.size());
      assertEntry(entries.get(0),addr1);
    }
  finally {
      group.shutdownGracefully();
    }
  }
  private static void assertEntry(  DnsCacheEntry entry,  InetAddress address){
    assertEquals(address,entry.address());
    assertNull(entry.cause());
  }
  @Test public void testCacheFailed() throws Exception {
    InetAddress addr1=InetAddress.getByAddress(new byte[]{10,0,0,1});
    InetAddress addr2=InetAddress.getByAddress(new byte[]{10,0,0,2});
    EventLoopGroup group=new DefaultEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache(1,100,100);
      cache.cache("netty.io",null,addr1,10000,loop);
      cache.cache("netty.io",null,addr2,10000,loop);
      List<? extends DnsCacheEntry> entries=cache.get("netty.io",null);
      assertEquals(2,entries.size());
      assertEntry(entries.get(0),addr1);
      assertEntry(entries.get(1),addr2);
      Exception exception=new Exception();
      cache.cache("netty.io",null,exception,loop);
      entries=cache.get("netty.io",null);
      DnsCacheEntry entry=entries.get(0);
      assertEquals(1,entries.size());
      assertSame(exception,entry.cause());
      assertNull(entry.address());
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testDotHandling() throws Exception {
    InetAddress addr1=InetAddress.getByAddress(new byte[]{10,0,0,1});
    InetAddress addr2=InetAddress.getByAddress(new byte[]{10,0,0,2});
    EventLoopGroup group=new DefaultEventLoopGroup(1);
    try {
      EventLoop loop=group.next();
      final DefaultDnsCache cache=new DefaultDnsCache(1,100,100);
      cache.cache("netty.io",null,addr1,10000,loop);
      cache.cache("netty.io.",null,addr2,10000,loop);
      List<? extends DnsCacheEntry> entries=cache.get("netty.io",null);
      assertEquals(2,entries.size());
      assertEntry(entries.get(0),addr1);
      assertEntry(entries.get(1),addr2);
      List<? extends DnsCacheEntry> entries2=cache.get("netty.io.",null);
      assertEquals(2,entries2.size());
      assertEntry(entries2.get(0),addr1);
      assertEntry(entries2.get(1),addr2);
    }
  finally {
      group.shutdownGracefully();
    }
  }
}
