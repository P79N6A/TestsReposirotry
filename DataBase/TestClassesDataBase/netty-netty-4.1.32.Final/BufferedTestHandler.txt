private static class BufferedTestHandler extends ChannelDuplexHandler {
  final Queue<Object> inboundBuffer=new ArrayDeque<Object>();
  final Queue<Object> outboundBuffer=new ArrayDeque<Object>();
  @Override public void write(  ChannelHandlerContext ctx,  Object msg,  ChannelPromise promise) throws Exception {
    outboundBuffer.add(msg);
  }
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    inboundBuffer.add(msg);
  }
  @Override public void handlerRemoved(  ChannelHandlerContext ctx) throws Exception {
    if (!inboundBuffer.isEmpty()) {
      for (      Object o : inboundBuffer) {
        ctx.fireChannelRead(o);
      }
      ctx.fireChannelReadComplete();
    }
    if (!outboundBuffer.isEmpty()) {
      for (      Object o : outboundBuffer) {
        ctx.write(o);
      }
      ctx.flush();
    }
  }
}
