public class SocketMultipleConnectTest extends AbstractSocketTest {
  @Test(timeout=30000) public void testMultipleConnect() throws Throwable {
    run();
  }
  public void testMultipleConnect(  ServerBootstrap sb,  Bootstrap cb) throws Exception {
    Channel sc=null;
    Channel cc=null;
    try {
      sb.childHandler(new ChannelInboundHandlerAdapter());
      sc=sb.bind(NetUtil.LOCALHOST,0).syncUninterruptibly().channel();
      cb.handler(new ChannelInboundHandlerAdapter());
      cc=cb.register().syncUninterruptibly().channel();
      cc.connect(sc.localAddress()).syncUninterruptibly();
      ChannelFuture connectFuture2=cc.connect(sc.localAddress()).await();
      assertTrue(connectFuture2.cause() instanceof AlreadyConnectedException);
    }
  finally {
      if (cc != null) {
        cc.close();
      }
      if (sc != null) {
        sc.close();
      }
    }
  }
  @Override protected List<TestsuitePermutation.BootstrapComboFactory<ServerBootstrap,Bootstrap>> newFactories(){
    List<TestsuitePermutation.BootstrapComboFactory<ServerBootstrap,Bootstrap>> factories=new ArrayList<TestsuitePermutation.BootstrapComboFactory<ServerBootstrap,Bootstrap>>();
    for (    TestsuitePermutation.BootstrapComboFactory<ServerBootstrap,Bootstrap> comboFactory : SocketTestPermutation.INSTANCE.socket()) {
      if (comboFactory.newClientInstance().config().group() instanceof NioEventLoopGroup) {
        factories.add(comboFactory);
      }
    }
    return factories;
  }
}
