@RunWith(Parameterized.class) public class OpenSslJdkSslEngineInteroptTest extends SSLEngineTest {
  @Parameterized.Parameters(name="{index}: bufferType = {0}, combo = {1}") public static Collection<Object[]> data(){
    List<Object[]> params=new ArrayList<Object[]>();
    for (    BufferType type : BufferType.values()) {
      params.add(new Object[]{type,ProtocolCipherCombo.tlsv12()});
      if (PlatformDependent.javaVersion() >= 11 && OpenSsl.isTlsv13Supported()) {
        params.add(new Object[]{type,ProtocolCipherCombo.tlsv13()});
      }
    }
    return params;
  }
  public OpenSslJdkSslEngineInteroptTest(  BufferType type,  ProtocolCipherCombo combo){
    super(type,combo);
  }
  @BeforeClass public static void checkOpenSsl(){
    assumeTrue(OpenSsl.isAvailable());
  }
  @Override protected SslProvider sslClientProvider(){
    return SslProvider.OPENSSL;
  }
  @Override protected SslProvider sslServerProvider(){
    return SslProvider.JDK;
  }
  @Ignore @Override public void testMutualAuthValidClientCertChainTooLongFailOptionalClientAuth() throws Exception {
  }
  @Ignore @Override public void testMutualAuthValidClientCertChainTooLongFailRequireClientAuth() throws Exception {
  }
  @Override @Test public void testMutualAuthInvalidIntermediateCASucceedWithOptionalClientAuth() throws Exception {
    checkShouldUseKeyManagerFactory();
    super.testMutualAuthInvalidIntermediateCASucceedWithOptionalClientAuth();
  }
  @Override @Test public void testMutualAuthInvalidIntermediateCAFailWithOptionalClientAuth() throws Exception {
    checkShouldUseKeyManagerFactory();
    super.testMutualAuthInvalidIntermediateCAFailWithOptionalClientAuth();
  }
  @Override @Test public void testMutualAuthInvalidIntermediateCAFailWithRequiredClientAuth() throws Exception {
    checkShouldUseKeyManagerFactory();
    super.testMutualAuthInvalidIntermediateCAFailWithRequiredClientAuth();
  }
  @Override @Test public void testClientHostnameValidationSuccess() throws InterruptedException, SSLException {
    assumeTrue(OpenSsl.supportsHostnameValidation());
    super.testClientHostnameValidationSuccess();
  }
  @Override @Test public void testClientHostnameValidationFail() throws InterruptedException, SSLException {
    assumeTrue(OpenSsl.supportsHostnameValidation());
    super.testClientHostnameValidationFail();
  }
  @Override protected boolean mySetupMutualAuthServerIsValidServerException(  Throwable cause){
    return super.mySetupMutualAuthServerIsValidServerException(cause) || causedBySSLException(cause);
  }
  @Override protected SSLEngine wrapEngine(  SSLEngine engine){
    return Java8SslTestUtils.wrapSSLEngineForTesting(engine);
  }
}
