public class UnixChannelUtilTest {
  private static final int IOV_MAX=1024;
  @Test public void testPooledAllocatorIsBufferCopyNeededForWrite(){
    testIsBufferCopyNeededForWrite(PooledByteBufAllocator.DEFAULT);
  }
  @Test public void testUnPooledAllocatorIsBufferCopyNeededForWrite(){
    testIsBufferCopyNeededForWrite(UnpooledByteBufAllocator.DEFAULT);
  }
  private static void testIsBufferCopyNeededForWrite(  ByteBufAllocator alloc){
    ByteBuf byteBuf=alloc.directBuffer();
    assertFalse(isBufferCopyNeededForWrite(byteBuf,IOV_MAX));
    assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly(),IOV_MAX));
    assertTrue(byteBuf.release());
    byteBuf=alloc.heapBuffer();
    assertTrue(isBufferCopyNeededForWrite(byteBuf,IOV_MAX));
    assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly(),IOV_MAX));
    assertTrue(byteBuf.release());
    assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false);
    assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,IOV_MAX + 1,0,true);
    assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,0,2,true);
    assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,1,1,true);
  }
  private static void assertCompositeByteBufIsBufferCopyNeededForWrite(  ByteBufAllocator alloc,  int numDirect,  int numHeap,  boolean expected){
    CompositeByteBuf comp=alloc.compositeBuffer(numDirect + numHeap);
    List<ByteBuf> byteBufs=new LinkedList<ByteBuf>();
    while (numDirect > 0) {
      byteBufs.add(alloc.directBuffer(1));
      numDirect--;
    }
    while (numHeap > 0) {
      byteBufs.add(alloc.heapBuffer(1));
      numHeap--;
    }
    Collections.shuffle(byteBufs);
    for (    ByteBuf byteBuf : byteBufs) {
      comp.addComponent(byteBuf);
    }
    assertEquals(byteBufs.toString(),expected,isBufferCopyNeededForWrite(comp,IOV_MAX));
    assertTrue(comp.release());
  }
}
