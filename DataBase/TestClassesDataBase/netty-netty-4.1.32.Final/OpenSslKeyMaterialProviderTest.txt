public class OpenSslKeyMaterialProviderTest {
  static final String PASSWORD="example";
  static final String EXISTING_ALIAS="1";
  private static final String NON_EXISTING_ALIAS="nonexisting";
  @BeforeClass public static void checkOpenSsl(){
    assumeTrue(OpenSsl.isAvailable());
  }
  protected KeyManagerFactory newKeyManagerFactory() throws Exception {
    char[] password=PASSWORD.toCharArray();
    final KeyStore keystore=KeyStore.getInstance("PKCS12");
    keystore.load(getClass().getResourceAsStream("mutual_auth_server.p12"),password);
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    kmf.init(keystore,password);
    return kmf;
  }
  protected OpenSslKeyMaterialProvider newMaterialProvider(  KeyManagerFactory factory,  String password){
    return new OpenSslKeyMaterialProvider(ReferenceCountedOpenSslContext.chooseX509KeyManager(factory.getKeyManagers()),password);
  }
  protected void assertRelease(  OpenSslKeyMaterial material){
    assertTrue(material.release());
  }
  @Test public void testChooseKeyMaterial() throws Exception {
    OpenSslKeyMaterialProvider provider=newMaterialProvider(newKeyManagerFactory(),PASSWORD);
    OpenSslKeyMaterial nonExistingMaterial=provider.chooseKeyMaterial(UnpooledByteBufAllocator.DEFAULT,NON_EXISTING_ALIAS);
    assertNull(nonExistingMaterial);
    OpenSslKeyMaterial material=provider.chooseKeyMaterial(UnpooledByteBufAllocator.DEFAULT,EXISTING_ALIAS);
    assertNotNull(material);
    assertNotEquals(0,material.certificateChainAddress());
    assertNotEquals(0,material.privateKeyAddress());
    assertRelease(material);
    provider.destroy();
  }
}
