public class DatagramPacketDecoderTest {
  private EmbeddedChannel channel;
  @Before public void setUp(){
    channel=new EmbeddedChannel(new DatagramPacketDecoder(new StringDecoder(CharsetUtil.UTF_8)));
  }
  @After public void tearDown(){
    assertFalse(channel.finish());
  }
  @Test public void testDecode(){
    InetSocketAddress recipient=SocketUtils.socketAddress("127.0.0.1",10000);
    InetSocketAddress sender=SocketUtils.socketAddress("127.0.0.1",20000);
    ByteBuf content=Unpooled.wrappedBuffer("netty".getBytes(CharsetUtil.UTF_8));
    assertTrue(channel.writeInbound(new DatagramPacket(content,recipient,sender)));
    assertEquals("netty",channel.readInbound());
  }
  @Test public void testIsNotSharable(){
    testIsSharable(false);
  }
  @Test public void testIsSharable(){
    testIsSharable(true);
  }
  private static void testIsSharable(  boolean sharable){
    MessageToMessageDecoder<ByteBuf> wrapped=new TestMessageToMessageDecoder(sharable);
    DatagramPacketDecoder decoder=new DatagramPacketDecoder(wrapped);
    assertEquals(wrapped.isSharable(),decoder.isSharable());
  }
private static final class TestMessageToMessageDecoder extends MessageToMessageDecoder<ByteBuf> {
    private final boolean sharable;
    TestMessageToMessageDecoder(    boolean sharable){
      this.sharable=sharable;
    }
    @Override protected void decode(    ChannelHandlerContext ctx,    ByteBuf msg,    List<Object> out) throws Exception {
    }
    @Override public boolean isSharable(){
      return sharable;
    }
  }
}
