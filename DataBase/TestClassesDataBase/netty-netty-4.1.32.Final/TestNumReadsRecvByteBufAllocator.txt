/** 
 * Designed to read a single byte at a time to control the number of reads done at a fine granularity.
 */
private static final class TestNumReadsRecvByteBufAllocator implements RecvByteBufAllocator {
  private final int numReads;
  TestNumReadsRecvByteBufAllocator(  int numReads){
    this.numReads=numReads;
  }
  @Override public ExtendedHandle newHandle(){
    return new ExtendedHandle(){
      private int attemptedBytesRead;
      private int lastBytesRead;
      private int numMessagesRead;
      @Override public ByteBuf allocate(      ByteBufAllocator alloc){
        return alloc.ioBuffer(guess(),guess());
      }
      @Override public int guess(){
        return 1;
      }
      @Override public void reset(      ChannelConfig config){
        numMessagesRead=0;
      }
      @Override public void incMessagesRead(      int numMessages){
        numMessagesRead+=numMessages;
      }
      @Override public void lastBytesRead(      int bytes){
        lastBytesRead=bytes;
      }
      @Override public int lastBytesRead(){
        return lastBytesRead;
      }
      @Override public void attemptedBytesRead(      int bytes){
        attemptedBytesRead=bytes;
      }
      @Override public int attemptedBytesRead(){
        return attemptedBytesRead;
      }
      @Override public boolean continueReading(){
        return numMessagesRead < numReads;
      }
      @Override public boolean continueReading(      UncheckedBooleanSupplier maybeMoreDataSupplier){
        return continueReading();
      }
      @Override public void readComplete(){
      }
    }
;
  }
}
