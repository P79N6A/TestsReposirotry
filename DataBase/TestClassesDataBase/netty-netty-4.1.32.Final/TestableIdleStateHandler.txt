private static class TestableIdleStateHandler extends IdleStateHandler {
  private Runnable task;
  private long delayInNanos;
  private long ticksInNanos;
  public TestableIdleStateHandler(  boolean observeOutput,  long readerIdleTime,  long writerIdleTime,  long allIdleTime,  TimeUnit unit){
    super(observeOutput,readerIdleTime,writerIdleTime,allIdleTime,unit);
  }
  public long delay(  TimeUnit unit){
    return unit.convert(delayInNanos,TimeUnit.NANOSECONDS);
  }
  public void run(){
    task.run();
  }
  public void tickRun(){
    tickRun(delayInNanos,TimeUnit.NANOSECONDS);
  }
  public void tickRun(  long delay,  TimeUnit unit){
    tick(delay,unit);
    run();
  }
  /** 
 * Advances the current ticker by the given amount.
 */
  public void tick(  long delay,  TimeUnit unit){
    ticksInNanos+=unit.toNanos(delay);
  }
  /** 
 * Returns  {@link #ticksInNanos()} in the given {@link TimeUnit}.
 */
  public long tick(  TimeUnit unit){
    return unit.convert(ticksInNanos(),TimeUnit.NANOSECONDS);
  }
  @Override long ticksInNanos(){
    return ticksInNanos;
  }
  @Override ScheduledFuture<?> schedule(  ChannelHandlerContext ctx,  Runnable task,  long delay,  TimeUnit unit){
    this.task=task;
    this.delayInNanos=unit.toNanos(delay);
    return null;
  }
}
