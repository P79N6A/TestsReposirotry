private static final class TimeoutTestItem extends TestItem {
  TimeoutTestItem(  String name,  ChannelHandler... clientHandlers){
    super(name,null,clientHandlers);
  }
  @Override protected void test() throws Exception {
    final long TIMEOUT=2000;
    for (    ChannelHandler h : clientHandlers) {
      if (h instanceof ProxyHandler) {
        ((ProxyHandler)h).setConnectTimeoutMillis(TIMEOUT);
      }
    }
    final FailureTestHandler testHandler=new FailureTestHandler();
    Bootstrap b=new Bootstrap();
    b.group(group);
    b.channel(NioSocketChannel.class);
    b.resolver(NoopAddressResolverGroup.INSTANCE);
    b.handler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ChannelPipeline p=ch.pipeline();
        p.addLast(clientHandlers);
        p.addLast(new LineBasedFrameDecoder(64));
        p.addLast(testHandler);
      }
    }
);
    ChannelFuture cf=b.connect(DESTINATION).channel().closeFuture();
    boolean finished=cf.await(TIMEOUT * 2,TimeUnit.MILLISECONDS);
    finished&=testHandler.latch.await(TIMEOUT * 2,TimeUnit.MILLISECONDS);
    logger.debug("Recorded exceptions: {}",testHandler.exceptions);
    assertProxyHandlers(false);
    assertThat(testHandler.exceptions.size(),is(1));
    Throwable e=testHandler.exceptions.poll();
    assertThat(e,is(instanceOf(ProxyConnectException.class)));
    assertThat(String.valueOf(e),containsString("timeout"));
    assertThat(finished,is(true));
  }
}
