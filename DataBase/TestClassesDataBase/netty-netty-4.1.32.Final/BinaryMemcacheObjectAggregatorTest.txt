/** 
 * Verifies the correct functionality of the  {@link BinaryMemcacheObjectAggregator}.
 */
public class BinaryMemcacheObjectAggregatorTest {
  private static final byte[] SET_REQUEST_WITH_CONTENT={(byte)0x80,0x01,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x6f,0x6f,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
  public static final int MAX_CONTENT_SIZE=2 << 10;
  private EmbeddedChannel channel;
  @Test public void shouldAggregateChunksOnDecode(){
    int smallBatchSize=2;
    channel=new EmbeddedChannel(new BinaryMemcacheRequestDecoder(smallBatchSize),new BinaryMemcacheObjectAggregator(MAX_CONTENT_SIZE));
    ByteBuf incoming=Unpooled.buffer();
    incoming.writeBytes(SET_REQUEST_WITH_CONTENT);
    channel.writeInbound(incoming);
    FullBinaryMemcacheRequest request=channel.readInbound();
    assertThat(request,instanceOf(FullBinaryMemcacheRequest.class));
    assertThat(request,notNullValue());
    assertThat(request.key(),notNullValue());
    assertThat(request.extras(),nullValue());
    assertThat(request.content().readableBytes(),is(8));
    assertThat(request.content().readByte(),is((byte)0x01));
    assertThat(request.content().readByte(),is((byte)0x02));
    request.release();
    assertThat(channel.readInbound(),nullValue());
    assertFalse(channel.finish());
  }
  @Test public void shouldRetainByteBufWhenAggregating(){
    channel=new EmbeddedChannel(new BinaryMemcacheRequestEncoder(),new BinaryMemcacheRequestDecoder(),new BinaryMemcacheObjectAggregator(MAX_CONTENT_SIZE));
    ByteBuf key=Unpooled.copiedBuffer("Netty",CharsetUtil.UTF_8);
    ByteBuf extras=Unpooled.copiedBuffer("extras",CharsetUtil.UTF_8);
    BinaryMemcacheRequest request=new DefaultBinaryMemcacheRequest(key,extras);
    DefaultMemcacheContent content1=new DefaultMemcacheContent(Unpooled.copiedBuffer("Netty",CharsetUtil.UTF_8));
    DefaultLastMemcacheContent content2=new DefaultLastMemcacheContent(Unpooled.copiedBuffer(" Rocks!",CharsetUtil.UTF_8));
    int totalBodyLength=key.readableBytes() + extras.readableBytes() + content1.content().readableBytes()+ content2.content().readableBytes();
    request.setTotalBodyLength(totalBodyLength);
    assertTrue(channel.writeOutbound(request,content1,content2));
    assertThat(channel.outboundMessages().size(),is(3));
    assertTrue(channel.writeInbound(channel.readOutbound(),channel.readOutbound(),channel.readOutbound()));
    FullBinaryMemcacheRequest read=channel.readInbound();
    assertThat(read,notNullValue());
    assertThat(read.key().toString(CharsetUtil.UTF_8),is("Netty"));
    assertThat(read.extras().toString(CharsetUtil.UTF_8),is("extras"));
    assertThat(read.content().toString(CharsetUtil.UTF_8),is("Netty Rocks!"));
    read.release();
    assertFalse(channel.finish());
  }
}
