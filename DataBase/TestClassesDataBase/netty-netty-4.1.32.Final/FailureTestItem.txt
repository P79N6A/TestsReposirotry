private static final class FailureTestItem extends TestItem {
  private final String expectedMessage;
  FailureTestItem(  String name,  InetSocketAddress destination,  String expectedMessage,  ChannelHandler... clientHandlers){
    super(name,destination,clientHandlers);
    this.expectedMessage=expectedMessage;
  }
  @Override protected void test() throws Exception {
    final FailureTestHandler testHandler=new FailureTestHandler();
    Bootstrap b=new Bootstrap();
    b.group(group);
    b.channel(NioSocketChannel.class);
    b.resolver(NoopAddressResolverGroup.INSTANCE);
    b.handler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ChannelPipeline p=ch.pipeline();
        p.addLast(clientHandlers);
        p.addLast(new LineBasedFrameDecoder(64));
        p.addLast(testHandler);
      }
    }
);
    boolean finished=b.connect(destination).channel().closeFuture().await(10,TimeUnit.SECONDS);
    finished&=testHandler.latch.await(10,TimeUnit.SECONDS);
    logger.debug("Recorded exceptions: {}",testHandler.exceptions);
    assertProxyHandlers(false);
    assertThat(testHandler.exceptions.size(),is(1));
    Throwable e=testHandler.exceptions.poll();
    assertThat(e,is(instanceOf(ProxyConnectException.class)));
    assertThat(String.valueOf(e),containsString(expectedMessage));
    assertThat(finished,is(true));
  }
}
