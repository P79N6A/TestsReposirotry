private static final class SuccessTestHandler extends SimpleChannelInboundHandler<Object> {
  final Queue<String> received=new LinkedBlockingQueue<String>();
  final Queue<Throwable> exceptions=new LinkedBlockingQueue<Throwable>();
  volatile int eventCount;
  private static void readIfNeeded(  ChannelHandlerContext ctx){
    if (!ctx.channel().config().isAutoRead()) {
      ctx.read();
    }
  }
  @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {
    ctx.writeAndFlush(Unpooled.copiedBuffer("A\n",CharsetUtil.US_ASCII));
    readIfNeeded(ctx);
  }
  @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {
    if (evt instanceof ProxyConnectionEvent) {
      eventCount++;
      if (eventCount == 1) {
        ctx.writeAndFlush(Unpooled.copiedBuffer("B\n",CharsetUtil.US_ASCII));
      }
      readIfNeeded(ctx);
    }
  }
  @Override protected void channelRead0(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    String str=((ByteBuf)msg).toString(CharsetUtil.US_ASCII);
    received.add(str);
    if ("2".equals(str)) {
      ctx.writeAndFlush(Unpooled.copiedBuffer("C\n",CharsetUtil.US_ASCII));
    }
    readIfNeeded(ctx);
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    exceptions.add(cause);
    ctx.close();
  }
}
