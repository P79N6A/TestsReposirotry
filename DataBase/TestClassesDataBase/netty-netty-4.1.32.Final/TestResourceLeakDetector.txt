private static final class TestResourceLeakDetector<T> extends ResourceLeakDetector<T> {
  private final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  TestResourceLeakDetector(  Class<?> resourceType,  int samplingInterval,  long maxActive){
    super(resourceType,samplingInterval,maxActive);
  }
  @Override protected void reportTracedLeak(  String resourceType,  String records){
    reportError(new AssertionError("Leak reported for '" + resourceType + "':\n"+ records));
  }
  @Override protected void reportUntracedLeak(  String resourceType){
    reportError(new AssertionError("Leak reported for '" + resourceType + '\''));
  }
  @Override protected void reportInstancesLeak(  String resourceType){
    reportError(new AssertionError("Leak reported for '" + resourceType + '\''));
  }
  private void reportError(  AssertionError cause){
    error.compareAndSet(null,cause);
  }
  void assertNoErrors() throws Throwable {
    ResourceLeakDetectorTest.assertNoErrors(error);
  }
}
