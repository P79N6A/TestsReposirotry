public class AbstractChannelPoolMapTest {
  private static final String LOCAL_ADDR_ID="test.id";
  @Test(expected=ConnectException.class) public void testMap() throws Exception {
    EventLoopGroup group=new LocalEventLoopGroup();
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    final Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    AbstractChannelPoolMap<EventLoop,SimpleChannelPool> poolMap=new AbstractChannelPoolMap<EventLoop,SimpleChannelPool>(){
      @Override protected SimpleChannelPool newPool(      EventLoop key){
        return new SimpleChannelPool(cb.clone(key),new TestChannelPoolHandler());
      }
    }
;
    EventLoop loop=group.next();
    assertFalse(poolMap.iterator().hasNext());
    assertEquals(0,poolMap.size());
    SimpleChannelPool pool=poolMap.get(loop);
    assertEquals(1,poolMap.size());
    assertTrue(poolMap.iterator().hasNext());
    assertSame(pool,poolMap.get(loop));
    assertTrue(poolMap.remove(loop));
    assertFalse(poolMap.remove(loop));
    assertFalse(poolMap.iterator().hasNext());
    assertEquals(0,poolMap.size());
    pool.acquire().syncUninterruptibly();
  }
private static final class TestChannelPoolHandler extends AbstractChannelPoolHandler {
    @Override public void channelCreated(    Channel ch) throws Exception {
    }
  }
}
