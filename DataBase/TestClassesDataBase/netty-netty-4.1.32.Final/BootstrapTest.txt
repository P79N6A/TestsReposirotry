public class BootstrapTest {
  private static final EventLoopGroup groupA=new DefaultEventLoopGroup(1);
  private static final EventLoopGroup groupB=new DefaultEventLoopGroup(1);
  private static final ChannelInboundHandler dummyHandler=new DummyHandler();
  @AfterClass public static void destroy(){
    groupA.shutdownGracefully();
    groupB.shutdownGracefully();
    groupA.terminationFuture().syncUninterruptibly();
    groupB.terminationFuture().syncUninterruptibly();
  }
  @Test(timeout=10000) public void testBindDeadLock() throws Exception {
    final Bootstrap bootstrapA=new Bootstrap();
    bootstrapA.group(groupA);
    bootstrapA.channel(LocalChannel.class);
    bootstrapA.handler(dummyHandler);
    final Bootstrap bootstrapB=new Bootstrap();
    bootstrapB.group(groupB);
    bootstrapB.channel(LocalChannel.class);
    bootstrapB.handler(dummyHandler);
    List<Future<?>> bindFutures=new ArrayList<Future<?>>();
    for (int i=0; i < 1024; i++) {
      bindFutures.add(groupA.next().submit(new Runnable(){
        @Override public void run(){
          bootstrapB.bind(LocalAddress.ANY);
        }
      }
));
      bindFutures.add(groupB.next().submit(new Runnable(){
        @Override public void run(){
          bootstrapA.bind(LocalAddress.ANY);
        }
      }
));
    }
    for (    Future<?> f : bindFutures) {
      f.sync();
    }
  }
  @Test(timeout=10000) public void testConnectDeadLock() throws Exception {
    final Bootstrap bootstrapA=new Bootstrap();
    bootstrapA.group(groupA);
    bootstrapA.channel(LocalChannel.class);
    bootstrapA.handler(dummyHandler);
    final Bootstrap bootstrapB=new Bootstrap();
    bootstrapB.group(groupB);
    bootstrapB.channel(LocalChannel.class);
    bootstrapB.handler(dummyHandler);
    List<Future<?>> bindFutures=new ArrayList<Future<?>>();
    for (int i=0; i < 1024; i++) {
      bindFutures.add(groupA.next().submit(new Runnable(){
        @Override public void run(){
          bootstrapB.connect(LocalAddress.ANY);
        }
      }
));
      bindFutures.add(groupB.next().submit(new Runnable(){
        @Override public void run(){
          bootstrapA.connect(LocalAddress.ANY);
        }
      }
));
    }
    for (    Future<?> f : bindFutures) {
      f.sync();
    }
  }
  @Test public void testLateRegisterSuccess() throws Exception {
    TestEventLoopGroup group=new TestEventLoopGroup();
    try {
      ServerBootstrap bootstrap=new ServerBootstrap();
      bootstrap.group(group);
      bootstrap.channel(LocalServerChannel.class);
      bootstrap.childHandler(new DummyHandler());
      bootstrap.localAddress(new LocalAddress("1"));
      ChannelFuture future=bootstrap.bind();
      assertFalse(future.isDone());
      group.promise.setSuccess();
      final BlockingQueue<Boolean> queue=new LinkedBlockingQueue<Boolean>();
      future.addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          queue.add(future.channel().eventLoop().inEventLoop(Thread.currentThread()));
          queue.add(future.isSuccess());
        }
      }
);
      assertTrue(queue.take());
      assertTrue(queue.take());
    }
  finally {
      group.shutdownGracefully();
      group.terminationFuture().sync();
    }
  }
  @Test public void testLateRegisterSuccessBindFailed() throws Exception {
    TestEventLoopGroup group=new TestEventLoopGroup();
    try {
      ServerBootstrap bootstrap=new ServerBootstrap();
      bootstrap.group(group);
      bootstrap.channelFactory(new ChannelFactory<ServerChannel>(){
        @Override public ServerChannel newChannel(){
          return new LocalServerChannel(){
            @Override public ChannelFuture bind(            SocketAddress localAddress){
              close();
              return newFailedFuture(new SocketException());
            }
            @Override public ChannelFuture bind(            SocketAddress localAddress,            ChannelPromise promise){
              close();
              return promise.setFailure(new SocketException());
            }
          }
;
        }
      }
);
      bootstrap.childHandler(new DummyHandler());
      bootstrap.localAddress(new LocalAddress("1"));
      ChannelFuture future=bootstrap.bind();
      assertFalse(future.isDone());
      group.promise.setSuccess();
      final BlockingQueue<Boolean> queue=new LinkedBlockingQueue<Boolean>();
      future.addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          queue.add(future.channel().eventLoop().inEventLoop(Thread.currentThread()));
          queue.add(future.isSuccess());
        }
      }
);
      assertTrue(queue.take());
      assertFalse(queue.take());
    }
  finally {
      group.shutdownGracefully();
      group.terminationFuture().sync();
    }
  }
  @Test(expected=ConnectException.class,timeout=10000) public void testLateRegistrationConnect() throws Exception {
    EventLoopGroup group=new DelayedEventLoopGroup();
    try {
      final Bootstrap bootstrapA=new Bootstrap();
      bootstrapA.group(group);
      bootstrapA.channel(LocalChannel.class);
      bootstrapA.handler(dummyHandler);
      bootstrapA.connect(LocalAddress.ANY).syncUninterruptibly();
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testAsyncResolutionSuccess() throws Exception {
    final Bootstrap bootstrapA=new Bootstrap();
    bootstrapA.group(groupA);
    bootstrapA.channel(LocalChannel.class);
    bootstrapA.resolver(new TestAddressResolverGroup(true));
    bootstrapA.handler(dummyHandler);
    final ServerBootstrap bootstrapB=new ServerBootstrap();
    bootstrapB.group(groupB);
    bootstrapB.channel(LocalServerChannel.class);
    bootstrapB.childHandler(dummyHandler);
    SocketAddress localAddress=bootstrapB.bind(LocalAddress.ANY).sync().channel().localAddress();
    bootstrapA.connect(localAddress).sync();
  }
  @Test public void testAsyncResolutionFailure() throws Exception {
    final Bootstrap bootstrapA=new Bootstrap();
    bootstrapA.group(groupA);
    bootstrapA.channel(LocalChannel.class);
    bootstrapA.resolver(new TestAddressResolverGroup(false));
    bootstrapA.handler(dummyHandler);
    final ServerBootstrap bootstrapB=new ServerBootstrap();
    bootstrapB.group(groupB);
    bootstrapB.channel(LocalServerChannel.class);
    bootstrapB.childHandler(dummyHandler);
    SocketAddress localAddress=bootstrapB.bind(LocalAddress.ANY).sync().channel().localAddress();
    ChannelFuture connectFuture=bootstrapA.connect(localAddress);
    assertThat(connectFuture.await(10000),is(true));
    assertThat(connectFuture.cause(),is(instanceOf(UnknownHostException.class)));
    assertThat(connectFuture.channel().isOpen(),is(false));
  }
  @Test public void testChannelFactoryFailureNotifiesPromise() throws Exception {
    final RuntimeException exception=new RuntimeException("newChannel crash");
    final Bootstrap bootstrap=new Bootstrap().handler(dummyHandler).group(groupA).channelFactory(new ChannelFactory<Channel>(){
      @Override public Channel newChannel(){
        throw exception;
      }
    }
);
    ChannelFuture connectFuture=bootstrap.connect(LocalAddress.ANY);
    assertThat(connectFuture.await(10000),is(true));
    assertThat(connectFuture.cause(),sameInstance((Throwable)exception));
    assertThat(connectFuture.channel(),is(not(nullValue())));
  }
private static final class DelayedEventLoopGroup extends DefaultEventLoop {
    @Override public ChannelFuture register(    final Channel channel,    final ChannelPromise promise){
      execute(new Runnable(){
        @Override public void run(){
          DelayedEventLoopGroup.super.register(channel,promise);
        }
      }
);
      return promise;
    }
  }
private static final class TestEventLoopGroup extends DefaultEventLoopGroup {
    ChannelPromise promise;
    TestEventLoopGroup(){
      super(1);
    }
    @Override public ChannelFuture register(    Channel channel){
      super.register(channel).syncUninterruptibly();
      promise=channel.newPromise();
      return promise;
    }
    @Override public ChannelFuture register(    ChannelPromise promise){
      throw new UnsupportedOperationException();
    }
    @Override public ChannelFuture register(    Channel channel,    final ChannelPromise promise){
      throw new UnsupportedOperationException();
    }
  }
@Sharable private static final class DummyHandler extends ChannelInboundHandlerAdapter {
  }
private static final class TestAddressResolverGroup extends AddressResolverGroup<SocketAddress> {
    private final boolean success;
    TestAddressResolverGroup(    boolean success){
      this.success=success;
    }
    @Override protected AddressResolver<SocketAddress> newResolver(    EventExecutor executor) throws Exception {
      return new AbstractAddressResolver<SocketAddress>(executor){
        @Override protected boolean doIsResolved(        SocketAddress address){
          return false;
        }
        @Override protected void doResolve(        final SocketAddress unresolvedAddress,        final Promise<SocketAddress> promise){
          executor().execute(new Runnable(){
            @Override public void run(){
              if (success) {
                promise.setSuccess(unresolvedAddress);
              }
 else {
                promise.setFailure(new UnknownHostException(unresolvedAddress.toString()));
              }
            }
          }
);
        }
        @Override protected void doResolveAll(        final SocketAddress unresolvedAddress,        final Promise<List<SocketAddress>> promise) throws Exception {
          executor().execute(new Runnable(){
            @Override public void run(){
              if (success) {
                promise.setSuccess(Collections.singletonList(unresolvedAddress));
              }
 else {
                promise.setFailure(new UnknownHostException(unresolvedAddress.toString()));
              }
            }
          }
);
        }
      }
;
    }
  }
}
