public class DnsNameResolverClientSubnetTest {
  @Ignore @Test public void testSubnetQuery() throws Exception {
    EventLoopGroup group=new NioEventLoopGroup(1);
    DnsNameResolver resolver=newResolver(group).build();
    try {
      Future<List<InetAddress>> future=resolver.resolveAll("www.google.es",Collections.<DnsRecord>singleton(new DefaultDnsOptEcsRecord(1024,24,SocketUtils.addressByName("157.88.0.0").getAddress())));
      for (      InetAddress address : future.syncUninterruptibly().getNow()) {
        System.err.println(address);
      }
    }
  finally {
      resolver.close();
      group.shutdownGracefully(0,0,TimeUnit.SECONDS);
    }
  }
  private static DnsNameResolverBuilder newResolver(  EventLoopGroup group){
    return new DnsNameResolverBuilder(group.next()).channelType(NioDatagramChannel.class).nameServerProvider(new SingletonDnsServerAddressStreamProvider(SocketUtils.socketAddress("8.8.8.8",53))).maxQueriesPerResolve(1).optResourceEnabled(false).ndots(1);
  }
}
