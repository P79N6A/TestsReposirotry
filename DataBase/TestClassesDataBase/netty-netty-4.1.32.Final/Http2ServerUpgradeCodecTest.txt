public class Http2ServerUpgradeCodecTest {
  @Test public void testUpgradeToHttp2ConnectionHandler(){
    testUpgrade(new Http2ConnectionHandlerBuilder().frameListener(new Http2FrameAdapter()).build());
  }
  @Test public void testUpgradeToHttp2FrameCodec(){
    testUpgrade(new Http2FrameCodecBuilder(true).build());
  }
  @Test public void testUpgradeToHttp2MultiplexCodec(){
    testUpgrade(new Http2MultiplexCodecBuilder(true,new HttpInboundHandler()).build());
  }
  private static void testUpgrade(  Http2ConnectionHandler handler){
    FullHttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.OPTIONS,"*");
    request.headers().set(HttpHeaderNames.HOST,"netty.io");
    request.headers().set(HttpHeaderNames.CONNECTION,"Upgrade, HTTP2-Settings");
    request.headers().set(HttpHeaderNames.UPGRADE,"h2c");
    request.headers().set("HTTP2-Settings","AAMAAABkAAQAAP__");
    EmbeddedChannel channel=new EmbeddedChannel(new ChannelInboundHandlerAdapter());
    ChannelHandlerContext ctx=channel.pipeline().firstContext();
    Http2ServerUpgradeCodec codec=new Http2ServerUpgradeCodec("connectionHandler",handler);
    assertTrue(codec.prepareUpgradeResponse(ctx,request,new DefaultHttpHeaders()));
    codec.upgradeTo(ctx,request);
    channel.flush();
    assertSame(handler,channel.pipeline().remove("connectionHandler"));
    assertNull(channel.pipeline().get(handler.getClass()));
    assertTrue(channel.finish());
    ByteBuf settingsBuffer=channel.readOutbound();
    assertNotNull(settingsBuffer);
    settingsBuffer.release();
    assertNull(channel.readOutbound());
  }
@ChannelHandler.Sharable private static final class HttpInboundHandler extends ChannelInboundHandlerAdapter {
  }
}
