public class SearchDomainTest {
  private DnsNameResolverBuilder newResolver(){
    return new DnsNameResolverBuilder(group.next()).channelType(NioDatagramChannel.class).nameServerProvider(new SingletonDnsServerAddressStreamProvider(dnsServer.localAddress())).maxQueriesPerResolve(1).optResourceEnabled(false).ndots(1);
  }
  private TestDnsServer dnsServer;
  private EventLoopGroup group;
  private DnsNameResolver resolver;
  @Before public void before(){
    group=new NioEventLoopGroup(1);
  }
  @After public void destroy(){
    if (dnsServer != null) {
      dnsServer.stop();
      dnsServer=null;
    }
    if (resolver != null) {
      resolver.close();
    }
    group.shutdownGracefully();
  }
  @Test public void testResolve() throws Exception {
    Set<String> domains=new HashSet<String>();
    domains.add("host1.foo.com");
    domains.add("host1");
    domains.add("host3");
    domains.add("host4.sub.foo.com");
    domains.add("host5.sub.foo.com");
    domains.add("host5.sub");
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(domains);
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Collections.singletonList("foo.com")).ndots(2).build();
    String a="host1.foo.com";
    String resolved=assertResolve(resolver,a);
    assertEquals(store.getAddress("host1.foo.com"),resolved);
    resolved=assertResolve(resolver,"host1");
    assertEquals(store.getAddress("host1.foo.com"),resolved);
    resolved=assertResolve(resolver,"host1.");
    assertEquals(store.getAddress("host1"),resolved);
    assertNotResolve(resolver,"host2");
    resolved=assertResolve(resolver,"host3");
    assertEquals(store.getAddress("host3"),resolved);
    resolved=assertResolve(resolver,"host3.");
    assertEquals(store.getAddress("host3"),resolved);
    resolved=assertResolve(resolver,"host4.sub");
    assertEquals(store.getAddress("host4.sub.foo.com"),resolved);
    resolved=assertResolve(resolver,"host5.sub");
    assertEquals(store.getAddress("host5.sub.foo.com"),resolved);
  }
  @Test public void testResolveAll() throws Exception {
    Set<String> domains=new HashSet<String>();
    domains.add("host1.foo.com");
    domains.add("host1");
    domains.add("host3");
    domains.add("host4.sub.foo.com");
    domains.add("host5.sub.foo.com");
    domains.add("host5.sub");
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(domains,2);
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Collections.singletonList("foo.com")).ndots(2).build();
    String a="host1.foo.com";
    List<String> resolved=assertResolveAll(resolver,a);
    assertEquals(store.getAddresses("host1.foo.com"),resolved);
    resolved=assertResolveAll(resolver,"host1");
    assertEquals(store.getAddresses("host1.foo.com"),resolved);
    resolved=assertResolveAll(resolver,"host1.");
    assertEquals(store.getAddresses("host1"),resolved);
    assertNotResolveAll(resolver,"host2");
    resolved=assertResolveAll(resolver,"host3");
    assertEquals(store.getAddresses("host3"),resolved);
    resolved=assertResolveAll(resolver,"host3.");
    assertEquals(store.getAddresses("host3"),resolved);
    resolved=assertResolveAll(resolver,"host4.sub");
    assertEquals(store.getAddresses("host4.sub.foo.com"),resolved);
    resolved=assertResolveAll(resolver,"host5.sub");
    assertEquals(store.getAddresses("host5.sub.foo.com"),resolved);
  }
  @Test public void testMultipleSearchDomain() throws Exception {
    Set<String> domains=new HashSet<String>();
    domains.add("host1.foo.com");
    domains.add("host2.bar.com");
    domains.add("host3.bar.com");
    domains.add("host3.foo.com");
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(domains);
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Arrays.asList("foo.com","bar.com")).build();
    String resolved=assertResolve(resolver,"host1");
    assertEquals(store.getAddress("host1.foo.com"),resolved);
    resolved=assertResolve(resolver,"host2");
    assertEquals(store.getAddress("host2.bar.com"),resolved);
    resolved=assertResolve(resolver,"host3");
    assertEquals(store.getAddress("host3.foo.com"),resolved);
    assertNotResolve(resolver,"host4");
  }
  @Test public void testSearchDomainWithNdots2() throws Exception {
    Set<String> domains=new HashSet<String>();
    domains.add("host1.sub.foo.com");
    domains.add("host2.sub.foo.com");
    domains.add("host2.sub");
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(domains);
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Collections.singleton("foo.com")).ndots(2).build();
    String resolved=assertResolve(resolver,"host1.sub");
    assertEquals(store.getAddress("host1.sub.foo.com"),resolved);
    resolved=assertResolve(resolver,"host2.sub");
    assertEquals(store.getAddress("host2.sub.foo.com"),resolved);
  }
  @Test public void testSearchDomainWithNdots0() throws Exception {
    Set<String> domains=new HashSet<String>();
    domains.add("host1");
    domains.add("host1.foo.com");
    domains.add("host2.foo.com");
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(domains);
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Collections.singleton("foo.com")).ndots(0).build();
    String resolved=assertResolve(resolver,"host1");
    assertEquals(store.getAddress("host1"),resolved);
    resolved=assertResolve(resolver,"host1.foo.com");
    assertEquals(store.getAddress("host1.foo.com"),resolved);
    assertNotResolve(resolver,"host2");
  }
  private static void assertNotResolve(  DnsNameResolver resolver,  String inetHost) throws InterruptedException {
    Future<InetAddress> fut=resolver.resolve(inetHost);
    assertTrue(fut.await(10,TimeUnit.SECONDS));
    assertFalse(fut.isSuccess());
  }
  private static void assertNotResolveAll(  DnsNameResolver resolver,  String inetHost) throws InterruptedException {
    Future<List<InetAddress>> fut=resolver.resolveAll(inetHost);
    assertTrue(fut.await(10,TimeUnit.SECONDS));
    assertFalse(fut.isSuccess());
  }
  private static String assertResolve(  DnsNameResolver resolver,  String inetHost) throws InterruptedException {
    Future<InetAddress> fut=resolver.resolve(inetHost);
    assertTrue(fut.await(10,TimeUnit.SECONDS));
    return fut.getNow().getHostAddress();
  }
  private static List<String> assertResolveAll(  DnsNameResolver resolver,  String inetHost) throws InterruptedException {
    Future<List<InetAddress>> fut=resolver.resolveAll(inetHost);
    assertTrue(fut.await(10,TimeUnit.SECONDS));
    List<String> list=new ArrayList<String>();
    for (    InetAddress addr : fut.getNow()) {
      list.add(addr.getHostAddress());
    }
    return list;
  }
  @Test public void testExceptionMsgContainsSearchDomain() throws Exception {
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(Collections.<String>emptySet());
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Collections.singletonList("foo.com")).ndots(1).build();
    Future<InetAddress> fut=resolver.resolve("unknown.hostname");
    assertTrue(fut.await(10,TimeUnit.SECONDS));
    assertFalse(fut.isSuccess());
    final Throwable cause=fut.cause();
    assertThat(cause,instanceOf(UnknownHostException.class));
    assertThat("search domain is included in UnknownHostException",cause.getMessage(),containsString("foo.com"));
  }
  @Test public void testExceptionMsgDoesNotContainSearchDomainIfNdotsIsNotReached() throws Exception {
    TestDnsServer.MapRecordStoreA store=new TestDnsServer.MapRecordStoreA(Collections.<String>emptySet());
    dnsServer=new TestDnsServer(store);
    dnsServer.start();
    resolver=newResolver().searchDomains(Collections.singletonList("foo.com")).ndots(2).build();
    Future<InetAddress> fut=resolver.resolve("unknown.hostname");
    assertTrue(fut.await(10,TimeUnit.SECONDS));
    assertFalse(fut.isSuccess());
    final Throwable cause=fut.cause();
    assertThat(cause,instanceOf(UnknownHostException.class));
    assertThat("search domain is included in UnknownHostException",cause.getMessage(),not(containsString("foo.com")));
  }
}
