@RunWith(Theories.class) public abstract class AbstractEncoderTest extends AbstractCompressionTest {
  protected EmbeddedChannel channel;
  /** 
 * Decompresses data with some external library.
 */
  protected abstract ByteBuf decompress(  ByteBuf compressed,  int originalLength) throws Exception ;
  @Before public abstract void initChannel();
  @After public void destroyChannel(){
    if (channel != null) {
      channel.finishAndReleaseAll();
      channel=null;
    }
  }
  @DataPoints("smallData") public static ByteBuf[] smallData(){
    ByteBuf heap=Unpooled.wrappedBuffer(BYTES_SMALL);
    ByteBuf direct=Unpooled.directBuffer(BYTES_SMALL.length);
    direct.writeBytes(BYTES_SMALL);
    return new ByteBuf[]{heap,direct};
  }
  @DataPoints("largeData") public static ByteBuf[] largeData(){
    ByteBuf heap=Unpooled.wrappedBuffer(BYTES_LARGE);
    ByteBuf direct=Unpooled.directBuffer(BYTES_LARGE.length);
    direct.writeBytes(BYTES_LARGE);
    return new ByteBuf[]{heap,direct};
  }
  @Theory public void testCompressionOfSmallChunkOfData(  @FromDataPoints("smallData") ByteBuf data) throws Exception {
    testCompression(data);
  }
  @Theory public void testCompressionOfLargeChunkOfData(  @FromDataPoints("largeData") ByteBuf data) throws Exception {
    testCompression(data);
  }
  @Theory public void testCompressionOfBatchedFlowOfData(  @FromDataPoints("largeData") ByteBuf data) throws Exception {
    testCompressionOfBatchedFlow(data);
  }
  protected void testCompression(  final ByteBuf data) throws Exception {
    final int dataLength=data.readableBytes();
    assertTrue(channel.writeOutbound(data.retain()));
    assertTrue(channel.finish());
    ByteBuf decompressed=readDecompressed(dataLength);
    assertEquals(data.resetReaderIndex(),decompressed);
    decompressed.release();
    data.release();
  }
  protected void testCompressionOfBatchedFlow(  final ByteBuf data) throws Exception {
    final int dataLength=data.readableBytes();
    int written=0, length=rand.nextInt(100);
    while (written + length < dataLength) {
      ByteBuf in=data.retainedSlice(written,length);
      assertTrue(channel.writeOutbound(in));
      written+=length;
      length=rand.nextInt(100);
    }
    ByteBuf in=data.retainedSlice(written,dataLength - written);
    assertTrue(channel.writeOutbound(in));
    assertTrue(channel.finish());
    ByteBuf decompressed=readDecompressed(dataLength);
    assertEquals(data,decompressed);
    decompressed.release();
    data.release();
  }
  protected ByteBuf readDecompressed(  final int dataLength) throws Exception {
    CompositeByteBuf compressed=Unpooled.compositeBuffer();
    ByteBuf msg;
    while ((msg=channel.readOutbound()) != null) {
      compressed.addComponent(true,msg);
    }
    return decompress(compressed,dataLength);
  }
}
