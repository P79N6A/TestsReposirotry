private static final class CheckOrderHandler extends ChannelHandlerAdapter {
  private final Queue<CheckOrderHandler> addedQueue;
  private final Queue<CheckOrderHandler> removedQueue;
  private final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  CheckOrderHandler(  Queue<CheckOrderHandler> addedQueue,  Queue<CheckOrderHandler> removedQueue){
    this.addedQueue=addedQueue;
    this.removedQueue=removedQueue;
  }
  @Override public void handlerAdded(  ChannelHandlerContext ctx) throws Exception {
    addedQueue.add(this);
    checkExecutor(ctx);
  }
  @Override public void handlerRemoved(  ChannelHandlerContext ctx) throws Exception {
    removedQueue.add(this);
    checkExecutor(ctx);
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    error.set(cause);
  }
  void checkError() throws Throwable {
    Throwable cause=error.get();
    if (cause != null) {
      throw cause;
    }
  }
  private void checkExecutor(  ChannelHandlerContext ctx){
    if (!ctx.executor().inEventLoop()) {
      error.set(new AssertionError());
    }
  }
}
