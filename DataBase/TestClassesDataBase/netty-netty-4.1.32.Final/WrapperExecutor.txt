private static final class WrapperExecutor extends AbstractEventExecutor {
  private final ExecutorService wrapped=Executors.newSingleThreadExecutor();
  @Override public boolean isShuttingDown(){
    return wrapped.isShutdown();
  }
  @Override public Future<?> shutdownGracefully(  long l,  long l2,  TimeUnit timeUnit){
    throw new IllegalStateException();
  }
  @Override public Future<?> terminationFuture(){
    throw new IllegalStateException();
  }
  @Override public void shutdown(){
    wrapped.shutdown();
  }
  @Override public List<Runnable> shutdownNow(){
    return wrapped.shutdownNow();
  }
  @Override public boolean isShutdown(){
    return wrapped.isShutdown();
  }
  @Override public boolean isTerminated(){
    return wrapped.isTerminated();
  }
  @Override public boolean awaitTermination(  long timeout,  TimeUnit unit) throws InterruptedException {
    return wrapped.awaitTermination(timeout,unit);
  }
  @Override public EventExecutorGroup parent(){
    return null;
  }
  @Override public boolean inEventLoop(  Thread thread){
    return false;
  }
  @Override public void execute(  Runnable command){
    wrapped.execute(command);
  }
}
