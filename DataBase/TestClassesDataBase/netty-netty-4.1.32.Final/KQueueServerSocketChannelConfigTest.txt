public class KQueueServerSocketChannelConfigTest {
  private static EventLoopGroup group;
  private static KQueueServerSocketChannel ch;
  @BeforeClass public static void before(){
    group=new KQueueEventLoopGroup(1);
    ServerBootstrap bootstrap=new ServerBootstrap();
    ch=(KQueueServerSocketChannel)bootstrap.group(group).channel(KQueueServerSocketChannel.class).childHandler(new ChannelInboundHandlerAdapter()).bind(new InetSocketAddress(0)).syncUninterruptibly().channel();
  }
  @AfterClass public static void after(){
    try {
      ch.close().syncUninterruptibly();
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Test public void testReusePort(){
    ch.config().setReusePort(false);
    assertFalse(ch.config().isReusePort());
    ch.config().setReusePort(true);
    assertTrue(ch.config().isReusePort());
  }
  @Test public void testAcceptFilter(){
    AcceptFilter currentFilter=ch.config().getAcceptFilter();
    assumeThat(currentFilter,not(AcceptFilter.PLATFORM_UNSUPPORTED));
    AcceptFilter af=new AcceptFilter("test","foo");
    ch.config().setAcceptFilter(af);
    assertEquals(af,ch.config().getAcceptFilter());
  }
  @Test public void testOptionsDoesNotThrow(){
    assertFalse(ch.config().getOptions().isEmpty());
  }
}
