public class WebSocketServerCompressionHandlerTest {
  @Test public void testNormalSuccess(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerCompressionHandler());
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION);
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> exts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertEquals(PERMESSAGE_DEFLATE_EXTENSION,exts.get(0).name());
    Assert.assertTrue(exts.get(0).parameters().isEmpty());
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testClientWindowSizeSuccess(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(new PerMessageDeflateServerExtensionHandshaker(6,false,10,false,false)));
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION + "; " + CLIENT_MAX_WINDOW);
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> exts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertEquals(PERMESSAGE_DEFLATE_EXTENSION,exts.get(0).name());
    Assert.assertEquals("10",exts.get(0).parameters().get(CLIENT_MAX_WINDOW));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testClientWindowSizeUnavailable(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(new PerMessageDeflateServerExtensionHandshaker(6,false,10,false,false)));
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION);
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> exts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertEquals(PERMESSAGE_DEFLATE_EXTENSION,exts.get(0).name());
    Assert.assertTrue(exts.get(0).parameters().isEmpty());
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testServerWindowSizeSuccess(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(new PerMessageDeflateServerExtensionHandshaker(6,true,15,false,false)));
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION + "; " + SERVER_MAX_WINDOW+ "=10");
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> exts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertEquals(PERMESSAGE_DEFLATE_EXTENSION,exts.get(0).name());
    Assert.assertEquals("10",exts.get(0).parameters().get(SERVER_MAX_WINDOW));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testServerWindowSizeDisable(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(new PerMessageDeflateServerExtensionHandshaker(6,false,15,false,false)));
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION + "; " + SERVER_MAX_WINDOW+ "=10");
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    Assert.assertFalse(res2.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testServerNoContext(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerCompressionHandler());
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION + "; " + SERVER_NO_CONTEXT);
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    Assert.assertFalse(res2.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testClientNoContext(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerCompressionHandler());
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION + "; " + CLIENT_NO_CONTEXT);
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> exts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertEquals(PERMESSAGE_DEFLATE_EXTENSION,exts.get(0).name());
    Assert.assertTrue(exts.get(0).parameters().isEmpty());
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
  @Test public void testServerWindowSizeDisableThenFallback(){
    EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(new PerMessageDeflateServerExtensionHandshaker(6,false,15,false,false)));
    HttpRequest req=newUpgradeRequest(PERMESSAGE_DEFLATE_EXTENSION + "; " + SERVER_MAX_WINDOW+ "=10, "+ PERMESSAGE_DEFLATE_EXTENSION);
    ch.writeInbound(req);
    HttpResponse res=newUpgradeResponse(null);
    ch.writeOutbound(res);
    HttpResponse res2=ch.readOutbound();
    List<WebSocketExtensionData> exts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
    Assert.assertEquals(PERMESSAGE_DEFLATE_EXTENSION,exts.get(0).name());
    Assert.assertTrue(exts.get(0).parameters().isEmpty());
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateDecoder.class));
    Assert.assertNotNull(ch.pipeline().get(PerMessageDeflateEncoder.class));
  }
}
