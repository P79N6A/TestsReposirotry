/** 
 * Tests common, abstract class functionality in  {@link WebSocketClientProtocolHandler}.
 */
public class WebSocketProtocolHandlerTest {
  @Test public void testPingFrame(){
    ByteBuf pingData=Unpooled.copiedBuffer("Hello, world",CharsetUtil.UTF_8);
    EmbeddedChannel channel=new EmbeddedChannel(new WebSocketProtocolHandler(){
    }
);
    PingWebSocketFrame inputMessage=new PingWebSocketFrame(pingData);
    assertFalse(channel.writeInbound(inputMessage));
    PongWebSocketFrame response=channel.readOutbound();
    assertEquals(pingData,response.content());
    pingData.release();
    assertFalse(channel.finish());
  }
  @Test public void testPongFrameDropFrameFalse(){
    EmbeddedChannel channel=new EmbeddedChannel(new WebSocketProtocolHandler(false){
    }
);
    PongWebSocketFrame pingResponse=new PongWebSocketFrame();
    assertTrue(channel.writeInbound(pingResponse));
    assertPropagatedInbound(pingResponse,channel);
    pingResponse.release();
    assertFalse(channel.finish());
  }
  @Test public void testPongFrameDropFrameTrue(){
    EmbeddedChannel channel=new EmbeddedChannel(new WebSocketProtocolHandler(true){
    }
);
    PongWebSocketFrame pingResponse=new PongWebSocketFrame();
    assertFalse(channel.writeInbound(pingResponse));
  }
  @Test public void testTextFrame(){
    EmbeddedChannel channel=new EmbeddedChannel(new WebSocketProtocolHandler(){
    }
);
    TextWebSocketFrame textFrame=new TextWebSocketFrame();
    assertTrue(channel.writeInbound(textFrame));
    assertPropagatedInbound(textFrame,channel);
    textFrame.release();
    assertFalse(channel.finish());
  }
  /** 
 * Asserts that a message was propagated inbound through the channel.
 */
  private static <T extends WebSocketFrame>void assertPropagatedInbound(  T message,  EmbeddedChannel channel){
    T propagatedResponse=channel.readInbound();
    assertEquals(message,propagatedResponse);
  }
}
