private static final class CallbackCheckHandler extends ChannelHandlerAdapter {
  final Promise<Boolean> addedHandler=ImmediateEventExecutor.INSTANCE.newPromise();
  final Promise<Boolean> removedHandler=ImmediateEventExecutor.INSTANCE.newPromise();
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  @Override public void handlerAdded(  ChannelHandlerContext ctx) throws Exception {
    if (!addedHandler.trySuccess(true)) {
      error.set(new AssertionError("handlerAdded(...) called multiple times: " + ctx.name()));
    }
 else     if (removedHandler.getNow() == Boolean.TRUE) {
      error.set(new AssertionError("handlerRemoved(...) called before handlerAdded(...): " + ctx.name()));
    }
  }
  @Override public void handlerRemoved(  ChannelHandlerContext ctx) throws Exception {
    if (!removedHandler.trySuccess(true)) {
      error.set(new AssertionError("handlerRemoved(...) called multiple times: " + ctx.name()));
    }
 else     if (addedHandler.getNow() == Boolean.FALSE) {
      error.set(new AssertionError("handlerRemoved(...) called before handlerAdded(...): " + ctx.name()));
    }
  }
}
