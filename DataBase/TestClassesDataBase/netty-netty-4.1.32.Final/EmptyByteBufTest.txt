public class EmptyByteBufTest {
  @Test public void testIsWritable(){
    EmptyByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    assertFalse(empty.isWritable());
    assertFalse(empty.isWritable(1));
  }
  @Test public void testWriteEmptyByteBuf(){
    EmptyByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    empty.writeBytes(Unpooled.EMPTY_BUFFER);
    ByteBuf nonEmpty=UnpooledByteBufAllocator.DEFAULT.buffer().writeBoolean(false);
    try {
      empty.writeBytes(nonEmpty);
      fail();
    }
 catch (    IndexOutOfBoundsException ignored) {
    }
 finally {
      nonEmpty.release();
    }
  }
  @Test public void testIsReadable(){
    EmptyByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    assertFalse(empty.isReadable());
    assertFalse(empty.isReadable(1));
  }
  @Test public void testArray(){
    EmptyByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    assertThat(empty.hasArray(),is(true));
    assertThat(empty.array().length,is(0));
    assertThat(empty.arrayOffset(),is(0));
  }
  @Test public void testNioBuffer(){
    EmptyByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    assertThat(empty.nioBufferCount(),is(1));
    assertThat(empty.nioBuffer().position(),is(0));
    assertThat(empty.nioBuffer().limit(),is(0));
    assertThat(empty.nioBuffer(),is(sameInstance(empty.nioBuffer())));
    assertThat(empty.nioBuffer(),is(sameInstance(empty.internalNioBuffer(empty.readerIndex(),0))));
  }
  @Test public void testMemoryAddress(){
    EmptyByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    if (empty.hasMemoryAddress()) {
      assertThat(empty.memoryAddress(),is(not(0L)));
    }
 else {
      try {
        empty.memoryAddress();
        fail();
      }
 catch (      UnsupportedOperationException ignored) {
      }
    }
  }
  @Test public void consistentEqualsAndHashCodeWithAbstractBytebuf(){
    ByteBuf empty=new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
    ByteBuf emptyAbstract=new UnpooledHeapByteBuf(UnpooledByteBufAllocator.DEFAULT,0,0);
    assertEquals(emptyAbstract,empty);
    assertEquals(emptyAbstract.hashCode(),empty.hashCode());
    assertEquals(EmptyByteBuf.EMPTY_BYTE_BUF_HASH_CODE,empty.hashCode());
    assertTrue(emptyAbstract.release());
    assertFalse(empty.release());
  }
}
