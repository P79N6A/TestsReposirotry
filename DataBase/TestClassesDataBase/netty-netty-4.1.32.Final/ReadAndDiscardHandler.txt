@Sharable private static class ReadAndDiscardHandler extends SimpleChannelInboundHandler<ByteBuf> {
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  private final boolean server;
  private final boolean autoRead;
  ReadAndDiscardHandler(  boolean server,  boolean autoRead){
    this.server=server;
    this.autoRead=autoRead;
  }
  @Override public void channelRead0(  ChannelHandlerContext ctx,  ByteBuf in) throws Exception {
    byte[] actual=new byte[in.readableBytes()];
    in.readBytes(actual);
    ctx.close();
  }
  @Override public void channelReadComplete(  ChannelHandlerContext ctx) throws Exception {
    try {
      ctx.flush();
    }
  finally {
      if (!autoRead) {
        ctx.read();
      }
    }
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    if (logger.isWarnEnabled()) {
      logger.warn("Unexpected exception from the " + (server ? "server" : "client") + " side",cause);
    }
    exception.compareAndSet(null,cause);
    ctx.close();
  }
}
