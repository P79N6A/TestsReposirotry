private static final class SniX509TrustmanagerFactory extends SimpleTrustManagerFactory {
  private final SNIServerName name;
  SniX509TrustmanagerFactory(  SNIServerName name){
    this.name=name;
  }
  @Override protected void engineInit(  KeyStore keyStore) throws Exception {
  }
  @Override protected void engineInit(  ManagerFactoryParameters managerFactoryParameters) throws Exception {
  }
  @Override protected TrustManager[] engineGetTrustManagers(){
    return new TrustManager[]{new X509ExtendedTrustManager(){
      @Override public void checkClientTrusted(      X509Certificate[] x509Certificates,      String s,      Socket socket) throws CertificateException {
        Assert.fail();
      }
      @Override public void checkServerTrusted(      X509Certificate[] x509Certificates,      String s,      Socket socket) throws CertificateException {
        Assert.fail();
      }
      @Override public void checkClientTrusted(      X509Certificate[] x509Certificates,      String s,      SSLEngine sslEngine) throws CertificateException {
        Assert.fail();
      }
      @Override public void checkServerTrusted(      X509Certificate[] x509Certificates,      String s,      SSLEngine sslEngine) throws CertificateException {
        assertSSLSession(sslEngine.getUseClientMode(),sslEngine.getHandshakeSession(),name);
      }
      @Override public void checkClientTrusted(      X509Certificate[] x509Certificates,      String s) throws CertificateException {
        Assert.fail();
      }
      @Override public void checkServerTrusted(      X509Certificate[] x509Certificates,      String s) throws CertificateException {
        Assert.fail();
      }
      @Override public X509Certificate[] getAcceptedIssuers(){
        return EmptyArrays.EMPTY_X509_CERTIFICATES;
      }
    }
};
  }
}
