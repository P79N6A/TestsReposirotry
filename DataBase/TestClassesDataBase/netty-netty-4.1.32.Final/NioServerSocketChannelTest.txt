public class NioServerSocketChannelTest extends AbstractNioChannelTest<NioServerSocketChannel> {
  @Test public void testCloseOnError() throws Exception {
    ServerSocketChannel jdkChannel=ServerSocketChannel.open();
    NioServerSocketChannel serverSocketChannel=new NioServerSocketChannel(jdkChannel);
    EventLoopGroup group=new NioEventLoopGroup(1);
    try {
      group.register(serverSocketChannel).syncUninterruptibly();
      serverSocketChannel.bind(new InetSocketAddress(0)).syncUninterruptibly();
      Assert.assertFalse(serverSocketChannel.closeOnReadError(new IOException()));
      Assert.assertTrue(serverSocketChannel.closeOnReadError(new IllegalArgumentException()));
      serverSocketChannel.close().syncUninterruptibly();
    }
  finally {
      group.shutdownGracefully();
    }
  }
  @Override protected NioServerSocketChannel newNioChannel(){
    return new NioServerSocketChannel();
  }
  @Override protected NetworkChannel jdkChannel(  NioServerSocketChannel channel){
    return channel.javaChannel();
  }
  @Override protected SocketOption<?> newInvalidOption(){
    return StandardSocketOptions.IP_MULTICAST_IF;
  }
}
