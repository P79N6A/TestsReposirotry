/** 
 * We only need to test methods defined by  {@link InternaLogger}.
 */
public abstract class AbstractInternalLoggerTest<T> {
  protected String loggerName="foo";
  protected T mockLog;
  protected InternalLogger logger;
  protected final Map<String,Object> result=new HashMap<String,Object>();
  @SuppressWarnings("unchecked") protected <V>V getResult(  String key){
    return (V)result.get(key);
  }
  @Test public void testName(){
    assertEquals(loggerName,logger.name());
  }
  @Test public void testAllLevel() throws Exception {
    testLevel(InternalLogLevel.TRACE);
    testLevel(InternalLogLevel.DEBUG);
    testLevel(InternalLogLevel.INFO);
    testLevel(InternalLogLevel.WARN);
    testLevel(InternalLogLevel.ERROR);
  }
  protected void testLevel(  InternalLogLevel level) throws Exception {
    result.clear();
    String format1="a={}", format2="a={}, b= {}", format3="a={}, b= {}, c= {}";
    String msg="a test message from Junit";
    Exception ex=new Exception("a test Exception from Junit");
    Class<InternalLogger> clazz=InternalLogger.class;
    String levelName=level.name(), logMethod=levelName.toLowerCase();
    Method isXXEnabled=clazz.getMethod("is" + levelName.charAt(0) + levelName.substring(1).toLowerCase()+ "Enabled");
    setLevelEnable(level,false);
    assertFalse((Boolean)isXXEnabled.invoke(logger));
    clazz.getMethod(logMethod,String.class).invoke(logger,msg);
    assertTrue(result.isEmpty());
    clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);
    assertTrue(result.isEmpty());
    clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);
    assertTrue(result.isEmpty());
    clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});
    assertTrue(result.isEmpty());
    clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});
    assertTrue(result.isEmpty());
    clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);
    assertTrue(result.isEmpty());
    clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);
    assertTrue(result.isEmpty());
    setLevelEnable(level,true);
    assertTrue((Boolean)isXXEnabled.invoke(logger));
    result.clear();
    clazz.getMethod(logMethod,String.class).invoke(logger,msg);
    assertResult(level,null,null,msg);
    result.clear();
    clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);
    assertResult(level,format1,null,msg);
    result.clear();
    clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);
    assertResult(level,format2,null,msg,msg);
    result.clear();
    clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});
    assertResult(level,format3,null,msg,msg,msg);
    result.clear();
    clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});
    assertResult(level,format3,ex,msg,msg,msg,ex);
    result.clear();
    clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);
    assertResult(level,null,ex,msg);
    result.clear();
    clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);
    assertResult(level,null,ex);
  }
  /** 
 * a just default code, you can override to fix  {@linkplain #mockLog} 
 */
  protected void assertResult(  InternalLogLevel level,  String format,  Throwable t,  Object... args){
    assertFalse(result.isEmpty());
  }
  protected abstract void setLevelEnable(  InternalLogLevel level,  boolean enable) throws Exception ;
}
