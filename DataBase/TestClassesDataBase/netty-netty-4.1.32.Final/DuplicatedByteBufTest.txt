/** 
 * Tests duplicated channel buffers
 */
public class DuplicatedByteBufTest extends AbstractByteBufTest {
  @Override protected ByteBuf newBuffer(  int length,  int maxCapacity){
    ByteBuf wrapped=Unpooled.buffer(length,maxCapacity);
    ByteBuf buffer=new DuplicatedByteBuf(wrapped);
    assertEquals(wrapped.writerIndex(),buffer.writerIndex());
    assertEquals(wrapped.readerIndex(),buffer.readerIndex());
    return buffer;
  }
  @Test(expected=NullPointerException.class) public void shouldNotAllowNullInConstructor(){
    new DuplicatedByteBuf(null);
  }
  @Test public void testIncreaseCapacityWrapped(){
    ByteBuf buffer=newBuffer(8);
    ByteBuf wrapped=buffer.unwrap();
    wrapped.writeByte(0);
    wrapped.readerIndex(wrapped.readerIndex() + 1);
    buffer.writerIndex(buffer.writerIndex() + 1);
    wrapped.capacity(wrapped.capacity() * 2);
    assertEquals((byte)0,buffer.readByte());
  }
  @Test public void testMarksInitialized(){
    ByteBuf wrapped=Unpooled.buffer(8);
    try {
      wrapped.writerIndex(6);
      wrapped.readerIndex(1);
      ByteBuf duplicate=new DuplicatedByteBuf(wrapped);
      duplicate.writerIndex(duplicate.writerIndex() + 1);
      duplicate.resetWriterIndex();
      assertEquals(wrapped.writerIndex(),duplicate.writerIndex());
      duplicate.readerIndex(duplicate.readerIndex() + 1);
      duplicate.resetReaderIndex();
      assertEquals(wrapped.readerIndex(),duplicate.readerIndex());
    }
  finally {
      wrapped.release();
    }
  }
}
