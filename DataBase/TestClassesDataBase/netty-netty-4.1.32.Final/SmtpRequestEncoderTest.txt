public class SmtpRequestEncoderTest {
  @Test public void testEncodeEhlo(){
    testEncode(SmtpRequests.ehlo("localhost"),"EHLO localhost\r\n");
  }
  @Test public void testEncodeHelo(){
    testEncode(SmtpRequests.helo("localhost"),"HELO localhost\r\n");
  }
  @Test public void testEncodeMail(){
    testEncode(SmtpRequests.mail("me@netty.io"),"MAIL FROM:<me@netty.io>\r\n");
  }
  @Test public void testEncodeMailNullSender(){
    testEncode(SmtpRequests.mail(null),"MAIL FROM:<>\r\n");
  }
  @Test public void testEncodeRcpt(){
    testEncode(SmtpRequests.rcpt("me@netty.io"),"RCPT TO:<me@netty.io>\r\n");
  }
  @Test public void testEncodeNoop(){
    testEncode(SmtpRequests.noop(),"NOOP\r\n");
  }
  @Test public void testEncodeRset(){
    testEncode(SmtpRequests.rset(),"RSET\r\n");
  }
  @Test public void testEncodeHelp(){
    testEncode(SmtpRequests.help(null),"HELP\r\n");
  }
  @Test public void testEncodeHelpWithArg(){
    testEncode(SmtpRequests.help("MAIL"),"HELP MAIL\r\n");
  }
  @Test public void testEncodeData(){
    testEncode(SmtpRequests.data(),"DATA\r\n");
  }
  @Test public void testEncodeDataAndContent(){
    EmbeddedChannel channel=new EmbeddedChannel(new SmtpRequestEncoder());
    assertTrue(channel.writeOutbound(SmtpRequests.data()));
    assertTrue(channel.writeOutbound(new DefaultSmtpContent(Unpooled.copiedBuffer("Subject: Test\r\n\r\n",CharsetUtil.US_ASCII))));
    assertTrue(channel.writeOutbound(new DefaultLastSmtpContent(Unpooled.copiedBuffer("Test\r\n",CharsetUtil.US_ASCII))));
    assertTrue(channel.finish());
    assertEquals("DATA\r\nSubject: Test\r\n\r\nTest\r\n.\r\n",getWrittenString(channel));
  }
  @Test(expected=EncoderException.class) public void testThrowsIfContentExpected(){
    EmbeddedChannel channel=new EmbeddedChannel(new SmtpRequestEncoder());
    assertTrue(channel.writeOutbound(SmtpRequests.data()));
    channel.writeOutbound(SmtpRequests.noop());
  }
  @Test public void testRsetClearsContentExpectedFlag(){
    EmbeddedChannel channel=new EmbeddedChannel(new SmtpRequestEncoder());
    assertTrue(channel.writeOutbound(SmtpRequests.data()));
    assertTrue(channel.writeOutbound(SmtpRequests.rset()));
    assertTrue(channel.writeOutbound(SmtpRequests.noop()));
    assertTrue(channel.finish());
    assertEquals("DATA\r\nRSET\r\nNOOP\r\n",getWrittenString(channel));
  }
  private static String getWrittenString(  EmbeddedChannel channel){
    ByteBuf written=Unpooled.buffer();
    for (; ; ) {
      ByteBuf buffer=channel.readOutbound();
      if (buffer == null) {
        break;
      }
      written.writeBytes(buffer);
      buffer.release();
    }
    String writtenString=written.toString(CharsetUtil.US_ASCII);
    written.release();
    return writtenString;
  }
  private static void testEncode(  SmtpRequest request,  String expected){
    EmbeddedChannel channel=new EmbeddedChannel(new SmtpRequestEncoder());
    assertTrue(channel.writeOutbound(request));
    assertTrue(channel.finish());
    ByteBuf buffer=channel.readOutbound();
    assertEquals(expected,buffer.toString(CharsetUtil.US_ASCII));
    buffer.release();
    assertNull(channel.readOutbound());
  }
}
