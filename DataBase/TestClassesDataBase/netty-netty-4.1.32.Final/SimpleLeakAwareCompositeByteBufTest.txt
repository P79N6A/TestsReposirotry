public class SimpleLeakAwareCompositeByteBufTest extends WrappedCompositeByteBufTest {
  private final Class<? extends ByteBuf> clazz=leakClass();
  private final Queue<NoopResourceLeakTracker<ByteBuf>> trackers=new ArrayDeque<NoopResourceLeakTracker<ByteBuf>>();
  @Override protected final WrappedCompositeByteBuf wrap(  CompositeByteBuf buffer){
    NoopResourceLeakTracker<ByteBuf> tracker=new NoopResourceLeakTracker<ByteBuf>();
    WrappedCompositeByteBuf leakAwareBuf=wrap(buffer,tracker);
    trackers.add(tracker);
    return leakAwareBuf;
  }
  protected SimpleLeakAwareCompositeByteBuf wrap(  CompositeByteBuf buffer,  ResourceLeakTracker<ByteBuf> tracker){
    return new SimpleLeakAwareCompositeByteBuf(buffer,tracker);
  }
  @Before @Override public void init(){
    super.init();
    trackers.clear();
  }
  @After @Override public void dispose(){
    super.dispose();
    for (; ; ) {
      NoopResourceLeakTracker<ByteBuf> tracker=trackers.poll();
      if (tracker == null) {
        break;
      }
      assertTrue(tracker.get());
    }
  }
  protected Class<? extends ByteBuf> leakClass(){
    return SimpleLeakAwareByteBuf.class;
  }
  @Test public void testWrapSlice(){
    assertWrapped(newBuffer(8).slice());
  }
  @Test public void testWrapSlice2(){
    assertWrapped(newBuffer(8).slice(0,1));
  }
  @Test public void testWrapReadSlice(){
    ByteBuf buffer=newBuffer(8);
    if (buffer.isReadable()) {
      assertWrapped(buffer.readSlice(1));
    }
 else {
      assertTrue(buffer.release());
    }
  }
  @Test public void testWrapRetainedSlice(){
    ByteBuf buffer=newBuffer(8);
    assertWrapped(buffer.retainedSlice());
    assertTrue(buffer.release());
  }
  @Test public void testWrapRetainedSlice2(){
    ByteBuf buffer=newBuffer(8);
    if (buffer.isReadable()) {
      assertWrapped(buffer.retainedSlice(0,1));
    }
    assertTrue(buffer.release());
  }
  @Test public void testWrapReadRetainedSlice(){
    ByteBuf buffer=newBuffer(8);
    if (buffer.isReadable()) {
      assertWrapped(buffer.readRetainedSlice(1));
    }
    assertTrue(buffer.release());
  }
  @Test public void testWrapDuplicate(){
    assertWrapped(newBuffer(8).duplicate());
  }
  @Test public void testWrapRetainedDuplicate(){
    ByteBuf buffer=newBuffer(8);
    assertWrapped(buffer.retainedDuplicate());
    assertTrue(buffer.release());
  }
  @Test public void testWrapReadOnly(){
    assertWrapped(newBuffer(8).asReadOnly());
  }
  protected final void assertWrapped(  ByteBuf buf){
    try {
      assertSame(clazz,buf.getClass());
    }
  finally {
      buf.release();
    }
  }
}
