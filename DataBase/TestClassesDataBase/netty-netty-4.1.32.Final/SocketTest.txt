public abstract class SocketTest<T extends Socket> {
  protected T socket;
  protected abstract T newSocket();
  @Before public void setup(){
    socket=newSocket();
  }
  @After public void tearDown() throws IOException {
    socket.close();
  }
  @Test public void testKeepAlive() throws Exception {
    assertFalse(socket.isKeepAlive());
    socket.setKeepAlive(true);
    assertTrue(socket.isKeepAlive());
  }
  @Test public void testTcpNoDelay() throws Exception {
    assertFalse(socket.isTcpNoDelay());
    socket.setTcpNoDelay(true);
    assertTrue(socket.isTcpNoDelay());
  }
  @Test public void testReceivedBufferSize() throws Exception {
    int size=socket.getReceiveBufferSize();
    int newSize=65535;
    assertTrue(size > 0);
    socket.setReceiveBufferSize(newSize);
    assertTrue(newSize <= socket.getReceiveBufferSize());
  }
  @Test public void testSendBufferSize() throws Exception {
    int size=socket.getSendBufferSize();
    int newSize=65535;
    assertTrue(size > 0);
    socket.setSendBufferSize(newSize);
    assertTrue(newSize <= socket.getSendBufferSize());
  }
  @Test public void testSoLinger() throws Exception {
    assertEquals(-1,socket.getSoLinger());
    socket.setSoLinger(10);
    assertEquals(10,socket.getSoLinger());
  }
  @Test public void testDoubleCloseDoesNotThrow() throws IOException {
    Socket socket=Socket.newSocketStream();
    socket.close();
    socket.close();
  }
  @Test public void testTrafficClass() throws IOException {
    final int value=0x08;
    socket.setTrafficClass(value);
    assertEquals(value,socket.getTrafficClass());
  }
}
