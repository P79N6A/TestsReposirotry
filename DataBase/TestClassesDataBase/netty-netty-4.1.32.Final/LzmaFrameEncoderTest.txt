public class LzmaFrameEncoderTest extends AbstractEncoderTest {
  @Override public void initChannel(){
    channel=new EmbeddedChannel(new LzmaFrameEncoder());
  }
  @Theory @Override public void testCompressionOfBatchedFlowOfData(  @FromDataPoints("smallData") ByteBuf data) throws Exception {
    testCompressionOfBatchedFlow(data);
  }
  @Override protected void testCompressionOfBatchedFlow(  final ByteBuf data) throws Exception {
    List<Integer> originalLengths=new ArrayList<Integer>();
    final int dataLength=data.readableBytes();
    int written=0, length=rand.nextInt(50);
    while (written + length < dataLength) {
      ByteBuf in=data.retainedSlice(written,length);
      assertTrue(channel.writeOutbound(in));
      written+=length;
      originalLengths.add(length);
      length=rand.nextInt(50);
    }
    length=dataLength - written;
    ByteBuf in=data.retainedSlice(written,dataLength - written);
    originalLengths.add(length);
    assertTrue(channel.writeOutbound(in));
    assertTrue(channel.finish());
    CompositeByteBuf decompressed=Unpooled.compositeBuffer();
    ByteBuf msg;
    int i=0;
    while ((msg=channel.readOutbound()) != null) {
      ByteBuf decompressedMsg=decompress(msg,originalLengths.get(i++));
      decompressed.addComponent(true,decompressedMsg);
    }
    assertEquals(originalLengths.size(),i);
    assertEquals(data,decompressed);
    decompressed.release();
    data.release();
  }
  @Override protected ByteBuf decompress(  ByteBuf compressed,  int originalLength) throws Exception {
    InputStream is=new ByteBufInputStream(compressed,true);
    LzmaInputStream lzmaIs=null;
    byte[] decompressed=new byte[originalLength];
    try {
      lzmaIs=new LzmaInputStream(is,new Decoder());
      int remaining=originalLength;
      while (remaining > 0) {
        int read=lzmaIs.read(decompressed,originalLength - remaining,remaining);
        if (read > 0) {
          remaining-=read;
        }
 else {
          break;
        }
      }
      assertEquals(-1,lzmaIs.read());
    }
  finally {
      if (lzmaIs != null) {
        lzmaIs.close();
      }
      if (is != null) {
        is.close();
      }
    }
    return Unpooled.wrappedBuffer(decompressed);
  }
}
