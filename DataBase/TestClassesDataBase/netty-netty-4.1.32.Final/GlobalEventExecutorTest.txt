public class GlobalEventExecutorTest {
  private static final GlobalEventExecutor e=GlobalEventExecutor.INSTANCE;
  @Before public void setUp() throws Exception {
    for (; ; ) {
      if (e.thread == null || !e.thread.isAlive()) {
        break;
      }
      Thread.sleep(50);
    }
  }
  @Test public void testAutomaticStartStop() throws Exception {
    final TestRunnable task=new TestRunnable(500);
    e.execute(task);
    Thread thread=e.thread;
    assertThat(thread,is(not(nullValue())));
    assertThat(thread.isAlive(),is(true));
    Thread.sleep(1500);
    assertThat(thread.isAlive(),is(false));
    assertThat(task.ran.get(),is(true));
    task.ran.set(false);
    e.execute(task);
    assertThat(e.thread,not(sameInstance(thread)));
    thread=e.thread;
    Thread.sleep(1500);
    assertThat(thread.isAlive(),is(false));
    assertThat(task.ran.get(),is(true));
  }
  @Test public void testScheduledTasks() throws Exception {
    TestRunnable task=new TestRunnable(0);
    ScheduledFuture<?> f=e.schedule(task,1500,TimeUnit.MILLISECONDS);
    f.sync();
    assertThat(task.ran.get(),is(true));
    Thread thread=e.thread;
    assertThat(thread,is(not(nullValue())));
    assertThat(thread.isAlive(),is(true));
    Thread.sleep(1500);
    assertThat(thread.isAlive(),is(false));
  }
  @Test(timeout=2000) public void testThreadGroup() throws InterruptedException {
    final ThreadGroup group=new ThreadGroup("group");
    final AtomicReference<ThreadGroup> capturedGroup=new AtomicReference<ThreadGroup>();
    final Thread thread=new Thread(group,new Runnable(){
      @Override public void run(){
        final Thread t=e.threadFactory.newThread(new Runnable(){
          @Override public void run(){
          }
        }
);
        capturedGroup.set(t.getThreadGroup());
      }
    }
);
    thread.start();
    thread.join();
    assertEquals(group,capturedGroup.get());
  }
private static final class TestRunnable implements Runnable {
    final AtomicBoolean ran=new AtomicBoolean();
    final long delay;
    TestRunnable(    long delay){
      this.delay=delay;
    }
    @Override public void run(){
      try {
        Thread.sleep(delay);
        ran.set(true);
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
}
