private static final class TestServerHandler extends TestHandler {
  private final int expectedBytes;
  private final Promise<Void> doneReadingPromise;
  final ByteBuf received=Unpooled.buffer();
  TestServerHandler(  boolean autoRead,  Promise<Void> doneReadingPromise,  int expectedBytes){
    super(autoRead);
    this.doneReadingPromise=doneReadingPromise;
    this.expectedBytes=expectedBytes;
  }
  @Override public void channelRead0(  ChannelHandlerContext ctx,  ByteBuf in) throws Exception {
    received.writeBytes(in);
    if (received.readableBytes() >= expectedBytes) {
      doneReadingPromise.setSuccess(null);
    }
  }
  @Override void handleException(  ChannelHandlerContext ctx,  Throwable cause){
    doneReadingPromise.tryFailure(cause);
    super.handleException(ctx,cause);
  }
  @Override public void channelInactive(  ChannelHandlerContext ctx) throws Exception {
    doneReadingPromise.tryFailure(new IllegalStateException("server closed!"));
    super.channelInactive(ctx);
  }
}
