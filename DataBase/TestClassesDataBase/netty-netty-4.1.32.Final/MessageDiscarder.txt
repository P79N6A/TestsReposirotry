/** 
 * Discards all received messages.
 */
private static class MessageDiscarder extends ChannelDuplexHandler {
  private final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  private volatile int inCnt;
  private volatile int outCnt;
  private volatile Thread t;
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    Thread t=this.t;
    if (t == null) {
      this.t=Thread.currentThread();
    }
 else {
      Assert.assertSame(t,Thread.currentThread());
    }
    int actual=(Integer)msg;
    int expected=inCnt++;
    Assert.assertEquals(expected,actual);
  }
  @Override public void write(  ChannelHandlerContext ctx,  Object msg,  ChannelPromise promise) throws Exception {
    Assert.assertSame(t,Thread.currentThread());
    int actual=(Integer)msg;
    int expected=outCnt++;
    Assert.assertEquals(expected,actual);
    ctx.write(msg,promise);
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    exception.compareAndSet(null,cause);
    super.exceptionCaught(ctx,cause);
  }
}
