/** 
 * This executor allows Netty and JMH to share a common executor. This is achieved by using  {@link DelegateHarnessExecutor#executor(EventLoop)}with the  {@link EventLoop} used by Netty.
 */
public static final class DelegateHarnessExecutor extends AbstractEventExecutor {
  private static EventLoop executor;
  private InternalLogger logger=InternalLoggerFactory.getInstance(DelegateHarnessExecutor.class);
  public DelegateHarnessExecutor(  int maxThreads,  String prefix){
    logger.debug("Using DelegateHarnessExecutor executor {}",this);
  }
  /** 
 * Set the executor (in the form of an  {@link EventLoop}) which JMH will use. <p> This must be called before JMH requires an executor to execute objects.
 * @param service Used as an executor by JMH to run benchmarks.
 */
  public static void executor(  EventLoop service){
    executor=service;
  }
  @Override public boolean inEventLoop(){
    return executor.inEventLoop();
  }
  @Override public boolean inEventLoop(  Thread thread){
    return executor.inEventLoop(thread);
  }
  @Override public Future<?> shutdownGracefully(  long quietPeriod,  long timeout,  TimeUnit unit){
    return executor.shutdownGracefully(quietPeriod,timeout,unit);
  }
  @Override public Future<?> terminationFuture(){
    return executor.terminationFuture();
  }
  @Override @Deprecated public void shutdown(){
    executor.shutdown();
  }
  @Override public boolean isShuttingDown(){
    return executor.isShuttingDown();
  }
  @Override public boolean isShutdown(){
    return executor.isShutdown();
  }
  @Override public boolean isTerminated(){
    return executor.isTerminated();
  }
  @Override public boolean awaitTermination(  long timeout,  TimeUnit unit){
    try {
      return executor.awaitTermination(timeout,unit);
    }
 catch (    InterruptedException e) {
      handleUnexpectedException(e);
    }
    return false;
  }
  @Override public void execute(  Runnable command){
    executor.execute(command);
  }
  @Override public <V>Promise<V> newPromise(){
    return executor.newPromise();
  }
  @Override public <V>ProgressivePromise<V> newProgressivePromise(){
    return executor.newProgressivePromise();
  }
}
