private abstract static class TestItem {
  final String name;
  final InetSocketAddress destination;
  final ChannelHandler[] clientHandlers;
  protected TestItem(  String name,  InetSocketAddress destination,  ChannelHandler... clientHandlers){
    this.name=name;
    this.destination=destination;
    this.clientHandlers=clientHandlers;
  }
  abstract void test() throws Exception ;
  protected void assertProxyHandlers(  boolean success){
    for (    ChannelHandler h : clientHandlers) {
      if (h instanceof ProxyHandler) {
        ProxyHandler ph=(ProxyHandler)h;
        String type=StringUtil.simpleClassName(ph);
        Future<Channel> f=ph.connectFuture();
        if (!f.isDone()) {
          logger.warn("{}: not done",type);
        }
 else         if (f.isSuccess()) {
          if (success) {
            logger.debug("{}: success",type);
          }
 else {
            logger.warn("{}: success",type);
          }
        }
 else {
          if (success) {
            logger.warn("{}: failure",type,f.cause());
          }
 else {
            logger.debug("{}: failure",type,f.cause());
          }
        }
      }
    }
    for (    ChannelHandler h : clientHandlers) {
      if (h instanceof ProxyHandler) {
        ProxyHandler ph=(ProxyHandler)h;
        assertThat(ph.connectFuture().isDone(),is(true));
        assertThat(ph.connectFuture().isSuccess(),is(success));
      }
    }
  }
  @Override public String toString(){
    return name;
  }
}
