@RunWith(PaxExam.class) public class OsgiBundleTest {
  private static final Pattern SLASH=Pattern.compile("/",Pattern.LITERAL);
  private static final String DEPENCIES_LINE="# dependencies";
  private static final String GROUP="io.netty";
  private static final Collection<String> BUNDLES;
static {
    final Set<String> artifacts=new HashSet<String>();
    final File f=new File("target/classes/META-INF/maven/dependencies.properties");
    try {
      final BufferedReader r=new BufferedReader(new FileReader(f));
      try {
        boolean haveDeps=false;
        while (true) {
          final String line=r.readLine();
          if (line == null) {
            break;
          }
          if (DEPENCIES_LINE.equals(line)) {
            haveDeps=true;
          }
 else           if (haveDeps && line.startsWith(GROUP)) {
            final String[] split=SLASH.split(line);
            if (split.length > 1) {
              artifacts.add(split[1]);
            }
          }
        }
      }
  finally {
        r.close();
      }
    }
 catch (    IOException e) {
      throw new ExceptionInInitializerError(e);
    }
    BUNDLES=artifacts;
  }
  @Configuration public final Option[] config(){
    final Collection<Option> options=new ArrayList<Option>();
    options.add(frameworkProperty(FRAMEWORK_BOOTDELEGATION).value("com.sun.*"));
    options.add(systemProperty("pax.exam.osgi.unresolved.fail").value("true"));
    options.addAll(Arrays.asList(junitBundles()));
    options.add(mavenBundle("com.barchart.udt","barchart-udt-bundle").versionAsInProject());
    options.add(wrappedBundle(mavenBundle("org.rxtx","rxtx").versionAsInProject()));
    for (    String name : BUNDLES) {
      options.add(mavenBundle(GROUP,name).versionAsInProject());
    }
    return options.toArray(new Option[0]);
  }
  @Test public void testResolvedBundles(){
    assertFalse("At least one bundle needs to be tested",BUNDLES.isEmpty());
  }
  @Test public void testCanLoadPlatformDependent(){
    assertFalse(PlatformDependent.hasUnsafe());
  }
}
