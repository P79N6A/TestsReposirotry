private static final class SuccessTestItem extends TestItem {
  private final int expectedEventCount;
  private final boolean autoRead;
  SuccessTestItem(  String name,  InetSocketAddress destination,  boolean autoRead,  ChannelHandler... clientHandlers){
    super(name,destination,clientHandlers);
    int expectedEventCount=0;
    for (    ChannelHandler h : clientHandlers) {
      if (h instanceof ProxyHandler) {
        expectedEventCount++;
      }
    }
    this.expectedEventCount=expectedEventCount;
    this.autoRead=autoRead;
  }
  @Override protected void test() throws Exception {
    final SuccessTestHandler testHandler=new SuccessTestHandler();
    Bootstrap b=new Bootstrap();
    b.group(group);
    b.channel(NioSocketChannel.class);
    b.option(ChannelOption.AUTO_READ,this.autoRead);
    b.resolver(NoopAddressResolverGroup.INSTANCE);
    b.handler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ChannelPipeline p=ch.pipeline();
        p.addLast(clientHandlers);
        p.addLast(new LineBasedFrameDecoder(64));
        p.addLast(testHandler);
      }
    }
);
    boolean finished=b.connect(destination).channel().closeFuture().await(10,TimeUnit.SECONDS);
    logger.debug("Received messages: {}",testHandler.received);
    if (testHandler.exceptions.isEmpty()) {
      logger.debug("No recorded exceptions on the client side.");
    }
 else {
      for (      Throwable t : testHandler.exceptions) {
        logger.debug("Recorded exception on the client side: {}",t);
      }
    }
    assertProxyHandlers(true);
    assertThat(testHandler.received.toArray(),is(new Object[]{"0","1","2","3"}));
    assertThat(testHandler.exceptions.toArray(),is(EmptyArrays.EMPTY_OBJECTS));
    assertThat(testHandler.eventCount,is(expectedEventCount));
    assertThat(finished,is(true));
  }
}
