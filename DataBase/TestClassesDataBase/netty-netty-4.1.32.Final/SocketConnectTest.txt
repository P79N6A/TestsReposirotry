public class SocketConnectTest extends AbstractSocketTest {
  @Test(timeout=30000) public void testLocalAddressAfterConnect() throws Throwable {
    run();
  }
  public void testLocalAddressAfterConnect(  ServerBootstrap sb,  Bootstrap cb) throws Throwable {
    Channel serverChannel=null;
    Channel clientChannel=null;
    try {
      final Promise<InetSocketAddress> localAddressPromise=ImmediateEventExecutor.INSTANCE.newPromise();
      serverChannel=sb.childHandler(new ChannelInboundHandlerAdapter(){
        @Override public void channelActive(        ChannelHandlerContext ctx) throws Exception {
          localAddressPromise.setSuccess((InetSocketAddress)ctx.channel().localAddress());
        }
      }
).bind().syncUninterruptibly().channel();
      clientChannel=cb.handler(new ChannelInboundHandlerAdapter()).register().syncUninterruptibly().channel();
      assertNull(clientChannel.localAddress());
      assertNull(clientChannel.remoteAddress());
      clientChannel.connect(serverChannel.localAddress()).syncUninterruptibly().channel();
      assertLocalAddress((InetSocketAddress)clientChannel.localAddress());
      assertNotNull(clientChannel.remoteAddress());
      assertLocalAddress(localAddressPromise.get());
    }
  finally {
      if (clientChannel != null) {
        clientChannel.close().syncUninterruptibly();
      }
      if (serverChannel != null) {
        serverChannel.close().syncUninterruptibly();
      }
    }
  }
  @Test(timeout=3000) public void testChannelEventsFiredWhenClosedDirectly() throws Throwable {
    run();
  }
  public void testChannelEventsFiredWhenClosedDirectly(  ServerBootstrap sb,  Bootstrap cb) throws Throwable {
    final BlockingQueue<Integer> events=new LinkedBlockingQueue<Integer>();
    Channel sc=null;
    Channel cc=null;
    try {
      sb.childHandler(new ChannelInboundHandlerAdapter());
      sc=sb.bind().syncUninterruptibly().channel();
      cb.handler(new ChannelInboundHandlerAdapter(){
        @Override public void channelActive(        ChannelHandlerContext ctx) throws Exception {
          events.add(0);
        }
        @Override public void channelInactive(        ChannelHandlerContext ctx) throws Exception {
          events.add(1);
        }
      }
);
      cc=cb.connect(sc.localAddress()).addListener(ChannelFutureListener.CLOSE).syncUninterruptibly().channel();
      assertEquals(0,events.take().intValue());
      assertEquals(1,events.take().intValue());
    }
  finally {
      if (cc != null) {
        cc.close();
      }
      if (sc != null) {
        sc.close();
      }
    }
  }
  private static void assertLocalAddress(  InetSocketAddress address){
    assertTrue(address.getPort() > 0);
    assertFalse(address.getAddress().isAnyLocalAddress());
  }
}
