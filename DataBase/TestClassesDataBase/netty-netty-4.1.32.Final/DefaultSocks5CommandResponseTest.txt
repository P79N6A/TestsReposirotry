public class DefaultSocks5CommandResponseTest {
  @Test public void testConstructorParamsAreNotNull(){
    try {
      new DefaultSocks5CommandResponse(null,Socks5AddressType.DOMAIN);
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
    try {
      new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,null);
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
  }
  /** 
 * Verifies content of the response when domain is not specified.
 */
  @Test public void testEmptyDomain(){
    Socks5CommandResponse socks5CmdResponse=new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.DOMAIN);
    assertNull(socks5CmdResponse.bndAddr());
    assertEquals(0,socks5CmdResponse.bndPort());
    ByteBuf buffer=Socks5CommonTestUtils.encodeServer(socks5CmdResponse);
    byte[] expected={0x05,0x00,0x00,0x03,0x00,0x00,0x00};
    assertByteBufEquals(expected,buffer);
    buffer.release();
  }
  /** 
 * Verifies content of the response when IPv4 address is specified.
 */
  @Test public void testIPv4Host(){
    Socks5CommandResponse socks5CmdResponse=new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.IPv4,"127.0.0.1",80);
    assertEquals("127.0.0.1",socks5CmdResponse.bndAddr());
    assertEquals(80,socks5CmdResponse.bndPort());
    ByteBuf buffer=Socks5CommonTestUtils.encodeServer(socks5CmdResponse);
    byte[] expected={0x05,0x00,0x00,0x01,0x7F,0x00,0x00,0x01,0x00,0x50};
    assertByteBufEquals(expected,buffer);
    buffer.release();
  }
  /** 
 * Verifies that empty domain is allowed Response.
 */
  @Test public void testEmptyBoundAddress(){
    Socks5CommandResponse socks5CmdResponse=new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.DOMAIN,"",80);
    assertEquals("",socks5CmdResponse.bndAddr());
    assertEquals(80,socks5CmdResponse.bndPort());
    ByteBuf buffer=Socks5CommonTestUtils.encodeServer(socks5CmdResponse);
    byte[] expected={0x05,0x00,0x00,0x03,0x00,0x00,0x50};
    assertByteBufEquals(expected,buffer);
    buffer.release();
  }
  /** 
 * Verifies that Response cannot be constructed with invalid IP.
 */
  @Test(expected=IllegalArgumentException.class) public void testInvalidBoundAddress(){
    new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.IPv4,"127.0.0",1000);
  }
  private static void assertByteBufEquals(  byte[] expected,  ByteBuf actual){
    byte[] actualBytes=new byte[actual.readableBytes()];
    actual.readBytes(actualBytes);
    assertEquals("Generated response has incorrect length",expected.length,actualBytes.length);
    assertArrayEquals("Generated response differs from expected",expected,actualBytes);
  }
  @Test public void testValidPortRange(){
    try {
      new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.IPv4,"127.0.0",0);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
    try {
      new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,Socks5AddressType.IPv4,"127.0.0",65536);
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
}
