public abstract class SctpLimitStreamsTest {
  @Test(timeout=5000) public void testSctpInitMaxstreams() throws Exception {
    EventLoopGroup loop=newEventLoopGroup();
    try {
      ServerBootstrap serverBootstrap=new ServerBootstrap();
      serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelInboundHandlerAdapter());
      Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelInboundHandlerAdapter());
      Channel serverChannel=serverBootstrap.bind().syncUninterruptibly().channel();
      SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).syncUninterruptibly().channel();
      assertEquals(1,clientChannel.association().maxOutboundStreams());
      assertEquals(1,clientChannel.association().maxInboundStreams());
      serverChannel.close().syncUninterruptibly();
      clientChannel.close().syncUninterruptibly();
    }
  finally {
      loop.shutdownGracefully();
    }
  }
  protected abstract EventLoopGroup newEventLoopGroup();
  protected abstract Class<? extends SctpChannel> clientClass();
  protected abstract Class<? extends SctpServerChannel> serverClass();
}
