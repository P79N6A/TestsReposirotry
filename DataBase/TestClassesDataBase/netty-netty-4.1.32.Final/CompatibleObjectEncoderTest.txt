public class CompatibleObjectEncoderTest {
  @Test public void testMultipleEncodeReferenceCount() throws IOException, ClassNotFoundException {
    EmbeddedChannel channel=new EmbeddedChannel(new CompatibleObjectEncoder());
    testEncode(channel,new TestSerializable(6,8));
    testEncode(channel,new TestSerializable(10,5));
    testEncode(channel,new TestSerializable(1,5));
    assertFalse(channel.finishAndReleaseAll());
  }
  private static void testEncode(  EmbeddedChannel channel,  TestSerializable original) throws IOException, ClassNotFoundException {
    channel.writeOutbound(original);
    Object o=channel.readOutbound();
    ByteBuf buf=(ByteBuf)o;
    ObjectInputStream ois=new ObjectInputStream(new ByteBufInputStream(buf));
    try {
      assertEquals(original,ois.readObject());
    }
  finally {
      buf.release();
      ois.close();
    }
  }
private static final class TestSerializable implements Serializable {
    private static final long serialVersionUID=2235771472534930360L;
    public final int x;
    public final int y;
    TestSerializable(    int x,    int y){
      this.x=x;
      this.y=y;
    }
    @Override public boolean equals(    Object o){
      if (!(o instanceof TestSerializable)) {
        return false;
      }
      TestSerializable rhs=(TestSerializable)o;
      return x == rhs.x && y == rhs.y;
    }
    @Override public int hashCode(){
      return 31 * (31 + x) + y;
    }
  }
}
