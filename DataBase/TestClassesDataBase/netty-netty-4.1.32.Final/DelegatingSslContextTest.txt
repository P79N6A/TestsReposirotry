public class DelegatingSslContextTest {
  private static final String[] EXPECTED_PROTOCOLS={SslUtils.PROTOCOL_TLS_V1_1};
  @Test public void testInitEngineOnNewEngine() throws Exception {
    SslContext delegating=newDelegatingSslContext();
    SSLEngine engine=delegating.newEngine(UnpooledByteBufAllocator.DEFAULT);
    Assert.assertArrayEquals(EXPECTED_PROTOCOLS,engine.getEnabledProtocols());
    engine=delegating.newEngine(UnpooledByteBufAllocator.DEFAULT,"localhost",9090);
    Assert.assertArrayEquals(EXPECTED_PROTOCOLS,engine.getEnabledProtocols());
  }
  @Test public void testInitEngineOnNewSslHandler() throws Exception {
    SslContext delegating=newDelegatingSslContext();
    SslHandler handler=delegating.newHandler(UnpooledByteBufAllocator.DEFAULT);
    Assert.assertArrayEquals(EXPECTED_PROTOCOLS,handler.engine().getEnabledProtocols());
    handler=delegating.newHandler(UnpooledByteBufAllocator.DEFAULT,"localhost",9090);
    Assert.assertArrayEquals(EXPECTED_PROTOCOLS,handler.engine().getEnabledProtocols());
  }
  private static SslContext newDelegatingSslContext() throws Exception {
    return new DelegatingSslContext(new JdkSslContext(SSLContext.getDefault(),false,ClientAuth.NONE)){
      @Override protected void initEngine(      SSLEngine engine){
        engine.setEnabledProtocols(EXPECTED_PROTOCOLS);
      }
    }
;
  }
}
