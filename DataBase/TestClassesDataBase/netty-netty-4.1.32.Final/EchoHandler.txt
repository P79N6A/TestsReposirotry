private static class EchoHandler extends SimpleChannelInboundHandler<ByteBuf> {
  volatile Channel channel;
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  volatile int counter;
  @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {
    channel=ctx.channel();
  }
  @Override public void channelRead0(  ChannelHandlerContext ctx,  ByteBuf in) throws Exception {
    byte[] actual=new byte[in.readableBytes()];
    in.readBytes(actual);
    int lastIdx=counter;
    for (int i=0; i < actual.length; i++) {
      assertEquals(data[i + lastIdx],actual[i]);
    }
    if (channel.parent() != null) {
      channel.write(Unpooled.wrappedBuffer(actual));
    }
    counter+=actual.length;
  }
  @Override public void channelReadComplete(  ChannelHandlerContext ctx) throws Exception {
    ctx.flush();
  }
  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {
    if (exception.compareAndSet(null,cause)) {
      cause.printStackTrace();
      ctx.close();
    }
  }
}
