public class FixedChannelPoolTest {
  private static final String LOCAL_ADDR_ID="test.id";
  private static EventLoopGroup group;
  @BeforeClass public static void createEventLoop(){
    group=new LocalEventLoopGroup();
  }
  @AfterClass public static void destroyEventLoop(){
    if (group != null) {
      group.shutdownGracefully();
    }
  }
  @Test public void testAcquire() throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    CountingChannelPoolHandler handler=new CountingChannelPoolHandler();
    ChannelPool pool=new FixedChannelPool(cb,handler,1,Integer.MAX_VALUE);
    Channel channel=pool.acquire().syncUninterruptibly().getNow();
    Future<Channel> future=pool.acquire();
    assertFalse(future.isDone());
    pool.release(channel).syncUninterruptibly();
    assertTrue(future.await(1,TimeUnit.SECONDS));
    Channel channel2=future.getNow();
    assertSame(channel,channel2);
    assertEquals(1,handler.channelCount());
    assertEquals(1,handler.acquiredCount());
    assertEquals(1,handler.releasedCount());
    sc.close().syncUninterruptibly();
    channel2.close().syncUninterruptibly();
  }
  @Test(expected=TimeoutException.class) public void testAcquireTimeout() throws Exception {
    testAcquireTimeout(500);
  }
  @Test(expected=TimeoutException.class) public void testAcquireWithZeroTimeout() throws Exception {
    testAcquireTimeout(0);
  }
  private static void testAcquireTimeout(  long timeoutMillis) throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    ChannelPoolHandler handler=new TestChannelPoolHandler();
    ChannelPool pool=new FixedChannelPool(cb,handler,ChannelHealthChecker.ACTIVE,AcquireTimeoutAction.FAIL,timeoutMillis,1,Integer.MAX_VALUE);
    Channel channel=pool.acquire().syncUninterruptibly().getNow();
    Future<Channel> future=pool.acquire();
    try {
      future.syncUninterruptibly();
    }
  finally {
      sc.close().syncUninterruptibly();
      channel.close().syncUninterruptibly();
    }
  }
  @Test public void testAcquireNewConnection() throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    ChannelPoolHandler handler=new TestChannelPoolHandler();
    ChannelPool pool=new FixedChannelPool(cb,handler,ChannelHealthChecker.ACTIVE,AcquireTimeoutAction.NEW,500,1,Integer.MAX_VALUE);
    Channel channel=pool.acquire().syncUninterruptibly().getNow();
    Channel channel2=pool.acquire().syncUninterruptibly().getNow();
    assertNotSame(channel,channel2);
    sc.close().syncUninterruptibly();
    channel.close().syncUninterruptibly();
    channel2.close().syncUninterruptibly();
  }
  /** 
 * Tests that the acquiredChannelCount is not added up several times for the same channel acquire request.
 * @throws Exception
 */
  @Test public void testAcquireNewConnectionWhen() throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    ChannelPoolHandler handler=new TestChannelPoolHandler();
    ChannelPool pool=new FixedChannelPool(cb,handler,1);
    Channel channel1=pool.acquire().syncUninterruptibly().getNow();
    channel1.close().syncUninterruptibly();
    pool.release(channel1);
    Channel channel2=pool.acquire().syncUninterruptibly().getNow();
    assertNotSame(channel1,channel2);
    sc.close().syncUninterruptibly();
    channel2.close().syncUninterruptibly();
  }
  @Test(expected=IllegalStateException.class) public void testAcquireBoundQueue() throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    ChannelPoolHandler handler=new TestChannelPoolHandler();
    ChannelPool pool=new FixedChannelPool(cb,handler,1,1);
    Channel channel=pool.acquire().syncUninterruptibly().getNow();
    Future<Channel> future=pool.acquire();
    assertFalse(future.isDone());
    try {
      pool.acquire().syncUninterruptibly();
    }
  finally {
      sc.close().syncUninterruptibly();
      channel.close().syncUninterruptibly();
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testReleaseDifferentPool() throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    ChannelPoolHandler handler=new TestChannelPoolHandler();
    ChannelPool pool=new FixedChannelPool(cb,handler,1,1);
    ChannelPool pool2=new FixedChannelPool(cb,handler,1,1);
    Channel channel=pool.acquire().syncUninterruptibly().getNow();
    try {
      pool2.release(channel).syncUninterruptibly();
    }
  finally {
      sc.close().syncUninterruptibly();
      channel.close().syncUninterruptibly();
    }
  }
  @Test public void testReleaseAfterClosePool() throws Exception {
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    FixedChannelPool pool=new FixedChannelPool(cb,new TestChannelPoolHandler(),2);
    final Future<Channel> acquire=pool.acquire();
    final Channel channel=acquire.get();
    pool.close();
    group.submit(new Runnable(){
      @Override public void run(){
      }
    }
).syncUninterruptibly();
    try {
      pool.release(channel).syncUninterruptibly();
      fail();
    }
 catch (    IllegalStateException e) {
      assertSame(FixedChannelPool.POOL_CLOSED_ON_RELEASE_EXCEPTION,e);
    }
    channel.closeFuture().syncUninterruptibly();
    assertFalse("Unexpected open channel",channel.isOpen());
    sc.close().syncUninterruptibly();
  }
  @Test public void testReleaseClosed(){
    LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
    Bootstrap cb=new Bootstrap();
    cb.remoteAddress(addr);
    cb.group(group).channel(LocalChannel.class);
    ServerBootstrap sb=new ServerBootstrap();
    sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
      @Override public void initChannel(      LocalChannel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
      }
    }
);
    Channel sc=sb.bind(addr).syncUninterruptibly().channel();
    FixedChannelPool pool=new FixedChannelPool(cb,new TestChannelPoolHandler(),2);
    Channel channel=pool.acquire().syncUninterruptibly().getNow();
    channel.close().syncUninterruptibly();
    pool.release(channel).syncUninterruptibly();
    sc.close().syncUninterruptibly();
  }
private static final class TestChannelPoolHandler extends AbstractChannelPoolHandler {
    @Override public void channelCreated(    Channel ch) throws Exception {
    }
  }
}
