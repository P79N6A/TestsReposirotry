/** 
 * Tests for  {@link DefaultHttp2HeadersEncoder}.
 */
public class DefaultHttp2HeadersEncoderTest {
  private DefaultHttp2HeadersEncoder encoder;
  @Before public void setup(){
    encoder=new DefaultHttp2HeadersEncoder(Http2HeadersEncoder.NEVER_SENSITIVE,newTestEncoder());
  }
  @Test public void encodeShouldSucceed() throws Http2Exception {
    Http2Headers headers=headers();
    ByteBuf buf=Unpooled.buffer();
    try {
      encoder.encodeHeaders(3,headers,buf);
      assertTrue(buf.writerIndex() > 0);
    }
  finally {
      buf.release();
    }
  }
  @Test(expected=StreamException.class) public void headersExceedMaxSetSizeShouldFail() throws Http2Exception {
    Http2Headers headers=headers();
    encoder.maxHeaderListSize(2);
    encoder.encodeHeaders(3,headers,Unpooled.buffer());
  }
  private static Http2Headers headers(){
    return new DefaultHttp2Headers().method(new AsciiString("GET")).add(new AsciiString("a"),new AsciiString("1")).add(new AsciiString("a"),new AsciiString("2"));
  }
}
