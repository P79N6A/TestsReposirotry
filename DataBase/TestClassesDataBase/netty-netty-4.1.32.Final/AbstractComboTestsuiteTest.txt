public abstract class AbstractComboTestsuiteTest<SB extends AbstractBootstrap<?,?>,CB extends AbstractBootstrap<?,?>> {
  private final Class<SB> sbClazz;
  private final Class<CB> cbClazz;
  protected final InternalLogger logger=InternalLoggerFactory.getInstance(getClass());
  protected volatile CB cb;
  protected volatile SB sb;
  protected AbstractComboTestsuiteTest(  Class<SB> sbClazz,  Class<CB> cbClazz){
    this.sbClazz=sbClazz;
    this.cbClazz=cbClazz;
  }
  protected abstract List<TestsuitePermutation.BootstrapComboFactory<SB,CB>> newFactories();
  protected List<ByteBufAllocator> newAllocators(){
    return TestsuitePermutation.allocator();
  }
  @Rule public final TestName testName=new TestName();
  protected void run() throws Throwable {
    List<TestsuitePermutation.BootstrapComboFactory<SB,CB>> combos=newFactories();
    for (    ByteBufAllocator allocator : newAllocators()) {
      int i=0;
      for (      TestsuitePermutation.BootstrapComboFactory<SB,CB> e : combos) {
        sb=e.newServerInstance();
        cb=e.newClientInstance();
        configure(sb,cb,allocator);
        logger.info(String.format("Running: %s %d of %d (%s + %s) with %s",testName.getMethodName(),++i,combos.size(),sb,cb,StringUtil.simpleClassName(allocator)));
        try {
          Method m=getClass().getMethod(TestUtils.testMethodName(testName),sbClazz,cbClazz);
          m.invoke(this,sb,cb);
        }
 catch (        InvocationTargetException ex) {
          throw ex.getCause();
        }
      }
    }
  }
  protected abstract void configure(  SB sb,  CB cb,  ByteBufAllocator allocator);
}
