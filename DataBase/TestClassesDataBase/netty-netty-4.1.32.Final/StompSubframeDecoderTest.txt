public class StompSubframeDecoderTest {
  private EmbeddedChannel channel;
  @Before public void setup() throws Exception {
    channel=new EmbeddedChannel(new StompSubframeDecoder());
  }
  @After public void teardown() throws Exception {
    assertFalse(channel.finish());
  }
  @Test public void testSingleFrameDecoding(){
    ByteBuf incoming=Unpooled.buffer();
    incoming.writeBytes(StompTestConstants.CONNECT_FRAME.getBytes());
    channel.writeInbound(incoming);
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertEquals(StompCommand.CONNECT,frame.command());
    StompContentSubframe content=channel.readInbound();
    assertSame(LastStompContentSubframe.EMPTY_LAST_CONTENT,content);
    content.release();
    Object o=channel.readInbound();
    assertNull(o);
  }
  @Test public void testSingleFrameWithBodyAndContentLength(){
    ByteBuf incoming=Unpooled.buffer();
    incoming.writeBytes(StompTestConstants.SEND_FRAME_2.getBytes());
    channel.writeInbound(incoming);
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertEquals(StompCommand.SEND,frame.command());
    StompContentSubframe content=channel.readInbound();
    assertTrue(content instanceof LastStompContentSubframe);
    String s=content.content().toString(UTF_8);
    assertEquals("hello, queue a!!!",s);
    content.release();
    assertNull(channel.readInbound());
  }
  @Test public void testSingleFrameWithBodyWithoutContentLength(){
    ByteBuf incoming=Unpooled.buffer();
    incoming.writeBytes(StompTestConstants.SEND_FRAME_1.getBytes());
    channel.writeInbound(incoming);
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertEquals(StompCommand.SEND,frame.command());
    StompContentSubframe content=channel.readInbound();
    assertTrue(content instanceof LastStompContentSubframe);
    String s=content.content().toString(UTF_8);
    assertEquals("hello, queue a!",s);
    content.release();
    assertNull(channel.readInbound());
  }
  @Test public void testSingleFrameChunked(){
    EmbeddedChannel channel=new EmbeddedChannel(new StompSubframeDecoder(10000,5));
    ByteBuf incoming=Unpooled.buffer();
    incoming.writeBytes(StompTestConstants.SEND_FRAME_2.getBytes());
    channel.writeInbound(incoming);
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertEquals(StompCommand.SEND,frame.command());
    StompContentSubframe content=channel.readInbound();
    String s=content.content().toString(UTF_8);
    assertEquals("hello",s);
    content.release();
    content=channel.readInbound();
    s=content.content().toString(UTF_8);
    assertEquals(", que",s);
    content.release();
    content=channel.readInbound();
    s=content.content().toString(UTF_8);
    assertEquals("ue a!",s);
    content.release();
    content=channel.readInbound();
    s=content.content().toString(UTF_8);
    assertEquals("!!",s);
    content.release();
    assertNull(channel.readInbound());
  }
  @Test public void testMultipleFramesDecoding(){
    ByteBuf incoming=Unpooled.buffer();
    incoming.writeBytes(StompTestConstants.CONNECT_FRAME.getBytes());
    incoming.writeBytes(StompTestConstants.CONNECTED_FRAME.getBytes());
    channel.writeInbound(incoming);
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertEquals(StompCommand.CONNECT,frame.command());
    StompContentSubframe content=channel.readInbound();
    assertSame(LastStompContentSubframe.EMPTY_LAST_CONTENT,content);
    content.release();
    StompHeadersSubframe frame2=channel.readInbound();
    assertNotNull(frame2);
    assertEquals(StompCommand.CONNECTED,frame2.command());
    StompContentSubframe content2=channel.readInbound();
    assertSame(LastStompContentSubframe.EMPTY_LAST_CONTENT,content2);
    content2.release();
    assertNull(channel.readInbound());
  }
  @Test public void testValidateHeadersDecodingDisabled(){
    ByteBuf invalidIncoming=Unpooled.copiedBuffer(FRAME_WITH_INVALID_HEADER.getBytes(US_ASCII));
    assertTrue(channel.writeInbound(invalidIncoming));
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertEquals(StompCommand.SEND,frame.command());
    assertTrue(frame.headers().contains("destination"));
    assertTrue(frame.headers().contains("content-type"));
    assertFalse(frame.headers().contains("current-time"));
    StompContentSubframe content=channel.readInbound();
    String s=content.content().toString(UTF_8);
    assertEquals("some body",s);
    content.release();
  }
  @Test public void testValidateHeadersDecodingEnabled(){
    channel=new EmbeddedChannel(new StompSubframeDecoder(true));
    ByteBuf invalidIncoming=Unpooled.copiedBuffer(FRAME_WITH_INVALID_HEADER.getBytes(US_ASCII));
    assertTrue(channel.writeInbound(invalidIncoming));
    StompHeadersSubframe frame=channel.readInbound();
    assertNotNull(frame);
    assertTrue(frame.decoderResult().isFailure());
    assertEquals("a header value or name contains a prohibited character ':', current-time:2000-01-01T00:00:00",frame.decoderResult().cause().getMessage());
  }
}
