public class PerFrameDeflateEncoderTest {
  private static final Random random=new Random();
  @Test public void testCompressedFrame(){
    EmbeddedChannel encoderChannel=new EmbeddedChannel(new PerFrameDeflateEncoder(9,15,false));
    EmbeddedChannel decoderChannel=new EmbeddedChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE));
    byte[] payload=new byte[300];
    random.nextBytes(payload);
    BinaryWebSocketFrame frame=new BinaryWebSocketFrame(true,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload));
    encoderChannel.writeOutbound(frame);
    BinaryWebSocketFrame compressedFrame=encoderChannel.readOutbound();
    assertNotNull(compressedFrame);
    assertNotNull(compressedFrame.content());
    assertTrue(compressedFrame instanceof BinaryWebSocketFrame);
    assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame.rsv());
    decoderChannel.writeInbound(compressedFrame.content());
    decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL);
    ByteBuf uncompressedPayload=decoderChannel.readInbound();
    assertEquals(300,uncompressedPayload.readableBytes());
    byte[] finalPayload=new byte[300];
    uncompressedPayload.readBytes(finalPayload);
    assertTrue(Arrays.equals(finalPayload,payload));
    uncompressedPayload.release();
  }
  @Test public void testAlreadyCompressedFrame(){
    EmbeddedChannel encoderChannel=new EmbeddedChannel(new PerFrameDeflateEncoder(9,15,false));
    byte[] payload=new byte[300];
    random.nextBytes(payload);
    BinaryWebSocketFrame frame=new BinaryWebSocketFrame(true,WebSocketExtension.RSV3 | WebSocketExtension.RSV1,Unpooled.wrappedBuffer(payload));
    encoderChannel.writeOutbound(frame);
    BinaryWebSocketFrame newFrame=encoderChannel.readOutbound();
    assertNotNull(newFrame);
    assertNotNull(newFrame.content());
    assertTrue(newFrame instanceof BinaryWebSocketFrame);
    assertEquals(WebSocketExtension.RSV3 | WebSocketExtension.RSV1,newFrame.rsv());
    assertEquals(300,newFrame.content().readableBytes());
    byte[] finalPayload=new byte[300];
    newFrame.content().readBytes(finalPayload);
    assertTrue(Arrays.equals(finalPayload,payload));
    newFrame.release();
  }
  @Test public void testFramementedFrame(){
    EmbeddedChannel encoderChannel=new EmbeddedChannel(new PerFrameDeflateEncoder(9,15,false));
    EmbeddedChannel decoderChannel=new EmbeddedChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE));
    byte[] payload1=new byte[100];
    random.nextBytes(payload1);
    byte[] payload2=new byte[100];
    random.nextBytes(payload2);
    byte[] payload3=new byte[100];
    random.nextBytes(payload3);
    BinaryWebSocketFrame frame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1));
    ContinuationWebSocketFrame frame2=new ContinuationWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload2));
    ContinuationWebSocketFrame frame3=new ContinuationWebSocketFrame(true,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload3));
    encoderChannel.writeOutbound(frame1);
    encoderChannel.writeOutbound(frame2);
    encoderChannel.writeOutbound(frame3);
    BinaryWebSocketFrame compressedFrame1=encoderChannel.readOutbound();
    ContinuationWebSocketFrame compressedFrame2=encoderChannel.readOutbound();
    ContinuationWebSocketFrame compressedFrame3=encoderChannel.readOutbound();
    assertNotNull(compressedFrame1);
    assertNotNull(compressedFrame2);
    assertNotNull(compressedFrame3);
    assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame1.rsv());
    assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame2.rsv());
    assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame3.rsv());
    assertFalse(compressedFrame1.isFinalFragment());
    assertFalse(compressedFrame2.isFinalFragment());
    assertTrue(compressedFrame3.isFinalFragment());
    decoderChannel.writeInbound(compressedFrame1.content());
    decoderChannel.writeInbound(Unpooled.wrappedBuffer(DeflateDecoder.FRAME_TAIL));
    ByteBuf uncompressedPayload1=decoderChannel.readInbound();
    byte[] finalPayload1=new byte[100];
    uncompressedPayload1.readBytes(finalPayload1);
    assertTrue(Arrays.equals(finalPayload1,payload1));
    uncompressedPayload1.release();
    decoderChannel.writeInbound(compressedFrame2.content());
    decoderChannel.writeInbound(Unpooled.wrappedBuffer(DeflateDecoder.FRAME_TAIL));
    ByteBuf uncompressedPayload2=decoderChannel.readInbound();
    byte[] finalPayload2=new byte[100];
    uncompressedPayload2.readBytes(finalPayload2);
    assertTrue(Arrays.equals(finalPayload2,payload2));
    uncompressedPayload2.release();
    decoderChannel.writeInbound(compressedFrame3.content());
    decoderChannel.writeInbound(Unpooled.wrappedBuffer(DeflateDecoder.FRAME_TAIL));
    ByteBuf uncompressedPayload3=decoderChannel.readInbound();
    byte[] finalPayload3=new byte[100];
    uncompressedPayload3.readBytes(finalPayload3);
    assertTrue(Arrays.equals(finalPayload3,payload3));
    uncompressedPayload3.release();
  }
}
