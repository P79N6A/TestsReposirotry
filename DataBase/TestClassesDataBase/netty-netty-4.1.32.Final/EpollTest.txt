public class EpollTest {
  @Test public void testIsAvailable(){
    assertTrue(Epoll.isAvailable());
  }
  @Test(timeout=5000) public void testEpollWaitWithTimeOutMinusOne() throws Exception {
    final EpollEventArray eventArray=new EpollEventArray(8);
    try {
      final FileDescriptor epoll=Native.newEpollCreate();
      final FileDescriptor timerFd=Native.newTimerFd();
      final FileDescriptor eventfd=Native.newEventFd();
      Native.epollCtlAdd(epoll.intValue(),timerFd.intValue(),Native.EPOLLIN);
      Native.epollCtlAdd(epoll.intValue(),eventfd.intValue(),Native.EPOLLIN);
      final AtomicReference<Throwable> ref=new AtomicReference<Throwable>();
      Thread t=new Thread(new Runnable(){
        @Override public void run(){
          try {
            assertEquals(1,Native.epollWait(epoll,eventArray,timerFd,-1,-1));
            assertEquals(eventfd.intValue(),eventArray.fd(0));
          }
 catch (          Throwable cause) {
            ref.set(cause);
          }
        }
      }
);
      t.start();
      t.join(1000);
      assertTrue(t.isAlive());
      Native.eventFdWrite(eventfd.intValue(),1);
      t.join();
      assertNull(ref.get());
      epoll.close();
      timerFd.close();
      eventfd.close();
    }
  finally {
      eventArray.free();
    }
  }
}
