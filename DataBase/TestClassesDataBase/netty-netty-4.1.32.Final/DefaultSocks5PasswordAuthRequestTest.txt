public class DefaultSocks5PasswordAuthRequestTest {
  @Test public void testConstructorParamsAreNotNull(){
    try {
      new DefaultSocks5PasswordAuthRequest(null,"");
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
    try {
      new DefaultSocks5PasswordAuthRequest("",null);
    }
 catch (    Exception e) {
      assertTrue(e instanceof NullPointerException);
    }
  }
  @Test public void testUsernameOrPasswordIsNotAscii(){
    try {
      new DefaultSocks5PasswordAuthRequest("παράδειγμα.δοκιμή","password");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
    try {
      new DefaultSocks5PasswordAuthRequest("username","παράδειγμα.δοκιμή");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
  @Test public void testUsernameOrPasswordLengthIsLessThan255Chars(){
    try {
      new DefaultSocks5PasswordAuthRequest("passwordpasswordpasswordpasswordpasswordpasswordpassword" + "passwordpasswordpasswordpasswordpasswordpasswordpassword" + "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword","password");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
    try {
      new DefaultSocks5PasswordAuthRequest("password","passwordpasswordpasswordpasswordpasswordpasswordpassword" + "passwordpasswordpasswordpasswordpasswordpasswordpassword" + "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword"+ "passwordpasswordpasswordpasswordpasswordpasswordpassword");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }
}
