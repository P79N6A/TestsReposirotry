public class OpenSslCachingKeyMaterialProviderTest extends OpenSslKeyMaterialProviderTest {
  @Override protected KeyManagerFactory newKeyManagerFactory() throws Exception {
    return new OpenSslCachingX509KeyManagerFactory(super.newKeyManagerFactory());
  }
  @Override protected OpenSslKeyMaterialProvider newMaterialProvider(  KeyManagerFactory factory,  String password){
    return new OpenSslCachingKeyMaterialProvider(ReferenceCountedOpenSslContext.chooseX509KeyManager(factory.getKeyManagers()),password);
  }
  @Override protected void assertRelease(  OpenSslKeyMaterial material){
    Assert.assertFalse(material.release());
  }
  @Test public void testMaterialCached() throws Exception {
    OpenSslKeyMaterialProvider provider=newMaterialProvider(newKeyManagerFactory(),PASSWORD);
    OpenSslKeyMaterial material=provider.chooseKeyMaterial(UnpooledByteBufAllocator.DEFAULT,EXISTING_ALIAS);
    assertNotNull(material);
    assertNotEquals(0,material.certificateChainAddress());
    assertNotEquals(0,material.privateKeyAddress());
    assertEquals(2,material.refCnt());
    OpenSslKeyMaterial material2=provider.chooseKeyMaterial(UnpooledByteBufAllocator.DEFAULT,EXISTING_ALIAS);
    assertNotNull(material2);
    assertEquals(material.certificateChainAddress(),material2.certificateChainAddress());
    assertEquals(material.privateKeyAddress(),material2.privateKeyAddress());
    assertEquals(3,material.refCnt());
    assertEquals(3,material2.refCnt());
    assertFalse(material.release());
    assertFalse(material2.release());
    provider.destroy();
    assertEquals(0,material.refCnt());
    assertEquals(0,material2.refCnt());
  }
}
