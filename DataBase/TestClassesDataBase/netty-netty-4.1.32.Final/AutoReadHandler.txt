private static final class AutoReadHandler extends ChannelInboundHandlerAdapter {
  private final AtomicInteger count=new AtomicInteger();
  private final CountDownLatch latch=new CountDownLatch(1);
  private final CountDownLatch latch2;
  private final boolean callRead;
  AutoReadHandler(  boolean callRead){
    this.callRead=callRead;
    latch2=new CountDownLatch(callRead ? 3 : 2);
  }
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    ReferenceCountUtil.release(msg);
    if (count.incrementAndGet() == 1) {
      ctx.channel().config().setAutoRead(false);
    }
    if (callRead) {
      ctx.read();
    }
  }
  @Override public void channelReadComplete(  ChannelHandlerContext ctx) throws Exception {
    latch.countDown();
    latch2.countDown();
  }
  void assertSingleRead() throws InterruptedException {
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertTrue(count.get() > 0);
  }
  void assertSingleReadSecondTry() throws InterruptedException {
    assertTrue(latch2.await(5,TimeUnit.SECONDS));
    assertEquals(callRead ? 3 : 2,count.get());
  }
}
