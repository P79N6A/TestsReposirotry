public class CompleteChannelFutureTest {
  @Test(expected=NullPointerException.class) public void shouldDisallowNullChannel(){
    new CompleteChannelFutureImpl(null);
  }
  @Test public void shouldNotDoAnythingOnRemove() throws Exception {
    Channel channel=Mockito.mock(Channel.class);
    CompleteChannelFuture future=new CompleteChannelFutureImpl(channel);
    ChannelFutureListener l=Mockito.mock(ChannelFutureListener.class);
    future.removeListener(l);
    Mockito.verifyNoMoreInteractions(l);
    Mockito.verifyZeroInteractions(channel);
  }
  @Test public void testConstantProperties() throws InterruptedException {
    Channel channel=Mockito.mock(Channel.class);
    CompleteChannelFuture future=new CompleteChannelFutureImpl(channel);
    assertSame(channel,future.channel());
    assertTrue(future.isDone());
    assertSame(future,future.await());
    assertTrue(future.await(1));
    assertTrue(future.await(1,TimeUnit.NANOSECONDS));
    assertSame(future,future.awaitUninterruptibly());
    assertTrue(future.awaitUninterruptibly(1));
    assertTrue(future.awaitUninterruptibly(1,TimeUnit.NANOSECONDS));
    Mockito.verifyZeroInteractions(channel);
  }
private static class CompleteChannelFutureImpl extends CompleteChannelFuture {
    CompleteChannelFutureImpl(    Channel channel){
      super(channel,null);
    }
    @Override public Throwable cause(){
      throw new Error();
    }
    @Override public boolean isSuccess(){
      throw new Error();
    }
    @Override public ChannelFuture sync() throws InterruptedException {
      throw new Error();
    }
    @Override public ChannelFuture syncUninterruptibly(){
      throw new Error();
    }
  }
}
