private static final class SniX509KeyManagerFactory extends KeyManagerFactory {
  SniX509KeyManagerFactory(  final SNIServerName name,  final KeyManagerFactory factory){
    super(new KeyManagerFactorySpi(){
      @Override protected void engineInit(      KeyStore keyStore,      char[] chars) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {
        factory.init(keyStore,chars);
      }
      @Override protected void engineInit(      ManagerFactoryParameters managerFactoryParameters) throws InvalidAlgorithmParameterException {
        factory.init(managerFactoryParameters);
      }
      @Override protected KeyManager[] engineGetKeyManagers(){
        List<KeyManager> managers=new ArrayList<KeyManager>();
        for (        final KeyManager km : factory.getKeyManagers()) {
          if (km instanceof X509ExtendedKeyManager) {
            managers.add(new X509ExtendedKeyManager(){
              @Override public String[] getClientAliases(              String s,              Principal[] principals){
                return ((X509ExtendedKeyManager)km).getClientAliases(s,principals);
              }
              @Override public String chooseClientAlias(              String[] strings,              Principal[] principals,              Socket socket){
                return ((X509ExtendedKeyManager)km).chooseClientAlias(strings,principals,socket);
              }
              @Override public String[] getServerAliases(              String s,              Principal[] principals){
                return ((X509ExtendedKeyManager)km).getServerAliases(s,principals);
              }
              @Override public String chooseServerAlias(              String s,              Principal[] principals,              Socket socket){
                return ((X509ExtendedKeyManager)km).chooseServerAlias(s,principals,socket);
              }
              @Override public X509Certificate[] getCertificateChain(              String s){
                return ((X509ExtendedKeyManager)km).getCertificateChain(s);
              }
              @Override public PrivateKey getPrivateKey(              String s){
                return ((X509ExtendedKeyManager)km).getPrivateKey(s);
              }
              @Override public String chooseEngineClientAlias(              String[] strings,              Principal[] principals,              SSLEngine sslEngine){
                return ((X509ExtendedKeyManager)km).chooseEngineClientAlias(strings,principals,sslEngine);
              }
              @Override public String chooseEngineServerAlias(              String s,              Principal[] principals,              SSLEngine sslEngine){
                SSLSession session=sslEngine.getHandshakeSession();
                assertSSLSession(sslEngine.getUseClientMode(),session,name);
                return ((X509ExtendedKeyManager)km).chooseEngineServerAlias(s,principals,sslEngine);
              }
            }
);
          }
 else {
            managers.add(km);
          }
        }
        return managers.toArray(new KeyManager[0]);
      }
    }
,factory.getProvider(),factory.getAlgorithm());
  }
}
