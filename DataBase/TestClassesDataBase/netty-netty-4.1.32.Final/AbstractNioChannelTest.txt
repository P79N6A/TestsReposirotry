public abstract class AbstractNioChannelTest<T extends AbstractNioChannel> {
  protected abstract T newNioChannel();
  protected abstract NetworkChannel jdkChannel(  T channel);
  protected abstract SocketOption<?> newInvalidOption();
  @Test public void testNioChannelOption() throws IOException {
    T channel=newNioChannel();
    try {
      NetworkChannel jdkChannel=jdkChannel(channel);
      ChannelOption<Boolean> option=NioChannelOption.of(StandardSocketOptions.SO_REUSEADDR);
      boolean value1=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);
      boolean value2=channel.config().getOption(option);
      assertEquals(value1,value2);
      channel.config().setOption(option,!value2);
      boolean value3=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);
      boolean value4=channel.config().getOption(option);
      assertEquals(value3,value4);
      assertNotEquals(value1,value4);
    }
  finally {
      channel.unsafe().closeForcibly();
    }
  }
  @Test public void testInvalidNioChannelOption(){
    T channel=newNioChannel();
    try {
      ChannelOption<?> option=NioChannelOption.of(newInvalidOption());
      assertFalse(channel.config().setOption(option,null));
      assertNull(channel.config().getOption(option));
    }
  finally {
      channel.unsafe().closeForcibly();
    }
  }
  @Test public void testGetOptions(){
    T channel=newNioChannel();
    try {
      channel.config().getOptions();
    }
  finally {
      channel.unsafe().closeForcibly();
    }
  }
}
