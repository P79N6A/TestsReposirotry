public class SslUtilsTest {
  @SuppressWarnings("deprecation") @Test public void testPacketLength() throws SSLException, NoSuchAlgorithmException {
    SSLEngine engineLE=newEngine();
    SSLEngine engineBE=newEngine();
    ByteBuffer empty=ByteBuffer.allocate(0);
    ByteBuffer cTOsLE=ByteBuffer.allocate(17 * 1024).order(ByteOrder.LITTLE_ENDIAN);
    ByteBuffer cTOsBE=ByteBuffer.allocate(17 * 1024);
    assertTrue(engineLE.wrap(empty,cTOsLE).bytesProduced() > 0);
    cTOsLE.flip();
    assertTrue(engineBE.wrap(empty,cTOsBE).bytesProduced() > 0);
    cTOsBE.flip();
    ByteBuf bufferLE=Unpooled.buffer().order(ByteOrder.LITTLE_ENDIAN).writeBytes(cTOsLE);
    ByteBuf bufferBE=Unpooled.buffer().writeBytes(cTOsBE);
    assertEquals(getEncryptedPacketLength(bufferBE,0),getEncryptedPacketLength(bufferLE,0));
    assertEquals(getEncryptedPacketLength(new ByteBuffer[]{bufferBE.nioBuffer()},0),getEncryptedPacketLength(new ByteBuffer[]{bufferLE.nioBuffer().order(ByteOrder.LITTLE_ENDIAN)},0));
  }
  private static SSLEngine newEngine() throws SSLException, NoSuchAlgorithmException {
    SSLEngine engine=SSLContext.getDefault().createSSLEngine();
    engine.setUseClientMode(true);
    engine.beginHandshake();
    return engine;
  }
  @Test public void testIsTLSv13Cipher(){
    assertTrue(SslUtils.isTLSv13Cipher("TLS_AES_128_GCM_SHA256"));
    assertTrue(SslUtils.isTLSv13Cipher("TLS_AES_256_GCM_SHA384"));
    assertTrue(SslUtils.isTLSv13Cipher("TLS_CHACHA20_POLY1305_SHA256"));
    assertTrue(SslUtils.isTLSv13Cipher("TLS_AES_128_CCM_SHA256"));
    assertTrue(SslUtils.isTLSv13Cipher("TLS_AES_128_CCM_8_SHA256"));
    assertFalse(SslUtils.isTLSv13Cipher("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"));
  }
}
