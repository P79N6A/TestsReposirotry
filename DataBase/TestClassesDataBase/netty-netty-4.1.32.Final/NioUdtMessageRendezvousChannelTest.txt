public class NioUdtMessageRendezvousChannelTest extends AbstractUdtTest {
  private static final InternalLogger log=InternalLoggerFactory.getInstance(NioUdtByteAcceptorChannelTest.class);
  /** 
 * verify channel meta data
 */
  @Test public void metadata() throws Exception {
    assertFalse(new NioUdtMessageRendezvousChannel().metadata().hasDisconnect());
  }
  /** 
 * verify basic echo message rendezvous FIXME: Re-enable after making it pass on Windows without unncessary tight loop. https://github.com/netty/netty/issues/2853
 */
  @Test(timeout=10 * 1000) @Ignore public void basicEcho() throws Exception {
    final int messageSize=64 * 1024;
    final int transferLimit=messageSize * 16;
    final Meter rate1=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,"send rate","bytes",TimeUnit.SECONDS);
    final Meter rate2=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,"send rate","bytes",TimeUnit.SECONDS);
    final InetSocketAddress addr1=UnitHelp.localSocketAddress();
    final InetSocketAddress addr2=UnitHelp.localSocketAddress();
    final EchoMessageHandler handler1=new EchoMessageHandler(rate1,messageSize);
    final EchoMessageHandler handler2=new EchoMessageHandler(rate2,messageSize);
    final NioEventLoopGroup group1=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.MESSAGE_PROVIDER);
    final NioEventLoopGroup group2=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.MESSAGE_PROVIDER);
    final Bootstrap boot1=new Bootstrap();
    boot1.group(group1).channelFactory(NioUdtProvider.MESSAGE_RENDEZVOUS).localAddress(addr1).remoteAddress(addr2).handler(handler1);
    final Bootstrap boot2=new Bootstrap();
    boot2.group(group2).channelFactory(NioUdtProvider.MESSAGE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2);
    final ChannelFuture connectFuture1=boot1.connect();
    final ChannelFuture connectFuture2=boot2.connect();
    while (handler1.meter().count() < transferLimit && handler2.meter().count() < transferLimit) {
      log.info("progress : {} {}",handler1.meter().count(),handler2.meter().count());
      Thread.sleep(1000);
    }
    connectFuture1.channel().close().sync();
    connectFuture2.channel().close().sync();
    log.info("handler1 : {}",handler1.meter().count());
    log.info("handler2 : {}",handler2.meter().count());
    assertTrue(handler1.meter().count() >= transferLimit);
    assertTrue(handler2.meter().count() >= transferLimit);
    assertEquals(handler1.meter().count(),handler2.meter().count());
    group1.shutdownGracefully();
    group2.shutdownGracefully();
    group1.terminationFuture().sync();
    group2.terminationFuture().sync();
  }
}
