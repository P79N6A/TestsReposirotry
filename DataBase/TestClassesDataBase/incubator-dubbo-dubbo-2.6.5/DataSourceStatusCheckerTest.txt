public class DataSourceStatusCheckerTest {
  private DataSourceStatusChecker dataSourceStatusChecker;
  @Mock private ApplicationContext applicationContext;
  @Before public void setUp() throws Exception {
    initMocks(this);
    this.dataSourceStatusChecker=new DataSourceStatusChecker();
    new ServiceBean<Object>().setApplicationContext(applicationContext);
  }
  @Test public void testWithoutApplicationContext(){
    Status status=dataSourceStatusChecker.check();
    assertThat(status.getLevel(),is(Status.Level.UNKNOWN));
  }
  @Test public void testWithoutDatasource(){
    Map<String,DataSource> map=new HashMap<String,DataSource>();
    given(applicationContext.getBeansOfType(eq(DataSource.class),anyBoolean(),anyBoolean())).willReturn(map);
    Status status=dataSourceStatusChecker.check();
    assertThat(status.getLevel(),is(Status.Level.UNKNOWN));
  }
  @Test public void testWithDatasourceHasNextResult() throws SQLException {
    Map<String,DataSource> map=new HashMap<String,DataSource>();
    DataSource dataSource=mock(DataSource.class);
    Connection connection=mock(Connection.class,Answers.RETURNS_DEEP_STUBS);
    given(dataSource.getConnection()).willReturn(connection);
    given(connection.getMetaData().getTypeInfo().next()).willReturn(true);
    map.put("mockDatabase",dataSource);
    given(applicationContext.getBeansOfType(eq(DataSource.class),anyBoolean(),anyBoolean())).willReturn(map);
    Status status=dataSourceStatusChecker.check();
    assertThat(status.getLevel(),is(Status.Level.OK));
  }
  @Test public void testWithDatasourceNotHasNextResult() throws SQLException {
    Map<String,DataSource> map=new HashMap<String,DataSource>();
    DataSource dataSource=mock(DataSource.class);
    Connection connection=mock(Connection.class,Answers.RETURNS_DEEP_STUBS);
    given(dataSource.getConnection()).willReturn(connection);
    given(connection.getMetaData().getTypeInfo().next()).willReturn(false);
    map.put("mockDatabase",dataSource);
    given(applicationContext.getBeansOfType(eq(DataSource.class),anyBoolean(),anyBoolean())).willReturn(map);
    Status status=dataSourceStatusChecker.check();
    assertThat(status.getLevel(),is(Status.Level.ERROR));
  }
}
