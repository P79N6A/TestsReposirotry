/** 
 * ForkingClusterInvokerTest
 */
@SuppressWarnings("unchecked") public class ForkingClusterInvokerTest {
  List<Invoker<ForkingClusterInvokerTest>> invokers=new ArrayList<Invoker<ForkingClusterInvokerTest>>();
  URL url=URL.valueOf("test://test:11/test?forks=2");
  Invoker<ForkingClusterInvokerTest> invoker1=mock(Invoker.class);
  Invoker<ForkingClusterInvokerTest> invoker2=mock(Invoker.class);
  Invoker<ForkingClusterInvokerTest> invoker3=mock(Invoker.class);
  RpcInvocation invocation=new RpcInvocation();
  Directory<ForkingClusterInvokerTest> dic;
  Result result=new RpcResult();
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
    dic=mock(Directory.class);
    given(dic.getUrl()).willReturn(url);
    given(dic.list(invocation)).willReturn(invokers);
    given(dic.getInterface()).willReturn(ForkingClusterInvokerTest.class);
    invocation.setMethodName("method1");
    invokers.add(invoker1);
    invokers.add(invoker2);
    invokers.add(invoker3);
  }
  private void resetInvokerToException(){
    given(invoker1.invoke(invocation)).willThrow(new RuntimeException());
    given(invoker1.getUrl()).willReturn(url);
    given(invoker1.isAvailable()).willReturn(true);
    given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);
    given(invoker2.invoke(invocation)).willThrow(new RuntimeException());
    given(invoker2.getUrl()).willReturn(url);
    given(invoker2.isAvailable()).willReturn(true);
    given(invoker2.getInterface()).willReturn(ForkingClusterInvokerTest.class);
    given(invoker3.invoke(invocation)).willThrow(new RuntimeException());
    given(invoker3.getUrl()).willReturn(url);
    given(invoker3.isAvailable()).willReturn(true);
    given(invoker3.getInterface()).willReturn(ForkingClusterInvokerTest.class);
  }
  private void resetInvokerToNoException(){
    given(invoker1.invoke(invocation)).willReturn(result);
    given(invoker1.getUrl()).willReturn(url);
    given(invoker1.isAvailable()).willReturn(true);
    given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);
    given(invoker2.invoke(invocation)).willReturn(result);
    given(invoker2.getUrl()).willReturn(url);
    given(invoker2.isAvailable()).willReturn(true);
    given(invoker2.getInterface()).willReturn(ForkingClusterInvokerTest.class);
    given(invoker3.invoke(invocation)).willReturn(result);
    given(invoker3.getUrl()).willReturn(url);
    given(invoker3.isAvailable()).willReturn(true);
    given(invoker3.getInterface()).willReturn(ForkingClusterInvokerTest.class);
  }
  @Test public void testInvokeException(){
    resetInvokerToException();
    ForkingClusterInvoker<ForkingClusterInvokerTest> invoker=new ForkingClusterInvoker<ForkingClusterInvokerTest>(dic);
    try {
      invoker.invoke(invocation);
      Assert.fail();
    }
 catch (    RpcException expected) {
      assertThat(expected.getMessage().contains("Failed to forking invoke provider"),is(true));
      assertFalse(expected.getCause() instanceof RpcException);
    }
  }
  @Test public void testClearRpcContext(){
    resetInvokerToException();
    ForkingClusterInvoker<ForkingClusterInvokerTest> invoker=new ForkingClusterInvoker<ForkingClusterInvokerTest>(dic);
    String attachKey="attach";
    String attachValue="value";
    RpcContext.getContext().setAttachment(attachKey,attachValue);
    Map<String,String> attachments=RpcContext.getContext().getAttachments();
    assertThat("set attachment failed!",attachments != null && attachments.size() == 1,is(true));
    try {
      invoker.invoke(invocation);
      Assert.fail();
    }
 catch (    RpcException expected) {
      assertThat(expected.getMessage().contains("Failed to forking invoke provider"),is(true));
      assertFalse(expected.getCause() instanceof RpcException);
    }
    Map<String,String> afterInvoke=RpcContext.getContext().getAttachments();
    assertThat(afterInvoke != null && afterInvoke.size() == 0,is(true));
  }
  @Test() public void testInvokeNoException(){
    resetInvokerToNoException();
    ForkingClusterInvoker<ForkingClusterInvokerTest> invoker=new ForkingClusterInvoker<ForkingClusterInvokerTest>(dic);
    Result ret=invoker.invoke(invocation);
    assertSame(result,ret);
  }
}
