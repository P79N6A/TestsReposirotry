@RunWith(Parameterized.class) public class LoggerTest {
  @Parameterized.Parameters public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{JclLoggerAdapter.class},{JdkLoggerAdapter.class},{Log4jLoggerAdapter.class},{Slf4jLoggerAdapter.class}});
  }
  private Logger logger;
  public LoggerTest(  Class<? extends LoggerAdapter> loggerAdapter) throws Exception {
    LoggerAdapter adapter=loggerAdapter.newInstance();
    adapter.setLevel(Level.ALL);
    this.logger=adapter.getLogger(this.getClass());
  }
  @Test public void testAllLogMethod(){
    logger.error("error");
    logger.warn("warn");
    logger.info("info");
    logger.debug("debug");
    logger.trace("info");
    logger.error(new Exception("error"));
    logger.warn(new Exception("warn"));
    logger.info(new Exception("info"));
    logger.debug(new Exception("debug"));
    logger.trace(new Exception("trace"));
    logger.error("error",new Exception("error"));
    logger.warn("warn",new Exception("warn"));
    logger.info("info",new Exception("info"));
    logger.debug("debug",new Exception("debug"));
    logger.trace("trace",new Exception("trace"));
  }
  @Test public void testLevelEnable(){
    assertThat(logger.isWarnEnabled(),not(nullValue()));
    assertThat(logger.isTraceEnabled(),not(nullValue()));
    assertThat(logger.isErrorEnabled(),not(nullValue()));
    assertThat(logger.isInfoEnabled(),not(nullValue()));
    assertThat(logger.isDebugEnabled(),not(nullValue()));
  }
}
