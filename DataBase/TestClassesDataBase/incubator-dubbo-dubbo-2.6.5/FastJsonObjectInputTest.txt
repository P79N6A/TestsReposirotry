public class FastJsonObjectInputTest {
  private FastJsonObjectInput fastJsonObjectInput;
  @Test public void testReadBool() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new ByteArrayInputStream("true".getBytes()));
    boolean result=fastJsonObjectInput.readBool();
    assertThat(result,is(true));
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("false"));
    result=fastJsonObjectInput.readBool();
    assertThat(result,is(false));
  }
  @Test public void testReadByte() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new ByteArrayInputStream("123".getBytes()));
    Byte result=fastJsonObjectInput.readByte();
    assertThat(result,is(Byte.parseByte("123")));
  }
  @Test public void testReadBytes() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new ByteArrayInputStream("123456".getBytes()));
    byte[] result=fastJsonObjectInput.readBytes();
    assertThat(result,is("123456".getBytes()));
  }
  @Test public void testReadShort() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("1"));
    short result=fastJsonObjectInput.readShort();
    assertThat(result,is((short)1));
  }
  @Test public void testReadInt() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("1"));
    Integer result=fastJsonObjectInput.readInt();
    assertThat(result,is(1));
  }
  @Test public void testReadDouble() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("1.88"));
    Double result=fastJsonObjectInput.readDouble();
    assertThat(result,is(1.88d));
  }
  @Test public void testReadLong() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("10"));
    Long result=fastJsonObjectInput.readLong();
    assertThat(result,is(10L));
  }
  @Test public void testReadFloat() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("1.66"));
    Float result=fastJsonObjectInput.readFloat();
    assertThat(result,is(1.66F));
  }
  @Test public void testReadUTF() throws IOException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("\"wording\""));
    String result=fastJsonObjectInput.readUTF();
    assertThat(result,is("wording"));
  }
  @Test public void testReadObject() throws IOException, ClassNotFoundException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("{ \"name\":\"John\", \"age\":30 }"));
    Person result=fastJsonObjectInput.readObject(Person.class);
    assertThat(result,not(nullValue()));
    assertThat(result.getName(),is("John"));
    assertThat(result.getAge(),is(30));
  }
  @Test(expected=EOFException.class) public void testEmptyLine() throws IOException, ClassNotFoundException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader(""));
    fastJsonObjectInput.readObject();
  }
  @Test(expected=EOFException.class) public void testEmptySpace() throws IOException, ClassNotFoundException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("  "));
    fastJsonObjectInput.readObject();
  }
  @Test public void testReadObjectWithoutClass() throws IOException, ClassNotFoundException {
    fastJsonObjectInput=new FastJsonObjectInput(new StringReader("{ \"name\":\"John\", \"age\":30 }"));
    JSONObject readObject=(JSONObject)fastJsonObjectInput.readObject();
    assertThat(readObject,not(nullValue()));
    assertThat(readObject.getString("name"),is("John"));
    assertThat(readObject.getInteger("age"),is(30));
  }
}
