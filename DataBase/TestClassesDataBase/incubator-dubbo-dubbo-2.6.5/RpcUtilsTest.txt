public class RpcUtilsTest {
  /** 
 * regular scenario: async invocation in URL verify: 1. whether invocationId is set correctly, 2. idempotent or not
 */
  @Test public void testAttachInvocationIdIfAsync_normal(){
    URL url=URL.valueOf("dubbo://localhost/?test.async=true");
    Map<String,String> attachments=new HashMap<String,String>();
    attachments.put("aa","bb");
    Invocation inv=new RpcInvocation("test",new Class[]{},new String[]{},attachments);
    RpcUtils.attachInvocationIdIfAsync(url,inv);
    long id1=RpcUtils.getInvocationId(inv);
    RpcUtils.attachInvocationIdIfAsync(url,inv);
    long id2=RpcUtils.getInvocationId(inv);
    assertTrue(id1 == id2);
    assertTrue(id1 >= 0);
    assertEquals("bb",attachments.get("aa"));
  }
  /** 
 * scenario: sync invocation, no attachment added by default verify: no id attribute added in attachment
 */
  @Test public void testAttachInvocationIdIfAsync_sync(){
    URL url=URL.valueOf("dubbo://localhost/");
    Invocation inv=new RpcInvocation("test",new Class[]{},new String[]{});
    RpcUtils.attachInvocationIdIfAsync(url,inv);
    assertNull(RpcUtils.getInvocationId(inv));
  }
  /** 
 * scenario: async invocation, add attachment by default verify: no error report when the original attachment is null
 */
  @Test public void testAttachInvocationIdIfAsync_nullAttachments(){
    URL url=URL.valueOf("dubbo://localhost/?test.async=true");
    Invocation inv=new RpcInvocation("test",new Class[]{},new String[]{});
    RpcUtils.attachInvocationIdIfAsync(url,inv);
    assertTrue(RpcUtils.getInvocationId(inv) >= 0l);
  }
  /** 
 * scenario: explicitly configure to not add attachment verify: no id attribute added in attachment
 */
  @Test public void testAttachInvocationIdIfAsync_forceNotAttache(){
    URL url=URL.valueOf("dubbo://localhost/?test.async=true&" + Constants.AUTO_ATTACH_INVOCATIONID_KEY + "=false");
    Invocation inv=new RpcInvocation("test",new Class[]{},new String[]{});
    RpcUtils.attachInvocationIdIfAsync(url,inv);
    assertNull(RpcUtils.getInvocationId(inv));
  }
  /** 
 * scenario: explicitly configure to add attachment verify: id attribute added in attachment
 */
  @Test public void testAttachInvocationIdIfAsync_forceAttache(){
    URL url=URL.valueOf("dubbo://localhost/?" + Constants.AUTO_ATTACH_INVOCATIONID_KEY + "=true");
    Invocation inv=new RpcInvocation("test",new Class[]{},new String[]{});
    RpcUtils.attachInvocationIdIfAsync(url,inv);
    assertNotNull(RpcUtils.getInvocationId(inv));
  }
}
