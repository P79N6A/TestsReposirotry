/** 
 * Client reconnect test
 */
public class ClientReconnectTest {
  public static void main(  String[] args){
    System.out.println(3 % 1);
  }
  @Before public void clear(){
    DubboAppender.clear();
  }
  @Test public void testReconnect() throws RemotingException, InterruptedException {
{
      int port=NetUtils.getAvailablePort();
      Client client=startClient(port,200);
      Assert.assertEquals(false,client.isConnected());
      Server server=startServer(port);
      for (int i=0; i < 100 && !client.isConnected(); i++) {
        Thread.sleep(10);
      }
      Assert.assertEquals(true,client.isConnected());
      client.close(2000);
      server.close(2000);
    }
{
      int port=NetUtils.getAvailablePort();
      Client client=startClient(port,20000);
      Assert.assertEquals(false,client.isConnected());
      Server server=startServer(port);
      for (int i=0; i < 5; i++) {
        Thread.sleep(200);
      }
      Assert.assertEquals(false,client.isConnected());
      client.close(2000);
      server.close(2000);
    }
  }
  public Client startClient(  int port,  int reconnectPeriod) throws RemotingException {
    final String url="exchange://127.0.0.1:" + port + "/client.reconnect.test?timeout=3000&client=netty4&check=false&"+ Constants.RECONNECT_KEY+ "="+ reconnectPeriod;
    return Exchangers.connect(url);
  }
  public Server startServer(  int port) throws RemotingException {
    final String url="exchange://127.0.0.1:" + port + "/client.reconnect.test?server=netty4";
    return Exchangers.bind(url,new HandlerAdapter());
  }
static class HandlerAdapter extends ExchangeHandlerAdapter {
    @Override public void connected(    Channel channel) throws RemotingException {
    }
    @Override public void disconnected(    Channel channel) throws RemotingException {
    }
    @Override public void caught(    Channel channel,    Throwable exception) throws RemotingException {
    }
  }
}
