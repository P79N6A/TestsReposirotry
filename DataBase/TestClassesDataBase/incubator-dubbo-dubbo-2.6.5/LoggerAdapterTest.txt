@RunWith(Parameterized.class) public class LoggerAdapterTest {
  @Parameterized.Parameters public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{JclLoggerAdapter.class,JclLogger.class},{JdkLoggerAdapter.class,JdkLogger.class},{Log4jLoggerAdapter.class,Log4jLogger.class},{Slf4jLoggerAdapter.class,Slf4jLogger.class}});
  }
  private Class loggerClass;
  private LoggerAdapter loggerAdapter;
  public LoggerAdapterTest(  Class<? extends LoggerAdapter> loggerAdapterClass,  Class<? extends Logger> loggerClass) throws Exception {
    this.loggerClass=loggerClass;
    this.loggerAdapter=loggerAdapterClass.newInstance();
  }
  @Test public void testGetLogger(){
    Logger logger=loggerAdapter.getLogger(this.getClass());
    assertThat(logger.getClass().isAssignableFrom(this.loggerClass),is(true));
    logger=loggerAdapter.getLogger(this.getClass().getSimpleName());
    assertThat(logger.getClass().isAssignableFrom(this.loggerClass),is(true));
  }
  @Test public void testLevel(){
    for (    Level targetLevel : Level.values()) {
      loggerAdapter.setLevel(targetLevel);
      assertThat(loggerAdapter.getLevel(),is(targetLevel));
    }
  }
}
