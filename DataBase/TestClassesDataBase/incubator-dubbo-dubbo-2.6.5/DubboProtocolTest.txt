/** 
 * <code>ProxiesTest</code>
 */
public class DubboProtocolTest {
  private Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
  private ProxyFactory proxy=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
  @Test public void testDemoProtocol() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9020/" + DemoService.class.getName() + "?codec=exchange")));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9020/" + DemoService.class.getName() + "?codec=exchange")));
    assertEquals(service.getSize(new String[]{"","",""}),3);
  }
  @Test public void testDubboProtocol() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName())));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName())));
    assertEquals(service.enumlength(new Type[]{}),Type.Lower);
    assertEquals(service.getSize(null),-1);
    assertEquals(service.getSize(new String[]{"","",""}),3);
    Map<String,String> map=new HashMap<String,String>();
    map.put("aa","bb");
    Set<String> set=service.keys(map);
    assertEquals(set.size(),1);
    assertEquals(set.iterator().next(),"aa");
    service.invoke("dubbo://127.0.0.1:9010/" + DemoService.class.getName() + "","invoke");
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName() + "?client=netty")));
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < 1024 * 32 + 32; i++)     buf.append('A');
    System.out.println(service.stringLength(buf.toString()));
    EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName() + "?client=netty")));
    assertEquals(echo.$echo(buf.toString()),buf.toString());
    assertEquals(echo.$echo("test"),"test");
    assertEquals(echo.$echo("abcdefg"),"abcdefg");
    assertEquals(echo.$echo(1234),1234);
  }
  @Test public void testDubboProtocolWithMina() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY,"mina")));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY,"mina")));
    for (int i=0; i < 10; i++) {
      assertEquals(service.enumlength(new Type[]{}),Type.Lower);
      assertEquals(service.getSize(null),-1);
      assertEquals(service.getSize(new String[]{"","",""}),3);
    }
    Map<String,String> map=new HashMap<String,String>();
    map.put("aa","bb");
    for (int i=0; i < 10; i++) {
      Set<String> set=service.keys(map);
      assertEquals(set.size(),1);
      assertEquals(set.iterator().next(),"aa");
      service.invoke("dubbo://127.0.0.1:9010/" + DemoService.class.getName() + "","invoke");
    }
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName() + "?client=mina")));
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < 1024 * 32 + 32; i++)     buf.append('A');
    System.out.println(service.stringLength(buf.toString()));
    EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName() + "?client=mina")));
    for (int i=0; i < 10; i++) {
      assertEquals(echo.$echo(buf.toString()),buf.toString());
      assertEquals(echo.$echo("test"),"test");
      assertEquals(echo.$echo("abcdefg"),"abcdefg");
      assertEquals(echo.$echo(1234),1234);
    }
  }
  @Test public void testDubboProtocolMultiService() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName())));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + DemoService.class.getName())));
    RemoteService remote=new RemoteServiceImpl();
    protocol.export(proxy.getInvoker(remote,RemoteService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + RemoteService.class.getName())));
    remote=proxy.getProxy(protocol.refer(RemoteService.class,URL.valueOf("dubbo://127.0.0.1:9010/" + RemoteService.class.getName())));
    service.sayHello("world");
    assertEquals("world",service.echo("world"));
    assertEquals("hello world@" + RemoteServiceImpl.class.getName(),remote.sayHello("world"));
    EchoService serviceEcho=(EchoService)service;
    assertEquals(serviceEcho.$echo("test"),"test");
    EchoService remoteEecho=(EchoService)remote;
    assertEquals(remoteEecho.$echo("ok"),"ok");
  }
  @Test public void testPerm() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9050/" + DemoService.class.getName() + "?codec=exchange")));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9050/" + DemoService.class.getName() + "?codec=exchange")));
    long start=System.currentTimeMillis();
    for (int i=0; i < 1000; i++)     service.getSize(new String[]{"","",""});
    System.out.println("take:" + (System.currentTimeMillis() - start));
  }
  @Test public void testNonSerializedParameter() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9050/" + DemoService.class.getName() + "?codec=exchange")));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9050/" + DemoService.class.getName() + "?codec=exchange")));
    try {
      service.nonSerializedParameter(new NonSerialized());
      Assert.fail();
    }
 catch (    RpcException e) {
      Assert.assertTrue(e.getMessage().contains("com.alibaba.dubbo.rpc.protocol.dubbo.support.NonSerialized must implement java.io.Serializable"));
    }
  }
  @Test public void testReturnNonSerialized() throws Exception {
    DemoService service=new DemoServiceImpl();
    protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf("dubbo://127.0.0.1:9050/" + DemoService.class.getName() + "?codec=exchange")));
    service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf("dubbo://127.0.0.1:9050/" + DemoService.class.getName() + "?codec=exchange")));
    try {
      service.returnNonSerialized();
      Assert.fail();
    }
 catch (    RpcException e) {
      Assert.assertTrue(e.getMessage().contains("com.alibaba.dubbo.rpc.protocol.dubbo.support.NonSerialized must implement java.io.Serializable"));
    }
  }
}
