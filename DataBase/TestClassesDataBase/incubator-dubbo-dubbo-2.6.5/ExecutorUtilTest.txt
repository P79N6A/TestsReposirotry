public class ExecutorUtilTest {
  @Test public void testIsTerminated() throws Exception {
    ExecutorService executor=Mockito.mock(ExecutorService.class);
    when(executor.isTerminated()).thenReturn(true);
    assertThat(ExecutorUtil.isTerminated(executor),is(true));
    Executor executor2=Mockito.mock(Executor.class);
    assertThat(ExecutorUtil.isTerminated(executor2),is(false));
  }
  @Test public void testGracefulShutdown1() throws Exception {
    ExecutorService executor=Mockito.mock(ExecutorService.class);
    when(executor.isTerminated()).thenReturn(false,true);
    when(executor.awaitTermination(20,TimeUnit.MILLISECONDS)).thenReturn(false);
    ExecutorUtil.gracefulShutdown(executor,20);
    verify(executor).shutdown();
    verify(executor).shutdownNow();
  }
  @Test public void testGracefulShutdown2() throws Exception {
    ExecutorService executor=Mockito.mock(ExecutorService.class);
    when(executor.isTerminated()).thenReturn(false,false,false);
    when(executor.awaitTermination(20,TimeUnit.MILLISECONDS)).thenReturn(false);
    when(executor.awaitTermination(10,TimeUnit.MILLISECONDS)).thenReturn(false,true);
    ExecutorUtil.gracefulShutdown(executor,20);
    Thread.sleep(2000);
    verify(executor).shutdown();
    verify(executor,atLeast(2)).shutdownNow();
  }
  @Test public void testShutdownNow() throws Exception {
    ExecutorService executor=Mockito.mock(ExecutorService.class);
    when(executor.isTerminated()).thenReturn(false,true);
    ExecutorUtil.shutdownNow(executor,20);
    verify(executor).shutdownNow();
    verify(executor).awaitTermination(20,TimeUnit.MILLISECONDS);
  }
  @Test public void testSetThreadName() throws Exception {
    URL url=new URL("dubbo","localhost",1234).addParameter(Constants.THREAD_NAME_KEY,"custom-thread");
    url=ExecutorUtil.setThreadName(url,"default-name");
    assertThat(url.getParameter(Constants.THREAD_NAME_KEY),equalTo("custom-thread-localhost:1234"));
  }
}
