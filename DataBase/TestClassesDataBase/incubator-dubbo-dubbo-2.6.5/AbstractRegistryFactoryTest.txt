/** 
 * AbstractRegistryFactoryTest
 */
public class AbstractRegistryFactoryTest {
  private RegistryFactory registryFactory=new AbstractRegistryFactory(){
    @Override protected Registry createRegistry(    final URL url){
      return new Registry(){
        public URL getUrl(){
          return url;
        }
        @Override public boolean isAvailable(){
          return false;
        }
        @Override public void destroy(){
        }
        @Override public void register(        URL url){
        }
        @Override public void unregister(        URL url){
        }
        @Override public void subscribe(        URL url,        NotifyListener listener){
        }
        @Override public void unsubscribe(        URL url,        NotifyListener listener){
        }
        @Override public List<URL> lookup(        URL url){
          return null;
        }
      }
;
    }
  }
;
  @Test public void testRegistryFactoryCache() throws Exception {
    URL url=URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostAddress() + ":2233");
    Registry registry1=registryFactory.getRegistry(url);
    Registry registry2=registryFactory.getRegistry(url);
    Assert.assertEquals(registry1,registry2);
  }
  @Test public void testRegistryFactoryIpCache() throws Exception {
    Registry registry1=registryFactory.getRegistry(URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":2233"));
    Registry registry2=registryFactory.getRegistry(URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostAddress() + ":2233"));
    Assert.assertEquals(registry1,registry2);
  }
  @Test public void testRegistryFactoryGroupCache() throws Exception {
    Registry registry1=registryFactory.getRegistry(URL.valueOf("dubbo://" + NetUtils.getLocalHost() + ":2233?group=aaa"));
    Registry registry2=registryFactory.getRegistry(URL.valueOf("dubbo://" + NetUtils.getLocalHost() + ":2233?group=bbb"));
    Assert.assertNotSame(registry1,registry2);
  }
}
