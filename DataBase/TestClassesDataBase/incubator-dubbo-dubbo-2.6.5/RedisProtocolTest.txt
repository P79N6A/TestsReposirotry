public class RedisProtocolTest {
  private Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
  private ProxyFactory proxy=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
  private RedisServer redisServer;
  private URL registryUrl;
  @Rule public TestName name=new TestName();
  @Before public void setUp() throws Exception {
    int redisPort=NetUtils.getAvailablePort();
    if (name.getMethodName().equals("testAuthRedis") || name.getMethodName().equals("testWrongAuthRedis")) {
      String password="123456";
      this.redisServer=RedisServer.builder().port(redisPort).setting("requirepass " + password).build();
      this.registryUrl=URL.valueOf("redis://username:" + password + "@localhost:"+ redisPort+ "?db.index=0");
    }
 else {
      this.redisServer=RedisServer.builder().port(redisPort).build();
      this.registryUrl=URL.valueOf("redis://localhost:" + redisPort);
    }
    this.redisServer.start();
  }
  @After public void tearDown(){
    this.redisServer.stop();
  }
  @Test public void testReferClass(){
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,registryUrl);
    Class<IDemoService> serviceClass=refer.getInterface();
    assertThat(serviceClass.getName(),is("com.alibaba.dubbo.rpc.protocol.redis.IDemoService"));
  }
  @Test public void testInvocation(){
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,registryUrl.addParameter("max.idle",10).addParameter("max.active",20));
    IDemoService demoService=this.proxy.getProxy(refer);
    String value=demoService.get("key");
    assertThat(value,is(nullValue()));
    demoService.set("key","newValue");
    value=demoService.get("key");
    assertThat(value,is("newValue"));
    demoService.delete("key");
    value=demoService.get("key");
    assertThat(value,is(nullValue()));
    refer.destroy();
  }
  @Test(expected=RpcException.class) public void testUnsupportedMethod(){
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,registryUrl);
    IDemoService demoService=this.proxy.getProxy(refer);
    demoService.unsupported(null);
  }
  @Test(expected=RpcException.class) public void testWrongParameters(){
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,registryUrl);
    IDemoService demoService=this.proxy.getProxy(refer);
    demoService.set("key","value","wrongValue");
  }
  @Test(expected=RpcException.class) public void testWrongRedis(){
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,URL.valueOf("redis://localhost:1"));
    IDemoService demoService=this.proxy.getProxy(refer);
    demoService.get("key");
  }
  @Test(expected=UnsupportedOperationException.class) public void testExport(){
    protocol.export(protocol.refer(IDemoService.class,registryUrl));
  }
  @Test public void testAuthRedis(){
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,registryUrl.addParameter("max.idle",10).addParameter("max.active",20));
    IDemoService demoService=this.proxy.getProxy(refer);
    String value=demoService.get("key");
    assertThat(value,is(nullValue()));
    demoService.set("key","newValue");
    value=demoService.get("key");
    assertThat(value,is("newValue"));
    demoService.delete("key");
    value=demoService.get("key");
    assertThat(value,is(nullValue()));
    refer.destroy();
    String password="123456";
    int database=1;
    this.registryUrl=this.registryUrl.setPassword(password).addParameter("db.index",database);
    refer=protocol.refer(IDemoService.class,registryUrl.addParameter("max.idle",10).addParameter("max.active",20));
    demoService=this.proxy.getProxy(refer);
    demoService.set("key","newValue");
    value=demoService.get("key");
    assertThat(value,is("newValue"));
    JedisPool pool=new JedisPool(new GenericObjectPoolConfig(),"localhost",registryUrl.getPort(),2000,password,database,(String)null);
    Jedis jedis=null;
    try {
      jedis=pool.getResource();
      byte[] valueByte=jedis.get("key".getBytes());
      Serialization serialization=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(this.registryUrl.getParameter(Constants.SERIALIZATION_KEY,"java"));
      ObjectInput oin=serialization.deserialize(this.registryUrl,new ByteArrayInputStream(valueByte));
      String actual=(String)oin.readObject();
      assertThat(value,is(actual));
    }
 catch (    Exception e) {
      Assert.fail("jedis gets the result comparison is error!");
    }
 finally {
      if (jedis != null) {
        jedis.close();
      }
      pool.destroy();
    }
    demoService.delete("key");
    value=demoService.get("key");
    assertThat(value,is(nullValue()));
    refer.destroy();
  }
  @Test public void testWrongAuthRedis(){
    String password="1234567";
    this.registryUrl=this.registryUrl.setPassword(password);
    Invoker<IDemoService> refer=protocol.refer(IDemoService.class,registryUrl.addParameter("max.idle",10).addParameter("max.active",20));
    IDemoService demoService=this.proxy.getProxy(refer);
    try {
      String value=demoService.get("key");
      assertThat(value,is(nullValue()));
    }
 catch (    RpcException e) {
      if (e.getCause() instanceof JedisConnectionException && e.getCause().getCause() instanceof JedisDataException) {
        Assert.assertEquals("ERR invalid password",e.getCause().getCause().getMessage());
      }
 else {
        Assert.fail("no invalid password exception!");
      }
    }
    refer.destroy();
  }
}
