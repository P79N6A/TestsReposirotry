/** 
 * FailfastClusterInvokerTest
 */
@SuppressWarnings("unchecked") public class FailSafeClusterInvokerTest {
  List<Invoker<DemoService>> invokers=new ArrayList<Invoker<DemoService>>();
  URL url=URL.valueOf("test://test:11/test");
  Invoker<DemoService> invoker=mock(Invoker.class);
  RpcInvocation invocation=new RpcInvocation();
  Directory<DemoService> dic;
  Result result=new RpcResult();
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
    dic=mock(Directory.class);
    given(dic.getUrl()).willReturn(url);
    given(dic.list(invocation)).willReturn(invokers);
    given(dic.getInterface()).willReturn(DemoService.class);
    invocation.setMethodName("method1");
    invokers.add(invoker);
  }
  private void resetInvokerToException(){
    given(invoker.invoke(invocation)).willThrow(new RuntimeException());
    given(invoker.getUrl()).willReturn(url);
    given(invoker.getInterface()).willReturn(DemoService.class);
  }
  private void resetInvokerToNoException(){
    given(invoker.invoke(invocation)).willReturn(result);
    given(invoker.getUrl()).willReturn(url);
    given(invoker.getInterface()).willReturn(DemoService.class);
  }
  @Test public void testInvokeExceptoin(){
    resetInvokerToException();
    FailsafeClusterInvoker<DemoService> invoker=new FailsafeClusterInvoker<DemoService>(dic);
    invoker.invoke(invocation);
    Assert.assertNull(RpcContext.getContext().getInvoker());
  }
  @Test() public void testInvokeNoExceptoin(){
    resetInvokerToNoException();
    FailsafeClusterInvoker<DemoService> invoker=new FailsafeClusterInvoker<DemoService>(dic);
    Result ret=invoker.invoke(invocation);
    Assert.assertSame(result,ret);
  }
  @Test() public void testNoInvoke(){
    dic=mock(Directory.class);
    given(dic.getUrl()).willReturn(url);
    given(dic.list(invocation)).willReturn(null);
    given(dic.getInterface()).willReturn(DemoService.class);
    invocation.setMethodName("method1");
    resetInvokerToNoException();
    FailsafeClusterInvoker<DemoService> invoker=new FailsafeClusterInvoker<DemoService>(dic);
    LogUtil.start();
    invoker.invoke(invocation);
    assertTrue(LogUtil.findMessage("No provider") > 0);
    LogUtil.stop();
  }
}
