/** 
 * EventFilterTest.java TODO rely on callback integration test for now
 */
public class FutureFilterTest {
  private static RpcInvocation invocation;
  private Filter eventFilter=new FutureFilter();
  @BeforeClass public static void setUp(){
    invocation=new RpcInvocation();
    invocation.setMethodName("echo");
    invocation.setParameterTypes(new Class<?>[]{Enum.class});
    invocation.setArguments(new Object[]{"hello"});
  }
  @Test public void testSyncCallback(){
    @SuppressWarnings("unchecked") Invoker<DemoService> invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setValue("High");
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=eventFilter.invoke(invoker,invocation);
    assertEquals("High",filterResult.getValue());
  }
  @Test(expected=RuntimeException.class) public void testSyncCallbackHasException() throws RpcException, Throwable {
    @SuppressWarnings("unchecked") Invoker<DemoService> invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setException(new RuntimeException());
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1&" + Constants.ON_THROW_METHOD_KEY + "=echo");
    given(invoker.getUrl()).willReturn(url);
    eventFilter.invoke(invoker,invocation).recreate();
  }
}
