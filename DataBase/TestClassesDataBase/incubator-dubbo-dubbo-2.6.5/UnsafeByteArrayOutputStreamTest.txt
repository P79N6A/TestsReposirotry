public class UnsafeByteArrayOutputStreamTest {
  @Test(expected=IllegalArgumentException.class) public void testWrongSize(){
    new UnsafeByteArrayOutputStream(-1);
  }
  @Test public void testWrite(){
    UnsafeByteArrayOutputStream outputStream=new UnsafeByteArrayOutputStream(1);
    outputStream.write((int)'a');
    outputStream.write("bc".getBytes(),0,2);
    assertThat(outputStream.size(),is(3));
    assertThat(outputStream.toString(),is("abc"));
  }
  @Test public void testToByteBuffer(){
    UnsafeByteArrayOutputStream outputStream=new UnsafeByteArrayOutputStream(1);
    outputStream.write((int)'a');
    ByteBuffer byteBuffer=outputStream.toByteBuffer();
    assertThat(byteBuffer.get(),is("a".getBytes()[0]));
  }
  @Test public void testExtendLengthForBuffer() throws IOException {
    UnsafeByteArrayOutputStream outputStream=new UnsafeByteArrayOutputStream(1);
    for (int i=0; i < 10; i++) {
      outputStream.write(i);
    }
    assertThat(outputStream.size(),is(10));
    OutputStream stream=mock(OutputStream.class);
    outputStream.writeTo(stream);
    Mockito.verify(stream).write(any(byte[].class),anyInt(),eq(10));
  }
  @Test public void testToStringWithCharset() throws IOException {
    UnsafeByteArrayOutputStream outputStream=new UnsafeByteArrayOutputStream();
    outputStream.write("Hòa Bình".getBytes());
    assertThat(outputStream.toString("UTF-8"),is("Hòa Bình"));
  }
}
