public class HeartbeatHandlerTest {
  private static final Logger logger=LoggerFactory.getLogger(HeartbeatHandlerTest.class);
  private ExchangeServer server;
  private ExchangeClient client;
  @After public void after() throws Exception {
    if (client != null) {
      client.close();
      client=null;
    }
    if (server != null) {
      server.close();
      server=null;
    }
  }
  @Test public void testServerHeartbeat() throws Exception {
    URL serverURL=URL.valueOf("header://localhost:55555");
    serverURL=serverURL.addParameter(Constants.HEARTBEAT_KEY,1000);
    TestHeartbeatHandler handler=new TestHeartbeatHandler();
    server=Exchangers.bind(serverURL,handler);
    System.out.println("Server bind successfully");
    FakeChannelHandlers.setTestingChannelHandlers();
    serverURL=serverURL.removeParameter(Constants.HEARTBEAT_KEY);
    client=Exchangers.connect(serverURL);
    Thread.sleep(10000);
    Assert.assertTrue(handler.disconnectCount > 0);
    System.out.println("disconnect count " + handler.disconnectCount);
  }
  @Test public void testHeartbeat() throws Exception {
    URL serverURL=URL.valueOf("header://localhost:55555");
    serverURL=serverURL.addParameter(Constants.HEARTBEAT_KEY,1000);
    TestHeartbeatHandler handler=new TestHeartbeatHandler();
    server=Exchangers.bind(serverURL,handler);
    System.out.println("Server bind successfully");
    client=Exchangers.connect(serverURL);
    Thread.sleep(10000);
    System.err.println("++++++++++++++ disconnect count " + handler.disconnectCount);
    System.err.println("++++++++++++++ connect count " + handler.connectCount);
    Assert.assertTrue(handler.disconnectCount == 0);
    Assert.assertTrue(handler.connectCount == 1);
  }
  @Test public void testClientHeartbeat() throws Exception {
    FakeChannelHandlers.setTestingChannelHandlers();
    URL serverURL=URL.valueOf("header://localhost:55555");
    TestHeartbeatHandler handler=new TestHeartbeatHandler();
    server=Exchangers.bind(serverURL,handler);
    System.out.println("Server bind successfully");
    FakeChannelHandlers.resetChannelHandlers();
    serverURL=serverURL.addParameter(Constants.HEARTBEAT_KEY,1000);
    client=Exchangers.connect(serverURL);
    Thread.sleep(10000);
    Assert.assertTrue(handler.connectCount > 0);
    System.out.println("connect count " + handler.connectCount);
  }
class TestHeartbeatHandler implements ExchangeHandler {
    public int disconnectCount=0;
    public int connectCount=0;
    public Object reply(    ExchangeChannel channel,    Object request) throws RemotingException {
      return request;
    }
    @Override public void connected(    Channel channel) throws RemotingException {
      ++connectCount;
    }
    @Override public void disconnected(    Channel channel) throws RemotingException {
      ++disconnectCount;
    }
    @Override public void sent(    Channel channel,    Object message) throws RemotingException {
    }
    @Override public void received(    Channel channel,    Object message) throws RemotingException {
      logger.error(this.getClass().getSimpleName() + message.toString());
    }
    @Override public void caught(    Channel channel,    Throwable exception) throws RemotingException {
      exception.printStackTrace();
    }
    public String telnet(    Channel channel,    String message) throws RemotingException {
      return message;
    }
  }
}
