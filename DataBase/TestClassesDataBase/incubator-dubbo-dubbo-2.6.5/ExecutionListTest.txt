public class ExecutionListTest {
  private ExecutionList executionList;
  @Before public void setUp() throws Exception {
    this.executionList=new ExecutionList();
  }
  @Test(expected=NullPointerException.class) public void testAddNullRunnable(){
    this.executionList.add(null,mock(Executor.class));
  }
  @Test public void testAddRunnableToExecutor(){
    Executor mockedExecutor=mock(Executor.class);
    this.executionList.add(mock(Runnable.class),mockedExecutor);
    this.executionList.execute();
    verify(mockedExecutor).execute(any(Runnable.class));
  }
  @Test public void testExecuteRunnableWithDefaultExecutor() throws InterruptedException {
    final CountDownLatch countDownLatch=new CountDownLatch(1);
    this.executionList.add(new Runnable(){
      @Override public void run(){
        countDownLatch.countDown();
      }
    }
,null);
    this.executionList.execute();
    countDownLatch.await();
  }
  @Test public void testExceptionForExecutor(){
    Executor mockedExecutor=mock(Executor.class);
    doThrow(new RuntimeException()).when(mockedExecutor).execute(any(Runnable.class));
    this.executionList.add(mock(Runnable.class),mockedExecutor);
    this.executionList.execute();
  }
  @Test public void testNotRunSameRunnableTwice(){
    Executor mockedExecutor=mock(Executor.class);
    this.executionList.add(mock(Runnable.class),mockedExecutor);
    this.executionList.execute();
    this.executionList.execute();
    verify(mockedExecutor).execute(any(Runnable.class));
  }
  @Test public void testRunImmediatelyAfterExecuted(){
    Executor mockedExecutor=mock(Executor.class);
    this.executionList.add(mock(Runnable.class),mockedExecutor);
    this.executionList.execute();
    this.executionList.add(mock(Runnable.class),mockedExecutor);
    verify(mockedExecutor,times(2)).execute(any(Runnable.class));
  }
}
