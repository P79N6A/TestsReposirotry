public class ListenableFutureTaskTest {
  @Test public void testCreate() throws InterruptedException {
    final CountDownLatch countDownLatch=new CountDownLatch(1);
    ListenableFutureTask<Boolean> futureTask=ListenableFutureTask.create(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        countDownLatch.countDown();
        return true;
      }
    }
);
    futureTask.run();
    countDownLatch.await();
  }
  @Test public void testRunnableResponse() throws ExecutionException, InterruptedException {
    ListenableFutureTask<Boolean> futureTask=ListenableFutureTask.create(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
,true);
    futureTask.run();
    Boolean result=futureTask.get();
    assertThat(result,is(true));
  }
  @Test public void testListener() throws InterruptedException {
    ListenableFutureTask<String> futureTask=ListenableFutureTask.create(new Callable<String>(){
      @Override public String call() throws Exception {
        Thread.sleep(500);
        return "hello";
      }
    }
);
    final CountDownLatch countDownLatch=new CountDownLatch(1);
    futureTask.addListener(new Runnable(){
      @Override public void run(){
        countDownLatch.countDown();
      }
    }
);
    futureTask.run();
    countDownLatch.await();
  }
  @Test public void testCustomExecutor(){
    Executor mockedExecutor=mock(Executor.class);
    ListenableFutureTask<Integer> futureTask=ListenableFutureTask.create(new Callable<Integer>(){
      @Override public Integer call() throws Exception {
        return 0;
      }
    }
);
    futureTask.addListener(mock(Runnable.class),mockedExecutor);
    futureTask.run();
    verify(mockedExecutor).execute(any(Runnable.class));
  }
}
