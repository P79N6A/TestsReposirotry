public class DubboAppenderTest {
  private LoggingEvent event;
  @Before public void setUp() throws Exception {
    Level level=Mockito.mock(Level.class);
    Category category=Mockito.mock(Category.class);
    event=Mockito.mock(LoggingEvent.class);
    Mockito.when(event.getLogger()).thenReturn(category);
    Mockito.when(event.getLevel()).thenReturn(level);
    Mockito.when(event.getThreadName()).thenReturn("thread-name");
    Mockito.when(event.getMessage()).thenReturn("message");
  }
  @After public void tearDown() throws Exception {
    DubboAppender.clear();
    DubboAppender.doStop();
  }
  @Test public void testAvailable() throws Exception {
    assertThat(DubboAppender.available,is(false));
    DubboAppender.doStart();
    assertThat(DubboAppender.available,is(true));
    DubboAppender.doStop();
    assertThat(DubboAppender.available,is(false));
  }
  @Test public void testAppend() throws Exception {
    DubboAppender appender=new DubboAppender();
    appender.append(event);
    assertThat(DubboAppender.logList,hasSize(0));
    DubboAppender.doStart();
    appender.append(event);
    assertThat(DubboAppender.logList,hasSize(1));
    Log log=DubboAppender.logList.get(0);
    assertThat(log.getLogThread(),equalTo("thread-name"));
  }
  @Test public void testClear() throws Exception {
    DubboAppender.doStart();
    DubboAppender appender=new DubboAppender();
    appender.append(event);
    assertThat(DubboAppender.logList,hasSize(1));
    DubboAppender.clear();
    assertThat(DubboAppender.logList,hasSize(0));
  }
}
