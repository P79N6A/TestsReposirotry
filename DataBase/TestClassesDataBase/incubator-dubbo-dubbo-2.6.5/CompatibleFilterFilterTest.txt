/** 
 * CompatibleFilterTest.java
 */
public class CompatibleFilterFilterTest {
  private Filter compatibleFilter=new CompatibleFilter();
  private Invocation invocation;
  private Invoker invoker;
  @After public void tearDown(){
    Mockito.reset(invocation,invoker);
  }
  @Test public void testInvokerGeneric(){
    invocation=mock(Invocation.class);
    given(invocation.getMethodName()).willReturn("$enumlength");
    given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Enum.class});
    given(invocation.getArguments()).willReturn(new Object[]{"hello"});
    invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setValue("High");
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=compatibleFilter.invoke(invoker,invocation);
    assertEquals(filterResult,result);
  }
  @Test public void testResulthasException(){
    invocation=mock(Invocation.class);
    given(invocation.getMethodName()).willReturn("enumlength");
    given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Enum.class});
    given(invocation.getArguments()).willReturn(new Object[]{"hello"});
    invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setException(new RuntimeException());
    result.setValue("High");
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=compatibleFilter.invoke(invoker,invocation);
    assertEquals(filterResult,result);
  }
  @Test public void testInvokerJsonPojoSerialization(){
    invocation=mock(Invocation.class);
    given(invocation.getMethodName()).willReturn("enumlength");
    given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Type[].class});
    given(invocation.getArguments()).willReturn(new Object[]{"hello"});
    invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setValue("High");
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1&serialization=json");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=compatibleFilter.invoke(invoker,invocation);
    assertEquals(Type.High,filterResult.getValue());
  }
  @Test public void testInvokerNonJsonEnumSerialization(){
    invocation=mock(Invocation.class);
    given(invocation.getMethodName()).willReturn("enumlength");
    given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Type[].class});
    given(invocation.getArguments()).willReturn(new Object[]{"hello"});
    invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setValue("High");
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=compatibleFilter.invoke(invoker,invocation);
    assertEquals(Type.High,filterResult.getValue());
  }
  @Test public void testInvokerNonJsonNonPojoSerialization(){
    invocation=mock(Invocation.class);
    given(invocation.getMethodName()).willReturn("echo");
    given(invocation.getParameterTypes()).willReturn(new Class<?>[]{String.class});
    given(invocation.getArguments()).willReturn(new Object[]{"hello"});
    invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setValue(new String[]{"High"});
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=compatibleFilter.invoke(invoker,invocation);
    assertArrayEquals(new String[]{"High"},(String[])filterResult.getValue());
  }
  @Test public void testInvokerNonJsonPojoSerialization(){
    invocation=mock(Invocation.class);
    given(invocation.getMethodName()).willReturn("echo");
    given(invocation.getParameterTypes()).willReturn(new Class<?>[]{String.class});
    given(invocation.getArguments()).willReturn(new Object[]{"hello"});
    invoker=mock(Invoker.class);
    given(invoker.isAvailable()).willReturn(true);
    given(invoker.getInterface()).willReturn(DemoService.class);
    RpcResult result=new RpcResult();
    result.setValue("hello");
    given(invoker.invoke(invocation)).willReturn(result);
    URL url=URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
    given(invoker.getUrl()).willReturn(url);
    Result filterResult=compatibleFilter.invoke(invoker,invocation);
    assertEquals("hello",filterResult.getValue());
  }
}
