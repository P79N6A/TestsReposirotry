/** 
 * HessianProtocolTest
 */
public class HessianProtocolTest {
  @Test public void testHessianProtocol(){
    HessianServiceImpl server=new HessianServiceImpl();
    Assert.assertFalse(server.isCalled());
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0&hessian.overload.method=true");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<HessianService> invoker=protocol.refer(HessianService.class,url);
    HessianService client=proxyFactory.getProxy(invoker);
    String result=client.sayHello("haha");
    Assert.assertTrue(server.isCalled());
    Assert.assertEquals("Hello, haha",result);
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testGenericInvoke(){
    HessianServiceImpl server=new HessianServiceImpl();
    Assert.assertFalse(server.isCalled());
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<GenericService> invoker=protocol.refer(GenericService.class,url);
    GenericService client=proxyFactory.getProxy(invoker,true);
    String result=(String)client.$invoke("sayHello",new String[]{"java.lang.String"},new Object[]{"haha"});
    Assert.assertTrue(server.isCalled());
    Assert.assertEquals("Hello, haha",result);
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testGenericInvokeWithNativeJava() throws IOException, ClassNotFoundException {
    HessianServiceImpl server=new HessianServiceImpl();
    Assert.assertFalse(server.isCalled());
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0&generic=nativejava");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<GenericService> invoker=protocol.refer(GenericService.class,url);
    GenericService client=proxyFactory.getProxy(invoker);
    Serialization serialization=new NativeJavaSerialization();
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    ObjectOutput objectOutput=serialization.serialize(url,byteArrayOutputStream);
    objectOutput.writeObject("haha");
    objectOutput.flushBuffer();
    Object result=client.$invoke("sayHello",new String[]{"java.lang.String"},new Object[]{byteArrayOutputStream.toByteArray()});
    ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream((byte[])result);
    ObjectInput objectInput=serialization.deserialize(url,byteArrayInputStream);
    Assert.assertTrue(server.isCalled());
    Assert.assertEquals("Hello, haha",objectInput.readObject());
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testGenericInvokeWithRpcContext(){
    RpcContext.getContext().setAttachment("myContext","123");
    HessianServiceImpl server=new HessianServiceImpl();
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<GenericService> invoker=protocol.refer(GenericService.class,url);
    GenericService client=proxyFactory.getProxy(invoker,true);
    String result=(String)client.$invoke("context",new String[]{"java.lang.String"},new Object[]{"haha"});
    Assert.assertEquals("Hello, haha context, 123",result);
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testGenericInvokeWithBean(){
    HessianServiceImpl server=new HessianServiceImpl();
    Assert.assertFalse(server.isCalled());
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0&generic=bean");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<GenericService> invoker=protocol.refer(GenericService.class,url);
    GenericService client=proxyFactory.getProxy(invoker);
    JavaBeanDescriptor javaBeanDescriptor=JavaBeanSerializeUtil.serialize("haha");
    Object result=client.$invoke("sayHello",new String[]{"java.lang.String"},new Object[]{javaBeanDescriptor});
    Assert.assertTrue(server.isCalled());
    Assert.assertEquals("Hello, haha",JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)result));
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testOverload(){
    HessianServiceImpl server=new HessianServiceImpl();
    Assert.assertFalse(server.isCalled());
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0&hessian.overload.method=true&hessian2.request=false");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<HessianService> invoker=protocol.refer(HessianService.class,url);
    HessianService client=proxyFactory.getProxy(invoker);
    String result=client.sayHello("haha");
    Assert.assertEquals("Hello, haha",result);
    result=client.sayHello("haha",1);
    Assert.assertEquals("Hello, haha. ",result);
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testHttpClient(){
    HessianServiceImpl server=new HessianServiceImpl();
    Assert.assertFalse(server.isCalled());
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0&client=httpclient&hessian.overload.method=true");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<HessianService> invoker=protocol.refer(HessianService.class,url);
    HessianService client=proxyFactory.getProxy(invoker);
    String result=client.sayHello("haha");
    Assert.assertTrue(server.isCalled());
    Assert.assertEquals("Hello, haha",result);
    invoker.destroy();
    exporter.unexport();
  }
  @Test public void testTimeOut(){
    HessianServiceImpl server=new HessianServiceImpl();
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0&timeout=10");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<HessianService> invoker=protocol.refer(HessianService.class,url);
    HessianService client=proxyFactory.getProxy(invoker);
    try {
      client.timeOut(6000);
      fail();
    }
 catch (    RpcException expected) {
      Assert.assertTrue(expected.isTimeout());
    }
 finally {
      invoker.destroy();
      exporter.unexport();
    }
  }
  @Test public void testCustomException(){
    HessianServiceImpl server=new HessianServiceImpl();
    ProxyFactory proxyFactory=ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
    Protocol protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
    URL url=URL.valueOf("hessian://127.0.0.1:5342/" + HessianService.class.getName() + "?version=1.0.0");
    Exporter<HessianService> exporter=protocol.export(proxyFactory.getInvoker(server,HessianService.class,url));
    Invoker<HessianService> invoker=protocol.refer(HessianService.class,url);
    HessianService client=proxyFactory.getProxy(invoker);
    try {
      client.customException();
      fail();
    }
 catch (    MyException expected) {
    }
    invoker.destroy();
    exporter.unexport();
  }
}
