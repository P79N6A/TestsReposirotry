public abstract class AbstractTest {
  protected int PORT=NetUtils.getAvailablePort();
  protected TServer server;
  protected Protocol protocol;
  protected Invoker<?> invoker;
  TServerTransport serverTransport;
  protected void init() throws Exception {
    serverTransport=new TServerSocket(PORT);
    TBinaryProtocol.Factory bFactory=new TBinaryProtocol.Factory();
    server=new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).inputProtocolFactory(bFactory).outputProtocolFactory(bFactory).inputTransportFactory(getTransportFactory()).outputTransportFactory(getTransportFactory()).processor(getProcessor()));
    Thread startTread=new Thread(){
      @Override public void run(){
        server.serve();
      }
    }
;
    startTread.setName("thrift-server");
    startTread.start();
    while (!server.isServing()) {
      Thread.sleep(100);
    }
    protocol=ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(ThriftProtocol.NAME);
    invoker=protocol.refer(getInterface(),getUrl());
  }
  protected void destroy() throws Exception {
    if (server != null) {
      server.stop();
      server=null;
    }
    if (protocol != null) {
      protocol.destroy();
      protocol=null;
    }
    if (invoker != null) {
      invoker.destroy();
      invoker=null;
    }
    try {
      if (serverTransport != null) {
        serverTransport.close();
      }
    }
 catch (    Exception e) {
    }
  }
  protected TTransportFactory getTransportFactory(){
    return new FramedTransportFactory();
  }
  protected $__DemoStub.Iface getServiceImpl(){
    return new DubboDemoImpl();
  }
  protected TProcessor getProcessor(){
    MultiServiceProcessor result=new MultiServiceProcessor();
    result.addProcessor(com.alibaba.dubbo.rpc.gen.dubbo.Demo.class,new $__DemoStub.Processor(getServiceImpl()));
    return result;
  }
  protected Class<?> getInterface(){
    return Demo.class;
  }
  protected URL getUrl(){
    return URL.valueOf("thrift://127.0.0.1:" + PORT + "/"+ getInterface().getName());
  }
  @After public void tearDown() throws Exception {
    destroy();
  }
  @Before public void setUp() throws Exception {
    init();
  }
}
