@RunWith(SpringRunner.class) @TestPropertySource(locations="classpath:/dubbo.properties") @PropertySource(name="yaml-source",value={"classpath:/META-INF/dubbo.yml"},factory=YamlPropertySourceFactory.class) @Configuration @ContextConfiguration(classes={DefaultDubboConfigBinder.class,DefaultDubboConfigBinderTest.class}) public class DefaultDubboConfigBinderTest {
  @Autowired private DubboConfigBinder dubboConfigBinder;
  @Value("${dubbo.consumer.default}") private Boolean isDefault;
  @Value("${dubbo.consumer.client}") private String client;
  @Value("${dubbo.consumer.threadpool}") private String threadPool;
  @Value("${dubbo.consumer.corethreads}") private Integer coreThreads;
  @Value("${dubbo.consumer.threads}") private Integer threads;
  @Value("${dubbo.consumer.queues}") private Integer queues;
  @Test public void testBinder(){
    ApplicationConfig applicationConfig=new ApplicationConfig();
    dubboConfigBinder.bind("dubbo.application",applicationConfig);
    Assert.assertEquals("hello",applicationConfig.getName());
    Assert.assertEquals("world",applicationConfig.getOwner());
    RegistryConfig registryConfig=new RegistryConfig();
    dubboConfigBinder.bind("dubbo.registry",registryConfig);
    Assert.assertEquals("10.20.153.17",registryConfig.getAddress());
    ProtocolConfig protocolConfig=new ProtocolConfig();
    dubboConfigBinder.bind("dubbo.protocol",protocolConfig);
    Assert.assertEquals(Integer.valueOf(20881),protocolConfig.getPort());
    ConsumerConfig consumerConfig=new ConsumerConfig();
    dubboConfigBinder.bind("dubbo.consumer",consumerConfig);
    Assert.assertEquals(isDefault,consumerConfig.isDefault());
    Assert.assertEquals(client,consumerConfig.getClient());
    Assert.assertEquals(threadPool,consumerConfig.getThreadpool());
    Assert.assertEquals(coreThreads,consumerConfig.getCorethreads());
    Assert.assertEquals(threads,consumerConfig.getThreads());
    Assert.assertEquals(queues,consumerConfig.getQueues());
  }
}
