/** 
 * PortTelnetHandlerTest.java
 */
public class PortTelnetHandlerTest {
  private static TelnetHandler port=new PortTelnetHandler();
  private static Invoker<DemoService> mockInvoker;
  @SuppressWarnings("unchecked") @BeforeClass public static void before(){
    mockInvoker=mock(Invoker.class);
    given(mockInvoker.getInterface()).willReturn(DemoService.class);
    given(mockInvoker.getUrl()).willReturn(URL.valueOf("dubbo://127.0.0.1:20887/demo"));
    DubboProtocol.getDubboProtocol().export(mockInvoker);
  }
  @AfterClass public static void after(){
    ProtocolUtils.closeAll();
  }
  /** 
 * In NAT network scenario, server's channel.getRemoteAddress() possibly get the address of network gateway, or the address converted by NAT. In this case, check port only.
 */
  @Test public void testListClient() throws Exception {
    ExchangeClient client1=Exchangers.connect("dubbo://127.0.0.1:20887/demo");
    ExchangeClient client2=Exchangers.connect("dubbo://127.0.0.1:20887/demo");
    Thread.sleep(5000);
    String result=port.telnet(null,"-l 20887");
    String client1Addr=client1.getLocalAddress().toString();
    String client2Addr=client2.getLocalAddress().toString();
    System.out.printf("Result: %s %n",result);
    System.out.printf("Client 1 Address %s %n",client1Addr);
    System.out.printf("Client 2 Address %s %n",client2Addr);
    assertTrue(result.contains(String.valueOf(client1.getLocalAddress().getPort())));
    assertTrue(result.contains(String.valueOf(client2.getLocalAddress().getPort())));
  }
  @Test public void testListDetail() throws RemotingException {
    String result=port.telnet(null,"-l");
    assertEquals("dubbo://127.0.0.1:20887",result);
  }
  @Test public void testListAllPort() throws RemotingException {
    String result=port.telnet(null,"");
    assertEquals("20887",result);
  }
  @Test public void testErrorMessage() throws RemotingException {
    String result=port.telnet(null,"a");
    assertEquals("Illegal port a, must be integer.",result);
  }
  @Test public void testNoPort() throws RemotingException {
    String result=port.telnet(null,"-l 20880");
    assertEquals("No such port 20880",result);
  }
}
