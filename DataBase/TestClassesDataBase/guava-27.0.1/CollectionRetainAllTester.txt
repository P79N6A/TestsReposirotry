/** 
 * A generic JUnit test which tests  {@code retainAll} operations on a collection. Can't be invokeddirectly; please see  {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 * @author Chris Povirk
 */
@SuppressWarnings("unchecked") @GwtCompatible @Ignore public class CollectionRetainAllTester<E> extends AbstractCollectionTester<E> {
  /** 
 * A collection of elements to retain, along with a description for use in failure messages. 
 */
private class Target {
    private final Collection<E> toRetain;
    private final String description;
    private Target(    Collection<E> toRetain,    String description){
      this.toRetain=toRetain;
      this.description=description;
    }
    @Override public String toString(){
      return description;
    }
  }
  private Target empty;
  private Target disjoint;
  private Target superset;
  private Target nonEmptyProperSubset;
  private Target sameElements;
  private Target partialOverlap;
  private Target containsDuplicates;
  private Target nullSingleton;
  @Override public void setUp() throws Exception {
    super.setUp();
    empty=new Target(emptyCollection(),"empty");
    List<E> disjointList=Arrays.asList(e3(),e4());
    disjoint=new Target(disjointList,"disjoint");
    superset=new Target(MinimalCollection.of(e0(),e1(),e2(),e3(),e4()),"superset");
    nonEmptyProperSubset=new Target(MinimalCollection.of(e1()),"subset");
    sameElements=new Target(Arrays.asList(createSamplesArray()),"sameElements");
    containsDuplicates=new Target(MinimalCollection.of(e0(),e0(),e3(),e3()),"containsDuplicates");
    partialOverlap=new Target(MinimalCollection.of(e2(),e3()),"partialOverlap");
    nullSingleton=new Target(Collections.<E>singleton(null),"nullSingleton");
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(ZERO) public void testRetainAll_emptyPreviouslyEmpty(){
    expectReturnsFalse(empty);
    expectUnchanged();
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) @CollectionSize.Require(ZERO) public void testRetainAll_emptyPreviouslyEmptyUnsupported(){
    expectReturnsFalseOrThrows(empty);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRetainAll_emptyPreviouslyNonEmpty(){
    expectReturnsTrue(empty);
    expectContents();
    expectMissing(e0(),e1(),e2());
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRetainAll_emptyPreviouslyNonEmptyUnsupported(){
    expectThrows(empty);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(ZERO) public void testRetainAll_disjointPreviouslyEmpty(){
    expectReturnsFalse(disjoint);
    expectUnchanged();
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) @CollectionSize.Require(ZERO) public void testRetainAll_disjointPreviouslyEmptyUnsupported(){
    expectReturnsFalseOrThrows(disjoint);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRetainAll_disjointPreviouslyNonEmpty(){
    expectReturnsTrue(disjoint);
    expectContents();
    expectMissing(e0(),e1(),e2());
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRetainAll_disjointPreviouslyNonEmptyUnsupported(){
    expectThrows(disjoint);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) public void testRetainAll_superset(){
    expectReturnsFalse(superset);
    expectUnchanged();
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) public void testRetainAll_supersetUnsupported(){
    expectReturnsFalseOrThrows(superset);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent={ZERO,ONE}) public void testRetainAll_subset(){
    expectReturnsTrue(nonEmptyProperSubset);
    expectContents(nonEmptyProperSubset.toRetain);
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) @CollectionSize.Require(absent={ZERO,ONE}) public void testRetainAll_subsetUnsupported(){
    expectThrows(nonEmptyProperSubset);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) public void testRetainAll_sameElements(){
    expectReturnsFalse(sameElements);
    expectUnchanged();
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) public void testRetainAll_sameElementsUnsupported(){
    expectReturnsFalseOrThrows(sameElements);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent={ZERO,ONE}) public void testRetainAll_partialOverlap(){
    expectReturnsTrue(partialOverlap);
    expectContents(e2());
  }
  @CollectionFeature.Require(absent=SUPPORTS_REMOVE) @CollectionSize.Require(absent={ZERO,ONE}) public void testRetainAll_partialOverlapUnsupported(){
    expectThrows(partialOverlap);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(ONE) public void testRetainAll_containsDuplicatesSizeOne(){
    expectReturnsFalse(containsDuplicates);
    expectContents(e0());
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent={ZERO,ONE}) public void testRetainAll_containsDuplicatesSizeSeveral(){
    expectReturnsTrue(containsDuplicates);
    expectContents(e0());
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(ZERO) public void testRetainAll_nullSingletonPreviouslyEmpty(){
    expectReturnsFalse(nullSingleton);
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRetainAll_nullSingletonPreviouslyNonEmpty(){
    expectReturnsTrue(nullSingleton);
    expectContents();
  }
  @CollectionFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_VALUES}) @CollectionSize.Require(ONE) public void testRetainAll_nullSingletonPreviouslySingletonWithNull(){
    initCollectionWithNullElement();
    expectReturnsFalse(nullSingleton);
    expectContents(createArrayWithNullElement());
  }
  @CollectionFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_VALUES}) @CollectionSize.Require(absent={ZERO,ONE}) public void testRetainAll_nullSingletonPreviouslySeveralWithNull(){
    initCollectionWithNullElement();
    expectReturnsTrue(nullSingleton);
    expectContents(nullSingleton.toRetain);
  }
  @CollectionFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_VALUES}) @CollectionSize.Require(absent=ZERO) public void testRetainAll_containsNonNullWithNull(){
    initCollectionWithNullElement();
    expectReturnsTrue(disjoint);
    expectContents();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(ZERO) public void testRetainAll_nullCollectionReferenceEmptySubject(){
    try {
      collection.retainAll(null);
    }
 catch (    NullPointerException tolerated) {
    }
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRetainAll_nullCollectionReferenceNonEmptySubject(){
    try {
      collection.retainAll(null);
      fail("retainAll(null) should throw NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
  }
  private void expectReturnsTrue(  Target target){
    String message=Platform.format("retainAll(%s) should return true",target);
    assertTrue(message,collection.retainAll(target.toRetain));
  }
  private void expectReturnsFalse(  Target target){
    String message=Platform.format("retainAll(%s) should return false",target);
    assertFalse(message,collection.retainAll(target.toRetain));
  }
  private void expectThrows(  Target target){
    try {
      collection.retainAll(target.toRetain);
      String message=Platform.format("retainAll(%s) should throw",target);
      fail(message);
    }
 catch (    UnsupportedOperationException expected) {
    }
  }
  private void expectReturnsFalseOrThrows(  Target target){
    String message=Platform.format("retainAll(%s) should return false or throw",target);
    try {
      assertFalse(message,collection.retainAll(target.toRetain));
    }
 catch (    UnsupportedOperationException tolerated) {
    }
  }
}
