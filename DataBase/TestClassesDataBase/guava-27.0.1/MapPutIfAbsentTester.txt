/** 
 * A generic JUnit test which tests  {@link Map#putIfAbsent}. Can't be invoked directly; please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MapPutIfAbsentTester<K,V> extends AbstractMapTester<K,V> {
  @MapFeature.Require(SUPPORTS_PUT) public void testPutIfAbsent_supportedAbsent(){
    assertNull("putIfAbsent(notPresent, value) should return null",getMap().putIfAbsent(k3(),v3()));
    expectAdded(e3());
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutIfAbsent_supportedPresent(){
    assertEquals("putIfAbsent(present, value) should return existing value",v0(),getMap().putIfAbsent(k0(),v3()));
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) public void testPutIfAbsent_unsupportedAbsent(){
    try {
      getMap().putIfAbsent(k3(),v3());
      fail("putIfAbsent(notPresent, value) should throw");
    }
 catch (    UnsupportedOperationException expected) {
    }
    expectUnchanged();
    expectMissing(e3());
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutIfAbsent_unsupportedPresentExistingValue(){
    try {
      assertEquals("putIfAbsent(present, existingValue) should return present or throw",v0(),getMap().putIfAbsent(k0(),v0()));
    }
 catch (    UnsupportedOperationException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutIfAbsent_unsupportedPresentDifferentValue(){
    try {
      getMap().putIfAbsent(k0(),v3());
    }
 catch (    UnsupportedOperationException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_KEYS) public void testPutIfAbsent_nullKeyUnsupported(){
    try {
      getMap().putIfAbsent(null,v3());
      fail("putIfAbsent(null, value) should throw");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
    expectNullKeyMissingWhenNullKeysUnsupported("Should not contain null key after unsupported putIfAbsent(null, value)");
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUES) public void testPutIfAbsent_nullValueUnsupported(){
    try {
      getMap().putIfAbsent(k3(),null);
      fail("putIfAbsent(key, null) should throw");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
    expectNullValueMissingWhenNullValuesUnsupported("Should not contain null value after unsupported put(key, null)");
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUES) @CollectionSize.Require(absent=ZERO) public void testPutIfAbsent_putWithNullValueUnsupported(){
    try {
      getMap().putIfAbsent(k0(),null);
    }
 catch (    NullPointerException tolerated) {
    }
    expectUnchanged();
    expectNullValueMissingWhenNullValuesUnsupported("Should not contain null after unsupported putIfAbsent(present, null)");
  }
}
