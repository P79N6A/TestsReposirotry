/** 
 * Abstract base class for testing implementations of  {@link Graph} interface.<p>This class is responsible for testing that a directed implementation of  {@link Graph} iscorrectly handling directed edges. Implementation-dependent test cases are left to subclasses. Test cases that do not require the graph to be directed are found in superclasses.
 */
public abstract class AbstractDirectedGraphTest extends AbstractGraphTest {
  @Test public void predecessors_oneEdge(){
    putEdge(N1,N2);
    assertThat(graph.predecessors(N2)).containsExactly(N1);
    assertThat(graph.predecessors(N1)).isEmpty();
  }
  @Test public void successors_oneEdge(){
    putEdge(N1,N2);
    assertThat(graph.successors(N1)).containsExactly(N2);
    assertThat(graph.successors(N2)).isEmpty();
  }
  @Test public void incidentEdges_oneEdge(){
    putEdge(N1,N2);
    EndpointPair<Integer> expectedEndpoints=EndpointPair.ordered(N1,N2);
    assertThat(graph.incidentEdges(N1)).containsExactly(expectedEndpoints);
    assertThat(graph.incidentEdges(N2)).containsExactly(expectedEndpoints);
  }
  @Test public void inDegree_oneEdge(){
    putEdge(N1,N2);
    assertThat(graph.inDegree(N2)).isEqualTo(1);
    assertThat(graph.inDegree(N1)).isEqualTo(0);
  }
  @Test public void outDegree_oneEdge(){
    putEdge(N1,N2);
    assertThat(graph.outDegree(N1)).isEqualTo(1);
    assertThat(graph.outDegree(N2)).isEqualTo(0);
  }
  @Test public void addEdge_existingNodes(){
    addNode(N1);
    addNode(N2);
    assertThat(putEdge(N1,N2)).isTrue();
  }
  @Test public void addEdge_existingEdgeBetweenSameNodes(){
    putEdge(N1,N2);
    assertThat(putEdge(N1,N2)).isFalse();
  }
  public void removeEdge_antiparallelEdges(){
    putEdge(N1,N2);
    putEdge(N2,N1);
    assertThat(graph.removeEdge(N1,N2)).isTrue();
    assertThat(graph.successors(N1)).isEmpty();
    assertThat(graph.predecessors(N1)).containsExactly(N2);
    assertThat(graph.edges()).hasSize(1);
    assertThat(graph.removeEdge(N2,N1)).isTrue();
    assertThat(graph.successors(N1)).isEmpty();
    assertThat(graph.predecessors(N1)).isEmpty();
    assertThat(graph.edges()).isEmpty();
  }
}
