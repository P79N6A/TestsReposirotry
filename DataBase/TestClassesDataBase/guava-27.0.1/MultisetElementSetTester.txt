/** 
 * Tests for  {@code Multiset.elementSet()} not covered by the derived {@code SetTestSuiteBuilder}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MultisetElementSetTester<E> extends AbstractMultisetTester<E> {
  @CollectionFeature.Require(SUPPORTS_ADD) public void testElementSetReflectsAddAbsent(){
    Set<E> elementSet=getMultiset().elementSet();
    assertFalse(elementSet.contains(e3()));
    getMultiset().add(e3(),4);
    assertTrue(elementSet.contains(e3()));
  }
  @CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetReflectsRemove(){
    Set<E> elementSet=getMultiset().elementSet();
    assertTrue(elementSet.contains(e0()));
    getMultiset().removeAll(Collections.singleton(e0()));
    assertFalse(elementSet.contains(e0()));
  }
  @CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemovePropagatesToMultiset(){
    Set<E> elementSet=getMultiset().elementSet();
    int size=getNumElements();
    int expectedSize=size - getMultiset().count(e0());
    assertTrue(elementSet.remove(e0()));
    assertFalse(getMultiset().contains(e0()));
    assertEquals(expectedSize,getMultiset().size());
  }
  @CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemoveDuplicatePropagatesToMultiset(){
    initThreeCopies();
    int size=getNumElements();
    int expectedSize=size - getMultiset().count(e0());
    Set<E> elementSet=getMultiset().elementSet();
    assertTrue(elementSet.remove(e0()));
    assertEmpty(getMultiset());
    assertEquals(expectedSize,getMultiset().size());
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemoveAbsent(){
    Set<E> elementSet=getMultiset().elementSet();
    assertFalse(elementSet.remove(e3()));
    expectUnchanged();
  }
  @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetClear(){
    getMultiset().elementSet().clear();
    assertEmpty(getMultiset());
  }
  /** 
 * Returns  {@link Method} instances for the read tests that assume multisets support duplicates sothat the test of  {@code Multisets.forSet()} can suppress them.
 */
  @GwtIncompatible public static List<Method> getElementSetDuplicateInitializingMethods(){
    return Arrays.asList(Helpers.getMethod(MultisetElementSetTester.class,"testElementSetRemoveDuplicatePropagatesToMultiset"));
  }
}
