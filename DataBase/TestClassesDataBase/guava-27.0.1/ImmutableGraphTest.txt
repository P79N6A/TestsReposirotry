/** 
 * Tests for  {@link ImmutableGraph} and {@link ImmutableValueGraph} . 
 */
@RunWith(JUnit4.class) public class ImmutableGraphTest {
  @Test public void immutableGraph(){
    MutableGraph<String> mutableGraph=GraphBuilder.directed().build();
    mutableGraph.addNode("A");
    ImmutableGraph<String> immutableGraph=ImmutableGraph.copyOf(mutableGraph);
    assertThat(immutableGraph).isNotInstanceOf(MutableValueGraph.class);
    assertThat(immutableGraph).isEqualTo(mutableGraph);
    mutableGraph.addNode("B");
    assertThat(immutableGraph).isNotEqualTo(mutableGraph);
  }
  @Test public void immutableValueGraph(){
    MutableValueGraph<String,Integer> mutableValueGraph=ValueGraphBuilder.directed().build();
    mutableValueGraph.addNode("A");
    ImmutableValueGraph<String,Integer> immutableValueGraph=ImmutableValueGraph.copyOf(mutableValueGraph);
    assertThat(immutableValueGraph.asGraph()).isInstanceOf(ImmutableGraph.class);
    assertThat(immutableValueGraph).isNotInstanceOf(MutableValueGraph.class);
    assertThat(immutableValueGraph).isEqualTo(mutableValueGraph);
    mutableValueGraph.addNode("B");
    assertThat(immutableValueGraph).isNotEqualTo(mutableValueGraph);
  }
  @Test public void copyOfImmutableGraph_optimized(){
    Graph<String> graph1=ImmutableGraph.copyOf(GraphBuilder.directed().<String>build());
    Graph<String> graph2=ImmutableGraph.copyOf(graph1);
    assertThat(graph2).isSameAs(graph1);
  }
  @Test public void copyOfImmutableValueGraph_optimized(){
    ValueGraph<String,Integer> graph1=ImmutableValueGraph.copyOf(ValueGraphBuilder.directed().<String,Integer>build());
    ValueGraph<String,Integer> graph2=ImmutableValueGraph.copyOf(graph1);
    assertThat(graph2).isSameAs(graph1);
  }
}
