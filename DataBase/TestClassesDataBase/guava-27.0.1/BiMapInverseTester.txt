/** 
 * Tests for the  {@code inverse} view of a BiMap.<p>This assumes that  {@code bimap.inverse().inverse() == bimap}, which is not technically required but is fulfilled by all current implementations.
 * @author Louis Wasserman
 */
@GwtCompatible(emulated=true) @Ignore public class BiMapInverseTester<K,V> extends AbstractBiMapTester<K,V> {
  public void testInverseSame(){
    assertSame(getMap(),getMap().inverse().inverse());
  }
  @CollectionFeature.Require(SERIALIZABLE) public void testInverseSerialization(){
    BiMapPair<K,V> pair=new BiMapPair<>(getMap());
    BiMapPair<K,V> copy=SerializableTester.reserialize(pair);
    assertEquals(pair.forward,copy.forward);
    assertEquals(pair.backward,copy.backward);
    assertSame(copy.backward,copy.forward.inverse());
    assertSame(copy.forward,copy.backward.inverse());
  }
private static class BiMapPair<K,V> implements Serializable {
    final BiMap<K,V> forward;
    final BiMap<V,K> backward;
    BiMapPair(    BiMap<K,V> original){
      this.forward=original;
      this.backward=original.inverse();
    }
    private static final long serialVersionUID=0;
  }
  /** 
 * Returns  {@link Method} instances for the tests that assume that the inverse will be the sameafter serialization.
 */
  @GwtIncompatible public static List<Method> getInverseSameAfterSerializingMethods(){
    return Collections.singletonList(getMethod("testInverseSerialization"));
  }
  @GwtIncompatible private static Method getMethod(  String methodName){
    return Helpers.getMethod(BiMapInverseTester.class,methodName);
  }
}
