/** 
 * Tests for  {@link Multimap#asMap}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MultimapAsMapTester<K,V> extends AbstractMultimapTester<K,V,Multimap<K,V>> {
  public void testAsMapGet(){
    for (    K key : sampleKeys()) {
      List<V> expectedValues=new ArrayList<>();
      for (      Entry<K,V> entry : getSampleElements()) {
        if (entry.getKey().equals(key)) {
          expectedValues.add(entry.getValue());
        }
      }
      Collection<V> collection=multimap().asMap().get(key);
      if (expectedValues.isEmpty()) {
        assertNull(collection);
      }
 else {
        assertEqualIgnoringOrder(expectedValues,collection);
      }
    }
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(ALLOWS_NULL_KEYS) public void testAsMapGetNullKeyPresent(){
    initMultimapWithNullKey();
    assertContentsAnyOrder(multimap().asMap().get(null),getValueForNullKey());
  }
  @MapFeature.Require(ALLOWS_NULL_KEY_QUERIES) public void testAsMapGetNullKeyAbsent(){
    assertNull(multimap().asMap().get(null));
  }
  @MapFeature.Require(absent=ALLOWS_NULL_KEY_QUERIES) public void testAsMapGetNullKeyUnsupported(){
    try {
      multimap().asMap().get(null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testAsMapRemove(){
    assertContentsInOrder(multimap().asMap().remove(k0()),v0());
    assertGet(k0());
    assertEquals(getNumElements() - 1,multimap().size());
  }
  @CollectionSize.Require(SEVERAL) @MapFeature.Require(SUPPORTS_PUT) public void testAsMapEntrySetReflectsPutSameKey(){
    resetContainer(Helpers.mapEntry(k0(),v0()),Helpers.mapEntry(k0(),v3()));
    Set<Entry<K,Collection<V>>> asMapEntrySet=multimap().asMap().entrySet();
    Collection<V> valueCollection=Iterables.getOnlyElement(asMapEntrySet).getValue();
    assertContentsAnyOrder(valueCollection,v0(),v3());
    assertTrue(multimap().put(k0(),v4()));
    assertContentsAnyOrder(valueCollection,v0(),v3(),v4());
  }
  @CollectionSize.Require(SEVERAL) @MapFeature.Require(SUPPORTS_PUT) public void testAsMapEntrySetReflectsPutDifferentKey(){
    resetContainer(Helpers.mapEntry(k0(),v0()),Helpers.mapEntry(k0(),v3()));
    Set<Entry<K,Collection<V>>> asMapEntrySet=multimap().asMap().entrySet();
    assertTrue(multimap().put(k1(),v4()));
    assertEquals(2,asMapEntrySet.size());
  }
  @CollectionSize.Require(SEVERAL) @MapFeature.Require({SUPPORTS_PUT,SUPPORTS_REMOVE}) public void testAsMapEntrySetRemovePropagatesToMultimap(){
    resetContainer(Helpers.mapEntry(k0(),v0()),Helpers.mapEntry(k0(),v3()));
    Set<Entry<K,Collection<V>>> asMapEntrySet=multimap().asMap().entrySet();
    Entry<K,Collection<V>> asMapEntry0=Iterables.getOnlyElement(asMapEntrySet);
    assertTrue(multimap().put(k1(),v4()));
    assertTrue(asMapEntrySet.remove(asMapEntry0));
    assertEquals(1,multimap().size());
    assertContentsInOrder(multimap().keySet(),k1());
  }
  @CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE) public void testAsMapEntrySetIteratorRemovePropagatesToMultimap(){
    resetContainer(Helpers.mapEntry(k0(),v0()),Helpers.mapEntry(k0(),v3()));
    Set<Entry<K,Collection<V>>> asMapEntrySet=multimap().asMap().entrySet();
    Iterator<Entry<K,Collection<V>>> asMapEntryItr=asMapEntrySet.iterator();
    asMapEntryItr.next();
    asMapEntryItr.remove();
    assertTrue(multimap().isEmpty());
  }
}
