/** 
 * A generic JUnit test which tests  {@link Map#replace(Object,Object,Object)}. Can't be invoked directly; please see  {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MapReplaceEntryTester<K,V> extends AbstractMapTester<K,V> {
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_supportedPresent(){
    try {
      assertTrue(getMap().replace(k0(),v0(),v3()));
      expectReplacement(entry(k0(),v3()));
    }
 catch (    ClassCastException tolerated) {
      expectUnchanged();
    }
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_supportedPresentUnchanged(){
    assertTrue(getMap().replace(k0(),v0(),v0()));
    expectUnchanged();
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_supportedWrongValue(){
    assertFalse(getMap().replace(k0(),v3(),v4()));
    expectUnchanged();
  }
  @MapFeature.Require(SUPPORTS_PUT) public void testReplaceEntry_supportedAbsentKey(){
    assertFalse(getMap().replace(k3(),v3(),v4()));
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUES) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_presentNullValueUnsupported(){
    try {
      getMap().replace(k0(),v0(),null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUE_QUERIES) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_wrongValueNullValueUnsupported(){
    try {
      assertFalse(getMap().replace(k0(),v3(),null));
    }
 catch (    NullPointerException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUE_QUERIES) public void testReplaceEntry_absentKeyNullValueUnsupported(){
    try {
      assertFalse(getMap().replace(k3(),v3(),null));
    }
 catch (    NullPointerException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require({SUPPORTS_PUT,ALLOWS_NULL_VALUE_QUERIES}) public void testReplaceEntry_nullDifferentFromAbsent(){
    assertFalse(getMap().replace(k3(),null,v3()));
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUE_QUERIES) public void testReplaceEntry_expectNullUnsupported(){
    try {
      assertFalse(getMap().replace(k3(),null,v3()));
    }
 catch (    NullPointerException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_unsupportedPresent(){
    try {
      getMap().replace(k0(),v0(),v3());
      fail("Expected UnsupportedOperationException");
    }
 catch (    UnsupportedOperationException expected) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplaceEntry_unsupportedWrongValue(){
    try {
      getMap().replace(k0(),v3(),v4());
    }
 catch (    UnsupportedOperationException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) public void testReplaceEntry_unsupportedAbsentKey(){
    try {
      getMap().replace(k3(),v3(),v4());
    }
 catch (    UnsupportedOperationException tolerated) {
    }
    expectUnchanged();
  }
}
