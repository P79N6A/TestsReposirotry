/** 
 * Tests for  {@code Multiset#count}.
 * @author Jared Levy
 */
@GwtCompatible(emulated=true) @Ignore public class MultisetCountTester<E> extends AbstractMultisetTester<E> {
  public void testCount_0(){
    assertEquals("multiset.count(missing) didn't return 0",0,getMultiset().count(e3()));
  }
  @CollectionSize.Require(absent=ZERO) public void testCount_1(){
    assertEquals("multiset.count(present) didn't return 1",1,getMultiset().count(e0()));
  }
  @CollectionSize.Require(SEVERAL) public void testCount_3(){
    initThreeCopies();
    assertEquals("multiset.count(thriceContained) didn't return 3",3,getMultiset().count(e0()));
  }
  @CollectionFeature.Require(ALLOWS_NULL_QUERIES) public void testCount_nullAbsent(){
    assertEquals("multiset.count(null) didn't return 0",0,getMultiset().count(null));
  }
  @CollectionFeature.Require(absent=ALLOWS_NULL_QUERIES) public void testCount_null_forbidden(){
    try {
      getMultiset().count(null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
  }
  @CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(ALLOWS_NULL_VALUES) public void testCount_nullPresent(){
    initCollectionWithNullElement();
    assertEquals(1,getMultiset().count(null));
  }
  public void testCount_wrongType(){
    assertEquals("multiset.count(wrongType) didn't return 0",0,getMultiset().count(WrongType.VALUE));
  }
  /** 
 * Returns  {@link Method} instances for the read tests that assume multisets support duplicates sothat the test of  {@code Multisets.forSet()} can suppress them.
 */
  @GwtIncompatible public static List<Method> getCountDuplicateInitializingMethods(){
    return Arrays.asList(Helpers.getMethod(MultisetCountTester.class,"testCount_3"));
  }
}
