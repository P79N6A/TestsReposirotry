/** 
 * A generic JUnit test which tests  {@code iterator} operations on a collection. Can't be invokeddirectly; please see  {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.
 * @author Chris Povirk
 */
@GwtCompatible(emulated=true) @Ignore public class CollectionIteratorTester<E> extends AbstractCollectionTester<E> {
  public void testIterator(){
    List<E> iteratorElements=new ArrayList<E>();
    for (    E element : collection) {
      iteratorElements.add(element);
    }
    Helpers.assertEqualIgnoringOrder(Arrays.asList(createSamplesArray()),iteratorElements);
  }
  @CollectionFeature.Require(KNOWN_ORDER) public void testIterationOrdering(){
    List<E> iteratorElements=new ArrayList<E>();
    for (    E element : collection) {
      iteratorElements.add(element);
    }
    List<E> expected=Helpers.copyToList(getOrderedElements());
    assertEquals("Different ordered iteration",expected,iteratorElements);
  }
  @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE) @CollectionSize.Require(absent=ZERO) public void testIterator_removeAffectsBackingCollection(){
    int originalSize=collection.size();
    Iterator<E> iterator=collection.iterator();
    Object element=iterator.next();
    if (element instanceof Entry) {
      Entry<?,?> entry=(Entry<?,?>)element;
      element=mapEntry(entry.getKey(),entry.getValue());
    }
    assertTrue(collection.contains(element));
    iterator.remove();
    assertFalse(collection.contains(element));
    assertEquals(originalSize - 1,collection.size());
  }
  @CollectionFeature.Require({KNOWN_ORDER,SUPPORTS_ITERATOR_REMOVE}) public void testIterator_knownOrderRemoveSupported(){
    runIteratorTest(MODIFIABLE,IteratorTester.KnownOrder.KNOWN_ORDER,getOrderedElements());
  }
  @CollectionFeature.Require(value=KNOWN_ORDER,absent=SUPPORTS_ITERATOR_REMOVE) public void testIterator_knownOrderRemoveUnsupported(){
    runIteratorTest(UNMODIFIABLE,IteratorTester.KnownOrder.KNOWN_ORDER,getOrderedElements());
  }
  @CollectionFeature.Require(absent=KNOWN_ORDER,value=SUPPORTS_ITERATOR_REMOVE) public void testIterator_unknownOrderRemoveSupported(){
    runIteratorTest(MODIFIABLE,IteratorTester.KnownOrder.UNKNOWN_ORDER,getSampleElements());
  }
  @CollectionFeature.Require(absent={KNOWN_ORDER,SUPPORTS_ITERATOR_REMOVE}) public void testIterator_unknownOrderRemoveUnsupported(){
    runIteratorTest(UNMODIFIABLE,IteratorTester.KnownOrder.UNKNOWN_ORDER,getSampleElements());
  }
  private void runIteratorTest(  Set<IteratorFeature> features,  IteratorTester.KnownOrder knownOrder,  Iterable<E> elements){
    new IteratorTester<E>(Platform.collectionIteratorTesterNumIterations(),features,elements,knownOrder){
      @Override protected Iterator<E> newTargetIterator(){
        resetCollection();
        return collection.iterator();
      }
      @Override protected void verify(      List<E> elements){
        expectContents(elements);
      }
    }
.test();
  }
  public void testIteratorNoSuchElementException(){
    Iterator<E> iterator=collection.iterator();
    while (iterator.hasNext()) {
      iterator.next();
    }
    try {
      iterator.next();
      fail("iterator.next() should throw NoSuchElementException");
    }
 catch (    NoSuchElementException expected) {
    }
  }
}
