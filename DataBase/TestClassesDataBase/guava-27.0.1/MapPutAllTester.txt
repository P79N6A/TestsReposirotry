/** 
 * A generic JUnit test which tests  {@code putAll} operations on a map. Can't be invoked directly;please see  {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 * @author Chris Povirk
 * @author Kevin Bourrillion
 */
@SuppressWarnings("unchecked") @GwtCompatible(emulated=true) @Ignore public class MapPutAllTester<K,V> extends AbstractMapTester<K,V> {
  private List<Entry<K,V>> containsNullKey;
  private List<Entry<K,V>> containsNullValue;
  @Override public void setUp() throws Exception {
    super.setUp();
    containsNullKey=singletonList(entry(null,v3()));
    containsNullValue=singletonList(entry(k3(),null));
  }
  @MapFeature.Require(SUPPORTS_PUT) public void testPutAll_supportedNothing(){
    getMap().putAll(emptyMap());
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) public void testPutAll_unsupportedNothing(){
    try {
      getMap().putAll(emptyMap());
    }
 catch (    UnsupportedOperationException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(SUPPORTS_PUT) public void testPutAll_supportedNonePresent(){
    putAll(createDisjointCollection());
    expectAdded(e3(),e4());
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) public void testPutAll_unsupportedNonePresent(){
    try {
      putAll(createDisjointCollection());
      fail("putAll(nonePresent) should throw");
    }
 catch (    UnsupportedOperationException expected) {
    }
    expectUnchanged();
    expectMissing(e3(),e4());
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutAll_supportedSomePresent(){
    putAll(MinimalCollection.of(e3(),e0()));
    expectAdded(e3());
  }
  @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION,SUPPORTS_PUT}) @CollectionSize.Require(absent=ZERO) public void testPutAllSomePresentConcurrentWithEntrySetIteration(){
    try {
      Iterator<Entry<K,V>> iterator=getMap().entrySet().iterator();
      putAll(MinimalCollection.of(e3(),e0()));
      iterator.next();
      fail("Expected ConcurrentModificationException");
    }
 catch (    ConcurrentModificationException expected) {
    }
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutAll_unsupportedSomePresent(){
    try {
      putAll(MinimalCollection.of(e3(),e0()));
      fail("putAll(somePresent) should throw");
    }
 catch (    UnsupportedOperationException expected) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutAll_unsupportedAllPresent(){
    try {
      putAll(MinimalCollection.of(e0()));
    }
 catch (    UnsupportedOperationException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require({SUPPORTS_PUT,ALLOWS_NULL_KEYS}) public void testPutAll_nullKeySupported(){
    putAll(containsNullKey);
    expectAdded(containsNullKey.get(0));
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_KEYS) public void testPutAll_nullKeyUnsupported(){
    try {
      putAll(containsNullKey);
      fail("putAll(containsNullKey) should throw");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
    expectNullKeyMissingWhenNullKeysUnsupported("Should not contain null key after unsupported putAll(containsNullKey)");
  }
  @MapFeature.Require({SUPPORTS_PUT,ALLOWS_NULL_VALUES}) public void testPutAll_nullValueSupported(){
    putAll(containsNullValue);
    expectAdded(containsNullValue.get(0));
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUES) public void testPutAll_nullValueUnsupported(){
    try {
      putAll(containsNullValue);
      fail("putAll(containsNullValue) should throw");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
    expectNullValueMissingWhenNullValuesUnsupported("Should not contain null value after unsupported putAll(containsNullValue)");
  }
  @MapFeature.Require(SUPPORTS_PUT) public void testPutAll_nullCollectionReference(){
    try {
      getMap().putAll(null);
      fail("putAll(null) should throw NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
  }
  private Map<K,V> emptyMap(){
    return Collections.emptyMap();
  }
  private void putAll(  Iterable<Entry<K,V>> entries){
    Map<K,V> map=new LinkedHashMap<>();
    for (    Entry<K,V> entry : entries) {
      map.put(entry.getKey(),entry.getValue());
    }
    getMap().putAll(map);
  }
  /** 
 * Returns the  {@link Method} instance for {@link #testPutAll_nullKeyUnsupported()} so that testscan suppress it with  {@code FeatureSpecificTestSuiteBuilder.suppressing()} until <ahref="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5045147">Sun bug 5045147</a> is fixed.
 */
  @GwtIncompatible public static Method getPutAllNullKeyUnsupportedMethod(){
    return Helpers.getMethod(MapPutAllTester.class,"testPutAll_nullKeyUnsupported");
  }
}
