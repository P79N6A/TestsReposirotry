/** 
 * Tests  {@link java.util.Set#hashCode}.
 * @author George van den Driessche
 */
@GwtCompatible(emulated=true) @Ignore public class SetHashCodeTester<E> extends AbstractSetTester<E> {
  public void testHashCode(){
    int expectedHashCode=0;
    for (    E element : getSampleElements()) {
      expectedHashCode+=((element == null) ? 0 : element.hashCode());
    }
    assertEquals("A Set's hashCode() should be the sum of those of its elements.",expectedHashCode,getSet().hashCode());
  }
  @CollectionSize.Require(absent=CollectionSize.ZERO) @CollectionFeature.Require(ALLOWS_NULL_VALUES) public void testHashCode_containingNull(){
    Collection<E> elements=getSampleElements(getNumElements() - 1);
    int expectedHashCode=0;
    for (    E element : elements) {
      expectedHashCode+=((element == null) ? 0 : element.hashCode());
    }
    elements.add(null);
    collection=getSubjectGenerator().create(elements.toArray());
    assertEquals("A Set's hashCode() should be the sum of those of its elements (with " + "a null element counting as having a hash of zero).",expectedHashCode,getSet().hashCode());
  }
  /** 
 * Returns the  {@link Method} instances for the test methods in this class which call {@code hashCode()} on the set values so that set tests on unhashable objects can suppress it with{@code FeatureSpecificTestSuiteBuilder.suppressing()}.
 */
  @GwtIncompatible public static Method[] getHashCodeMethods(){
    return new Method[]{Helpers.getMethod(SetHashCodeTester.class,"testHashCode"),Helpers.getMethod(SetHashCodeTester.class,"testHashCode_containingNull")};
  }
}
