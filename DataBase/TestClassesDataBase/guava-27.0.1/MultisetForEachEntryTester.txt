/** 
 * Tests for  {@code Multiset#forEachEntry}.
 * @author Louis Wasserman
 */
@GwtCompatible(emulated=true) @Ignore public class MultisetForEachEntryTester<E> extends AbstractMultisetTester<E> {
  public void testForEachEntry(){
    List<Entry<E>> expected=new ArrayList<>(getMultiset().entrySet());
    List<Entry<E>> actual=new ArrayList<>();
    getMultiset().forEachEntry((element,count) -> actual.add(Multisets.immutableEntry(element,count)));
    Helpers.assertEqualIgnoringOrder(expected,actual);
  }
  @CollectionFeature.Require(KNOWN_ORDER) public void testForEachEntryOrdered(){
    List<Entry<E>> expected=new ArrayList<>(getMultiset().entrySet());
    List<Entry<E>> actual=new ArrayList<>();
    getMultiset().forEachEntry((element,count) -> actual.add(Multisets.immutableEntry(element,count)));
    assertEquals(expected,actual);
  }
  public void testForEachEntryDuplicates(){
    initThreeCopies();
    List<Entry<E>> expected=Collections.singletonList(Multisets.immutableEntry(e0(),3));
    List<Entry<E>> actual=new ArrayList<>();
    getMultiset().forEachEntry((element,count) -> actual.add(Multisets.immutableEntry(element,count)));
    assertEquals(expected,actual);
  }
  /** 
 * Returns  {@link Method} instances for the remove tests that assume multisets support duplicatesso that the test of  {@code Multisets.forSet()} can suppress them.
 */
  @GwtIncompatible public static List<Method> getForEachEntryDuplicateInitializingMethods(){
    return Arrays.asList(Helpers.getMethod(MultisetForEachEntryTester.class,"testForEachEntryDuplicates"));
  }
}
