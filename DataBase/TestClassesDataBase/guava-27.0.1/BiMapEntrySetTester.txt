/** 
 * Tester for  {@code BiMap.entrySet} and methods on the entries in the set. 
 */
@GwtCompatible @Ignore public class BiMapEntrySetTester<K,V> extends AbstractBiMapTester<K,V> {
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testSetValue_valueAbsent(){
    for (    Entry<K,V> entry : getMap().entrySet()) {
      if (entry.getKey().equals(k0())) {
        assertEquals("entry.setValue() should return the old value",v0(),entry.setValue(v3()));
      }
    }
    expectReplacement(entry(k0(),v3()));
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(SEVERAL) public void testSetValue_valuePresent(){
    for (    Entry<K,V> entry : getMap().entrySet()) {
      if (entry.getKey().equals(k0())) {
        try {
          entry.setValue(v1());
          fail("Expected IllegalArgumentException");
        }
 catch (        IllegalArgumentException expected) {
        }
      }
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUES) @CollectionSize.Require(absent=ZERO) public void testSetValueNullUnsupported(){
    for (    Entry<K,V> entry : getMap().entrySet()) {
      try {
        entry.setValue(null);
        fail("Expected NullPointerException");
      }
 catch (      NullPointerException expected) {
      }
      expectUnchanged();
    }
  }
  @MapFeature.Require({SUPPORTS_PUT,ALLOWS_NULL_VALUES}) @CollectionSize.Require(absent=ZERO) public void testSetValueNullSupported(){
    for (    Entry<K,V> entry : getMap().entrySet()) {
      if (entry.getKey().equals(k0())) {
        entry.setValue(null);
      }
    }
    expectReplacement(entry(k0(),(V)null));
  }
}
