/** 
 * A generic JUnit test which tests conditional  {@code setCount()} operations on a multiset. Can'tbe invoked directly; please see  {@link MultisetTestSuiteBuilder}.
 * @author Chris Povirk
 */
@GwtCompatible @Ignore public class MultisetSetCountConditionallyTester<E> extends AbstractMultisetSetCountTester<E> {
  @Override void setCountCheckReturnValue(  E element,  int count){
    assertTrue("setCount() with the correct expected present count should return true",setCount(element,count));
  }
  @Override void setCountNoCheckReturnValue(  E element,  int count){
    setCount(element,count);
  }
  private boolean setCount(  E element,  int count){
    return getMultiset().setCount(element,getMultiset().count(element),count);
  }
  private void assertSetCountNegativeOldCount(){
    try {
      getMultiset().setCount(e3(),-1,1);
      fail("calling setCount() with a negative oldCount should throw IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @CollectionFeature.Require(SUPPORTS_ADD) public void testSetCountConditional_negativeOldCount_addSupported(){
    assertSetCountNegativeOldCount();
  }
  @CollectionFeature.Require(absent=SUPPORTS_ADD) public void testSetCountConditional_negativeOldCount_addUnsupported(){
    try {
      assertSetCountNegativeOldCount();
    }
 catch (    UnsupportedOperationException tolerated) {
    }
  }
  @CollectionFeature.Require(SUPPORTS_ADD) public void testSetCountConditional_oldCountTooLarge(){
    assertFalse("setCount() with a too-large oldCount should return false",getMultiset().setCount(e0(),2,3));
    expectUnchanged();
  }
  @CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_ADD) public void testSetCountConditional_oldCountTooSmallZero(){
    assertFalse("setCount() with a too-small oldCount should return false",getMultiset().setCount(e0(),0,2));
    expectUnchanged();
  }
  @CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_ADD) public void testSetCountConditional_oldCountTooSmallNonzero(){
    initThreeCopies();
    assertFalse("setCount() with a too-small oldCount should return false",getMultiset().setCount(e0(),1,5));
    expectContents(nCopies(3,e0()));
  }
}
