/** 
 * Testers for  {@link ListMultimap#put(Object,Object)}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class ListMultimapPutTester<K,V> extends AbstractListMultimapTester<K,V> {
  @MapFeature.Require(SUPPORTS_PUT) public void testPutAddsValueAtEnd(){
    for (    K key : sampleKeys()) {
      for (      V value : sampleValues()) {
        resetContainer();
        List<V> values=multimap().get(key);
        List<V> expectedValues=Helpers.copyToList(values);
        assertTrue(multimap().put(key,value));
        expectedValues.add(value);
        assertGet(key,expectedValues);
        assertEquals(value,values.get(values.size() - 1));
      }
    }
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testPutDuplicateValue(){
    List<Entry<K,V>> entries=copyToList(multimap().entries());
    for (    Entry<K,V> entry : entries) {
      resetContainer();
      K k=entry.getKey();
      V v=entry.getValue();
      List<V> values=multimap().get(k);
      List<V> expectedValues=copyToList(values);
      assertTrue(multimap().put(k,v));
      expectedValues.add(v);
      assertGet(k,expectedValues);
      assertEquals(v,values.get(values.size() - 1));
    }
  }
}
