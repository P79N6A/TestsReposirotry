/** 
 * Tests for a directed  {@link ConfigurableMutableNetwork} allowing parallel edges and self-loops.
 */
@RunWith(JUnit4.class) public class ConfigurableDirectedMultiNetworkTest extends ConfigurableDirectedNetworkTest {
  @Override public MutableNetwork<Integer,String> createGraph(){
    return NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
  }
  @Test public void adjacentEdges_parallelEdges(){
    addEdge(N1,N2,E12);
    addEdge(N1,N2,E12_A);
    addEdge(N1,N2,E12_B);
    addEdge(N3,N4,E34);
    assertThat(network.adjacentEdges(E12)).containsExactly(E12_A,E12_B);
  }
  @Test public void edgesConnecting_parallelEdges(){
    assertTrue(addEdge(N1,N2,E12));
    assertTrue(addEdge(N1,N2,E12_A));
    assertThat(network.edgesConnecting(N1,N2)).containsExactly(E12,E12_A);
    assertThat(network.edgesConnecting(N2,N1)).isEmpty();
  }
  @Test public void edgesConnecting_parallelSelfLoopEdges(){
    assertTrue(addEdge(N1,N1,E11));
    assertTrue(addEdge(N1,N1,E11_A));
    assertThat(network.edgesConnecting(N1,N1)).containsExactly(E11,E11_A);
  }
  @Override @Test public void addEdge_parallelEdge(){
    assertTrue(addEdge(N1,N2,E12));
    assertTrue(addEdge(N1,N2,E12_A));
    assertThat(network.edgesConnecting(N1,N2)).containsExactly(E12,E12_A);
  }
  @Override @Test public void addEdge_parallelSelfLoopEdge(){
    assertTrue(addEdge(N1,N1,E11));
    assertTrue(addEdge(N1,N1,E11_A));
    assertThat(network.edgesConnecting(N1,N1)).containsExactly(E11,E11_A);
  }
  @Test public void removeEdge_parallelEdge(){
    addEdge(N1,N2,E12);
    addEdge(N1,N2,E12_A);
    assertTrue(network.removeEdge(E12_A));
    assertThat(network.edgesConnecting(N1,N2)).containsExactly(E12);
  }
  @Test public void removeEdge_parallelSelfLoopEdge(){
    addEdge(N1,N1,E11);
    addEdge(N1,N1,E11_A);
    addEdge(N1,N2,E12);
    assertTrue(network.removeEdge(E11_A));
    assertThat(network.edgesConnecting(N1,N1)).containsExactly(E11);
    assertThat(network.edgesConnecting(N1,N2)).containsExactly(E12);
    assertTrue(network.removeEdge(E11));
    assertThat(network.edgesConnecting(N1,N1)).isEmpty();
    assertThat(network.edgesConnecting(N1,N2)).containsExactly(E12);
  }
}
