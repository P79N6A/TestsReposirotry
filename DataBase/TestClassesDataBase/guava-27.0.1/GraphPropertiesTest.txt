/** 
 * Tests for  {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}. 
 */
@RunWith(JUnit4.class) public class GraphPropertiesTest {
  ImmutableList<MutableGraph<Integer>> graphsToTest;
  Graph<Integer> directedGraph;
  Graph<Integer> undirectedGraph;
  ImmutableList<MutableNetwork<Integer,String>> networksToTest;
  Network<Integer,String> directedNetwork;
  Network<Integer,String> undirectedNetwork;
  @Before public void init(){
    MutableGraph<Integer> mutableDirectedGraph=GraphBuilder.directed().allowsSelfLoops(true).build();
    MutableGraph<Integer> mutableUndirectedGraph=GraphBuilder.undirected().allowsSelfLoops(true).build();
    graphsToTest=ImmutableList.of(mutableDirectedGraph,mutableUndirectedGraph);
    directedGraph=mutableDirectedGraph;
    undirectedGraph=mutableUndirectedGraph;
    MutableNetwork<Integer,String> mutableDirectedNetwork=NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
    MutableNetwork<Integer,String> mutableUndirectedNetwork=NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();
    networksToTest=ImmutableList.of(mutableDirectedNetwork,mutableUndirectedNetwork);
    directedNetwork=mutableDirectedNetwork;
    undirectedNetwork=mutableUndirectedNetwork;
  }
  @Test public void hasCycle_emptyGraph(){
    assertThat(hasCycle(directedGraph)).isFalse();
    assertThat(hasCycle(undirectedGraph)).isFalse();
  }
  @Test public void hasCycle_isolatedNodes(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.addNode(1);
      graph.addNode(2);
    }
    assertThat(hasCycle(directedGraph)).isFalse();
    assertThat(hasCycle(undirectedGraph)).isFalse();
  }
  @Test public void hasCycle_oneEdge(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
    }
    assertThat(hasCycle(directedGraph)).isFalse();
    assertThat(hasCycle(undirectedGraph)).isFalse();
  }
  @Test public void hasCycle_selfLoopEdge(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,1);
    }
    assertThat(hasCycle(directedGraph)).isTrue();
    assertThat(hasCycle(undirectedGraph)).isTrue();
  }
  @Test public void hasCycle_twoAcyclicEdges(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
      graph.putEdge(1,3);
    }
    assertThat(hasCycle(directedGraph)).isFalse();
    assertThat(hasCycle(undirectedGraph)).isFalse();
  }
  @Test public void hasCycle_twoCyclicEdges(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
      graph.putEdge(2,1);
    }
    assertThat(hasCycle(directedGraph)).isTrue();
    assertThat(hasCycle(undirectedGraph)).isFalse();
  }
  @Test public void hasCycle_threeAcyclicEdges(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
      graph.putEdge(2,3);
      graph.putEdge(1,3);
    }
    assertThat(hasCycle(directedGraph)).isFalse();
    assertThat(hasCycle(undirectedGraph)).isTrue();
  }
  @Test public void hasCycle_threeCyclicEdges(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
      graph.putEdge(2,3);
      graph.putEdge(3,1);
    }
    assertThat(hasCycle(directedGraph)).isTrue();
    assertThat(hasCycle(undirectedGraph)).isTrue();
  }
  @Test public void hasCycle_disconnectedCyclicGraph(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
      graph.putEdge(2,1);
      graph.addNode(3);
    }
    assertThat(hasCycle(directedGraph)).isTrue();
    assertThat(hasCycle(undirectedGraph)).isFalse();
  }
  @Test public void hasCycle_multipleCycles(){
    for (    MutableGraph<Integer> graph : graphsToTest) {
      graph.putEdge(1,2);
      graph.putEdge(2,1);
      graph.putEdge(2,3);
      graph.putEdge(3,1);
    }
    assertThat(hasCycle(directedGraph)).isTrue();
    assertThat(hasCycle(undirectedGraph)).isTrue();
  }
  @Test public void hasCycle_twoParallelEdges(){
    for (    MutableNetwork<Integer,String> network : networksToTest) {
      network.addEdge(1,2,"1-2a");
      network.addEdge(1,2,"1-2b");
    }
    assertThat(hasCycle(directedNetwork)).isFalse();
    assertThat(hasCycle(undirectedNetwork)).isTrue();
  }
  @Test public void hasCycle_cyclicMultigraph(){
    for (    MutableNetwork<Integer,String> network : networksToTest) {
      network.addEdge(1,2,"1-2a");
      network.addEdge(1,2,"1-2b");
      network.addEdge(2,3,"2-3");
      network.addEdge(3,1,"3-1");
    }
    assertThat(hasCycle(directedNetwork)).isTrue();
    assertThat(hasCycle(undirectedNetwork)).isTrue();
  }
}
