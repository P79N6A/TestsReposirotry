/** 
 * Tester for  {@code Multimap.keySet}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MultimapKeySetTester<K,V> extends AbstractMultimapTester<K,V,Multimap<K,V>> {
  public void testKeySet(){
    for (    Entry<K,V> entry : getSampleElements()) {
      assertTrue(multimap().keySet().contains(entry.getKey()));
    }
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(ALLOWS_NULL_KEYS) public void testKeySetContainsNullKeyPresent(){
    initMultimapWithNullKey();
    assertTrue(multimap().keySet().contains(null));
  }
  @MapFeature.Require(ALLOWS_NULL_KEY_QUERIES) public void testKeySetContainsNullKeyAbsent(){
    assertFalse(multimap().keySet().contains(null));
  }
  @MapFeature.Require(SUPPORTS_REMOVE) public void testKeySetRemovePropagatesToMultimap(){
    int key0Count=multimap().get(k0()).size();
    assertEquals(key0Count > 0,multimap().keySet().remove(k0()));
    assertEquals(getNumElements() - key0Count,multimap().size());
    assertGet(k0());
  }
  @CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE) public void testKeySetIteratorRemove(){
    int key0Count=multimap().get(k0()).size();
    Iterator<K> keyItr=multimap().keySet().iterator();
    while (keyItr.hasNext()) {
      if (keyItr.next().equals(k0())) {
        keyItr.remove();
      }
    }
    assertEquals(getNumElements() - key0Count,multimap().size());
    assertGet(k0());
  }
}
