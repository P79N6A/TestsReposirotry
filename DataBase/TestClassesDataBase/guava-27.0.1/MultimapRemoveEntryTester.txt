/** 
 * Tests for  {@link Multimap#remove(Object,Object)}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MultimapRemoveEntryTester<K,V> extends AbstractMultimapTester<K,V,Multimap<K,V>> {
  @MapFeature.Require(SUPPORTS_REMOVE) public void testRemoveAbsent(){
    assertFalse(multimap().remove(k0(),v1()));
    expectUnchanged();
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testRemovePresent(){
    assertTrue(multimap().remove(k0(),v0()));
    assertFalse(multimap().containsEntry(k0(),v0()));
    expectMissing(e0());
    assertEquals(getNumElements() - 1,multimap().size());
    assertGet(k0(),ImmutableList.<V>of());
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_KEYS}) public void testRemoveNullKeyPresent(){
    initMultimapWithNullKey();
    assertTrue(multimap().remove(null,getValueForNullKey()));
    expectMissing(Helpers.mapEntry((K)null,getValueForNullKey()));
    assertGet(getKeyForNullValue(),ImmutableList.<V>of());
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_VALUES}) public void testRemoveNullValuePresent(){
    initMultimapWithNullValue();
    assertTrue(multimap().remove(getKeyForNullValue(),null));
    expectMissing(Helpers.mapEntry(getKeyForNullValue(),(V)null));
    assertGet(getKeyForNullValue(),ImmutableList.<V>of());
  }
  @MapFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_KEY_QUERIES}) public void testRemoveNullKeyAbsent(){
    assertFalse(multimap().remove(null,v0()));
    expectUnchanged();
  }
  @MapFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_VALUE_QUERIES}) public void testRemoveNullValueAbsent(){
    assertFalse(multimap().remove(k0(),null));
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_REMOVE,absent=ALLOWS_NULL_VALUE_QUERIES) public void testRemoveNullValueForbidden(){
    try {
      multimap().remove(k0(),null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_REMOVE,absent=ALLOWS_NULL_KEY_QUERIES) public void testRemoveNullKeyForbidden(){
    try {
      multimap().remove(null,v0());
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRemovePropagatesToGet(){
    List<Entry<K,V>> entries=Helpers.copyToList(multimap().entries());
    for (    Entry<K,V> entry : entries) {
      resetContainer();
      K key=entry.getKey();
      V value=entry.getValue();
      Collection<V> collection=multimap().get(key);
      assertNotNull(collection);
      Collection<V> expectedCollection=Helpers.copyToList(collection);
      multimap().remove(key,value);
      expectedCollection.remove(value);
      assertEqualIgnoringOrder(expectedCollection,collection);
      assertEquals(!expectedCollection.isEmpty(),multimap().containsKey(key));
    }
  }
  @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRemovePropagatesToAsMap(){
    List<Entry<K,V>> entries=Helpers.copyToList(multimap().entries());
    for (    Entry<K,V> entry : entries) {
      resetContainer();
      K key=entry.getKey();
      V value=entry.getValue();
      Collection<V> collection=multimap().asMap().get(key);
      assertNotNull(collection);
      Collection<V> expectedCollection=Helpers.copyToList(collection);
      multimap().remove(key,value);
      expectedCollection.remove(value);
      assertEqualIgnoringOrder(expectedCollection,collection);
      assertEquals(!expectedCollection.isEmpty(),multimap().containsKey(key));
    }
  }
  @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent=ZERO) public void testRemovePropagatesToAsMapEntrySet(){
    List<Entry<K,V>> entries=Helpers.copyToList(multimap().entries());
    for (    Entry<K,V> entry : entries) {
      resetContainer();
      K key=entry.getKey();
      V value=entry.getValue();
      Iterator<Entry<K,Collection<V>>> asMapItr=multimap().asMap().entrySet().iterator();
      Collection<V> collection=null;
      while (asMapItr.hasNext()) {
        Entry<K,Collection<V>> asMapEntry=asMapItr.next();
        if (key.equals(asMapEntry.getKey())) {
          collection=asMapEntry.getValue();
          break;
        }
      }
      assertNotNull(collection);
      Collection<V> expectedCollection=Helpers.copyToList(collection);
      multimap().remove(key,value);
      expectedCollection.remove(value);
      assertEqualIgnoringOrder(expectedCollection,collection);
      assertEquals(!expectedCollection.isEmpty(),multimap().containsKey(key));
    }
  }
}
