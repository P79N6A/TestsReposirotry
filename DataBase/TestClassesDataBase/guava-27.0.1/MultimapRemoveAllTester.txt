/** 
 * Tests for  {@link Multimap#removeAll(Object)}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MultimapRemoveAllTester<K,V> extends AbstractMultimapTester<K,V,Multimap<K,V>> {
  @MapFeature.Require(SUPPORTS_REMOVE) public void testRemoveAllAbsentKey(){
    assertEmpty(multimap().removeAll(k3()));
    expectUnchanged();
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testRemoveAllPresentKey(){
    assertContentsAnyOrder(multimap().removeAll(k0()),v0());
    expectMissing(e0());
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testRemoveAllPropagatesToGet(){
    Collection<V> getResult=multimap().get(k0());
    multimap().removeAll(k0());
    assertEmpty(getResult);
    expectMissing(e0());
  }
  @CollectionSize.Require(SEVERAL) @MapFeature.Require(SUPPORTS_REMOVE) public void testRemoveAllMultipleValues(){
    resetContainer(Helpers.mapEntry(k0(),v0()),Helpers.mapEntry(k0(),v1()),Helpers.mapEntry(k0(),v2()));
    assertContentsAnyOrder(multimap().removeAll(k0()),v0(),v1(),v2());
    assertEmpty(multimap());
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require({SUPPORTS_REMOVE,ALLOWS_NULL_KEYS}) public void testRemoveAllNullKeyPresent(){
    initMultimapWithNullKey();
    assertContentsAnyOrder(multimap().removeAll(null),getValueForNullKey());
    expectMissing(Helpers.mapEntry((K)null,getValueForNullKey()));
  }
  @MapFeature.Require({SUPPORTS_REMOVE,ALLOWS_ANY_NULL_QUERIES}) public void testRemoveAllNullKeyAbsent(){
    assertEmpty(multimap().removeAll(null));
    expectUnchanged();
  }
}
