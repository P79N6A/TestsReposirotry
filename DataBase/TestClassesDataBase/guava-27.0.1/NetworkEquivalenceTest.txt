@AndroidIncompatible @RunWith(Parameterized.class) public final class NetworkEquivalenceTest {
  private static final Integer N1=1;
  private static final Integer N2=2;
  private static final Integer N3=3;
  private static final String E11="1-1";
  private static final String E12="1-2";
  private static final String E12_A="1-2a";
  private static final String E13="1-3";
  private final EdgeType edgeType;
  private final MutableNetwork<Integer,String> network;
  @Parameters public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[][]{{EdgeType.UNDIRECTED},{EdgeType.DIRECTED}});
  }
  public NetworkEquivalenceTest(  EdgeType edgeType){
    this.edgeType=edgeType;
    this.network=createNetwork(edgeType);
  }
  private static MutableNetwork<Integer,String> createNetwork(  EdgeType edgeType){
switch (edgeType) {
case UNDIRECTED:
      return NetworkBuilder.undirected().allowsSelfLoops(true).build();
case DIRECTED:
    return NetworkBuilder.directed().allowsSelfLoops(true).build();
default :
  throw new IllegalStateException("Unexpected edge type: " + edgeType);
}
}
private static EdgeType oppositeType(EdgeType edgeType){
switch (edgeType) {
case UNDIRECTED:
return EdgeType.DIRECTED;
case DIRECTED:
return EdgeType.UNDIRECTED;
default :
throw new IllegalStateException("Unexpected edge type: " + edgeType);
}
}
@Test public void equivalent_nodeSetsDiffer(){
network.addNode(N1);
MutableNetwork<Integer,String> g2=createNetwork(edgeType);
g2.addNode(N2);
assertThat(network).isNotEqualTo(g2);
}
@Test public void equivalent_edgeSetsDiffer(){
network.addEdge(N1,N2,E12);
MutableNetwork<Integer,String> g2=createNetwork(edgeType);
g2.addEdge(N1,N2,E13);
assertThat(network).isNotEqualTo(g2);
}
@Test public void equivalent_directedVsUndirected(){
network.addEdge(N1,N2,E12);
MutableNetwork<Integer,String> g2=createNetwork(oppositeType(edgeType));
g2.addEdge(N1,N2,E12);
assertThat(network).isNotEqualTo(g2);
}
@Test public void equivalent_selfLoop_directedVsUndirected(){
network.addEdge(N1,N1,E11);
MutableNetwork<Integer,String> g2=createNetwork(oppositeType(edgeType));
g2.addEdge(N1,N1,E11);
assertThat(network).isNotEqualTo(g2);
}
@Test public void equivalent_connectionsDiffer(){
network.addEdge(N1,N2,E12);
network.addEdge(N1,N3,E13);
MutableNetwork<Integer,String> g2=createNetwork(edgeType);
g2.addEdge(N1,N2,E13);
g2.addEdge(N1,N3,E12);
assertThat(network).isNotEqualTo(g2);
}
@Test public void equivalent_propertiesDiffer(){
network.addEdge(N1,N2,E12);
MutableNetwork<Integer,String> g2=NetworkBuilder.from(network).allowsParallelEdges(!network.allowsParallelEdges()).allowsSelfLoops(!network.allowsSelfLoops()).build();
g2.addEdge(N1,N2,E12);
assertThat(network).isEqualTo(g2);
}
@Test public void equivalent_edgeAddOrdersDiffer(){
NetworkBuilder<Integer,String> builder=NetworkBuilder.from(network).allowsParallelEdges(true);
MutableNetwork<Integer,String> g1=builder.build();
MutableNetwork<Integer,String> g2=builder.build();
g1.addEdge(N1,N2,E12);
g1.addEdge(N1,N2,E12_A);
g2.addEdge(N1,N2,E12_A);
g2.addEdge(N1,N2,E12);
assertThat(g1).isEqualTo(g2);
}
@Test public void equivalent_edgeDirectionsDiffer(){
network.addEdge(N1,N2,E12);
MutableNetwork<Integer,String> g2=createNetwork(edgeType);
g2.addEdge(N2,N1,E12);
switch (edgeType) {
case UNDIRECTED:
assertThat(network).isEqualTo(g2);
break;
case DIRECTED:
assertThat(network).isNotEqualTo(g2);
break;
default :
throw new IllegalStateException("Unexpected edge type: " + edgeType);
}
}
}
