/** 
 * Testers for  {@link ListMultimap#remove(Object,Object)}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class ListMultimapRemoveTester<K,V> extends AbstractListMultimapTester<K,V> {
  @SuppressWarnings("unchecked") @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(SEVERAL) public void testMultimapRemoveDeletesFirstOccurrence(){
    resetContainer(mapEntry(k0(),v0()),mapEntry(k0(),v1()),mapEntry(k0(),v0()));
    List<V> list=multimap().get(k0());
    multimap().remove(k0(),v0());
    assertContentsInOrder(list,v1(),v0());
  }
  @SuppressWarnings("unchecked") @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(SEVERAL) public void testRemoveAtIndexFromGetPropagates(){
    List<V> values=Arrays.asList(v0(),v1(),v0());
    for (int i=0; i < 3; i++) {
      resetContainer(mapEntry(k0(),v0()),mapEntry(k0(),v1()),mapEntry(k0(),v0()));
      List<V> expectedValues=copyToList(values);
      multimap().get(k0()).remove(i);
      expectedValues.remove(i);
      assertGet(k0(),expectedValues);
    }
  }
  @SuppressWarnings("unchecked") @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(SEVERAL) public void testRemoveAtIndexFromAsMapPropagates(){
    List<V> values=Arrays.asList(v0(),v1(),v0());
    for (int i=0; i < 3; i++) {
      resetContainer(mapEntry(k0(),v0()),mapEntry(k0(),v1()),mapEntry(k0(),v0()));
      List<V> expectedValues=copyToList(values);
      List<V> asMapValue=(List<V>)multimap().asMap().get(k0());
      asMapValue.remove(i);
      expectedValues.remove(i);
      assertGet(k0(),expectedValues);
    }
  }
  @SuppressWarnings("unchecked") @MapFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(SEVERAL) public void testRemoveAtIndexFromAsMapEntrySetPropagates(){
    List<V> values=Arrays.asList(v0(),v1(),v0());
    for (int i=0; i < 3; i++) {
      resetContainer(mapEntry(k0(),v0()),mapEntry(k0(),v1()),mapEntry(k0(),v0()));
      List<V> expectedValues=copyToList(values);
      Entry<K,Collection<V>> asMapEntry=multimap().asMap().entrySet().iterator().next();
      List<V> asMapValue=(List<V>)asMapEntry.getValue();
      asMapValue.remove(i);
      expectedValues.remove(i);
      assertGet(k0(),expectedValues);
    }
  }
}
