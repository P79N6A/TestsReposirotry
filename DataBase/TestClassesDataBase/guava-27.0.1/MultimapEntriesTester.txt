/** 
 * Tester for  {@code Multimap.entries}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class MultimapEntriesTester<K,V> extends AbstractMultimapTester<K,V,Multimap<K,V>> {
  public void testEntries(){
    assertEqualIgnoringOrder(getSampleElements(),multimap().entries());
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(ALLOWS_NULL_KEYS) public void testContainsEntryWithNullKeyPresent(){
    initMultimapWithNullKey();
    assertContains(multimap().entries(),Helpers.mapEntry((K)null,getValueForNullKey()));
  }
  @MapFeature.Require(ALLOWS_NULL_KEY_QUERIES) public void testContainsEntryWithNullKeyAbsent(){
    assertFalse(multimap().entries().contains(Helpers.mapEntry(null,v0())));
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(ALLOWS_NULL_VALUES) public void testContainsEntryWithNullValuePresent(){
    initMultimapWithNullValue();
    assertContains(multimap().entries(),Helpers.mapEntry(getKeyForNullValue(),(V)null));
  }
  @MapFeature.Require(ALLOWS_NULL_VALUE_QUERIES) public void testContainsEntryWithNullValueAbsent(){
    assertFalse(multimap().entries().contains(Helpers.mapEntry(k0(),null)));
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testRemovePropagatesToMultimap(){
    assertTrue(multimap().entries().remove(Helpers.mapEntry(k0(),v0())));
    expectMissing(Helpers.mapEntry(k0(),v0()));
    assertEquals(getNumElements() - 1,multimap().size());
    assertFalse(multimap().containsEntry(k0(),v0()));
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testRemoveAllPropagatesToMultimap(){
    assertTrue(multimap().entries().removeAll(Collections.singleton(Helpers.mapEntry(k0(),v0()))));
    expectMissing(Helpers.mapEntry(k0(),v0()));
    assertEquals(getNumElements() - 1,multimap().size());
    assertFalse(multimap().containsEntry(k0(),v0()));
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testRetainAllPropagatesToMultimap(){
    multimap().entries().retainAll(Collections.singleton(Helpers.mapEntry(k0(),v0())));
    assertEquals(getSubjectGenerator().create(Helpers.mapEntry(k0(),v0())),multimap());
    assertEquals(1,multimap().size());
    assertTrue(multimap().containsEntry(k0(),v0()));
  }
  @CollectionSize.Require(ONE) @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE) public void testIteratorRemovePropagatesToMultimap(){
    Iterator<Entry<K,V>> iterator=multimap().entries().iterator();
    assertEquals(Helpers.mapEntry(k0(),v0()),iterator.next());
    iterator.remove();
    assertTrue(multimap().isEmpty());
  }
  @CollectionSize.Require(absent=ZERO) @MapFeature.Require(SUPPORTS_REMOVE) public void testEntriesRemainValidAfterRemove(){
    Iterator<Entry<K,V>> iterator=multimap().entries().iterator();
    Entry<K,V> entry=iterator.next();
    K key=entry.getKey();
    V value=entry.getValue();
    multimap().removeAll(key);
    assertEquals(key,entry.getKey());
    assertEquals(value,entry.getValue());
  }
}
