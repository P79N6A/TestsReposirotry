/** 
 * A generic JUnit test which tests  {@code replace(K, V)} operations on a concurrent map. Can't beinvoked directly; please see  {@link com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder}.
 * @author Louis Wasserman
 */
@GwtCompatible @Ignore public class ConcurrentMapReplaceTester<K,V> extends AbstractMapTester<K,V> {
  @Override protected ConcurrentMap<K,V> getMap(){
    return (ConcurrentMap<K,V>)super.getMap();
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplace_supportedPresent(){
    assertEquals(v0(),getMap().replace(k0(),v3()));
    expectReplacement(entry(k0(),v3()));
  }
  @MapFeature.Require(SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplace_supportedPresentNoChange(){
    assertEquals(v0(),getMap().replace(k0(),v0()));
    expectUnchanged();
  }
  @MapFeature.Require(SUPPORTS_PUT) public void testReplace_supportedAbsent(){
    assertNull(getMap().replace(k3(),v3()));
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUES) @CollectionSize.Require(absent=ZERO) public void testReplace_presentNullValueUnsupported(){
    try {
      getMap().replace(k0(),null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException expected) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_VALUE_QUERIES) public void testReplace_absentNullValueUnsupported(){
    try {
      getMap().replace(k3(),null);
    }
 catch (    NullPointerException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(value=SUPPORTS_PUT,absent=ALLOWS_NULL_KEY_QUERIES) public void testReplace_absentNullKeyUnsupported(){
    try {
      getMap().replace(null,v3());
    }
 catch (    NullPointerException tolerated) {
    }
    expectUnchanged();
  }
  @MapFeature.Require(absent=SUPPORTS_PUT) @CollectionSize.Require(absent=ZERO) public void testReplace_unsupportedPresent(){
    try {
      getMap().replace(k0(),v3());
      fail("Expected UnsupportedOperationException");
    }
 catch (    UnsupportedOperationException expected) {
    }
    expectUnchanged();
  }
}
