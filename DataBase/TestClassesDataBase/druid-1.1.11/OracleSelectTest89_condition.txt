public class OracleSelectTest89_condition extends OracleTest {
  public void test_0() throws Exception {
    String sql="select * from v.e\n" + "where\n" + "\tcid <> rid\n"+ "\tand  rid  not in\n"+ "\t(\n"+ "\t\t(select distinct  rid  from  v.s )\n"+ "\t\tunion\n"+ "\t\t(select distinct  rid  from v.p )\n"+ "\t)\n"+ "\tand  \"timestamp\"  <= 1298505600000\n"+ "\n";
    System.out.println(sql);
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLSelectStatement stmt=(SQLSelectStatement)statementList.get(0);
    System.out.println(stmt.toString());
    Assert.assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
{
      String text=SQLUtils.toOracleString(stmt);
      assertEquals("SELECT *\n" + "FROM v.e\n" + "WHERE cid <> rid\n"+ "\tAND rid NOT IN (\n"+ "\t\tSELECT DISTINCT rid\n"+ "\t\tFROM v.s\n"+ "\t\tUNION\n"+ "\t\tSELECT DISTINCT rid\n"+ "\t\tFROM v.p\n"+ "\t)\n"+ "\tAND \"timestamp\" <= 1298505600000",text);
    }
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    assertEquals(3,visitor.getTables().size());
    assertEquals(6,visitor.getColumns().size());
    assertEquals(4,visitor.getConditions().size());
    assertEquals(1,visitor.getRelationships().size());
    assertEquals(0,visitor.getOrderByColumns().size());
  }
}
