public class MySqlSelectTest_44_with_cte extends MysqlTest {
  public void test_0() throws Exception {
    String sql="WITH RECURSIVE cte AS\n" + "(\n" + "  SELECT 1 AS n, 1 AS p, -1 AS q\n"+ "  UNION ALL\n"+ "  SELECT n + 1, q * 2, p * 2 FROM cte WHERE n < 5\n"+ ")\n"+ "SELECT * FROM cte;";
    List<SQLStatement> statementList=SQLUtils.parseStatements(sql,JdbcConstants.MYSQL,true);
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    SchemaStatVisitor visitor=SQLUtils.createSchemaStatVisitor(JdbcConstants.MYSQL);
    stmt.accept(visitor);
{
      String output=SQLUtils.toMySqlString(stmt);
      Assert.assertEquals("WITH RECURSIVE cte AS (\n" + "\t\tSELECT 1 AS n, 1 AS p, -1 AS q\n" + "\t\tUNION ALL\n"+ "\t\tSELECT n + 1, q * 2\n"+ "\t\t\t, p * 2\n"+ "\t\tFROM cte\n"+ "\t\tWHERE n < 5\n"+ "\t)\n"+ "SELECT *\n"+ "FROM cte;",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
      Assert.assertEquals("with recursive cte as (\n" + "\t\tselect 1 as n, 1 as p, -1 as q\n" + "\t\tunion all\n"+ "\t\tselect n + 1, q * 2\n"+ "\t\t\t, p * 2\n"+ "\t\tfrom cte\n"+ "\t\twhere n < 5\n"+ "\t)\n"+ "select *\n"+ "from cte;",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,new SQLUtils.FormatOption(true,true,true));
      Assert.assertEquals("WITH RECURSIVE cte AS (\n" + "\t\tSELECT ? AS n, ? AS p, ? AS q\n" + "\t\tUNION ALL\n"+ "\t\tSELECT n + ?, q * ?\n"+ "\t\t\t, p * ?\n"+ "\t\tFROM cte\n"+ "\t\tWHERE n < ?\n"+ "\t)\n"+ "SELECT *\n"+ "FROM cte;",output);
    }
  }
}
