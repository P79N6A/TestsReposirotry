public class WrapImplTest extends TestCase {
  private static String url="jdbc:wrap-jdbc:filters=default,commonLogging,log4j,encoding,null:name=demo:jdbc:derby:classpath:petstore-db";
  public void test_clone() throws Exception {
    Class.forName("com.alibaba.druid.proxy.DruidDriver");
    DruidDriver driver=(DruidDriver)DriverManager.getDriver(url);
    ConnectionProxyImpl connection=(ConnectionProxyImpl)driver.connect(url,new Properties());
    connection.getRawObject();
    FilterChain filterChain=(FilterChain)connection.createChain();
    filterChain.cloneChain();
    DataSourceProxyImpl dataSource=(DataSourceProxyImpl)connection.getDirectDataSource();
    dataSource.getId();
    Assert.assertEquals(4,dataSource.getProxyFilters().size());
    Assert.assertEquals(4,dataSource.getFilterClasses().length);
    Assert.assertNotNull(dataSource.getCreatedTime());
    Assert.assertTrue(dataSource.getCreatedTime().getTime() != 0);
    Assert.assertEquals("org.apache.derby.jdbc.EmbeddedDriver",dataSource.getRawDriverClassName());
    Assert.assertEquals(url,dataSource.getUrl());
    Assert.assertEquals("jdbc:derby:classpath:petstore-db",dataSource.getRawUrl());
    Assert.assertEquals(10,dataSource.getRawDriverMajorVersion());
    Assert.assertEquals(12,dataSource.getRawDriverMinorVersion());
    Class<?> mysql5ConnectionClass=Utils.loadClass("com.mysql.jdbc.Connection");
    if (mysql5ConnectionClass != null) {
      Assert.assertFalse(connection.isWrapperFor(mysql5ConnectionClass));
    }
    Assert.assertTrue(connection.isWrapperFor(ConnectionProxyImpl.class));
    Assert.assertTrue(connection.isWrapperFor(org.apache.derby.impl.jdbc.EmbedConnection.class));
    Assert.assertNotNull(connection.unwrap(ConnectionProxyImpl.class));
    Assert.assertNull(connection.unwrap(null));
    org.apache.derby.impl.jdbc.EmbedConnection derbyConnection=connection.unwrap(org.apache.derby.impl.jdbc.EmbedConnection.class);
    Assert.assertNotNull(derbyConnection);
    Statement statement=connection.createStatement();
    if (mysql5ConnectionClass != null) {
      Assert.assertFalse(statement.isWrapperFor(Class.forName("com.mysql.jdbc.Statement")));
    }
    Assert.assertFalse(statement.isWrapperFor(null));
    Assert.assertTrue(statement.isWrapperFor(org.apache.derby.impl.jdbc.EmbedStatement.class));
    org.apache.derby.impl.jdbc.EmbedStatement rayStatement=statement.unwrap(org.apache.derby.impl.jdbc.EmbedStatement.class);
    Assert.assertNotNull(rayStatement);
    statement.close();
  }
  protected void tearDown() throws Exception {
    DruidDriver.getProxyDataSources().clear();
    Assert.assertEquals(0,JdbcStatManager.getInstance().getSqlList().size());
  }
}
