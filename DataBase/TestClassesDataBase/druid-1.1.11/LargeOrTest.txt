public class LargeOrTest extends TestCase {
  public void test_largeOr() throws Exception {
    StringBuffer buf=new StringBuffer();
    buf.append("SELECT 1 FROM T WHERE ID = ?");
    for (int i=0; i < 10000; ++i) {
      buf.append(" OR ID = ?");
    }
    String sql=buf.toString();
    OracleStatementParser parser=new OracleStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup);
    SQLSelectStatement stmt=(SQLSelectStatement)parser.parseStatementList().get(0);
    SQLSelectQueryBlock select=(SQLSelectQueryBlock)stmt.getSelect().getQuery();
    SQLBinaryOpExprGroup where=(SQLBinaryOpExprGroup)select.getWhere();
    SQLBinaryOpExpr last=(SQLBinaryOpExpr)where.getItems().get(0);
    Assert.assertEquals(SQLBinaryOperator.Equality,last.getOperator());
  }
  public void test_largeAnd() throws Exception {
    StringBuffer buf=new StringBuffer();
    buf.append("SELECT 1 FROM T WHERE ID = ?");
    for (int i=0; i < 10000; ++i) {
      buf.append(" AND ID = ?");
    }
    String sql=buf.toString();
    OracleStatementParser parser=new OracleStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup);
    SQLSelectStatement stmt=(SQLSelectStatement)parser.parseStatementList().get(0);
    SQLSelectQueryBlock select=(SQLSelectQueryBlock)stmt.getSelect().getQuery();
    SQLBinaryOpExprGroup where=(SQLBinaryOpExprGroup)select.getWhere();
    SQLBinaryOpExpr last=(SQLBinaryOpExpr)where.getItems().get(0);
    Assert.assertEquals(SQLBinaryOperator.Equality,last.getOperator());
  }
}
