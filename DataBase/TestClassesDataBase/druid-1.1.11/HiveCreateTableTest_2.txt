public class HiveCreateTableTest_2 extends OracleTest {
  public void test_0() throws Exception {
    String sql="CREATE TABLE pageviews (userid VARCHAR(64), link STRING, came_from STRING)\n" + "  PARTITIONED BY (datestamp STRING) CLUSTERED BY (userid) INTO 256 BUCKETS STORED AS ORC;";
    List<SQLStatement> statementList=SQLUtils.toStatementList(sql,JdbcConstants.HIVE);
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
{
      String text=SQLUtils.toSQLString(stmt,JdbcConstants.HIVE);
      assertEquals("CREATE TABLE pageviews (\n" + "\tuserid VARCHAR(64),\n" + "\tlink STRING,\n"+ "\tcame_from STRING\n"+ ")\n"+ "PARTITIONED BY (\n"+ "\tdatestamp STRING\n"+ ")\n"+ "CLUSTERED BY (userid)\n"+ "INTO 256 BUCKETS\n"+ "STORE AS ORC;",text);
    }
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    assertEquals(1,visitor.getTables().size());
    assertEquals(3,visitor.getColumns().size());
    assertEquals(0,visitor.getConditions().size());
    assertEquals(0,visitor.getRelationships().size());
    assertEquals(0,visitor.getOrderByColumns().size());
    Assert.assertTrue(visitor.containsTable("pageviews"));
  }
}
