public class OdpsSelectTest_over_rows_1 extends TestCase {
  public void test_select() throws Exception {
    String sql="select last_name, first_name, department_id, hire_date, salary,\n" + "     SUM (salary)\n" + "    OVER (PARTITION BY department_id ORDER BY hire_date\n"+ "          RANGE BETWEEN 365 PRECEDING AND 365 FOLLOWING) department_total\n"+ "  from employee\n"+ "  order by department_id, hire_date;";
    Assert.assertEquals("SELECT last_name, first_name, department_id, hire_date, salary\n" + "\t, SUM(salary) OVER (PARTITION BY department_id ORDER BY hire_date RANGE BETWEEN 365 PRECEDING AND 365 FOLLOWING) AS department_total\n" + "FROM employee\n"+ "ORDER BY department_id, \n"+ "\thire_date;",SQLUtils.formatOdps(sql));
    Assert.assertEquals("select last_name, first_name, department_id, hire_date, salary\n" + "\t, sum(salary) over (partition by department_id order by hire_date range between 365 preceding and 365 following) as department_total\n" + "from employee\n"+ "order by department_id, \n"+ "\thire_date;",SQLUtils.formatOdps(sql,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    List<SQLStatement> statementList=SQLUtils.parseStatements(sql,JdbcConstants.ODPS);
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    SchemaStatVisitor visitor=SQLUtils.createSchemaStatVisitor(JdbcConstants.ODPS);
    stmt.accept(visitor);
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(5,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
  }
}
