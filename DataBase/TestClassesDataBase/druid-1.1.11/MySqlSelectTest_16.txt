public class MySqlSelectTest_16 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="select a from t where not a>1 and not b<1";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    SQLSelectStatement selectStmt=(SQLSelectStatement)stmt;
    SQLSelect select=selectStmt.getSelect();
    Assert.assertNotNull(select.getQuery());
    MySqlSelectQueryBlock queryBlock=(MySqlSelectQueryBlock)select.getQuery();
    Assert.assertNull(queryBlock.getOrderBy());
{
      SQLExpr where=queryBlock.getWhere();
      Assert.assertTrue(where instanceof SQLBinaryOpExpr);
      SQLBinaryOpExpr binaryWhere=(SQLBinaryOpExpr)where;
      Assert.assertEquals(binaryWhere.getOperator(),SQLBinaryOperator.BooleanAnd);
      Assert.assertTrue(binaryWhere.getLeft() instanceof SQLNotExpr);
      Assert.assertTrue(binaryWhere.getRight() instanceof SQLNotExpr);
    }
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(2,visitor.getColumns().size());
    Assert.assertEquals(2,visitor.getConditions().size());
    Assert.assertEquals(0,visitor.getOrderByColumns().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t")));
    String output=SQLUtils.toMySqlString(stmt);
    Assert.assertEquals("SELECT a" + "\nFROM t" + "\nWHERE NOT a > 1"+ "\n\tAND NOT b < 1",output);
  }
}
