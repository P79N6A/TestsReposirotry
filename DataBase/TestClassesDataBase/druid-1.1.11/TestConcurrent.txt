public class TestConcurrent extends TestCase {
  private MockDriver driver;
  private DruidDataSource dataSource;
  protected void setUp() throws Exception {
    DruidDataSourceStatManager.clear();
    driver=new MockDriver();
    driver.setLogExecuteQueryEnable(false);
    dataSource=new DruidDataSource();
    dataSource.setUrl("jdbc:mock:xxx");
    dataSource.setDriver(driver);
    dataSource.setInitialSize(1);
    dataSource.setMaxActive(100);
    dataSource.setMaxIdle(100);
    dataSource.setMinIdle(1);
    dataSource.setMinEvictableIdleTimeMillis(10 * 1000);
    dataSource.setTimeBetweenEvictionRunsMillis(1 * 10);
    dataSource.setTestWhileIdle(true);
    dataSource.setTestOnBorrow(false);
    dataSource.setValidationQuery("SELECT 1");
    dataSource.setFilters("stat");
    Assert.assertEquals(0,dataSource.getActiveCount());
    Assert.assertEquals(0,dataSource.getPoolingCount());
    Assert.assertEquals(true,dataSource.isEnable());
  }
  protected void tearDown() throws Exception {
    dataSource.close();
    int size=DruidDataSourceStatManager.getInstance().getDataSourceList().size();
    if (size > 0) {
      for (      DruidDataSource dataSource : DruidDataSourceStatManager.getDruidDataSourceInstances()) {
        dataSource.close();
        System.out.println("unclosed datasource : " + dataSource.getObjectName() + ", url : "+ dataSource.getUrl());
      }
      Assert.fail("size : " + size);
    }
  }
  public void test_0() throws Exception {
{
      Assert.assertEquals(0,dataSource.getActiveCount());
      Assert.assertEquals(0,dataSource.getPoolingCount());
      Assert.assertEquals(true,dataSource.isEnable());
      Connection conn=dataSource.getConnection();
      Assert.assertEquals(1,dataSource.getActiveCount());
      Assert.assertEquals(0,dataSource.getPoolingCount());
      Assert.assertEquals(true,dataSource.isEnable());
      conn.close();
      Assert.assertEquals(0,dataSource.getActiveCount());
      Assert.assertEquals(1,dataSource.getPoolingCount());
    }
    Assert.assertEquals(true,dataSource.isEnable());
    for (int i=0; i < 1000; ++i) {
      Assert.assertEquals(0,dataSource.getActiveCount());
      Connection conn=dataSource.getConnection();
      Assert.assertEquals(1,dataSource.getActiveCount());
      conn.close();
      Assert.assertEquals(0,dataSource.getActiveCount());
      Assert.assertEquals(1,dataSource.getPoolingCount());
      Assert.assertEquals(true,dataSource.isEnable());
    }
    for (int i=0; i < 1000 * 1; ++i) {
      final int COUNT=10;
      Connection[] connections=new Connection[COUNT];
      for (int j=0; j < connections.length; ++j) {
        connections[j]=dataSource.getConnection();
        Assert.assertEquals(j + 1,dataSource.getActiveCount());
      }
      Assert.assertEquals(0,dataSource.getDestroyCount());
      Assert.assertEquals(COUNT,dataSource.getActiveCount());
      Assert.assertEquals(COUNT,dataSource.getCreateCount());
      Assert.assertEquals(0,dataSource.getPoolingCount());
      for (int j=0; j < connections.length; ++j) {
        connections[j].close();
        Assert.assertEquals(j + 1,dataSource.getPoolingCount());
      }
      Assert.assertEquals(0,dataSource.getActiveCount());
      Assert.assertEquals(COUNT,dataSource.getPoolingCount());
    }
    for (int i=0; i < 3; ++i) {
      concurrent(2);
    }
    for (int i=0; i < 3; ++i) {
      concurrent(5);
    }
    for (int i=0; i < 3; ++i) {
      concurrent(10);
    }
    for (int i=0; i < 3; ++i) {
      concurrent(20);
    }
    for (int i=0; i < 3; ++i) {
      concurrent(50);
    }
    for (int i=0; i < 3; ++i) {
      concurrent(100);
    }
  }
  /** 
 * 并发执行10000次
 * @param threadCount
 * @throws InterruptedException
 */
  private void concurrent(  final int threadCount) throws InterruptedException {
    final CountDownLatch startLatch=new CountDownLatch(1);
    final CountDownLatch endLatch=new CountDownLatch(threadCount);
    Thread[] threads=new Thread[threadCount];
    for (int i=0; i < threadCount; ++i) {
      threads[i]=new Thread(){
        public void run(){
          try {
            startLatch.await();
            for (int i=0; i < 1000 * 1; ++i) {
              Connection conn=dataSource.getConnection();
              Statement stmt=conn.createStatement();
              ResultSet rs=stmt.executeQuery("SELECT 1");
              rs.close();
              stmt.close();
              conn.close();
            }
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
 finally {
            endLatch.countDown();
          }
        }
      }
;
      threads[i].start();
    }
    dataSource.shrink();
    Assert.assertEquals("actveCount != 0",0,dataSource.getActiveCount());
    Assert.assertEquals("minIdle != poolingCount",dataSource.getMinIdle(),dataSource.getPoolingCount());
    System.out.println(threadCount + "-threads start");
    startLatch.countDown();
    endLatch.await();
    System.out.println(threadCount + "-threads complete");
    Assert.assertEquals(0,dataSource.getActiveCount());
    Assert.assertTrue(threadCount >= dataSource.getPoolingCount());
  }
}
