public class MySqlParserResourceTest extends TestCase {
  public void test_0() throws Exception {
    exec_test("bvt/parser/mysql-9.txt");
  }
  public void exec_test(  String resource) throws Exception {
    InputStream is=null;
    is=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
    Reader reader=new InputStreamReader(is,"UTF-8");
    String input=Utils.read(reader);
    JdbcUtils.close(reader);
    String[] items=input.split("---------------------------");
    String sql=items[0].trim();
    String expect=items[1].trim();
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    Assert.assertEquals(1,statementList.size());
    String text=output(statementList);
    expect=expect.replaceAll("\\r\\n","\n");
    Assert.assertEquals("errror resource " + resource,expect,text.trim());
    String mergeExpect=null;
    if (items.length == 3) {
      mergeExpect=items[2].trim();
    }
    if (mergeExpect != null) {
      mergValidate(sql,mergeExpect);
    }
  }
  void mergValidate(  String sql,  String expect){
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    StringBuilder out=new StringBuilder();
    MySqlOutputVisitor visitor=new MySqlOutputVisitor(out,true);
    statemen.accept(visitor);
    out.toString();
    expect=expect.replaceAll("\\r\\n","\n");
    Assert.assertEquals(expect,out.toString());
  }
  private String output(  List<SQLStatement> stmtList){
    StringBuilder out=new StringBuilder();
    MySqlOutputVisitor visitor=new MySqlOutputVisitor(out);
    for (    SQLStatement stmt : stmtList) {
      stmt.accept(visitor);
    }
    return out.toString();
  }
}
