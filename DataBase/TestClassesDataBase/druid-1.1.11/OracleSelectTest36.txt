public class OracleSelectTest36 extends OracleTest {
  public void test_0() throws Exception {
    String sql="select ID,name from druid_test where (name>=? or name is null) and card_id<?";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    String result=SQLUtils.toOracleString(stmt);
    String result_lcase=SQLUtils.toOracleString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
    Assert.assertEquals("SELECT ID, name" + "\nFROM druid_test" + "\nWHERE (name >= ?"+ "\n\t\tOR name IS NULL)"+ "\n\tAND card_id < ?",result);
    Assert.assertEquals("select ID, name" + "\nfrom druid_test" + "\nwhere (name >= ?"+ "\n\t\tor name is null)"+ "\n\tand card_id < ?",result_lcase);
{
      SQLSelect select=((SQLSelectStatement)stmt).getSelect();
      SQLSelectQueryBlock queryBlock=(SQLSelectQueryBlock)select.getQuery();
      SQLBinaryOpExpr where=(SQLBinaryOpExpr)queryBlock.getWhere();
      Assert.assertEquals(SQLBinaryOperator.BooleanAnd,where.getOperator());
      SQLBinaryOpExpr left=(SQLBinaryOpExpr)where.getLeft();
      Assert.assertEquals(SQLBinaryOperator.BooleanOr,left.getOperator());
      SQLBinaryOpExpr nameGTEQ=(SQLBinaryOpExpr)left.getLeft();
      Assert.assertEquals(SQLBinaryOperator.GreaterThanOrEqual,nameGTEQ.getOperator());
      SQLBinaryOpExpr nameIS=(SQLBinaryOpExpr)left.getRight();
      Assert.assertEquals(SQLBinaryOperator.Is,nameIS.getOperator());
    }
    Assert.assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("druid_test")));
    Assert.assertEquals(3,visitor.getColumns().size());
    Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("druid_test","ID")));
    Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("druid_test","name")));
    Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("druid_test","card_id")));
  }
}
