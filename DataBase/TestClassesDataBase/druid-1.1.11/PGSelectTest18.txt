public class PGSelectTest18 extends PGTest {
  public void test_0() throws Exception {
    String sql="WITH RECURSIVE t(n) AS (" + "    SELECT 1" + "  UNION ALL"+ "    SELECT n+1 FROM t"+ ")"+ "SELECT n FROM t LIMIT 100;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
{
      String result=SQLUtils.toPGString(stmt);
      Assert.assertEquals("WITH RECURSIVE t (n) AS (\n" + "\t\tSELECT 1\n" + "\t\tUNION ALL\n"+ "\t\tSELECT n + 1\n"+ "\t\tFROM t\n"+ "\t)\n"+ "SELECT n\n"+ "FROM t\n"+ "LIMIT 100;",result);
    }
{
      String result=SQLUtils.toPGString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
      Assert.assertEquals("with recursive t (n) as (\n" + "\t\tselect 1\n" + "\t\tunion all\n"+ "\t\tselect n + 1\n"+ "\t\tfrom t\n"+ "\t)\n"+ "select n\n"+ "from t\n"+ "limit 100;",result);
    }
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(0,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getTables().size());
  }
}
