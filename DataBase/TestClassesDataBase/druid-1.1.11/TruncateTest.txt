public class TruncateTest extends PGTest {
  public void test_0() throws Exception {
    String sql="TRUNCATE bigtable, fattable;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("bigtable")));
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("fattable")));
    Assert.assertTrue(visitor.getColumns().size() == 0);
  }
  public void test_1() throws Exception {
    String sql="TRUNCATE bigtable, fattable RESTART IDENTITY;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("bigtable")));
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("fattable")));
    Assert.assertTrue(visitor.getColumns().size() == 0);
  }
  public void test_2() throws Exception {
    String sql="TRUNCATE othertable CASCADE;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("othertable")));
    Assert.assertTrue(visitor.getColumns().size() == 0);
  }
}
