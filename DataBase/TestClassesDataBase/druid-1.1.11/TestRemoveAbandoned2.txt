public class TestRemoveAbandoned2 extends TestCase {
  private MockDriver driver;
  private DruidDataSource dataSource;
  protected void setUp() throws Exception {
    driver=new MockDriver();
    dataSource=new DruidDataSource();
    dataSource.setUrl("jdbc:mock:xxx");
    dataSource.setDriver(driver);
    dataSource.setInitialSize(1);
    dataSource.setMaxActive(2);
    dataSource.setMaxIdle(2);
    dataSource.setMinIdle(1);
    dataSource.setMinEvictableIdleTimeMillis(300 * 1000);
    dataSource.setTimeBetweenEvictionRunsMillis(1000 * 300);
    dataSource.setRemoveAbandoned(true);
    dataSource.setRemoveAbandonedTimeoutMillis(0);
    dataSource.setTestWhileIdle(true);
    dataSource.setTestOnBorrow(false);
    dataSource.setValidationQuery("SELECT 1");
    dataSource.setFilters("stat");
    Assert.assertEquals(0,DruidDataSourceStatManager.getInstance().getDataSourceList().size());
  }
  protected void tearDown() throws Exception {
    dataSource.close();
    Assert.assertEquals(0,DruidDataSourceStatManager.getInstance().getDataSourceList().size());
  }
  public void test_removeAbandoned() throws Exception {
{
      Connection conn=dataSource.getConnection();
      conn.close();
    }
    Assert.assertEquals(0,dataSource.getActiveCount());
    Thread abandonThread=new Thread("abandoned"){
      public void run(){
        for (; ; ) {
          dataSource.removeAbandoned();
          if (Thread.interrupted()) {
            break;
          }
        }
      }
    }
;
    abandonThread.start();
    for (int i=0; i < 1000 * 100; ++i) {
      DruidPooledConnection conn=dataSource.getConnection();
      conn.close();
    }
    Assert.assertEquals(0,dataSource.getActiveCount());
    abandonThread.interrupt();
    System.out.println("removeAbandondedCount : " + dataSource.getRemoveAbandonedCount());
  }
}
