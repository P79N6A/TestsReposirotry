public class WallSelectLimitTest extends TestCase {
  private String sql="select * from t";
  private WallConfig config=new WallConfig();
  protected void setUp() throws Exception {
    config.setSelectLimit(1000);
  }
  public void testMySql() throws Exception {
    WallProvider provider=new MySqlWallProvider(config);
    WallCheckResult checkResult=provider.check(sql);
    String resultSql=checkResult.getSql();
    System.out.println(resultSql);
    assertEquals("SELECT *\n" + "FROM t\n" + "LIMIT 1000",resultSql);
  }
  public void testDB2() throws Exception {
    WallProvider provider=new DB2WallProvider(config);
    WallCheckResult checkResult=provider.check(sql);
    String resultSql=checkResult.getSql();
    System.out.println(resultSql);
    assertEquals("SELECT *\n" + "FROM t\n" + "FETCH FIRST 1000 ROWS ONLY",resultSql);
  }
  public void testSQLServer() throws Exception {
    WallProvider provider=new SQLServerWallProvider(config);
    WallCheckResult checkResult=provider.check(sql);
    String resultSql=checkResult.getSql();
    System.out.println(resultSql);
    assertEquals("SELECT TOP 1000 *\n" + "FROM t",resultSql);
  }
  public void testOracle() throws Exception {
    WallProvider provider=new OracleWallProvider(config);
    WallCheckResult checkResult=provider.check(sql);
    String resultSql=checkResult.getSql();
    System.out.println(resultSql);
    assertEquals("SELECT *\n" + "FROM t\n" + "WHERE ROWNUM <= 1000",resultSql);
  }
  public void testPG() throws Exception {
    WallProvider provider=new PGWallProvider(config);
    WallCheckResult checkResult=provider.check(sql);
    String resultSql=checkResult.getSql();
    System.out.println(resultSql);
    assertEquals("SELECT *\n" + "FROM t\n" + "LIMIT 1000",resultSql);
  }
}
