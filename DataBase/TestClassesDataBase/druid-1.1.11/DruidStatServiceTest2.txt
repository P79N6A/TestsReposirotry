/** 
 * Multiple data source test case.
 */
public class DruidStatServiceTest2 extends TestCase {
  private DruidDataSource dataSource;
  private DruidDataSource dataSource2;
  public void setUp() throws Exception {
    DruidStatService.getInstance().service("/reset-all.json");
    dataSource=new DruidDataSource();
    dataSource.setUrl("jdbc:mock:xxx");
    dataSource.setFilters("stat");
    dataSource.setTestOnBorrow(false);
    dataSource.init();
    dataSource2=new DruidDataSource();
    dataSource2.setUrl("jdbc:mock:xxx2");
    dataSource2.setFilters("stat");
    dataSource2.setTestOnBorrow(false);
    dataSource2.init();
  }
  public void tearDown() throws Exception {
    JdbcUtils.close(dataSource);
    JdbcUtils.close(dataSource2);
  }
  public void test_statService_getSqlList() throws Exception {
    String sql="select 1";
    Connection conn=dataSource.getConnection();
    PreparedStatement stmt=conn.prepareStatement(sql);
    ResultSet rs=stmt.executeQuery();
    rs.next();
    Thread.sleep(1);
    rs.close();
    stmt.close();
    conn.close();
    String sql2="select 1,1";
    conn=dataSource2.getConnection();
    stmt=conn.prepareStatement(sql2);
    rs=stmt.executeQuery();
    rs.next();
    Thread.sleep(1);
    rs.close();
    stmt.close();
    conn.close();
    String result=DruidStatService.getInstance().service("/sql.json");
    Map<String,Object> resultMap=(Map<String,Object>)JSONUtils.parse(result);
    List<Map<String,Object>> sqlList=(List<Map<String,Object>>)resultMap.get("Content");
    assertThat(sqlList.size(),equalTo(2));
    for (    Map<String,Object> sqlStat : sqlList) {
      assertThat((Integer)sqlStat.get("RunningCount"),equalTo(0));
      assertThat((Integer)sqlStat.get("ExecuteCount"),equalTo(1));
      assertThat((Integer)sqlStat.get("FetchRowCount"),equalTo(1));
      assertThat((Integer)sqlStat.get("EffectedRowCount"),equalTo(0));
    }
  }
  public void test_statService_getSqlById() throws Exception {
    String sql="select 1";
    Connection conn=dataSource.getConnection();
    PreparedStatement stmt=conn.prepareStatement(sql);
    ResultSet rs=stmt.executeQuery();
    rs.next();
    rs.close();
    stmt.close();
    conn.close();
    String sql2="select 2";
    conn=dataSource2.getConnection();
    stmt=conn.prepareStatement(sql2);
    rs=stmt.executeQuery();
    rs.next();
    rs.close();
    stmt.close();
    conn.close();
    long id=dataSource.getSqlStatMap().values().iterator().next().getId();
    String result=DruidStatService.getInstance().service("/sql-" + id + ".json");
    Map<String,Object> resultMap=(Map<String,Object>)JSONUtils.parse(result);
    Map<String,Object> sqlStat=(Map<String,Object>)resultMap.get("Content");
    assertThat((Integer)sqlStat.get("RunningCount"),equalTo(0));
    assertThat((Integer)sqlStat.get("ExecuteCount"),equalTo(1));
    assertThat((Integer)sqlStat.get("FetchRowCount"),equalTo(1));
    assertThat((Integer)sqlStat.get("EffectedRowCount"),equalTo(0));
    assertThat((String)sqlStat.get("SQL"),equalTo(sql));
    id=dataSource2.getSqlStatMap().values().iterator().next().getId();
    result=DruidStatService.getInstance().service("/sql-" + id + ".json");
    resultMap=(Map<String,Object>)JSONUtils.parse(result);
    sqlStat=(Map<String,Object>)resultMap.get("Content");
    assertThat((Integer)sqlStat.get("RunningCount"),equalTo(0));
    assertThat((Integer)sqlStat.get("ExecuteCount"),equalTo(1));
    assertThat((Integer)sqlStat.get("FetchRowCount"),equalTo(1));
    assertThat((Integer)sqlStat.get("EffectedRowCount"),equalTo(0));
    assertThat((String)sqlStat.get("SQL"),equalTo(sql2));
    String result2=DruidStatService.getInstance().service("/sql-" + Integer.MAX_VALUE + ".json");
    resultMap=(Map<String,Object>)JSONUtils.parse(result2);
    assertThat(resultMap.get("Content"),is(nullValue()));
  }
  public void test_statService_getDataSourceList() throws Exception {
    DruidStatService.getInstance().service("/reset-all.json");
    String result=DruidStatService.getInstance().service("/datasource.json");
    Map<String,Object> resultMap=(Map<String,Object>)JSONUtils.parse(result);
    List<Map<String,Object>> dataSourceList=(List<Map<String,Object>>)resultMap.get("Content");
    Map<String,Object> dataSourceStat=dataSourceList.get(0);
  }
  public void test_getWallStatMap() throws Exception {
    DruidStatService.getInstance().getWallStatMap(Collections.<String,String>emptyMap());
  }
}
