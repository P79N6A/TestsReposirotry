public class StringComparisonFunctionsTest extends TestCase {
  public void test_0() throws Exception {
    String sql="SELECT '?' LIKE 'ae' COLLATE latin1_german2_ci;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT '?' LIKE 'ae' COLLATE latin1_german2_ci;",text);
  }
  public void test_1() throws Exception {
    String sql="SELECT '?' = 'ae' COLLATE latin1_german2_ci;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT '?' = 'ae' COLLATE latin1_german2_ci;",text);
  }
  public void test_2() throws Exception {
    String sql="SELECT 'a' = 'a ', 'a' LIKE 'a ';";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 'a' = 'a ', 'a' LIKE 'a ';",text);
  }
  public void test_3() throws Exception {
    String sql="SELECT 'David!' LIKE 'David_';";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 'David!' LIKE 'David_';",text);
  }
  public void test_4() throws Exception {
    String sql="SELECT 'David!' LIKE '%D%v%';";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 'David!' LIKE '%D%v%';",text);
  }
  public void test_5() throws Exception {
    String sql="SELECT 'David!' LIKE 'David\\_';";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 'David!' LIKE 'David\\\\_';",text);
  }
  public void test_6() throws Exception {
    String sql="SELECT 'David_' LIKE 'David|_' ESCAPE '|'";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 'David_' LIKE 'David|_' ESCAPE '|'",text);
  }
  public void test_7() throws Exception {
    String sql="SELECT 'abc' LIKE BINARY 'ABC'";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 'abc' LIKE BINARY 'ABC'",text);
  }
  public void test_8() throws Exception {
    String sql="SELECT 10 LIKE '1%'";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 10 LIKE '1%'",text);
  }
  public void test_9() throws Exception {
    String sql="SELECT filename, filename LIKE '%\\\\' FROM t1";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT filename, filename LIKE '%\\\\'\nFROM t1",text);
  }
  public void test_10() throws Exception {
    String sql="SELECT STRCMP('text', 'text2')";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT STRCMP('text', 'text2')",text);
  }
  public void test_11() throws Exception {
    String sql="SET @s1 = _latin1 'x' COLLATE latin1_general_ci;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SET @s1 = _latin1 'x' COLLATE latin1_general_ci;",text);
  }
  public void test_12() throws Exception {
    String sql="SET @s2 = _latin1 'X' COLLATE latin1_general_ci;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SET @s2 = _latin1 'X' COLLATE latin1_general_ci;",text);
  }
  public void test_13() throws Exception {
    String sql="SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT STRCMP(@s1, @s2)\n" + "\t, STRCMP(@s3, @s4);",text);
  }
  public void test_14() throws Exception {
    String sql="SELECT STRCMP(@s1, @s3 COLLATE latin1_general_ci);";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT STRCMP(@s1, @s3 COLLATE latin1_general_ci);",text);
  }
  private String output(  List<SQLStatement> stmtList){
    return SQLUtils.toSQLString(stmtList,JdbcConstants.MYSQL);
  }
}
