public class MySqlResourceWallTest extends TestCase {
  private String[] items;
  public void test_false() throws Exception {
    WallProvider provider=new MySqlWallProvider();
    provider.getConfig().setConditionDoubleConstAllow(true);
    provider.getConfig().setUseAllow(true);
    provider.getConfig().setStrictSyntaxCheck(false);
    provider.getConfig().setMultiStatementAllow(true);
    provider.getConfig().setConditionAndAlwayTrueAllow(true);
    provider.getConfig().setNoneBaseStatementAllow(true);
    provider.getConfig().setSelectUnionCheck(false);
    provider.getConfig().setSchemaCheck(true);
    provider.getConfig().setLimitZeroAllow(true);
    provider.getConfig().setCommentAllow(true);
    for (int i=0; i < items.length; ++i) {
      String sql=items[i];
      if (sql.indexOf("''=''") != -1) {
        continue;
      }
      WallCheckResult result=provider.check(sql);
      if (result.getViolations().size() > 0) {
        Violation violation=result.getViolations().get(0);
        System.out.println("error (" + i + ") : "+ violation.getMessage());
        System.out.println(sql);
        break;
      }
    }
    System.out.println(provider.getViolationCount());
  }
  @Test public void test_lock_table() throws Exception {
    WallProvider provider=new MySqlWallProvider();
    provider.getConfig().setNoneBaseStatementAllow(true);
    String sql="lock tables etstsun write";
    WallCheckResult result=provider.check(sql);
    if (result.getViolations().size() > 0) {
      Violation violation=result.getViolations().get(0);
      System.out.println("error () : " + violation.getMessage());
    }
    Assert.assertTrue(provider.checkValid(sql));
    sql="lock tables etstsun LOW_PRIORITY write";
    result=provider.check(sql);
    if (result.getViolations().size() > 0) {
      Violation violation=result.getViolations().get(0);
      System.out.println("error () : " + violation.getMessage());
    }
    Assert.assertTrue(provider.checkValid(sql));
    sql="UNLOCK TABLES";
    result=provider.check(sql);
    if (result.getViolations().size() > 0) {
      Violation violation=result.getViolations().get(0);
      System.out.println("error () : " + violation.getMessage());
    }
    Assert.assertTrue(provider.checkValid(sql));
    sql="lock table dsdfsdf read";
    result=provider.check(sql);
    if (result.getViolations().size() > 0) {
      Violation violation=result.getViolations().get(0);
      System.out.println("error () : " + violation.getMessage());
    }
    Assert.assertTrue(provider.checkValid(sql));
    sql="lock table dsdfsdf read local";
    result=provider.check(sql);
    if (result.getViolations().size() > 0) {
      Violation violation=result.getViolations().get(0);
      System.out.println("error () : " + violation.getMessage());
    }
    Assert.assertTrue(provider.checkValid(sql));
  }
}
