public class PGSelectTest15 extends PGTest {
  public void test_0() throws Exception {
    String sql="WITH RECURSIVE search_graph(id, link, data, depth) AS (" + "        SELECT g.id, g.link, g.data, 1" + "        FROM graph g"+ "      UNION ALL"+ "        SELECT g.id, g.link, g.data, sg.depth + 1"+ "        FROM graph g, search_graph sg"+ "        WHERE g.id = sg.link"+ ")"+ "SELECT * FROM search_graph;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    stmt.accept(visitor);
    assertEquals("WITH RECURSIVE search_graph (id, link, data, depth) AS (\n" + "\t\tSELECT g.id, g.link, g.data, 1\n" + "\t\tFROM graph g\n"+ "\t\tUNION ALL\n"+ "\t\tSELECT g.id, g.link, g.data, sg.depth + 1\n"+ "\t\tFROM graph g, search_graph sg\n"+ "\t\tWHERE g.id = sg.link\n"+ "\t)\n"+ "SELECT *\n"+ "FROM search_graph;",stmt.toString());
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(3,visitor.getColumns().size());
    Assert.assertEquals(1,visitor.getTables().size());
  }
}
