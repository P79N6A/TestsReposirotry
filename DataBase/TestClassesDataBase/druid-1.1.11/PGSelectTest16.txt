public class PGSelectTest16 extends PGTest {
  public void test_0() throws Exception {
    String sql="WITH RECURSIVE search_graph(id, link, data, depth, path, cycle) AS (" + "        SELECT g.id, g.link, g.data, 1," + "          ARRAY[g.id],"+ "          false"+ "        FROM graph g"+ "      UNION ALL"+ "        SELECT g.id, g.link, g.data, sg.depth + 1,"+ "          path || g.id,"+ "          g.id = ANY(path)"+ "        FROM graph g, search_graph sg"+ "        WHERE g.id = sg.link AND NOT cycle"+ ")"+ "SELECT * FROM search_graph;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    System.out.println(stmt);
    assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    assertEquals(3,visitor.getColumns().size());
    assertEquals(1,visitor.getTables().size());
    assertTrue(visitor.getColumns().contains(new TableStat.Column("graph","id")));
    assertTrue(visitor.getColumns().contains(new TableStat.Column("graph","link")));
    assertTrue(visitor.getColumns().contains(new TableStat.Column("graph","data")));
  }
}
