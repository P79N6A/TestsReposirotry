public class PoolPreparedStatementsChangeTest extends PoolTestCase {
  private DruidDataSource dataSource;
  private Log dataSourceLog;
  protected void setUp() throws Exception {
    super.setUp();
    Field logField=DruidDataSource.class.getDeclaredField("LOG");
    logField.setAccessible(true);
    dataSourceLog=(Log)logField.get(null);
    dataSourceLog.resetStat();
    dataSource=new DruidDataSource();
    dataSource.setUrl("jdbc:mock:xxx");
    dataSource.setTestOnBorrow(false);
    dataSource.init();
    Assert.assertEquals(1,dataSourceLog.getInfoCount());
  }
  protected void tearDown() throws Exception {
    dataSource.close();
    super.tearDown();
  }
  public void test_connectPropertiesChange() throws Exception {
{
      Connection conn=dataSource.getConnection();
      conn.close();
    }
    Assert.assertEquals(false,dataSource.isPoolPreparedStatements());
    dataSource.setPoolPreparedStatements(true);
    Assert.assertEquals(true,dataSource.isPoolPreparedStatements());
    String sql="select ?";
    Assert.assertEquals(0,dataSource.getCachedPreparedStatementCount());
{
      Connection conn=dataSource.getConnection();
      PreparedStatement stmt=conn.prepareStatement(sql);
      stmt.setString(1,"xxx");
      ResultSet rs=stmt.executeQuery();
      rs.close();
      conn.close();
    }
    Assert.assertEquals(1,dataSource.getCachedPreparedStatementCount());
    Assert.assertEquals(1,dataSource.getCachedPreparedStatementAccessCount());
{
      Connection conn=dataSource.getConnection();
      PreparedStatement stmt=conn.prepareStatement(sql);
      stmt.setString(1,"xxx");
      ResultSet rs=stmt.executeQuery();
      rs.close();
      conn.close();
    }
    Assert.assertEquals(1,dataSource.getCachedPreparedStatementCount());
    Assert.assertEquals(2,dataSource.getCachedPreparedStatementAccessCount());
    dataSource.setPoolPreparedStatements(false);
    Assert.assertEquals(0,dataSource.getCachedPreparedStatementCount());
    Assert.assertEquals(2,dataSource.getCachedPreparedStatementAccessCount());
{
      Connection conn=dataSource.getConnection();
      PreparedStatement stmt=conn.prepareStatement(sql);
      stmt.setString(1,"xxx");
      ResultSet rs=stmt.executeQuery();
      rs.close();
      conn.close();
    }
    Assert.assertEquals(0,dataSource.getCachedPreparedStatementCount());
    Assert.assertEquals(2,dataSource.getCachedPreparedStatementAccessCount());
  }
}
