public class ArithmeticOperatorsTest extends TestCase {
  public void test_0() throws Exception {
    String sql="SELECT 3+5;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 3 + 5;",text);
  }
  public void test_1() throws Exception {
    String sql="SELECT 3-5;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 3 - 5;",text);
  }
  public void test_2() throws Exception {
    String sql="SELECT - 2;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT -2;",text);
  }
  public void test_3() throws Exception {
    String sql="SELECT 3*5;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 3 * 5;",text);
  }
  public void test_4() throws Exception {
    String sql="SELECT 18014398509481984*18014398509481984.0;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 18014398509481984 * 18014398509481984.0;",text);
  }
  public void test_5() throws Exception {
    String sql="SELECT 18014398509481984*18014398509481984;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 18014398509481984 * 18014398509481984;",text);
  }
  public void test_6() throws Exception {
    String sql="SELECT 3/5;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 3 / 5;",text);
  }
  public void test_7() throws Exception {
    String sql="SELECT 102/(1-1);";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 102 / (1 - 1);",text);
  }
  public void test_8() throws Exception {
    String sql="SELECT 102/1-1;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 102 / 1 - 1;",text);
  }
  public void test_9() throws Exception {
    String sql="SELECT a + b + c;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT a + b + c;",text);
  }
  public void test_10() throws Exception {
    String sql="SELECT a + (b + c);";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=SQLUtils.toSQLString(stmtList,JdbcConstants.ORACLE);
    assertEquals("SELECT a + (b + c);",text);
  }
  public void test_11() throws Exception {
    String sql="SELECT N  % M;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT N % M;",text);
  }
  public void test_12() throws Exception {
    String sql="SELECT 1 = 0 OR A > ?;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 1 = 0\n\tOR A > ?;",text);
  }
  public void test_13() throws Exception {
    String sql="SELECT 1 = 0 AND ID = ?;";
    SQLStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    String text=output(stmtList);
    Assert.assertEquals("SELECT 1 = 0\n\tAND ID = ?;",text);
  }
  private String output(  List<SQLStatement> stmtList){
    return SQLUtils.toSQLString(stmtList,null);
  }
}
