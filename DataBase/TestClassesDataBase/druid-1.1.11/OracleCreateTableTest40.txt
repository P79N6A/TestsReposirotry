public class OracleCreateTableTest40 extends OracleTest {
  public void test_types() throws Exception {
    String sql="CREATE TABLE customers_part (" + "   customer_id        NUMBER(6)," + "   cust_first_name    VARCHAR2(20),"+ "   cust_last_name     VARCHAR2(20),"+ "   nls_territory      VARCHAR2(30),"+ "   credit_limit       NUMBER(9,2)) "+ "   PARTITION BY RANGE (credit_limit)"+ "   SUBPARTITION BY LIST (nls_territory)"+ "      SUBPARTITION TEMPLATE "+ "         (SUBPARTITION east  VALUES "+ "            ('CHINA', 'JAPAN', 'INDIA', 'THAILAND'),"+ "          SUBPARTITION west VALUES "+ "             ('AMERICA', 'GERMANY', 'ITALY', 'SWITZERLAND'),"+ "          SUBPARTITION other VALUES (DEFAULT))"+ "      (PARTITION p1 VALUES LESS THAN (1000),"+ "       PARTITION p2 VALUES LESS THAN (2500),"+ "       PARTITION p3 VALUES LESS THAN (MAXVALUE));";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    Assert.assertEquals("CREATE TABLE customers_part (\n" + "\tcustomer_id NUMBER(6),\n" + "\tcust_first_name VARCHAR2(20),\n"+ "\tcust_last_name VARCHAR2(20),\n"+ "\tnls_territory VARCHAR2(30),\n"+ "\tcredit_limit NUMBER(9, 2)\n"+ ")\n"+ "PARTITION BY RANGE (credit_limit)\n"+ "SUBPARTITION BY HASH (nls_territory)\n"+ "\tSUBPARTITION TEMPLATE (\n"+ "\t\tSUBPARTITION east VALUES ('CHINA', 'JAPAN', 'INDIA', 'THAILAND'),\n"+ "\t\tSUBPARTITION west VALUES ('AMERICA', 'GERMANY', 'ITALY', 'SWITZERLAND'),\n"+ "\t\tSUBPARTITION other VALUES (DEFAULT)\n"+ "\t) (\n"+ "\tPARTITION p1 VALUES LESS THAN (1000),\n"+ "\tPARTITION p2 VALUES LESS THAN (2500),\n"+ "\tPARTITION p3 VALUES LESS THAN (MAXVALUE)\n"+ ");",SQLUtils.toSQLString(stmt,JdbcConstants.ORACLE));
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(5,visitor.getColumns().size());
    Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("customers_part","customer_id")));
  }
}
