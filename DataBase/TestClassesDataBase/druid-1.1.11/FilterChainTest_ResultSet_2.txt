public class FilterChainTest_ResultSet_2 extends TestCase {
  private DruidDataSource dataSource;
  private CallableStatementProxy statement;
  private int invokeCount=0;
  protected void setUp() throws Exception {
    dataSource=new DruidDataSource();
    ConnectionProxyImpl conn=new ConnectionProxyImpl(dataSource,null,new Properties(),0);
    MockCallableStatement mockStmt=new MockCallableStatement(null,""){
      @Override public Object getObject(      int parameterIndex) throws SQLException {
        invokeCount++;
        return new MockResultSet(null);
      }
    }
;
    statement=new CallableStatementProxyImpl(conn,mockStmt,"",1);
  }
  protected void tearDown() throws Exception {
    JdbcUtils.close(dataSource);
    invokeCount=0;
  }
  public void test_getObject() throws Exception {
    FilterChainImpl chain=new FilterChainImpl(dataSource);
    ResultSet clob=(ResultSet)chain.callableStatement_getObject(statement,1);
    Assert.assertTrue(clob instanceof ResultSetProxy);
    Assert.assertEquals(1,invokeCount);
  }
  public void test_getObject_1() throws Exception {
    FilterChainImpl chain=new FilterChainImpl(dataSource);
    ResultSet clob=(ResultSet)chain.callableStatement_getObject(statement,"1");
    Assert.assertTrue(clob instanceof ResultSetProxy);
    Assert.assertEquals(1,invokeCount);
  }
  public void test_getObject_2() throws Exception {
    FilterChainImpl chain=new FilterChainImpl(dataSource);
    ResultSet clob=(ResultSet)chain.callableStatement_getObject(statement,1,Collections.<String,Class<?>>emptyMap());
    Assert.assertTrue(clob instanceof ResultSetProxy);
    Assert.assertEquals(1,invokeCount);
  }
  public void test_getObject_3() throws Exception {
    FilterChainImpl chain=new FilterChainImpl(dataSource);
    ResultSet clob=(ResultSet)chain.callableStatement_getObject(statement,"1",Collections.<String,Class<?>>emptyMap());
    Assert.assertTrue(clob instanceof ResultSetProxy);
    Assert.assertEquals(1,invokeCount);
  }
}
