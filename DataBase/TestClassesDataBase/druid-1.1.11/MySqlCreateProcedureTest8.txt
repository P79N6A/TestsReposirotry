/** 
 * @Description : begin-end within begin-end
 * @author zhujun [455910092@qq.com]
 * @date 2016-4-14
 * @version V1.0
 */
public class MySqlCreateProcedureTest8 extends MysqlTest {
  /** 
 * DECLARE handler_type HANDLER FOR condition_value[,...] sp_statement handler_type: CONTINUE | EXIT condition_value: SQLSTATE [VALUE] sqlstate_value | condition_name | SQLWARNING | NOT FOUND | SQLEXCEPTION | mysql_error_code
 * @throws Exception
 */
  public void test_0() throws Exception {
    String sql="create or replace procedure test_cursor (in param int(10),out result varchar(90))  " + " begin" + " declare name varchar(20);"+ " declare pass varchar(20);"+ " declare done int;"+ " declare cur_test CURSOR for select user_name,user_pass from test;"+ " declare continue handler FOR SQLSTATE '02000' SET done = 1;"+ " if param then"+ " 		select concat_ws(',',user_name,user_pass) into result from test.users where id=param;"+ " else"+ " 		open cur_test;"+ " 		repeat"+ " 		fetch cur_test into name, pass;"+ " 		select concat_ws(',',result,name,pass) into result;"+ " 		until done end repeat;"+ " 		close cur_test;"+ " end if;"+ " end;";
    List<SQLStatement> statementList=SQLUtils.parseStatements(sql,JdbcConstants.MYSQL);
    SQLStatement stmt=statementList.get(0);
    System.out.println(SQLUtils.toSQLString(stmt,JdbcConstants.MYSQL));
    assertEquals(1,statementList.size());
    System.out.println(stmt);
    SchemaStatVisitor visitor=SQLUtils.createSchemaStatVisitor(JdbcConstants.MYSQL);
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    assertEquals(2,visitor.getTables().size());
    assertEquals(5,visitor.getColumns().size());
    assertEquals(1,visitor.getConditions().size());
  }
  public void test_1() throws Exception {
    String sql="create or replace procedure sp_name(level int,age int)" + " begin" + " declare continue handler FOR SQLSTATE '02000' SET done = 1;"+ " end";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertEquals(0,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
  }
  public void test_2() throws Exception {
    String sql="create or replace procedure sp_name(level int,age int)" + " begin" + " declare continue handler FOR SQLEXCEPTION,SQLWARNING SET done = 1;"+ " end";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertEquals(0,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
  }
  public void test_3() throws Exception {
    String sql="create or replace procedure sp_name(level int,age int)" + " begin" + " declare continue handler FOR 1002 SET done = 1;"+ " end";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertEquals(0,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
  }
  public void test_4() throws Exception {
    String sql="create or replace procedure sp_name(level int,age int)" + " begin" + " declare continue handler FOR SQLWARNING begin set done = 1; end"+ " end";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertEquals(0,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
  }
  public void test_5() throws Exception {
    String sql="create or replace procedure sp_name(level int,age int)" + " begin" + " declare continue handler FOR SQLWARNING begin set done = 1; end;"+ " end";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    statemen.accept(visitor);
    Assert.assertEquals(0,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
  }
}
