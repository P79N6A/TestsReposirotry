public class DB2SelectTest_5 extends DB2Test {
  public void test_0() throws Exception {
    String sql="SELECT * FROM (SELECT TEMP_TAB.*,ROWNUMBER() OVER() AS IDX FROM (SELECT" + "            DISTINCT  ( OH.ORDER_ID )" + "        FROM"+ "            ORDER_HEADER OH,"+ "            ORDER_ITEM OI,"+ "            ORDER_PAYMENT_PERFERENCE OPP,"+ "            ORDER_SHIPMENT_PERFERENCE OSP"+ "        WHERE"+ "            OH.ORDER_ID = OI.ORDER_ID"+ "        AND OH.ORDER_ID = OPP.ORDER_ID"+ "        AND OH.ORDER_ID = OSP.ORDER_ID"+ "             "+ "                AND OH.ORDER_ID = ? ) AS TEMP_TAB ) AS TEMP_TAB_WITH_IDX "+ " WHERE TEMP_TAB_WITH_IDX.IDX > 0 AND TEMP_TAB_WITH_IDX.IDX <= 20"+ "";
    DB2StatementParser parser=new DB2StatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    DB2SchemaStatVisitor visitor=new DB2SchemaStatVisitor();
    stmt.accept(visitor);
    Assert.assertEquals(4,visitor.getTables().size());
    Assert.assertEquals(4,visitor.getColumns().size());
    Assert.assertEquals(4,visitor.getConditions().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ORDER_HEADER")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("ORDER_HEADER","ORDER_ID")));
    String output=SQLUtils.toSQLString(stmt,JdbcConstants.DB2);
    Assert.assertEquals("SELECT *\n" + "FROM (\n" + "\tSELECT TEMP_TAB.*, ROWNUMBER() OVER () AS IDX\n"+ "\tFROM (\n"+ "\t\tSELECT DISTINCT OH.ORDER_ID\n"+ "\t\tFROM ORDER_HEADER OH, ORDER_ITEM OI, ORDER_PAYMENT_PERFERENCE OPP, ORDER_SHIPMENT_PERFERENCE OSP\n"+ "\t\tWHERE OH.ORDER_ID = OI.ORDER_ID\n"+ "\t\t\tAND OH.ORDER_ID = OPP.ORDER_ID\n"+ "\t\t\tAND OH.ORDER_ID = OSP.ORDER_ID\n"+ "\t\t\tAND OH.ORDER_ID = ?\n"+ "\t) TEMP_TAB\n"+ ") TEMP_TAB_WITH_IDX\n"+ "WHERE TEMP_TAB_WITH_IDX.IDX > 0\n"+ "\tAND TEMP_TAB_WITH_IDX.IDX <= 20",output);
  }
}
