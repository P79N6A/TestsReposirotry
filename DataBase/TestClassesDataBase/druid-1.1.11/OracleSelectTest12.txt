public class OracleSelectTest12 extends OracleTest {
  public void test_0() throws Exception {
    String sql="select /*+ use_nl(b c) ordered */ count(*) " + "      from      (" + "          select distinct  parent_id parentId      from BUSINESS_ORDER a1      "+ "          where SELLER_SEQ in                        ( ?)     "+ "              and not (order_from = 'safepay' and status in ('buyer_create', 'closed'))     "+ "              ) b, business_order c where ID = b.parentId";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    assertEquals(1,visitor.getTables().size());
    assertTrue(visitor.getTables().containsKey(new TableStat.Name("BUSINESS_ORDER")));
    assertEquals(5,visitor.getColumns().size());
    assertTrue(visitor.containsColumn("BUSINESS_ORDER","parent_id"));
    assertTrue(visitor.containsColumn("BUSINESS_ORDER","SELLER_SEQ"));
    assertTrue(visitor.containsColumn("BUSINESS_ORDER","order_from"));
    assertTrue(visitor.containsColumn("BUSINESS_ORDER","status"));
    assertTrue(visitor.containsColumn("business_order","ID"));
  }
}
