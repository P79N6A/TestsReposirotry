public class OracleCreateTableTest63 extends OracleTest {
  public void test_types() throws Exception {
    String sql="   CREATE TABLE \"SC_001\".\"TB_001\" OF \"ZHANGZJ\".\"T_OBJECT\" \n" + " OIDINDEX  ( PCTFREE 10 INITRANS 2 MAXTRANS 255 \n" + "  STORAGE(INITIAL 1048576 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645\n"+ "  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)\n"+ "  TABLESPACE \"USERS\" ) \n"+ " PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING\n"+ "  STORAGE(INITIAL 1048576 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645\n"+ "  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)\n"+ "  TABLESPACE \"USERS\"    ";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    Assert.assertEquals("CREATE TABLE \"SC_001\".\"TB_001\"\n" + "OF \"ZHANGZJ\".\"T_OBJECT\"\n" + "OIDINDEX (\n"+ "\tPCTFREE 10\n"+ "\tINITRANS 2\n"+ "\tMAXTRANS 255\n"+ "\tTABLESPACE \"USERS\"\n"+ "\tSTORAGE (\n"+ "\t\tINITIAL 1048576\n"+ "\t\tNEXT 1048576\n"+ "\t\tMINEXTENTS 1\n"+ "\t\tMAXEXTENTS 2147483645\n"+ "\t\tPCTINCREASE 0\n"+ "\t\tFREELISTS 1\n"+ "\t\tFREELIST GROUPS 1\n"+ "\t\tBUFFER_POOL DEFAULT\n"+ "\t)\n"+ ")\n"+ "PCTFREE 10\n"+ "PCTUSED 40\n"+ "INITRANS 1\n"+ "MAXTRANS 255\n"+ "NOCOMPRESS\n"+ "LOGGING\n"+ "TABLESPACE \"USERS\"\n"+ "STORAGE (\n"+ "\tINITIAL 1048576\n"+ "\tNEXT 1048576\n"+ "\tMINEXTENTS 1\n"+ "\tMAXEXTENTS 2147483645\n"+ "\tPCTINCREASE 0\n"+ "\tFREELISTS 1\n"+ "\tFREELIST GROUPS 1\n"+ "\tBUFFER_POOL DEFAULT\n"+ ")",SQLUtils.toSQLString(stmt,JdbcConstants.ORACLE));
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
  }
}
