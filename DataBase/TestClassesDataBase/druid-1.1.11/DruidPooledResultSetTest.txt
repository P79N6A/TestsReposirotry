public class DruidPooledResultSetTest extends TestCase {
  private DruidDataSource dataSource;
  protected void setUp() throws Exception {
    dataSource=new DruidDataSource();
    dataSource.setUrl("jdbc:mock:xxx");
    dataSource.setTestOnBorrow(false);
    dataSource.setFilters("stat");
  }
  protected void tearDown() throws Exception {
    dataSource.close();
  }
  public void testWrap() throws Exception {
    String sql="select ?";
    Connection conn=dataSource.getConnection();
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.setString(1,"xxx");
    ResultSet rs=stmt.executeQuery();
    ResultSet raw=rs.unwrap(ResultSet.class);
    Assert.assertTrue(raw instanceof MockResultSet);
    rs.close();
    conn.close();
  }
  public void test_notSupport() throws Exception {
    String sql="select ?";
    Connection conn=dataSource.getConnection();
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.setString(1,"xxx");
    DruidPooledResultSet rs=(DruidPooledResultSet)stmt.executeQuery();
    Exception error=null;
    try {
      rs.getObject(1,String.class);
    }
 catch (    SQLFeatureNotSupportedException e) {
      error=e;
    }
    Assert.assertNotNull(error);
    rs.close();
    conn.close();
  }
  public void test_notSupport_1() throws Exception {
    String sql="select ?";
    Connection conn=dataSource.getConnection();
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.setString(1,"xxx");
    DruidPooledResultSet rs=(DruidPooledResultSet)stmt.executeQuery();
    Exception error=null;
    try {
      rs.getObject("1",String.class);
    }
 catch (    SQLFeatureNotSupportedException e) {
      error=e;
    }
    Assert.assertNotNull(error);
    rs.close();
    conn.close();
  }
  public void test_rowCount() throws Exception {
    String sql="select ?";
    Connection conn=dataSource.getConnection();
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.setString(1,"xxx");
    DruidPooledResultSet rs=(DruidPooledResultSet)stmt.executeQuery();
    Assert.assertEquals(true,rs.next());
    Assert.assertEquals(false,rs.next());
    Assert.assertEquals(1,rs.getFetchRowCount());
    Assert.assertEquals(true,rs.previous());
    Assert.assertEquals(false,rs.previous());
    Assert.assertEquals(1,rs.getFetchRowCount());
    Assert.assertEquals(true,rs.next());
    Assert.assertEquals(false,rs.next());
    Assert.assertEquals(1,rs.getFetchRowCount());
    Assert.assertFalse(rs.rowUpdated());
    rs.close();
    conn.close();
  }
}
