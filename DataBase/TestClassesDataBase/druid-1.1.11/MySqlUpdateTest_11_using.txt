public class MySqlUpdateTest_11_using extends MysqlTest {
  public void test_0() throws Exception {
    String sql="update t1, t2, t3 inner join t4 using (col_name1, col_name2)\n" + "set t1.value_col = t3.new_value_col, t4.`some-col*` = `t2`.`***` * 2\n" + "where  t1.pk = t2.fk_t1_pk and t2.id = t4.fk_id_entity;";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(4,visitor.getTables().size());
    Assert.assertEquals(8,visitor.getColumns().size());
    Assert.assertTrue(visitor.containsTable("t4"));
    Assert.assertTrue(visitor.getColumns().contains(new Column("t1","value_col")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("t1","pk")));
{
      String output=SQLUtils.toMySqlString(stmt);
      Assert.assertEquals("UPDATE (t1, t2, t3)\n" + "\tINNER JOIN t4 USING (col_name1, col_name2)\n" + "SET t1.value_col = t3.new_value_col, t4.`some-col*` = `t2`.`***` * 2\n"+ "WHERE t1.pk = t2.fk_t1_pk\n"+ "\tAND t2.id = t4.fk_id_entity;",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
      Assert.assertEquals("update (t1, t2, t3)\n" + "\tinner join t4 using (col_name1, col_name2)\n" + "set t1.value_col = t3.new_value_col, t4.`some-col*` = `t2`.`***` * 2\n"+ "where t1.pk = t2.fk_t1_pk\n"+ "\tand t2.id = t4.fk_id_entity;",output);
    }
    assertTrue(WallUtils.isValidateMySql(sql));
  }
}
