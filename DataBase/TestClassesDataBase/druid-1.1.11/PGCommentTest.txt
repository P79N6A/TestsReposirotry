public class PGCommentTest extends PGTest {
  public void test_0(){
    String sql="/*multiline comment test" + ".\r\n multiline comment test select * from a;";
    PGSQLStatementParser parser;
    try {
      parser=new PGSQLStatementParser(sql);
      parser.parseStatementList();
    }
 catch (    Exception e) {
      assertTrue(e instanceof ParserException);
    }
  }
  public void test_1(){
    String sql="select a.id,--single line comment test a.name from a;";
    PGSQLStatementParser parser;
    try {
      parser=new PGSQLStatementParser(sql);
      parser.parseStatementList();
    }
 catch (    Exception e) {
      assertTrue(e instanceof ParserException);
    }
  }
  public void test_2() throws Exception {
    String sql="/*multiline comment test" + ".\r\n multiline comment test*" + "/select --single line comment test\r\na.id,"+ "/*multiline comment test*/"+ "a.name from a;";
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    statemen.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("a")));
  }
}
