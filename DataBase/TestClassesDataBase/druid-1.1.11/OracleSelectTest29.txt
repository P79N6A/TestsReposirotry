public class OracleSelectTest29 extends OracleTest {
  public void test_0() throws Exception {
    String sql="(select id,super_category_id_1 from category where super_category_id_1 is not null and super_category_id_1 != '-1')    union    (select id,super_category_id_2 from category where super_category_id_2 is not null and super_category_id_2 != '-1')     union    (select id,super_category_id_3 from category where super_category_id_3 is not null and super_category_id_3 != '-1')    union    (select id,super_category_id_4 from category where super_category_id_4 is not null and super_category_id_4 != '-1')    union    (select id,super_category_id_5 from category where super_category_id_5 is not null and super_category_id_5 != '-1')";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    statemen.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("category")));
    Assert.assertEquals(6,visitor.getColumns().size());
  }
}
