public class OracleCreateTriggerTest2 extends OracleTest {
  public void test_0() throws Exception {
    String sql="CREATE OR REPLACE TRIGGER projects_idt\n" + "          BEFORE INSERT ON projects\n" + "          FOR EACH ROW\n"+ "        BEGIN\n"+ "           IF :new.id IS null THEN\n"+ "             SELECT projects_seq.nextval INTO :new.id FROM dual;\n"+ "           END IF;\n"+ "        END;";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    Assert.assertEquals("CREATE OR REPLACE TRIGGER projects_idt\n" + "\tBEFORE INSERT\n" + "\tON projects\n"+ "\tFOR EACH ROW\n"+ "BEGIN\n"+ "\tIF :new.id IS NULL THEN\n"+ "\t\tSELECT projects_seq.NEXTVAL\n"+ "\t\tINTO :new.id\n"+ "\t\tFROM dual;\n"+ "\tEND IF;\n"+ "END;",SQLUtils.toSQLString(stmt,JdbcConstants.ORACLE));
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(0,visitor.getColumns().size());
  }
}
