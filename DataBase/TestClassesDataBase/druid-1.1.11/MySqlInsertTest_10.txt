public class MySqlInsertTest_10 extends MysqlTest {
  public void test_parseCompleteValues_false() throws Exception {
    String sql="insert into t(a,b) values ('a1','b1'),('a2','b2'),('a3','b3'),('a4','b4');";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    parser.setParseCompleteValues(false);
    parser.setParseValuesSize(3);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    MySqlInsertStatement insertStmt=(MySqlInsertStatement)stmt;
    Assert.assertEquals(3,insertStmt.getValuesList().size());
    Assert.assertEquals(2,insertStmt.getValues().getValues().size());
    Assert.assertEquals(2,insertStmt.getColumns().size());
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    String formatSql="INSERT INTO t (a, b)" + "\nVALUES ('a1', 'b1')," + "\n\t('a2', 'b2'),"+ "\n\t('a3', 'b3')";
    Assert.assertEquals(formatSql,SQLUtils.toMySqlString(insertStmt));
  }
  public void test_parseCompleteValues_true() throws Exception {
    String sql="insert into t(a,b) values ('a1','b1'),('a2','b2'),('a3','b3'),('a4','b4');";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    parser.setParseCompleteValues(true);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    MySqlInsertStatement insertStmt=(MySqlInsertStatement)stmt;
    Assert.assertEquals(4,insertStmt.getValuesList().size());
    Assert.assertEquals(2,insertStmt.getValues().getValues().size());
    Assert.assertEquals(2,insertStmt.getColumns().size());
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    String formatSql="INSERT INTO t (a, b)" + "\nVALUES ('a1', 'b1')," + "\n\t('a2', 'b2'),"+ "\n\t('a3', 'b3'),"+ "\n\t('a4', 'b4');";
    Assert.assertEquals(formatSql,SQLUtils.toMySqlString(insertStmt));
  }
}
