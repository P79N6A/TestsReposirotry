public class PostgresqlResourceTest extends PGTest {
  public void test_0() throws Exception {
    exec_test("bvt/parser/postgresql-0.txt");
  }
  public void exec_test(  String resource) throws Exception {
    System.out.println(resource);
    InputStream is=null;
    is=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
    Reader reader=new InputStreamReader(is,"UTF-8");
    String input=Utils.read(reader);
    JdbcUtils.close(reader);
    String[] items=input.split("---------------------------");
    String sql=items[0].trim();
    String expect=items[1].trim();
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    PGSchemaStatVisitor visitor=new PGSchemaStatVisitor();
    statemen.accept(visitor);
    System.out.println(sql);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println();
    System.out.println();
  }
  void mergValidate(  String sql,  String expect){
    PGSQLStatementParser parser=new PGSQLStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement statemen=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    StringBuilder out=new StringBuilder();
    PGOutputVisitor visitor=new PGOutputVisitor(out);
    statemen.accept(visitor);
    System.out.println(out.toString());
    Assert.assertEquals(expect,out.toString());
  }
}
