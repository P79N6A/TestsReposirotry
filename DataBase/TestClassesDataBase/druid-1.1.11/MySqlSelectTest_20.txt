public class MySqlSelectTest_20 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="select bsvariety, max(bsh) as bsh, min(bsl) as bsl " + " from   exchange_market_info " + " where bsdate>date_sub(now(),interval 1 day)"+ " group by bsvariety desc;";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    Assert.assertTrue(visitor.getColumns().contains(new Column("exchange_market_info","bsvariety")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("exchange_market_info","bsh")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("exchange_market_info","bsl")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("exchange_market_info","bsdate")));
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(4,visitor.getColumns().size());
    Assert.assertEquals(1,visitor.getConditions().size());
    Assert.assertEquals(0,visitor.getOrderByColumns().size());
    String output=SQLUtils.toMySqlString(stmt);
    Assert.assertEquals("SELECT bsvariety, MAX(bsh) AS bsh, MIN(bsl) AS bsl" + "\nFROM exchange_market_info" + "\nWHERE bsdate > date_sub(now(), INTERVAL 1 DAY)"+ "\nGROUP BY bsvariety DESC;",output);
  }
}
