public class MySqlSelectTest_33 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="select COUNT() AS count,\n" + "DATE_FORMAT(DATE(reg_time), '%Y-%m-%d') AS date,\n" + "(HOUR(reg_time) DIV 2) as intervalTime\n"+ "FROM USER_RECOMMEND_INFO WHERE 1=1\n"+ "and reg_time >='2016-12-01 00:00:00'\n"+ "and reg_time <='2016-12-01 23:59:59'\n"+ "group by DATE(reg_time),HOUR(reg_time) DIV 2";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
{
      String output=SQLUtils.toMySqlString(stmt);
      Assert.assertEquals("SELECT COUNT() AS count, DATE_FORMAT(DATE(reg_time), '%Y-%m-%d') AS date\n" + "\t, HOUR(reg_time) DIV 2 AS intervalTime\n" + "FROM USER_RECOMMEND_INFO\n"+ "WHERE 1 = 1\n"+ "\tAND reg_time >= '2016-12-01 00:00:00'\n"+ "\tAND reg_time <= '2016-12-01 23:59:59'\n"+ "GROUP BY DATE(reg_time), HOUR(reg_time) DIV 2",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
      Assert.assertEquals("select count() as count, DATE_FORMAT(DATE(reg_time), '%Y-%m-%d') as date\n" + "\t, HOUR(reg_time) div 2 as intervalTime\n" + "from USER_RECOMMEND_INFO\n"+ "where 1 = 1\n"+ "\tand reg_time >= '2016-12-01 00:00:00'\n"+ "\tand reg_time <= '2016-12-01 23:59:59'\n"+ "group by DATE(reg_time), HOUR(reg_time) div 2",output);
    }
  }
}
