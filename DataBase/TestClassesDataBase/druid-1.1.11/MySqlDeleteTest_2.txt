public class MySqlDeleteTest_2 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="DELETE t1 FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.id IS NULL;";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals("DELETE t1" + "\nFROM t1" + "\n\tLEFT JOIN t2 ON t1.id = t2.id"+ "\nWHERE t2.id IS NULL;",SQLUtils.toMySqlString(stmt));
    Assert.assertEquals("delete t1" + "\nfrom t1" + "\n\tleft join t2 on t1.id = t2.id"+ "\nwhere t2.id is null;",SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(2,visitor.getTables().size());
    Assert.assertEquals(2,visitor.getColumns().size());
    Assert.assertEquals(3,visitor.getConditions().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t1")));
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t2")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("t1","id")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("t2","id")));
  }
}
