public class OracleSelectTest93_model extends OracleTest {
  public void test_0() throws Exception {
    String sql="select country,prod,year,s\n" + "from sales_view_ref\n" + "model\n"+ "partition by (country)\n"+ "dimension by (prod, year)\n"+ "measures (sale s)\n"+ "ignore nav\n"+ "-- cell_reference_options\n"+ "unique dimension\n"+ "-- here starts model_rules_clause\n"+ "rules upsert sequential order\n"+ "(\n"+ "s[prod='mouse pad', year=2001] = s['mouse pad', 1999] + s['mouse pad', 2000],\n"+ "s['standard mouse', 2002] = s['standard mouse', 2001]\n"+ ")\n"+ "order by country, prod, year";
    System.out.println(sql);
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLSelectStatement stmt=(SQLSelectStatement)statementList.get(0);
    System.out.println(stmt.toString());
    Assert.assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
{
      String text=SQLUtils.toOracleString(stmt);
      assertEquals("SELECT country, prod, year, s\n" + "FROM sales_view_ref\n" + "MODEL\n"+ "\tPARTITION BY (country)\n"+ "\tDIMENSION BY (prod, year)\n"+ "\tMEASURES (sale s)\n"+ "\tIGNORE NAV\n"+ "\tUNIQUE DIMENSION\n"+ "\tRULES UPSERT SEQUENTIAL ORDER (s[prod = 'mouse pad', year = 2001] = s['mouse pad', 1999] + s['mouse pad', 2000], s['standard mouse', 2002] = s['standard mouse', 2001])\n"+ "ORDER BY country, prod, year",text);
    }
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    assertEquals(1,visitor.getTables().size());
    assertEquals(4,visitor.getColumns().size());
    assertEquals(0,visitor.getConditions().size());
    assertEquals(0,visitor.getRelationships().size());
    assertEquals(3,visitor.getOrderByColumns().size());
  }
}
