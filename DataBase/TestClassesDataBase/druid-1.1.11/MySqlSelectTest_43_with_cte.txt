public class MySqlSelectTest_43_with_cte extends MysqlTest {
  public void test_0() throws Exception {
    String sql="WITH\n" + "  cte1 AS (SELECT a, b FROM table1),\n" + "  cte2 AS (SELECT c, d FROM table2)\n"+ "SELECT b, d FROM cte1 JOIN cte2\n"+ "WHERE cte1.a = cte2.c;";
    List<SQLStatement> statementList=SQLUtils.parseStatements(sql,JdbcConstants.MYSQL,true);
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    SchemaStatVisitor visitor=SQLUtils.createSchemaStatVisitor(JdbcConstants.MYSQL);
    stmt.accept(visitor);
{
      String output=SQLUtils.toMySqlString(stmt);
      Assert.assertEquals("WITH cte1 AS (\n" + "\t\tSELECT a, b\n" + "\t\tFROM table1\n"+ "\t), \n"+ "\tcte2 AS (\n"+ "\t\tSELECT c, d\n"+ "\t\tFROM table2\n"+ "\t)\n"+ "SELECT b, d\n"+ "FROM cte1\n"+ "\tJOIN cte2\n"+ "WHERE cte1.a = cte2.c;",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
      Assert.assertEquals("with cte1 as (\n" + "\t\tselect a, b\n" + "\t\tfrom table1\n"+ "\t), \n"+ "\tcte2 as (\n"+ "\t\tselect c, d\n"+ "\t\tfrom table2\n"+ "\t)\n"+ "select b, d\n"+ "from cte1\n"+ "\tjoin cte2\n"+ "where cte1.a = cte2.c;",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,new SQLUtils.FormatOption(true,true,true));
      Assert.assertEquals("WITH cte1 AS (\n" + "\t\tSELECT a, b\n" + "\t\tFROM table1\n"+ "\t), \n"+ "\tcte2 AS (\n"+ "\t\tSELECT c, d\n"+ "\t\tFROM table2\n"+ "\t)\n"+ "SELECT b, d\n"+ "FROM cte1\n"+ "\tJOIN cte2\n"+ "WHERE cte1.a = cte2.c;",output);
    }
  }
}
