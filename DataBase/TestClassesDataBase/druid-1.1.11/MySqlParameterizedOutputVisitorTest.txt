public class MySqlParameterizedOutputVisitorTest extends TestCase {
  public void test_0() throws Exception {
    validate("SELECT * FROM T WHERE ID IN (?, ?, ?)","SELECT *\nFROM T\nWHERE ID IN (?)");
  }
  public void test_1() throws Exception {
    validate("SELECT * FROM T WHERE ID = 5","SELECT *\nFROM T\nWHERE ID = ?");
  }
  public void test_2() throws Exception {
    validate("SELECT * FROM T WHERE 1 = 0 AND ID = 5","SELECT *\nFROM T\nWHERE 1 = 0\n\tAND ID = ?");
  }
  public void test_3() throws Exception {
    validate("SELECT * FROM T WHERE ID = ? OR ID = ?","SELECT *\nFROM T\nWHERE ID = ?");
    validate("SELECT * FROM T WHERE A.ID = ? OR A.ID = ?","SELECT *\nFROM T\nWHERE A.ID = ?");
    validate("SELECT * FROM T WHERE 1 = 0 OR a.id = ? OR a.id = ? OR a.id = ? OR a.id = ?","SELECT *\nFROM T\nWHERE 1 = 0\n\tOR a.id = ?");
    validateOracle("SELECT * FROM T WHERE 1 = 0 OR a.id = ? OR a.id = ? OR a.id = ? OR a.id = ?","SELECT *\nFROM T\nWHERE 1 = 0\n\tOR a.id = ?");
    validateOracle("SELECT * FROM T WHERE A.ID = ? OR A.ID = ?","SELECT *\nFROM T\nWHERE A.ID = ?");
    validate("INSERT INTO T (F1, F2) VALUES(?, ?), (?, ?), (?, ?)","INSERT INTO T (F1, F2)\nVALUES (?, ?)");
    validate("update net_device d, sys_user u set d.resp_user_id=u.id where d.resp_user_login_name=u.username and d.id in (42354)","UPDATE net_device d, sys_user u\nSET d.resp_user_id = u.id\nWHERE d.resp_user_login_name = u.username\n\tAND d.id IN (?)");
  }
  void validate(  String sql,  String expect){
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    StringBuilder out=new StringBuilder();
    MySqlOutputVisitor visitor=new MySqlOutputVisitor(out,true);
    stmt.accept(visitor);
    Assert.assertTrue(visitor.getReplaceCount() > 0);
    Assert.assertEquals(expect,out.toString());
  }
  void validateOracle(  String sql,  String expect){
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    StringBuilder out=new StringBuilder();
    OracleParameterizedOutputVisitor visitor=new OracleParameterizedOutputVisitor(out,false);
    stmt.accept(visitor);
    Assert.assertTrue(visitor.getReplaceCount() > 0);
    Assert.assertEquals(expect,out.toString());
  }
}
