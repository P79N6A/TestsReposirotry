public class DB2SelectTest_12 extends DB2Test {
  public void test_0() throws Exception {
    String sql="SELECT * FROM TASK_POLICE_QUERY_BATCH WHERE STATUS = '0' ORDER BY PRIORITY FETCH FIRST 100 ROWS ONLY";
    DB2StatementParser parser=new DB2StatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    System.out.println(stmt);
    Assert.assertEquals(1,statementList.size());
    DB2SchemaStatVisitor visitor=new DB2SchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(3,visitor.getColumns().size());
    Assert.assertEquals(1,visitor.getConditions().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("TASK_POLICE_QUERY_BATCH")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("TASK_POLICE_QUERY_BATCH","STATUS")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("TASK_POLICE_QUERY_BATCH","*")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("TASK_POLICE_QUERY_BATCH","PRIORITY")));
    Assert.assertEquals("SELECT *" + "\nFROM TASK_POLICE_QUERY_BATCH" + "\nWHERE STATUS = '0'"+ "\nORDER BY PRIORITY"+ "\nFETCH FIRST 100 ROWS ONLY",SQLUtils.toSQLString(stmt,JdbcConstants.DB2));
    Assert.assertEquals("select *" + "\nfrom TASK_POLICE_QUERY_BATCH" + "\nwhere STATUS = '0'"+ "\norder by PRIORITY"+ "\nfetch first 100 rows only",SQLUtils.toSQLString(stmt,JdbcConstants.DB2,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
  }
}
