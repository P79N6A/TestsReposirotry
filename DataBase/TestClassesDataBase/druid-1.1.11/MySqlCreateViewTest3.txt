public class MySqlCreateViewTest3 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="create algorithm = merge view my_view2(col1, col2) as select * from t2 with check option;\n";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLCreateViewStatement stmt=(SQLCreateViewStatement)statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    assertEquals("CREATE ALGORITHM = merge\n" + "\tVIEW my_view2 (\n" + "\tcol1, \n"+ "\tcol2\n"+ ")\n"+ "AS\n"+ "SELECT *\n"+ "FROM t2\n"+ "WITH CHECK OPTION;",SQLUtils.toMySqlString(stmt));
    Assert.assertEquals("create algorithm = merge\n" + "\tview my_view2 (\n" + "\tcol1, \n"+ "\tcol2\n"+ ")\n"+ "as\n"+ "select *\n"+ "from t2\n"+ "with check option;",SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    System.out.println("fields : " + visitor.getColumns());
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(1,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t2")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("t2","*")));
  }
}
