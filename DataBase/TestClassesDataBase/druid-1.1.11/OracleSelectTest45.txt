public class OracleSelectTest45 extends OracleTest {
  public void test_0() throws Exception {
    String sql="SELECT T1.BC_ID AS BCID，SUM(PRODUCT_NUM) AS COUNT " + "　　FROM MT_PRODUCT_ORDER T1 ,MT_ORDER T2 " + "　　WHERE T1.MT_ORDER_ID= T2.MT_ORDER_ID "+ "AND T2.PUBLISH_TIME>= ? "+ "AND T1.STATES = '0' AND T2.STATES = '0' "+ "AND REFUND_STATE = '0' "+ "AND PRODUCT_ORDER_STATE >= 300 "+ "AND BC_ID in (?) "+ "GROUP BY BC_ID";
    OracleStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    OracleSchemaStatVisitor visitor=new OracleSchemaStatVisitor();
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    System.out.println("relationships : " + visitor.getRelationships());
    System.out.println("orderBy : " + visitor.getOrderByColumns());
    Assert.assertEquals(2,visitor.getTables().size());
    Assert.assertEquals(10,visitor.getColumns().size());
    String text=TestUtils.outputOracle(stmt);
    Assert.assertEquals("SELECT T1.BC_ID AS BCID, SUM(PRODUCT_NUM) AS COUNT" + "\nFROM MT_PRODUCT_ORDER T1, MT_ORDER T2" + "\nWHERE T1.MT_ORDER_ID = T2.MT_ORDER_ID"+ "\n\tAND T2.PUBLISH_TIME >= ?"+ "\n\tAND T1.STATES = '0'"+ "\n\tAND T2.STATES = '0'"+ "\n\tAND REFUND_STATE = '0'"+ "\n\tAND PRODUCT_ORDER_STATE >= 300"+ "\n\tAND BC_ID IN (?)"+ "\nGROUP BY BC_ID",text);
  }
}
