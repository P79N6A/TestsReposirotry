public class OracleMergeTest11 extends OracleTest {
  public void test_0() throws Exception {
    String sql="MERGE INTO (\n" + "SELECT *\n" + "FROM KPI_M_CW_INCOME_FACT_BAK\n"+ "WHERE THE_DATE = '{THISMONTH}'\n"+ "AND AREA_LEVEL <= 1\n"+ "AND TYPE_ID = '2'\n"+ ") A\n"+ "USING (\n"+ "SELECT *\n"+ "FROM M_HEALTH_APPRAISE_LOAD\n"+ "WHERE THE_DATE = TRUNC(SYSDATE)\n"+ "AND AREA_LEVEL <= 1\n"+ ") B ON (A.AREA_ID = B.AREA_ID\n"+ "AND A.AREA_LEVEL = B.AREA_LEVEL)\n"+ "WHEN MATCHED THEN UPDATE SET A.SUM_CHRG_YS = ROUND(B.TOTAL_CHARGE * 1.00 / 10000, 2), A.CHARGE = B.THIS_CHARGE;";
    SQLStatementParser parser=new OracleStatementParser(sql);
    List<SQLStatement> stmtList=parser.parseStatementList();
    SQLMergeStatement mergeStatement=(SQLMergeStatement)stmtList.get(0);
    String result=SQLUtils.toOracleString(mergeStatement);
    Assert.assertEquals("MERGE INTO (\n" + "\tSELECT *\n" + "\tFROM KPI_M_CW_INCOME_FACT_BAK\n"+ "\tWHERE THE_DATE = '{THISMONTH}'\n"+ "\t\tAND AREA_LEVEL <= 1\n"+ "\t\tAND TYPE_ID = '2'\n"+ ") A\n"+ "USING (\n"+ "\tSELECT *\n"+ "\tFROM M_HEALTH_APPRAISE_LOAD\n"+ "\tWHERE THE_DATE = TRUNC(SYSDATE)\n"+ "\t\tAND AREA_LEVEL <= 1\n"+ ") B ON (A.AREA_ID = B.AREA_ID\n"+ "AND A.AREA_LEVEL = B.AREA_LEVEL) \n"+ "WHEN MATCHED THEN UPDATE SET A.SUM_CHRG_YS = ROUND(B.TOTAL_CHARGE * 1.00 / 10000, 2), A.CHARGE = B.THIS_CHARGE;",result);
    SQLSelect select=((SQLSubqueryTableSource)mergeStatement.getInto()).getSelect();
    assertEquals("SELECT *\n" + "FROM KPI_M_CW_INCOME_FACT_BAK\n" + "WHERE THE_DATE = '{THISMONTH}'\n"+ "\tAND AREA_LEVEL <= 1\n"+ "\tAND TYPE_ID = '2'",select.toString());
    SQLUpdateSetItem updateSetItem=mergeStatement.getUpdateClause().getItems().get(0);
    SQLExpr value=updateSetItem.getValue();
    assertEquals("ROUND(B.TOTAL_CHARGE * 1.00 / 10000, 2)",value.toString());
  }
}
