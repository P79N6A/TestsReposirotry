public class MySqlCreateTableTest44 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="CREATE TABLE lc (" + "    a INT NULL, " + "    b INT NULL"+ ")"+ "PARTITION BY LIST COLUMNS(a,b) ("+ "    PARTITION p0 VALUES IN( (0,0), (NULL,NULL) ),"+ "    PARTITION p1 VALUES IN( (0,1), (0,2), (0,3), (1,1), (1,2) ),"+ "    PARTITION p2 VALUES IN( (1,0), (2,0), (2,1), (3,0), (3,1) ),"+ "    PARTITION p3 VALUES IN( (1,3), (2,2), (2,3), (3,2), (3,3) )"+ ");";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(2,visitor.getColumns().size());
    Assert.assertEquals(0,visitor.getConditions().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("lc")));
    String output=SQLUtils.toMySqlString(stmt);
    Assert.assertEquals("CREATE TABLE lc (\n" + "\ta INT NULL,\n" + "\tb INT NULL\n"+ ")\n"+ "PARTITION BY LIST COLUMNS (a, b) (\n"+ "\tPARTITION p0 VALUES IN ((0, 0), (NULL, NULL)), \n"+ "\tPARTITION p1 VALUES IN ((0, 1), (0, 2), (0, 3), (1, 1), (1, 2)), \n"+ "\tPARTITION p2 VALUES IN ((1, 0), (2, 0), (2, 1), (3, 0), (3, 1)), \n"+ "\tPARTITION p3 VALUES IN ((1, 3), (2, 2), (2, 3), (3, 2), (3, 3))\n"+ ");",output);
  }
}
