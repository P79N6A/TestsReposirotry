public class MySqlUpdateTest_6 extends MysqlTest {
  public void test_0() throws Exception {
    String sql="/* 6445c36514623747244871009d62f9/0//sub_order_id:1234567890/order_id:123456/ */" + "SELECT id, user_id, item_id, sku_id, flag" + " , sellable_quantity, fff03, status, feature, feature_lock"+ " , version, gmt_create, gmt_modified, root_id, parent_id, dist_type, dist_id"+ " , occupy_quantity, user_type "+ "FROM "+ "UPDATE COMMIT_ON_SUCCESS ROLLBACK_ON_FAIL TARGET_AFFECT_ROW ? "+ "`table_3966` "+ "SET `fff03` = `fff03` + ?"+ " , `flag` = `flag` & ~ (1 << 10) & ~ (1 << 11)"+ " , `version` = `version` + 3, `gmt_modified` = NOW() "+ "WHERE `root_id` = ? AND `status` = 1 AND `id` IN (?, ?) AND `fff03` + ? >= 0";
    MySqlStatementParser parser=new MySqlStatementParser(sql);
    List<SQLStatement> statementList=parser.parseStatementList();
    SQLStatement stmt=statementList.get(0);
    print(statementList);
    Assert.assertEquals(1,statementList.size());
    MySqlSchemaStatVisitor visitor=new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    Assert.assertEquals(1,visitor.getTables().size());
    Assert.assertEquals(19,visitor.getColumns().size());
    Assert.assertEquals(3,visitor.getConditions().size());
    Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("table_3966")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("table_3966","user_id")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("table_3966","id")));
    Assert.assertTrue(visitor.getColumns().contains(new Column("table_3966","item_id")));
{
      String output=SQLUtils.toMySqlString(stmt);
      Assert.assertEquals("SELECT id, user_id, item_id, sku_id, flag, sellable_quantity, fff03, status, feature, feature_lock, version, gmt_create, gmt_modified, root_id, parent_id, dist_type, dist_id, occupy_quantity, user_type\n" + "FROM UPDATE COMMIT_ON_SUCCESS ROLLBACK_ON_FAIL TARGET_AFFECT_ROW ? `table_3966`\n" + "SET `fff03` = `fff03` + ?, `flag` = `flag` & ~(1 << 10) & ~(1 << 11), `version` = `version` + 3, `gmt_modified` = NOW()\n"+ "WHERE `root_id` = ?\n"+ "\tAND `status` = 1\n"+ "\tAND `id` IN (?, ?)\n"+ "\tAND `fff03` + ? >= 0",output);
    }
{
      String output=SQLUtils.toMySqlString(stmt,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
      Assert.assertEquals("select id, user_id, item_id, sku_id, flag, sellable_quantity, fff03, status, feature, feature_lock, version, gmt_create, gmt_modified, root_id, parent_id, dist_type, dist_id, occupy_quantity, user_type\n" + "from update commit_on_success rollback_on_fail target_affect_row ? `table_3966`\n" + "set `fff03` = `fff03` + ?, `flag` = `flag` & ~(1 << 10) & ~(1 << 11), `version` = `version` + 3, `gmt_modified` = NOW()\n"+ "where `root_id` = ?\n"+ "\tand `status` = 1\n"+ "\tand `id` in (?, ?)\n"+ "\tand `fff03` + ? >= 0",output);
    }
  }
}
