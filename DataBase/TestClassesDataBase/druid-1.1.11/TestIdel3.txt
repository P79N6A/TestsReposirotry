public class TestIdel3 extends TestCase {
  public void test_idle2() throws Exception {
    MockDriver driver=new MockDriver();
    final DruidDataSource dataSource=new DruidDataSource();
    dataSource.setUrl("jdbc:mock:xxx");
    dataSource.setDriver(driver);
    dataSource.setInitialSize(1);
    dataSource.setMaxActive(14);
    dataSource.setMaxIdle(14);
    dataSource.setMinIdle(1);
    dataSource.setMinEvictableIdleTimeMillis(3 * 100);
    dataSource.setTimeBetweenEvictionRunsMillis(18 * 10);
    dataSource.setTestWhileIdle(true);
    dataSource.setTestOnBorrow(false);
    dataSource.setValidationQuery("SELECT 1");
    dataSource.setFilters("stat");
    ManagementFactory.getPlatformMBeanServer().registerMBean(dataSource,new ObjectName("com.alibaba:type=DataSource"));
{
      Assert.assertEquals(0,dataSource.getCreateCount());
      Assert.assertEquals(0,dataSource.getActiveCount());
      Connection conn=dataSource.getConnection();
      Assert.assertEquals(dataSource.getInitialSize(),dataSource.getCreateCount());
      Assert.assertEquals(dataSource.getInitialSize(),driver.getConnections().size());
      Assert.assertEquals(1,dataSource.getActiveCount());
      conn.close();
      Assert.assertEquals(0,dataSource.getDestroyCount());
      Assert.assertEquals(2,driver.getConnections().size());
      Assert.assertEquals(2,dataSource.getCreateCount());
      Assert.assertEquals(0,dataSource.getActiveCount());
    }
{
      int count=14;
      Connection[] connections=new Connection[count];
      for (int i=0; i < count; ++i) {
        connections[i]=dataSource.getConnection();
        Assert.assertEquals(i + 1,dataSource.getActiveCount());
      }
      Assert.assertEquals(dataSource.getMaxActive(),dataSource.getCreateCount());
      Assert.assertEquals(count,driver.getConnections().size());
      for (int i=0; i < count; ++i) {
        connections[i].close();
        Assert.assertEquals(count - i - 1,dataSource.getActiveCount());
      }
      Assert.assertEquals(dataSource.getMaxActive(),dataSource.getCreateCount());
      Assert.assertEquals(0,dataSource.getActiveCount());
      Assert.assertEquals(14,driver.getConnections().size());
    }
    concurrent(dataSource,100,1000);
    concurrent(dataSource,1,1000 * 1000);
    Thread.sleep(1000 * 10);
    concurrent(dataSource,1,1000 * 1000);
    Thread.sleep(1000 * 10);
    concurrent(dataSource,1000,1000 * 1000);
    Assert.assertEquals(driver.getConnections().size(),dataSource.getPoolingCount());
    Assert.assertEquals(0,dataSource.getActiveCount());
    for (int i=0; i < 1000; ++i) {
      Assert.assertEquals(0,dataSource.getActiveCount());
      Connection conn=dataSource.getConnection();
      Assert.assertEquals(1,dataSource.getActiveCount());
      Thread.sleep(10);
      conn.close();
    }
    Thread.sleep(1000 * 100);
    dataSource.close();
  }
  private void concurrent(  final DruidDataSource dataSource,  int threadCount,  final int loopCount) throws InterruptedException {
    final CountDownLatch startLatch=new CountDownLatch(1);
    final CountDownLatch endLatch=new CountDownLatch(threadCount);
    Thread[] threads=new Thread[threadCount];
    for (int i=0; i < threadCount; ++i) {
      threads[i]=new Thread("thread-" + i){
        public void run(){
          try {
            startLatch.await();
            for (int i=0; i < loopCount; ++i) {
              Connection conn=null;
              conn=dataSource.getConnection();
              conn.close();
            }
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
 finally {
            endLatch.countDown();
          }
        }
      }
;
    }
    for (int i=0; i < threadCount; ++i) {
      threads[i].start();
    }
    startLatch.countDown();
    System.out.println("concurrent start...");
    endLatch.await();
    System.out.println("concurrent end");
  }
}
