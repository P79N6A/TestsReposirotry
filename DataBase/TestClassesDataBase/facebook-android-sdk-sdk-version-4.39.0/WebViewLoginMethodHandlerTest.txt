@PrepareForTest({LoginClient.class}) public class WebViewLoginMethodHandlerTest extends LoginHandlerTestCase {
  private final static String SIGNED_REQUEST_STR="ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ" + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
  @Test public void testWebViewHandlesSuccess(){
    Bundle bundle=new Bundle();
    bundle.putString("access_token",ACCESS_TOKEN);
    bundle.putString("expires_in",String.format("%d",EXPIRES_IN_DELTA));
    bundle.putString("code","Something else");
    bundle.putString("signed_request",SIGNED_REQUEST_STR);
    WebViewLoginMethodHandler handler=new WebViewLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    handler.onWebDialogComplete(request,bundle,null);
    ArgumentCaptor<LoginClient.Result> resultArgumentCaptor=ArgumentCaptor.forClass(LoginClient.Result.class);
    verify(mockLoginClient,times(1)).completeAndValidate(resultArgumentCaptor.capture());
    LoginClient.Result result=resultArgumentCaptor.getValue();
    assertNotNull(result);
    assertEquals(LoginClient.Result.Code.SUCCESS,result.code);
    AccessToken token=result.token;
    assertNotNull(token);
    assertEquals(ACCESS_TOKEN,token.getToken());
    assertDateDiffersWithinDelta(new Date(),token.getExpires(),EXPIRES_IN_DELTA * 1000,1000);
    TestUtils.assertSamePermissions(PERMISSIONS,token.getPermissions());
  }
  @Test public void testWebViewHandlesCancel(){
    WebViewLoginMethodHandler handler=new WebViewLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    handler.onWebDialogComplete(request,null,new FacebookOperationCanceledException());
    ArgumentCaptor<LoginClient.Result> resultArgumentCaptor=ArgumentCaptor.forClass(LoginClient.Result.class);
    verify(mockLoginClient,times(1)).completeAndValidate(resultArgumentCaptor.capture());
    LoginClient.Result result=resultArgumentCaptor.getValue();
    assertNotNull(result);
    assertEquals(LoginClient.Result.Code.CANCEL,result.code);
    assertNull(result.token);
    assertNotNull(result.errorMessage);
  }
  @Test public void testWebViewHandlesError(){
    WebViewLoginMethodHandler handler=new WebViewLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    handler.onWebDialogComplete(request,null,new FacebookException(ERROR_MESSAGE));
    ArgumentCaptor<LoginClient.Result> resultArgumentCaptor=ArgumentCaptor.forClass(LoginClient.Result.class);
    verify(mockLoginClient,times(1)).completeAndValidate(resultArgumentCaptor.capture());
    LoginClient.Result result=resultArgumentCaptor.getValue();
    assertNotNull(result);
    assertEquals(LoginClient.Result.Code.ERROR,result.code);
    assertNull(result.token);
    assertNotNull(result.errorMessage);
    assertEquals(ERROR_MESSAGE,result.errorMessage);
  }
  @Test public void testFromDialog(){
    List<String> permissions=Utility.arrayList("stream_publish","go_outside_and_play");
    String token="AnImaginaryTokenValue";
    String userId="1000";
    Bundle bundle=new Bundle();
    bundle.putString("access_token",token);
    bundle.putString("expires_in","60");
    bundle.putString("signed_request",SIGNED_REQUEST_STR);
    AccessToken accessToken=LoginMethodHandler.createAccessTokenFromWebBundle(permissions,bundle,AccessTokenSource.WEB_VIEW,"1234");
    TestUtils.assertSamePermissions(permissions,accessToken);
    assertEquals(token,accessToken.getToken());
    assertEquals(AccessTokenSource.WEB_VIEW,accessToken.getSource());
    assertTrue(!accessToken.isExpired());
  }
  @Test public void testFromSSOWithExpiresString(){
    List<String> permissions=Utility.arrayList("stream_publish","go_outside_and_play");
    String token="AnImaginaryTokenValue";
    Intent intent=new Intent();
    intent.putExtra("access_token",token);
    intent.putExtra("expires_in","60");
    intent.putExtra("extra_extra","Something unrelated");
    intent.putExtra("signed_request",SIGNED_REQUEST_STR);
    AccessToken accessToken=LoginMethodHandler.createAccessTokenFromWebBundle(permissions,intent.getExtras(),AccessTokenSource.FACEBOOK_APPLICATION_WEB,"1234");
    TestUtils.assertSamePermissions(permissions,accessToken);
    assertEquals(token,accessToken.getToken());
    assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB,accessToken.getSource());
    assertTrue(!accessToken.isExpired());
  }
  @Test public void testFromSSOWithExpiresLong(){
    List<String> permissions=Utility.arrayList("stream_publish","go_outside_and_play");
    String token="AnImaginaryTokenValue";
    Intent intent=new Intent();
    intent.putExtra("access_token",token);
    intent.putExtra("expires_in",60L);
    intent.putExtra("extra_extra","Something unrelated");
    intent.putExtra("signed_request",SIGNED_REQUEST_STR);
    AccessToken accessToken=LoginMethodHandler.createAccessTokenFromWebBundle(permissions,intent.getExtras(),AccessTokenSource.FACEBOOK_APPLICATION_WEB,"1234");
    TestUtils.assertSamePermissions(permissions,accessToken);
    assertEquals(token,accessToken.getToken());
    assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB,accessToken.getSource());
    assertTrue(!accessToken.isExpired());
  }
}
