public class LoginResultTest extends FacebookTestCase {
  private final Set<String> EMAIL_SET=new HashSet<String>(){
{
      add("email");
    }
  }
;
  private final Set<String> LIKES_EMAIL_SET=new HashSet<String>(){
{
      add("user_likes");
      add("email");
    }
  }
;
  private final Set<String> PROFILE_EMAIL_SET=new HashSet<String>(){
{
      add("user_profile");
      add("email");
    }
  }
;
  @Before public void before() throws Exception {
    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
  }
  @Test public void testInitialLogin(){
    LoginClient.Request request=createRequest(EMAIL_SET,false);
    AccessToken accessToken=createAccessToken(PROFILE_EMAIL_SET,new HashSet<String>());
    LoginResult result=LoginManager.computeLoginResult(request,accessToken);
    assertEquals(accessToken,result.getAccessToken());
    assertEquals(PROFILE_EMAIL_SET,result.getRecentlyGrantedPermissions());
    assertEquals(0,result.getRecentlyDeniedPermissions().size());
  }
  @Test public void testReAuth(){
    LoginClient.Request request=createRequest(EMAIL_SET,true);
    AccessToken accessToken=createAccessToken(PROFILE_EMAIL_SET,new HashSet<String>());
    LoginResult result=LoginManager.computeLoginResult(request,accessToken);
    assertEquals(accessToken,result.getAccessToken());
    assertEquals(EMAIL_SET,result.getRecentlyGrantedPermissions());
    assertEquals(0,result.getRecentlyDeniedPermissions().size());
  }
  @Test public void testDeniedPermissions(){
    LoginClient.Request request=createRequest(LIKES_EMAIL_SET,true);
    AccessToken accessToken=createAccessToken(EMAIL_SET,new HashSet<String>());
    LoginResult result=LoginManager.computeLoginResult(request,accessToken);
    assertEquals(accessToken,result.getAccessToken());
    assertEquals(EMAIL_SET,result.getRecentlyGrantedPermissions());
    assertEquals(new HashSet<String>(){
{
        add("user_likes");
      }
    }
,result.getRecentlyDeniedPermissions());
  }
  private AccessToken createAccessToken(  Set<String> permissions,  Set<String> declinedPermissions){
    return new AccessToken("token","123","234",permissions,declinedPermissions,null,null,null,null);
  }
  private LoginClient.Request createRequest(  Set<String> permissions,  boolean isRerequest){
    LoginClient.Request request=new LoginClient.Request(LoginBehavior.NATIVE_WITH_FALLBACK,permissions,DefaultAudience.EVERYONE,"rerequest","123","authid");
    request.setRerequest(isRerequest);
    return request;
  }
}
