public class NativeProtocolVersionTest extends FacebookTestCase {
  @Test public void testSdkOlderThanApp_versionSpecOpen(){
    int[] versionSpec=new int[]{3};
    int latestSdkVersion=7;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7,8};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,7);
  }
  @Test public void testSdkNewerThanApp_versionSpecOpen(){
    int[] versionSpec=new int[]{3};
    int latestSdkVersion=8;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,7);
  }
  @Test public void testSdkOlderThanApp_versionSpecDisabled(){
    int[] versionSpec=new int[]{1,3,7,8};
    int latestSdkVersion=7;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7,8};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,NativeProtocol.NO_PROTOCOL_AVAILABLE);
  }
  @Test public void testSdkNewerThanApp_versionSpecDisabled(){
    int[] versionSpec=new int[]{1,3,6,7};
    int latestSdkVersion=8;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,NativeProtocol.NO_PROTOCOL_AVAILABLE);
  }
  @Test public void testSdkOlderThanApp_versionSpecNewerAndEnabled(){
    int[] versionSpec=new int[]{1,3,7,9,10,11,12,13};
    int latestSdkVersion=7;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7,8};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,7);
  }
  @Test public void testSdkNewerThanApp_versionSpecNewerAndEnabled(){
    int[] versionSpec=new int[]{1,3,7,9,10,11,12,13};
    int latestSdkVersion=8;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,7);
  }
  @Test public void testSdkOlderThanApp_versionSpecNewerAndDisabled(){
    int[] versionSpec=new int[]{1,3,7,8,10,11,12,13};
    int latestSdkVersion=7;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7,8};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,NativeProtocol.NO_PROTOCOL_AVAILABLE);
  }
  @Test public void testSdkNewerThanApp_versionSpecNewerAndDisabled(){
    int[] versionSpec=new int[]{1,3,6,7,10,11,12,13};
    int latestSdkVersion=8;
    int[] availableFbAppVersions=new int[]{1,2,3,4,5,6,7};
    int resultVersion=NativeProtocol.computeLatestAvailableVersionFromVersionSpec(getTreeSetFromIntArray(availableFbAppVersions),latestSdkVersion,versionSpec);
    assertEquals(resultVersion,NativeProtocol.NO_PROTOCOL_AVAILABLE);
  }
  private TreeSet<Integer> getTreeSetFromIntArray(  int[] array){
    TreeSet<Integer> treeSet=new TreeSet<Integer>();
    for (    int a : array) {
      treeSet.add(a);
    }
    return treeSet;
  }
}
