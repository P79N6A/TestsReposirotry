@PrepareForTest({FacebookSdk.class,Utility.class,FetchedAppSettingsManager.class}) public final class FacebookSdkPowerMockTest extends FacebookPowerMockTestCase {
  @Before public void before(){
    Whitebox.setInternalState(FacebookSdk.class,"callbackRequestCodeOffset",0xface);
    Whitebox.setInternalState(FacebookSdk.class,"sdkInitialized",false);
    stub(method(FetchedAppSettingsManager.class,"loadAppSettingsAsync")).toReturn(null);
    FacebookSdk.setAutoLogAppEventsEnabled(false);
  }
  @Test public void testGetExecutor(){
    final ConditionVariable condition=new ConditionVariable();
    FacebookSdk.getExecutor().execute(new Runnable(){
      @Override public void run(){
        condition.open();
      }
    }
);
    boolean success=condition.block(5000);
    assertTrue(success);
  }
  @Test public void testSetExecutor(){
    final ConditionVariable condition=new ConditionVariable();
    final Runnable runnable=new Runnable(){
      @Override public void run(){
      }
    }
;
    final Executor executor=new Executor(){
      @Override public void execute(      Runnable command){
        assertEquals(runnable,command);
        command.run();
        condition.open();
      }
    }
;
    Executor original=FacebookSdk.getExecutor();
    try {
      FacebookSdk.setExecutor(executor);
      FacebookSdk.getExecutor().execute(runnable);
      boolean success=condition.block(5000);
      assertTrue(success);
    }
  finally {
      FacebookSdk.setExecutor(original);
    }
  }
  @Test public void testFacebookDomain(){
    FacebookSdk.setFacebookDomain("beta.facebook.com");
    String graphUrlBase=ServerProtocol.getGraphUrlBase();
    assertEquals("https://graph.beta.facebook.com",graphUrlBase);
    FacebookSdk.setFacebookDomain("facebook.com");
  }
  @Test public void testLoadDefaults() throws Exception {
    FacebookSdk.setApplicationId(null);
    stub(method(FacebookSdk.class,"isInitialized")).toReturn(true);
    FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
    assertEquals("1234",FacebookSdk.getApplicationId());
    assertEquals("abcd",FacebookSdk.getClientToken());
  }
  private Context mockContextWithAppIdAndClientToken() throws Exception {
    Bundle bundle=mock(Bundle.class);
    when(bundle.get(FacebookSdk.APPLICATION_ID_PROPERTY)).thenReturn("1234");
    when(bundle.getString(FacebookSdk.CLIENT_TOKEN_PROPERTY)).thenReturn("abcd");
    ApplicationInfo applicationInfo=mock(ApplicationInfo.class);
    applicationInfo.metaData=bundle;
    PackageManager packageManager=mock(PackageManager.class);
    when(packageManager.getApplicationInfo("packageName",PackageManager.GET_META_DATA)).thenReturn(applicationInfo);
    Context context=mock(Context.class);
    when(context.getPackageName()).thenReturn("packageName");
    when(context.getPackageManager()).thenReturn(packageManager);
    return context;
  }
  @Test public void testLoadDefaultsDoesNotOverwrite() throws Exception {
    stub(method(FacebookSdk.class,"isInitialized")).toReturn(true);
    FacebookSdk.setApplicationId("hello");
    FacebookSdk.setClientToken("world");
    FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
    assertEquals("hello",FacebookSdk.getApplicationId());
    assertEquals("world",FacebookSdk.getClientToken());
    assertEquals(false,FacebookSdk.getAutoLogAppEventsEnabled());
  }
  @Test public void testRequestCodeOffsetAfterInit() throws Exception {
    FacebookSdk.setApplicationId("123456789");
    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
    try {
      FacebookSdk.sdkInitialize(RuntimeEnvironment.application,1000);
      fail();
    }
 catch (    FacebookException exception) {
      assertEquals(FacebookSdk.CALLBACK_OFFSET_CHANGED_AFTER_INIT,exception.getMessage());
    }
  }
  @Test public void testRequestCodeOffsetNegative() throws Exception {
    FacebookSdk.setApplicationId("123456789");
    try {
      FacebookSdk.sdkInitialize(RuntimeEnvironment.application,0xFACEB00C);
      fail();
    }
 catch (    FacebookException exception) {
      assertEquals(FacebookSdk.CALLBACK_OFFSET_NEGATIVE,exception.getMessage());
    }
  }
  @Test public void testRequestCodeOffset() throws Exception {
    FacebookSdk.setApplicationId("123456789");
    FacebookSdk.sdkInitialize(RuntimeEnvironment.application,1000);
    assertEquals(1000,FacebookSdk.getCallbackRequestCodeOffset());
  }
  @Test public void testRequestCodeRange(){
    FacebookSdk.setApplicationId("123456789");
    FacebookSdk.sdkInitialize(RuntimeEnvironment.application,1000);
    assertTrue(FacebookSdk.isFacebookRequestCode(1000));
    assertTrue(FacebookSdk.isFacebookRequestCode(1099));
    assertFalse(FacebookSdk.isFacebookRequestCode(999));
    assertFalse(FacebookSdk.isFacebookRequestCode(1100));
    assertFalse(FacebookSdk.isFacebookRequestCode(0));
  }
}
