/** 
 * Tests for  {@link com.facebook.internal.FacebookSignatureValidator}.
 */
@PrepareForTest({Utility.class}) public class FacebookSignatureValidatorTest extends FacebookPowerMockTestCase {
  private static final String PACKAGE_NAME="com.facebook.orca";
  private static final String APP_HASH="8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
  private Activity mMockActivity;
  private PackageManager mMockPackageManager;
  @Before public void setup(){
    mockStatic(Utility.class);
    mMockActivity=mock(Activity.class);
    mMockPackageManager=mock(PackageManager.class);
    when(mMockActivity.getPackageManager()).thenReturn(mMockPackageManager);
  }
  @Ignore @Test public void testInvalidWhenAppNotInstalled() throws Exception {
    setupPackageManagerForApp(false,false);
    assertFalse(FacebookSignatureValidator.validateSignature(mMockActivity,PACKAGE_NAME));
  }
  @Ignore @Test public void testInvalidWhenInstalledWithIncorrectSignature() throws Exception {
    setupPackageManagerForApp(true,false);
    assertFalse(FacebookSignatureValidator.validateSignature(mMockActivity,PACKAGE_NAME));
  }
  @Ignore @Test public void testValidWhenInstalledWithCorrectSignature() throws Exception {
    setupPackageManagerForApp(true,true);
    assertTrue(FacebookSignatureValidator.validateSignature(mMockActivity,PACKAGE_NAME));
  }
  /** 
 * Sets up the PackageManager to return what we expect depending on whether app is installed.
 * @param isInstalled true to simulate that app is installed
 */
  private void setupPackageManagerForApp(  boolean isInstalled,  boolean hasValidSignature) throws Exception {
    if (isInstalled) {
      PackageInfo packageInfo=new PackageInfo();
      when(mMockPackageManager.getPackageInfo(PACKAGE_NAME,PackageManager.GET_SIGNATURES)).thenReturn(packageInfo);
      Signature signature=mock(Signature.class);
      packageInfo.signatures=new Signature[]{signature};
      if (hasValidSignature) {
        when(Utility.sha1hash(signature.toByteArray())).thenReturn(APP_HASH);
      }
    }
 else {
      when(mMockPackageManager.getPackageInfo(PACKAGE_NAME,PackageManager.GET_SIGNATURES)).thenThrow(new PackageManager.NameNotFoundException());
    }
  }
}
