@PrepareForTest({LoginClient.class}) public class KatanaProxyLoginMethodHandlerTest extends LoginHandlerTestCase {
  private final static String SIGNED_REQUEST_STR="ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ" + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
  @Before @Override public void before() throws Exception {
    super.before();
    FacebookSdk.setApplicationId("123456789");
    FacebookSdk.setAutoLogAppEventsEnabled(false);
    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
  }
  @Test public void testProxyAuthHandlesSuccess(){
    Bundle bundle=new Bundle();
    bundle.putLong("expires_in",EXPIRES_IN_DELTA);
    bundle.putString("access_token",ACCESS_TOKEN);
    bundle.putString("signed_request",SIGNED_REQUEST_STR);
    Intent intent=new Intent();
    intent.putExtras(bundle);
    KatanaProxyLoginMethodHandler handler=new KatanaProxyLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    when(mockLoginClient.getPendingRequest()).thenReturn(request);
    handler.tryAuthorize(request);
    handler.onActivityResult(0,Activity.RESULT_OK,intent);
    ArgumentCaptor<LoginClient.Result> resultArgumentCaptor=ArgumentCaptor.forClass(LoginClient.Result.class);
    verify(mockLoginClient,times(1)).completeAndValidate(resultArgumentCaptor.capture());
    LoginClient.Result result=resultArgumentCaptor.getValue();
    assertNotNull(result);
    assertEquals(LoginClient.Result.Code.SUCCESS,result.code);
    AccessToken token=result.token;
    assertNotNull(token);
    assertEquals(ACCESS_TOKEN,token.getToken());
    assertDateDiffersWithinDelta(new Date(),token.getExpires(),EXPIRES_IN_DELTA * 1000,1000);
    TestUtils.assertSamePermissions(PERMISSIONS,token.getPermissions());
  }
  @Test public void testProxyAuthHandlesCancel(){
    Bundle bundle=new Bundle();
    bundle.putString("error",ERROR_MESSAGE);
    Intent intent=new Intent();
    intent.putExtras(bundle);
    KatanaProxyLoginMethodHandler handler=new KatanaProxyLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    handler.tryAuthorize(request);
    handler.onActivityResult(0,Activity.RESULT_CANCELED,intent);
    ArgumentCaptor<LoginClient.Result> resultArgumentCaptor=ArgumentCaptor.forClass(LoginClient.Result.class);
    verify(mockLoginClient,times(1)).completeAndValidate(resultArgumentCaptor.capture());
    LoginClient.Result result=resultArgumentCaptor.getValue();
    assertNotNull(result);
    assertEquals(LoginClient.Result.Code.CANCEL,result.code);
    assertNull(result.token);
    assertNotNull(result.errorMessage);
    assertTrue(result.errorMessage.contains(ERROR_MESSAGE));
  }
  @Test public void testProxyAuthHandlesCancelErrorMessage(){
    Bundle bundle=new Bundle();
    bundle.putString("error","access_denied");
    Intent intent=new Intent();
    intent.putExtras(bundle);
    KatanaProxyLoginMethodHandler handler=new KatanaProxyLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    handler.tryAuthorize(request);
    handler.onActivityResult(0,Activity.RESULT_CANCELED,intent);
    ArgumentCaptor<LoginClient.Result> resultArgumentCaptor=ArgumentCaptor.forClass(LoginClient.Result.class);
    verify(mockLoginClient,times(1)).completeAndValidate(resultArgumentCaptor.capture());
    LoginClient.Result result=resultArgumentCaptor.getValue();
    assertNotNull(result);
    assertEquals(LoginClient.Result.Code.CANCEL,result.code);
    assertNull(result.token);
  }
  @Test public void testProxyAuthHandlesDisabled(){
    Bundle bundle=new Bundle();
    bundle.putString("error","service_disabled");
    Intent intent=new Intent();
    intent.putExtras(bundle);
    KatanaProxyLoginMethodHandler handler=new KatanaProxyLoginMethodHandler(mockLoginClient);
    LoginClient.Request request=createRequest();
    handler.tryAuthorize(request);
    handler.onActivityResult(0,Activity.RESULT_OK,intent);
    verify(mockLoginClient,never()).completeAndValidate(any(LoginClient.Result.class));
    verify(mockLoginClient,times(1)).tryNextHandler();
  }
}
