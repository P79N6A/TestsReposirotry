public class UtilityIntersectRangeTest extends FacebookTestCase {
  @Test public void testIntersectRangesBothEmpty(){
    int[] range1=new int[0];
    int[] range2=new int[0];
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{}));
  }
  @Test public void testIntersectRangesOneEmpty(){
    int[] range1=new int[0];
    int[] range2=new int[]{1,10};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{}));
  }
  @Test public void testIntersectRangesBothSameAndClosed(){
    int[] range1=new int[]{20,30};
    int[] range2=new int[]{20,30};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{20,30}));
  }
  @Test public void testIntersectRangesNoIntersect(){
    int[] range1=new int[]{20,30};
    int[] range2=new int[]{30,50};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{}));
  }
  @Test public void testIntersectRangesSubsets(){
    int[] range1=new int[]{20,100};
    int[] range2=new int[]{30,40,50,60,99,100};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{30,40,50,60,99,100}));
  }
  @Test public void testIntersectRangesOverlap(){
    int[] range1=new int[]{20,40,60,80};
    int[] range2=new int[]{10,30,50,70};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{20,30,60,70}));
  }
  @Test public void testIntersectRangesDifferentLengthsClosed(){
    int[] range1=new int[]{20,40,60,80};
    int[] range2=new int[]{10,30,50,70,90,110};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{20,30,60,70}));
  }
  @Test public void testIntersectRangesDifferentLengthsOneOpen(){
    int[] range1=new int[]{10,30,50,70,90,110};
    int[] range2=new int[]{20,40,60};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{20,30,60,70,90,110}));
  }
  @Test public void testIntersectRangesDifferentLengthsBothOpen(){
    int[] range1=new int[]{10,30,50};
    int[] range2=new int[]{20,40,60};
    int[] intersectRange=Utility.intersectRanges(range1,range2);
    assertTrue(Arrays.equals(intersectRange,new int[]{20,30,60}));
  }
}
