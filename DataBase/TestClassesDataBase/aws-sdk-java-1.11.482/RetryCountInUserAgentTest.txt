public class RetryCountInUserAgentTest extends WireMockTestBase {
  private static final int[] BACKOFF_VALUES=new int[]{0,10,20};
  private static final String RESOURCE_PATH="/user-agent/";
  @Test public void retriedRequest_AppendsCorrectRetryCountInUserAgent() throws Exception {
    BasicConfigurator.configure();
    stubFor(get(urlEqualTo(RESOURCE_PATH)).willReturn(aResponse().withStatus(500)));
    executeRequest();
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("0/0/")));
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("1/0/")));
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("2/10/")));
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("3/20/")));
  }
  @Test public void retriedRequest_AppendsCorrectRetryCountInUserAgent_throttlingEnabled() throws Exception {
    BasicConfigurator.configure();
    stubFor(get(urlEqualTo(RESOURCE_PATH)).willReturn(aResponse().withStatus(500)));
    executeRequest();
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("0/0/500")));
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("1/0/495")));
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("2/10/490")));
    verify(1,getRequestedFor(urlEqualTo(RESOURCE_PATH)).withHeader(HEADER_SDK_RETRY_INFO,containing("3/20/485")));
  }
  private void executeRequest() throws Exception {
    AmazonHttpClient httpClient=new AmazonHttpClient(new ClientConfiguration().withRetryPolicy(buildRetryPolicy()).withThrottledRetries(true));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest(RESOURCE_PATH)).errorResponseHandler(stubErrorHandler()).execute();
      fail("Expected exception");
    }
 catch (    AmazonServiceException expected) {
    }
  }
  public RetryPolicy buildRetryPolicy(){
    RetryPolicy policy=new RetryPolicy(new AlwaysRetryCondition(),new SimpleArrayBackoffStrategy(BACKOFF_VALUES),3,false);
    return policy;
  }
}
