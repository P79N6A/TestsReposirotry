@RunWith(MockitoJUnitRunner.class) public class RetryPolicyAdapterTest {
  @Mock private RetryPolicy.RetryCondition retryCondition;
  @Mock private RetryPolicy.BackoffStrategy backoffStrategy;
  private RetryPolicy legacyPolicy;
  private ClientConfiguration clientConfiguration=new ClientConfiguration().withMaxErrorRetry(10);
  private RetryPolicyAdapter adapter;
  @Before public void setup(){
    legacyPolicy=new RetryPolicy(retryCondition,backoffStrategy,3,false);
    adapter=new RetryPolicyAdapter(legacyPolicy,clientConfiguration);
  }
  @Test public void getLegacyRetryPolicy_ReturnsSamePolicy(){
    assertEquals(legacyPolicy,adapter.getLegacyRetryPolicy());
  }
  @Test(expected=IllegalArgumentException.class) public void nullRetryPolicy_ThrowsException(){
    new RetryPolicyAdapter(null,clientConfiguration);
  }
  @Test(expected=IllegalArgumentException.class) public void nullClientConfiguration_ThrowsException(){
    new RetryPolicyAdapter(legacyPolicy,null);
  }
  @Test public void computeDelayBeforeNextRetry_DelegatesToLegacyPolicy(){
    final RetryPolicyContext context=RetryPolicyContexts.LEGACY;
    adapter.computeDelayBeforeNextRetry(context);
    verify(backoffStrategy).delayBeforeNextRetry(eq((AmazonWebServiceRequest)context.originalRequest()),eq((AmazonClientException)context.exception()),eq(context.retriesAttempted()));
  }
  @Test public void shouldRetry_MaxErrorRetryReached(){
    assertFalse(adapter.shouldRetry(RetryPolicyContexts.withRetriesAttempted(3)));
  }
  @Test public void shouldRetry_MaxErrorInClientConfigHonored_DoesNotUseMaxErrorInPolicy(){
    when(retryCondition.shouldRetry(any(AmazonWebServiceRequest.class),any(AmazonClientException.class),anyInt())).thenReturn(true);
    legacyPolicy=new RetryPolicy(retryCondition,backoffStrategy,3,true);
    adapter=new RetryPolicyAdapter(legacyPolicy,clientConfiguration);
    assertTrue(adapter.shouldRetry(RetryPolicyContexts.withRetriesAttempted(3)));
    assertFalse(adapter.shouldRetry(RetryPolicyContexts.withRetriesAttempted(10)));
  }
  @Test public void shouldRetry_MaxErrorNotExceeded_DelegatesToLegacyRetryCondition(){
    final RetryPolicyContext context=RetryPolicyContexts.LEGACY;
    adapter.shouldRetry(context);
    verify(retryCondition).shouldRetry(eq((AmazonWebServiceRequest)context.originalRequest()),eq((AmazonClientException)context.exception()),eq(context.retriesAttempted()));
  }
}
