/** 
 * Sample code to perform batch write item to DynamoDB.
 */
public class I_BatchWriteItemTest extends AbstractQuickStart {
  @Before public void before() throws InterruptedException {
    F_UpdateItemTest.setupData(dynamo);
    new B_PutItemTest().howToPutItems();
    ItemCollection<?> itemCol=dynamo.getTable(TABLE_NAME).query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,5));
    int count=0;
    for (    Item item : itemCol) {
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count == 5);
  }
  @Test public void howToBatchWrite_ToOneTable(){
    TableWriteItems tableWriteItems=new TableWriteItems(TABLE_NAME).withHashAndRangeKeysToDelete(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",1,"foo",2,"foo",3).withItemsToPut(new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,111).withString("someStringAttr","someStrVal1").withInt("someIntAttr",111),new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,222).withString("someStringAttr","someStrVal2").withInt("someIntAttr",222),new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,333).withString("someStringAttr","someStrVal3").withInt("someIntAttr",333)).addHashAndRangePrimaryKeyToDelete(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,4).addHashAndRangePrimaryKeyToDelete(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,5).addItemToPut(new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,444).withString("someStringAttr","someStrVal4").withInt("someIntAttr",444)).addItemToPut(new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,555).withString("someStringAttr","someStrVal5").withInt("someIntAttr",555));
    BatchWriteItemOutcome outcome=dynamo.batchWriteItem(tableWriteItems);
    System.out.println(outcome);
    verify_BatchWrite_ToOneTable();
  }
  private void verify_BatchWrite_ToOneTable(){
{
      ItemCollection<?> itemCol=dynamo.getTable(TABLE_NAME).query(HASH_KEY_NAME,"TestingPutItemInBatch",new RangeKeyCondition(RANGE_KEY_NAME).between(111,555));
      int count=0;
      for (      Item item : itemCol) {
        System.out.println(item);
        count++;
      }
      Assert.assertTrue(count == 5);
    }
{
      ItemCollection<?> itemCol=dynamo.getTable(TABLE_NAME).query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,5));
      int count=0;
      for (      Item item : itemCol) {
        System.out.println(item);
        count++;
      }
      Assert.assertTrue(count == 0);
    }
  }
  @Test public void howToBatchWrite_ToMultiTables(){
    BatchWriteItemOutcome outcome=dynamo.batchWriteItem(new TableWriteItems(TABLE_NAME).withHashAndRangeKeysToDelete(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",1,"foo",2).withItemsToPut(new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,666).withString("someStringAttr","someStrVal6").withInt("someIntAttr",666),new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,777).withString("someStringAttr","someStrVal7").withInt("someIntAttr",777)),new TableWriteItems(F_UpdateItemTest.TABLE_NAME).withHashAndRangeKeysToDelete(F_UpdateItemTest.HASH_KEY,F_UpdateItemTest.RANGE_KEY,F_UpdateItemTest.FIRST_CUSTOMER_ID,F_UpdateItemTest.ADDRESS_TYPE_HOME,F_UpdateItemTest.FIRST_CUSTOMER_ID,F_UpdateItemTest.ADDRESS_TYPE_WORK).withItemsToPut(new Item().withPrimaryKey(F_UpdateItemTest.HASH_KEY,111,F_UpdateItemTest.RANGE_KEY,F_UpdateItemTest.ADDRESS_TYPE_HOME).withString("AddressLine1","crazy ave").withString("city","crazy city").withString("state","XX").withInt("zipcode",99199),new Item().withPrimaryKey(F_UpdateItemTest.HASH_KEY,111,F_UpdateItemTest.RANGE_KEY,F_UpdateItemTest.ADDRESS_TYPE_WORK).withString("AddressLine1","silly ave").withString("city","silly city").withString("state","YY").withInt("zipcode",11911)));
    System.out.println(outcome);
    verify_BatchWrite_ToMultiTables();
  }
  private void verify_BatchWrite_ToMultiTables(){
{
      ItemCollection<?> itemCol=dynamo.getTable(TABLE_NAME).query(HASH_KEY_NAME,"TestingPutItemInBatch",new RangeKeyCondition(RANGE_KEY_NAME).between(666,777));
      int count=0;
      for (      Item item : itemCol) {
        System.out.println(item);
        count++;
      }
      Assert.assertTrue(count == 2);
    }
{
      ItemCollection<?> itemCol=dynamo.getTable(TABLE_NAME).query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,2));
      int count=0;
      for (      Item item : itemCol) {
        System.out.println(item);
        count++;
      }
      Assert.assertTrue(count == 0);
    }
{
      ItemCollection<?> itemCol=dynamo.getTable(F_UpdateItemTest.TABLE_NAME).query(F_UpdateItemTest.HASH_KEY,111);
      int count=0;
      for (      Item item : itemCol) {
        System.out.println(item);
        count++;
      }
      Assert.assertTrue(count == 2);
    }
{
      ItemCollection<?> itemCol=dynamo.getTable(F_UpdateItemTest.TABLE_NAME).query(F_UpdateItemTest.HASH_KEY,F_UpdateItemTest.FIRST_CUSTOMER_ID);
      int count=0;
      for (      Item item : itemCol) {
        System.out.println(item);
        count++;
      }
      Assert.assertTrue(count == 0);
    }
  }
  @Test public void howToHandle_UnprocessedItems() throws InterruptedException {
    TableWriteItems tableWriteItems=new TableWriteItems(TABLE_NAME).withHashAndRangeKeysToDelete(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",1,"foo",2,"foo",3).withItemsToPut(new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,111).withString("someStringAttr","someStrVal1").withInt("someIntAttr",111),new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,222).withString("someStringAttr","someStrVal2").withInt("someIntAttr",222),new Item().withPrimaryKey(HASH_KEY_NAME,"TestingPutItemInBatch",RANGE_KEY_NAME,333).withString("someStringAttr","someStrVal3").withInt("someIntAttr",333));
    Map<String,List<WriteRequest>> unprocessed=null;
    int attempts=0;
    do {
      if (attempts > 0) {
        Thread.sleep((1 << attempts) * 1000);
      }
      attempts++;
      BatchWriteItemOutcome outcome;
      if (unprocessed == null || unprocessed.size() > 0) {
        outcome=dynamo.batchWriteItem(tableWriteItems);
      }
 else {
        outcome=dynamo.batchWriteItemUnprocessed(unprocessed);
      }
      System.out.println("outcome: " + outcome);
      unprocessed=outcome.getUnprocessedItems();
      System.out.println("unprocessed: " + unprocessed);
    }
 while (unprocessed.size() > 0);
  }
}
