/** 
 * Tests for  {@link AsynchronousAgentDispatcher}.
 */
@RunWith(MockitoJUnitRunner.class) public class AsynchronousAgentDispatcherTest {
  @Mock private DatagramChannel channel;
  private AsynchronousAgentDispatcher dispatcher=AsynchronousAgentDispatcher.getInstance();
  @Before public void methodSetup(){
    dispatcher.init();
  }
  @After public void methodTeardown(){
    dispatcher.release();
  }
  @Test public void testIgnoresIOExceptionFromChannelWrite() throws IOException, InterruptedException {
    when(channel.write(any(ByteBuffer.class))).thenThrow(new IOException("buffer is full"));
    dispatcher.addWriteTask(new ApiCallAttemptMonitoringEvent().withApi("foo"),channel,8192);
    dispatcher.addWriteTask(new ApiCallAttemptMonitoringEvent().withApi("foo"),channel,8192);
    Thread.sleep(100);
    verify(channel,times(2)).write((any(ByteBuffer.class)));
  }
  @Test public void testIgnoresMarshallingException() throws IOException, InterruptedException {
    ObjectWriter marshaller=mock(ObjectWriter.class);
    ApiCallAttemptMonitoringEvent event1=new ApiCallAttemptMonitoringEvent();
    ApiCallAttemptMonitoringEvent event2=new ApiCallAttemptMonitoringEvent();
    when(marshaller.writeValueAsBytes(eq(event1))).thenThrow(new RuntimeException("bad event"));
    when(marshaller.writeValueAsBytes(eq(event2))).thenReturn(new byte[16]);
    AsynchronousAgentDispatcher dispatcher=new AsynchronousAgentDispatcher(marshaller);
    dispatcher.init();
    try {
      dispatcher.addWriteTask(event1,channel,8192);
      dispatcher.addWriteTask(event2,channel,8192);
      Thread.sleep(100);
      verify(marshaller).writeValueAsBytes(eq(event1));
      verify(marshaller).writeValueAsBytes(eq(event2));
      verify(channel,times(1)).write(any(ByteBuffer.class));
    }
  finally {
      dispatcher.release();
    }
  }
  @Test(expected=IllegalStateException.class) public void testAddWriteTaskThrowsWhenNotInitialized(){
    dispatcher.release();
    dispatcher.addWriteTask(new ApiCallAttemptMonitoringEvent(),channel,8192);
  }
  @Test public void testDropsEventWhenTooLarge() throws InterruptedException, IOException {
    ApiCallAttemptMonitoringEvent tooLarge=new ApiCallAttemptMonitoringEvent().withApi("SomeApi");
    dispatcher.addWriteTask(tooLarge,channel,1);
    Thread.sleep(100);
    verify(channel,times(0)).write(any(ByteBuffer.class));
  }
  @Test public void testWritesEventIfUnderMaxSize() throws InterruptedException, IOException {
    ApiCallAttemptMonitoringEvent okay=new ApiCallAttemptMonitoringEvent().withApi("SomeApi");
    dispatcher.addWriteTask(okay,channel,8192);
    Thread.sleep(100);
    verify(channel,times(1)).write(any(ByteBuffer.class));
  }
}
