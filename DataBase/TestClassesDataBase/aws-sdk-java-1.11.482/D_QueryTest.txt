/** 
 * Sample code to query items from DynamoDB table.
 */
public class D_QueryTest extends AbstractQuickStart {
  @Before public void before(){
    new B_PutItemTest().howToPutItems();
  }
  @Test public void simpleQuery(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,10));
    int count=0;
    for (    Item item : col) {
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count == 10);
  }
  @Test public void howToUseQueryFilters(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<QueryOutcome> col=table.query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,10),new QueryFilter("intAttr").gt(1238));
    int count=0;
    QueryOutcome lastOutcome=null;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
      QueryOutcome lowLevelOutcome=col.getLastLowLevelResult();
      if (lowLevelOutcome != lastOutcome) {
        System.out.println(lowLevelOutcome);
        lastOutcome=lowLevelOutcome;
      }
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
  @Test public void howToUseFilterExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<QueryOutcome> col=table.query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,10),"intAttr > :intAttr",null,new ValueMap().withInt(":intAttr",1238));
    col.registerLowLevelResultListener(new LowLevelResultListener<QueryOutcome>(){
      @Override public void onLowLevelResult(      QueryOutcome outcome){
        System.out.println(outcome);
      }
    }
);
    int count=0;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
  @Test public void howToUseFilterExpression_AttrNameSubstitution(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,10),"#intAttr > :intAttr",new NameMap().with("#intAttr","intAttr"),new ValueMap().withInt(":intAttr",1238));
    int count=0;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
  @Test public void howToUseProjectionExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.query(HASH_KEY_NAME,"foo",new RangeKeyCondition(RANGE_KEY_NAME).between(1,10),"#intAttr > :intAttr","intAttr, #binary",new NameMap().with("#intAttr","intAttr").with("#binary","binary"),new ValueMap().withInt(":intAttr",1238));
    int count=0;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
}
