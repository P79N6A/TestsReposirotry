/** 
 * Sample code to get item from DynamoDB table.
 */
public class C_GetItemTest extends AbstractQuickStart {
  @Before public void before(){
    new B_PutItemTest().howToPutItems();
  }
  @Test public void howToGetItems(){
    Table table=dynamo.getTable(TABLE_NAME);
    for (int i=1; i <= 10; i++) {
      Item item=table.getItem(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,i);
      System.out.println("========== item " + i + " ==========");
      System.out.println(item);
      byte[] binary=item.getBinary("binary");
      System.out.println("binary: " + Arrays.toString(binary));
      Set<byte[]> binarySet=item.getBinarySet("binarySet");
      for (      byte[] ba : binarySet) {
        System.out.println("binary set element: " + Arrays.toString(ba));
      }
      boolean bTrue=item.getBoolean("booleanTrue");
      System.out.println("booleanTrue: " + bTrue);
      int intval=item.getInt("intAttr");
      System.out.println("intAttr: " + intval);
      List<Object> listval=item.getList("listAtr");
      System.out.println("listAtr: " + listval);
      Map<String,Object> mapval=item.getMap("mapAttr");
      System.out.println("mapAttr: " + mapval);
      Object nullval=item.get("nullAttr");
      System.out.println("nullAttr: " + nullval);
      BigDecimal numval=item.getNumber("numberAttr");
      System.out.println("numberAttr: " + numval);
      String strval=item.getString("stringAttr");
      System.out.println("stringAttr: " + strval);
      Set<String> strset=item.getStringSet("stringSetAttr");
      System.out.println("stringSetAttr: " + strset);
    }
  }
  @Test public void howToUseProjectionExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    for (int i=1; i <= 10; i++) {
      Item item=table.getItem(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,i,"#binary, intAttr, stringAttr",new NameMap().with("#binary","binary"));
      System.out.println("========== item " + i + " ==========");
      System.out.println(item);
      byte[] binary=item.getBinary("binary");
      System.out.println("binary: " + Arrays.toString(binary));
      int intval=item.getInt("intAttr");
      System.out.println("intAttr: " + intval);
      Set<String> strset=item.getStringSet("stringSetAttr");
      System.out.println("stringSetAttr: " + strset);
    }
  }
  @Test public void howToUseGetItemSpec(){
    Table table=dynamo.getTable(TABLE_NAME);
    for (int i=1; i <= 10; i++) {
      Item item=table.getItem(new GetItemSpec().withPrimaryKey(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,i).withProjectionExpression("#binary, intAttr, stringAttr").withNameMap(new NameMap().with("#binary","binary")));
      System.out.println("========== item " + i + " ==========");
      System.out.println(item);
      byte[] binary=item.getBinary("binary");
      System.out.println("binary: " + Arrays.toString(binary));
      int intval=item.getInt("intAttr");
      System.out.println("intAttr: " + intval);
      Set<String> strset=item.getStringSet("stringSetAttr");
      System.out.println("stringSetAttr: " + strset);
    }
  }
  @Test public void getNonExistentItem(){
    Table table=dynamo.getTable(TABLE_NAME);
    Item item=table.getItem(HASH_KEY_NAME,"bar",RANGE_KEY_NAME,99);
    Assert.assertNull(item);
  }
}
