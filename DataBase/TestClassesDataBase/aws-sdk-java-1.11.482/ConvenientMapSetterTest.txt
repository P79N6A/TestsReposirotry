/** 
 * Tests on using convenient map setters.
 */
public class ConvenientMapSetterTest {
  /** 
 * Test on using map entry adder method. 
 */
  @Test public void testMapEntryAdderMethod(){
    PutItemRequest putItemRequest=new PutItemRequest().addItemEntry("hash-key",new AttributeValue().withS("1")).addItemEntry("range-key",new AttributeValue().withS("2")).addItemEntry("attribute",new AttributeValue().withS("3"));
    Map<String,AttributeValue> item=putItemRequest.getItem();
    assertEquals(3,item.size());
    assertEquals("1",item.get("hash-key").getS());
    assertEquals("2",item.get("range-key").getS());
    assertEquals("3",item.get("attribute").getS());
    putItemRequest.clearItemEntries();
    assertNull(putItemRequest.getItem());
  }
  /** 
 * Test on using predefined map entry setter to provide map parameter. 
 */
  @Test public void testPredefinedMapEntryMethod(){
    ScanRequest scanRequest=new ScanRequest().withExclusiveStartKey(new AbstractMap.SimpleEntry<String,AttributeValue>("hash-key",new AttributeValue().withS("1")),new AbstractMap.SimpleEntry<String,AttributeValue>("range-key",new AttributeValue().withS("2")));
    Map<String,AttributeValue> item=scanRequest.getExclusiveStartKey();
    assertEquals(2,item.size());
    assertEquals("1",item.get("hash-key").getS());
    assertEquals("2",item.get("range-key").getS());
  }
  /** 
 * Test on IllegalArgumentException when providing duplicated keys. 
 */
  @Test(expected=IllegalArgumentException.class) public void testDuplicatedKeysException(){
    new PutItemRequest().addItemEntry("hash-key",new AttributeValue().withS("1")).addItemEntry("hash-key",new AttributeValue().withS("2"));
  }
  /** 
 * Test on handling null entry objects. 
 */
  @Test public void testNullEntryException(){
    ScanRequest scanRequest=new ScanRequest().withExclusiveStartKey(new AbstractMap.SimpleEntry<String,AttributeValue>("hash-key",new AttributeValue().withS("1")),null);
    try {
      scanRequest.withExclusiveStartKey(null,new AbstractMap.SimpleEntry<String,AttributeValue>("hash-key",new AttributeValue().withS("1")));
      fail("Should throw IllegalArgumentException.");
    }
 catch (    IllegalArgumentException iae) {
    }
  }
}
