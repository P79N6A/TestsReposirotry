/** 
 * Tests the behavior when both {@link ClientConfiguration#setMaxErrorRetry(int)} and{@link ClientConfiguration#setRetryPolicy(RetryPolicy)} are used.
 */
public class ClientConfigurationMaxErrorRetryTest extends RetryPolicyTestBase {
  private static final Random random=new Random();
  private AmazonHttpClient testedClient;
  @Before public void resetClientConfiguration(){
    clientConfiguration=new ClientConfiguration();
  }
  /** 
 * -- No explicit calls on ClientConfiguration#setMaxErrorRetry(int); -- Default RetryPolicy's.
 */
  @Test public void testDefaultMaxErrorRetry(){
    Assert.assertTrue(clientConfiguration.getRetryPolicy() == PredefinedRetryPolicies.DEFAULT);
    testActualRetries(PredefinedRetryPolicies.DEFAULT_MAX_ERROR_RETRY);
    clientConfiguration.setRetryPolicy(PredefinedRetryPolicies.DYNAMODB_DEFAULT);
    testActualRetries(PredefinedRetryPolicies.DYNAMODB_DEFAULT_MAX_ERROR_RETRY);
  }
  /** 
 * -- Explicitly set maxErrorRetry in ClientConfiguration level; -- Default/custom RetryPolicy's that don't override such setting.
 */
  @Test public void testClientConfigLevelMaxErrorRetry(){
    int CLIENT_CONFIG_LEVEL_MAX_RETRY=random.nextInt(3);
    clientConfiguration.setMaxErrorRetry(CLIENT_CONFIG_LEVEL_MAX_RETRY);
    testActualRetries(CLIENT_CONFIG_LEVEL_MAX_RETRY);
    clientConfiguration.setRetryPolicy(PredefinedRetryPolicies.DYNAMODB_DEFAULT);
    testActualRetries(CLIENT_CONFIG_LEVEL_MAX_RETRY);
    clientConfiguration.setRetryPolicy(new RetryPolicy(null,null,5,true));
    testActualRetries(CLIENT_CONFIG_LEVEL_MAX_RETRY);
  }
  @Test public void testNoRetry(){
    final int CLIENT_CONFIG_LEVEL_MAX_RETRY=3;
    clientConfiguration.setRetryPolicy(PredefinedRetryPolicies.NO_RETRY_POLICY);
    clientConfiguration.setMaxErrorRetry(CLIENT_CONFIG_LEVEL_MAX_RETRY);
    testActualRetries(0);
  }
  /** 
 * -- Explicitly set maxErrorRetry in ClientConfiguration level; -- Custom RetryPolicy's that want to override such setting.
 */
  @Test public void testRetryPolicyLevelMaxErrorRetry(){
    clientConfiguration.setMaxErrorRetry(random.nextInt(3));
    int RETRY_POLICY_LEVEL_MAX_ERROR_RETRY=5;
    clientConfiguration.setRetryPolicy(new RetryPolicy(null,null,RETRY_POLICY_LEVEL_MAX_ERROR_RETRY,false));
    testActualRetries(RETRY_POLICY_LEVEL_MAX_ERROR_RETRY);
    clientConfiguration.setRetryPolicy(new RetryPolicy(new RetryPolicy.RetryCondition(){
      @Override public boolean shouldRetry(      AmazonWebServiceRequest originalRequest,      AmazonClientException exception,      int retriesAttempted){
        return false;
      }
    }
,null,RETRY_POLICY_LEVEL_MAX_ERROR_RETRY,true));
    testActualRetries(0);
  }
  /** 
 * Verifies the request is actually retried for the expected times.
 */
  private void testActualRetries(  int expectedRetryAttempts){
    testedClient=new AmazonHttpClient(clientConfiguration);
    injectMockHttpClient(testedClient,new ReturnServiceErrorHttpClient(500,"fake 500 service error"));
    ExecutionContext context=new ExecutionContext(true);
    try {
      testedClient.requestExecutionBuilder().request(getSampleRequestWithRepeatableContent(originalRequest)).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
      Assert.fail("AmazonServiceException is expected.");
    }
 catch (    AmazonServiceException ase) {
    }
    RetryTestUtils.assertExpectedRetryCount(expectedRetryAttempts,context);
  }
}
