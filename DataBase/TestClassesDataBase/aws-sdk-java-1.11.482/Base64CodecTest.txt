public class Base64CodecTest {
  @Test public void testVectorsPerRfc4648() throws NoSuchAlgorithmException, UnsupportedEncodingException {
    String[] testVectors={"","f","fo","foo","foob","fooba","foobar"};
    String[] expected={"","Zg==","Zm8=","Zm9v","Zm9vYg==","Zm9vYmE=","Zm9vYmFy"};
    for (int i=0; i < testVectors.length; i++) {
      String data=testVectors[i];
      byte[] source=data.getBytes("UTF-8");
      String b64encoded=Base64.encodeAsString(data.getBytes("UTF-8"));
      Assert.assertEquals(expected[i],b64encoded);
      byte[] b64=b64encoded.getBytes("UTF-8");
      byte[] decoded=Base64.decode(b64);
      Assert.assertTrue(Arrays.equals(source,decoded));
    }
  }
  @Test public void testCodecConsistency() throws NoSuchAlgorithmException, UnsupportedEncodingException {
    byte[] decoded=null;
    for (int h=0; h < 1000; h++) {
      byte[] digest=MessageDigest.getInstance("SHA-1").digest(UUID.randomUUID().toString().getBytes("UTF-8"));
      String b64Encoded=Base64.encodeAsString(digest);
      decoded=Base64.decode(b64Encoded);
      Assert.assertTrue(Arrays.equals(decoded,digest));
    }
  }
  @Test public void testImpossibleCases(){
    final String[] BASE64_IMPOSSIBLE_CASES={"ZE==","ZmC=","Zm9vYE==","Zm9vYmC="};
    for (    String s : BASE64_IMPOSSIBLE_CASES) {
      try {
        Base64.decode(s);
        Assert.fail();
      }
 catch (      IllegalArgumentException ex) {
      }
    }
  }
}
