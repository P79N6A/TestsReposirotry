/** 
 * Tests requiring an unresponsive server, that is a server that accepts a connection but doesn't write any data to the response
 */
public class UnresponsiveServerTests extends UnresponsiveMockServerTestBase {
  private static final int REQUEST_TIMEOUT=5 * 1000;
  private static final int LONGER_SOCKET_TIMEOUT=REQUEST_TIMEOUT * PRECISION_MULTIPLIER;
  private static final int SHORTER_SOCKET_TIMEOUT=REQUEST_TIMEOUT / PRECISION_MULTIPLIER;
  private AmazonHttpClient httpClient;
  @BeforeClass public static void preConditions(){
    TestPreConditions.assumeNotJava6();
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutDisabled_ConnectionClosedBySocketTimeout_NoThreadsCreated(){
    final int socketTimeout=1000;
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(socketTimeout).withRequestTimeout(0).withMaxErrorRetry(0));
    try {
      execute(httpClient,newGetRequest());
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(SocketTimeoutException.class));
      assertRequestTimerExecutorNotCreated(httpClient.getHttpRequestTimer());
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutSetInRequestObject_WithLongerSocketTimeout_ThrowsRequestTimeoutException(){
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(LONGER_SOCKET_TIMEOUT).withMaxErrorRetry(0));
    try {
      EmptyHttpRequest request=newGetRequest();
      request.setOriginalRequest(new EmptyAmazonWebServiceRequest().withSdkRequestTimeout(REQUEST_TIMEOUT));
      execute(httpClient,request);
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(HttpRequestTimeoutException.class));
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutSetInRequestObject_WithShorterSocketTimeout_ThrowsRequestTimeoutException(){
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(SHORTER_SOCKET_TIMEOUT).withMaxErrorRetry(0));
    try {
      EmptyHttpRequest request=newGetRequest();
      request.setOriginalRequest(new EmptyAmazonWebServiceRequest().withSdkRequestTimeout(REQUEST_TIMEOUT));
      execute(httpClient,request);
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(SocketTimeoutException.class));
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutSetInRequestObject_TakesPrecedenceOverClientConfiguration(){
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(LONGER_SOCKET_TIMEOUT).withRequestTimeout(REQUEST_TIMEOUT * 1000).withMaxErrorRetry(0));
    try {
      EmptyHttpRequest request=newGetRequest();
      request.setOriginalRequest(new EmptyAmazonWebServiceRequest().withSdkRequestTimeout(REQUEST_TIMEOUT));
      execute(httpClient,request);
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(HttpRequestTimeoutException.class));
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutDisabledInRequestObject_TakesPrecedenceOverClientConfiguration(){
    final int socketTimeout=REQUEST_TIMEOUT;
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(socketTimeout).withRequestTimeout(1).withMaxErrorRetry(0));
    try {
      EmptyHttpRequest request=newGetRequest();
      request.setOriginalRequest(new EmptyAmazonWebServiceRequest().withSdkRequestTimeout(0));
      execute(httpClient,request);
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(SocketTimeoutException.class));
    }
  }
}
