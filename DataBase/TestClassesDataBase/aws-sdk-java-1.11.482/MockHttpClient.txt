/** 
 * A base abstract class for fake HttpClient implementations 
 */
public static abstract class MockHttpClient implements ConnectionManagerAwareHttpClient {
  @Override public abstract HttpResponse execute(  HttpUriRequest request) throws IOException, ClientProtocolException ;
  @Override public HttpResponse execute(  HttpUriRequest request,  HttpContext context) throws IOException, ClientProtocolException {
    return execute(request);
  }
  @Override public HttpParams getParams(){
    return null;
  }
  @Override public ClientConnectionManager getConnectionManager(){
    return null;
  }
  @Override public HttpResponse execute(  HttpHost target,  HttpRequest request) throws IOException, ClientProtocolException {
    return null;
  }
  @Override public HttpResponse execute(  HttpHost target,  HttpRequest request,  HttpContext context) throws IOException, ClientProtocolException {
    return null;
  }
  @Override public <T>T execute(  HttpUriRequest request,  ResponseHandler<? extends T> responseHandler) throws IOException, ClientProtocolException {
    return null;
  }
  @Override public <T>T execute(  HttpUriRequest request,  ResponseHandler<? extends T> responseHandler,  HttpContext context) throws IOException, ClientProtocolException {
    return null;
  }
  @Override public <T>T execute(  HttpHost target,  HttpRequest request,  ResponseHandler<? extends T> responseHandler) throws IOException, ClientProtocolException {
    return null;
  }
  @Override public <T>T execute(  HttpHost target,  HttpRequest request,  ResponseHandler<? extends T> responseHandler,  HttpContext context) throws IOException, ClientProtocolException {
    return null;
  }
  @Override public HttpClientConnectionManager getHttpClientConnectionManager(){
    return null;
  }
}
