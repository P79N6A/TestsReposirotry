/** 
 * Sample code to update items to a dynamo table.
 */
public class F_UpdateItemTest {
  private static DynamoDB dynamo;
  public static final String TABLE_NAME="F_UpdateItemTest";
  public static final String HASH_KEY="customer_id";
  public static final String RANGE_KEY="address_type";
  private static final long READ_CAPACITY=1;
  private static final long WRITE_CAPACITY=1;
  public static final long FIRST_CUSTOMER_ID=1000L;
  public static final String ADDRESS_TYPE_HOME="home";
  public static final String ADDRESS_TYPE_WORK="work";
  @BeforeClass public static void setUp() throws Exception {
    AmazonDynamoDBClient client=new AmazonDynamoDBClient(awsTestCredentials());
    dynamo=new DynamoDB(client);
    setupData(dynamo);
  }
  static void setupData(  DynamoDB dynamo) throws InterruptedException {
    createTable(dynamo);
    fillInData(dynamo);
  }
  private static void createTable(  DynamoDB dynamo) throws InterruptedException {
    Table table=dynamo.getTable(TABLE_NAME);
    TableDescription desc=table.waitForActiveOrDelete();
    if (desc == null) {
      KeySchemaElement hashKey=new KeySchemaElement(HASH_KEY,KeyType.HASH);
      KeySchemaElement rangeKey=new KeySchemaElement(RANGE_KEY,KeyType.RANGE);
      CreateTableRequest createTableRequest=new CreateTableRequest(TABLE_NAME,Arrays.asList(hashKey,rangeKey)).withAttributeDefinitions(new AttributeDefinition(HASH_KEY,ScalarAttributeType.N),new AttributeDefinition(RANGE_KEY,ScalarAttributeType.S)).withProvisionedThroughput(new ProvisionedThroughput(READ_CAPACITY,WRITE_CAPACITY));
      table=dynamo.createTable(createTableRequest);
      table.waitForActive();
    }
  }
  private static void fillInData(  DynamoDB dynamo){
    Table table=dynamo.getTable(TABLE_NAME);
    table.putItem(new Item().withLong(HASH_KEY,FIRST_CUSTOMER_ID).withString(RANGE_KEY,ADDRESS_TYPE_WORK).withString("AddressLine1","1918 8th Aven").withString("city","seattle").withString("state","WA").withInt("zipcode",98104));
    table.putItem(new Item().withLong(HASH_KEY,FIRST_CUSTOMER_ID).withString(RANGE_KEY,ADDRESS_TYPE_HOME).withString("AddressLine1","15606 NE 40th ST").withString("city","redmond").withString("state","WA").withInt("zipcode",98052));
  }
  @Test public void howToAddElementsToSet(){
    Table table=dynamo.getTable(TABLE_NAME);
    final String phoneNumber1="123-456-7890";
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,new AttributeUpdate("phone").put(new FluentHashSet<String>(phoneNumber1)));
    GetItemOutcome outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    Item item=outcome.getItem();
    Set<String> phoneNumbers=item.getStringSet("phone");
    assertTrue(1 == phoneNumbers.size());
    System.out.println(phoneNumbers);
    final String phoneNumber2="987-654-3210";
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,new AttributeUpdate("phone").addElements(phoneNumber2));
    outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    item=outcome.getItem();
    phoneNumbers=item.getStringSet("phone");
    System.out.println(phoneNumbers);
    assertTrue(2 == phoneNumbers.size());
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,new AttributeUpdate("phone").removeElements(phoneNumber2));
    outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    item=outcome.getItem();
    phoneNumbers=item.getStringSet("phone");
    System.out.println(phoneNumbers);
    assertTrue(1 == phoneNumbers.size());
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,new AttributeUpdate("phone").delete());
    outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    item=outcome.getItem();
    phoneNumbers=item.getStringSet("phone");
    assertNull(phoneNumbers);
  }
  @Test public void howToAddNumerically(){
    Table table=dynamo.getTable(TABLE_NAME);
    GetItemOutcome outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    Item item=outcome.getItem();
    final int oldZipCode=item.getInt("zipcode");
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,new AttributeUpdate("zipcode").addNumeric(1));
    outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    item=outcome.getItem();
    int newZipCode=item.getInt("zipcode");
    assertEquals(oldZipCode + 1,newZipCode);
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,new AttributeUpdate("zipcode").addNumeric(-1));
    outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    item=outcome.getItem();
    newZipCode=item.getInt("zipcode");
    assertEquals(oldZipCode,newZipCode);
  }
  @Test public void howToSpecifyUpdateConditions(){
    final String phoneNumberToAdd="987-654-3210";
    Table table=dynamo.getTable(TABLE_NAME);
    System.out.println(table.getItemOutcome(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK));
    try {
      table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,Arrays.asList(new Expected("phone").exists()),new AttributeUpdate("phone").addElements(phoneNumberToAdd));
      fail("Update Should fail as the phone number attribute is not present in the row");
    }
 catch (    AmazonServiceException expected) {
    }
  }
  @Test public void howToUseUpdateExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,"set #phoneAttributeName = :phoneAtributeValue",new NameMap().with("#phoneAttributeName","phone"),new ValueMap().withStringSet(":phoneAtributeValue","123-456-7890","987-654-3210"));
    GetItemOutcome outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    Item item=outcome.getItem();
    Set<String> phoneNumbers=item.getStringSet("phone");
    assertTrue(phoneNumbers.size() == 2);
    System.out.println(phoneNumbers);
  }
  @Test public void howToUseConditionExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    GetItemOutcome outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    Item item=outcome.getItem();
    System.out.println(item);
    table.updateItem(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK,"set phone = list_append(:a, :b)","zipcode = :zipcode",null,new ValueMap().withInt(":zipcode",98104).withList(":a","phone-1","phone-2").withList(":b","phone-3","phone-4"));
    outcome=table.getItemOutcome(new GetItemSpec().withPrimaryKey(HASH_KEY,FIRST_CUSTOMER_ID,RANGE_KEY,ADDRESS_TYPE_WORK).withConsistentRead(true));
    item=outcome.getItem();
    System.out.println(item);
  }
  @AfterClass public static void shutDown(){
    dynamo.shutdown();
  }
  protected static AWSCredentials awsTestCredentials(){
    try {
      return new PropertiesCredentials(new File(System.getProperty("user.home") + "/.aws/awsTestAccount.properties"));
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
