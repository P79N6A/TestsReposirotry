public class AmazonHttpClientClockSkewErrorTest extends WireMockTestBase {
  private static final String RESOURCE_PATH="/transaction-id/";
  @Before public void setUp(){
    long hour=3600 * 1000;
    Date skewedDate=new Date(System.currentTimeMillis() - hour);
    stubFor(get(urlEqualTo(RESOURCE_PATH)).willReturn(aResponse().withStatus(500).withHeader("Date",DateUtils.formatRFC822Date(skewedDate))));
  }
  @Test public void globalTimeOffset_IsAdjusted_WhenClockSkewErrorHappens_And_RequestIsNotRetried() throws Exception {
    ClientConfiguration config=new ClientConfiguration();
    config.setRetryPolicy(PredefinedRetryPolicies.NO_RETRY_POLICY);
    executeRequest(config);
    assertTrue(SDKGlobalTime.getGlobalTimeOffset() >= 3600);
  }
  @Test public void globalTimeOffset_IsAdjusted_WhenClockSkewErrorHappens_And_RequestIsRetried() throws Exception {
    ClientConfiguration config=new ClientConfiguration();
    executeRequest(config);
    assertTrue(SDKGlobalTime.getGlobalTimeOffset() >= 3600);
  }
  private void executeRequest(  ClientConfiguration clientConfiguration) throws Exception {
    AmazonHttpClient httpClient=new AmazonHttpClient(clientConfiguration);
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest(RESOURCE_PATH)).errorResponseHandler(stubErrorHandler()).execute();
      fail("Expected exception");
    }
 catch (    AmazonServiceException expected) {
      assertEquals("RequestTimeTooSkewed",expected.getErrorCode());
    }
  }
  @Override protected HttpResponseHandler<AmazonServiceException> stubErrorHandler() throws Exception {
    HttpResponseHandler<AmazonServiceException> errorHandler=mock(JsonErrorResponseHandler.class);
    when(errorHandler.handle(any(HttpResponse.class))).thenReturn(createClockSkewException());
    return errorHandler;
  }
  private AmazonServiceException createClockSkewException(){
    AmazonServiceException exception=new AmazonServiceException("clock skew error");
    exception.setErrorCode("RequestTimeTooSkewed");
    exception.setStatusCode(500);
    return exception;
  }
}
