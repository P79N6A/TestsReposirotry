/** 
 * Sample code to scan items from DynamoDB table.
 */
public class E_ScanTest extends AbstractQuickStart {
  @Before public void before(){
    new B_PutItemTest().howToPutItems();
  }
  @Test public void howToUseScanFilters(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.scan(new ScanFilter(HASH_KEY_NAME).eq("foo"),new ScanFilter(RANGE_KEY_NAME).between(1,10));
    int count=0;
    for (    Item item : col) {
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count == 10);
  }
  @Test public void howToUseFilterExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.scan("myHashKey = :myHashKey AND " + "myRangeKey BETWEEN :lo and :hi AND " + "intAttr > :intAttr",null,new ValueMap().withString(":myHashKey","foo").withInt(":lo",1).withInt(":hi",10).withInt(":intAttr",1238));
    int count=0;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
  @Test public void howToUseFilterExpression_AttrNameSubstitution(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.scan("myHashKey = :myHashKey AND " + "#myRangeKey BETWEEN :lo and :hi AND " + "intAttr > :intAttr",new NameMap().with("#myRangeKey","myRangeKey"),new ValueMap().withString(":myHashKey","foo").withInt(":lo",1).withInt(":hi",10).withInt(":intAttr",1238));
    int count=0;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
  @Test public void howToUseProjectionExpression(){
    Table table=dynamo.getTable(TABLE_NAME);
    ItemCollection<?> col=table.scan("myHashKey = :myHashKey AND " + "#myRangeKey BETWEEN :lo and :hi AND " + "intAttr > :intAttr","intAttr, #binary",new NameMap().with("#myRangeKey","myRangeKey").with("#binary","binary"),new ValueMap().withString(":myHashKey","foo").withInt(":lo",1).withInt(":hi",10).withInt(":intAttr",1238));
    int count=0;
    for (    Item item : col) {
      Assert.assertTrue(item.getInt("intAttr") > 1238);
      System.out.println(item);
      count++;
    }
    Assert.assertTrue(count > 0);
    Assert.assertTrue(count < 10);
  }
}
