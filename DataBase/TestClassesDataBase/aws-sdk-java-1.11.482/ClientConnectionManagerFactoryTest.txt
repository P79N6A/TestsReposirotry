public class ClientConnectionManagerFactoryTest {
  HttpClientConnectionManager noop=new HttpClientConnectionManager(){
    @Override public void connect(    HttpClientConnection conn,    HttpRoute route,    int connectTimeout,    HttpContext context) throws IOException {
    }
    @Override public void upgrade(    HttpClientConnection conn,    HttpRoute route,    HttpContext context) throws IOException {
    }
    @Override public void routeComplete(    HttpClientConnection conn,    HttpRoute route,    HttpContext context) throws IOException {
    }
    @Override public ConnectionRequest requestConnection(    HttpRoute route,    Object state){
      return null;
    }
    @Override public void releaseConnection(    HttpClientConnection conn,    Object newState,    long validDuration,    TimeUnit timeUnit){
    }
    @Override public void closeIdleConnections(    long idletime,    TimeUnit tunit){
    }
    @Override public void closeExpiredConnections(){
    }
    @Override public void shutdown(){
    }
  }
;
  @Test public void wrapOnce(){
    HttpClientConnectionManager wrapped=ClientConnectionManagerFactory.wrap(noop);
    assertTrue(wrapped instanceof Wrapped);
  }
  @Test(expected=IllegalArgumentException.class) public void wrapTwice(){
    HttpClientConnectionManager wrapped=ClientConnectionManagerFactory.wrap(noop);
    ClientConnectionManagerFactory.wrap(wrapped);
  }
}
