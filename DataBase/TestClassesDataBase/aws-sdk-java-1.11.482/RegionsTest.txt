public class RegionsTest {
  @Test public void testDefaultDomain(){
    Region region=new Region(new InMemoryRegionImpl("region",null));
    Assert.assertEquals("amazonaws.com",region.getDomain());
  }
  @Test public void testSetEndpointByRegion(){
    InMemoryRegionImpl regionImpl=new InMemoryRegionImpl("region","example.com");
    regionImpl.addEndpoint("service","service-region.example.com");
    Region region=new Region(regionImpl);
    AmazonServiceClient service=new AmazonServiceClient();
    service.setRegion(region);
    Assert.assertEquals("https://service-region.example.com",service.getEndpoint());
    AmazonUnknownServiceClient unknown=new AmazonUnknownServiceClient();
    unknown.setRegion(region);
    Assert.assertEquals("https://unknownservice.region.example.com",unknown.getEndpoint());
  }
  @Test(expected=IllegalArgumentException.class) public void fromName_whenRegionNameNull_throwsIllegalArgumentException(){
    Regions.fromName(null);
  }
  @Test(expected=IllegalArgumentException.class) public void fromName_whenRegionNameEmpty_throwsIllegalArgumentException(){
    Regions.fromName("");
  }
  @Test(expected=IllegalArgumentException.class) public void fromName_whenRegionNameInvalid_throwsIllegalArgumentException(){
    Regions.fromName("northpole");
  }
  @Test public void fromName_whenRegionNameIsValid_returnsCorrectValue(){
    Assert.assertEquals(Regions.EU_CENTRAL_1,Regions.fromName("eu-central-1"));
  }
private static class AmazonServiceClient extends AmazonWebServiceClient {
    public AmazonServiceClient(){
      super(new ClientConfiguration());
    }
    public String getEndpoint(){
      return endpoint.toString();
    }
  }
private static class AmazonUnknownServiceClient extends AmazonWebServiceClient {
    public AmazonUnknownServiceClient(){
      super(new ClientConfiguration());
    }
    public String getEndpoint(){
      return endpoint.toString();
    }
  }
}
