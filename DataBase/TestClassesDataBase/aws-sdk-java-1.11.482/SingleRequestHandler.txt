/** 
 * Tests a  {@link StackedRequestHandler} with a single {@link RequestHandler2} added. Tests thatonly that request handler is delegated to.
 */
public static class SingleRequestHandler {
  private StackedRequestHandler stackedRequestHandler;
  @Mock private RequestHandler2 only;
  @Mock private Request<?> request;
  private Response<?> response;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    stackedRequestHandler=new StackedRequestHandler(only);
    response=new Response<String>("Dummy response",new HttpResponse(request,new HttpGet()));
  }
  @Test public void beforeMarshalling(){
    final AmazonWebServiceRequest inputRequest=mock(AmazonWebServiceRequest.class);
    stackedRequestHandler.beforeMarshalling(inputRequest);
    assertNull(verify(only).beforeMarshalling(inputRequest));
  }
  @Test public void beforeRequest(){
    stackedRequestHandler.beforeRequest(request);
    verify(only).beforeRequest(request);
  }
  @Test public void beforeUnmarshalling(){
    HttpResponse httpResponse=new HttpResponse(request,null);
    stackedRequestHandler.beforeUnmarshalling(request,httpResponse);
    verify(only).beforeUnmarshalling(request,httpResponse);
  }
  @Test public void afterResponse(){
    stackedRequestHandler.afterResponse(request,response);
    verify(only).afterResponse(request,response);
  }
  @Test public void afterError(){
    final Exception exception=new AmazonServiceException("Some service failure");
    stackedRequestHandler.afterError(request,response,exception);
    verify(only).afterError(request,response,exception);
  }
}
