public class IdleConnectionReaperTest {
  @Before public void init(){
    IdleConnectionReaper.shutdown();
  }
  @Test public void forceShutdown() throws Exception {
    assertEquals(0,IdleConnectionReaper.size());
    for (int i=0; i < 3; i++) {
      assertTrue(IdleConnectionReaper.registerConnectionManager(new TestClientConnectionManager()));
      assertEquals(1,IdleConnectionReaper.size());
      assertTrue(IdleConnectionReaper.shutdown());
      assertEquals(0,IdleConnectionReaper.size());
      assertFalse(IdleConnectionReaper.shutdown());
    }
  }
  @Test public void autoShutdown() throws Exception {
    assertEquals(0,IdleConnectionReaper.size());
    for (int i=0; i < 3; i++) {
      HttpClientConnectionManager m=new TestClientConnectionManager();
      HttpClientConnectionManager m2=new TestClientConnectionManager();
      assertTrue(IdleConnectionReaper.registerConnectionManager(m));
      assertEquals(1,IdleConnectionReaper.size());
      assertTrue(IdleConnectionReaper.registerConnectionManager(m2));
      assertEquals(2,IdleConnectionReaper.size());
      assertTrue(IdleConnectionReaper.removeConnectionManager(m));
      assertEquals(1,IdleConnectionReaper.size());
      assertTrue(IdleConnectionReaper.removeConnectionManager(m2));
      assertEquals(0,IdleConnectionReaper.size());
      assertFalse(IdleConnectionReaper.shutdown());
    }
  }
  @Test public void maxIdle_HonoredOnClose() throws InterruptedException {
    HttpClientConnectionManager connectionManager=mock(HttpClientConnectionManager.class);
    final long idleTime=10 * 1000;
    IdleConnectionReaper.registerConnectionManager(connectionManager,idleTime);
    verify(connectionManager,timeout(90 * 1000)).closeIdleConnections(eq(idleTime),eq(TimeUnit.MILLISECONDS));
  }
private static class TestClientConnectionManager implements HttpClientConnectionManager {
    @Override public void releaseConnection(    HttpClientConnection conn,    Object newState,    long validDuration,    TimeUnit timeUnit){
    }
    @Override public void connect(    HttpClientConnection conn,    HttpRoute route,    int connectTimeout,    HttpContext context) throws IOException {
    }
    @Override public void upgrade(    HttpClientConnection conn,    HttpRoute route,    HttpContext context) throws IOException {
    }
    @Override public void routeComplete(    HttpClientConnection conn,    HttpRoute route,    HttpContext context) throws IOException {
    }
    @Override public void shutdown(){
    }
    @Override public void closeIdleConnections(    long idletime,    TimeUnit tunit){
    }
    @Override public void closeExpiredConnections(){
    }
    @Override public ConnectionRequest requestConnection(    HttpRoute route,    Object state){
      return null;
    }
  }
}
