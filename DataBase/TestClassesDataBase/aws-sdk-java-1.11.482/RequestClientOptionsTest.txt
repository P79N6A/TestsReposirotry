public class RequestClientOptionsTest {
  @Test public void test(){
    RequestClientOptions opts=new RequestClientOptions();
    for (    Marker m : Marker.values()) {
      assertNull(opts.getClientMarker(m));
    }
    for (    Marker m : Marker.values()) {
      opts.putClientMarker(m,m.name());
    }
    for (    Marker m : Marker.values()) {
      assertEquals(m.name(),opts.getClientMarker(m));
    }
    assertEquals(Marker.USER_AGENT.name(),opts.getClientMarker(Marker.USER_AGENT));
    opts.appendUserAgent("2nd-agent");
    String ua=opts.getClientMarker(Marker.USER_AGENT);
    assertEquals(ua,Marker.USER_AGENT.name() + " 2nd-agent",ua);
    opts.appendUserAgent("3rd-agent");
    ua=opts.getClientMarker(Marker.USER_AGENT);
    assertEquals(ua,Marker.USER_AGENT.name() + " 2nd-agent 3rd-agent",ua);
    assertEquals(ua,opts.getClientMarker(Marker.USER_AGENT));
  }
  @Test public void copyTo(){
    RequestClientOptions from=new RequestClientOptions();
    from.appendUserAgent("useragent");
    from.setReadLimit(1234);
    assertNotNull(from.getClientMarker(Marker.USER_AGENT));
    assertTrue(1234 == from.getReadLimit());
    RequestClientOptions to=new RequestClientOptions();
    assertNull(to.getClientMarker(Marker.USER_AGENT));
    assertFalse(1234 == to.getReadLimit());
    from.copyTo(to);
    assertEquals(from.getClientMarker(Marker.USER_AGENT),to.getClientMarker(Marker.USER_AGENT));
    assertTrue(1234 == to.getReadLimit());
  }
}
