/** 
 * Tests for the response metadata cache class. 
 */
public class ResponseMetadataCacheTest {
  /** 
 * Tests that the cache correctly evicts the oldest entries.  
 */
  @Test public void testEviction(){
    ResponseMetadataCache cache=new ResponseMetadataCache(3);
    AmazonWebServiceRequest key1=new TestRequest();
    AmazonWebServiceRequest key2=new TestRequest();
    AmazonWebServiceRequest key3=new TestRequest();
    AmazonWebServiceRequest key4=new TestRequest();
    ResponseMetadata metadata1=newResponseMetadata();
    ResponseMetadata metadata2=newResponseMetadata();
    ResponseMetadata metadata3=newResponseMetadata();
    ResponseMetadata metadata4=newResponseMetadata();
    cache.add(key1,metadata1);
    cache.add(key2,metadata2);
    cache.add(key3,metadata3);
    assertEquals(metadata1,cache.get(key1));
    assertEquals(metadata2,cache.get(key2));
    assertEquals(metadata3,cache.get(key3));
    cache.add(key4,metadata4);
    assertNull(cache.get(key1));
    assertEquals(metadata2,cache.get(key2));
    assertEquals(metadata3,cache.get(key3));
    assertEquals(metadata4,cache.get(key4));
  }
  /** 
 * Tests that the cache works correctly with size=0  
 */
  @Test public void TestEmpty(){
    ResponseMetadataCache cache=new ResponseMetadataCache(0);
    AmazonWebServiceRequest key=new TestRequest();
    ResponseMetadata metadata=newResponseMetadata();
    cache.add(key,metadata);
    assertNull(cache.get(key));
  }
private class TestRequest extends AmazonWebServiceRequest {
  }
  private ResponseMetadata newResponseMetadata(){
    HashMap<String,String> metadata=new HashMap<String,String>();
    metadata.put("foo","bar-" + new Random().nextLong());
    return new ResponseMetadata(metadata);
  }
}
