public class ResettableInputStreamTest {
  private static File file;
  @BeforeClass public static void setup() throws IOException {
    file=generateRandomAsciiFile(100);
  }
  @Test public void testFileInputStream() throws IOException {
    InputStream is=new FileInputStream(file);
    assertFalse(is.markSupported());
    final String content=IOUtils.toString(is);
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 100);
    assertEquals(content2,"");
    is.close();
  }
  @Test public void testResetInputStreamWithFile() throws IOException {
    ResettableInputStream is=new ResettableInputStream(file);
    assertTrue(is.markSupported());
    final String content=IOUtils.toString(is);
    is.reset();
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 100);
    assertEquals(content,content2);
    is.close();
    assertEquals(file,is.getFile());
  }
  @Test public void testResetFileInputStream() throws IOException {
    ResettableInputStream is=new ResettableInputStream(new FileInputStream(file));
    assertTrue(is.markSupported());
    final String content=IOUtils.toString(is);
    is.reset();
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 100);
    assertEquals(content,content2);
    is.close();
    assertNull(is.getFile());
  }
  @Test public void testMarkAndResetWithFile() throws IOException {
    ResettableInputStream is=new ResettableInputStream(file);
    is.read(new byte[10]);
    is.mark(-1);
    final String content=IOUtils.toString(is);
    is.reset();
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 90);
    assertEquals(content,content2);
    is.close();
  }
  @Test public void testMarkAndResetFileInputStream() throws IOException {
    ResettableInputStream is=new ResettableInputStream(new FileInputStream(file));
    is.read(new byte[10]);
    is.mark(-1);
    final String content=IOUtils.toString(is);
    is.reset();
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 90);
    assertEquals(content,content2);
    is.close();
  }
  @Test public void testResetWithClosedFile() throws IOException {
    ResettableInputStream is=new ResettableInputStream(file).disableClose();
    final String content=IOUtils.toString(is);
    is.close();
    is.reset();
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 100);
    assertEquals(content,content2);
    is.release();
  }
  @Test(expected=ClosedChannelException.class) public void negativeTestResetWithClosedFile() throws IOException {
    ResettableInputStream is=new ResettableInputStream(file);
    is.close();
    is.reset();
  }
  @Test public void testMarkAndResetWithClosedFile() throws IOException {
    ResettableInputStream is=new ResettableInputStream(file).disableClose();
    is.read(new byte[10]);
    is.mark(-1);
    final String content=IOUtils.toString(is);
    is.close();
    is.reset();
    final String content2=IOUtils.toString(is);
    assertTrue(content.length() == 90);
    assertEquals(content,content2);
    is.release();
  }
  @Test(expected=ClosedChannelException.class) public void testMarkAndResetClosedFileInputStream() throws IOException {
    ResettableInputStream is=new ResettableInputStream(new FileInputStream(file));
    is.close();
    is.reset();
  }
}
