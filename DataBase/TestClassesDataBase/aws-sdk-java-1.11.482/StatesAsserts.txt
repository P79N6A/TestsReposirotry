public class StatesAsserts {
  private static final ObjectMapper MAPPER=new ObjectMapper();
  public static void assertStateMachineMatches(  String resourcePath,  StateMachine stateMachine){
    final JsonNode expected=loadExpected(resourcePath);
    assertEquals(expected,serialize(stateMachine));
    assertEquals(expected,serialize(roundTripStateMachine(stateMachine)));
    assertEquals(expected,serialize(roundTripPrettyStateMachine(stateMachine)));
  }
  public static void assertStateMachineMatches(  String resourcePathPrefix,  String resourceName,  StateMachine stateMachine){
    final JsonNode expected=loadExpected(String.format("%s/%s",resourcePathPrefix,resourceName));
    assertEquals(expected,serialize(stateMachine));
    assertEquals(expected,serialize(roundTripStateMachine(stateMachine)));
    assertEquals(expected,serialize(roundTripPrettyStateMachine(stateMachine)));
  }
  public static void assertJsonEquals(  String expected,  String actual){
    try {
      assertEquals(MAPPER.readTree(expected),MAPPER.readTree(actual));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  /** 
 * Serializes StateMachine into JSON and deserialize back into a StateMachine from the JSON.
 * @param stateMachine State machine to round trip.
 * @return Round-tripped state machine.
 */
  private static StateMachine roundTripStateMachine(  StateMachine stateMachine){
    return StateMachine.fromJson(stateMachine.toJson()).build();
  }
  /** 
 * Serializes StateMachine into pretty formatted JSON and deserialize back into a StateMachine from the JSON.
 * @param stateMachine State machine to round trip.
 * @return Round-tripped state machine.
 */
  private static StateMachine roundTripPrettyStateMachine(  StateMachine stateMachine){
    return StateMachine.fromJson(stateMachine.toPrettyJson()).build();
  }
  private static JsonNode serialize(  StateMachine stateMachine){
    try {
      return MAPPER.readTree(stateMachine.toJson());
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  private static JsonNode loadExpected(  String resourcePath){
    return TestResourceLoader.loadAsJson(resourcePath);
  }
}
