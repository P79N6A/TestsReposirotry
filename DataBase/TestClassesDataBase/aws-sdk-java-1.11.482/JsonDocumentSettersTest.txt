/** 
 * Tests various builders that accept a raw JSON string or POJO to be serialized as JSON. This includes {@link PassState} which has a JSON result object, and PassState, {@link ParallelState}, and  {@link TaskState} whichaccepts JSON for the Parameters field.
 */
@RunWith(Parameterized.class) public class JsonDocumentSettersTest {
  /** 
 * Interface to parameterize the test with different states and fields.
 */
public interface Handler {
    /** 
 * Sets the raw JSON string representing the document.
 * @param json JSON document.
 * @return Roundtripped value (builds the state and calls the appropriate getter).
 */
    String setString(    String json);
    /** 
 * Sets the POJO object representing the document.
 * @param pojo Object to be serialized into JSON.
 * @return Roundtripped value (builds the state and calls the appropriate getter).
 */
    String setPojo(    Object pojo);
  }
  /** 
 * @return The collection of test objects to run.
 */
  @Parameterized.Parameters public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{new Handler(){
      @Override public String setString(      String json){
        return build(newPassState().result(json));
      }
      @Override public String setPojo(      Object pojo){
        return build(newPassState().result(pojo));
      }
      private String build(      PassState.Builder result){
        return result.build().getResult();
      }
    }
},{new Handler(){
      @Override public String setString(      String json){
        return build(newPassState().parameters(json));
      }
      @Override public String setPojo(      Object pojo){
        return build(newPassState().parameters(pojo));
      }
      private String build(      PassState.Builder result){
        return result.build().getParameters();
      }
    }
},{new Handler(){
      @Override public String setString(      String json){
        return build(newTaskState().parameters(json));
      }
      @Override public String setPojo(      Object pojo){
        return build(newTaskState().parameters(pojo));
      }
      private String build(      TaskState.Builder result){
        return result.build().getParameters();
      }
    }
},{new Handler(){
      @Override public String setString(      String json){
        return build(newParallelState().parameters(json));
      }
      @Override public String setPojo(      Object pojo){
        return build(newParallelState().parameters(pojo));
      }
      private String build(      ParallelState.Builder result){
        return result.build().getParameters();
      }
    }
}});
  }
  private static final ObjectMapper MAPPER=new ObjectMapper();
  private final Handler handler;
  public JsonDocumentSettersTest(  Handler handler){
    this.handler=handler;
  }
  @Test public void setString_ValidJson_ReturnsJsonResult(){
    String strResult="{\"Foo\": \"Bar\"}";
    assertJsonEquals(strResult,handler.setString(strResult));
  }
  @Test public void setString_JsonArray_ReturnsJsonResult(){
    String strResult="[42, \"foo\", {}]";
    assertJsonEquals(strResult,handler.setString(strResult));
  }
  @Test public void setString_JsonPrimitive_ReturnsJsonResult(){
    String strResult="true";
    assertJsonEquals(strResult,handler.setString(strResult));
  }
  @Test public void setString_JsonNull_ReturnsJsonResult(){
    String strResult="null";
    assertJsonEquals(strResult,handler.setString(strResult));
  }
  @Test public void setPojo_ValidPojo_ReturnsJsonResult(){
    SimplePojo pojo=new SimplePojo("value");
    assertJsonEquals("{\"foo\": \"value\"}",handler.setPojo(pojo));
  }
  @Test(expected=Exception.class) public void setString_MalformedJson_ThrowsException(){
    handler.setString("{");
  }
  @Test public void setPojo_PojoWithJacksonAnnotations_IgnoresAnnotations(){
    PojoWithJacksonAnnotations pojo=new PojoWithJacksonAnnotations();
    pojo.setFoo("FooValue");
    pojo.setBar("BarValue");
    pojo.baz="BazValue";
    assertJsonEquals("{\"foo\": \"FooValue\", \"bar\": \"BarValue\"}",handler.setPojo(pojo));
  }
  private static PassState.Builder newPassState(){
    return passState().transition(end());
  }
  private static TaskState.Builder newTaskState(){
    return taskState().transition(end());
  }
  private static ParallelState.Builder newParallelState(){
    return parallelState().transition(end());
  }
}
