/** 
 * Tests that  {@link AmazonHttpClient#executeHelper()} method passes the correctcontext information into the configured RetryPolicy.
 */
public class AmazonHttpClientRetryPolicyTest extends RetryPolicyTestBase {
  private static final int EXPECTED_RETRY_COUNT=5;
  private static final int EXPECTED_SHOULD_RETRY_CALL_COUNT=EXPECTED_RETRY_COUNT + 1;
  private static final Random random=new Random();
  private AmazonHttpClient testedClient;
  /** 
 * Reset the RetryPolicy and restart collecting context data 
 */
  @Before public void resetContextData(){
    retryCondition=new ContextDataCollectionRetryCondition();
    backoffStrategy=new ContextDataCollectionBackoffStrategy();
    clientConfiguration.setRetryPolicy(new RetryPolicy(retryCondition,backoffStrategy,EXPECTED_RETRY_COUNT,false));
    testedClient=new AmazonHttpClient(clientConfiguration);
  }
  /** 
 * Tests AmazonHttpClient's behavior upon simulated service exceptions when the request payload is repeatable.
 */
  @Test public void testServiceExceptionHandling(){
    int random500StatusCode=500 + random.nextInt(100);
    String randomErrorCode=UUID.randomUUID().toString();
    injectMockHttpClient(testedClient,new ReturnServiceErrorHttpClient(random500StatusCode,randomErrorCode));
    ExecutionContext context=new ExecutionContext(true);
    Request<?> testedRepeatableRequest=getSampleRequestWithRepeatableContent(originalRequest);
    AmazonServiceException expectedServiceException=null;
    try {
      testedClient.requestExecutionBuilder().request(testedRepeatableRequest).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
      Assert.fail("AmazonServiceException is expected.");
    }
 catch (    AmazonServiceException ase) {
      Assert.assertEquals(random500StatusCode,ase.getStatusCode());
      Assert.assertEquals(randomErrorCode,ase.getErrorCode());
      expectedServiceException=ase;
    }
    verifyExpectedContextData(retryCondition,originalRequest,expectedServiceException,EXPECTED_SHOULD_RETRY_CALL_COUNT);
    verifyExpectedContextData(backoffStrategy,originalRequest,expectedServiceException,EXPECTED_RETRY_COUNT);
    Assert.assertEquals(EXPECTED_RETRY_COUNT + 1,context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());
  }
  /** 
 * Tests AmazonHttpClient's behavior upon simulated IOException during executing the http request when the request payload is repeatable.
 */
  @Test public void testIOExceptioinHandling(){
    IOException simulatedIOException=new IOException("fake IOException");
    injectMockHttpClient(testedClient,new ThrowingExceptionHttpClient(simulatedIOException));
    ExecutionContext context=new ExecutionContext(true);
    Request<?> testedRepeatableRequest=getSampleRequestWithRepeatableContent(originalRequest);
    AmazonClientException expectedClientException=null;
    try {
      testedClient.requestExecutionBuilder().request(testedRepeatableRequest).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
      Assert.fail("AmazonClientException is expected.");
    }
 catch (    AmazonClientException ace) {
      Assert.assertTrue(simulatedIOException == ace.getCause());
      expectedClientException=ace;
    }
    verifyExpectedContextData(retryCondition,originalRequest,expectedClientException,EXPECTED_SHOULD_RETRY_CALL_COUNT);
    verifyExpectedContextData(backoffStrategy,originalRequest,expectedClientException,EXPECTED_RETRY_COUNT);
    Assert.assertEquals(EXPECTED_RETRY_COUNT + 1,context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());
  }
  /** 
 * Tests AmazonHttpClient's behavior upon simulated service exceptions when the request payload is not repeatable.
 */
  @Test public void testServiceExceptionHandlingWithNonRepeatableRequestContent(){
    int random500StatusCode=500 + random.nextInt(100);
    String randomErrorCode=UUID.randomUUID().toString();
    injectMockHttpClient(testedClient,new ReturnServiceErrorHttpClient(random500StatusCode,randomErrorCode));
    ExecutionContext context=new ExecutionContext(true);
    Request<?> testedNonRepeatableRequest=getSampleRequestWithNonRepeatableContent(originalRequest);
    try {
      testedClient.requestExecutionBuilder().request(testedNonRepeatableRequest).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
      Assert.fail("AmazonServiceException is expected.");
    }
 catch (    AmazonServiceException ase) {
      Assert.assertEquals(random500StatusCode,ase.getStatusCode());
      Assert.assertEquals(randomErrorCode,ase.getErrorCode());
    }
    verifyExpectedContextData(retryCondition,null,null,EXPECTED_SHOULD_RETRY_CALL_COUNT);
    verifyExpectedContextData(backoffStrategy,null,null,EXPECTED_RETRY_COUNT);
    Assert.assertEquals(EXPECTED_RETRY_COUNT + 1,context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());
  }
  /** 
 * Tests AmazonHttpClient's behavior upon simulated IOException when the request payload is not repeatable.
 */
  @Test public void testIOExceptionHandlingWithNonRepeatableRequestContent(){
    IOException simulatedIOException=new IOException("fake IOException");
    injectMockHttpClient(testedClient,new ThrowingExceptionHttpClient(simulatedIOException));
    ExecutionContext context=new ExecutionContext(true);
    Request<?> testedRepeatableRequest=getSampleRequestWithNonRepeatableContent(originalRequest);
    try {
      testedClient.requestExecutionBuilder().request(testedRepeatableRequest).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
      Assert.fail("AmazonClientException is expected.");
    }
 catch (    AmazonClientException ace) {
      Assert.assertTrue(simulatedIOException == ace.getCause());
    }
    verifyExpectedContextData(retryCondition,null,null,EXPECTED_SHOULD_RETRY_CALL_COUNT);
    verifyExpectedContextData(backoffStrategy,null,null,EXPECTED_RETRY_COUNT);
    Assert.assertEquals(EXPECTED_RETRY_COUNT + 1,context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());
  }
  /** 
 * Tests AmazonHttpClient's behavior upon simulated RuntimeException (which should be handled as an unexpected failure and not retried).
 */
  @Test public void testUnexpectedFailureHandling(){
    NullPointerException simulatedNPE=new NullPointerException("fake NullPointerException");
    injectMockHttpClient(testedClient,new ThrowingExceptionHttpClient(simulatedNPE));
    ExecutionContext context=new ExecutionContext(true);
    Request<?> testedRepeatableRequest=getSampleRequestWithRepeatableContent(originalRequest);
    try {
      testedClient.requestExecutionBuilder().request(testedRepeatableRequest).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
      Assert.fail("AmazonClientException is expected.");
    }
 catch (    NullPointerException npe) {
      Assert.assertTrue(simulatedNPE == npe);
    }
    verifyExpectedContextData(retryCondition,null,null,0);
    verifyExpectedContextData(backoffStrategy,null,null,0);
    Assert.assertEquals(1,context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());
  }
}
