/** 
 * Sample code to create a DynamoDB table.
 */
public class A_CreateTableTest extends AbstractQuickStart {
  private final ProvisionedThroughput THRUPUT=new ProvisionedThroughput(1L,2L);
  private final Projection PROJECTION=new Projection().withProjectionType(ProjectionType.ALL);
  /** 
 * Sample request to create a DynamoDB table with an LSI and GSI that can be accessed via a combination of hash keys and range keys.
 */
  @Test public void howToCreateTable() throws InterruptedException {
    String TABLE_NAME="myTableForMidLevelApi";
    Table table=dynamo.getTable(TABLE_NAME);
    TableDescription desc=table.waitForActiveOrDelete();
    if (desc != null) {
      System.out.println("Skip creating table which already exists and ready for use: " + desc);
      return;
    }
    table=dynamo.createTable(newCreateTableRequest(TABLE_NAME));
    desc=table.waitForActive();
    System.out.println("Table is ready for use! " + desc);
  }
  private CreateTableRequest newCreateTableRequest(  String tableName){
    String HASH_KEY_NAME="myHashKey";
    String RANGE_KEY_NAME="myRangeKey";
    String LSI_NAME="myLSI";
    String LSI_RANGE_KEY_NAME="myLsiRangeKey";
    String RANGE_GSI_NAME="myRangeGSI";
    String GSI_HASH_KEY_NAME="myGsiHashKey";
    String GSI_RANGE_KEY_NAME="myGsiRangeKey";
    CreateTableRequest req=new CreateTableRequest().withTableName(tableName).withAttributeDefinitions(new AttributeDefinition(HASH_KEY_NAME,ScalarAttributeType.S),new AttributeDefinition(RANGE_KEY_NAME,ScalarAttributeType.N),new AttributeDefinition(LSI_RANGE_KEY_NAME,ScalarAttributeType.N),new AttributeDefinition(GSI_HASH_KEY_NAME,ScalarAttributeType.S),new AttributeDefinition(GSI_RANGE_KEY_NAME,ScalarAttributeType.N)).withKeySchema(new KeySchemaElement(HASH_KEY_NAME,KeyType.HASH),new KeySchemaElement(RANGE_KEY_NAME,KeyType.RANGE)).withProvisionedThroughput(THRUPUT).withGlobalSecondaryIndexes(new GlobalSecondaryIndex().withIndexName(RANGE_GSI_NAME).withKeySchema(new KeySchemaElement(GSI_HASH_KEY_NAME,KeyType.HASH),new KeySchemaElement(GSI_RANGE_KEY_NAME,KeyType.RANGE)).withProjection(PROJECTION).withProvisionedThroughput(THRUPUT)).withLocalSecondaryIndexes(new LocalSecondaryIndex().withIndexName(LSI_NAME).withKeySchema(new KeySchemaElement(HASH_KEY_NAME,KeyType.HASH),new KeySchemaElement(LSI_RANGE_KEY_NAME,KeyType.RANGE)).withProjection(PROJECTION));
    return req;
  }
}
