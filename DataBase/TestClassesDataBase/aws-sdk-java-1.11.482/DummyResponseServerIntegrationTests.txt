/** 
 * Tests that use a server that returns a predetermined response within the timeout limit
 */
public class DummyResponseServerIntegrationTests extends MockServerTestBase {
  private static final int STATUS_CODE=500;
  private AmazonHttpClient httpClient;
  @BeforeClass public static void preConditions(){
    TestPreConditions.assumeNotJava6();
  }
  @Override protected MockServer buildMockServer(){
    return new MockServer(MockServer.DummyResponseServerBehavior.build(STATUS_CODE,"Internal Server Failure","Dummy response"));
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutEnabled_ServerRespondsWithRetryableError_RetriesUpToLimitThenThrowsServerException() throws IOException {
    int maxRetries=2;
    ClientConfiguration config=new ClientConfiguration().withRequestTimeout(25 * 1000).withClientExecutionTimeout(25 * 1000).withMaxErrorRetry(maxRetries);
    HttpClientFactory<ConnectionManagerAwareHttpClient> httpClientFactory=new ApacheHttpClientFactory();
    ConnectionManagerAwareHttpClient rawHttpClient=spy(httpClientFactory.create(HttpClientSettings.adapt(config)));
    httpClient=new AmazonHttpClient(config,rawHttpClient,null);
    try {
      httpClient.execute(newGetRequest(),new ErrorDuringUnmarshallingResponseHandler(),new NullErrorResponseHandler(),new ExecutionContext());
      fail("Exception expected");
    }
 catch (    AmazonServiceException e) {
      assertEquals(e.getStatusCode(),STATUS_CODE);
      int expectedNumberOfRequests=1 + maxRetries;
      assertNumberOfRetries(rawHttpClient,expectedNumberOfRequests);
      assertNumberOfTasksTriggered(httpClient.getHttpRequestTimer(),0);
      assertNumberOfTasksTriggered(httpClient.getClientExecutionTimer(),0);
    }
  }
}
