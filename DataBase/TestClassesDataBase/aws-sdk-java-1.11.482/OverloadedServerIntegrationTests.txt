/** 
 * Tests requiring an Overloaded server, that is a server that responds but can't close the connection in a timely fashion
 */
public class OverloadedServerIntegrationTests extends OverloadedMockServerTestBase {
  private AmazonHttpClient httpClient;
  @BeforeClass public static void preConditions(){
    TestPreConditions.assumeNotJava6();
  }
  @Override protected MockServer buildMockServer(){
    return MockServer.createMockServer(ServerBehavior.OVERLOADED);
  }
  @Test(timeout=TEST_TIMEOUT) public void requestTimeoutEnabled_HonorsRetryPolicy() throws IOException {
    int maxRetries=2;
    ClientConfiguration config=new ClientConfiguration().withRequestTimeout(1 * 1000).withMaxErrorRetry(maxRetries);
    HttpClientFactory<ConnectionManagerAwareHttpClient> httpClientFactory=new ApacheHttpClientFactory();
    ConnectionManagerAwareHttpClient rawHttpClient=spy(httpClientFactory.create(HttpClientSettings.adapt(config)));
    httpClient=new AmazonHttpClient(config,rawHttpClient,null);
    try {
      execute(httpClient,newGetRequest());
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(HttpRequestTimeoutException.class));
      int expectedNumberOfRequests=1 + maxRetries;
      assertNumberOfRetries(rawHttpClient,expectedNumberOfRequests);
      assertNumberOfTasksTriggered(httpClient.getHttpRequestTimer(),expectedNumberOfRequests);
    }
  }
}
