public class RequestHandler2AdaptorTest {
  final boolean[] bs=new boolean[3];
  @Test public void testDelegation(){
    for (int i=0; i < bs.length; i++) {
      assertFalse(bs[i]);
    }
    RequestHandler old=createRequestHandler();
    RequestHandler2 v2=new RequestHandler2Adaptor(old);
    v2.beforeRequest(null);
    int i=0;
    assertTrue("beforeRequest is expected to have been invoked",bs[i++]);
    bs[i - 1]=false;
    v2.afterResponse(null,null);
    assertTrue("beforeRequest is expected to have been invoked",bs[i++]);
    bs[i - 1]=false;
    v2.afterError(null,null,null);
    assertTrue("beforeRequest is expected to have been invoked",bs[i++]);
    bs[i - 1]=false;
  }
  @Test public void sameOldButDiffAdapters(){
    RequestHandler old=createRequestHandler();
    RequestHandler2 new1=new RequestHandler2Adaptor(old);
    RequestHandler2 new2=new RequestHandler2Adaptor(old);
    assertNotSame(new1,new2);
    assertEquals(new1,new2);
    assertTrue(new1.hashCode() == new2.hashCode());
  }
  @Test public void diffOldDiffAdapters(){
    RequestHandler old1=createRequestHandler();
    RequestHandler old2=createRequestHandler();
    RequestHandler2 new1=new RequestHandler2Adaptor(old1);
    RequestHandler2 new2=new RequestHandler2Adaptor(old2);
    assertNotSame(new1,new2);
    assertFalse(new1.equals(new2));
    assertFalse(new1.hashCode() == new2.hashCode());
  }
  RequestHandler createRequestHandler(){
    return new RequestHandler(){
      @Override public void beforeRequest(      Request<?> request){
        bs[0]=true;
      }
      @Override public void afterResponse(      Request<?> request,      Object response,      TimingInfo timingInfo){
        bs[1]=true;
      }
      @Override public void afterError(      Request<?> request,      Exception e){
        bs[2]=true;
      }
    }
;
  }
}
