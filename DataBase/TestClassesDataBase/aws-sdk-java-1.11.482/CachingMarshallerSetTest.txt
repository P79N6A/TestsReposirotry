public class CachingMarshallerSetTest {
private static class TestMarshallerSet implements MarshallerSet {
    private final Deque<ArgumentMarshaller> queue=new ArrayDeque<ArgumentMarshaller>();
    private final Deque<ArgumentMarshaller> memberQueue=new ArrayDeque<ArgumentMarshaller>();
    @Override public ArgumentMarshaller getMarshaller(    Method getter){
      return queue.remove();
    }
    @Override public ArgumentMarshaller getMemberMarshaller(    Type memberType){
      return memberQueue.remove();
    }
  }
  private static final TestMarshallerSet mock=new TestMarshallerSet();
  private static final MarshallerSet sut=new CachingMarshallerSet(mock);
  @Test public void testIt() throws Exception {
    ArgumentMarshaller marshaller=new ArgumentMarshaller(){
      @Override public AttributeValue marshall(      Object value){
        return null;
      }
    }
;
    mock.queue.add(marshaller);
    ArgumentMarshaller result=sut.getMarshaller(TestClass.class.getMethod("getString"));
    Assert.assertSame(marshaller,result);
    result=sut.getMarshaller(TestClass.class.getMethod("getString"));
    Assert.assertSame(marshaller,result);
    ArgumentMarshaller marshaller2=new ArgumentMarshaller(){
      @Override public AttributeValue marshall(      Object value){
        return null;
      }
    }
;
    mock.queue.add(marshaller2);
    result=sut.getMarshaller(TestClass.class.getMethod("getInt"));
    Assert.assertSame(marshaller2,result);
  }
}
