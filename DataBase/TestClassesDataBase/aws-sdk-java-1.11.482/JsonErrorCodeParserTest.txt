public class JsonErrorCodeParserTest {
  /** 
 * Value of error type present in headers for tests below
 */
  private static final String HEADER_ERROR_TYPE="headerErrorType";
  /** 
 * Value of error type present in JSON content for tests below
 */
  private static final String JSON_ERROR_TYPE="jsonErrorType";
  private static final String ERROR_FIELD_NAME="testErrorCode";
  private static final ObjectMapper MAPPER=new ObjectMapper();
  private final JsonErrorCodeParser parser=new JsonErrorCodeParser(ERROR_FIELD_NAME);
  @Test public void parseErrorType_ErrorTypeInHeadersTakesPrecedence_NoSuffix(){
    String actualErrorType=parser.parseErrorCode(httpResponseWithHeaders(JsonErrorCodeParser.X_AMZN_ERROR_TYPE,HEADER_ERROR_TYPE),toJsonContent(JSON_ERROR_TYPE));
    assertEquals(HEADER_ERROR_TYPE,actualErrorType);
  }
  @Test public void parseErrorType_ErrorTypeInHeadersTakesPrecedence_SuffixIgnored(){
    String actualErrorType=parser.parseErrorCode(httpResponseWithHeaders(JsonErrorCodeParser.X_AMZN_ERROR_TYPE,String.format("%s:%s",HEADER_ERROR_TYPE,"someSuffix")),toJsonContent(JSON_ERROR_TYPE));
    assertEquals(HEADER_ERROR_TYPE,actualErrorType);
  }
  @Test public void parseErrorType_ErrorTypeInContent_NoPrefix(){
    String actualErrorType=parser.parseErrorCode(httpResponseWithoutHeaders(),toJsonContent(JSON_ERROR_TYPE));
    assertEquals(JSON_ERROR_TYPE,actualErrorType);
  }
  @Test public void parseErrorType_ErrorTypeInContent_PrefixIgnored(){
    String actualErrorType=parser.parseErrorCode(httpResponseWithoutHeaders(),toJsonContent(String.format("%s#%s","somePrefix",JSON_ERROR_TYPE)));
    assertEquals(JSON_ERROR_TYPE,actualErrorType);
  }
  @Test public void parseErrorType_NotPresentInHeadersAndNullContent_ReturnsNull(){
    assertNull(parser.parseErrorCode(httpResponseWithoutHeaders(),null));
  }
  @Test public void parseErrorType_NotPresentInHeadersAndEmptyContent_ReturnsNull(){
    assertNull(parser.parseErrorCode(httpResponseWithoutHeaders(),new JsonContent(null,new ObjectMapper().createObjectNode())));
  }
  private static JsonContent toJsonContent(  String errorType){
    ObjectNode node=MAPPER.createObjectNode();
    node.put(ERROR_FIELD_NAME,errorType);
    return new JsonContent(null,node);
  }
  private static HttpResponse httpResponseWithoutHeaders(){
    return new HttpResponse(null,null);
  }
  private static HttpResponse httpResponseWithHeaders(  String header,  String value){
    HttpResponse response=new HttpResponse(null,null);
    response.addHeader(header,value);
    return response;
  }
}
