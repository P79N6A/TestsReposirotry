/** 
 * Unit test for SdkInternalMap
 */
public class SdkInternalMapTest {
  @Test public void map_equals_returns_true_when_map_contents_are_same(){
    Map<String,String> map1=new HashMap<String,String>();
    map1.put("foo","bar");
    Map<String,String> map2=new HashMap<String,String>();
    map2.put("foo","bar");
    Assert.assertTrue(map1.equals(map2));
    SdkInternalMap<String,String> internalMap=new SdkInternalMap<String,String>(map2);
    Assert.assertTrue(internalMap.equals(map1));
    Assert.assertTrue(map1.equals(internalMap));
    Assert.assertEquals(map1.hashCode(),map2.hashCode());
    Assert.assertEquals(map1.hashCode(),internalMap.hashCode());
  }
  @Test public void internal_map_equals_returns_true_when_map_contents_are_same(){
    Map<String,String> map1=new SdkInternalMap<String,String>();
    map1.put("foo","bar");
    Map<String,String> map2=new SdkInternalMap<String,String>();
    map2.put("foo","bar");
    Assert.assertTrue(map1.equals(map2));
    Assert.assertTrue(map2.equals(map1));
    Assert.assertEquals(map1.hashCode(),map2.hashCode());
  }
  @Test public void internal_map_to_string_returns_value_instead_of_reference(){
    Map<String,String> map1=new SdkInternalMap<String,String>();
    map1.put("foo","bar");
    Assert.assertNotNull(map1.toString());
    Assert.assertThat(map1.toString(),Matchers.containsString("foo"));
  }
}
