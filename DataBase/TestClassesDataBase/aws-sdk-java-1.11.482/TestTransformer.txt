private static class TestTransformer implements AttributeTransformer {
  private final String appendMe;
  public TestTransformer(  final String appendMe){
    this.appendMe=appendMe;
  }
  @Override public Map<String,AttributeValue> transform(  final Parameters<?> parameters){
    Map<String,AttributeValue> rval=new HashMap<String,AttributeValue>();
    for (    Map.Entry<String,AttributeValue> entry : parameters.getAttributeValues().entrySet()) {
      rval.put(entry.getKey(),transform(entry.getValue()));
    }
    return rval;
  }
  @Override public Map<String,AttributeValue> untransform(  final Parameters<?> parameters){
    Map<String,AttributeValue> rval=new HashMap<String,AttributeValue>();
    for (    Map.Entry<String,AttributeValue> entry : parameters.getAttributeValues().entrySet()) {
      rval.put(entry.getKey(),untransform(entry.getValue()));
    }
    return rval;
  }
  private AttributeValue transform(  AttributeValue value){
    return new AttributeValue(value.getS() + appendMe);
  }
  private AttributeValue untransform(  AttributeValue value){
    String s=value.getS();
    if (s.endsWith(appendMe)) {
      return new AttributeValue(s.substring(0,s.length() - appendMe.length()));
    }
 else {
      return value;
    }
  }
}
