public class SystemPropertiesCredentialsProviderTest {
  private final SystemPropertiesCredentialsProvider provider=new SystemPropertiesCredentialsProvider();
  @After public void tearDown(){
    System.clearProperty(ACCESS_KEY_SYSTEM_PROPERTY);
    System.clearProperty(SECRET_KEY_SYSTEM_PROPERTY);
    System.clearProperty(SESSION_TOKEN_SYSTEM_PROPERTY);
  }
  @Test public void accessKeyAndSecretPropertiesSet_ReturnsBasicCredentials(){
    System.setProperty(ACCESS_KEY_SYSTEM_PROPERTY,"akid-value");
    System.setProperty(SECRET_KEY_SYSTEM_PROPERTY,"skid-value");
    final AWSCredentials credentials=provider.getCredentials();
    assertThat(credentials,not(instanceOf(AWSSessionCredentials.class)));
    assertEquals("akid-value",credentials.getAWSAccessKeyId());
    assertEquals("skid-value",credentials.getAWSSecretKey());
  }
  @Test public void sessionTokenSet_ReturnsSessionCredentials(){
    System.setProperty(ACCESS_KEY_SYSTEM_PROPERTY,"akid-value");
    System.setProperty(SECRET_KEY_SYSTEM_PROPERTY,"skid-value");
    System.setProperty(SESSION_TOKEN_SYSTEM_PROPERTY,"session-value");
    final AWSCredentials credentials=provider.getCredentials();
    assertThat(credentials,instanceOf(AWSSessionCredentials.class));
    assertEquals("akid-value",credentials.getAWSAccessKeyId());
    assertEquals("skid-value",credentials.getAWSSecretKey());
    assertEquals("session-value",((AWSSessionCredentials)credentials).getSessionToken());
  }
  @Test(expected=SdkClientException.class) public void noPropertiesSet_ProviderThrowsException(){
    provider.getCredentials();
  }
}
