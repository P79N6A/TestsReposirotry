public class CompositeAcceptorTest {
  @Test(expected=IllegalArgumentException.class) public void nullWaiterAcceptorList(){
    CompositeAcceptor compositeAcceptor=new CompositeAcceptor(null);
  }
  @Test(expected=IllegalArgumentException.class) public void emptyWaiterAcceptorList(){
    List<WaiterAcceptor> waiterAcceptorsList=new ArrayList<WaiterAcceptor>();
    CompositeAcceptor compositeAcceptor=new CompositeAcceptor(waiterAcceptorsList);
  }
  @Test public void responseMatchExpected() throws Exception {
    List<WaiterAcceptor> waiterAcceptorsList=new ArrayList<WaiterAcceptor>();
    waiterAcceptorsList.add(new TestExceptionAcceptor());
    waiterAcceptorsList.add(new TestResultAcceptor());
    CompositeAcceptor compositeAcceptor=new CompositeAcceptor(waiterAcceptorsList);
    Assert.assertEquals("Response output doesn't match expected output.",WaiterState.SUCCESS,compositeAcceptor.accepts(new DescribeTableResult()));
  }
  @Test public void responseNotMatchExpected() throws Exception {
    List<WaiterAcceptor> waiterAcceptorsList=new ArrayList<WaiterAcceptor>();
    waiterAcceptorsList.add(new TestExceptionAcceptor());
    CompositeAcceptor compositeAcceptor=new CompositeAcceptor(waiterAcceptorsList);
    Assert.assertEquals("Response output doesn't match expected output.",WaiterState.RETRY,compositeAcceptor.accepts(new DescribeTableResult()));
  }
  @Test(expected=AmazonServiceException.class) public void exceptionNotMatchExpected() throws Exception {
    List<WaiterAcceptor> waiterAcceptorsList=new ArrayList<WaiterAcceptor>();
    waiterAcceptorsList.add(new TestResultAcceptor());
    CompositeAcceptor compositeAcceptor=new CompositeAcceptor(waiterAcceptorsList);
    Assert.assertEquals("Exception thrown doesn't match expected exception.",WaiterState.RETRY,compositeAcceptor.accepts(new AmazonServiceException("")));
  }
  @Test public void exceptionMatchExpected() throws Exception {
    List<WaiterAcceptor> waiterAcceptorsList=new ArrayList<WaiterAcceptor>();
    waiterAcceptorsList.add(new TestResultAcceptor());
    waiterAcceptorsList.add(new TestExceptionAcceptor());
    CompositeAcceptor compositeAcceptor=new CompositeAcceptor(waiterAcceptorsList);
    Assert.assertEquals("Exception thrown doesn't match expected exception.",WaiterState.RETRY,compositeAcceptor.accepts(new ResourceNotFoundException("")));
  }
class DescribeTableResult {
    private String tableName;
  }
class TestResultAcceptor extends WaiterAcceptor<DescribeTableResult> {
    public boolean matches(    DescribeTableResult result){
      return true;
    }
    public WaiterState getState(){
      return WaiterState.SUCCESS;
    }
  }
class TestExceptionAcceptor extends WaiterAcceptor<DescribeTableResult> {
    public boolean matches(    AmazonServiceException e){
      return e instanceof ResourceNotFoundException;
    }
    public WaiterState getState(){
      return WaiterState.RETRY;
    }
  }
static class ResourceNotFoundException extends AmazonServiceException {
    public ResourceNotFoundException(    String message){
      super(message);
    }
  }
}
