/** 
 * Sample code to perform batch get items from DynamoDB.
 */
public class H_BatchGetItemTest extends AbstractQuickStart {
  @Before public void before() throws InterruptedException {
    new B_PutItemTest().howToPutItems();
    F_UpdateItemTest.setupData(dynamo);
  }
  @Test public void howToBatchGet_FromOneTable(){
    TableKeysAndAttributes tableKeysAndAttributes=new TableKeysAndAttributes(TABLE_NAME).withAttrbuteNames("binary","booleanTrue","intAttr","mapAttr","stringSetAttr").addHashAndRangePrimaryKeys(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",1,"foo",2,"foo",3).addHashAndRangePrimaryKey(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,4).addHashAndRangePrimaryKey(HASH_KEY_NAME,"foo",RANGE_KEY_NAME,5);
    BatchGetItemOutcome outcome=dynamo.batchGetItem(ReturnConsumedCapacity.TOTAL,tableKeysAndAttributes);
    Map<String,List<Item>> tableItems=outcome.getTableItems();
    Assert.assertTrue(tableItems.size() == 1);
    for (    Map.Entry<String,List<Item>> e : tableItems.entrySet()) {
      System.out.println("tableName: " + e.getKey());
      for (      Item item : e.getValue()) {
        System.out.println("item: " + item);
      }
      Assert.assertTrue(e.getValue().size() == 5);
    }
  }
  @Test public void howToUse_ProjectionExpression(){
    TableKeysAndAttributes tableKeysAndAttributes=new TableKeysAndAttributes(TABLE_NAME).withProjectionExpression(HASH_KEY_NAME + ", " + RANGE_KEY_NAME+ ", "+ "#binary, booleanTrue, intAttr, mapAttr, stringSetAttr").withNameMap(new NameMap().with("#binary","binary")).addHashAndRangePrimaryKeys(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",2,"foo",3,"foo",4,"foo",5);
    BatchGetItemOutcome outcome=dynamo.batchGetItem(ReturnConsumedCapacity.TOTAL,tableKeysAndAttributes);
    Map<String,List<Item>> tableItems=outcome.getTableItems();
    Assert.assertTrue(tableItems.size() == 1);
    for (    Map.Entry<String,List<Item>> e : tableItems.entrySet()) {
      System.out.println("tableName: " + e.getKey());
      for (      Item item : e.getValue()) {
        System.out.println("item: " + item);
      }
      Assert.assertTrue(e.getValue().size() == 4);
    }
  }
  @Test public void howToBatchGet_FromMultipleTables(){
    BatchGetItemOutcome outcome=dynamo.batchGetItem(new TableKeysAndAttributes(TABLE_NAME).withAttrbuteNames("binary","booleanTrue","intAttr","mapAttr","stringSetAttr").addHashAndRangePrimaryKeys(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",1,"foo",2,"foo",3),new TableKeysAndAttributes(F_UpdateItemTest.TABLE_NAME).withAttrbuteNames(F_UpdateItemTest.HASH_KEY,F_UpdateItemTest.RANGE_KEY,"AddressLine1","city","state","zipcode","phone").addHashAndRangePrimaryKeys(F_UpdateItemTest.HASH_KEY,F_UpdateItemTest.RANGE_KEY,F_UpdateItemTest.FIRST_CUSTOMER_ID,F_UpdateItemTest.ADDRESS_TYPE_HOME,F_UpdateItemTest.FIRST_CUSTOMER_ID,F_UpdateItemTest.ADDRESS_TYPE_WORK));
    Map<String,List<Item>> tableItems=outcome.getTableItems();
    Assert.assertTrue(tableItems.size() == 2);
    for (    Map.Entry<String,List<Item>> e : tableItems.entrySet()) {
      String tableName=e.getKey();
      System.out.println("tableName: " + tableName);
      for (      Item item : e.getValue()) {
        System.out.println("item: " + item);
      }
      if (tableName.equals(TABLE_NAME))       Assert.assertTrue(e.getValue().size() == 3);
 else       Assert.assertTrue(e.getValue().size() == 2);
    }
  }
  @Test public void howToHandle_UnprocessedKeys() throws InterruptedException {
    TableKeysAndAttributes tableKeysAndAttributes=new TableKeysAndAttributes(TABLE_NAME).withAttrbuteNames("binary","booleanTrue","intAttr","mapAttr","stringSetAttr").addHashAndRangePrimaryKeys(HASH_KEY_NAME,RANGE_KEY_NAME,"foo",1,"foo",2,"foo",3,"foo",4,"foo",5);
    int attempts=0;
    Map<String,KeysAndAttributes> unprocessed=null;
    do {
      if (attempts > 0) {
        Thread.sleep((1 << attempts) * 1000);
      }
      BatchGetItemOutcome outcome;
      if (unprocessed == null || unprocessed.size() > 0) {
        outcome=dynamo.batchGetItem(tableKeysAndAttributes);
      }
 else {
        outcome=dynamo.batchGetItemUnprocessed(unprocessed);
      }
      Map<String,List<Item>> tableItems=outcome.getTableItems();
      for (      Map.Entry<String,List<Item>> e : tableItems.entrySet()) {
        System.out.println("tableName: " + e.getKey());
        for (        Item item : e.getValue()) {
          System.out.println("item: " + item);
        }
        Assert.assertTrue(e.getValue().size() == 5);
      }
      unprocessed=outcome.getUnprocessedKeys();
      System.out.println("unprocessed: " + unprocessed);
    }
 while (unprocessed.size() > 0);
  }
}
