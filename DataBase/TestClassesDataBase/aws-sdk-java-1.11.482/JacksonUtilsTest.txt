public class JacksonUtilsTest {
  private static final ObjectMapper MAPPER=new ObjectMapper();
  @Test public void jsonToString_NullNode_ReturnsNull(){
    assertNull(jsonToString(null));
  }
  @Test public void jsonToString_NonNullNode_ReturnsJson() throws IOException {
    String json="{\"foo\": \"bar\"}";
    assertJsonEquals(json,jsonToString(MAPPER.readTree(json)));
  }
  @Test(expected=SdkClientException.class) public void invalidJsonNode_ThrowsException() throws IOException {
    JsonNode mock=Mockito.mock(JsonNode.class);
    Mockito.doThrow(new JsonMappingException("BOOM")).when(mock).serialize(any(JsonGenerator.class),any(SerializerProvider.class));
    jsonToString(mock);
  }
  @Test public void stringToJsonNode_NullString_ReturnsNull(){
    assertNull(stringToJsonNode("Param",null));
  }
  @Test public void stringToJsonNode_ValidJson_ReturnsJsonNode() throws JsonProcessingException {
    String json="[1, 2, 3]";
    JsonNode actual=stringToJsonNode("Param",json);
    assertJsonEquals(json,MAPPER.writeValueAsString(actual));
  }
  @Test(expected=SdkClientException.class) public void stringToJsonNode_InvalidJson_ThrowsException() throws JsonProcessingException {
    stringToJsonNode("Param","{");
  }
  @Test public void objectToJsonNode_ReturnsJsonNode() throws JsonProcessingException {
    JsonNode actual=objectToJsonNode(new SimplePojo("value"));
    assertJsonEquals("{\"foo\": \"value\"}",MAPPER.writeValueAsString(actual));
  }
}
