public class StepFunctionBuilderIntegrationTest extends AWSIntegrationTestBase {
  /** 
 * Dummy date so we have a fixed time for comparison.
 */
  private static final Date THE_FUTURE=new Date(4118625810000L);
  private static final String STATE_MACHINE_NAME="java-sdk-integ-" + System.currentTimeMillis();
  private AWSStepFunctions client;
  private String stateMachineArn;
  private String roleArn;
  @Before public void setup(){
    AWSStaticCredentialsProvider credentialsProvider=new AWSStaticCredentialsProvider(getCredentials());
    client=AWSStepFunctionsClient.builder().withCredentials(credentialsProvider).build();
    AmazonIdentityManagement iam=AmazonIdentityManagementClient.builder().withCredentials(credentialsProvider).build();
    roleArn=iam.listRoles().getRoles().get(0).getArn();
  }
  @After public void tearDown(){
    client.deleteStateMachine(new DeleteStateMachineRequest().withStateMachineArn(stateMachineArn));
  }
  @Test public void rountripStateMachine(){
    StateMachine stateMachine=stateMachine().state("ParallelState",testParallelState()).state("WaitForTimestamp",testWaitForTimestamp()).state("WaitForTimestampPath",testWaitForTimestampPath()).state("WaitForSeconds",testWaitForSeconds()).state("WaitForSecondsPath",testWaitForSecondsPath()).state("ChoiceState",testChoiceState()).state("FailState",testFailState()).state("PassState",passState().transition(next("EndState"))).state("EndState",succeedState()).startAt("ParallelState").build();
    CreateStateMachineResult createResult=client.createStateMachine(new CreateStateMachineRequest().withName(STATE_MACHINE_NAME).withRoleArn(roleArn).withDefinition(stateMachine));
    stateMachineArn=createResult.getStateMachineArn();
    DescribeStateMachineResult describeResult=client.describeStateMachine(new DescribeStateMachineRequest().withStateMachineArn(stateMachineArn));
    StatesAsserts.assertStateMachineMatches("IntegrationTestStateMachine.json",stateMachine);
    StatesAsserts.assertStateMachineMatches("IntegrationTestStateMachine.json",StateMachine.fromJson(describeResult.getDefinition()).build());
  }
  private ParallelState.Builder testParallelState(){
    return parallelState().parameters("\"foo\"").resultPath("$.parallel.result").inputPath("$.parallel.input").outputPath("$.parallel.output").transition(next("WaitForTimestamp")).catcher(catcher().transition(next("EndState")).resultPath("$.catcher.result").catchAll()).retrier(retrier().retryOnAllErrors().backoffRate(1.2).maxAttempts(3).intervalSeconds(5)).comment("This is a parallel state").branch(branch().comment("Branch One").state("BranchOneStart",succeedState().inputPath("$.succeed.input").outputPath("$.succeed.output").comment("Succeed state")).startAt("BranchOneStart")).branch(branch().comment("Branch Two").state("BranchTwoStart",passState().inputPath("$.pass.input").outputPath("$.pass.output").parameters("{\"foo\": \"bar\"}").result(new SimplePojo("value")).transition(next("BranchTwoEnd")).comment("Pass state")).state("BranchTwoEnd",passState().transition(end()).comment("This is the final state of branch two")).startAt("BranchTwoStart"));
  }
  private WaitState.Builder testWaitForTimestamp(){
    return waitState().waitFor(timestamp(THE_FUTURE)).transition(next("WaitForTimestampPath")).inputPath("$.wait.input").outputPath("$.wait.output").comment("Wait for timestamp");
  }
  private WaitState.Builder testWaitForTimestampPath(){
    return waitState().waitFor(timestampPath("$.timestamp")).transition(next("WaitForSeconds"));
  }
  private WaitState.Builder testWaitForSeconds(){
    return waitState().waitFor(seconds(60)).transition(next("WaitForSecondsPath"));
  }
  private WaitState.Builder testWaitForSecondsPath(){
    return waitState().waitFor(secondsPath("$.seconds")).transition(next("ChoiceState"));
  }
  private ChoiceState.Builder testChoiceState(){
    return choiceState().defaultStateName("EndState").inputPath("$.choice.input").outputPath("$.choice.output").comment("This is a choice state").choice(choice().condition(eq("$.foo","bar")).transition(next("FailState"))).choice(choice().condition(gte("$.bar",42)).transition(next("PassState")));
  }
  private FailState.Builder testFailState(){
    return failState().error("FooError").cause("Some Cause").comment("This is a fail state");
  }
}
