public class AwsSdkMetricsTest {
  /** 
 * By default the AWS SDK metric collection is disabled. Enabling it should fail unless the necessary CloudWatch related jars are on the classpath. Therefore, this test is expected to fail in enabling the default metric collection, but have absolutely no impact otherwise.
 */
  @Test public void enableDefaultMetrics(){
    Assert.assertFalse(AwsSdkMetrics.enableDefaultMetrics());
  }
  @Test public void test(){
    assertFalse(AwsSdkMetrics.isDefaultMetricsEnabled());
    assertFalse(AwsSdkMetrics.enableDefaultMetrics());
    assertFalse(AwsSdkMetrics.isDefaultMetricsEnabled());
    assertSame(RequestMetricCollector.NONE,AwsSdkMetrics.getRequestMetricCollector());
    assertFalse(AwsSdkMetrics.isDefaultMetricsEnabled());
    AwsSdkMetrics.disableMetrics();
    assertFalse(AwsSdkMetrics.isDefaultMetricsEnabled());
  }
  @Test public void defaultMetricTypes(){
    Set<MetricType> set=AwsSdkMetrics.getPredefinedMetrics();
    assertNotNull(set);
    assertTrue(set.size() > 0);
    AwsSdkMetrics.set(Collections.<MetricType>emptyList());
    Set<MetricType> empty=AwsSdkMetrics.getPredefinedMetrics();
    assertNotNull(empty);
    assertTrue(empty.size() == 0);
    AwsSdkMetrics.set(set);
    Set<MetricType> set2=AwsSdkMetrics.getPredefinedMetrics();
    assertNotNull(set2);
    assertTrue(set2.size() > 0);
    assertNotSame(set,set2);
  }
  @Test public void setNullOrEmpty(){
    Set<MetricType> orig=AwsSdkMetrics.getPredefinedMetrics();
    assertTrue(orig.size() > 0);
    AwsSdkMetrics.set(null);
    Set<MetricType> empty=AwsSdkMetrics.getPredefinedMetrics();
    assertTrue(empty.size() == 0);
    AwsSdkMetrics.set(null);
    Set<MetricType> stillEmpty=AwsSdkMetrics.getPredefinedMetrics();
    assertSame(empty,stillEmpty);
    AwsSdkMetrics.set(Collections.<MetricType>emptySet());
    Set<MetricType> empty3=AwsSdkMetrics.getPredefinedMetrics();
    assertSame(empty,empty3);
    AwsSdkMetrics.set(orig);
  }
  @Test public void addNull(){
    assertFalse(AwsSdkMetrics.add(null));
  }
  @Test public void addAllNull(){
    assertFalse(AwsSdkMetrics.addAll(null));
    assertFalse(AwsSdkMetrics.addAll(Collections.<MetricType>emptyList()));
  }
  @Test public void removeNull(){
    assertFalse(AwsSdkMetrics.remove(null));
  }
  @Test public void addAndRemove(){
    Set<MetricType> orig=AwsSdkMetrics.getPredefinedMetrics();
    AwsSdkMetrics.set(null);
    assertTrue(AwsSdkMetrics.getPredefinedMetrics().isEmpty());
    AwsSdkMetrics.add(Field.ClientExecuteTime);
    assertFalse(AwsSdkMetrics.getPredefinedMetrics().isEmpty());
    AwsSdkMetrics.remove(Field.ClientExecuteTime);
    assertTrue(AwsSdkMetrics.getPredefinedMetrics().isEmpty());
    AwsSdkMetrics.add(Field.ClientExecuteTime);
    AwsSdkMetrics.add(Field.Exception);
    assertTrue(AwsSdkMetrics.getPredefinedMetrics().size() == 2);
    AwsSdkMetrics.set(null);
    assertTrue(AwsSdkMetrics.getPredefinedMetrics().isEmpty());
    AwsSdkMetrics.addAll(Arrays.asList(Field.Exception,Field.ClientExecuteTime));
    assertTrue(AwsSdkMetrics.getPredefinedMetrics().size() == 2);
    AwsSdkMetrics.set(orig);
    assertTrue(AwsSdkMetrics.getPredefinedMetrics().size() == orig.size());
  }
  @Test public void setJvmMetricsExcluded(){
    final boolean b=AwsSdkMetrics.isMachineMetricExcluded();
    AwsSdkMetrics.setMachineMetricsExcluded(b);
    assertTrue(b == AwsSdkMetrics.isMachineMetricExcluded());
    AwsSdkMetrics.setMachineMetricsExcluded(!b);
    assertFalse(b == AwsSdkMetrics.isMachineMetricExcluded());
    AwsSdkMetrics.setMachineMetricsExcluded(b);
    assertTrue(b == AwsSdkMetrics.isMachineMetricExcluded());
  }
  @Test public void setPerHostMetricsIncluded(){
    final boolean b=AwsSdkMetrics.isPerHostMetricIncluded();
    AwsSdkMetrics.setPerHostMetricsIncluded(b);
    assertTrue(b == AwsSdkMetrics.isPerHostMetricIncluded());
    AwsSdkMetrics.setPerHostMetricsIncluded(!b);
    assertFalse(b == AwsSdkMetrics.isPerHostMetricIncluded());
    AwsSdkMetrics.setPerHostMetricsIncluded(b);
    assertTrue(b == AwsSdkMetrics.isPerHostMetricIncluded());
  }
  @Test public void testEnableHttpSocketReadMetric(){
    assertFalse(AwsSdkMetrics.isHttpSocketReadMetricEnabled());
    AwsSdkMetrics.enableHttpSocketReadMetric();
    assertTrue(AwsSdkMetrics.isHttpSocketReadMetricEnabled());
  }
  @Test public void isMetricEnabled(){
    assertFalse(AwsSdkMetrics.isMetricsEnabled());
    AwsSdkMetrics.setMetricCollector(MetricCollector.NONE);
    assertFalse(AwsSdkMetrics.isMetricsEnabled());
    AwsSdkMetrics.setMetricCollector(new MetricCollector(){
      @Override public boolean start(){
        return true;
      }
      @Override public boolean stop(){
        return false;
      }
      @Override public boolean isEnabled(){
        return true;
      }
      @Override public RequestMetricCollector getRequestMetricCollector(){
        return RequestMetricCollector.NONE;
      }
      @Override public ServiceMetricCollector getServiceMetricCollector(){
        return ServiceMetricCollector.NONE;
      }
    }
);
    assertTrue(AwsSdkMetrics.isMetricsEnabled());
  }
  @Test public void setRegion_WithoutRegionsEnum(){
    AwsSdkMetrics.setRegion("us-east-1");
    assertTrue(AwsSdkMetrics.getRegionName().equals("us-east-1"));
  }
  @Test public void setRegion_WithNonStandardRegion(){
    AwsSdkMetrics.setRegion("us-east-9");
    assertTrue(AwsSdkMetrics.getRegionName().equals("us-east-9"));
  }
  @Test public void setRegions_WhenRegionDoesNotExist_DefaultsToAwsPartition(){
    AwsSdkMetrics.setRegion("non-existent-region");
    assertEquals("non-existent-region",AwsSdkMetrics.getRegionName());
  }
}
