public class UnresponsiveServerIntegrationTests extends UnresponsiveMockServerTestBase {
  private static final int LONGER_SOCKET_TIMEOUT=CLIENT_EXECUTION_TIMEOUT * PRECISION_MULTIPLIER;
  private static final int SHORTER_SOCKET_TIMEOUT=CLIENT_EXECUTION_TIMEOUT / PRECISION_MULTIPLIER;
  private static final int LONGER_REQUEST_TIMEOUT=CLIENT_EXECUTION_TIMEOUT * PRECISION_MULTIPLIER;
  private static final int SHORTER_REQUEST_TIMEOUT=CLIENT_EXECUTION_TIMEOUT / PRECISION_MULTIPLIER;
  private AmazonHttpClient httpClient;
  @BeforeClass public static void preConditions(){
    TestPreConditions.assumeNotJava6();
  }
  @Test(timeout=TEST_TIMEOUT) public void clientExecutionTimeoutDisabled_SocketTimeoutExceptionIsThrown_NoThreadsCreated(){
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(1 * 1000).withMaxErrorRetry(0));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(SocketTimeoutException.class));
      assertClientExecutionTimerExecutorNotCreated(httpClient.getClientExecutionTimer());
    }
  }
  /** 
 * The client execution timer uses interrupts to abort the client but if another thread interrupts the current thread for another reason we don't want to squash the {@link InterruptedException}. We should set the thread's interrupted status and throw the exception back out (we can't throw the actual  {@link InterruptedException} because it'schecked)
 */
  @Test(timeout=TEST_TIMEOUT) public void interruptCausedBySomethingOtherThanTimer_PropagatesInterruptToCaller(){
    final int socketTimeoutInMillis=100;
    httpClient=new AmazonHttpClient(new ClientConfiguration().withSocketTimeout(socketTimeoutInMillis).withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT).withRetryPolicy(new RetryPolicy(PredefinedRetryPolicies.DEFAULT_RETRY_CONDITION,new FixedTimeBackoffStrategy(CLIENT_EXECUTION_TIMEOUT),1,false)));
    interruptCurrentThreadAfterDelay(socketTimeoutInMillis * 2);
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertTrue(Thread.currentThread().isInterrupted());
      assertThat(e.getCause(),instanceOf(InterruptedException.class));
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void clientExecutionTimeoutEnabled_WithLongerSocketTimeout_ThrowsClientExecutionTimeoutException() throws IOException {
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT).withSocketTimeout(LONGER_SOCKET_TIMEOUT).withMaxErrorRetry(0));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e,instanceOf(ClientExecutionTimeoutException.class));
      assertNumberOfTasksTriggered(httpClient.getClientExecutionTimer(),1);
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void clientExecutionTimeoutEnabled_WithShorterSocketTimeout_ThrowsSocketTimeoutException() throws IOException {
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT).withSocketTimeout(SHORTER_SOCKET_TIMEOUT).withMaxErrorRetry(0));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(SocketTimeoutException.class));
      assertNumberOfTasksTriggered(httpClient.getClientExecutionTimer(),0);
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void clientExecutionTimeoutEnabled_WithShorterClientExecutionTimeout_ThrowsClientExecutionTimeoutException() throws IOException {
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT).withRequestTimeout(LONGER_REQUEST_TIMEOUT).withMaxErrorRetry(0));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e,instanceOf(ClientExecutionTimeoutException.class));
      assertNumberOfTasksTriggered(httpClient.getClientExecutionTimer(),1);
      assertNumberOfTasksTriggered(httpClient.getHttpRequestTimer(),0);
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void clientExecutionTimeoutEnabled_WithShorterRequestTimeout_ThrowsHttpRequestTimeoutException() throws IOException {
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT).withRequestTimeout(SHORTER_REQUEST_TIMEOUT).withMaxErrorRetry(0));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e.getCause(),instanceOf(HttpRequestTimeoutException.class));
      assertNumberOfTasksTriggered(httpClient.getClientExecutionTimer(),0);
      assertNumberOfTasksTriggered(httpClient.getHttpRequestTimer(),1);
    }
  }
  @Test(timeout=TEST_TIMEOUT) public void clientExecutionTimeoutEnabled_WithShorterRequestTimeoutAndRetry_ThrowsClientExecutionTimeoutException() throws IOException {
    final int clientExecutionTimeout=1500;
    final int requestTimeout=1000;
    final int backoffTime=300;
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(clientExecutionTimeout).withRequestTimeout(requestTimeout).withRetryPolicy(new RetryPolicy(PredefinedRetryPolicies.DEFAULT_RETRY_CONDITION,new FixedTimeBackoffStrategy(backoffTime),Integer.MAX_VALUE,false)));
    try {
      httpClient.requestExecutionBuilder().request(newGetRequest()).execute();
      fail("Exception expected");
    }
 catch (    AmazonClientException e) {
      assertThat(e,instanceOf(ClientExecutionTimeoutException.class));
      assertNumberOfTasksTriggered(httpClient.getClientExecutionTimer(),1);
      assertNumberOfTasksTriggered(httpClient.getHttpRequestTimer(),1);
    }
  }
}
