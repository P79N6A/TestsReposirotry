/** 
 * This test demonstrates why we should call mark(Integer.MAX_VALUE) instead of mark(-1).
 */
public class BufferedInputStreamResetTest {
  @Test public void testNeatives() throws IOException {
    testNegative(-1);
    testNegative(19);
  }
  private void testNegative(  final int readLimit) throws IOException {
    byte[] bytes=new byte[100];
    for (int i=0; i < bytes.length; i++)     bytes[i]=(byte)i;
    BufferedInputStream bis=new BufferedInputStream(new ByteArrayInputStream(bytes),10);
    bis.skip(10);
    bis.mark(readLimit);
    bis.read(new byte[20]);
    try {
      bis.reset();
      fail();
    }
 catch (    IOException ex) {
      assertEquals("Resetting to invalid mark",ex.getMessage());
    }
  }
  @Test public void testPositives() throws IOException {
    testPositive(20);
    testPositive(Integer.MAX_VALUE);
  }
  private void testPositive(  final int readLimit) throws IOException {
    byte[] bytes=new byte[100];
    for (int i=0; i < bytes.length; i++)     bytes[i]=(byte)i;
    BufferedInputStream bis=new BufferedInputStream(new ByteArrayInputStream(bytes),10);
    bis.skip(10);
    bis.mark(readLimit);
    bis.read(new byte[20]);
    bis.reset();
    assert (bis.read() == 10);
  }
}
