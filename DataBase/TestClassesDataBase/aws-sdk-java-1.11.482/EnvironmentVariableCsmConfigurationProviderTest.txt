/** 
 * Tests for  {@link EnvironmentVariableCsmConfigurationProvider}.
 */
public class EnvironmentVariableCsmConfigurationProviderTest {
  private static final EnvironmentVariableHelper environmentVariableHelper=new EnvironmentVariableHelper();
  private final EnvironmentVariableCsmConfigurationProvider provider=new EnvironmentVariableCsmConfigurationProvider();
  @Before public void testSetup(){
    environmentVariableHelper.set(AWS_CSM_ENABLED_ENV_VAR,"");
    environmentVariableHelper.set(AWS_CSM_PORT_ENV_VAR,"");
    environmentVariableHelper.set(AWS_CSM_CLIENT_ID_ENV_VAR,"");
  }
  @AfterClass public static void cleanup(){
    environmentVariableHelper.reset();
  }
  @Test public void testCorrectlyResolvesConfiguration(){
    environmentVariableHelper.set(AWS_CSM_ENABLED_ENV_VAR,"true");
    environmentVariableHelper.set(AWS_CSM_PORT_ENV_VAR,"1234");
    environmentVariableHelper.set(AWS_CSM_CLIENT_ID_ENV_VAR,"foo");
    CsmConfiguration cfg=provider.getConfiguration();
    assertEquals(new CsmConfiguration(true,1234,"foo"),cfg);
  }
  @Test(expected=SdkClientException.class) public void testThrowsSdkClientExceptionWhenVariablesNotPresent(){
    provider.getConfiguration();
  }
  @Test(expected=SdkClientException.class) public void testThrowsSdkClientExceptionWhenPortCannotBeParsed(){
    environmentVariableHelper.set(AWS_CSM_ENABLED_ENV_VAR,"true");
    environmentVariableHelper.set(AWS_CSM_PORT_ENV_VAR,"onetwothreefour");
    environmentVariableHelper.set(AWS_CSM_CLIENT_ID_ENV_VAR,"foo");
    provider.getConfiguration();
  }
  @Test public void noPortClientIdSpecified_shouldUseDefaultValues(){
    environmentVariableHelper.reset();
    environmentVariableHelper.set(AWS_CSM_ENABLED_ENV_VAR,"true");
    CsmConfiguration configuration=provider.getConfiguration();
    assertEquals(DEFAULT_AWS_CSM_PORT,configuration.getPort());
  }
}
