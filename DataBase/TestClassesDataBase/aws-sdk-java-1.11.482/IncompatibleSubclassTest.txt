/** 
 * Verify that we fail fast in case of incompatible subclasses that try to override the (now-removed) transformAttributes method.
 */
public class IncompatibleSubclassTest {
  @Test public void testCompatibleSubclass(){
    new CompatibleDynamoDBMapper();
  }
  @Test(expected=IllegalStateException.class) public void testIncompatibleSubclass1(){
    new IncompatibleDynamoDBMapper1();
  }
  @Test(expected=IllegalStateException.class) public void testIncompatibleSubclass2(){
    new IncompatibleDynamoDBMapper2();
  }
private static class CompatibleDynamoDBMapper extends DynamoDBMapper {
    public CompatibleDynamoDBMapper(){
      super(null);
    }
    protected void transformAttributes(    boolean innocuous){
    }
  }
private static class IncompatibleDynamoDBMapper1 extends DynamoDBMapper {
    public IncompatibleDynamoDBMapper1(){
      super(null);
    }
    protected Map<String,AttributeValue> transformAttributes(    Class<?> clazz,    Map<String,AttributeValue> attributeValues){
      return null;
    }
  }
private static class IncompatibleDynamoDBMapper2 extends DynamoDBMapper {
    public IncompatibleDynamoDBMapper2(){
      super(null);
    }
    protected Map<String,AttributeValue> transformAttributes(    String hashKey,    String rangeKey,    Map<String,AttributeValue> attributeValues){
      return null;
    }
  }
}
