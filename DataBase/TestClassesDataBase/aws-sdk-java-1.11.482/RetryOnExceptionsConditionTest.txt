public class RetryOnExceptionsConditionTest {
  private RetryCondition condition=new RetryOnExceptionsCondition(Arrays.asList(RetryableServiceException.class,RetryableClientException.class,SocketTimeoutException.class));
  @Test public void noExceptionInContext_ReturnsFalse(){
    assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(null)));
  }
  @Test public void retryableServiceException_ReturnsTrue(){
    assertTrue(condition.shouldRetry(RetryPolicyContexts.withException(new RetryableServiceException())));
  }
  @Test public void nonRetryableServiceException_ReturnsFalse(){
    assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(new NonRetryableServiceException())));
  }
  @Test public void retryableClientException_ReturnsTrue(){
    assertTrue(condition.shouldRetry(RetryPolicyContexts.withException(new RetryableClientException())));
  }
  @Test public void nonRetryableClientException_ReturnsFalse(){
    assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(new NonRetryableClientException())));
  }
  @Test public void retryableWrappedClientException_ReturnsTrue(){
    assertTrue(condition.shouldRetry(RetryPolicyContexts.withException(new SdkClientException(new SocketTimeoutException("foo")))));
  }
  @Test public void nonRetryableWrappedClientException_ReturnsFalse(){
    assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(new SdkClientException(new ConnectException("foo")))));
  }
  @Test public void genericClientException_ReturnsFalse(){
    assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(new SdkClientException("foo"))));
  }
  @Test public void genericBaseException_ReturnsFalse(){
    assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(new SdkBaseException("foo"))));
  }
  @Test public void noRetryableExceptions_ReturnsFalse(){
    final RetryCondition noExceptionsCondition=new RetryOnExceptionsCondition(Collections.<Class<? extends Exception>>emptyList());
    assertFalse(noExceptionsCondition.shouldRetry(RetryPolicyContexts.withException(new RetryableServiceException())));
  }
  @Test(expected=IllegalArgumentException.class) public void nullList_ThrowsException(){
    new RetryOnExceptionsCondition(null);
  }
private static class RetryableServiceException extends SdkBaseException {
    public RetryableServiceException(){
      super("My service exception");
    }
  }
private static class NonRetryableServiceException extends SdkBaseException {
    public NonRetryableServiceException(){
      super("My service exception");
    }
  }
private static class RetryableClientException extends SdkClientException {
    public RetryableClientException(){
      super("My client exception");
    }
  }
private class NonRetryableClientException extends SdkClientException {
    public NonRetryableClientException(){
      super("My client exception");
    }
  }
}
