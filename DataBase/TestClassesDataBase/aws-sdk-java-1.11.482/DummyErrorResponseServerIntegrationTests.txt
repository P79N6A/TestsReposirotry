/** 
 * Tests that use a server that returns a predetermined error response within the timeout limit
 */
public class DummyErrorResponseServerIntegrationTests extends MockServerTestBase {
  private static final int STATUS_CODE=500;
  private AmazonHttpClient httpClient;
  @BeforeClass public static void preConditions(){
    TestPreConditions.assumeNotJava6();
  }
  @Override protected MockServer buildMockServer(){
    return new MockServer(MockServer.DummyResponseServerBehavior.build(STATUS_CODE,"Internal Server Failure","Dummy response"));
  }
  @Test(timeout=TEST_TIMEOUT,expected=ClientExecutionTimeoutException.class) public void clientExecutionTimeoutEnabled_SlowErrorResponseHandler_ThrowsClientExecutionTimeoutException() throws Exception {
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT));
    httpClient.requestExecutionBuilder().request(newGetRequest()).errorResponseHandler(new UnresponsiveErrorResponseHandler()).execute();
  }
  @Test(timeout=TEST_TIMEOUT,expected=ClientExecutionTimeoutException.class) public void clientExecutionTimeoutEnabled_SlowAfterErrorRequestHandler_ThrowsClientExecutionTimeoutException() throws Exception {
    httpClient=new AmazonHttpClient(new ClientConfiguration().withClientExecutionTimeout(CLIENT_EXECUTION_TIMEOUT));
    List<RequestHandler2> requestHandlers=RequestHandlerTestUtils.buildRequestHandlerList(new SlowRequestHandler().withAfterErrorWaitInSeconds(SLOW_REQUEST_HANDLER_TIMEOUT));
    httpClient.requestExecutionBuilder().request(newGetRequest()).errorResponseHandler(new NullErrorResponseHandler()).executionContext(ExecutionContext.builder().withRequestHandler2s(requestHandlers).build()).execute();
  }
}
