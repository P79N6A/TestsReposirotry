public class CachingUnmarshallerSetTest {
private static class TestUnmarshallerSet implements UnmarshallerSet {
    private final Deque<ArgumentUnmarshaller> queue=new ArrayDeque<ArgumentUnmarshaller>();
    private final Deque<ArgumentUnmarshaller> memberQueue=new ArrayDeque<ArgumentUnmarshaller>();
    @Override public ArgumentUnmarshaller getUnmarshaller(    Method getter,    Method setter){
      return queue.remove();
    }
    @Override public ArgumentUnmarshaller getMemberUnmarshaller(    Type type){
      return memberQueue.remove();
    }
  }
  private static final TestUnmarshallerSet mock=new TestUnmarshallerSet();
  private static final UnmarshallerSet sut=new CachingUnmarshallerSet(mock);
  @Test public void testIt() throws Exception {
    ArgumentUnmarshaller unmarshaller=new ArgumentUnmarshaller(){
      @Override public void typeCheck(      AttributeValue value,      Method setter){
      }
      @Override public Object unmarshall(      AttributeValue value){
        return null;
      }
    }
;
    mock.queue.add(unmarshaller);
    ArgumentUnmarshaller result=sut.getUnmarshaller(TestClass.class.getMethod("getString"),TestClass.class.getMethod("setString",String.class));
    Assert.assertSame(unmarshaller,result);
    result=sut.getUnmarshaller(TestClass.class.getMethod("getString"),TestClass.class.getMethod("setString",String.class));
    Assert.assertSame(unmarshaller,result);
    ArgumentUnmarshaller unmarshaller2=new ArgumentUnmarshaller(){
      @Override public void typeCheck(      AttributeValue value,      Method setter){
      }
      @Override public Object unmarshall(      AttributeValue value){
        return null;
      }
    }
;
    mock.queue.add(unmarshaller2);
    result=sut.getUnmarshaller(TestClass.class.getMethod("getInt"),TestClass.class.getMethod("setInt",int.class));
    Assert.assertSame(unmarshaller2,result);
  }
}
