public class ProfileCredentialsProviderTest {
  private static final String DEFAULT_PROFILE_NAME="default";
  private static File profileLocation=null;
  @BeforeClass public static void setUp(){
    profileLocation=ProfileResourceLoader.profilesContainingOtherConfiguration().asFile();
  }
  private ProfileCredentialsProvider newProvider(){
    return new ProfileCredentialsProvider(profileLocation.getAbsolutePath(),null);
  }
  @Test public void testDefault(){
    ProfileCredentialsProvider provider=newProvider();
    AWSCredentials credentials=provider.getCredentials();
    Assert.assertEquals("defaultSecretAccessKey",credentials.getAWSAccessKeyId());
    Assert.assertEquals("defaultAccessKey",credentials.getAWSSecretKey());
  }
  @Test public void testEnvironmentVariable() throws Exception {
    Map<String,String> immutableEnv=System.getenv();
    Class<?> unMap=Class.forName("java.util.Collections$UnmodifiableMap");
    Field m=unMap.getDeclaredField("m");
    m.setAccessible(true);
    @SuppressWarnings("unchecked") Map<String,String> env=(Map<String,String>)m.get(immutableEnv);
    try {
      env.put(AwsProfileNameLoader.AWS_PROFILE_ENVIRONMENT_VARIABLE,"test");
      ProfileCredentialsProvider provider=newProvider();
      AWSCredentials credentials=provider.getCredentials();
      Assert.assertEquals("test",credentials.getAWSAccessKeyId());
      Assert.assertEquals("test key",credentials.getAWSSecretKey());
    }
  finally {
      env.remove(AwsProfileNameLoader.AWS_PROFILE_ENVIRONMENT_VARIABLE);
    }
  }
  @Test public void testSystemProperty(){
    try {
      System.setProperty(AwsProfileNameLoader.AWS_PROFILE_SYSTEM_PROPERTY,"test");
      ProfileCredentialsProvider provider=newProvider();
      AWSCredentials credentials=provider.getCredentials();
      Assert.assertEquals("test",credentials.getAWSAccessKeyId());
      Assert.assertEquals("test key",credentials.getAWSSecretKey());
    }
  finally {
      System.setProperty(AwsProfileNameLoader.AWS_PROFILE_SYSTEM_PROPERTY,"");
    }
  }
  @Test public void testBoth() throws Exception {
    Map<String,String> immutableEnv=System.getenv();
    Class<?> unMap=Class.forName("java.util.Collections$UnmodifiableMap");
    Field m=unMap.getDeclaredField("m");
    m.setAccessible(true);
    @SuppressWarnings("unchecked") Map<String,String> env=(Map<String,String>)m.get(immutableEnv);
    try {
      env.put(AwsProfileNameLoader.AWS_PROFILE_ENVIRONMENT_VARIABLE,"test");
      System.setProperty(AwsProfileNameLoader.AWS_PROFILE_SYSTEM_PROPERTY,"bogus");
      ProfileCredentialsProvider provider=newProvider();
      AWSCredentials credentials=provider.getCredentials();
      Assert.assertEquals("test",credentials.getAWSAccessKeyId());
      Assert.assertEquals("test key",credentials.getAWSSecretKey());
    }
  finally {
      System.setProperty(AwsProfileNameLoader.AWS_PROFILE_SYSTEM_PROPERTY,"");
      env.remove(AwsProfileNameLoader.AWS_PROFILE_ENVIRONMENT_VARIABLE);
    }
  }
  @Test public void testExplicit() throws Exception {
    Map<String,String> immutableEnv=System.getenv();
    Class<?> unMap=Class.forName("java.util.Collections$UnmodifiableMap");
    Field m=unMap.getDeclaredField("m");
    m.setAccessible(true);
    @SuppressWarnings("unchecked") Map<String,String> env=(Map<String,String>)m.get(immutableEnv);
    try {
      env.put(AwsProfileNameLoader.AWS_PROFILE_ENVIRONMENT_VARIABLE,"test");
      System.setProperty(AwsProfileNameLoader.AWS_PROFILE_SYSTEM_PROPERTY,"test");
      ProfileCredentialsProvider provider=new ProfileCredentialsProvider(profileLocation.getAbsolutePath(),"bogus");
      try {
        provider.getCredentials();
        Assert.fail("Expected IllegalArgumentException");
      }
 catch (      IllegalArgumentException expected) {
      }
    }
  finally {
      System.setProperty(AwsProfileNameLoader.AWS_PROFILE_SYSTEM_PROPERTY,"");
      env.remove(AwsProfileNameLoader.AWS_PROFILE_ENVIRONMENT_VARIABLE);
    }
  }
  @Test public void testUpdate() throws Exception {
    ProfilesConfigFile fixture=new ProfilesConfigFile(ProfileResourceLoader.basicProfile().asFile());
    File modifiable=File.createTempFile("UpdatableProfile",".tst");
    ProfilesConfigFileWriter.dumpToFile(modifiable,true,fixture.getAllProfiles().values().toArray(new Profile[1]));
    ProfileCredentialsProvider test=new ProfileCredentialsProvider(modifiable.getPath(),null);
    AWSCredentials orig=test.getCredentials();
    Assert.assertEquals("defaultAccessKey",orig.getAWSAccessKeyId());
    Assert.assertEquals("defaultSecretAccessKey",orig.getAWSSecretKey());
    try {
      Thread.sleep(2000);
    }
 catch (    Exception e) {
    }
    Profile newProfile=new Profile(DEFAULT_PROFILE_NAME,new BasicAWSCredentials("newAccessKey","newSecretKey"));
    ProfilesConfigFileWriter.modifyOneProfile(modifiable,DEFAULT_PROFILE_NAME,newProfile);
    test.refresh();
    AWSCredentials updated=test.getCredentials();
    Assert.assertEquals("newAccessKey",updated.getAWSAccessKeyId());
    Assert.assertEquals("newSecretKey",updated.getAWSSecretKey());
  }
  @Test public void testForcedRefresh() throws Exception {
    ProfilesConfigFile profilesConfigFileBeforeRefresh=new ProfilesConfigFile(ProfileResourceLoader.basicProfile().asFile());
    File profilesFile=File.createTempFile("UpdatableProfile",".tst");
    ProfilesConfigFileWriter.dumpToFile(profilesFile,true,profilesConfigFileBeforeRefresh.getAllProfiles().values().toArray(new Profile[1]));
    ProfileCredentialsProvider profileCredentialsProvider=new ProfileCredentialsProvider(profilesFile.getPath(),null);
    Thread.sleep(1000);
    ProfilesConfigFile profilesConfigFileAfterRefresh=new ProfilesConfigFile(ProfileResourceLoader.basicProfile2().asFile());
    ProfilesConfigFileWriter.dumpToFile(profilesFile,true,profilesConfigFileAfterRefresh.getAllProfiles().values().toArray(new Profile[1]));
    profileCredentialsProvider.setRefreshForceIntervalNanos(1l);
    AWSCredentials credentialsAfterRefresh=profileCredentialsProvider.getCredentials();
    Assert.assertEquals("credentialsAfterRefresh AWSAccessKeyId","accessKey2",credentialsAfterRefresh.getAWSAccessKeyId());
    Assert.assertEquals("credentialsAfterRefresh AWSSecretKey","secretAccessKey2",credentialsAfterRefresh.getAWSSecretKey());
  }
  @Test public void testRefresh() throws Exception {
    ProfilesConfigFile profilesConfigFileBeforeRefresh=new ProfilesConfigFile(ProfileResourceLoader.basicProfile().asFile());
    File profilesFile=File.createTempFile("UpdatableProfile",".tst");
    ProfilesConfigFileWriter.dumpToFile(profilesFile,true,profilesConfigFileBeforeRefresh.getAllProfiles().values().toArray(new Profile[1]));
    ProfileCredentialsProvider profileCredentialsProvider=new ProfileCredentialsProvider(profilesFile.getPath(),null);
    Thread.sleep(1000);
    ProfilesConfigFile profilesConfigFileAfterRefresh=new ProfilesConfigFile(ProfileResourceLoader.basicProfile2().asFile());
    ProfilesConfigFileWriter.dumpToFile(profilesFile,true,profilesConfigFileAfterRefresh.getAllProfiles().values().toArray(new Profile[1]));
    profileCredentialsProvider.setRefreshIntervalNanos(1l);
    AWSCredentials credentialsAfterRefresh=profileCredentialsProvider.getCredentials();
    Assert.assertEquals("credentialsAfterRefresh AWSAccessKeyId","accessKey2",credentialsAfterRefresh.getAWSAccessKeyId());
    Assert.assertEquals("credentialsAfterRefresh AWSSecretKey","secretAccessKey2",credentialsAfterRefresh.getAWSSecretKey());
  }
  @Test public void testAssumeRole() throws Exception {
    ProfilesConfigFile profilesFile=new ProfilesConfigFile(ProfileResourceLoader.profileWithRole().asFile(),new ProfileCredentialsService(){
      @Override public AWSCredentialsProvider getAssumeRoleCredentialsProvider(      RoleInfo targetRoleInfo){
        AWSCredentials credentials=targetRoleInfo.getLongLivedCredentialsProvider().getCredentials();
        Assert.assertEquals("sourceProfile AWSAccessKeyId","defaultAccessKey",credentials.getAWSAccessKeyId());
        Assert.assertEquals("sourceProfile AWSSecretKey","defaultSecretAccessKey",credentials.getAWSSecretKey());
        Assert.assertEquals("role_arn","arn:aws:iam::123456789012:role/testRole",targetRoleInfo.getRoleArn());
        Assert.assertNull("external_id",targetRoleInfo.getExternalId());
        Assert.assertTrue("role_session_name",targetRoleInfo.getRoleSessionName().startsWith("aws-sdk-java-"));
        return new StaticCredentialsProvider(new BasicAWSCredentials("sessionAccessKey","sessionSecretKey"));
      }
    }
);
    ProfileCredentialsProvider profileCredentialsProvider=new ProfileCredentialsProvider(profilesFile,"test");
    AWSCredentials credentials=profileCredentialsProvider.getCredentials();
    Assert.assertEquals("sessionAccessKey",credentials.getAWSAccessKeyId());
    Assert.assertEquals("sessionSecretKey",credentials.getAWSSecretKey());
  }
  @Test public void testAssumeRoleWithNameAndExternalId() throws Exception {
    ProfilesConfigFile profilesFile=new ProfilesConfigFile(ProfileResourceLoader.profileWithRole2().asFile(),new ProfileCredentialsService(){
      @Override public AWSCredentialsProvider getAssumeRoleCredentialsProvider(      RoleInfo targetRoleInfo){
        AWSCredentials credentials=targetRoleInfo.getLongLivedCredentialsProvider().getCredentials();
        Assert.assertEquals("sourceProfile AWSAccessKeyId","defaultAccessKey",credentials.getAWSAccessKeyId());
        Assert.assertEquals("sourceProfile AWSSecretKey","defaultSecretAccessKey",credentials.getAWSSecretKey());
        Assert.assertEquals("role_arn","arn:aws:iam::123456789012:role/testRole",targetRoleInfo.getRoleArn());
        Assert.assertEquals("external_id","testExternalId",targetRoleInfo.getExternalId());
        Assert.assertEquals("role_session_name","testSessionName",targetRoleInfo.getRoleSessionName());
        return new StaticCredentialsProvider(new BasicAWSCredentials("sessionAccessKey","sessionSecretKey"));
      }
    }
);
    ProfileCredentialsProvider profileCredentialsProvider=new ProfileCredentialsProvider(profilesFile,"test");
    AWSCredentials credentials=profileCredentialsProvider.getCredentials();
    Assert.assertEquals("sessionAccessKey",credentials.getAWSAccessKeyId());
    Assert.assertEquals("sessionSecretKey",credentials.getAWSSecretKey());
  }
  @Test public void testAssumeRoleWithSourceAfterRole() throws Exception {
    ProfilesConfigFile profilesFile=new ProfilesConfigFile(ProfileResourceLoader.profileWithSourceAfterRole().asFile(),new ProfileCredentialsService(){
      @Override public AWSCredentialsProvider getAssumeRoleCredentialsProvider(      RoleInfo targetRoleInfo){
        AWSCredentials credentials=targetRoleInfo.getLongLivedCredentialsProvider().getCredentials();
        Assert.assertEquals("sourceProfile AWSAccessKeyId","defaultAccessKey",credentials.getAWSAccessKeyId());
        Assert.assertEquals("sourceProfile AWSSecretKey","defaultSecretAccessKey",credentials.getAWSSecretKey());
        Assert.assertEquals("role_arn","arn:aws:iam::123456789012:role/testRole",targetRoleInfo.getRoleArn());
        Assert.assertNull("external_id",targetRoleInfo.getExternalId());
        Assert.assertTrue("role_session_name",targetRoleInfo.getRoleSessionName().startsWith("aws-sdk-java-"));
        return new StaticCredentialsProvider(new BasicAWSCredentials("sessionAccessKey","sessionSecretKey"));
      }
    }
);
    ProfileCredentialsProvider profileCredentialsProvider=new ProfileCredentialsProvider(profilesFile,"test");
    AWSCredentials credentials=profileCredentialsProvider.getCredentials();
    Assert.assertEquals("sessionAccessKey",credentials.getAWSAccessKeyId());
    Assert.assertEquals("sessionSecretKey",credentials.getAWSSecretKey());
  }
}
