/** 
 * Unit tests for the utility methods that parse information from AWS URLs. 
 */
public class AwsHostNameUtilsTest {
  private static final URI IAM_ENDPOINT=URI.create("https://iam.amazonaws.com");
  private static final URI IAM_REGION_ENDPOINT=URI.create("https://iam.us-west-2.amazonaws.com");
  private static final URI EC2_REGION_ENDPOINT=URI.create("https://ec2.us-west-2.amazonaws.com");
  private static final URI S3_ENDPOINT=URI.create("https://s3.amazonaws.com");
  private static final URI S3_BUCKET_ENDPOINT=URI.create("https://bucket.name.with.periods.s3.amazonaws.com");
  private static final URI S3_REGION_ENDPOINT=URI.create("https://s3-eu-west-1.amazonaws.com");
  private static final URI S3_BUCKET_REGION_ENDPOINT=URI.create("https://bucket.name.with.periods.s3-eu-west-1.amazonaws.com");
  @Test public void testParseServiceName(){
    assertEquals("iam",AwsHostNameUtils.parseServiceName(IAM_ENDPOINT));
    assertEquals("iam",AwsHostNameUtils.parseServiceName(IAM_REGION_ENDPOINT));
    assertEquals("ec2",AwsHostNameUtils.parseServiceName(EC2_REGION_ENDPOINT));
    assertEquals("s3",AwsHostNameUtils.parseServiceName(S3_ENDPOINT));
    assertEquals("s3",AwsHostNameUtils.parseServiceName(S3_BUCKET_ENDPOINT));
    assertEquals("s3",AwsHostNameUtils.parseServiceName(S3_REGION_ENDPOINT));
    assertEquals("s3",AwsHostNameUtils.parseServiceName(S3_BUCKET_REGION_ENDPOINT));
  }
  @Test public void testStandardNoHint(){
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("iam.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("iam.us-west-2.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("ec2.us-west-2.amazonaws.com",null));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("s3.amazonaws.com",null));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("bucket.name.s3.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("s3-eu-west-1.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("s3.eu-west-1.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3-eu-west-1.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3.eu-west-1.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("cloudsearch.us-west-2.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("domain.us-west-2.cloudsearch.amazonaws.com",null));
  }
  @Test public void testStandard(){
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("iam.amazonaws.com","iam"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("iam.us-west-2.amazonaws.com","iam"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("ec2.us-west-2.amazonaws.com","ec2"));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("s3.amazonaws.com","s3"));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("bucket.name.s3.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("s3-eu-west-1.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("s3.eu-west-1.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3-eu-west-1.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3.eu-west-1.amazonaws.com","s3"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("cloudsearch.us-west-2.amazonaws.com","cloudsearch"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegionName("domain.us-west-2.cloudsearch.amazonaws.com","cloudsearch"));
  }
  @Test public void testBJS(){
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegionName("iam.cn-north-1.amazonaws.com.cn","iam"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegionName("ec2.cn-north-1.amazonaws.com.cn","ec2"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegionName("s3.cn-north-1.amazonaws.com.cn","s3"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3.cn-north-1.amazonaws.com.cn","s3"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegionName("cloudsearch.cn-north-1.amazonaws.com.cn","cloudsearch"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegionName("domain.cn-north-1.cloudsearch.amazonaws.com.cn","cloudsearch"));
  }
  @Test public void testS3SpecialRegions(){
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("s3-external-1.amazonaws.com",null));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3-external-1.amazonaws.com",null));
    assertEquals("us-gov-west-1",AwsHostNameUtils.parseRegionName("s3-fips-us-gov-west-1.amazonaws.com",null));
    assertEquals("us-gov-west-1",AwsHostNameUtils.parseRegionName("bucket.name.with.periods.s3-fips-us-gov-west-1.amazonaws.com",null));
  }
  @Test public void testParseRegionWithStandardEndpointsNoHint(){
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("iam.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("iam.us-west-2.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("ec2.us-west-2.amazonaws.com",null));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("s3.amazonaws.com",null));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("bucket.name.s3.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("s3-eu-west-1.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("s3.eu-west-1.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3-eu-west-1.amazonaws.com",null));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3.eu-west-1.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("cloudsearch.us-west-2.amazonaws.com",null));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("domain.us-west-2.cloudsearch.amazonaws.com",null));
  }
  @Test public void testParseRegionWithStandardEndpointsWithServiceHint(){
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("iam.amazonaws.com","iam"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("iam.us-west-2.amazonaws.com","iam"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("ec2.us-west-2.amazonaws.com","ec2"));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("s3.amazonaws.com","s3"));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("bucket.name.s3.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("s3-eu-west-1.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("s3.eu-west-1.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3-eu-west-1.amazonaws.com","s3"));
    assertEquals("eu-west-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3.eu-west-1.amazonaws.com","s3"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("cloudsearch.us-west-2.amazonaws.com","cloudsearch"));
    assertEquals("us-west-2",AwsHostNameUtils.parseRegion("domain.us-west-2.cloudsearch.amazonaws.com","cloudsearch"));
  }
  @Test public void testParseRegionWithBJSEndpoints(){
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegion("iam.cn-north-1.amazonaws.com.cn","iam"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegion("ec2.cn-north-1.amazonaws.com.cn","ec2"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegion("s3.cn-north-1.amazonaws.com.cn","s3"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3.cn-north-1.amazonaws.com.cn","s3"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegion("cloudsearch.cn-north-1.amazonaws.com.cn","cloudsearch"));
    assertEquals("cn-north-1",AwsHostNameUtils.parseRegion("domain.cn-north-1.cloudsearch.amazonaws.com.cn","cloudsearch"));
  }
  @Test public void testParseRegionWithS3SpecialRegions(){
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("s3-external-1.amazonaws.com",null));
    assertEquals("us-east-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3-external-1.amazonaws.com",null));
    assertEquals("us-gov-west-1",AwsHostNameUtils.parseRegion("s3-fips-us-gov-west-1.amazonaws.com",null));
    assertEquals("us-gov-west-1",AwsHostNameUtils.parseRegion("bucket.name.with.periods.s3-fips-us-gov-west-1.amazonaws.com",null));
  }
  @Test public void testParseRegionWithIpv4(){
    assertNull(AwsHostNameUtils.parseRegion("54.231.16.200",null));
  }
}
