public class FullUriCredentialsEndpointProviderTest {
  private static final EnvironmentVariableHelper helper=new EnvironmentVariableHelper();
  private static final FullUriCredentialsEndpointProvider sut=new FullUriCredentialsEndpointProvider();
  @AfterClass public static void restoreOriginal(){
    helper.reset();
  }
  @Test public void takesUriFromTheEnvironmentVariable() throws URISyntaxException {
    String fullUri="http://localhost:8080/endpoint";
    helper.set(ContainerCredentialsProvider.CONTAINER_CREDENTIALS_FULL_URI,fullUri);
    assertThat(sut.getCredentialsEndpoint().toString(),equalTo(fullUri));
  }
  @Test public void theLoopbackAddressIsAlsoAcceptable() throws URISyntaxException {
    String fullUri="http://127.0.0.1:9851/endpoint";
    helper.set(ContainerCredentialsProvider.CONTAINER_CREDENTIALS_FULL_URI,fullUri);
    assertThat(sut.getCredentialsEndpoint().toString(),equalTo(fullUri));
  }
  @Test(expected=SdkClientException.class) public void onlyLocalHostAddressesAreValid() throws URISyntaxException {
    helper.set(ContainerCredentialsProvider.CONTAINER_CREDENTIALS_FULL_URI,"https://google.com/endpoint");
    sut.getCredentialsEndpoint();
  }
  @Test public void authorizationHeaderIsPresentIfEnvironmentVariableSet(){
    helper.set(ContainerCredentialsProvider.CONTAINER_AUTHORIZATION_TOKEN,"hello authorized world!");
    Map<String,String> headers=sut.getHeaders();
    assertThat(headers.size(),equalTo(1));
    assertThat(headers,hasEntry("Authorization","hello authorized world!"));
  }
}
