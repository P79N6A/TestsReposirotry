import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/immutable/primitive"

fileName(primitive) ::= "ImmutableObject<primitive.name>HashMapKeysViewTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package com.gs.collections.impl.map.immutable.primitive;

import com.gs.collections.api.LazyIterable;
import com.gs.collections.api.map.primitive.ImmutableObject<name>Map;
import com.gs.collections.impl.map.mutable.primitive.Object<name>HashMap;
import com.gs.collections.impl.map.primitive.AbstractObject<name>MapKeysViewTestCase;

/**
 * JUnit test for {@link ImmutableObject<name>HashMap#keysView()}.
 * This file was automatically generated from template file immutableObjectPrimitiveHashMapKeysViewTest.stg.
 */
public class ImmutableObject<name>HashMapKeysViewTest extends AbstractObject<name>MapKeysViewTestCase
{
    @Override
    public \<T> ImmutableObject<name>Map\<T> newWithKeysValues(T key1, <type> value1, T key2, <type> value2, T key3, <type> value3)
    {
        return Object<name>HashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3).toImmutable();
    }

    @Override
    protected \<T> LazyIterable\<T> newWith(T... elements)
    {
        Object<name>HashMap\<T> map = new Object<name>HashMap\<>();
        for (int i = 0; i \< elements.length; i++)
        {
            map.put(elements[i], <(castIntToNarrowType.(type))("i")>);
        }
        return map.toImmutable().keysView();
    }
}

>>
