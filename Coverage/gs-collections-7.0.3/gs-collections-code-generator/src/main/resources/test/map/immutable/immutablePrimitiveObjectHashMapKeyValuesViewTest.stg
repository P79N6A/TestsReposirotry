import "copyright.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/immutable/primitive"

fileName(primitive) ::= "Immutable<primitive.name>ObjectMapKeyValuesViewTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.map.immutable.primitive;

import com.gs.collections.api.map.primitive.Immutable<name>ObjectMap;
import com.gs.collections.impl.map.mutable.primitive.<name>ObjectHashMap;
import com.gs.collections.impl.map.primitive.Abstract<name>ObjectMapKeyValuesViewTestCase;

/**
 * JUnit test for {@link Immutable<name>ObjectHashMap#keyValuesView()}.
 * This file was automatically generated from template file immutablePrimitiveObjectHashMapKeyValuesViewTest.stg.
 */
public class Immutable<name>ObjectMapKeyValuesViewTest extends Abstract<name>ObjectMapKeyValuesViewTestCase
{
    @Override
    public Immutable<name>ObjectMap\<Integer> newWithKeysValues(<type> key1, int value1, <type> key2, int value2, <type> key3, int value3)
    {
        return <name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3).toImmutable();
    }

    @Override
    public Immutable<name>ObjectMap\<Integer> newWithKeysValues(<type> key1, int value1, <type> key2, int value2)
    {
        return <name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2).toImmutable();
    }

    @Override
    public Immutable<name>ObjectMap\<Integer> newWithKeysValues(<type> key1, int value1)
    {
        return <name>ObjectHashMap.newWithKeysValues(key1, value1).toImmutable();
    }

    @Override
    public Immutable<name>ObjectMap\<Integer> newEmpty()
    {
        return <name>ObjectHashMap.\<Integer>newMap().toImmutable();
    }
}

>>
